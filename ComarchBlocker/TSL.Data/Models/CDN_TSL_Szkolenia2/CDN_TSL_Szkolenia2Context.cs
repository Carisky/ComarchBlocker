using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TSL.Data.Models.CDN_TSL_Szkolenia2;

public partial class CDN_TSL_Szkolenia2Context : DbContext
{
    public CDN_TSL_Szkolenia2Context(DbContextOptions<CDN_TSL_Szkolenia2Context> options)
        : base(options)
    {
    }

    public virtual DbSet<AkordDefinicja> AkordDefinicjas { get; set; }

    public virtual DbSet<AkordProgre> AkordProgres { get; set; }

    public virtual DbSet<Akordy> Akordies { get; set; }

    public virtual DbSet<AkordyHist> AkordyHists { get; set; }

    public virtual DbSet<AkordyHistWartosci> AkordyHistWartoscis { get; set; }

    public virtual DbSet<Aktualizacje> Aktualizacjes { get; set; }

    public virtual DbSet<AktualizacjeBlokBaza> AktualizacjeBlokBazas { get; set; }

    public virtual DbSet<AnalizyBiparam> AnalizyBiparams { get; set; }

    public virtual DbSet<AnkAnkietyAnkieterzy> AnkAnkietyAnkieterzies { get; set; }

    public virtual DbSet<AnkAnkietyNag> AnkAnkietyNags { get; set; }

    public virtual DbSet<AnkAnkietyOdp> AnkAnkietyOdps { get; set; }

    public virtual DbSet<AnkAnkietyPyt> AnkAnkietyPyts { get; set; }

    public virtual DbSet<AnkGrupyPytan> AnkGrupyPytans { get; set; }

    public virtual DbSet<AnkSlownikPytan> AnkSlownikPytans { get; set; }

    public virtual DbSet<AnkSlownikPytanOdp> AnkSlownikPytanOdps { get; set; }

    public virtual DbSet<AnkSzablonOdpElem> AnkSzablonOdpElems { get; set; }

    public virtual DbSet<AnkSzablonOdpNag> AnkSzablonOdpNags { get; set; }

    public virtual DbSet<AnkWzorzecAnkietyAnkietowani> AnkWzorzecAnkietyAnkietowanis { get; set; }

    public virtual DbSet<AnkWzorzecAnkietyNag> AnkWzorzecAnkietyNags { get; set; }

    public virtual DbSet<AnkWzorzecAnkietyPyt> AnkWzorzecAnkietyPyts { get; set; }

    public virtual DbSet<AtrybutyAltumView> AtrybutyAltumViews { get; set; }

    public virtual DbSet<AtrybutyKlasyAltumView> AtrybutyKlasyAltumViews { get; set; }

    public virtual DbSet<AtrybutyView> AtrybutyViews { get; set; }

    public virtual DbSet<AutoEwid> AutoEwids { get; set; }

    public virtual DbSet<AutoKoszty> AutoKoszties { get; set; }

    public virtual DbSet<AutoPrzejazd> AutoPrzejazds { get; set; }

    public virtual DbSet<AutoRozlicz> AutoRozliczs { get; set; }

    public virtual DbSet<AutoTrasy> AutoTrasies { get; set; }

    public virtual DbSet<Awizo> Awizos { get; set; }

    public virtual DbSet<AwizoOpakowanium> AwizoOpakowania { get; set; }

    public virtual DbSet<AwizoTowary> AwizoTowaries { get; set; }

    public virtual DbSet<AwizoTypyOpakowan> AwizoTypyOpakowans { get; set; }

    public virtual DbSet<AwizoTypyTransportu> AwizoTypyTransportus { get; set; }

    public virtual DbSet<AwizoWarunkiDostawy> AwizoWarunkiDostawies { get; set; }

    public virtual DbSet<BnkBomw> BnkBomws { get; set; }

    public virtual DbSet<BnkCertyfikaty> BnkCertyfikaties { get; set; }

    public virtual DbSet<BnkDokElem> BnkDokElems { get; set; }

    public virtual DbSet<BnkDokNag> BnkDokNags { get; set; }

    public virtual DbSet<BnkFormatyElem> BnkFormatyElems { get; set; }

    public virtual DbSet<BnkFormatyNag> BnkFormatyNags { get; set; }

    public virtual DbSet<BnkNazwy> BnkNazwies { get; set; }

    public virtual DbSet<BnkRachZakazy> BnkRachZakazies { get; set; }

    public virtual DbSet<BnkRachunki> BnkRachunkis { get; set; }

    public virtual DbSet<BnkRaporty> BnkRaporties { get; set; }

    public virtual DbSet<BnkRozKwoty> BnkRozKwoties { get; set; }

    public virtual DbSet<BnkRozKwotyMw> BnkRozKwotyMws { get; set; }

    public virtual DbSet<BnkRozKwotyView> BnkRozKwotyViews { get; set; }

    public virtual DbSet<BnkRozRelacje> BnkRozRelacjes { get; set; }

    public virtual DbSet<BnkSposobyLogowanium> BnkSposobyLogowania { get; set; }

    public virtual DbSet<BnkZapisy> BnkZapisies { get; set; }

    public virtual DbSet<BnkZapisyCdcsepainfo> BnkZapisyCdcsepainfos { get; set; }

    public virtual DbSet<BnkZdarzeniaAutoryzacje> BnkZdarzeniaAutoryzacjes { get; set; }

    public virtual DbSet<BnkZdarzeniaCdcsepainfo> BnkZdarzeniaCdcsepainfos { get; set; }

    public virtual DbSet<BnkZdarzeniaPodpisy> BnkZdarzeniaPodpisies { get; set; }

    public virtual DbSet<BnkZdarzenium> BnkZdarzenia { get; set; }

    public virtual DbSet<Boelem> Boelems { get; set; }

    public virtual DbSet<Bonag> Bonags { get; set; }

    public virtual DbSet<BrpAgregaty> BrpAgregaties { get; set; }

    public virtual DbSet<BudzetElem> BudzetElems { get; set; }

    public virtual DbSet<BudzetNag> BudzetNags { get; set; }

    public virtual DbSet<BudzetView> BudzetViews { get; set; }

    public virtual DbSet<Centra> Centras { get; set; }

    public virtual DbSet<CentraKierownicy> CentraKierownicies { get; set; }

    public virtual DbSet<CentraLink> CentraLinks { get; set; }

    public virtual DbSet<CfgInpostKontaAllegro> CfgInpostKontaAllegros { get; set; }

    public virtual DbSet<CfgKlucze> CfgKluczes { get; set; }

    public virtual DbSet<CfgKurierzy> CfgKurierzies { get; set; }

    public virtual DbSet<CfgKurierzyDefPaczki> CfgKurierzyDefPaczkis { get; set; }

    public virtual DbSet<CfgKurierzyPobranieFormyPlat> CfgKurierzyPobranieFormyPlats { get; set; }

    public virtual DbSet<CfgTowarAutonumerSerie> CfgTowarAutonumerSeries { get; set; }

    public virtual DbSet<CfgWartosci> CfgWartoscis { get; set; }

    public virtual DbSet<CrmKontaktyCykl> CrmKontaktyCykls { get; set; }

    public virtual DbSet<CrmKontaktyParentView> CrmKontaktyParentViews { get; set; }

    public virtual DbSet<CrmKontaktyView> CrmKontaktyViews { get; set; }

    public virtual DbSet<CrmOsobyView> CrmOsobyViews { get; set; }

    public virtual DbSet<CrmUczestnicy> CrmUczestnicies { get; set; }

    public virtual DbSet<Crmdokumenty> Crmdokumenties { get; set; }

    public virtual DbSet<Crmkontakty> Crmkontakties { get; set; }

    public virtual DbSet<DaneBinarne> DaneBinarnes { get; set; }

    public virtual DbSet<DaneBinarneLinki> DaneBinarneLinkis { get; set; }

    public virtual DbSet<DaneKad> DaneKads { get; set; }

    public virtual DbSet<DaneKadMod> DaneKadMods { get; set; }

    public virtual DbSet<DaneKadModRelacje> DaneKadModRelacjes { get; set; }

    public virtual DbSet<DaneKadStr> DaneKadStrs { get; set; }

    public virtual DbSet<DanePlac> DanePlacs { get; set; }

    public virtual DbSet<DanePlacMod> DanePlacMods { get; set; }

    public virtual DbSet<DefAtrElem> DefAtrElems { get; set; }

    public virtual DbSet<DefAtrybuty> DefAtrybuties { get; set; }

    public virtual DbSet<DefCeny> DefCenies { get; set; }

    public virtual DbSet<DefEtapy> DefEtapies { get; set; }

    public virtual DbSet<DefProjekty> DefProjekties { get; set; }

    public virtual DbSet<DefProjektyView> DefProjektyViews { get; set; }

    public virtual DbSet<DefinicjaZmian> DefinicjaZmians { get; set; }

    public virtual DbSet<DefinicjaZmianPola> DefinicjaZmianPolas { get; set; }

    public virtual DbSet<DefinicjeStref> DefinicjeStrefs { get; set; }

    public virtual DbSet<DeklCuk> DeklCuks { get; set; }

    public virtual DbSet<DeklElem> DeklElems { get; set; }

    public virtual DbSet<DeklKedu> DeklKedus { get; set; }

    public virtual DbSet<DeklNag> DeklNags { get; set; }

    public virtual DbSet<DeklStr> DeklStrs { get; set; }

    public virtual DbSet<DeklV27> DeklV27s { get; set; }

    public virtual DbSet<DeklVuek> DeklVueks { get; set; }

    public virtual DbSet<DeklWydr> DeklWydrs { get; set; }

    public virtual DbSet<DeklZaklady> DeklZakladies { get; set; }

    public virtual DbSet<DekretyElem> DekretyElems { get; set; }

    public virtual DbSet<DekretyKontum> DekretyKonta { get; set; }

    public virtual DbSet<DekretyNag> DekretyNags { get; set; }

    public virtual DbSet<DetalAtrybuty> DetalAtrybuties { get; set; }

    public virtual DbSet<DetalCeny> DetalCenies { get; set; }

    public virtual DbSet<DetalFormyPlatnosci> DetalFormyPlatnoscis { get; set; }

    public virtual DbSet<DetalKntOsoby> DetalKntOsobies { get; set; }

    public virtual DbSet<DetalKontrahenci> DetalKontrahencis { get; set; }

    public virtual DbSet<DetalOperator> DetalOperators { get; set; }

    public virtual DbSet<DetalPlatnosciDokumentu> DetalPlatnosciDokumentus { get; set; }

    public virtual DbSet<DetalRaporty> DetalRaporties { get; set; }

    public virtual DbSet<DetalRoliczeniaZaleglosci> DetalRoliczeniaZalegloscis { get; set; }

    public virtual DbSet<DetalStanFormyPlatnosci> DetalStanFormyPlatnoscis { get; set; }

    public virtual DbSet<DetalStanKonfiguracja> DetalStanKonfiguracjas { get; set; }

    public virtual DbSet<DetalStanKontrahenci> DetalStanKontrahencis { get; set; }

    public virtual DbSet<DetalStanOpakElem> DetalStanOpakElems { get; set; }

    public virtual DbSet<DetalStanOpakNag> DetalStanOpakNags { get; set; }

    public virtual DbSet<DetalStanOperatorzy> DetalStanOperatorzies { get; set; }

    public virtual DbSet<DetalStanPlatnosciDokumentu> DetalStanPlatnosciDokumentus { get; set; }

    public virtual DbSet<DetalStanStawkiVat> DetalStanStawkiVats { get; set; }

    public virtual DbSet<DetalStanTowary> DetalStanTowaries { get; set; }

    public virtual DbSet<DetalStanTraElem> DetalStanTraElems { get; set; }

    public virtual DbSet<DetalStanTraNag> DetalStanTraNags { get; set; }

    public virtual DbSet<DetalStanTwrEan> DetalStanTwrEans { get; set; }

    public virtual DbSet<DetalStanTwrJmz> DetalStanTwrJmzs { get; set; }

    public virtual DbSet<DetalStanZapisyKb> DetalStanZapisyKbs { get; set; }

    public virtual DbSet<DetalStanZmiany> DetalStanZmianies { get; set; }

    public virtual DbSet<DetalStanowiska> DetalStanowiskas { get; set; }

    public virtual DbSet<DetalTraElem> DetalTraElems { get; set; }

    public virtual DbSet<DetalTraNag> DetalTraNags { get; set; }

    public virtual DbSet<DetalWalKursy> DetalWalKursies { get; set; }

    public virtual DbSet<DetalZakazyMagazyn> DetalZakazyMagazyns { get; set; }

    public virtual DbSet<DetalZapisyKb> DetalZapisyKbs { get; set; }

    public virtual DbSet<DlgDokumenty> DlgDokumenties { get; set; }

    public virtual DbSet<DlgElem> DlgElems { get; set; }

    public virtual DbSet<DlgNag> DlgNags { get; set; }

    public virtual DbSet<DlgTrasy> DlgTrasies { get; set; }

    public virtual DbSet<DlgZaliczki> DlgZaliczkis { get; set; }

    public virtual DbSet<Dodatki> Dodatkis { get; set; }

    public virtual DbSet<DodatkiHist> DodatkiHists { get; set; }

    public virtual DbSet<DodatkiUmowy> DodatkiUmowies { get; set; }

    public virtual DbSet<DokAtrybuty> DokAtrybuties { get; set; }

    public virtual DbSet<DokDefinicje> DokDefinicjes { get; set; }

    public virtual DbSet<DokDefinicjeView> DokDefinicjeViews { get; set; }

    public virtual DbSet<DokKodyJpkv7> DokKodyJpkv7s { get; set; }

    public virtual DbSet<DokNag> DokNags { get; set; }

    public virtual DbSet<DokNagEtapy> DokNagEtapies { get; set; }

    public virtual DbSet<DokNagEtapyHistorium> DokNagEtapyHistoria { get; set; }

    public virtual DbSet<DokNagEtapyKolejne> DokNagEtapyKolejnes { get; set; }

    public virtual DbSet<DokNagEtapyView> DokNagEtapyViews { get; set; }

    public virtual DbSet<DokNagPliki> DokNagPlikis { get; set; }

    public virtual DbSet<DokNagPlikiView> DokNagPlikiViews { get; set; }

    public virtual DbSet<DokNagProcesEtapy> DokNagProcesEtapies { get; set; }

    public virtual DbSet<DokNagProcesEtapyView> DokNagProcesEtapyViews { get; set; }

    public virtual DbSet<DokNagView> DokNagViews { get; set; }

    public virtual DbSet<DokPodmioty> DokPodmioties { get; set; }

    public virtual DbSet<DokRelacje> DokRelacjes { get; set; }

    public virtual DbSet<DokumentyDostawyElem> DokumentyDostawyElems { get; set; }

    public virtual DbSet<DokumentyDostawyHistorium> DokumentyDostawyHistoria { get; set; }

    public virtual DbSet<DokumentyDostawyNag> DokumentyDostawyNags { get; set; }

    public virtual DbSet<DokumentyKbview> DokumentyKbviews { get; set; }

    public virtual DbSet<DokumentyKseF> DokumentyKseFs { get; set; }

    public virtual DbSet<DokumentyKsiegowaneView> DokumentyKsiegowaneViews { get; set; }

    public virtual DbSet<Dpd> Dpds { get; set; }

    public virtual DbSet<DzialZakazy> DzialZakazies { get; set; }

    public virtual DbSet<Dzialy> Dzialies { get; set; }

    public virtual DbSet<DzialyView> DzialyViews { get; set; }

    public virtual DbSet<DziennikZakazy> DziennikZakazies { get; set; }

    public virtual DbSet<Dzienniki> Dziennikis { get; set; }

    public virtual DbSet<ESklepAdresyNadawczeRelacje> ESklepAdresyNadawczeRelacjes { get; set; }

    public virtual DbSet<ESklepFormyPlatnosci> ESklepFormyPlatnoscis { get; set; }

    public virtual DbSet<ESklepFormyPlatnosciOnline> ESklepFormyPlatnosciOnlines { get; set; }

    public virtual DbSet<ESklepKntRelacje> ESklepKntRelacjes { get; set; }

    public virtual DbSet<ESklepMagazyny> ESklepMagazynies { get; set; }

    public virtual DbSet<ESklepRocechy> ESklepRocechies { get; set; }

    public virtual DbSet<ESklepStanowiska> ESklepStanowiskas { get; set; }

    public virtual DbSet<ESklepWaluty> ESklepWaluties { get; set; }

    public virtual DbSet<EwidDodElem> EwidDodElems { get; set; }

    public virtual DbSet<EwidDodNag> EwidDodNags { get; set; }

    public virtual DbSet<FaCyklElem> FaCyklElems { get; set; }

    public virtual DbSet<FaCyklKnt> FaCyklKnts { get; set; }

    public virtual DbSet<FaCyklNag> FaCyklNags { get; set; }

    public virtual DbSet<FaCyklTwrKnt> FaCyklTwrKnts { get; set; }

    public virtual DbSet<Firma> Firmas { get; set; }

    public virtual DbSet<FormatyRcp> FormatyRcps { get; set; }

    public virtual DbSet<FormyPlatnWaluty> FormyPlatnWaluties { get; set; }

    public virtual DbSet<FormyPlatnosci> FormyPlatnoscis { get; set; }

    public virtual DbSet<FormyPlatnosciDf> FormyPlatnosciDfs { get; set; }

    public virtual DbSet<FrsPromocje> FrsPromocjes { get; set; }

    public virtual DbSet<GrupaZakazy> GrupaZakazies { get; set; }

    public virtual DbSet<Grupy> Grupies { get; set; }

    public virtual DbSet<GrupyJezykObcy> GrupyJezykObcies { get; set; }

    public virtual DbSet<GrupyKontElem> GrupyKontElems { get; set; }

    public virtual DbSet<GrupyKontNag> GrupyKontNags { get; set; }

    public virtual DbSet<GrupyPotrSkladniki> GrupyPotrSkladnikis { get; set; }

    public virtual DbSet<GrupyPotracen> GrupyPotracens { get; set; }

    public virtual DbSet<Harmonogram> Harmonograms { get; set; }

    public virtual DbSet<HarmonogramListum> HarmonogramLista { get; set; }

    public virtual DbSet<HisWyksztal> HisWyksztals { get; set; }

    public virtual DbSet<HisZatrud> HisZatruds { get; set; }

    public virtual DbSet<HisZatrudOkre> HisZatrudOkres { get; set; }

    public virtual DbSet<Idn> Idns { get; set; }

    public virtual DbSet<IgaleriaAtrWartosci> IgaleriaAtrWartoscis { get; set; }

    public virtual DbSet<IgaleriaAtrybuty> IgaleriaAtrybuties { get; set; }

    public virtual DbSet<IgaleriaDefAtrWartosci> IgaleriaDefAtrWartoscis { get; set; }

    public virtual DbSet<IgaleriaKategorie> IgaleriaKategories { get; set; }

    public virtual DbSet<IntrastatElem> IntrastatElems { get; set; }

    public virtual DbSet<IntrastatNag> IntrastatNags { get; set; }

    public virtual DbSet<KalendDni> KalendDnis { get; set; }

    public virtual DbSet<KalendDniGodz> KalendDniGodzs { get; set; }

    public virtual DbSet<Kalendarze> Kalendarzes { get; set; }

    public virtual DbSet<KartyKredytowe> KartyKredytowes { get; set; }

    public virtual DbSet<KasaChor> KasaChors { get; set; }

    public virtual DbSet<KatStawkiVat> KatStawkiVats { get; set; }

    public virtual DbSet<KatalogZakazy> KatalogZakazies { get; set; }

    public virtual DbSet<KatalogZakazyView> KatalogZakazyViews { get; set; }

    public virtual DbSet<Katalogi> Katalogis { get; set; }

    public virtual DbSet<KatalogiView> KatalogiViews { get; set; }

    public virtual DbSet<Kategorie> Kategories { get; set; }

    public virtual DbSet<KnTupusty> KnTupusties { get; set; }

    public virtual DbSet<KnfOdsetkiKbview> KnfOdsetkiKbviews { get; set; }

    public virtual DbSet<KntAtrybuty> KntAtrybuties { get; set; }

    public virtual DbSet<KntEsklepy> KntEsklepies { get; set; }

    public virtual DbSet<KntEsklepyPrzedstawiciele> KntEsklepyPrzedstawicieles { get; set; }

    public virtual DbSet<KntGrupy> KntGrupies { get; set; }

    public virtual DbSet<KntKarty> KntKarties { get; set; }

    public virtual DbSet<KntLinki> KntLinkis { get; set; }

    public virtual DbSet<KntOdbiorcy> KntOdbiorcies { get; set; }

    public virtual DbSet<KntOsoby> KntOsobies { get; set; }

    public virtual DbSet<KntPromocje> KntPromocjes { get; set; }

    public virtual DbSet<KntScalHist> KntScalHists { get; set; }

    public virtual DbSet<KntWeryfRachHist> KntWeryfRachHists { get; set; }

    public virtual DbSet<KntWeryfStatHist> KntWeryfStatHists { get; set; }

    public virtual DbSet<KntZamknMy> KntZamknMies { get; set; }

    public virtual DbSet<KodyCn> KodyCns { get; set; }

    public virtual DbSet<KodyJpkv7> KodyJpkv7s { get; set; }

    public virtual DbSet<KompensatyElem> KompensatyElems { get; set; }

    public virtual DbSet<KompensatyNag> KompensatyNags { get; set; }

    public virtual DbSet<Konfig> Konfigs { get; set; }

    public virtual DbSet<KonfigText> KonfigTexts { get; set; }

    public virtual DbSet<KontaAnView> KontaAnViews { get; set; }

    public virtual DbSet<KontaZakazy> KontaZakazies { get; set; }

    public virtual DbSet<Kontrahenci> Kontrahencis { get; set; }

    public virtual DbSet<Kontum> Konta { get; set; }

    public virtual DbSet<KorektaPodatkuDochodowego> KorektaPodatkuDochodowegos { get; set; }

    public virtual DbSet<KorektaPodatkuDochodowegoZd> KorektaPodatkuDochodowegoZds { get; set; }

    public virtual DbSet<KorektaPodatkuDochodowegoZdzakazy> KorektaPodatkuDochodowegoZdzakazies { get; set; }

    public virtual DbSet<KragKosztElem> KragKosztElems { get; set; }

    public virtual DbSet<KragKosztNag> KragKosztNags { get; set; }

    public virtual DbSet<Krd> Krds { get; set; }

    public virtual DbSet<KsefCode> KsefCodes { get; set; }

    public virtual DbSet<KsiDokElem> KsiDokElems { get; set; }

    public virtual DbSet<KsiDokNag> KsiDokNags { get; set; }

    public virtual DbSet<KsiRozrachunki> KsiRozrachunkis { get; set; }

    public virtual DbSet<KwotyCelne> KwotyCelnes { get; set; }

    public virtual DbSet<KwotyDodatkowe> KwotyDodatkowes { get; set; }

    public virtual DbSet<LimitNieobec> LimitNieobecs { get; set; }

    public virtual DbSet<ListyPlac> ListyPlacs { get; set; }

    public virtual DbSet<Lokalizacje> Lokalizacjes { get; set; }

    public virtual DbSet<LokalizacjeView> LokalizacjeViews { get; set; }

    public virtual DbSet<MagazynZakazy> MagazynZakazies { get; set; }

    public virtual DbSet<Magazyny> Magazynies { get; set; }

    public virtual DbSet<Marki> Markis { get; set; }

    public virtual DbSet<MarkiJezykObcy> MarkiJezykObcies { get; set; }

    public virtual DbSet<Miastum> Miasta { get; set; }

    public virtual DbSet<MiejscaUzytkowanium> MiejscaUzytkowania { get; set; }

    public virtual DbSet<Nazwy> Nazwies { get; set; }

    public virtual DbSet<NotyOdsElem> NotyOdsElems { get; set; }

    public virtual DbSet<NotyOdsNag> NotyOdsNags { get; set; }

    public virtual DbSet<Oatrybuty> Oatrybuties { get; set; }

    public virtual DbSet<OatrybutyGrupy> OatrybutyGrupies { get; set; }

    public virtual DbSet<OatrybutyGrupyLinki> OatrybutyGrupyLinkis { get; set; }

    public virtual DbSet<OatrybutyHist> OatrybutyHists { get; set; }

    public virtual DbSet<OatrybutyKlasy> OatrybutyKlasies { get; set; }

    public virtual DbSet<OatrybutyKlasyElem> OatrybutyKlasyElems { get; set; }

    public virtual DbSet<Obroty> Obroties { get; set; }

    public virtual DbSet<OfertyDok> OfertyDoks { get; set; }

    public virtual DbSet<OfertyElem> OfertyElems { get; set; }

    public virtual DbSet<OfertyElemCeny> OfertyElemCenies { get; set; }

    public virtual DbSet<OfertyKnt> OfertyKnts { get; set; }

    public virtual DbSet<OkresoweElem> OkresoweElems { get; set; }

    public virtual DbSet<OkresoweHarmonogram> OkresoweHarmonograms { get; set; }

    public virtual DbSet<OkresoweNag> OkresoweNags { get; set; }

    public virtual DbSet<OkresyObrach> OkresyObraches { get; set; }

    public virtual DbSet<OperatorzyView> OperatorzyViews { get; set; }

    public virtual DbSet<OpisKadry> OpisKadries { get; set; }

    public virtual DbSet<OpisPlace> OpisPlaces { get; set; }

    public virtual DbSet<OpisyDniWolne> OpisyDniWolnes { get; set; }

    public virtual DbSet<PaczkiPrzelewowAkceptacje> PaczkiPrzelewowAkceptacjes { get; set; }

    public virtual DbSet<PaczkiPrzelewowElem> PaczkiPrzelewowElems { get; set; }

    public virtual DbSet<PaczkiPrzelewowNag> PaczkiPrzelewowNags { get; set; }

    public virtual DbSet<PanstwaTrzecie> PanstwaTrzecies { get; set; }

    public virtual DbSet<Parametry> Parametries { get; set; }

    public virtual DbSet<Pieczatki> Pieczatkis { get; set; }

    public virtual DbSet<PieczatkiJ> PieczatkiJs { get; set; }

    public virtual DbSet<Pkzp> Pkzps { get; set; }

    public virtual DbSet<PlikiJpk> PlikiJpks { get; set; }

    public virtual DbSet<PltPromocje> PltPromocjes { get; set; }

    public virtual DbSet<PodArkuszInwenElem> PodArkuszInwenElems { get; set; }

    public virtual DbSet<PodArkuszInwenNag> PodArkuszInwenNags { get; set; }

    public virtual DbSet<PodmiotRejestracjaZgod> PodmiotRejestracjaZgods { get; set; }

    public virtual DbSet<PodmiotyView> PodmiotyViews { get; set; }

    public virtual DbSet<PodtypWyplatum> PodtypWyplata { get; set; }

    public virtual DbSet<Poreczyciele> Poreczycieles { get; set; }

    public virtual DbSet<PozDeklPit> PozDeklPits { get; set; }

    public virtual DbSet<PozDeklZu> PozDeklZus { get; set; }

    public virtual DbSet<PracDiety> PracDieties { get; set; }

    public virtual DbSet<PracEtaty> PracEtaties { get; set; }

    public virtual DbSet<PracKartyRcp> PracKartyRcps { get; set; }

    public virtual DbSet<PracKod> PracKods { get; set; }

    public virtual DbSet<PracKwotyWlasc> PracKwotyWlascs { get; set; }

    public virtual DbSet<PracLimit> PracLimits { get; set; }

    public virtual DbSet<PracNieobec> PracNieobecs { get; set; }

    public virtual DbSet<PracPitDzialalnosci> PracPitDzialalnoscis { get; set; }

    public virtual DbSet<PracPitKwoty> PracPitKwoties { get; set; }

    public virtual DbSet<PracPitMy> PracPitMies { get; set; }

    public virtual DbSet<PracPitUdzialy> PracPitUdzialies { get; set; }

    public virtual DbSet<PracPlanDni> PracPlanDnis { get; set; }

    public virtual DbSet<PracPlanDniGodz> PracPlanDniGodzs { get; set; }

    public virtual DbSet<PracPracaDni> PracPracaDnis { get; set; }

    public virtual DbSet<PracPracaDniGodz> PracPracaDniGodzs { get; set; }

    public virtual DbSet<PracSchorzenium> PracSchorzenia { get; set; }

    public virtual DbSet<PracTeczki> PracTeczkis { get; set; }

    public virtual DbSet<PracTeczkiDokumenty> PracTeczkiDokumenties { get; set; }

    public virtual DbSet<PracZestaw> PracZestaws { get; set; }

    public virtual DbSet<PracZestawElem> PracZestawElems { get; set; }

    public virtual DbSet<PracaSzczeg> PracaSzczegs { get; set; }

    public virtual DbSet<Pracidx> Pracidxes { get; set; }

    public virtual DbSet<PracownicyView> PracownicyViews { get; set; }

    public virtual DbSet<PrmHistorium> PrmHistoria { get; set; }

    public virtual DbSet<PrmKarty> PrmKarties { get; set; }

    public virtual DbSet<ProdElem> ProdElems { get; set; }

    public virtual DbSet<ProdReceptury> ProdRecepturies { get; set; }

    public virtual DbSet<ProdSkladniki> ProdSkladnikis { get; set; }

    public virtual DbSet<Producenci> Producencis { get; set; }

    public virtual DbSet<ProducenciJezykObcy> ProducenciJezykObcies { get; set; }

    public virtual DbSet<Progi> Progis { get; set; }

    public virtual DbSet<PrzWyrej> PrzWyrejs { get; set; }

    public virtual DbSet<PrzeszacWalutElem> PrzeszacWalutElems { get; set; }

    public virtual DbSet<PrzeszacWalutNag> PrzeszacWalutNags { get; set; }

    public virtual DbSet<Rabaty> Rabaties { get; set; }

    public virtual DbSet<RegulyRcp> RegulyRcps { get; set; }

    public virtual DbSet<RejestrCzynnosci> RejestrCzynnoscis { get; set; }

    public virtual DbSet<RejestrNaruszen> RejestrNaruszens { get; set; }

    public virtual DbSet<RejestrOperacji> RejestrOperacjis { get; set; }

    public virtual DbSet<RejestrOperacjiTypyObiektow> RejestrOperacjiTypyObiektows { get; set; }

    public virtual DbSet<RejestrOperacjiTypyOperacji> RejestrOperacjiTypyOperacjis { get; set; }

    public virtual DbSet<RejestrUpowaznien> RejestrUpowazniens { get; set; }

    public virtual DbSet<RejestracjaZgodFormyKontaktu> RejestracjaZgodFormyKontaktus { get; set; }

    public virtual DbSet<RejestracjaZgodFormyKontaktuJezykObcy> RejestracjaZgodFormyKontaktuJezykObcies { get; set; }

    public virtual DbSet<RejestracjaZgodKategorie> RejestracjaZgodKategories { get; set; }

    public virtual DbSet<RejestracjaZgodTresc> RejestracjaZgodTrescs { get; set; }

    public virtual DbSet<RejestracjaZgodTrescEsklepy> RejestracjaZgodTrescEsklepies { get; set; }

    public virtual DbSet<RejestracjaZgodTrescJezykObcy> RejestracjaZgodTrescJezykObcies { get; set; }

    public virtual DbSet<RejestracjaZgodZrodlo> RejestracjaZgodZrodlos { get; set; }

    public virtual DbSet<RemanentElem> RemanentElems { get; set; }

    public virtual DbSet<RemanentNag> RemanentNags { get; set; }

    public virtual DbSet<Rodzina> Rodzinas { get; set; }

    public virtual DbSet<RodzinaZwolOkresy> RodzinaZwolOkresies { get; set; }

    public virtual DbSet<RptKolejka2> RptKolejka2s { get; set; }

    public virtual DbSet<RptObrazy2> RptObrazy2s { get; set; }

    public virtual DbSet<RptTemp2> RptTemp2s { get; set; }

    public virtual DbSet<RptZaznaczenia2> RptZaznaczenia2s { get; set; }

    public virtual DbSet<Ryczalt> Ryczalts { get; set; }

    public virtual DbSet<SchKsiElem> SchKsiElems { get; set; }

    public virtual DbSet<SchKsiNag> SchKsiNags { get; set; }

    public virtual DbSet<SchKsiRelac> SchKsiRelacs { get; set; }

    public virtual DbSet<SchematPlatnosci> SchematPlatnoscis { get; set; }

    public virtual DbSet<SchematWindykacjiEtapy> SchematWindykacjiEtapies { get; set; }

    public virtual DbSet<SchematyOpakElem> SchematyOpakElems { get; set; }

    public virtual DbSet<SchematyOpakNag> SchematyOpakNags { get; set; }

    public virtual DbSet<SchematyWindykacji> SchematyWindykacjis { get; set; }

    public virtual DbSet<SenditAdresyNadawcze> SenditAdresyNadawczes { get; set; }

    public virtual DbSet<SenditPaczki> SenditPaczkis { get; set; }

    public virtual DbSet<SenditTypyPaczek> SenditTypyPaczeks { get; set; }

    public virtual DbSet<SenditZleceniePrzesylki> SenditZleceniePrzesylkis { get; set; }

    public virtual DbSet<SentElement> SentElements { get; set; }

    public virtual DbSet<SentHistorium> SentHistoria { get; set; }

    public virtual DbSet<SentZgloszenium> SentZgloszenia { get; set; }

    public virtual DbSet<SerieKalNag> SerieKalNags { get; set; }

    public virtual DbSet<SerieKalPoz> SerieKalPozs { get; set; }

    public virtual DbSet<SerieKalPozGodz> SerieKalPozGodzs { get; set; }

    public virtual DbSet<SerwisanciView> SerwisanciViews { get; set; }

    public virtual DbSet<SprawozdaniaFinansowe> SprawozdaniaFinansowes { get; set; }

    public virtual DbSet<SprawozdaniaFinansowePodpisy> SprawozdaniaFinansowePodpisies { get; set; }

    public virtual DbSet<SprawozdaniaFinansoweZalaczniki> SprawozdaniaFinansoweZalacznikis { get; set; }

    public virtual DbSet<SrsCyklElem> SrsCyklElems { get; set; }

    public virtual DbSet<SrsCyklNag> SrsCyklNags { get; set; }

    public virtual DbSet<SrsCzesci> SrsCzescis { get; set; }

    public virtual DbSet<SrsCzesciDost> SrsCzesciDosts { get; set; }

    public virtual DbSet<SrsCzynnosci> SrsCzynnoscis { get; set; }

    public virtual DbSet<SrsNotatki> SrsNotatkis { get; set; }

    public virtual DbSet<SrsRodzajeU> SrsRodzajeUs { get; set; }

    public virtual DbSet<SrsUrzadzenium> SrsUrzadzenia { get; set; }

    public virtual DbSet<SrsZlecenium> SrsZlecenia { get; set; }

    public virtual DbSet<StatElem> StatElems { get; set; }

    public virtual DbSet<StatNag> StatNags { get; set; }

    public virtual DbSet<SwietaRuchome> SwietaRuchomes { get; set; }

    public virtual DbSet<SystemCdn> SystemCdns { get; set; }

    public virtual DbSet<SzDekElem> SzDekElems { get; set; }

    public virtual DbSet<SzDekNag> SzDekNags { get; set; }

    public virtual DbSet<Towary> Towaries { get; set; }

    public virtual DbSet<TrEatrybutyView> TrEatrybutyViews { get; set; }

    public virtual DbSet<TrSblad> TrSblads { get; set; }

    public virtual DbSet<TrSbladOper> TrSbladOpers { get; set; }

    public virtual DbSet<TraCyklPropKntWzorce> TraCyklPropKntWzorces { get; set; }

    public virtual DbSet<TraCykliczne> TraCyklicznes { get; set; }

    public virtual DbSet<TraCykliczneGrupy> TraCykliczneGrupies { get; set; }

    public virtual DbSet<TraElem> TraElems { get; set; }

    public virtual DbSet<TraElemAtr> TraElemAtrs { get; set; }

    public virtual DbSet<TraElemKorZbiorcza> TraElemKorZbiorczas { get; set; }

    public virtual DbSet<TraElemKwotyCelne> TraElemKwotyCelnes { get; set; }

    public virtual DbSet<TraElemRelacje> TraElemRelacjes { get; set; }

    public virtual DbSet<TraFakZaliczkowe> TraFakZaliczkowes { get; set; }

    public virtual DbSet<TraNag> TraNags { get; set; }

    public virtual DbSet<TraNagRelacje> TraNagRelacjes { get; set; }

    public virtual DbSet<TraNagTsmodEsklep> TraNagTsmodEskleps { get; set; }

    public virtual DbSet<TraSelem> TraSelems { get; set; }

    public virtual DbSet<TraSelemCechy> TraSelemCechies { get; set; }

    public virtual DbSet<TraSelemDost> TraSelemDosts { get; set; }

    public virtual DbSet<TraVat> TraVats { get; set; }

    public virtual DbSet<TraeSklepAukcje> TraeSklepAukcjes { get; set; }

    public virtual DbSet<Trwale> Trwales { get; set; }

    public virtual DbSet<TrwaleAielem> TrwaleAielems { get; set; }

    public virtual DbSet<TrwaleAinag> TrwaleAinags { get; set; }

    public virtual DbSet<TrwaleAtrybuty> TrwaleAtrybuties { get; set; }

    public virtual DbSet<TrwaleAtrybutyView> TrwaleAtrybutyViews { get; set; }

    public virtual DbSet<TrwaleCzesci> TrwaleCzescis { get; set; }

    public virtual DbSet<TrwaleHist> TrwaleHists { get; set; }

    public virtual DbSet<TrwaleHistAtrybutyView> TrwaleHistAtrybutyViews { get; set; }

    public virtual DbSet<TrwaleHistPowiazanium> TrwaleHistPowiazania { get; set; }

    public virtual DbSet<TrwaleMaska> TrwaleMaskas { get; set; }

    public virtual DbSet<TrwaleMiejscaUzytkowanium> TrwaleMiejscaUzytkowania { get; set; }

    public virtual DbSet<TrwaleOsobyOdpowiedzialne> TrwaleOsobyOdpowiedzialnes { get; set; }

    public virtual DbSet<TrwalePowiazanium> TrwalePowiazania { get; set; }

    public virtual DbSet<TrwaleZawieszeniaAmo> TrwaleZawieszeniaAmos { get; set; }

    public virtual DbSet<TwrAtrybuty> TwrAtrybuties { get; set; }

    public virtual DbSet<TwrCeny> TwrCenies { get; set; }

    public virtual DbSet<TwrCenyZakView> TwrCenyZakViews { get; set; }

    public virtual DbSet<TwrDost> TwrDosts { get; set; }

    public virtual DbSet<TwrEan> TwrEans { get; set; }

    public virtual DbSet<TwrEsklep> TwrEskleps { get; set; }

    public virtual DbSet<TwrGrupy> TwrGrupies { get; set; }

    public virtual DbSet<TwrGrupyAtrybuty> TwrGrupyAtrybuties { get; set; }

    public virtual DbSet<TwrGrupyJezykObcy> TwrGrupyJezykObcies { get; set; }

    public virtual DbSet<TwrGrupyView> TwrGrupyViews { get; set; }

    public virtual DbSet<TwrIlosci> TwrIloscis { get; set; }

    public virtual DbSet<TwrJezykObcy> TwrJezykObcies { get; set; }

    public virtual DbSet<TwrJm> TwrJms { get; set; }

    public virtual DbSet<TwrJmz> TwrJmzs { get; set; }

    public virtual DbSet<TwrKarty> TwrKarties { get; set; }

    public virtual DbSet<TwrKntAtrybuty> TwrKntAtrybuties { get; set; }

    public virtual DbSet<TwrLinki> TwrLinkis { get; set; }

    public virtual DbSet<TwrOcrmapowanie> TwrOcrmapowanies { get; set; }

    public virtual DbSet<TwrPromocje> TwrPromocjes { get; set; }

    public virtual DbSet<TwrPrzeceny> TwrPrzecenies { get; set; }

    public virtual DbSet<TwrStawkiVat> TwrStawkiVats { get; set; }

    public virtual DbSet<TwrTsmodEsklep> TwrTsmodEskleps { get; set; }

    public virtual DbSet<TwrUpusty> TwrUpusties { get; set; }

    public virtual DbSet<TwrZasoby> TwrZasobies { get; set; }

    public virtual DbSet<TypNieobec> TypNieobecs { get; set; }

    public virtual DbSet<TypNieobecKartaPracy> TypNieobecKartaPracies { get; set; }

    public virtual DbSet<TypWyplataGrupa> TypWyplataGrupas { get; set; }

    public virtual DbSet<TypWyplataGrupaSkladniki> TypWyplataGrupaSkladnikis { get; set; }

    public virtual DbSet<TypWyplataStaz> TypWyplataStazs { get; set; }

    public virtual DbSet<TypWyplatum> TypWyplata { get; set; }

    public virtual DbSet<TytUbezp> TytUbezps { get; set; }

    public virtual DbSet<TytUmowy> TytUmowies { get; set; }

    public virtual DbSet<Umowy> Umowies { get; set; }

    public virtual DbSet<UmowyB2b> UmowyB2bs { get; set; }

    public virtual DbSet<UmowyZestCzasu> UmowyZestCzasus { get; set; }

    public virtual DbSet<Uprawnienium> Uprawnienia { get; set; }

    public virtual DbSet<UrzRachunki> UrzRachunkis { get; set; }

    public virtual DbSet<Urzedy> Urzedies { get; set; }

    public virtual DbSet<UsunieteObiekty> UsunieteObiekties { get; set; }

    public virtual DbSet<VatMarzaView> VatMarzaViews { get; set; }

    public virtual DbSet<VatNag> VatNags { get; set; }

    public virtual DbSet<VatTab> VatTabs { get; set; }

    public virtual DbSet<VatTab7> VatTab7s { get; set; }

    public virtual DbSet<VatZd> VatZds { get; set; }

    public virtual DbSet<VatatrybutyView> VatatrybutyViews { get; set; }

    public virtual DbSet<WalElem> WalElems { get; set; }

    public virtual DbSet<WalKontum> WalKonta { get; set; }

    public virtual DbSet<WalNag> WalNags { get; set; }

    public virtual DbSet<WartoscZakupuFapaview> WartoscZakupuFapaviews { get; set; }

    public virtual DbSet<WdrKopieElektroniczne> WdrKopieElektronicznes { get; set; }

    public virtual DbSet<WindykacjaLog> WindykacjaLogs { get; set; }

    public virtual DbSet<WkrZaznaczenia2> WkrZaznaczenia2s { get; set; }

    public virtual DbSet<Wymiary> Wymiaries { get; set; }

    public virtual DbSet<WymiaryWartosci> WymiaryWartoscis { get; set; }

    public virtual DbSet<WypElementy> WypElementies { get; set; }

    public virtual DbSet<WypElementyPodstawa> WypElementyPodstawas { get; set; }

    public virtual DbSet<WypElementyPodstawaElem> WypElementyPodstawaElems { get; set; }

    public virtual DbSet<WypSkladniki> WypSkladnikis { get; set; }

    public virtual DbSet<Wyplaty> Wyplaties { get; set; }

    public virtual DbSet<WyplatyElem> WyplatyElems { get; set; }

    public virtual DbSet<WyplatyNag> WyplatyNags { get; set; }

    public virtual DbSet<Wyposazenie> Wyposazenies { get; set; }

    public virtual DbSet<WyposazenieAielem> WyposazenieAielems { get; set; }

    public virtual DbSet<WyposazenieAinag> WyposazenieAinags { get; set; }

    public virtual DbSet<WyposazenieAtrybutyView> WyposazenieAtrybutyViews { get; set; }

    public virtual DbSet<WyposazenieMiejscaUzytkowanium> WyposazenieMiejscaUzytkowania { get; set; }

    public virtual DbSet<WyposazenieOsobyOdpowiedzialne> WyposazenieOsobyOdpowiedzialnes { get; set; }

    public virtual DbSet<WyposazeniePowiazanium> WyposazeniePowiazania { get; set; }

    public virtual DbSet<WzorWartosci> WzorWartoscis { get; set; }

    public virtual DbSet<Wzorce> Wzorces { get; set; }

    public virtual DbSet<ZajeciaWynagr> ZajeciaWynagrs { get; set; }

    public virtual DbSet<ZakazyDoWydzialowView> ZakazyDoWydzialowViews { get; set; }

    public virtual DbSet<Zaklady> Zakladies { get; set; }

    public virtual DbSet<Zaliczki> Zaliczkis { get; set; }

    public virtual DbSet<Zamienniki> Zamiennikis { get; set; }

    public virtual DbSet<ZamowienieKuriera> ZamowienieKurieras { get; set; }

    public virtual DbSet<ZaniechaniaRoz> ZaniechaniaRozs { get; set; }

    public virtual DbSet<Zaniechanium> Zaniechania { get; set; }

    public virtual DbSet<ZapisyKpr> ZapisyKprs { get; set; }

    public virtual DbSet<ZasobyJezykowe> ZasobyJezykowes { get; set; }

    public virtual DbSet<ZasobyView> ZasobyViews { get; set; }

    public virtual DbSet<ZestKsiKol> ZestKsiKols { get; set; }

    public virtual DbSet<ZestKsiNag> ZestKsiNags { get; set; }

    public virtual DbSet<ZestKsiPoz> ZestKsiPozs { get; set; }

    public virtual DbSet<ZestKsiWyniki> ZestKsiWynikis { get; set; }

    public virtual DbSet<ZestawieniaKontum> ZestawieniaKonta { get; set; }

    public virtual DbSet<ZestawyRegul> ZestawyReguls { get; set; }

    public virtual DbSet<ZestawyRegulElem> ZestawyRegulElems { get; set; }

    public virtual DbSet<ZestawyTwr> ZestawyTwrs { get; set; }

    public virtual DbSet<ZestawyTwrSkladniki> ZestawyTwrSkladnikis { get; set; }

    public virtual DbSet<ZstPromocje> ZstPromocjes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AkordDefinicja>(entity =>
        {
            entity.HasKey(e => e.AdfAdfId)
                .HasName("ADF_Primary")
                .HasFillFactor(100);

            entity.ToTable("AkordDefinicja", "CDN", tb => tb.HasTrigger("AkordDefinicja_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.AdfNazwa, "ADFNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.AdfTwpId, "ADFTwpId").HasFillFactor(100);

            entity.Property(e => e.AdfAdfId).HasColumnName("ADF_AdfId");
            entity.Property(e => e.AdfGodzinowe).HasColumnName("ADF_Godzinowe");
            entity.Property(e => e.AdfImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ADF_ImportRowId");
            entity.Property(e => e.AdfJednostka)
                .HasMaxLength(40)
                .HasColumnName("ADF_Jednostka");
            entity.Property(e => e.AdfNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ADF_Nazwa");
            entity.Property(e => e.AdfNieaktywny).HasColumnName("ADF_Nieaktywny");
            entity.Property(e => e.AdfOpeModId).HasColumnName("ADF_OpeModId");
            entity.Property(e => e.AdfOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ADF_OpeModKod");
            entity.Property(e => e.AdfOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ADF_OpeModNazwisko");
            entity.Property(e => e.AdfOpeZalId).HasColumnName("ADF_OpeZalId");
            entity.Property(e => e.AdfOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ADF_OpeZalKod");
            entity.Property(e => e.AdfOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ADF_OpeZalNazwisko");
            entity.Property(e => e.AdfPomniejszenie).HasColumnName("ADF_Pomniejszenie");
            entity.Property(e => e.AdfProgresywny).HasColumnName("ADF_Progresywny");
            entity.Property(e => e.AdfRodzaj).HasColumnName("ADF_Rodzaj");
            entity.Property(e => e.AdfSkrot)
                .HasMaxLength(40)
                .HasColumnName("ADF_Skrot");
            entity.Property(e => e.AdfStaModId).HasColumnName("ADF_StaModId");
            entity.Property(e => e.AdfStaZalId).HasColumnName("ADF_StaZalId");
            entity.Property(e => e.AdfStawka)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ADF_Stawka");
            entity.Property(e => e.AdfTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ADF_TS_Mod");
            entity.Property(e => e.AdfTsZal)
                .HasColumnType("datetime")
                .HasColumnName("ADF_TS_Zal");
            entity.Property(e => e.AdfTwpId).HasColumnName("ADF_TwpId");
            entity.Property(e => e.AdfWgNajwStawki).HasColumnName("ADF_WgNajwStawki");

            entity.HasOne(d => d.AdfTwp).WithMany(p => p.AkordDefinicjas)
                .HasForeignKey(d => d.AdfTwpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADFTwpId");
        });

        modelBuilder.Entity<AkordProgre>(entity =>
        {
            entity.HasKey(e => e.AkpAkpId)
                .HasName("AKP_Primary")
                .HasFillFactor(100);

            entity.ToTable("AkordProgres", "CDN", tb => tb.HasTrigger("AkordProgres_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.AkpAdfId, "AKPAdfLink").HasFillFactor(100);

            entity.Property(e => e.AkpAkpId).HasColumnName("AKP_AkpId");
            entity.Property(e => e.AkpAdfId).HasColumnName("AKP_AdfId");
            entity.Property(e => e.AkpCzas)
                .HasColumnType("datetime")
                .HasColumnName("AKP_Czas");
            entity.Property(e => e.AkpIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AKP_Ilosc");
            entity.Property(e => e.AkpImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("AKP_ImportRowId");
            entity.Property(e => e.AkpStawka)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AKP_Stawka");

            entity.HasOne(d => d.AkpAdf).WithMany(p => p.AkordProgres)
                .HasForeignKey(d => d.AkpAdfId)
                .HasConstraintName("FK_AKPAdfLink");
        });

        modelBuilder.Entity<Akordy>(entity =>
        {
            entity.HasKey(e => e.AkrAkrId)
                .HasName("AKR_Primary")
                .HasFillFactor(100);

            entity.ToTable("Akordy", "CDN", tb => tb.HasTrigger("Akordy_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.AkrPraId, "AKRPraLink").HasFillFactor(100);

            entity.Property(e => e.AkrAkrId).HasColumnName("AKR_AkrId");
            entity.Property(e => e.AkrImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("AKR_ImportRowId");
            entity.Property(e => e.AkrNazwa)
                .HasMaxLength(40)
                .HasColumnName("AKR_Nazwa");
            entity.Property(e => e.AkrNieaktywny).HasColumnName("AKR_Nieaktywny");
            entity.Property(e => e.AkrPraId).HasColumnName("AKR_PraId");
            entity.Property(e => e.AkrWaznyDo)
                .HasColumnType("datetime")
                .HasColumnName("AKR_WaznyDo");
            entity.Property(e => e.AkrWaznyOd)
                .HasColumnType("datetime")
                .HasColumnName("AKR_WaznyOd");

            entity.HasOne(d => d.AkrPra).WithMany(p => p.Akordies)
                .HasForeignKey(d => d.AkrPraId)
                .HasConstraintName("FK_AKRPraLink");
        });

        modelBuilder.Entity<AkordyHist>(entity =>
        {
            entity.HasKey(e => e.AkhAkhId)
                .HasName("AKH_Primary")
                .HasFillFactor(100);

            entity.ToTable("AkordyHist", "CDN", tb =>
                {
                    tb.HasTrigger("AkordyHis_Delete_Trigger");
                    tb.HasTrigger("AkordyHist_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.AkhAdfId, "AKHAdfLink").HasFillFactor(100);

            entity.HasIndex(e => e.AkhAkrId, "AKHAkrLink").HasFillFactor(100);

            entity.Property(e => e.AkhAkhId).HasColumnName("AKH_AkhId");
            entity.Property(e => e.AkhAdfId).HasColumnName("AKH_AdfId");
            entity.Property(e => e.AkhAkrId).HasColumnName("AKH_AkrId");
            entity.Property(e => e.AkhCzas)
                .HasColumnType("datetime")
                .HasColumnName("AKH_Czas");
            entity.Property(e => e.AkhIlosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AKH_Ilosc");
            entity.Property(e => e.AkhImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("AKH_ImportRowId");
            entity.Property(e => e.AkhMiesiac).HasColumnName("AKH_Miesiac");
            entity.Property(e => e.AkhNazwa)
                .HasMaxLength(40)
                .HasColumnName("AKH_Nazwa");
            entity.Property(e => e.AkhOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("AKH_OkresDo");
            entity.Property(e => e.AkhOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("AKH_OkresOd");
            entity.Property(e => e.AkhOpeModId).HasColumnName("AKH_OpeModId");
            entity.Property(e => e.AkhOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AKH_OpeModKod");
            entity.Property(e => e.AkhOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AKH_OpeModNazwisko");
            entity.Property(e => e.AkhOpeZalId).HasColumnName("AKH_OpeZalId");
            entity.Property(e => e.AkhOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AKH_OpeZalKod");
            entity.Property(e => e.AkhOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AKH_OpeZalNazwisko");
            entity.Property(e => e.AkhProporcjonalnie).HasColumnName("AKH_Proporcjonalnie");
            entity.Property(e => e.AkhRok).HasColumnName("AKH_Rok");
            entity.Property(e => e.AkhStaModId).HasColumnName("AKH_StaModId");
            entity.Property(e => e.AkhStaZalId).HasColumnName("AKH_StaZalId");
            entity.Property(e => e.AkhStawka)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AKH_Stawka");
            entity.Property(e => e.AkhTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AKH_TS_Mod");
            entity.Property(e => e.AkhTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AKH_TS_Zal");
            entity.Property(e => e.AkhWspolczynnik)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AKH_Wspolczynnik");

            entity.HasOne(d => d.AkhAdf).WithMany(p => p.AkordyHists)
                .HasForeignKey(d => d.AkhAdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AKHAdfLink");

            entity.HasOne(d => d.AkhAkr).WithMany(p => p.AkordyHists)
                .HasForeignKey(d => d.AkhAkrId)
                .HasConstraintName("FK_AKHAkrLink");
        });

        modelBuilder.Entity<AkordyHistWartosci>(entity =>
        {
            entity.HasKey(e => e.AhwAhwId)
                .HasName("AHW_Primary")
                .HasFillFactor(100);

            entity.ToTable("AkordyHistWartosci", "CDN", tb => tb.HasTrigger("AkordyHistWartosci_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.AhwAkhId, "AHWAkhLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.AhwAkhId, e.AhwMiesiac, e.AhwRok }, "AHWWartosci")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AhwAhwId).HasColumnName("AHW_AhwId");
            entity.Property(e => e.AhwAkhId).HasColumnName("AHW_AkhId");
            entity.Property(e => e.AhwCzas)
                .HasColumnType("datetime")
                .HasColumnName("AHW_Czas");
            entity.Property(e => e.AhwIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AHW_Ilosc");
            entity.Property(e => e.AhwImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("AHW_ImportRowId");
            entity.Property(e => e.AhwKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AHW_Kwota");
            entity.Property(e => e.AhwMiesiac).HasColumnName("AHW_Miesiac");
            entity.Property(e => e.AhwRok).HasColumnName("AHW_Rok");
            entity.Property(e => e.AhwUdzial)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AHW_Udzial");
            entity.Property(e => e.AhwZmiana).HasColumnName("AHW_Zmiana");

            entity.HasOne(d => d.AhwAkh).WithMany(p => p.AkordyHistWartoscis)
                .HasForeignKey(d => d.AhwAkhId)
                .HasConstraintName("FK_AHWAkhLink");
        });

        modelBuilder.Entity<Aktualizacje>(entity =>
        {
            entity.HasKey(e => new { e.AktHash, e.AktWersja })
                .HasName("Akt_Primary")
                .HasFillFactor(100);

            entity.ToTable("Aktualizacje", "CDN");

            entity.Property(e => e.AktHash)
                .HasMaxLength(64)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Akt_Hash");
            entity.Property(e => e.AktWersja)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Akt_Wersja");
        });

        modelBuilder.Entity<AktualizacjeBlokBaza>(entity =>
        {
            entity.HasKey(e => e.AktBbId)
                .HasName("AktBB_Primary")
                .HasFillFactor(100);

            entity.ToTable("AktualizacjeBlokBaza", "CDN");

            entity.Property(e => e.AktBbId)
                .ValueGeneratedNever()
                .HasColumnName("AktBB_ID");
            entity.Property(e => e.AktBbCzas).HasColumnName("AktBB_Czas");
            entity.Property(e => e.AktBbUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AktBB_Uzytkownik");
        });

        modelBuilder.Entity<AnalizyBiparam>(entity =>
        {
            entity.HasKey(e => e.AbpNazwa).HasName("PK__AnalizyB__7CF85EB73DDE01C1");

            entity.ToTable("AnalizyBIParam", "CDN");

            entity.Property(e => e.AbpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ABP_Nazwa");
            entity.Property(e => e.AbpData)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ABP_Data");
            entity.Property(e => e.AbpParam).HasColumnName("ABP_Param");
            entity.Property(e => e.AbpTimestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ABP_Timestamp");
        });

        modelBuilder.Entity<AnkAnkietyAnkieterzy>(entity =>
        {
            entity.HasKey(e => e.AnkAaAAnkAaAid)
                .HasName("AnkAaA_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkAnkietyAnkieterzy", "CDN");

            entity.HasIndex(e => new { e.AnkAaAAnkAnNid, e.AnkAaALp }, "AnkAaA_Lp_UniqueIx")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AnkAaAAnkAaAid).HasColumnName("AnkAaA_AnkAaAId");
            entity.Property(e => e.AnkAaAAnkAnNid).HasColumnName("AnkAaA_AnkAnNId");
            entity.Property(e => e.AnkAaALp).HasColumnName("AnkAaA_Lp");
            entity.Property(e => e.AnkAaAPodId).HasColumnName("AnkAaA_PodID");
            entity.Property(e => e.AnkAaAPodmiotTyp).HasColumnName("AnkAaA_PodmiotTyp");

            entity.HasOne(d => d.AnkAaAAnkAnN).WithMany(p => p.AnkAnkietyAnkieterzies)
                .HasForeignKey(d => d.AnkAaAAnkAnNid)
                .HasConstraintName("FK_AnkAaA_AnkAnN");
        });

        modelBuilder.Entity<AnkAnkietyNag>(entity =>
        {
            entity.HasKey(e => e.AnkAnNAnkAnNid)
                .HasName("AnkAnN_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkAnkietyNag", "CDN", tb => tb.HasTrigger("AnkAnkietyNag_Delete_Trigger"));

            entity.HasIndex(e => new { e.AnkAnNNumerString, e.AnkAnNNumerNr }, "AnkAnNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AnkAnNAnkAnNid).HasColumnName("AnkAnN_AnkAnNId");
            entity.Property(e => e.AnkAnNAnkWaNid).HasColumnName("AnkAnN_AnkWaNId");
            entity.Property(e => e.AnkAnNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("AnkAnN_DataDok");
            entity.Property(e => e.AnkAnNDataWypelnienia)
                .HasColumnType("datetime")
                .HasColumnName("AnkAnN_DataWypelnienia");
            entity.Property(e => e.AnkAnNDataZatwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("AnkAnN_DataZatwierdzenia");
            entity.Property(e => e.AnkAnNDdfId).HasColumnName("AnkAnN_DDfId");
            entity.Property(e => e.AnkAnNEksport).HasColumnName("AnkAnN_Eksport");
            entity.Property(e => e.AnkAnNNazwa)
                .HasMaxLength(512)
                .HasColumnName("AnkAnN_Nazwa");
            entity.Property(e => e.AnkAnNNumerNr).HasColumnName("AnkAnN_NumerNr");
            entity.Property(e => e.AnkAnNNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([AnkAnN_NumerNr],[AnkAnN_NumerString]))", false)
                .HasColumnName("AnkAnN_NumerPelny");
            entity.Property(e => e.AnkAnNNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("AnkAnN_NumerString");
            entity.Property(e => e.AnkAnNOcena)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AnkAnN_Ocena");
            entity.Property(e => e.AnkAnNOpeModId).HasColumnName("AnkAnN_OpeModID");
            entity.Property(e => e.AnkAnNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkAnN_OpeModKod");
            entity.Property(e => e.AnkAnNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkAnN_OpeModNazwisko");
            entity.Property(e => e.AnkAnNOpeZalId).HasColumnName("AnkAnN_OpeZalID");
            entity.Property(e => e.AnkAnNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkAnN_OpeZalKod");
            entity.Property(e => e.AnkAnNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkAnN_OpeZalNazwisko");
            entity.Property(e => e.AnkAnNOpis).HasColumnName("AnkAnN_Opis");
            entity.Property(e => e.AnkAnNOsobaId).HasColumnName("AnkAnN_OsobaId");
            entity.Property(e => e.AnkAnNOsobaNazwisko)
                .HasMaxLength(40)
                .HasColumnName("AnkAnN_OsobaNazwisko");
            entity.Property(e => e.AnkAnNOsobaTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AnkAnN_OsobaTelefon");
            entity.Property(e => e.AnkAnNPodId).HasColumnName("AnkAnN_PodID");
            entity.Property(e => e.AnkAnNPodmiotTyp).HasColumnName("AnkAnN_PodmiotTyp");
            entity.Property(e => e.AnkAnNPrzyczynaOdrzucenia)
                .HasMaxLength(512)
                .HasColumnName("AnkAnN_PrzyczynaOdrzucenia");
            entity.Property(e => e.AnkAnNStaModId).HasColumnName("AnkAnN_StaModId");
            entity.Property(e => e.AnkAnNStaZalId).HasColumnName("AnkAnN_StaZalId");
            entity.Property(e => e.AnkAnNStan).HasColumnName("AnkAnN_Stan");
            entity.Property(e => e.AnkAnNTerminDo)
                .HasColumnType("datetime")
                .HasColumnName("AnkAnN_TerminDo");
            entity.Property(e => e.AnkAnNTerminOd)
                .HasColumnType("datetime")
                .HasColumnName("AnkAnN_TerminOd");
            entity.Property(e => e.AnkAnNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AnkAnN_TS_Mod");
            entity.Property(e => e.AnkAnNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AnkAnN_TS_Zal");
        });

        modelBuilder.Entity<AnkAnkietyOdp>(entity =>
        {
            entity.HasKey(e => e.AnkAnOAnkAnOid)
                .HasName("AnkAnO_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkAnkietyOdp", "CDN");

            entity.Property(e => e.AnkAnOAnkAnOid).HasColumnName("AnkAnO_AnkAnOId");
            entity.Property(e => e.AnkAnOAnkAnPid).HasColumnName("AnkAnO_AnkAnPId");
            entity.Property(e => e.AnkAnOAnkSpOid).HasColumnName("AnkAnO_AnkSpOId");
            entity.Property(e => e.AnkAnOLp).HasColumnName("AnkAnO_Lp");
            entity.Property(e => e.AnkAnOMode).HasColumnName("AnkAnO_Mode");
            entity.Property(e => e.AnkAnOPunkty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AnkAnO_Punkty");
            entity.Property(e => e.AnkAnOWartosc).HasColumnName("AnkAnO_Wartosc");

            entity.HasOne(d => d.AnkAnOAnkAnP).WithMany(p => p.AnkAnkietyOdps)
                .HasForeignKey(d => d.AnkAnOAnkAnPid)
                .HasConstraintName("FK_AnkAnO_AnkAnP");
        });

        modelBuilder.Entity<AnkAnkietyPyt>(entity =>
        {
            entity.HasKey(e => e.AnkAnPAnkAnPid)
                .HasName("AnkAnP_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkAnkietyPyt", "CDN");

            entity.Property(e => e.AnkAnPAnkAnPid).HasColumnName("AnkAnP_AnkAnPId");
            entity.Property(e => e.AnkAnPAnkAnNid).HasColumnName("AnkAnP_AnkAnNId");
            entity.Property(e => e.AnkAnPAnkGpId).HasColumnName("AnkAnP_AnkGpId");
            entity.Property(e => e.AnkAnPAnkSonId).HasColumnName("AnkAnP_AnkSonId");
            entity.Property(e => e.AnkAnPAnkSpId).HasColumnName("AnkAnP_AnkSpId");
            entity.Property(e => e.AnkAnPFormatPytOtwartego).HasColumnName("AnkAnP_FormatPytOtwartego");
            entity.Property(e => e.AnkAnPGpParentId).HasColumnName("AnkAnP_GpParentId");
            entity.Property(e => e.AnkAnPGpParentLp).HasColumnName("AnkAnP_GpParentLp");
            entity.Property(e => e.AnkAnPGpTreeId).HasColumnName("AnkAnP_GpTreeId");
            entity.Property(e => e.AnkAnPLp).HasColumnName("AnkAnP_Lp");
            entity.Property(e => e.AnkAnPNieaktywne).HasColumnName("AnkAnP_Nieaktywne");
            entity.Property(e => e.AnkAnPOdpWymagana).HasColumnName("AnkAnP_OdpWymagana");
            entity.Property(e => e.AnkAnPOdpowiedz).HasColumnName("AnkAnP_Odpowiedz");
            entity.Property(e => e.AnkAnPOdpowiedzWyb).HasColumnName("AnkAnP_OdpowiedzWyb");
            entity.Property(e => e.AnkAnPOpis).HasColumnName("AnkAnP_Opis");
            entity.Property(e => e.AnkAnPPunktyZaOdp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AnkAnP_PunktyZaOdp");
            entity.Property(e => e.AnkAnPTresc)
                .HasMaxLength(1024)
                .HasColumnName("AnkAnP_Tresc");
            entity.Property(e => e.AnkAnPTypPytania).HasColumnName("AnkAnP_TypPytania");
            entity.Property(e => e.AnkAnPWaga).HasColumnName("AnkAnP_Waga");
            entity.Property(e => e.AnkAnPWielokrotnyWybor).HasColumnName("AnkAnP_WielokrotnyWybor");
            entity.Property(e => e.AnkAnPWypelniajacyId).HasColumnName("AnkAnP_WypelniajacyId");
            entity.Property(e => e.AnkAnPWypelniajacyTyp).HasColumnName("AnkAnP_WypelniajacyTyp");

            entity.HasOne(d => d.AnkAnPAnkAnN).WithMany(p => p.AnkAnkietyPyts)
                .HasForeignKey(d => d.AnkAnPAnkAnNid)
                .HasConstraintName("FK_AnkAnP_AnkAnN");
        });

        modelBuilder.Entity<AnkGrupyPytan>(entity =>
        {
            entity.HasKey(e => e.AnkGpAnkGpId)
                .HasName("AnkGp_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkGrupyPytan", "CDN", tb => tb.HasTrigger("AnkGrupyPytan_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.AnkGpNazwa, "AnkGp_Nazwa_UniqueIx")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AnkGpAnkGpId).HasColumnName("AnkGp_AnkGpId");
            entity.Property(e => e.AnkGpDomyslna).HasColumnName("AnkGp_Domyslna");
            entity.Property(e => e.AnkGpNazwa)
                .HasMaxLength(250)
                .HasColumnName("AnkGp_Nazwa");
            entity.Property(e => e.AnkGpNieaktywna).HasColumnName("AnkGp_Nieaktywna");
            entity.Property(e => e.AnkGpOpeModId).HasColumnName("AnkGp_OpeModID");
            entity.Property(e => e.AnkGpOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkGp_OpeModKod");
            entity.Property(e => e.AnkGpOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkGp_OpeModNazwisko");
            entity.Property(e => e.AnkGpOpeZalId).HasColumnName("AnkGp_OpeZalID");
            entity.Property(e => e.AnkGpOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkGp_OpeZalKod");
            entity.Property(e => e.AnkGpOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkGp_OpeZalNazwisko");
            entity.Property(e => e.AnkGpOpis).HasColumnName("AnkGp_Opis");
            entity.Property(e => e.AnkGpStaModId).HasColumnName("AnkGp_StaModId");
            entity.Property(e => e.AnkGpStaZalId).HasColumnName("AnkGp_StaZalId");
            entity.Property(e => e.AnkGpTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AnkGp_TS_Mod");
            entity.Property(e => e.AnkGpTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AnkGp_TS_Zal");
            entity.Property(e => e.AnkGpWaga).HasColumnName("AnkGp_Waga");
        });

        modelBuilder.Entity<AnkSlownikPytan>(entity =>
        {
            entity.HasKey(e => e.AnkSpAnkSpId)
                .HasName("AnkSp_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkSlownikPytan", "CDN", tb => tb.HasTrigger("AnkSlownikPytan_Delete_Trigger"));

            entity.Property(e => e.AnkSpAnkSpId).HasColumnName("AnkSp_AnkSpId");
            entity.Property(e => e.AnkSpAktualizujSzablonOdp).HasColumnName("AnkSp_AktualizujSzablonOdp");
            entity.Property(e => e.AnkSpAnkGpId).HasColumnName("AnkSp_AnkGpId");
            entity.Property(e => e.AnkSpAnkSonAuto).HasColumnName("AnkSp_AnkSonAuto");
            entity.Property(e => e.AnkSpAnkSonId).HasColumnName("AnkSp_AnkSonId");
            entity.Property(e => e.AnkSpFormatPytOtwartego).HasColumnName("AnkSp_FormatPytOtwartego");
            entity.Property(e => e.AnkSpNieaktywne).HasColumnName("AnkSp_Nieaktywne");
            entity.Property(e => e.AnkSpOdpWymagana).HasColumnName("AnkSp_OdpWymagana");
            entity.Property(e => e.AnkSpOpeModId).HasColumnName("AnkSp_OpeModID");
            entity.Property(e => e.AnkSpOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkSp_OpeModKod");
            entity.Property(e => e.AnkSpOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkSp_OpeModNazwisko");
            entity.Property(e => e.AnkSpOpeZalId).HasColumnName("AnkSp_OpeZalID");
            entity.Property(e => e.AnkSpOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkSp_OpeZalKod");
            entity.Property(e => e.AnkSpOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkSp_OpeZalNazwisko");
            entity.Property(e => e.AnkSpOpis).HasColumnName("AnkSp_Opis");
            entity.Property(e => e.AnkSpStaModId).HasColumnName("AnkSp_StaModId");
            entity.Property(e => e.AnkSpStaZalId).HasColumnName("AnkSp_StaZalId");
            entity.Property(e => e.AnkSpTresc)
                .HasMaxLength(1024)
                .HasColumnName("AnkSp_Tresc");
            entity.Property(e => e.AnkSpTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AnkSp_TS_Mod");
            entity.Property(e => e.AnkSpTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AnkSp_TS_Zal");
            entity.Property(e => e.AnkSpTypPytania).HasColumnName("AnkSp_TypPytania");
            entity.Property(e => e.AnkSpWaga).HasColumnName("AnkSp_Waga");
            entity.Property(e => e.AnkSpWielokrotnyWybor).HasColumnName("AnkSp_WielokrotnyWybor");

            entity.HasOne(d => d.AnkSpAnkGp).WithMany(p => p.AnkSlownikPytans)
                .HasForeignKey(d => d.AnkSpAnkGpId)
                .HasConstraintName("FK_AnkSp_AnkGp");
        });

        modelBuilder.Entity<AnkSlownikPytanOdp>(entity =>
        {
            entity.HasKey(e => e.AnkSpOAnkSpOid)
                .HasName("AnkSpO_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkSlownikPytanOdp", "CDN");

            entity.Property(e => e.AnkSpOAnkSpOid).HasColumnName("AnkSpO_AnkSpOId");
            entity.Property(e => e.AnkSpOAnkSoEid).HasColumnName("AnkSpO_AnkSoEId");
            entity.Property(e => e.AnkSpOAnkSoNid).HasColumnName("AnkSpO_AnkSoNId");
            entity.Property(e => e.AnkSpOAnkSpId).HasColumnName("AnkSpO_AnkSpId");
            entity.Property(e => e.AnkSpOLp).HasColumnName("AnkSpO_Lp");
            entity.Property(e => e.AnkSpOMode).HasColumnName("AnkSpO_Mode");
            entity.Property(e => e.AnkSpOPunkty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AnkSpO_Punkty");
            entity.Property(e => e.AnkSpOWartosc).HasColumnName("AnkSpO_Wartosc");

            entity.HasOne(d => d.AnkSpOAnkSp).WithMany(p => p.AnkSlownikPytanOdps)
                .HasForeignKey(d => d.AnkSpOAnkSpId)
                .HasConstraintName("FK_AnkSpO_AnkSp");
        });

        modelBuilder.Entity<AnkSzablonOdpElem>(entity =>
        {
            entity.HasKey(e => e.AnkSoEAnkSoeId)
                .HasName("AnkSoE_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkSzablonOdpElem", "CDN");

            entity.Property(e => e.AnkSoEAnkSoeId).HasColumnName("AnkSoE_AnkSoeId");
            entity.Property(e => e.AnkSoEAnkSonId).HasColumnName("AnkSoE_AnkSonId");
            entity.Property(e => e.AnkSoELp).HasColumnName("AnkSoE_Lp");
            entity.Property(e => e.AnkSoEMode).HasColumnName("AnkSoE_Mode");
            entity.Property(e => e.AnkSoEPunkty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AnkSoE_Punkty");
            entity.Property(e => e.AnkSoEWartosc).HasColumnName("AnkSoE_Wartosc");

            entity.HasOne(d => d.AnkSoEAnkSon).WithMany(p => p.AnkSzablonOdpElems)
                .HasForeignKey(d => d.AnkSoEAnkSonId)
                .HasConstraintName("FK_AnkSoe_AnkSon");
        });

        modelBuilder.Entity<AnkSzablonOdpNag>(entity =>
        {
            entity.HasKey(e => e.AnkSoNAnkSonId)
                .HasName("AnkSoN_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkSzablonOdpNag", "CDN", tb => tb.HasTrigger("AnkSzablonOdpNag_Delete_Trigger"));

            entity.HasIndex(e => e.AnkSoNNazwa, "AnkSoN_Nazwa_UniqueIx")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AnkSoNAnkSonId).HasColumnName("AnkSoN_AnkSonId");
            entity.Property(e => e.AnkSoNAuto).HasColumnName("AnkSoN_Auto");
            entity.Property(e => e.AnkSoNNazwa)
                .HasMaxLength(250)
                .HasColumnName("AnkSoN_Nazwa");
            entity.Property(e => e.AnkSoNOpeModId).HasColumnName("AnkSoN_OpeModID");
            entity.Property(e => e.AnkSoNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkSoN_OpeModKod");
            entity.Property(e => e.AnkSoNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkSoN_OpeModNazwisko");
            entity.Property(e => e.AnkSoNOpeZalId).HasColumnName("AnkSoN_OpeZalID");
            entity.Property(e => e.AnkSoNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkSoN_OpeZalKod");
            entity.Property(e => e.AnkSoNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkSoN_OpeZalNazwisko");
            entity.Property(e => e.AnkSoNStaModId).HasColumnName("AnkSoN_StaModId");
            entity.Property(e => e.AnkSoNStaZalId).HasColumnName("AnkSoN_StaZalId");
            entity.Property(e => e.AnkSoNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AnkSoN_TS_Mod");
            entity.Property(e => e.AnkSoNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AnkSoN_TS_Zal");
        });

        modelBuilder.Entity<AnkWzorzecAnkietyAnkietowani>(entity =>
        {
            entity.HasKey(e => e.AnkWaAAnkWaAid)
                .HasName("AnkWaA_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkWzorzecAnkietyAnkietowani", "CDN");

            entity.HasIndex(e => new { e.AnkWaAAnkWaNid, e.AnkWaALp }, "AnkWaA_Lp_UniqueIx")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AnkWaAAnkWaAid).HasColumnName("AnkWaA_AnkWaAId");
            entity.Property(e => e.AnkWaAAnkWaNid).HasColumnName("AnkWaA_AnkWaNId");
            entity.Property(e => e.AnkWaAKntKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AnkWaA_KntKod");
            entity.Property(e => e.AnkWaAKntNazwa)
                .HasMaxLength(352)
                .HasColumnName("AnkWaA_KntNazwa");
            entity.Property(e => e.AnkWaALp).HasColumnName("AnkWaA_Lp");
            entity.Property(e => e.AnkWaAOsobaId).HasColumnName("AnkWaA_OsobaId");
            entity.Property(e => e.AnkWaAOsobaNazwisko)
                .HasMaxLength(40)
                .HasColumnName("AnkWaA_OsobaNazwisko");
            entity.Property(e => e.AnkWaAOsobaTelefon)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("AnkWaA_OsobaTelefon");
            entity.Property(e => e.AnkWaAPodId).HasColumnName("AnkWaA_PodID");
            entity.Property(e => e.AnkWaAPodmiotTyp).HasColumnName("AnkWaA_PodmiotTyp");

            entity.HasOne(d => d.AnkWaAAnkWaN).WithMany(p => p.AnkWzorzecAnkietyAnkietowanis)
                .HasForeignKey(d => d.AnkWaAAnkWaNid)
                .HasConstraintName("FK_AnkWaA_AnkWaN");
        });

        modelBuilder.Entity<AnkWzorzecAnkietyNag>(entity =>
        {
            entity.HasKey(e => e.AnkWaNAnkWaNid)
                .HasName("AnkWaN_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkWzorzecAnkietyNag", "CDN", tb => tb.HasTrigger("AnkWzorzecAnkietyNag_Delete_Trigger"));

            entity.HasIndex(e => e.AnkWaNKod, "AnkWaN_Kod_UniqueIx")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AnkWaNAnkWaNid).HasColumnName("AnkWaN_AnkWaNId");
            entity.Property(e => e.AnkWaNKod)
                .HasMaxLength(250)
                .HasColumnName("AnkWaN_Kod");
            entity.Property(e => e.AnkWaNNazwa)
                .HasMaxLength(512)
                .HasColumnName("AnkWaN_Nazwa");
            entity.Property(e => e.AnkWaNNieaktywny).HasColumnName("AnkWaN_Nieaktywny");
            entity.Property(e => e.AnkWaNOpeModId).HasColumnName("AnkWaN_OpeModID");
            entity.Property(e => e.AnkWaNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkWaN_OpeModKod");
            entity.Property(e => e.AnkWaNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkWaN_OpeModNazwisko");
            entity.Property(e => e.AnkWaNOpeZalId).HasColumnName("AnkWaN_OpeZalID");
            entity.Property(e => e.AnkWaNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnkWaN_OpeZalKod");
            entity.Property(e => e.AnkWaNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AnkWaN_OpeZalNazwisko");
            entity.Property(e => e.AnkWaNOpis).HasColumnName("AnkWaN_Opis");
            entity.Property(e => e.AnkWaNStaModId).HasColumnName("AnkWaN_StaModId");
            entity.Property(e => e.AnkWaNStaZalId).HasColumnName("AnkWaN_StaZalId");
            entity.Property(e => e.AnkWaNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AnkWaN_TS_Mod");
            entity.Property(e => e.AnkWaNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AnkWaN_TS_Zal");
        });

        modelBuilder.Entity<AnkWzorzecAnkietyPyt>(entity =>
        {
            entity.HasKey(e => e.AnkWaPAnkWaPid)
                .HasName("AnkWaP_Primary")
                .HasFillFactor(100);

            entity.ToTable("AnkWzorzecAnkietyPyt", "CDN");

            entity.Property(e => e.AnkWaPAnkWaPid).HasColumnName("AnkWaP_AnkWaPId");
            entity.Property(e => e.AnkWaPAnkGpId).HasColumnName("AnkWaP_AnkGpId");
            entity.Property(e => e.AnkWaPAnkSonId).HasColumnName("AnkWaP_AnkSonId");
            entity.Property(e => e.AnkWaPAnkSpId).HasColumnName("AnkWaP_AnkSpId");
            entity.Property(e => e.AnkWaPAnkWaNid).HasColumnName("AnkWaP_AnkWaNId");
            entity.Property(e => e.AnkWaPFormatPytOtwartego).HasColumnName("AnkWaP_FormatPytOtwartego");
            entity.Property(e => e.AnkWaPGpParentId).HasColumnName("AnkWaP_GpParentId");
            entity.Property(e => e.AnkWaPGpParentLp).HasColumnName("AnkWaP_GpParentLp");
            entity.Property(e => e.AnkWaPGpTreeId).HasColumnName("AnkWaP_GpTreeId");
            entity.Property(e => e.AnkWaPLp).HasColumnName("AnkWaP_Lp");
            entity.Property(e => e.AnkWaPNieaktywne).HasColumnName("AnkWaP_Nieaktywne");
            entity.Property(e => e.AnkWaPOdpWymagana).HasColumnName("AnkWaP_OdpWymagana");
            entity.Property(e => e.AnkWaPOpis).HasColumnName("AnkWaP_Opis");
            entity.Property(e => e.AnkWaPTresc)
                .HasMaxLength(1024)
                .HasColumnName("AnkWaP_Tresc");
            entity.Property(e => e.AnkWaPTypPytania).HasColumnName("AnkWaP_TypPytania");
            entity.Property(e => e.AnkWaPWaga).HasColumnName("AnkWaP_Waga");
            entity.Property(e => e.AnkWaPWielokrotnyWybor).HasColumnName("AnkWaP_WielokrotnyWybor");

            entity.HasOne(d => d.AnkWaPAnkWaN).WithMany(p => p.AnkWzorzecAnkietyPyts)
                .HasForeignKey(d => d.AnkWaPAnkWaNid)
                .HasConstraintName("FK_AnkWaP_AnkWaN");
        });

        modelBuilder.Entity<AtrybutyAltumView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AtrybutyAltumView");

            entity.Property(e => e.AthAthId).HasColumnName("ATH_AthId");
            entity.Property(e => e.AthDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ATH_DataDo");
            entity.Property(e => e.AthDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ATH_DataOd");
            entity.Property(e => e.AthImportRowId)
                .HasMaxLength(36)
                .HasColumnName("ATH_ImportRowId");
            entity.Property(e => e.AthWartosc)
                .HasMaxLength(101)
                .HasColumnName("ATH_Wartosc");
            entity.Property(e => e.AtkImportRowId)
                .HasMaxLength(36)
                .HasColumnName("ATK_ImportRowId");
            entity.Property(e => e.PraImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("Pra_ImportRowId");
        });

        modelBuilder.Entity<AtrybutyKlasyAltumView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AtrybutyKlasyAltumView");

            entity.Property(e => e.AtkFormat)
                .HasMaxLength(21)
                .HasColumnName("ATK_Format");
            entity.Property(e => e.AtkImportRowId)
                .HasMaxLength(36)
                .HasColumnName("ATK_ImportRowId");
            entity.Property(e => e.AtkNazwa)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("ATK_Nazwa");
            entity.Property(e => e.AtkNieaktywny).HasColumnName("ATK_Nieaktywny");
            entity.Property(e => e.AtkSynchronizowanyAltum).HasColumnName("ATK_SynchronizowanyAltum");
            entity.Property(e => e.AtkTyp).HasColumnName("ATK_Typ");
        });

        modelBuilder.Entity<AtrybutyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AtrybutyView", "CDN");

            entity.Property(e => e.AtrAtrId).HasColumnName("Atr_AtrID");
            entity.Property(e => e.AtrCzyKod).HasColumnName("Atr_CzyKod");
            entity.Property(e => e.AtrKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Atr_Kod");
            entity.Property(e => e.AtrPodmiotId).HasColumnName("Atr_PodmiotID");
            entity.Property(e => e.AtrPodmiotTyp).HasColumnName("Atr_PodmiotTyp");
            entity.Property(e => e.AtrTwrId).HasColumnName("Atr_TwrID");
            entity.Property(e => e.AtrWartoscTxt)
                .HasMaxLength(1024)
                .HasColumnName("Atr_WartoscTXT");
        });

        modelBuilder.Entity<AutoEwid>(entity =>
        {
            entity.HasKey(e => e.AuEAuEid)
                .HasName("AuE_Primary")
                .HasFillFactor(100);

            entity.ToTable("AutoEwid", "CDN", tb => tb.HasTrigger("AutoEwid_Delete_Trigger"));

            entity.HasIndex(e => e.AuEPrcId, "AuEPracownik").HasFillFactor(100);

            entity.HasIndex(e => e.AuERejestracja, "AuERejestracja")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AuEAuEid).HasColumnName("AuE_AuEID");
            entity.Property(e => e.AuEDataRoz)
                .HasColumnType("datetime")
                .HasColumnName("AuE_DataRoz");
            entity.Property(e => e.AuEDataZak)
                .HasColumnType("datetime")
                .HasColumnName("AuE_DataZak");
            entity.Property(e => e.AuEKlasaPoj).HasColumnName("AuE_KlasaPoj");
            entity.Property(e => e.AuELimit).HasColumnName("AuE_Limit");
            entity.Property(e => e.AuEMarka)
                .HasMaxLength(20)
                .HasColumnName("AuE_Marka");
            entity.Property(e => e.AuENieaktywny).HasColumnName("AuE_Nieaktywny");
            entity.Property(e => e.AuEOpeModId).HasColumnName("AuE_OpeModID");
            entity.Property(e => e.AuEOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuE_OpeModKod");
            entity.Property(e => e.AuEOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuE_OpeModNazwisko");
            entity.Property(e => e.AuEOpeZalId).HasColumnName("AuE_OpeZalID");
            entity.Property(e => e.AuEOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuE_OpeZalKod");
            entity.Property(e => e.AuEOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuE_OpeZalNazwisko");
            entity.Property(e => e.AuEOpis)
                .HasMaxLength(4000)
                .HasColumnName("AuE_Opis");
            entity.Property(e => e.AuEPojemnosc).HasColumnName("AuE_Pojemnosc");
            entity.Property(e => e.AuEPracownik).HasColumnName("AuE_Pracownik");
            entity.Property(e => e.AuEPrcAdres)
                .HasMaxLength(100)
                .HasColumnName("AuE_PrcAdres");
            entity.Property(e => e.AuEPrcId).HasColumnName("AuE_PrcId");
            entity.Property(e => e.AuEPrcNazwisko)
                .HasMaxLength(100)
                .HasColumnName("AuE_PrcNazwisko");
            entity.Property(e => e.AuERejestracja)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AuE_Rejestracja");
            entity.Property(e => e.AuEStaModId).HasColumnName("AuE_StaModId");
            entity.Property(e => e.AuEStaZalId).HasColumnName("AuE_StaZalId");
            entity.Property(e => e.AuETsMod)
                .HasColumnType("datetime")
                .HasColumnName("AuE_TS_Mod");
            entity.Property(e => e.AuETsZal)
                .HasColumnType("datetime")
                .HasColumnName("AuE_TS_Zal");
            entity.Property(e => e.AuEZakId).HasColumnName("AuE_ZakID");

            entity.HasOne(d => d.AuEPrc).WithMany(p => p.AutoEwids)
                .HasForeignKey(d => d.AuEPrcId)
                .HasConstraintName("FK_AuEPracownik");
        });

        modelBuilder.Entity<AutoKoszty>(entity =>
        {
            entity.HasKey(e => e.AuKAuKid)
                .HasName("AuK_Primary")
                .HasFillFactor(100);

            entity.ToTable("AutoKoszty", "CDN", tb => tb.HasTrigger("AutoKoszty_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.AuKAuEid, e.AuKRokMies, e.AuKDataZap, e.AuKAuKid }, "AuKChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AuKKatId, e.AuKDataZap, e.AuKAuKid }, "AuKKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AuKAuEid, e.AuKRokMies, e.AuKLp, e.AuKAuKid }, "AuKLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.AuKVaNid, "AuKVatNag").HasFillFactor(100);

            entity.Property(e => e.AuKAuKid).HasColumnName("AuK_AuKID");
            entity.Property(e => e.AuKAuEid).HasColumnName("AuK_AuEID");
            entity.Property(e => e.AuKDataZap)
                .HasColumnType("datetime")
                .HasColumnName("AuK_DataZap");
            entity.Property(e => e.AuKDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("AuK_Dokument");
            entity.Property(e => e.AuKKatId).HasColumnName("AuK_KatId");
            entity.Property(e => e.AuKKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AuK_Kategoria");
            entity.Property(e => e.AuKLp).HasColumnName("AuK_Lp");
            entity.Property(e => e.AuKOpeModId).HasColumnName("AuK_OpeModID");
            entity.Property(e => e.AuKOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuK_OpeModKod");
            entity.Property(e => e.AuKOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuK_OpeModNazwisko");
            entity.Property(e => e.AuKOpeZalId).HasColumnName("AuK_OpeZalID");
            entity.Property(e => e.AuKOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuK_OpeZalKod");
            entity.Property(e => e.AuKOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuK_OpeZalNazwisko");
            entity.Property(e => e.AuKRokMies).HasColumnName("AuK_RokMies");
            entity.Property(e => e.AuKStaModId).HasColumnName("AuK_StaModId");
            entity.Property(e => e.AuKStaZalId).HasColumnName("AuK_StaZalId");
            entity.Property(e => e.AuKTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AuK_TS_Mod");
            entity.Property(e => e.AuKTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AuK_TS_Zal");
            entity.Property(e => e.AuKVaNid).HasColumnName("AuK_VaNId");
            entity.Property(e => e.AuKWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AuK_Wartosc");

            entity.HasOne(d => d.AuKAuE).WithMany(p => p.AutoKoszties)
                .HasForeignKey(d => d.AuKAuEid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuKLp");

            entity.HasOne(d => d.AuKKat).WithMany(p => p.AutoKoszties)
                .HasForeignKey(d => d.AuKKatId)
                .HasConstraintName("FK_AuKKategoria");
        });

        modelBuilder.Entity<AutoPrzejazd>(entity =>
        {
            entity.HasKey(e => e.AuPAuPid)
                .HasName("AuP_Primary")
                .HasFillFactor(100);

            entity.ToTable("AutoPrzejazd", "CDN", tb => tb.HasTrigger("AutoPrzejazd_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.AuPAuTid, e.AuPDataZap, e.AuPAuPid }, "AuPAutoTrasa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AuPAuEid, e.AuPRokMies, e.AuPDataZap, e.AuPAuPid }, "AuPChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AuPAuEid, e.AuPRokMies, e.AuPLp, e.AuPAuPid }, "AuPLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AuPAuPid).HasColumnName("AuP_AuPID");
            entity.Property(e => e.AuPAuEid).HasColumnName("AuP_AuEID");
            entity.Property(e => e.AuPAuTid).HasColumnName("AuP_AuTId");
            entity.Property(e => e.AuPCel)
                .HasMaxLength(50)
                .HasColumnName("AuP_Cel");
            entity.Property(e => e.AuPDataPotw)
                .HasColumnType("datetime")
                .HasColumnName("AuP_DataPotw");
            entity.Property(e => e.AuPDataZap)
                .HasColumnType("datetime")
                .HasColumnName("AuP_DataZap");
            entity.Property(e => e.AuPDlugosc)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("AuP_Dlugosc");
            entity.Property(e => e.AuPKonStanL)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("AuP_KonStanL");
            entity.Property(e => e.AuPLp).HasColumnName("AuP_Lp");
            entity.Property(e => e.AuPMiasto).HasColumnName("AuP_Miasto");
            entity.Property(e => e.AuPOpeModId).HasColumnName("AuP_OpeModID");
            entity.Property(e => e.AuPOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuP_OpeModKod");
            entity.Property(e => e.AuPOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuP_OpeModNazwisko");
            entity.Property(e => e.AuPOpeZalId).HasColumnName("AuP_OpeZalID");
            entity.Property(e => e.AuPOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuP_OpeZalKod");
            entity.Property(e => e.AuPOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuP_OpeZalNazwisko");
            entity.Property(e => e.AuPOpiekunId).HasColumnName("AuP_OpiekunId");
            entity.Property(e => e.AuPOpiekunTyp).HasColumnName("AuP_OpiekunTyp");
            entity.Property(e => e.AuPPoczStanL)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("AuP_PoczStanL");
            entity.Property(e => e.AuPPotwierdzil).HasColumnName("AuP_Potwierdzil");
            entity.Property(e => e.AuPPrcAdres)
                .HasMaxLength(100)
                .HasColumnName("AuP_PrcAdres");
            entity.Property(e => e.AuPPrcId).HasColumnName("AuP_PrcId");
            entity.Property(e => e.AuPPrcNazwisko)
                .HasMaxLength(100)
                .HasColumnName("AuP_PrcNazwisko");
            entity.Property(e => e.AuPPrcTyp).HasColumnName("AuP_PrcTyp");
            entity.Property(e => e.AuPRokMies).HasColumnName("AuP_RokMies");
            entity.Property(e => e.AuPStaModId).HasColumnName("AuP_StaModId");
            entity.Property(e => e.AuPStaZalId).HasColumnName("AuP_StaZalId");
            entity.Property(e => e.AuPStawka)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("AuP_Stawka");
            entity.Property(e => e.AuPTrasa)
                .HasMaxLength(1000)
                .HasColumnName("AuP_Trasa");
            entity.Property(e => e.AuPTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AuP_TS_Mod");
            entity.Property(e => e.AuPTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AuP_TS_Zal");

            entity.HasOne(d => d.AuPAuE).WithMany(p => p.AutoPrzejazds)
                .HasForeignKey(d => d.AuPAuEid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuPLp");

            entity.HasOne(d => d.AuPAuT).WithMany(p => p.AutoPrzejazds)
                .HasForeignKey(d => d.AuPAuTid)
                .HasConstraintName("FK_AuPAutoTrasa");
        });

        modelBuilder.Entity<AutoRozlicz>(entity =>
        {
            entity.HasKey(e => e.AuRAuRid)
                .HasName("AuR_Primary")
                .HasFillFactor(100);

            entity.ToTable("AutoRozlicz", "CDN", tb =>
                {
                    tb.HasTrigger("AutoRozlicz_DeleteHandler");
                    tb.HasTrigger("AutoRozlicz_Delete_Trigger");
                    tb.HasTrigger("AutoRozlicz_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.AuRAuEid, e.AuRRokMies }, "AuRAuto")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AuRDekId, e.AuRAuRid }, "AuRDekrety")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AuRKprid, e.AuRAuRid }, "AuRKPR")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.AuRKatId, "AuRKategorie").HasFillFactor(100);

            entity.HasIndex(e => new { e.AuRRokMies, e.AuRAuEid }, "AuRRokMies")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.AuRVaNid, "AuRVatNag").HasFillFactor(100);

            entity.Property(e => e.AuRAuRid).HasColumnName("AuR_AuRID");
            entity.Property(e => e.AuRAuEid).HasColumnName("AuR_AuEID");
            entity.Property(e => e.AuRDekId).HasColumnName("AuR_DekId");
            entity.Property(e => e.AuRKatId).HasColumnName("AuR_KatId");
            entity.Property(e => e.AuRKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AuR_Kategoria");
            entity.Property(e => e.AuRKorektaVat)
                .HasDefaultValue(1)
                .HasColumnName("AuR_KorektaVat");
            entity.Property(e => e.AuRKosztMiesiac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AuR_KosztMiesiac");
            entity.Property(e => e.AuRKosztRok)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AuR_KosztRok");
            entity.Property(e => e.AuRKprid).HasColumnName("AuR_KPRId");
            entity.Property(e => e.AuRKsiegMiesiac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AuR_KsiegMiesiac");
            entity.Property(e => e.AuRKsiegRok)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AuR_KsiegRok");
            entity.Property(e => e.AuROpeModId).HasColumnName("AuR_OpeModID");
            entity.Property(e => e.AuROpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuR_OpeModKod");
            entity.Property(e => e.AuROpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuR_OpeModNazwisko");
            entity.Property(e => e.AuROpeZalId).HasColumnName("AuR_OpeZalID");
            entity.Property(e => e.AuROpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuR_OpeZalKod");
            entity.Property(e => e.AuROpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuR_OpeZalNazwisko");
            entity.Property(e => e.AuRPrzejMiesiac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AuR_PrzejMiesiac");
            entity.Property(e => e.AuRPrzejRok)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AuR_PrzejRok");
            entity.Property(e => e.AuRRejestr)
                .HasMaxLength(20)
                .HasColumnName("AuR_Rejestr");
            entity.Property(e => e.AuRRokMies).HasColumnName("AuR_RokMies");
            entity.Property(e => e.AuRStaModId).HasColumnName("AuR_StaModId");
            entity.Property(e => e.AuRStaZalId).HasColumnName("AuR_StaZalId");
            entity.Property(e => e.AuRTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AuR_TS_Mod");
            entity.Property(e => e.AuRTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AuR_TS_Zal");
            entity.Property(e => e.AuRVaNid).HasColumnName("AuR_VaNId");
            entity.Property(e => e.AuRZakId).HasColumnName("AuR_ZakID");

            entity.HasOne(d => d.AuRAuE).WithMany(p => p.AutoRozliczs)
                .HasForeignKey(d => d.AuRAuEid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuRAuto");

            entity.HasOne(d => d.AuRKat).WithMany(p => p.AutoRozliczs)
                .HasForeignKey(d => d.AuRKatId)
                .HasConstraintName("FK_AuRKategorie");
        });

        modelBuilder.Entity<AutoTrasy>(entity =>
        {
            entity.HasKey(e => e.AuTAuTid)
                .HasName("AuT_Primary")
                .HasFillFactor(100);

            entity.ToTable("AutoTrasy", "CDN");

            entity.HasIndex(e => e.AuTKod, "AuTKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AuTAuTid).HasColumnName("AuT_AuTID");
            entity.Property(e => e.AuTCel)
                .HasMaxLength(50)
                .HasColumnName("AuT_Cel");
            entity.Property(e => e.AuTDlugosc)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("AuT_Dlugosc");
            entity.Property(e => e.AuTKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AuT_Kod");
            entity.Property(e => e.AuTMiasto).HasColumnName("AuT_Miasto");
            entity.Property(e => e.AuTOpeModId).HasColumnName("AuT_OpeModID");
            entity.Property(e => e.AuTOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuT_OpeModKod");
            entity.Property(e => e.AuTOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuT_OpeModNazwisko");
            entity.Property(e => e.AuTOpeZalId).HasColumnName("AuT_OpeZalID");
            entity.Property(e => e.AuTOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AuT_OpeZalKod");
            entity.Property(e => e.AuTOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AuT_OpeZalNazwisko");
            entity.Property(e => e.AuTStaModId).HasColumnName("AuT_StaModId");
            entity.Property(e => e.AuTStaZalId).HasColumnName("AuT_StaZalId");
            entity.Property(e => e.AuTTrasa)
                .HasMaxLength(1000)
                .HasColumnName("AuT_Trasa");
            entity.Property(e => e.AuTTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AuT_TS_Mod");
            entity.Property(e => e.AuTTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AuT_TS_Zal");
        });

        modelBuilder.Entity<Awizo>(entity =>
        {
            entity.HasKey(e => e.AwzAwzid)
                .HasName("AWZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("Awizo", "CDN", tb =>
                {
                    tb.HasTrigger("Awizo_Delete_Trigger");
                    tb.HasTrigger("Awizo_InsertUpdate_Trigger");
                });

            entity.Property(e => e.AwzAwzid).HasColumnName("AWZ_AWZId");
            entity.Property(e => e.AwzBufor).HasColumnName("AWZ_Bufor");
            entity.Property(e => e.AwzData)
                .HasColumnType("datetime")
                .HasColumnName("AWZ_Data");
            entity.Property(e => e.AwzDataDostawy)
                .HasColumnType("datetime")
                .HasColumnName("AWZ_DataDostawy");
            entity.Property(e => e.AwzNumer)
                .HasMaxLength(20)
                .HasColumnName("AWZ_Numer");
            entity.Property(e => e.AwzOdbId).HasColumnName("AWZ_OdbId");
            entity.Property(e => e.AwzOdbTyp).HasColumnName("AWZ_OdbTyp");
            entity.Property(e => e.AwzOpeModId).HasColumnName("AWZ_OpeModId");
            entity.Property(e => e.AwzOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AWZ_OpeModKod");
            entity.Property(e => e.AwzOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AWZ_OpeModNazwisko");
            entity.Property(e => e.AwzOpeZalId).HasColumnName("AWZ_OpeZalID");
            entity.Property(e => e.AwzOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AWZ_OpeZalKod");
            entity.Property(e => e.AwzOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("AWZ_OpeZalNazwisko");
            entity.Property(e => e.AwzPodId).HasColumnName("AWZ_PodId");
            entity.Property(e => e.AwzPodTyp).HasColumnName("AWZ_PodTyp");
            entity.Property(e => e.AwzStaModId).HasColumnName("AWZ_StaModId");
            entity.Property(e => e.AwzStaZalId).HasColumnName("AWZ_StaZalId");
            entity.Property(e => e.AwzTrNid).HasColumnName("AWZ_TrNID");
            entity.Property(e => e.AwzTsMod)
                .HasColumnType("datetime")
                .HasColumnName("AWZ_TS_Mod");
            entity.Property(e => e.AwzTsZal)
                .HasColumnType("datetime")
                .HasColumnName("AWZ_TS_Zal");
            entity.Property(e => e.AwzTypTransportuId).HasColumnName("AWZ_TypTransportuID");
            entity.Property(e => e.AwzWarunkiDostawyId).HasColumnName("AWZ_WarunkiDostawyID");
        });

        modelBuilder.Entity<AwizoOpakowanium>(entity =>
        {
            entity.HasKey(e => e.AwoAwoid)
                .HasName("AWO_Primary")
                .HasFillFactor(100);

            entity.ToTable("AwizoOpakowania", "CDN", tb => tb.HasTrigger("AwizoOpakowania_InsertUpdate_Trigger"));

            entity.Property(e => e.AwoAwoid).HasColumnName("AWO_AWOId");
            entity.Property(e => e.AwoAwzid).HasColumnName("AWO_AWZId");
            entity.Property(e => e.AwoKodSscc)
                .HasMaxLength(18)
                .HasColumnName("AWO_KodSSCC");
            entity.Property(e => e.AwoNrOdbiorca)
                .HasMaxLength(100)
                .HasColumnName("AWO_NrOdbiorca");
            entity.Property(e => e.AwoNrZamowienia)
                .HasMaxLength(35)
                .HasColumnName("AWO_NrZamowienia");
            entity.Property(e => e.AwoObjetosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AWO_Objetosc");
            entity.Property(e => e.AwoOpakowanieId).HasColumnName("AWO_OpakowanieID");
            entity.Property(e => e.AwoOpis)
                .HasMaxLength(70)
                .HasColumnName("AWO_Opis");
            entity.Property(e => e.AwoParentId).HasColumnName("AWO_ParentID");
            entity.Property(e => e.AwoTrEid).HasColumnName("AWO_TrEID");
            entity.Property(e => e.AwoTwrId).HasColumnName("AWO_TwrID");
            entity.Property(e => e.AwoTwrIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AWO_TwrIlosc");
            entity.Property(e => e.AwoTypOpakowaniaId).HasColumnName("AWO_TypOpakowaniaId");
            entity.Property(e => e.AwoWaga)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AWO_Waga");

            entity.HasOne(d => d.AwoAwz).WithMany(p => p.AwizoOpakowania)
                .HasForeignKey(d => d.AwoAwzid)
                .HasConstraintName("FK_AWOAwizo");
        });

        modelBuilder.Entity<AwizoTowary>(entity =>
        {
            entity.HasKey(e => e.AwtAwtid)
                .HasName("AWT_Primary")
                .HasFillFactor(100);

            entity.ToTable("AwizoTowary", "CDN");

            entity.Property(e => e.AwtAwtid).HasColumnName("AWT_AWTId");
            entity.Property(e => e.AwtAwzid).HasColumnName("AWT_AWZId");
            entity.Property(e => e.AwtDataZamowienia)
                .HasColumnType("datetime")
                .HasColumnName("AWT_DataZamowienia");
            entity.Property(e => e.AwtIloscCalkowita)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AWT_IloscCalkowita");
            entity.Property(e => e.AwtIloscDoSpakuj)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AWT_IloscDoSpakuj");
            entity.Property(e => e.AwtIloscZapakowana)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AWT_IloscZapakowana");
            entity.Property(e => e.AwtJm)
                .HasMaxLength(20)
                .HasColumnName("AWT_Jm");
            entity.Property(e => e.AwtNrOdbiorca)
                .HasMaxLength(100)
                .HasColumnName("AWT_NrOdbiorca");
            entity.Property(e => e.AwtNrRo)
                .HasMaxLength(30)
                .HasColumnName("AWT_NrRO");
            entity.Property(e => e.AwtNrZamowienia)
                .HasMaxLength(35)
                .HasColumnName("AWT_NrZamowienia");
            entity.Property(e => e.AwtTrEid).HasColumnName("AWT_TrEId");
            entity.Property(e => e.AwtTwrEan)
                .HasMaxLength(40)
                .HasColumnName("AWT_TwrEAN");
            entity.Property(e => e.AwtTwrId).HasColumnName("AWT_TwrID");
            entity.Property(e => e.AwtTwrKod)
                .HasMaxLength(50)
                .HasColumnName("AWT_TwrKod");
            entity.Property(e => e.AwtTwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("AWT_TwrNazwa");

            entity.HasOne(d => d.AwtAwz).WithMany(p => p.AwizoTowaries)
                .HasForeignKey(d => d.AwtAwzid)
                .HasConstraintName("FK_AWTAwizo");
        });

        modelBuilder.Entity<AwizoTypyOpakowan>(entity =>
        {
            entity.HasKey(e => e.AwtoAwtoid)
                .HasName("AWTO_Primary")
                .HasFillFactor(100);

            entity.ToTable("AwizoTypyOpakowan", "CDN");

            entity.Property(e => e.AwtoAwtoid).HasColumnName("AWTO_AWTOId");
            entity.Property(e => e.AwtoKod)
                .HasMaxLength(17)
                .HasColumnName("AWTO_Kod");
            entity.Property(e => e.AwtoNazwa)
                .HasMaxLength(40)
                .HasColumnName("AWTO_Nazwa");
        });

        modelBuilder.Entity<AwizoTypyTransportu>(entity =>
        {
            entity.HasKey(e => e.AwttAwttid)
                .HasName("AWTT_Primary")
                .HasFillFactor(100);

            entity.ToTable("AwizoTypyTransportu", "CDN");

            entity.Property(e => e.AwttAwttid).HasColumnName("AWTT_AWTTId");
            entity.Property(e => e.AwttNazwa)
                .HasMaxLength(40)
                .HasColumnName("AWTT_Nazwa");
        });

        modelBuilder.Entity<AwizoWarunkiDostawy>(entity =>
        {
            entity.HasKey(e => e.AwwdAwwdid)
                .HasName("AWWD_Primary")
                .HasFillFactor(100);

            entity.ToTable("AwizoWarunkiDostawy", "CDN");

            entity.Property(e => e.AwwdAwwdid).HasColumnName("AWWD_AWWDId");
            entity.Property(e => e.AwwdKod)
                .HasMaxLength(10)
                .HasColumnName("AWWD_Kod");
            entity.Property(e => e.AwwdNazwa)
                .HasMaxLength(50)
                .HasColumnName("AWWD_Nazwa");
        });

        modelBuilder.Entity<BnkBomw>(entity =>
        {
            entity.HasKey(e => e.BomwBomwid)
                .HasName("BOMW_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkBOMW", "CDN", tb => tb.HasTrigger("BnkBOMW_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.BomwBraId, e.BomwDataDok, e.BomwBomwid }, "BOMWChron")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BomwKatId, e.BomwDataDok, e.BomwBomwid }, "BOMWKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BomwBraId, e.BomwKierunek, e.BomwNumerNr }, "BOMWNumeracja")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BomwRozliczonoMw, e.BomwDataDok, e.BomwBomwid }, "BOMWRozliczono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BomwRozliczono2Mw, e.BomwDataDok, e.BomwBomwid }, "BOMWRozliczono2")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BomwBomwid).HasColumnName("BOMW_BOMWID");
            entity.Property(e => e.BomwBraId).HasColumnName("BOMW_BRaID");
            entity.Property(e => e.BomwDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BOMW_DataDok");
            entity.Property(e => e.BomwDataKur)
                .HasColumnType("datetime")
                .HasColumnName("BOMW_DataKur");
            entity.Property(e => e.BomwDataRozMw)
                .HasColumnType("datetime")
                .HasColumnName("BOMW_DataRozMW");
            entity.Property(e => e.BomwKatId).HasColumnName("BOMW_KatID");
            entity.Property(e => e.BomwKierunek)
                .HasDefaultValue((short)1)
                .HasColumnName("BOMW_Kierunek");
            entity.Property(e => e.BomwKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BOMW_KursL");
            entity.Property(e => e.BomwKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BOMW_KursM");
            entity.Property(e => e.BomwKursNumer).HasColumnName("BOMW_KursNumer");
            entity.Property(e => e.BomwKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOMW_Kwota");
            entity.Property(e => e.BomwKwotaRozMw)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOMW_KwotaRozMW");
            entity.Property(e => e.BomwKwotaRozSysMw)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOMW_KwotaRozSysMW");
            entity.Property(e => e.BomwKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOMW_KwotaSys");
            entity.Property(e => e.BomwNumer)
                .HasMaxLength(256)
                .HasComputedColumnSql("(case when [BOMW_NumerObcy]<>'' then [BOMW_NumerObcy] else [CDN].[NumerPelnyBOMW]([BOMW_BRaID],[BOMW_NumerNr],[BOMW_Kierunek]) end)", false)
                .HasColumnName("BOMW_Numer");
            entity.Property(e => e.BomwNumerNr).HasColumnName("BOMW_NumerNr");
            entity.Property(e => e.BomwNumerObcy)
                .HasMaxLength(256)
                .HasColumnName("BOMW_NumerObcy");
            entity.Property(e => e.BomwNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[NumerPelnyBOMW]([BOMW_BRAID],[BOMW_NUMERNR],[BOMW_KIERUNEK]))", false)
                .HasColumnName("BOMW_NumerPelny");
            entity.Property(e => e.BomwOpeModId).HasColumnName("BOMW_OpeModId");
            entity.Property(e => e.BomwOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BOMW_OpeModKod");
            entity.Property(e => e.BomwOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BOMW_OpeModNazwisko");
            entity.Property(e => e.BomwOpeZalId).HasColumnName("BOMW_OpeZalId");
            entity.Property(e => e.BomwOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BOMW_OpeZalKod");
            entity.Property(e => e.BomwOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BOMW_OpeZalNazwisko");
            entity.Property(e => e.BomwOpis)
                .HasMaxLength(254)
                .HasColumnName("BOMW_Opis");
            entity.Property(e => e.BomwRozliczono2Mw).HasColumnName("BOMW_Rozliczono2MW");
            entity.Property(e => e.BomwRozliczonoMw).HasColumnName("BOMW_RozliczonoMW");
            entity.Property(e => e.BomwStaModId).HasColumnName("BOMW_StaModId");
            entity.Property(e => e.BomwStaZalId).HasColumnName("BOMW_StaZalId");
            entity.Property(e => e.BomwTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BOMW_TS_Mod");
            entity.Property(e => e.BomwTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BOMW_TS_Zal");
            entity.Property(e => e.BomwWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BOMW_Waluta");
            entity.Property(e => e.BomwWgKursuMw).HasColumnName("BOMW_WgKursuMW");

            entity.HasOne(d => d.BomwBra).WithMany(p => p.BnkBomws)
                .HasForeignKey(d => d.BomwBraId)
                .HasConstraintName("FK_BOMWChron");
        });

        modelBuilder.Entity<BnkCertyfikaty>(entity =>
        {
            entity.HasKey(e => e.BnCBnCid)
                .HasName("BnC_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkCertyfikaty", "CDN");

            entity.HasIndex(e => new { e.BnCBnaId, e.BnCOpeId, e.BnCTypOperacji }, "BnCBankOpe")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BnCBnCid).HasColumnName("BnC_BnCID");
            entity.Property(e => e.BnCBnaId).HasColumnName("BnC_BNaID");
            entity.Property(e => e.BnCContent).HasColumnName("BnC_Content");
            entity.Property(e => e.BnCExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("BnC_ExpirationDate");
            entity.Property(e => e.BnCNazwa)
                .HasMaxLength(256)
                .HasColumnName("BnC_Nazwa");
            entity.Property(e => e.BnCOpeId).HasColumnName("BnC_OpeID");
            entity.Property(e => e.BnCThumbprint)
                .HasMaxLength(256)
                .HasColumnName("BnC_Thumbprint");
            entity.Property(e => e.BnCTypOperacji).HasColumnName("BnC_TypOperacji");

            entity.HasOne(d => d.BnCBna).WithMany(p => p.BnkCertyfikaties)
                .HasForeignKey(d => d.BnCBnaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BnCBank");
        });

        modelBuilder.Entity<BnkDokElem>(entity =>
        {
            entity.HasKey(e => e.BdeBdeid)
                .HasName("BDE_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkDokElem", "CDN", tb => tb.HasTrigger("BnkDokElem_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.BdeDokId, e.BdeDokTyp }, "BDEDokument").HasFillFactor(100);

            entity.HasIndex(e => new { e.BdeBdnid, e.BdeBdeid }, "BDENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BdeBdeid).HasColumnName("BDE_BDEId");
            entity.Property(e => e.BdeBdnid).HasColumnName("BDE_BDNId");
            entity.Property(e => e.BdeDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BDE_DataDok");
            entity.Property(e => e.BdeDokId).HasColumnName("BDE_DokId");
            entity.Property(e => e.BdeDokTyp)
                .HasMaxLength(20)
                .HasColumnName("BDE_DokTyp");
            entity.Property(e => e.BdeKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDE_Kwota");
            entity.Property(e => e.BdeKwota1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDE_Kwota1");
            entity.Property(e => e.BdeKwota2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDE_Kwota2");
            entity.Property(e => e.BdeNumer)
                .HasMaxLength(30)
                .HasColumnName("BDE_Numer");
            entity.Property(e => e.BdeOpis)
                .HasMaxLength(254)
                .HasColumnName("BDE_Opis");
            entity.Property(e => e.BdeTermin)
                .HasColumnType("datetime")
                .HasColumnName("BDE_Termin");

            entity.HasOne(d => d.BdeBdn).WithMany(p => p.BnkDokElems)
                .HasForeignKey(d => d.BdeBdnid)
                .HasConstraintName("FK_BDENaglowek");
        });

        modelBuilder.Entity<BnkDokNag>(entity =>
        {
            entity.HasKey(e => e.BdnBdnid)
                .HasName("BDN_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkDokNag", "CDN", tb =>
                {
                    tb.HasTrigger("BnkDokNag_DeleteHandler");
                    tb.HasTrigger("BnkDokNag_Delete_Trigger");
                });

            entity.HasIndex(e => e.BdnDdfId, "BDNDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.BdnKatId, e.BdnTyp, e.BdnDataDok, e.BdnBdnid }, "BDNKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BdnNumerString, e.BdnNumerNr }, "BDNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BdnTyp, e.BdnNumerPelny }, "BDNNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BdnPodmiotId, e.BdnPodmiotTyp, e.BdnTyp, e.BdnDataDok, e.BdnBdnid }, "BDNPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BdnBdnid).HasColumnName("BDN_BDNId");
            entity.Property(e => e.BdnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BDN_DataDok");
            entity.Property(e => e.BdnDdfId).HasColumnName("BDN_DDfId");
            entity.Property(e => e.BdnDekId).HasColumnName("BDN_DekID");
            entity.Property(e => e.BdnFplIdkst).HasColumnName("BDN_FPlIDKst");
            entity.Property(e => e.BdnFplIdods).HasColumnName("BDN_FPlIDOds");
            entity.Property(e => e.BdnGenerujPlatnosciKst).HasColumnName("BDN_GenerujPlatnosciKst");
            entity.Property(e => e.BdnGenerujPlatnosciOds).HasColumnName("BDN_GenerujPlatnosciOds");
            entity.Property(e => e.BdnKatId).HasColumnName("BDN_KatID");
            entity.Property(e => e.BdnKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BDN_Kategoria");
            entity.Property(e => e.BdnKosztyDodatkowe)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDN_KosztyDodatkowe");
            entity.Property(e => e.BdnKosztyDodatkoweSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDN_KosztyDodatkoweSys");
            entity.Property(e => e.BdnKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BDN_KursL");
            entity.Property(e => e.BdnKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BDN_KursM");
            entity.Property(e => e.BdnKursNumer).HasColumnName("BDN_KursNumer");
            entity.Property(e => e.BdnNumerNr).HasColumnName("BDN_NumerNr");
            entity.Property(e => e.BdnNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([BDN_NUMERNR],[BDN_NUMERSTRING]))", false)
                .HasColumnName("BDN_NumerPelny");
            entity.Property(e => e.BdnNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("BDN_NumerString");
            entity.Property(e => e.BdnOdsetkiPodatkoweProg)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDN_OdsetkiPodatkoweProg");
            entity.Property(e => e.BdnOdsetkiStopa)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("BDN_OdsetkiStopa");
            entity.Property(e => e.BdnOdsetkiTyp).HasColumnName("BDN_OdsetkiTyp");
            entity.Property(e => e.BdnOpeModId).HasColumnName("BDN_OpeModID");
            entity.Property(e => e.BdnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_OpeModKod");
            entity.Property(e => e.BdnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BDN_OpeModNazwisko");
            entity.Property(e => e.BdnOpeZalId).HasColumnName("BDN_OpeZalID");
            entity.Property(e => e.BdnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_OpeZalKod");
            entity.Property(e => e.BdnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BDN_OpeZalNazwisko");
            entity.Property(e => e.BdnPodmiotId).HasColumnName("BDN_PodmiotID");
            entity.Property(e => e.BdnPodmiotTyp).HasColumnName("BDN_PodmiotTyp");
            entity.Property(e => e.BdnPreDekId).HasColumnName("BDN_PreDekID");
            entity.Property(e => e.BdnRazemKwota1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDN_RazemKwota1");
            entity.Property(e => e.BdnRazemKwota2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDN_RazemKwota2");
            entity.Property(e => e.BdnRazemKwotaSys1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDN_RazemKwotaSys1");
            entity.Property(e => e.BdnRazemKwotaSys2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BDN_RazemKwotaSys2");
            entity.Property(e => e.BdnStaModId).HasColumnName("BDN_StaModId");
            entity.Property(e => e.BdnStaZalId).HasColumnName("BDN_StaZalId");
            entity.Property(e => e.BdnTerminKst)
                .HasColumnType("datetime")
                .HasColumnName("BDN_TerminKst");
            entity.Property(e => e.BdnTerminOds)
                .HasColumnType("datetime")
                .HasColumnName("BDN_TerminOds");
            entity.Property(e => e.BdnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BDN_TS_Mod");
            entity.Property(e => e.BdnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BDN_TS_Zal");
            entity.Property(e => e.BdnTyp).HasColumnName("BDN_Typ");
            entity.Property(e => e.BdnUwagi)
                .HasMaxLength(254)
                .HasColumnName("BDN_Uwagi");
            entity.Property(e => e.BdnUwzglBufor).HasColumnName("BDN_UwzglBufor");
            entity.Property(e => e.BdnUwzglNalez).HasColumnName("BDN_UwzglNalez");
            entity.Property(e => e.BdnUwzglPrzych).HasColumnName("BDN_UwzglPrzych");
            entity.Property(e => e.BdnUwzglRozch).HasColumnName("BDN_UwzglRozch");
            entity.Property(e => e.BdnUwzglZobow).HasColumnName("BDN_UwzglZobow");
            entity.Property(e => e.BdnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BDN_Waluta");
            entity.Property(e => e.BdnWindykacja).HasColumnName("BDN_Windykacja");

            entity.HasOne(d => d.BdnDdf).WithMany(p => p.BnkDokNags)
                .HasForeignKey(d => d.BdnDdfId)
                .HasConstraintName("FK_BDNDokDefinicja");

            entity.HasOne(d => d.BdnKat).WithMany(p => p.BnkDokNags)
                .HasForeignKey(d => d.BdnKatId)
                .HasConstraintName("FK_BDNKategoria");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.BnkDokNags)
                .HasForeignKey(d => new { d.BdnPodmiotId, d.BdnPodmiotTyp })
                .HasConstraintName("FK_BDNPodmiot");
        });

        modelBuilder.Entity<BnkFormatyElem>(entity =>
        {
            entity.HasKey(e => e.BfeBfeid)
                .HasName("BFE_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkFormatyElem", "CDN");

            entity.HasIndex(e => new { e.BfeBfnid, e.BfePoziom, e.BfeLp, e.BfeBfeid }, "BFEFormat")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BfeBfeid).HasColumnName("BFE_BFEId");
            entity.Property(e => e.BfeBfnid).HasColumnName("BFE_BFNId");
            entity.Property(e => e.BfeFormatRachunku).HasColumnName("BFE_FormatRachunku");
            entity.Property(e => e.BfeLaczZpoprzednim).HasColumnName("BFE_LaczZPoprzednim");
            entity.Property(e => e.BfeLp).HasColumnName("BFE_Lp");
            entity.Property(e => e.BfePoziom).HasColumnName("BFE_Poziom");
            entity.Property(e => e.BfeRodzaj).HasColumnName("BFE_Rodzaj");
            entity.Property(e => e.BfeSzerokosc).HasColumnName("BFE_Szerokosc");
            entity.Property(e => e.BfeTyp).HasColumnName("BFE_Typ");
            entity.Property(e => e.BfeWartosc)
                .HasMaxLength(2048)
                .HasColumnName("BFE_Wartosc");
            entity.Property(e => e.BfeWymagane).HasColumnName("BFE_Wymagane");

            entity.HasOne(d => d.BfeBfn).WithMany(p => p.BnkFormatyElems)
                .HasForeignKey(d => d.BfeBfnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BFEFormat");
        });

        modelBuilder.Entity<BnkFormatyNag>(entity =>
        {
            entity.HasKey(e => e.BfnBfnid)
                .HasName("BFN_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkFormatyNag", "CDN", tb =>
                {
                    tb.HasTrigger("BnkFormatyNag_Delete_Trigger");
                    tb.HasTrigger("BnkFormatyNag_Update_Trigger");
                });

            entity.HasIndex(e => new { e.BfnStandardowy, e.BfnNazwa }, "BFNNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BfnBfnid).HasColumnName("BFN_BFNId");
            entity.Property(e => e.BfnCdc).HasColumnName("BFN_CDC");
            entity.Property(e => e.BfnCdcadres)
                .HasMaxLength(255)
                .HasColumnName("BFN_CDCAdres");
            entity.Property(e => e.BfnCdcrodzajCertyfikatow).HasColumnName("BFN_CDCRodzajCertyfikatow");
            entity.Property(e => e.BfnCdcwariant).HasColumnName("BFN_CDCWariant");
            entity.Property(e => e.BfnFormatDaty)
                .HasMaxLength(20)
                .HasColumnName("BFN_FormatDaty");
            entity.Property(e => e.BfnNazwa)
                .HasMaxLength(50)
                .HasColumnName("BFN_Nazwa");
            entity.Property(e => e.BfnNieaktywny).HasColumnName("BFN_Nieaktywny");
            entity.Property(e => e.BfnObslugaEksportu)
                .HasDefaultValue((byte)1)
                .HasColumnName("BFN_ObslugaEksportu");
            entity.Property(e => e.BfnObslugaImportu)
                .HasDefaultValue((byte)1)
                .HasColumnName("BFN_ObslugaImportu");
            entity.Property(e => e.BfnOddzielajPola).HasColumnName("BFN_OddzielajPola");
            entity.Property(e => e.BfnOgrTekstu)
                .HasMaxLength(3)
                .HasColumnName("BFN_OgrTekstu");
            entity.Property(e => e.BfnOgrTekstuEsc)
                .HasMaxLength(3)
                .HasColumnName("BFN_OgrTekstuEsc");
            entity.Property(e => e.BfnPodzPolaNaWiersze)
                .HasMaxLength(3)
                .HasColumnName("BFN_PodzPolaNaWiersze");
            entity.Property(e => e.BfnRozszerzeniePliku)
                .HasMaxLength(3)
                .HasColumnName("BFN_RozszerzeniePliku");
            entity.Property(e => e.BfnSepDzies)
                .HasMaxLength(1)
                .HasColumnName("BFN_SepDzies");
            entity.Property(e => e.BfnSepDziesSplitPay)
                .HasMaxLength(1)
                .HasColumnName("BFN_SepDziesSplitPay");
            entity.Property(e => e.BfnSepGrup)
                .HasMaxLength(1)
                .HasColumnName("BFN_SepGrup");
            entity.Property(e => e.BfnSepOpisuZb)
                .HasMaxLength(3)
                .HasColumnName("BFN_SepOpisuZb");
            entity.Property(e => e.BfnSepPol)
                .HasMaxLength(3)
                .HasColumnName("BFN_SepPol");
            entity.Property(e => e.BfnSepWierszy)
                .HasMaxLength(2)
                .HasColumnName("BFN_SepWierszy");
            entity.Property(e => e.BfnStandardowy).HasColumnName("BFN_Standardowy");
            entity.Property(e => e.BfnStronaKodowa).HasColumnName("BFN_StronaKodowa");
            entity.Property(e => e.BfnTylkoWielkieLitery).HasColumnName("BFN_TylkoWielkieLitery");
            entity.Property(e => e.BfnUsunSpacje).HasColumnName("BFN_UsunSpacje");
            entity.Property(e => e.BfnXml).HasColumnName("BFN_XML");
            entity.Property(e => e.BfnXmlRodzaj).HasColumnName("BFN_XML_Rodzaj");
        });

        modelBuilder.Entity<BnkNazwy>(entity =>
        {
            entity.HasKey(e => e.BnaBnaId)
                .HasName("BNa_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkNazwy", "CDN", tb =>
                {
                    tb.HasTrigger("BnkNazwy_Delete_Trigger");
                    tb.HasTrigger("BnkNazwy_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.BnaAkronim, "BNaAkronim")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BnaGidtyp, e.BnaGidfirma, e.BnaGidnumer }, "BNaGID").HasFillFactor(100);

            entity.HasIndex(e => e.BnaImportRowId, "BNaGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BnaAkronim, e.BnaBnaId }, "BNaGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BnaKatId, "BNaKategoria").HasFillFactor(100);

            entity.HasIndex(e => e.BnaNumer, "BNaNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BnaBnaId).HasColumnName("BNa_BNaId");
            entity.Property(e => e.BnaAdres2)
                .HasMaxLength(40)
                .HasColumnName("BNa_Adres2");
            entity.Property(e => e.BnaAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BNa_Akronim");
            entity.Property(e => e.BnaCdcclientId)
                .HasMaxLength(256)
                .HasColumnName("BNa_CDCClientID");
            entity.Property(e => e.BnaCdckontakt)
                .HasMaxLength(140)
                .HasColumnName("BNa_CDCKontakt");
            entity.Property(e => e.BnaCdckontaktOsoba)
                .HasMaxLength(140)
                .HasColumnName("BNa_CDCKontaktOsoba");
            entity.Property(e => e.BnaCdcoplatyPonosi).HasColumnName("BNa_CDCOplatyPonosi");
            entity.Property(e => e.BnaCdcsecretKey)
                .HasMaxLength(256)
                .HasColumnName("BNa_CDCSecretKey");
            entity.Property(e => e.BnaCentrala)
                .HasMaxLength(3)
                .HasColumnName("BNa_Centrala");
            entity.Property(e => e.BnaCzasRealizacji).HasColumnName("BNa_CzasRealizacji");
            entity.Property(e => e.BnaEmail)
                .HasMaxLength(127)
                .HasColumnName("BNa_Email");
            entity.Property(e => e.BnaFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BNa_Fax");
            entity.Property(e => e.BnaFormat).HasColumnName("BNa_Format");
            entity.Property(e => e.BnaFormatImp).HasColumnName("BNa_FormatImp");
            entity.Property(e => e.BnaFormatSplitPay).HasColumnName("BNa_FormatSplitPay");
            entity.Property(e => e.BnaFormatUs).HasColumnName("BNa_FormatUS");
            entity.Property(e => e.BnaFormatZus).HasColumnName("BNa_FormatZUS");
            entity.Property(e => e.BnaGidfirma).HasColumnName("BNa_GIDFirma");
            entity.Property(e => e.BnaGidlp).HasColumnName("BNa_GIDLp");
            entity.Property(e => e.BnaGidnumer).HasColumnName("BNa_GIDNumer");
            entity.Property(e => e.BnaGidtyp).HasColumnName("BNa_GIDTyp");
            entity.Property(e => e.BnaGmina)
                .HasMaxLength(40)
                .HasColumnName("BNa_Gmina");
            entity.Property(e => e.BnaIban).HasColumnName("BNa_IBAN");
            entity.Property(e => e.BnaImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BNa_ImportAppId");
            entity.Property(e => e.BnaImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("BNa_ImportRowId");
            entity.Property(e => e.BnaKatId).HasColumnName("BNa_KatID");
            entity.Property(e => e.BnaKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BNa_KodPocztowy");
            entity.Property(e => e.BnaKraj)
                .HasMaxLength(40)
                .HasColumnName("BNa_Kraj");
            entity.Property(e => e.BnaMiasto)
                .HasMaxLength(40)
                .HasColumnName("BNa_Miasto");
            entity.Property(e => e.BnaModem)
                .HasMaxLength(20)
                .HasColumnName("BNa_Modem");
            entity.Property(e => e.BnaNazwa1)
                .HasMaxLength(50)
                .HasColumnName("BNa_Nazwa1");
            entity.Property(e => e.BnaNazwa2)
                .HasMaxLength(50)
                .HasColumnName("BNa_Nazwa2");
            entity.Property(e => e.BnaNieRozliczac).HasColumnName("BNa_NieRozliczac");
            entity.Property(e => e.BnaNieaktywny).HasColumnName("BNa_Nieaktywny");
            entity.Property(e => e.BnaNrDomu)
                .HasMaxLength(10)
                .HasColumnName("BNa_NrDomu");
            entity.Property(e => e.BnaNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("BNa_NrLokalu");
            entity.Property(e => e.BnaNumer)
                .HasMaxLength(10)
                .HasColumnName("BNa_Numer");
            entity.Property(e => e.BnaOpeModId).HasColumnName("BNa_OpeModId");
            entity.Property(e => e.BnaOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BNa_OpeModKod");
            entity.Property(e => e.BnaOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BNa_OpeModNazwisko");
            entity.Property(e => e.BnaOpeZalId).HasColumnName("BNa_OpeZalId");
            entity.Property(e => e.BnaOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BNa_OpeZalKod");
            entity.Property(e => e.BnaOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BNa_OpeZalNazwisko");
            entity.Property(e => e.BnaPoczta)
                .HasMaxLength(40)
                .HasColumnName("BNa_Poczta");
            entity.Property(e => e.BnaPodmiotTyp)
                .HasDefaultValue((short)2)
                .HasColumnName("BNa_PodmiotTyp");
            entity.Property(e => e.BnaPowiat)
                .HasMaxLength(40)
                .HasColumnName("BNa_Powiat");
            entity.Property(e => e.BnaPwd)
                .HasMaxLength(30)
                .HasColumnName("BNa_PWD");
            entity.Property(e => e.BnaRachunekNr)
                .HasMaxLength(51)
                .HasDefaultValue("")
                .HasColumnName("BNa_RachunekNr");
            entity.Property(e => e.BnaStaModId).HasColumnName("BNa_StaModId");
            entity.Property(e => e.BnaStaZalId).HasColumnName("BNa_StaZalId");
            entity.Property(e => e.BnaSwift)
                .HasMaxLength(20)
                .HasColumnName("BNa_Swift");
            entity.Property(e => e.BnaTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BNa_Telefon");
            entity.Property(e => e.BnaTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BNa_TelefonSms");
            entity.Property(e => e.BnaTsExport)
                .HasColumnType("datetime")
                .HasColumnName("BNa_TS_Export");
            entity.Property(e => e.BnaTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BNa_TS_Mod");
            entity.Property(e => e.BnaTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BNa_TS_Zal");
            entity.Property(e => e.BnaUid)
                .HasMaxLength(30)
                .HasColumnName("BNa_UID");
            entity.Property(e => e.BnaUlica)
                .HasMaxLength(40)
                .HasColumnName("BNa_Ulica");
            entity.Property(e => e.BnaUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("BNa_URL");
            entity.Property(e => e.BnaWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("BNa_Wojewodztwo");
            entity.Property(e => e.BnaZagraniczny).HasColumnName("BNa_Zagraniczny");

            entity.HasOne(d => d.BnaKat).WithMany(p => p.BnkNazwies)
                .HasForeignKey(d => d.BnaKatId)
                .HasConstraintName("FK_BNaKategoria");
        });

        modelBuilder.Entity<BnkRachZakazy>(entity =>
        {
            entity.HasKey(e => e.BrzBrzid)
                .HasName("BRZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkRachZakazy", "CDN");

            entity.HasIndex(e => new { e.BrzBraId, e.BrzOpeId }, "BRZRachunek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BrzBrzid).HasColumnName("BRZ_BRZID");
            entity.Property(e => e.BrzBraId).HasColumnName("BRZ_BRaID");
            entity.Property(e => e.BrzOpeId).HasColumnName("BRZ_OpeID");
            entity.Property(e => e.BrzRachL).HasColumnName("BRZ_RachL");
            entity.Property(e => e.BrzRachP).HasColumnName("BRZ_RachP");
            entity.Property(e => e.BrzRachR).HasColumnName("BRZ_RachR");
            entity.Property(e => e.BrzRachS).HasColumnName("BRZ_RachS");
            entity.Property(e => e.BrzRachU).HasColumnName("BRZ_RachU");
            entity.Property(e => e.BrzRachZ).HasColumnName("BRZ_RachZ");
            entity.Property(e => e.BrzRapD).HasColumnName("BRZ_RapD");
            entity.Property(e => e.BrzRapP).HasColumnName("BRZ_RapP");
            entity.Property(e => e.BrzRapU).HasColumnName("BRZ_RapU");
            entity.Property(e => e.BrzRapUc).HasColumnName("BRZ_RapUC");
            entity.Property(e => e.BrzRapZ).HasColumnName("BRZ_RapZ");
            entity.Property(e => e.BrzRapZc).HasColumnName("BRZ_RapZC");
            entity.Property(e => e.BrzZapD).HasColumnName("BRZ_ZapD");
            entity.Property(e => e.BrzZapP).HasColumnName("BRZ_ZapP");
            entity.Property(e => e.BrzZapU).HasColumnName("BRZ_ZapU");
            entity.Property(e => e.BrzZapUc).HasColumnName("BRZ_ZapUC");
            entity.Property(e => e.BrzZapZ).HasColumnName("BRZ_ZapZ");
            entity.Property(e => e.BrzZapZc).HasColumnName("BRZ_ZapZC");
            entity.Property(e => e.BrzZdarzD).HasColumnName("BRZ_ZdarzD");
            entity.Property(e => e.BrzZdarzP).HasColumnName("BRZ_ZdarzP");
            entity.Property(e => e.BrzZdarzU).HasColumnName("BRZ_ZdarzU");
            entity.Property(e => e.BrzZdarzUc).HasColumnName("BRZ_ZdarzUC");
            entity.Property(e => e.BrzZdarzZ).HasColumnName("BRZ_ZdarzZ");
            entity.Property(e => e.BrzZdarzZc).HasColumnName("BRZ_ZdarzZC");

            entity.HasOne(d => d.BrzBra).WithMany(p => p.BnkRachZakazies)
                .HasForeignKey(d => d.BrzBraId)
                .HasConstraintName("FK_BRZRachunek");
        });

        modelBuilder.Entity<BnkRachunki>(entity =>
        {
            entity.HasKey(e => e.BraBraId)
                .HasName("BRa_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkRachunki", "CDN", tb => tb.HasTrigger("BnkRachunki_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.BraAkronim, "BRaAkronim")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BraDdfId, "BRaDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.BraGidtyp, e.BraGidfirma, e.BraGidnumer }, "BRaGID").HasFillFactor(100);

            entity.HasIndex(e => e.BraImportRowId, "BRaGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BraKkrId, "BRaKartaTyp").HasFillFactor(100);

            entity.HasIndex(e => new { e.BraBnaId, e.BraRachunekNr }, "BRaNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BraSymbol, "BRaSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BraBraId).HasColumnName("BRa_BRaID");
            entity.Property(e => e.BraAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BRa_Akronim");
            entity.Property(e => e.BraBnaId).HasColumnName("BRa_BNaID");
            entity.Property(e => e.BraBrpOkres).HasColumnName("BRa_BRpOkres");
            entity.Property(e => e.BraCdcidentyfikatorFirmy)
                .HasMaxLength(32)
                .HasColumnName("BRa_CDCIdentyfikatorFirmy");
            entity.Property(e => e.BraCdcnotEditable).HasColumnName("BRa_CDCNotEditable");
            entity.Property(e => e.BraCdcwaitingForFunds).HasColumnName("BRa_CDCWaitingForFunds");
            entity.Property(e => e.BraDdfId).HasColumnName("BRa_DDfID");
            entity.Property(e => e.BraGidfirma).HasColumnName("BRa_GIDFirma");
            entity.Property(e => e.BraGidlp).HasColumnName("BRa_GIDLp");
            entity.Property(e => e.BraGidnumer).HasColumnName("BRa_GIDNumer");
            entity.Property(e => e.BraGidtyp).HasColumnName("BRa_GIDTyp");
            entity.Property(e => e.BraIban).HasColumnName("BRa_IBAN");
            entity.Property(e => e.BraImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BRa_ImportAppId");
            entity.Property(e => e.BraImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("BRa_ImportRowId");
            entity.Property(e => e.BraKaraZaPrzekr)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRa_KaraZaPrzekr");
            entity.Property(e => e.BraKartaDw)
                .HasColumnType("datetime")
                .HasColumnName("BRa_KartaDW");
            entity.Property(e => e.BraKkrId).HasColumnName("BRa_KKrID");
            entity.Property(e => e.BraKontoPrzeciwstawne)
                .HasMaxLength(50)
                .HasColumnName("BRa_KontoPrzeciwstawne");
            entity.Property(e => e.BraKursHistorycznyMw).HasColumnName("BRa_KursHistorycznyMW");
            entity.Property(e => e.BraKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BRa_KursL");
            entity.Property(e => e.BraKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BRa_KursM");
            entity.Property(e => e.BraKursNumer).HasColumnName("BRa_KursNumer");
            entity.Property(e => e.BraKursSprzedazyNr).HasColumnName("BRa_KursSprzedazyNr");
            entity.Property(e => e.BraKursZakupuNr).HasColumnName("BRa_KursZakupuNr");
            entity.Property(e => e.BraLimitKredytu)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRa_LimitKredytu");
            entity.Property(e => e.BraMagazynWalut).HasColumnName("BRa_MagazynWalut");
            entity.Property(e => e.BraNazwa)
                .HasMaxLength(50)
                .HasColumnName("BRa_Nazwa");
            entity.Property(e => e.BraNieaktywny).HasColumnName("BRa_Nieaktywny");
            entity.Property(e => e.BraNumeryObce).HasColumnName("BRa_NumeryObce");
            entity.Property(e => e.BraOpeModId).HasColumnName("BRa_OpeModId");
            entity.Property(e => e.BraOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRa_OpeModKod");
            entity.Property(e => e.BraOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRa_OpeModNazwisko");
            entity.Property(e => e.BraOpeZalId).HasColumnName("BRa_OpeZalId");
            entity.Property(e => e.BraOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRa_OpeZalKod");
            entity.Property(e => e.BraOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRa_OpeZalNazwisko");
            entity.Property(e => e.BraOprocKarne)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("BRa_OprocKarne");
            entity.Property(e => e.BraOprocKredytu)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("BRa_OprocKredytu");
            entity.Property(e => e.BraOprocRachunku)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("BRa_OprocRachunku");
            entity.Property(e => e.BraPrzelewySepa).HasColumnName("BRa_PrzelewySEPA");
            entity.Property(e => e.BraRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("BRa_RachunekNr");
            entity.Property(e => e.BraRozKur2SumaMw).HasColumnName("BRa_RozKur2SumaMW");
            entity.Property(e => e.BraSaldoBo)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRa_SaldoBO");
            entity.Property(e => e.BraSaldoBosys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRa_SaldoBOSys");
            entity.Property(e => e.BraSplitPay).HasColumnName("BRa_SplitPay");
            entity.Property(e => e.BraStaModId).HasColumnName("BRa_StaModId");
            entity.Property(e => e.BraStaZalId).HasColumnName("BRa_StaZalId");
            entity.Property(e => e.BraSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BRa_Symbol");
            entity.Property(e => e.BraTsExport)
                .HasColumnType("datetime")
                .HasColumnName("BRa_TS_Export");
            entity.Property(e => e.BraTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BRa_TS_Mod");
            entity.Property(e => e.BraTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BRa_TS_Zal");
            entity.Property(e => e.BraTyp).HasColumnName("BRa_Typ");
            entity.Property(e => e.BraWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRa_Waluta");

            entity.HasOne(d => d.BraBna).WithMany(p => p.BnkRachunkis)
                .HasForeignKey(d => d.BraBnaId)
                .HasConstraintName("FK_BRaNumer");

            entity.HasOne(d => d.BraDdf).WithMany(p => p.BnkRachunkis)
                .HasForeignKey(d => d.BraDdfId)
                .HasConstraintName("FK_BRaDokDefinicja");

            entity.HasOne(d => d.BraKkr).WithMany(p => p.BnkRachunkis)
                .HasForeignKey(d => d.BraKkrId)
                .HasConstraintName("FK_BRaKartaTyp");
        });

        modelBuilder.Entity<BnkRaporty>(entity =>
        {
            entity.HasKey(e => e.BrpBrpId)
                .HasName("BRp_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkRaporty", "CDN", tb =>
                {
                    tb.HasTrigger("BnkRaporty_DeleteHandler");
                    tb.HasTrigger("BnkRaporty_Delete_Trigger");
                    tb.HasTrigger("BnkRaporty_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.BrpDekId, "BRpDekID").HasFillFactor(100);

            entity.HasIndex(e => e.BrpDdfId, "BRpDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrpGidtyp, e.BrpGidfirma, e.BrpGidnumer }, "BRpGID").HasFillFactor(100);

            entity.HasIndex(e => e.BrpImportRowId, "BRpGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BrpNumerPelny, "BRpNumerPelny").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrpNumerString, e.BrpNumerNr }, "BRpNumeracja").HasFillFactor(100);

            entity.HasIndex(e => e.BrpPreDekId, "BRpPreDekID").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrpBraId, e.BrpDataDok }, "BRpRaport")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BrpBraId, e.BrpDataDok, e.BrpZamkniety }, "BRpRaportZam")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BrpBrpId).HasColumnName("BRp_BRpID");
            entity.Property(e => e.BrpBraId).HasColumnName("BRp_BRaID");
            entity.Property(e => e.BrpCdcwb).HasColumnName("BRp_CDCWB");
            entity.Property(e => e.BrpDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BRp_DataDok");
            entity.Property(e => e.BrpDataZam)
                .HasColumnType("datetime")
                .HasColumnName("BRp_DataZam");
            entity.Property(e => e.BrpDdfId).HasColumnName("BRp_DDfID");
            entity.Property(e => e.BrpDekId).HasColumnName("BRp_DekID");
            entity.Property(e => e.BrpGidfirma).HasColumnName("BRp_GIDFirma");
            entity.Property(e => e.BrpGidlp).HasColumnName("BRp_GIDLp");
            entity.Property(e => e.BrpGidnumer).HasColumnName("BRp_GIDNumer");
            entity.Property(e => e.BrpGidtyp).HasColumnName("BRp_GIDTyp");
            entity.Property(e => e.BrpImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BRp_ImportAppId");
            entity.Property(e => e.BrpImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("BRp_ImportRowId");
            entity.Property(e => e.BrpNumerNr).HasColumnName("BRp_NumerNr");
            entity.Property(e => e.BrpNumerObcy)
                .HasMaxLength(256)
                .HasColumnName("BRp_NumerObcy");
            entity.Property(e => e.BrpNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([BRP_NUMERNR],[BRP_NUMERSTRING]))", false)
                .HasColumnName("BRp_NumerPelny");
            entity.Property(e => e.BrpNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("BRp_NumerString");
            entity.Property(e => e.BrpOpeModId).HasColumnName("BRp_OpeModID");
            entity.Property(e => e.BrpOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRp_OpeModKod");
            entity.Property(e => e.BrpOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRp_OpeModNazwisko");
            entity.Property(e => e.BrpOpeZalId).HasColumnName("BRp_OpeZalID");
            entity.Property(e => e.BrpOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRp_OpeZalKod");
            entity.Property(e => e.BrpOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRp_OpeZalNazwisko");
            entity.Property(e => e.BrpPreDekId).HasColumnName("BRp_PreDekID");
            entity.Property(e => e.BrpPrzychody)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRp_Przychody");
            entity.Property(e => e.BrpPrzychodySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRp_PrzychodySys");
            entity.Property(e => e.BrpRozchody)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRp_Rozchody");
            entity.Property(e => e.BrpRozchodySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRp_RozchodySys");
            entity.Property(e => e.BrpRoznicaKursowaSysMw)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRp_RoznicaKursowaSysMW");
            entity.Property(e => e.BrpSaldoBo)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRp_SaldoBO");
            entity.Property(e => e.BrpSaldoBosys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRp_SaldoBOSys");
            entity.Property(e => e.BrpStaModId).HasColumnName("BRp_StaModId");
            entity.Property(e => e.BrpStaZalId).HasColumnName("BRp_StaZalId");
            entity.Property(e => e.BrpTsExport)
                .HasColumnType("datetime")
                .HasColumnName("BRp_TS_Export");
            entity.Property(e => e.BrpTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BRp_TS_Mod");
            entity.Property(e => e.BrpTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BRp_TS_Zal");
            entity.Property(e => e.BrpZamkniety).HasColumnName("BRp_Zamkniety");

            entity.HasOne(d => d.BrpBra).WithMany(p => p.BnkRaporties)
                .HasForeignKey(d => d.BrpBraId)
                .HasConstraintName("FK_BRpRaport");

            entity.HasOne(d => d.BrpDdf).WithMany(p => p.BnkRaporties)
                .HasForeignKey(d => d.BrpDdfId)
                .HasConstraintName("FK_BRpDokDefinicja");
        });

        modelBuilder.Entity<BnkRozKwoty>(entity =>
        {
            entity.HasKey(e => e.BrkBrkid)
                .HasName("BRK_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkRozKwoty", "CDN", tb =>
                {
                    tb.HasTrigger("BnkRozKwoty_DeleteHandler");
                    tb.HasTrigger("BnkRozKwoty_InsertUpdateDelete_Trigger");
                });

            entity.HasIndex(e => e.BrkZapisAutomatyczny, "BRKAuto").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkDataDok, e.BrkBrkid }, "BRKChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BrkDekId, "BRKDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.BrkDek2Id, "BRKDekrety2").HasFillFactor(100);

            entity.HasIndex(e => e.BrkDleId, "BRKDleID").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkLdokTyp, e.BrkLdokId, e.BrkDataDok }, "BRKDokDataL").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkPdokTyp, e.BrkPdokId, e.BrkDataDok }, "BRKDokDataP").HasFillFactor(100);

            entity.HasIndex(e => e.BrkDdfId, "BRKDokDef").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkLdokTyp, e.BrkLdokId }, "BRKDokL").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkPdokTyp, e.BrkPpodId }, "BRKDokP").HasFillFactor(100);

            entity.HasIndex(e => e.BrkImportRowId, "BRKGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BrkKprid, "BRKKPR").HasFillFactor(100);

            entity.HasIndex(e => e.BrkKroId, "BRKKRoID").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkNumerString, e.BrkNumerNr }, "BRKNumer").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkNumerPelny, e.BrkBrkid }, "BRKNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkLpodId, e.BrkLpodTyp }, "BRKPodmiotL").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkPpodId, e.BrkPpodTyp }, "BRKPodmiotP").HasFillFactor(100);

            entity.HasIndex(e => e.BrkPreDekId, "BRKPreDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.BrkPreDek2Id, "BRKPreDekrety2").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkRoznicaKursowaSys, e.BrkNumerPelny, e.BrkBrkid }, "BRKRozKur")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BrkRycId, "BRKRyc").HasFillFactor(100);

            entity.Property(e => e.BrkBrkid).HasColumnName("BRK_BRKID");
            entity.Property(e => e.BrkAutoOffLine).HasColumnName("BRK_AutoOffLine");
            entity.Property(e => e.BrkDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BRK_DataDok");
            entity.Property(e => e.BrkDdfId).HasColumnName("BRK_DDfId");
            entity.Property(e => e.BrkDek2Id).HasColumnName("BRK_Dek2Id");
            entity.Property(e => e.BrkDekId).HasColumnName("BRK_DekId");
            entity.Property(e => e.BrkDleId).HasColumnName("BRK_DleID");
            entity.Property(e => e.BrkDokumentLp)
                .HasComputedColumnSql("([CDN].[BRKDokumentLP]([BRK_LDokTyp],[BRK_LDokId],[BRK_PDokTyp],[BRK_PDokId]))", false)
                .HasColumnName("BRK_DokumentLP");
            entity.Property(e => e.BrkImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BRK_ImportAppId");
            entity.Property(e => e.BrkImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("BRK_ImportRowId");
            entity.Property(e => e.BrkKolumnaKpr).HasColumnName("BRK_KolumnaKPR");
            entity.Property(e => e.BrkKolumnaRyc).HasColumnName("BRK_KolumnaRyc");
            entity.Property(e => e.BrkKontoMa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRK_KontoMa1");
            entity.Property(e => e.BrkKontoMa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRK_KontoMa2");
            entity.Property(e => e.BrkKontoWn1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRK_KontoWn1");
            entity.Property(e => e.BrkKontoWn2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRK_KontoWn2");
            entity.Property(e => e.BrkKprid).HasColumnName("BRK_KPRId");
            entity.Property(e => e.BrkKroId).HasColumnName("BRK_KRoID");
            entity.Property(e => e.BrkKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRK_Kwota");
            entity.Property(e => e.BrkKwotaSysL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRK_KwotaSysL");
            entity.Property(e => e.BrkKwotaSysP)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRK_KwotaSysP");
            entity.Property(e => e.BrkLbraId).HasColumnName("BRK_LBRaID");
            entity.Property(e => e.BrkLdokId).HasColumnName("BRK_LDokID");
            entity.Property(e => e.BrkLdokTyp).HasColumnName("BRK_LDokTyp");
            entity.Property(e => e.BrkLkwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRK_LKwota");
            entity.Property(e => e.BrkLnumer)
                .HasMaxLength(256)
                .HasColumnName("BRK_LNumer");
            entity.Property(e => e.BrkLpodId).HasColumnName("BRK_LPodID");
            entity.Property(e => e.BrkLpodTyp).HasColumnName("BRK_LPodTyp");
            entity.Property(e => e.BrkLwynagrodzenie)
                .HasComputedColumnSql("([CDN].[CzyWynagrodzenie]([BRK_LDokTyp],[BRK_LDokId]))", false)
                .HasColumnName("BRK_LWynagrodzenie");
            entity.Property(e => e.BrkNumerNr).HasColumnName("BRK_NumerNr");
            entity.Property(e => e.BrkNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([BRK_NUMERNR],[BRK_NUMERSTRING]))", false)
                .HasColumnName("BRK_NumerPelny");
            entity.Property(e => e.BrkNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("BRK_NumerString");
            entity.Property(e => e.BrkOpeModId).HasColumnName("BRK_OpeModId");
            entity.Property(e => e.BrkOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRK_OpeModKod");
            entity.Property(e => e.BrkOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRK_OpeModNazwisko");
            entity.Property(e => e.BrkOpeZalId).HasColumnName("BRK_OpeZalId");
            entity.Property(e => e.BrkOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRK_OpeZalKod");
            entity.Property(e => e.BrkOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRK_OpeZalNazwisko");
            entity.Property(e => e.BrkPbraId).HasColumnName("BRK_PBRaID");
            entity.Property(e => e.BrkPdokId).HasColumnName("BRK_PDokID");
            entity.Property(e => e.BrkPdokTyp).HasColumnName("BRK_PDokTyp");
            entity.Property(e => e.BrkPkwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRK_PKwota");
            entity.Property(e => e.BrkPnumer)
                .HasMaxLength(256)
                .HasColumnName("BRK_PNumer");
            entity.Property(e => e.BrkPpodId).HasColumnName("BRK_PPodID");
            entity.Property(e => e.BrkPpodTyp).HasColumnName("BRK_PPodTyp");
            entity.Property(e => e.BrkPreDek2Id).HasColumnName("BRK_PreDek2ID");
            entity.Property(e => e.BrkPreDekId).HasColumnName("BRK_PreDekID");
            entity.Property(e => e.BrkPwynagrodzenie)
                .HasComputedColumnSql("([CDN].[CzyWynagrodzenie]([BRK_PDokTyp],[BRK_PDokId]))", false)
                .HasColumnName("BRK_PWynagrodzenie");
            entity.Property(e => e.BrkRozliczenieAutomatyczne).HasColumnName("BRK_RozliczenieAutomatyczne");
            entity.Property(e => e.BrkRoznicaKursowaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRK_RoznicaKursowaSys");
            entity.Property(e => e.BrkRycId).HasColumnName("BRK_RycID");
            entity.Property(e => e.BrkStaModId).HasColumnName("BRK_StaModId");
            entity.Property(e => e.BrkStaZalId).HasColumnName("BRK_StaZalId");
            entity.Property(e => e.BrkTsExport)
                .HasColumnType("datetime")
                .HasColumnName("BRK_TS_Export");
            entity.Property(e => e.BrkTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BRK_TS_Mod");
            entity.Property(e => e.BrkTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BRK_TS_Zal");
            entity.Property(e => e.BrkWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRK_Waluta");
            entity.Property(e => e.BrkZakId).HasColumnName("BRK_ZakID");
            entity.Property(e => e.BrkZaliczka).HasColumnName("BRK_Zaliczka");
            entity.Property(e => e.BrkZapisAutomatyczny).HasColumnName("BRK_ZapisAutomatyczny");
            entity.Property(e => e.BrkZwloka).HasColumnName("BRK_Zwloka");

            entity.HasOne(d => d.BrkDdf).WithMany(p => p.BnkRozKwoties)
                .HasForeignKey(d => d.BrkDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BRKDokDef");
        });

        modelBuilder.Entity<BnkRozKwotyMw>(entity =>
        {
            entity.HasKey(e => e.BrkmwBrkmwid)
                .HasName("BRKMW_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkRozKwotyMW", "CDN", tb =>
                {
                    tb.HasTrigger("BnkRozKwotyMW_DeleteHandler");
                    tb.HasTrigger("BnkRozKwotyMW_InsertUpdateDelete_Trigger");
                });

            entity.HasIndex(e => new { e.BrkmwBraId, e.BrkmwDataDok, e.BrkmwBrkmwid }, "BRKMWChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwDekId, "BRKMWDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwDek2Id, "BRKMWDekrety2").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkmwLdokId, e.BrkmwDataDok }, "BRKMWDokDataL").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkmwPdokTyp, e.BrkmwPdokId, e.BrkmwDataDok }, "BRKMWDokDataP").HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwDdfId, "BRKMWDokDef").HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwLdokId, "BRKMWDokL").HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwPdokTyp, "BRKMWDokP").HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwKprid, "BRKMWKPR").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkmwNumerString, e.BrkmwNumerNr }, "BRKMWNumer").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkmwNumerPelny, e.BrkmwBrkmwid }, "BRKMWNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwPreDekId, "BRKMWPreDekrety").HasFillFactor(100);

            entity.HasIndex(e => new { e.BrkmwRoznicaKursowaSys, e.BrkmwNumerPelny, e.BrkmwBrkmwid }, "BRKMWRozKur")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BrkmwRycId, "BRKMWRyc").HasFillFactor(100);

            entity.Property(e => e.BrkmwBrkmwid).HasColumnName("BRKMW_BRKMWID");
            entity.Property(e => e.BrkmwBraId).HasColumnName("BRKMW_BRaID");
            entity.Property(e => e.BrkmwDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BRKMW_DataDok");
            entity.Property(e => e.BrkmwDdfId).HasColumnName("BRKMW_DDfId");
            entity.Property(e => e.BrkmwDek2Id).HasColumnName("BRKMW_Dek2Id");
            entity.Property(e => e.BrkmwDekId).HasColumnName("BRKMW_DekId");
            entity.Property(e => e.BrkmwKolumnaKpr).HasColumnName("BRKMW_KolumnaKPR");
            entity.Property(e => e.BrkmwKolumnaRyc).HasColumnName("BRKMW_KolumnaRyc");
            entity.Property(e => e.BrkmwKontoMa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRKMW_KontoMa1");
            entity.Property(e => e.BrkmwKontoWn1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRKMW_KontoWn1");
            entity.Property(e => e.BrkmwKprid).HasColumnName("BRKMW_KPRId");
            entity.Property(e => e.BrkmwKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKMW_Kwota");
            entity.Property(e => e.BrkmwKwotaSysL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKMW_KwotaSysL");
            entity.Property(e => e.BrkmwKwotaSysP)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKMW_KwotaSysP");
            entity.Property(e => e.BrkmwLdokId).HasColumnName("BRKMW_LDokID");
            entity.Property(e => e.BrkmwLdokTyp).HasColumnName("BRKMW_LDokTyp");
            entity.Property(e => e.BrkmwLnumer)
                .HasMaxLength(256)
                .HasColumnName("BRKMW_LNumer");
            entity.Property(e => e.BrkmwLpodId).HasColumnName("BRKMW_LPodID");
            entity.Property(e => e.BrkmwLpodTyp).HasColumnName("BRKMW_LPodTyp");
            entity.Property(e => e.BrkmwLwynagrodzenie)
                .HasComputedColumnSql("([CDN].[CzyWynagrodzenie]([BRKMW_LDokTyp],[BRKMW_LDokId]))", false)
                .HasColumnName("BRKMW_LWynagrodzenie");
            entity.Property(e => e.BrkmwNumerNr).HasColumnName("BRKMW_NumerNr");
            entity.Property(e => e.BrkmwNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([BRKMW_NUMERNR],[BRKMW_NUMERSTRING]))", false)
                .HasColumnName("BRKMW_NumerPelny");
            entity.Property(e => e.BrkmwNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("BRKMW_NumerString");
            entity.Property(e => e.BrkmwOpeModId).HasColumnName("BRKMW_OpeModId");
            entity.Property(e => e.BrkmwOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRKMW_OpeModKod");
            entity.Property(e => e.BrkmwOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRKMW_OpeModNazwisko");
            entity.Property(e => e.BrkmwOpeZalId).HasColumnName("BRKMW_OpeZalId");
            entity.Property(e => e.BrkmwOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRKMW_OpeZalKod");
            entity.Property(e => e.BrkmwOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BRKMW_OpeZalNazwisko");
            entity.Property(e => e.BrkmwPdokId).HasColumnName("BRKMW_PDokID");
            entity.Property(e => e.BrkmwPdokTyp).HasColumnName("BRKMW_PDokTyp");
            entity.Property(e => e.BrkmwPnumer)
                .HasMaxLength(256)
                .HasColumnName("BRKMW_PNumer");
            entity.Property(e => e.BrkmwPpodId).HasColumnName("BRKMW_PPodID");
            entity.Property(e => e.BrkmwPpodTyp).HasColumnName("BRKMW_PPodTyp");
            entity.Property(e => e.BrkmwPreDekId).HasColumnName("BRKMW_PreDekID");
            entity.Property(e => e.BrkmwPwynagrodzenie)
                .HasComputedColumnSql("([CDN].[CzyWynagrodzenie]([BRKMW_PDokTyp],[BRKMW_PDokId]))", false)
                .HasColumnName("BRKMW_PWynagrodzenie");
            entity.Property(e => e.BrkmwRoznicaKursowaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKMW_RoznicaKursowaSys");
            entity.Property(e => e.BrkmwRycId).HasColumnName("BRKMW_RycID");
            entity.Property(e => e.BrkmwStaModId).HasColumnName("BRKMW_StaModId");
            entity.Property(e => e.BrkmwStaZalId).HasColumnName("BRKMW_StaZalId");
            entity.Property(e => e.BrkmwTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BRKMW_TS_Mod");
            entity.Property(e => e.BrkmwTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BRKMW_TS_Zal");
            entity.Property(e => e.BrkmwWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRKMW_Waluta");
            entity.Property(e => e.BrkmwZakId).HasColumnName("BRKMW_ZakID");

            entity.HasOne(d => d.BrkmwDdf).WithMany(p => p.BnkRozKwotyMws)
                .HasForeignKey(d => d.BrkmwDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BRKMWDokDef");
        });

        modelBuilder.Entity<BnkRozKwotyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BnkRozKwotyView", "CDN");

            entity.Property(e => e.BrkvAutoOffLine).HasColumnName("BRKV_AutoOffLine");
            entity.Property(e => e.BrkvAutomatyczny).HasColumnName("BRKV_Automatyczny");
            entity.Property(e => e.BrkvBraId1).HasColumnName("BRKV_BRaId1");
            entity.Property(e => e.BrkvBraId2).HasColumnName("BRKV_BRaId2");
            entity.Property(e => e.BrkvBrkid).HasColumnName("BRKV_BRKID");
            entity.Property(e => e.BrkvData1)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_Data1");
            entity.Property(e => e.BrkvData2)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_Data2");
            entity.Property(e => e.BrkvDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_DataDok");
            entity.Property(e => e.BrkvDdfId).HasColumnName("BRKV_DDfId");
            entity.Property(e => e.BrkvDek2Id).HasColumnName("BRKV_Dek2Id");
            entity.Property(e => e.BrkvDekId).HasColumnName("BRKV_DekId");
            entity.Property(e => e.BrkvDokId1).HasColumnName("BRKV_DokId1");
            entity.Property(e => e.BrkvDokId2).HasColumnName("BRKV_DokId2");
            entity.Property(e => e.BrkvDokTyp1).HasColumnName("BRKV_DokTyp1");
            entity.Property(e => e.BrkvDokTyp2).HasColumnName("BRKV_DokTyp2");
            entity.Property(e => e.BrkvDokumentLp).HasColumnName("BRKV_DokumentLP");
            entity.Property(e => e.BrkvImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BRKV_ImportAppId");
            entity.Property(e => e.BrkvImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("BRKV_ImportRowId");
            entity.Property(e => e.BrkvKolumnaKpr).HasColumnName("BRKV_KolumnaKPR");
            entity.Property(e => e.BrkvKontoMa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRKV_KontoMa1");
            entity.Property(e => e.BrkvKontoMa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRKV_KontoMa2");
            entity.Property(e => e.BrkvKontoPrzeciwstawne1)
                .HasMaxLength(50)
                .HasColumnName("BRKV_KontoPrzeciwstawne1");
            entity.Property(e => e.BrkvKontoPrzeciwstawne2)
                .HasMaxLength(50)
                .HasColumnName("BRKV_KontoPrzeciwstawne2");
            entity.Property(e => e.BrkvKontoWn1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRKV_KontoWn1");
            entity.Property(e => e.BrkvKontoWn2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRKV_KontoWn2");
            entity.Property(e => e.BrkvKprid).HasColumnName("BRKV_KPRId");
            entity.Property(e => e.BrkvKursL1)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BRKV_KursL1");
            entity.Property(e => e.BrkvKursL2)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BRKV_KursL2");
            entity.Property(e => e.BrkvKursM1)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BRKV_KursM1");
            entity.Property(e => e.BrkvKursM2)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BRKV_KursM2");
            entity.Property(e => e.BrkvKursNumer1).HasColumnName("BRKV_KursNumer1");
            entity.Property(e => e.BrkvKursNumer2).HasColumnName("BRKV_KursNumer2");
            entity.Property(e => e.BrkvKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_Kwota");
            entity.Property(e => e.BrkvKwota1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_Kwota1");
            entity.Property(e => e.BrkvKwota2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_Kwota2");
            entity.Property(e => e.BrkvKwotaRozSys1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_KwotaRozSys1");
            entity.Property(e => e.BrkvKwotaRozSys2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_KwotaRozSys2");
            entity.Property(e => e.BrkvKwotaSys1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_KwotaSys1");
            entity.Property(e => e.BrkvKwotaSys2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_KwotaSys2");
            entity.Property(e => e.BrkvKwotaSysL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_KwotaSysL");
            entity.Property(e => e.BrkvKwotaSysP)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_KwotaSysP");
            entity.Property(e => e.BrkvLdokId).HasColumnName("BRKV_LDokID");
            entity.Property(e => e.BrkvLdokTyp).HasColumnName("BRKV_LDokTyp");
            entity.Property(e => e.BrkvNumer1)
                .HasMaxLength(256)
                .HasColumnName("BRKV_Numer1");
            entity.Property(e => e.BrkvNumer2)
                .HasMaxLength(256)
                .HasColumnName("BRKV_Numer2");
            entity.Property(e => e.BrkvNumerNr).HasColumnName("BRKV_NumerNr");
            entity.Property(e => e.BrkvNumerPelny)
                .HasMaxLength(30)
                .HasColumnName("BRKV_NumerPelny");
            entity.Property(e => e.BrkvNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("BRKV_NumerString");
            entity.Property(e => e.BrkvOpeModId).HasColumnName("BRKV_OpeModId");
            entity.Property(e => e.BrkvOpeZalId).HasColumnName("BRKV_OpeZalId");
            entity.Property(e => e.BrkvOpis1)
                .HasMaxLength(1024)
                .HasColumnName("BRKV_Opis1");
            entity.Property(e => e.BrkvOpis2)
                .HasMaxLength(1024)
                .HasColumnName("BRKV_Opis2");
            entity.Property(e => e.BrkvPdokId).HasColumnName("BRKV_PDokID");
            entity.Property(e => e.BrkvPdokTyp).HasColumnName("BRKV_PDokTyp");
            entity.Property(e => e.BrkvPodmiotId1).HasColumnName("BRKV_PodmiotId1");
            entity.Property(e => e.BrkvPodmiotId2).HasColumnName("BRKV_PodmiotId2");
            entity.Property(e => e.BrkvPodmiotTyp1).HasColumnName("BRKV_PodmiotTyp1");
            entity.Property(e => e.BrkvPodmiotTyp2).HasColumnName("BRKV_PodmiotTyp2");
            entity.Property(e => e.BrkvRoznicaKursowaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BRKV_RoznicaKursowaSys");
            entity.Property(e => e.BrkvStaModId).HasColumnName("BRKV_StaModId");
            entity.Property(e => e.BrkvStaZalId).HasColumnName("BRKV_StaZalId");
            entity.Property(e => e.BrkvTermin1)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_Termin1");
            entity.Property(e => e.BrkvTermin2)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_Termin2");
            entity.Property(e => e.BrkvTsExport)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_TS_Export");
            entity.Property(e => e.BrkvTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_TS_Mod");
            entity.Property(e => e.BrkvTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BRKV_TS_Zal");
            entity.Property(e => e.BrkvTyp1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRKV_Typ1");
            entity.Property(e => e.BrkvTyp2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRKV_Typ2");
            entity.Property(e => e.BrkvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRKV_Waluta");
            entity.Property(e => e.BrkvWynagrodzenie1).HasColumnName("BRKV_Wynagrodzenie1");
            entity.Property(e => e.BrkvWynagrodzenie2).HasColumnName("BRKV_Wynagrodzenie2");
            entity.Property(e => e.BrkvZwloka).HasColumnName("BRKV_Zwloka");
        });

        modelBuilder.Entity<BnkRozRelacje>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BnkRozRelacje", "CDN", tb => tb.HasTrigger("BnkRozRelacje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.BrrZdokId, e.BrrZdokTyp }, "BRRLZrodlo").HasFillFactor(100);

            entity.HasIndex(e => e.BrrBrkid, "BRRRozKwoty").HasFillFactor(100);

            entity.Property(e => e.BrrBrkid).HasColumnName("BRR_BRKID");
            entity.Property(e => e.BrrDdokId).HasColumnName("BRR_DDokID");
            entity.Property(e => e.BrrDdokTyp).HasColumnName("BRR_DDokTyp");
            entity.Property(e => e.BrrZdokId).HasColumnName("BRR_ZDokID");
            entity.Property(e => e.BrrZdokTyp).HasColumnName("BRR_ZDokTyp");
        });

        modelBuilder.Entity<BnkSposobyLogowanium>(entity =>
        {
            entity.HasKey(e => e.BslBslid)
                .HasName("BSL_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkSposobyLogowania", "CDN");

            entity.HasIndex(e => new { e.BslBnaId, e.BslBslid }, "BSLBank")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BslBslid).HasColumnName("BSL_BSLID");
            entity.Property(e => e.BslBnaId).HasColumnName("BSL_BNaID");
            entity.Property(e => e.BslLogin)
                .HasMaxLength(32)
                .HasColumnName("BSL_Login");
            entity.Property(e => e.BslOpeId).HasColumnName("BSL_OpeID");
            entity.Property(e => e.BslTypCertyfikatu).HasColumnName("BSL_TypCertyfikatu");
            entity.Property(e => e.BslTypLogowania).HasColumnName("BSL_TypLogowania");

            entity.HasOne(d => d.BslBna).WithMany(p => p.BnkSposobyLogowania)
                .HasForeignKey(d => d.BslBnaId)
                .HasConstraintName("FK_BSLBank");
        });

        modelBuilder.Entity<BnkZapisy>(entity =>
        {
            entity.HasKey(e => e.BzpBzpId)
                .HasName("BZp_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkZapisy", "CDN", tb =>
                {
                    tb.HasTrigger("BnkZapisy_DeleteHandler");
                    tb.HasTrigger("BnkZapisy_Delete_Trigger");
                    tb.HasTrigger("BnkZapisy_InsertUpdateDelete_PrzeliczAgregaty_Trigger");
                    tb.HasTrigger("BnkZapisy_InsertUpdateDelete_Trigger");
                });

            entity.HasIndex(e => new { e.BzpBraId, e.BzpKierunek, e.BzpRozliczono, e.BzpWynagrodzenie }, "BZpBRaKierRozWyna").HasFillFactor(100);

            entity.HasIndex(e => e.BzpBnaId, "BZpBank").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpDataDok, e.BzpBzpId }, "BZpData")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BzpDdfId, "BZpDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpExpImpId, e.BzpBzpId }, "BZpExpImpID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BzpImportRowId, "BZpGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BzpKkrId, "BZpKartaTyp").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpKatId, e.BzpDataDok, e.BzpBzpId }, "BZpKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpPodmiotTyp, e.BzpKierunek, e.BzpRozliczono }, "BZpKntLista").HasFillFactor(100);

            entity.HasIndex(e => e.BzpNumerPelny, "BZpNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpNumerString, e.BzpNumerNr }, "BZpNumeracja")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpPodmiotId, e.BzpPodmiotTyp, e.BzpDataDok, e.BzpBzpId }, "BZpPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpBraId, e.BzpDataDok, e.BzpBzpId }, "BZpRachunek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpBrpId, e.BzpBrpLp, e.BzpBzpId }, "BZpRaport")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpPodmiotId, e.BzpPodmiotTyp, e.BzpRozliczono, e.BzpDataDok, e.BzpBzpId }, "BZpRozliczono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzpPodmiotId, e.BzpPodmiotTyp, e.BzpRozliczono2, e.BzpDataDok, e.BzpBzpId }, "BZpRozliczono2")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BzpZapisAutomatyczny, "BZpZapisAuto").HasFillFactor(100);

            entity.Property(e => e.BzpBzpId).HasColumnName("BZp_BZpID");
            entity.Property(e => e.BzpAdres2)
                .HasMaxLength(40)
                .HasColumnName("BZp_Adres2");
            entity.Property(e => e.BzpAutoOffLine).HasColumnName("BZp_AutoOffLine");
            entity.Property(e => e.BzpBnaId).HasColumnName("BZp_BNaID");
            entity.Property(e => e.BzpBraId).HasColumnName("BZp_BRaID");
            entity.Property(e => e.BzpBrpId).HasColumnName("BZp_BRpID");
            entity.Property(e => e.BzpBrpLp).HasColumnName("BZp_BRpLP");
            entity.Property(e => e.BzpCdc).HasColumnName("BZp_CDC");
            entity.Property(e => e.BzpCdcbnkAddInfo)
                .HasMaxLength(256)
                .HasColumnName("BZp_CDCBnkAddInfo");
            entity.Property(e => e.BzpCdcidentPrzelewuBank)
                .HasMaxLength(35)
                .HasColumnName("BZp_CDCIdentPrzelewuBank");
            entity.Property(e => e.BzpCdcopis)
                .HasMaxLength(255)
                .HasColumnName("BZp_CDCOpis");
            entity.Property(e => e.BzpDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BZp_DataDok");
            entity.Property(e => e.BzpDataKur)
                .HasColumnType("datetime")
                .HasColumnName("BZp_DataKur");
            entity.Property(e => e.BzpDataRoz)
                .HasColumnType("datetime")
                .HasColumnName("BZp_DataRoz");
            entity.Property(e => e.BzpDataRozMw)
                .HasColumnType("datetime")
                .HasColumnName("BZp_DataRozMW");
            entity.Property(e => e.BzpDdfId).HasColumnName("BZp_DDfID");
            entity.Property(e => e.BzpExpImpId)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("BZp_ExpImpID");
            entity.Property(e => e.BzpGmina)
                .HasMaxLength(40)
                .HasColumnName("BZp_Gmina");
            entity.Property(e => e.BzpIban).HasColumnName("BZp_IBAN");
            entity.Property(e => e.BzpImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BZp_ImportAppId");
            entity.Property(e => e.BzpImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("BZp_ImportRowId");
            entity.Property(e => e.BzpImportowany).HasColumnName("BZp_Importowany");
            entity.Property(e => e.BzpKartaDw)
                .HasColumnType("datetime")
                .HasColumnName("BZp_KartaDW");
            entity.Property(e => e.BzpKartaNr)
                .HasMaxLength(16)
                .HasColumnName("BZp_KartaNr");
            entity.Property(e => e.BzpKatId).HasColumnName("BZp_KatID");
            entity.Property(e => e.BzpKierunek).HasColumnName("BZp_Kierunek");
            entity.Property(e => e.BzpKkrId).HasColumnName("BZp_KKrID");
            entity.Property(e => e.BzpKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BZp_KodPocztowy");
            entity.Property(e => e.BzpKolumnaKpr).HasColumnName("BZp_KolumnaKPR");
            entity.Property(e => e.BzpKontoPrzeciwstawne)
                .HasMaxLength(50)
                .HasColumnName("BZp_KontoPrzeciwstawne");
            entity.Property(e => e.BzpKprid).HasColumnName("BZp_KPRID");
            entity.Property(e => e.BzpKraj)
                .HasMaxLength(40)
                .HasColumnName("BZp_Kraj");
            entity.Property(e => e.BzpKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BZp_KursL");
            entity.Property(e => e.BzpKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BZp_KursM");
            entity.Property(e => e.BzpKursNumer).HasColumnName("BZp_KursNumer");
            entity.Property(e => e.BzpKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZp_Kwota");
            entity.Property(e => e.BzpKwotaRoz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZp_KwotaRoz");
            entity.Property(e => e.BzpKwotaRozMw)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZp_KwotaRozMW");
            entity.Property(e => e.BzpKwotaRozSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZp_KwotaRozSys");
            entity.Property(e => e.BzpKwotaRozSysMw)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZp_KwotaRozSysMW");
            entity.Property(e => e.BzpKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZp_KwotaSys");
            entity.Property(e => e.BzpMagazynWalut).HasColumnName("BZp_MagazynWalut");
            entity.Property(e => e.BzpMiasto)
                .HasMaxLength(40)
                .HasColumnName("BZp_Miasto");
            entity.Property(e => e.BzpNazwa1)
                .HasMaxLength(50)
                .HasColumnName("BZp_Nazwa1");
            entity.Property(e => e.BzpNazwa2)
                .HasMaxLength(50)
                .HasColumnName("BZp_Nazwa2");
            entity.Property(e => e.BzpNazwa3)
                .HasMaxLength(250)
                .HasColumnName("BZp_Nazwa3");
            entity.Property(e => e.BzpNrDomu)
                .HasMaxLength(10)
                .HasColumnName("BZp_NrDomu");
            entity.Property(e => e.BzpNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("BZp_NrLokalu");
            entity.Property(e => e.BzpNumer)
                .HasMaxLength(256)
                .HasComputedColumnSql("(case when [BZP_NUMEROBCY]<>'' then [BZP_NUMEROBCY] else [CDN].[FN_NUMERPELNY]([BZP_NUMERNR],[BZP_NUMERSTRING]) end)", false)
                .HasColumnName("BZp_Numer");
            entity.Property(e => e.BzpNumerNr).HasColumnName("BZp_NumerNr");
            entity.Property(e => e.BzpNumerObcy)
                .HasMaxLength(256)
                .HasColumnName("BZp_NumerObcy");
            entity.Property(e => e.BzpNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([BZP_NUMERNR],[BZP_NUMERSTRING]))", false)
                .HasColumnName("BZp_NumerPelny");
            entity.Property(e => e.BzpNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("BZp_NumerString");
            entity.Property(e => e.BzpOpeModId).HasColumnName("BZp_OpeModId");
            entity.Property(e => e.BzpOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZp_OpeModKod");
            entity.Property(e => e.BzpOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BZp_OpeModNazwisko");
            entity.Property(e => e.BzpOpeZalId).HasColumnName("BZp_OpeZalId");
            entity.Property(e => e.BzpOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZp_OpeZalKod");
            entity.Property(e => e.BzpOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BZp_OpeZalNazwisko");
            entity.Property(e => e.BzpOpis)
                .HasMaxLength(1024)
                .HasColumnName("BZp_Opis");
            entity.Property(e => e.BzpPoczta)
                .HasMaxLength(40)
                .HasColumnName("BZp_Poczta");
            entity.Property(e => e.BzpPodmiotId).HasColumnName("BZp_PodmiotID");
            entity.Property(e => e.BzpPodmiotRachunekLp).HasColumnName("BZp_PodmiotRachunekLp");
            entity.Property(e => e.BzpPodmiotTyp).HasColumnName("BZp_PodmiotTyp");
            entity.Property(e => e.BzpPowiat)
                .HasMaxLength(40)
                .HasColumnName("BZp_Powiat");
            entity.Property(e => e.BzpRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("BZp_RachunekNr");
            entity.Property(e => e.BzpRelId).HasColumnName("BZp_RelID");
            entity.Property(e => e.BzpRelTyp).HasColumnName("BZp_RelTyp");
            entity.Property(e => e.BzpRozliczono).HasColumnName("BZp_Rozliczono");
            entity.Property(e => e.BzpRozliczono2).HasColumnName("BZp_Rozliczono2");
            entity.Property(e => e.BzpRozliczono2Mw).HasColumnName("BZp_Rozliczono2MW");
            entity.Property(e => e.BzpRozliczonoMw).HasColumnName("BZp_RozliczonoMW");
            entity.Property(e => e.BzpSplitPay).HasColumnName("BZp_SplitPay");
            entity.Property(e => e.BzpSplitPayZapisVat).HasColumnName("BZp_SplitPayZapisVAT");
            entity.Property(e => e.BzpStaModId).HasColumnName("BZp_StaModId");
            entity.Property(e => e.BzpStaZalId).HasColumnName("BZp_StaZalId");
            entity.Property(e => e.BzpTsExport)
                .HasColumnType("datetime")
                .HasColumnName("BZp_TS_Export");
            entity.Property(e => e.BzpTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BZp_TS_Mod");
            entity.Property(e => e.BzpTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BZp_TS_Zal");
            entity.Property(e => e.BzpTyp).HasColumnName("BZp_Typ");
            entity.Property(e => e.BzpTypDokumentuKb)
                .HasComputedColumnSql("((2))", false)
                .HasColumnName("BZp_TypDokumentuKB");
            entity.Property(e => e.BzpUlica)
                .HasMaxLength(40)
                .HasColumnName("BZp_Ulica");
            entity.Property(e => e.BzpUraId).HasColumnName("BZp_URaID");
            entity.Property(e => e.BzpWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BZp_Waluta");
            entity.Property(e => e.BzpWalutaDok)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BZp_WalutaDok");
            entity.Property(e => e.BzpWgKursuMw).HasColumnName("BZp_WgKursuMW");
            entity.Property(e => e.BzpWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("BZp_Wojewodztwo");
            entity.Property(e => e.BzpWynagrodzenie).HasColumnName("BZp_Wynagrodzenie");
            entity.Property(e => e.BzpZakId).HasColumnName("BZp_ZakID");
            entity.Property(e => e.BzpZapisAutomatyczny).HasColumnName("BZp_ZapisAutomatyczny");

            entity.HasOne(d => d.BzpBna).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => d.BzpBnaId)
                .HasConstraintName("FK_BZpBank");

            entity.HasOne(d => d.BzpBra).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => d.BzpBraId)
                .HasConstraintName("FK_BZpRachunek");

            entity.HasOne(d => d.BzpBrp).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => d.BzpBrpId)
                .HasConstraintName("FK_BZpRaport");

            entity.HasOne(d => d.BzpDdf).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => d.BzpDdfId)
                .HasConstraintName("FK_BZpDokDefinicja");

            entity.HasOne(d => d.BzpKat).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => d.BzpKatId)
                .HasConstraintName("FK_BZpKategoria");

            entity.HasOne(d => d.BzpKkr).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => d.BzpKkrId)
                .HasConstraintName("FK_BZpKartaTyp");

            entity.HasOne(d => d.BzpUra).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => d.BzpUraId)
                .HasConstraintName("FK_BZpUrzRachunek");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.BnkZapisies)
                .HasForeignKey(d => new { d.BzpPodmiotId, d.BzpPodmiotTyp })
                .HasConstraintName("FK_BZpPodmiot");
        });

        modelBuilder.Entity<BnkZapisyCdcsepainfo>(entity =>
        {
            entity.HasKey(e => e.BzpCsiBzpCsiid)
                .HasName("BZpCSI_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkZapisyCDCSEPAInfo", "CDN");

            entity.HasIndex(e => new { e.BzpCsiBzpId, e.BzpCsiSekcja }, "BZpCSISekcja")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BzpCsiBzpCsiid).HasColumnName("BZpCSI_BZpCSIID");
            entity.Property(e => e.BzpCsiBicbei)
                .HasMaxLength(50)
                .HasColumnName("BZpCSI_BICBEI");
            entity.Property(e => e.BzpCsiBzpId).HasColumnName("BZpCSI_BZpID");
            entity.Property(e => e.BzpCsiDataUr)
                .HasColumnType("datetime")
                .HasColumnName("BZpCSI_DataUr");
            entity.Property(e => e.BzpCsiIdent)
                .HasMaxLength(50)
                .HasColumnName("BZpCSI_Ident");
            entity.Property(e => e.BzpCsiIdentTyp)
                .HasMaxLength(50)
                .HasColumnName("BZpCSI_IdentTyp");
            entity.Property(e => e.BzpCsiIdentWyst)
                .HasMaxLength(50)
                .HasColumnName("BZpCSI_IdentWyst");
            entity.Property(e => e.BzpCsiKraj)
                .HasMaxLength(40)
                .HasColumnName("BZpCSI_Kraj");
            entity.Property(e => e.BzpCsiMiasto)
                .HasMaxLength(40)
                .HasColumnName("BZpCSI_Miasto");
            entity.Property(e => e.BzpCsiNazwa)
                .HasMaxLength(512)
                .HasColumnName("BZpCSI_Nazwa");
            entity.Property(e => e.BzpCsiOsobaTyp).HasColumnName("BZpCSI_OsobaTyp");
            entity.Property(e => e.BzpCsiSekcja).HasColumnName("BZpCSI_Sekcja");
            entity.Property(e => e.BzpCsiWojew)
                .HasMaxLength(40)
                .HasColumnName("BZpCSI_Wojew");

            entity.HasOne(d => d.BzpCsiBzp).WithMany(p => p.BnkZapisyCdcsepainfos)
                .HasForeignKey(d => d.BzpCsiBzpId)
                .HasConstraintName("FK_BZpCSIBZp");
        });

        modelBuilder.Entity<BnkZdarzeniaAutoryzacje>(entity =>
        {
            entity.HasKey(e => e.BzdABzdAid)
                .HasName("BZdA_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkZdarzeniaAutoryzacje", "CDN");

            entity.HasIndex(e => new { e.BzdABzdId, e.BzdAOpeId, e.BzdATypAutoryzacji }, "BZdAOperatorTypAutoryzacji")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BzdABzdAid).HasColumnName("BZdA_BZdAID");
            entity.Property(e => e.BzdABzdId).HasColumnName("BZdA_BZdID");
            entity.Property(e => e.BzdAData)
                .HasColumnType("datetime")
                .HasColumnName("BZdA_Data");
            entity.Property(e => e.BzdALoginUzytkownika)
                .HasMaxLength(256)
                .HasColumnName("BZdA_LoginUzytkownika");
            entity.Property(e => e.BzdAOpeId).HasColumnName("BZdA_OpeID");
            entity.Property(e => e.BzdATypAutoryzacji).HasColumnName("BZdA_TypAutoryzacji");

            entity.HasOne(d => d.BzdABzd).WithMany(p => p.BnkZdarzeniaAutoryzacjes)
                .HasForeignKey(d => d.BzdABzdId)
                .HasConstraintName("FK_BZdABZd");
        });

        modelBuilder.Entity<BnkZdarzeniaCdcsepainfo>(entity =>
        {
            entity.HasKey(e => e.BzdCsiBzdCsiid)
                .HasName("BZdCSI_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkZdarzeniaCDCSEPAInfo", "CDN");

            entity.HasIndex(e => new { e.BzdCsiBzdId, e.BzdCsiSekcja }, "BZdCSISekcja")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BzdCsiBzdCsiid).HasColumnName("BZdCSI_BZdCSIID");
            entity.Property(e => e.BzdCsiBicbei)
                .HasMaxLength(50)
                .HasColumnName("BZdCSI_BICBEI");
            entity.Property(e => e.BzdCsiBzdId).HasColumnName("BZdCSI_BZdID");
            entity.Property(e => e.BzdCsiDataUr)
                .HasColumnType("datetime")
                .HasColumnName("BZdCSI_DataUr");
            entity.Property(e => e.BzdCsiIdent)
                .HasMaxLength(50)
                .HasColumnName("BZdCSI_Ident");
            entity.Property(e => e.BzdCsiIdentTyp)
                .HasMaxLength(50)
                .HasColumnName("BZdCSI_IdentTyp");
            entity.Property(e => e.BzdCsiIdentWyst)
                .HasMaxLength(50)
                .HasColumnName("BZdCSI_IdentWyst");
            entity.Property(e => e.BzdCsiKraj)
                .HasMaxLength(40)
                .HasColumnName("BZdCSI_Kraj");
            entity.Property(e => e.BzdCsiMiasto)
                .HasMaxLength(40)
                .HasColumnName("BZdCSI_Miasto");
            entity.Property(e => e.BzdCsiNazwa)
                .HasMaxLength(512)
                .HasColumnName("BZdCSI_Nazwa");
            entity.Property(e => e.BzdCsiOsobaTyp).HasColumnName("BZdCSI_OsobaTyp");
            entity.Property(e => e.BzdCsiSekcja).HasColumnName("BZdCSI_Sekcja");
            entity.Property(e => e.BzdCsiWojew)
                .HasMaxLength(40)
                .HasColumnName("BZdCSI_Wojew");

            entity.HasOne(d => d.BzdCsiBzd).WithMany(p => p.BnkZdarzeniaCdcsepainfos)
                .HasForeignKey(d => d.BzdCsiBzdId)
                .HasConstraintName("FK_BZdCSIBZd");
        });

        modelBuilder.Entity<BnkZdarzeniaPodpisy>(entity =>
        {
            entity.HasKey(e => e.BzdPBzdPid)
                .HasName("BZdP_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkZdarzeniaPodpisy", "CDN");

            entity.HasIndex(e => new { e.BzdPBzdId, e.BzdPOpeId }, "BZdPOperator")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BzdPBzdPid).HasColumnName("BZdP_BZdPID");
            entity.Property(e => e.BzdPBzdId).HasColumnName("BZdP_BZdID");
            entity.Property(e => e.BzdPCertyfikatNazwa)
                .HasMaxLength(256)
                .HasColumnName("BZdP_CertyfikatNazwa");
            entity.Property(e => e.BzdPData)
                .HasColumnType("datetime")
                .HasColumnName("BZdP_Data");
            entity.Property(e => e.BzdPOpeId).HasColumnName("BZdP_OpeID");
            entity.Property(e => e.BzdPPodpis).HasColumnName("BZdP_Podpis");

            entity.HasOne(d => d.BzdPBzd).WithMany(p => p.BnkZdarzeniaPodpisies)
                .HasForeignKey(d => d.BzdPBzdId)
                .HasConstraintName("FK_BZdPBZd");
        });

        modelBuilder.Entity<BnkZdarzenium>(entity =>
        {
            entity.HasKey(e => e.BzdBzdId)
                .HasName("BZd_Primary")
                .HasFillFactor(100);

            entity.ToTable("BnkZdarzenia", "CDN", tb =>
                {
                    tb.HasTrigger("BnkZdarzeniaAlias_InsertUpdateHandler");
                    tb.HasTrigger("BnkZdarzenia_DeleteHandler");
                    tb.HasTrigger("BnkZdarzenia_Delete_Trigger");
                    tb.HasTrigger("BnkZdarzenia_InsertUpdateHandler");
                    tb.HasTrigger("BnkZdarzenia_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.BzdBraId, e.BzdKierunek, e.BzdRozliczono, e.BzdDataReal }, "BZdBRaKierRozReal").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdBraId, e.BzdRozliczono, e.BzdDokumentTyp, e.BzdStan }, "BZdBRaRozDokStan").HasFillFactor(100);

            entity.HasIndex(e => e.BzdBnaId, "BZdBank").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdRozliczono, e.BzdDataReal, e.BzdBzdId }, "BZdDataReal")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdRozliczono2, e.BzdDataReal, e.BzdBzdId }, "BZdDataReal2")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BzdDdfId, "BZdDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => e.BzdDokumentTyp, "BZdDokTyp").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdExpImpId, e.BzdBzdId }, "BZdExpImpID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BzdFplId, "BZdFormaPl").HasFillFactor(100);

            entity.HasIndex(e => e.BzdImportRowId, "BZdGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdKatId, e.BzdRozliczono, e.BzdDataReal, e.BzdBzdId }, "BZdKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdKatId, e.BzdRozliczono2, e.BzdDataReal, e.BzdBzdId }, "BZdKategoria2")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdPodmiotTyp, e.BzdKierunek, e.BzdRozliczono, e.BzdDataReal }, "BZdKntLista").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdPrwId, e.BzdPrwTyp }, "BZdPierwotny").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdPodmiotTyp, e.BzdPodmiotId, e.BzdWaluta, e.BzdKierunek, e.BzdRozliczono }, "BZdPodWalKierRoz").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdPodmiotId, e.BzdPodmiotTyp, e.BzdRozliczono, e.BzdDataReal, e.BzdBzdId }, "BZdPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdPodmiotId, e.BzdPodmiotTyp, e.BzdRozliczono2, e.BzdDataReal, e.BzdBzdId }, "BZdPodmiot2")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdBraId, e.BzdRozliczono, e.BzdDataReal, e.BzdBzdId }, "BZdRachunek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdBraId, e.BzdRozliczono2, e.BzdDataReal, e.BzdBzdId }, "BZdRachunek2")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdRozliczono, e.BzdDokumentTyp, e.BzdStan }, "BZdRozDokStan").HasFillFactor(100);

            entity.HasIndex(e => new { e.BzdDokumentId, e.BzdDokumentTyp }, "BZdZrodlo").HasFillFactor(100);

            entity.Property(e => e.BzdBzdId).HasColumnName("BZd_BZdID");
            entity.Property(e => e.BzdApfinoLink)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("BZd_ApfinoLink");
            entity.Property(e => e.BzdApfinoLinkPayLater)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("BZd_ApfinoLinkPayLater");
            entity.Property(e => e.BzdApfinoStat).HasColumnName("BZd_ApfinoStat");
            entity.Property(e => e.BzdAutoWindBlokadaSprzed).HasColumnName("BZd_AutoWindBlokadaSprzed");
            entity.Property(e => e.BzdBnaId).HasColumnName("BZd_BNaID");
            entity.Property(e => e.BzdBraId).HasColumnName("BZd_BRaID");
            entity.Property(e => e.BzdCdcdataKomunikatu)
                .HasColumnType("datetime")
                .HasColumnName("BZd_CDCDataKomunikatu");
            entity.Property(e => e.BzdCdcdataWyslania)
                .HasColumnType("datetime")
                .HasColumnName("BZd_CDCDataWyslania");
            entity.Property(e => e.BzdCdcident)
                .HasMaxLength(255)
                .HasColumnName("BZd_CDCIdent");
            entity.Property(e => e.BzdCdcidentPrzelewuBank)
                .HasMaxLength(35)
                .HasColumnName("BZd_CDCIdentPrzelewuBank");
            entity.Property(e => e.BzdCdckodKomunikatu)
                .HasMaxLength(8)
                .HasColumnName("BZd_CDCKodKomunikatu");
            entity.Property(e => e.BzdCdckomunikat)
                .HasMaxLength(255)
                .HasColumnName("BZd_CDCKomunikat");
            entity.Property(e => e.BzdCdcopeId).HasColumnName("BZd_CDCOpeID");
            entity.Property(e => e.BzdCdcsendPaymentsTaskId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("BZd_CDCSendPaymentsTaskID");
            entity.Property(e => e.BzdCdcsendPaymentsXmlrequest).HasColumnName("BZd_CDCSendPaymentsXMLRequest");
            entity.Property(e => e.BzdDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BZd_DataDok");
            entity.Property(e => e.BzdDataKur)
                .HasColumnType("datetime")
                .HasColumnName("BZd_DataKur");
            entity.Property(e => e.BzdDataReal)
                .HasColumnType("datetime")
                .HasColumnName("BZd_DataReal");
            entity.Property(e => e.BzdDataRoz)
                .HasColumnType("datetime")
                .HasColumnName("BZd_DataRoz");
            entity.Property(e => e.BzdDataWys)
                .HasColumnType("datetime")
                .HasColumnName("BZd_DataWys");
            entity.Property(e => e.BzdDdfId).HasColumnName("BZd_DDfID");
            entity.Property(e => e.BzdDokumentId).HasColumnName("BZd_DokumentID");
            entity.Property(e => e.BzdDokumentTyp).HasColumnName("BZd_DokumentTyp");
            entity.Property(e => e.BzdElixirO1)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("BZd_ElixirO1");
            entity.Property(e => e.BzdElixirO2)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("BZd_ElixirO2");
            entity.Property(e => e.BzdElixirO3)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("BZd_ElixirO3");
            entity.Property(e => e.BzdElixirO4)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("BZd_ElixirO4");
            entity.Property(e => e.BzdExpImpId)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("BZd_ExpImpID");
            entity.Property(e => e.BzdFplId).HasColumnName("BZd_FPlId");
            entity.Property(e => e.BzdIban).HasColumnName("BZd_IBAN");
            entity.Property(e => e.BzdIdSynchro).HasColumnName("BZd_IdSynchro");
            entity.Property(e => e.BzdImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BZd_ImportAppId");
            entity.Property(e => e.BzdImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("BZd_ImportRowId");
            entity.Property(e => e.BzdKatId).HasColumnName("BZd_KatID");
            entity.Property(e => e.BzdKierunek).HasColumnName("BZd_Kierunek");
            entity.Property(e => e.BzdKomornikZajecieWynagr).HasColumnName("BZd_KomornikZajecieWynagr");
            entity.Property(e => e.BzdKontoPrzeciwstawne)
                .HasMaxLength(50)
                .HasColumnName("BZd_KontoPrzeciwstawne");
            entity.Property(e => e.BzdKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BZd_KursL");
            entity.Property(e => e.BzdKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BZd_KursM");
            entity.Property(e => e.BzdKursNumer).HasColumnName("BZd_KursNumer");
            entity.Property(e => e.BzdKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZd_Kwota");
            entity.Property(e => e.BzdKwotaRoz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZd_KwotaRoz");
            entity.Property(e => e.BzdKwotaRozSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZd_KwotaRozSys");
            entity.Property(e => e.BzdKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZd_KwotaSys");
            entity.Property(e => e.BzdNieNaliczajOdsetek).HasColumnName("BZd_NieNaliczajOdsetek");
            entity.Property(e => e.BzdNumer)
                .HasMaxLength(256)
                .HasComputedColumnSql("(case when [BZD_NUMEROBCY]<>'' then [BZD_NUMEROBCY] when [BZD_NUMERPELNY]<>'' then [BZD_NUMERPELNY] else CONVERT([nvarchar](256),[BZD_OPIS],(0)) end)", false)
                .HasColumnName("BZd_Numer");
            entity.Property(e => e.BzdNumerObcy)
                .HasMaxLength(256)
                .HasColumnName("BZd_NumerObcy");
            entity.Property(e => e.BzdNumerPelny)
                .HasMaxLength(256)
                .HasColumnName("BZd_NumerPelny");
            entity.Property(e => e.BzdOpeModId).HasColumnName("BZd_OpeModId");
            entity.Property(e => e.BzdOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZd_OpeModKod");
            entity.Property(e => e.BzdOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BZd_OpeModNazwisko");
            entity.Property(e => e.BzdOpePotwId).HasColumnName("BZd_OpePotwId");
            entity.Property(e => e.BzdOpeWysId).HasColumnName("BZd_OpeWysId");
            entity.Property(e => e.BzdOpeZalId).HasColumnName("BZd_OpeZalId");
            entity.Property(e => e.BzdOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZd_OpeZalKod");
            entity.Property(e => e.BzdOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BZd_OpeZalNazwisko");
            entity.Property(e => e.BzdOpis)
                .HasMaxLength(254)
                .HasColumnName("BZd_Opis");
            entity.Property(e => e.BzdPodmiotId).HasColumnName("BZd_PodmiotID");
            entity.Property(e => e.BzdPodmiotRachunekLp).HasColumnName("BZd_PodmiotRachunekLp");
            entity.Property(e => e.BzdPodmiotTyp).HasColumnName("BZd_PodmiotTyp");
            entity.Property(e => e.BzdPriorytet).HasColumnName("BZd_Priorytet");
            entity.Property(e => e.BzdPrwId).HasColumnName("BZd_PrwID");
            entity.Property(e => e.BzdPrwTyp).HasColumnName("BZd_PrwTyp");
            entity.Property(e => e.BzdPrzelewSepa).HasColumnName("BZd_PrzelewSEPA");
            entity.Property(e => e.BzdRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("BZd_RachunekNr");
            entity.Property(e => e.BzdRelId).HasColumnName("BZd_RelID");
            entity.Property(e => e.BzdRelTyp).HasColumnName("BZd_RelTyp");
            entity.Property(e => e.BzdRozliczono).HasColumnName("BZd_Rozliczono");
            entity.Property(e => e.BzdRozliczono2).HasColumnName("BZd_Rozliczono2");
            entity.Property(e => e.BzdSplitPay).HasColumnName("BZd_SplitPay");
            entity.Property(e => e.BzdSplitPayKwotaVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BZd_SplitPayKwotaVAT");
            entity.Property(e => e.BzdSplitPayNipE)
                .HasMaxLength(20)
                .HasColumnName("BZd_SplitPayNipE");
            entity.Property(e => e.BzdSplitPayNrDok)
                .HasMaxLength(30)
                .HasColumnName("BZd_SplitPayNrDok");
            entity.Property(e => e.BzdSrw).HasColumnName("BZd_Srw");
            entity.Property(e => e.BzdStaModId).HasColumnName("BZd_StaModId");
            entity.Property(e => e.BzdStaZalId).HasColumnName("BZd_StaZalId");
            entity.Property(e => e.BzdStan).HasColumnName("BZd_Stan");
            entity.Property(e => e.BzdTermin)
                .HasColumnType("datetime")
                .HasColumnName("BZd_Termin");
            entity.Property(e => e.BzdTerminR)
                .HasColumnType("datetime")
                .HasColumnName("BZd_TerminR");
            entity.Property(e => e.BzdTsExport)
                .HasColumnType("datetime")
                .HasColumnName("BZd_TS_Export");
            entity.Property(e => e.BzdTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BZd_TS_Mod");
            entity.Property(e => e.BzdTsPotw)
                .HasColumnType("datetime")
                .HasColumnName("BZd_TS_Potw");
            entity.Property(e => e.BzdTsWys)
                .HasColumnType("datetime")
                .HasColumnName("BZd_TS_Wys");
            entity.Property(e => e.BzdTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BZd_TS_Zal");
            entity.Property(e => e.BzdTypDokumentuKb)
                .HasComputedColumnSql("((1))", false)
                .HasColumnName("BZd_TypDokumentuKB");
            entity.Property(e => e.BzdUraId).HasColumnName("BZd_URaID");
            entity.Property(e => e.BzdWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BZd_Waluta");
            entity.Property(e => e.BzdWalutaDok)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BZd_WalutaDok");
            entity.Property(e => e.BzdWeryfRachIdOdpytania)
                .HasMaxLength(16)
                .HasColumnName("BZd_WeryfRach_IdOdpytania");
            entity.Property(e => e.BzdWindykacjaSchematId).HasColumnName("Bzd_WindykacjaSchematId");
            entity.Property(e => e.BzdZwloka).HasColumnName("BZd_Zwloka");

            entity.HasOne(d => d.BzdBna).WithMany(p => p.BnkZdarzenia)
                .HasForeignKey(d => d.BzdBnaId)
                .HasConstraintName("FK_BZdBank");

            entity.HasOne(d => d.BzdBra).WithMany(p => p.BnkZdarzenia)
                .HasForeignKey(d => d.BzdBraId)
                .HasConstraintName("FK_BZdRachunek");

            entity.HasOne(d => d.BzdDdf).WithMany(p => p.BnkZdarzenia)
                .HasForeignKey(d => d.BzdDdfId)
                .HasConstraintName("FK_BZdDokDefinicja");

            entity.HasOne(d => d.BzdFpl).WithMany(p => p.BnkZdarzenia)
                .HasForeignKey(d => d.BzdFplId)
                .HasConstraintName("FK_BRpPlatnosc");

            entity.HasOne(d => d.BzdKat).WithMany(p => p.BnkZdarzenia)
                .HasForeignKey(d => d.BzdKatId)
                .HasConstraintName("FK_BZdKategoria");

            entity.HasOne(d => d.BzdUra).WithMany(p => p.BnkZdarzenia)
                .HasForeignKey(d => d.BzdUraId)
                .HasConstraintName("FK_BZdUrzRachunek");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.BnkZdarzenia)
                .HasForeignKey(d => new { d.BzdPodmiotId, d.BzdPodmiotTyp })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BZdPodmiot");
        });

        modelBuilder.Entity<Boelem>(entity =>
        {
            entity.HasKey(e => e.BoeBoeid)
                .HasName("BOE_Primary")
                .HasFillFactor(100);

            entity.ToTable("BOElem", "CDN", tb =>
                {
                    tb.HasTrigger("BOElem_DeleteHandler");
                    tb.HasTrigger("BOElem_InsertUpdateDelete_Trigger");
                    tb.HasTrigger("BOElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.BoeDokumentId, e.BoeDokumentTyp }, "BOEDokument").HasFillFactor(100);

            entity.HasIndex(e => e.BoeAccId, "BOEKonto").HasFillFactor(100);

            entity.HasIndex(e => e.BoeAccPrevId, "BOEKontoPrev").HasFillFactor(100);

            entity.HasIndex(e => new { e.BoeBonid, e.BoeBoeid }, "BOENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BoeBoeid).HasColumnName("BOE_BOEId");
            entity.Property(e => e.BoeAccId).HasColumnName("BOE_AccId");
            entity.Property(e => e.BoeAccPrevId).HasColumnName("BOE_AccPrevId");
            entity.Property(e => e.BoeBezRozliczenia).HasColumnName("BOE_BezRozliczenia");
            entity.Property(e => e.BoeBonid).HasColumnName("BOE_BONId");
            entity.Property(e => e.BoeDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BOE_DataDok");
            entity.Property(e => e.BoeDataKur)
                .HasColumnType("datetime")
                .HasColumnName("BOE_DataKur");
            entity.Property(e => e.BoeDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("BOE_Dokument");
            entity.Property(e => e.BoeDokumentId).HasColumnName("BOE_DokumentId");
            entity.Property(e => e.BoeDokumentTyp).HasColumnName("BOE_DokumentTyp");
            entity.Property(e => e.BoeFplId).HasColumnName("BOE_FPlID");
            entity.Property(e => e.BoeKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BOE_KursL");
            entity.Property(e => e.BoeKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BOE_KursM");
            entity.Property(e => e.BoeKursNumer).HasColumnName("BOE_KursNumer");
            entity.Property(e => e.BoeKwotaMa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaMa");
            entity.Property(e => e.BoeKwotaMaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaMaWal");
            entity.Property(e => e.BoeKwotaWn)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaWn");
            entity.Property(e => e.BoeKwotaWnWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaWnWal");
            entity.Property(e => e.BoePlatnosci).HasColumnName("BOE_Platnosci");
            entity.Property(e => e.BoeRozrachunki).HasColumnName("BOE_Rozrachunki");
            entity.Property(e => e.BoeTermin)
                .HasColumnType("datetime")
                .HasColumnName("BOE_Termin");
            entity.Property(e => e.BoeTerminRoz)
                .HasColumnType("datetime")
                .HasColumnName("BOE_TerminRoz");
            entity.Property(e => e.BoeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BOE_Waluta");

            entity.HasOne(d => d.BoeAcc).WithMany(p => p.Boelems)
                .HasForeignKey(d => d.BoeAccId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BOEKonto");

            entity.HasOne(d => d.BoeBon).WithMany(p => p.Boelems)
                .HasForeignKey(d => d.BoeBonid)
                .HasConstraintName("FK_BOENaglowek");
        });

        modelBuilder.Entity<Bonag>(entity =>
        {
            entity.HasKey(e => e.BonBonid)
                .HasName("BON_Primary")
                .HasFillFactor(100);

            entity.ToTable("BONag", "CDN", tb => tb.HasTrigger("BONag_Update_Trigger"));

            entity.HasIndex(e => e.BonDdfId, "BONDokDef").HasFillFactor(100);

            entity.HasIndex(e => e.BonKatId, "BONKategorie").HasFillFactor(100);

            entity.HasIndex(e => new { e.BonNumerString, e.BonNumerNr }, "BONNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.BonOobId, e.BonNumerPelny }, "BONOkres")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.BonOobPrevId, "BONOkresPrev").HasFillFactor(100);

            entity.Property(e => e.BonBonid).HasColumnName("BON_BONId");
            entity.Property(e => e.BonBilansZamkniecia).HasColumnName("BON_BilansZamkniecia");
            entity.Property(e => e.BonBufor).HasColumnName("BON_Bufor");
            entity.Property(e => e.BonDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BON_DataDok");
            entity.Property(e => e.BonDdfId).HasColumnName("BON_DDfId");
            entity.Property(e => e.BonKatId).HasColumnName("BON_KatId");
            entity.Property(e => e.BonKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BON_Kategoria");
            entity.Property(e => e.BonKorekta).HasColumnName("BON_Korekta");
            entity.Property(e => e.BonKwotaMa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BON_KwotaMA");
            entity.Property(e => e.BonKwotaWn)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BON_KwotaWN");
            entity.Property(e => e.BonNumerNr).HasColumnName("BON_NumerNr");
            entity.Property(e => e.BonNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([BON_NUMERNR],[BON_NUMERSTRING]))", false)
                .HasColumnName("BON_NumerPelny");
            entity.Property(e => e.BonNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("BON_NumerString");
            entity.Property(e => e.BonOobId).HasColumnName("BON_OObId");
            entity.Property(e => e.BonOobPrevId).HasColumnName("BON_OObPrevId");
            entity.Property(e => e.BonOpeModId).HasColumnName("BON_OpeModID");
            entity.Property(e => e.BonOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BON_OpeModKod");
            entity.Property(e => e.BonOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BON_OpeModNazwisko");
            entity.Property(e => e.BonOpeZalId).HasColumnName("BON_OpeZalID");
            entity.Property(e => e.BonOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BON_OpeZalKod");
            entity.Property(e => e.BonOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BON_OpeZalNazwisko");
            entity.Property(e => e.BonStaModId).HasColumnName("BON_StaModId");
            entity.Property(e => e.BonStaZalId).HasColumnName("BON_StaZalId");
            entity.Property(e => e.BonTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BON_TS_Mod");
            entity.Property(e => e.BonTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BON_TS_Zal");

            entity.HasOne(d => d.BonDdf).WithMany(p => p.Bonags)
                .HasForeignKey(d => d.BonDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BONDokDef");

            entity.HasOne(d => d.BonKat).WithMany(p => p.Bonags)
                .HasForeignKey(d => d.BonKatId)
                .HasConstraintName("FK_BONKategorie");

            entity.HasOne(d => d.BonOob).WithMany(p => p.Bonags)
                .HasForeignKey(d => d.BonOobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BONOkres");
        });

        modelBuilder.Entity<BrpAgregaty>(entity =>
        {
            entity.HasKey(e => e.BagBagId).HasName("BAg_Primary");

            entity.ToTable("BRpAgregaty", "CDN");

            entity.HasIndex(e => new { e.BagBrpId, e.BagTyp }, "BAgAgregat");

            entity.Property(e => e.BagBagId).HasColumnName("BAg_BAgId");
            entity.Property(e => e.BagBrpId).HasColumnName("BAg_BRpId");
            entity.Property(e => e.BagPrzychodySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BAg_PrzychodySys");
            entity.Property(e => e.BagRozchodySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BAg_RozchodySys");
            entity.Property(e => e.BagSaldoBosys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BAg_SaldoBOSys");
            entity.Property(e => e.BagTyp).HasColumnName("BAg_Typ");

            entity.HasOne(d => d.BagBrp).WithMany(p => p.BrpAgregaties)
                .HasForeignKey(d => d.BagBrpId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BAgRaport");
        });

        modelBuilder.Entity<BudzetElem>(entity =>
        {
            entity.HasKey(e => e.BuEBuEid)
                .HasName("BuE_Primary")
                .HasFillFactor(100);

            entity.ToTable("BudzetElem", "CDN");

            entity.HasIndex(e => e.BuEBuNid, "BuEBuNID").HasFillFactor(100);

            entity.HasIndex(e => e.BuEMiesiac, "BuERokMiesiac").HasFillFactor(100);

            entity.Property(e => e.BuEBuEid).HasColumnName("BuE_BuEId");
            entity.Property(e => e.BuEBuNid).HasColumnName("BuE_BuNId");
            entity.Property(e => e.BuEKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BuE_Kwota");
            entity.Property(e => e.BuEKwotaPoprzednia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BuE_KwotaPoprzednia");
            entity.Property(e => e.BuEMiesiac).HasColumnName("BuE_Miesiac");
            entity.Property(e => e.BuEOpeModId).HasColumnName("BuE_OpeModID");
            entity.Property(e => e.BuEOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BuE_OpeModKod");
            entity.Property(e => e.BuEOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BuE_OpeModNazwisko");
            entity.Property(e => e.BuEOpeZalId).HasColumnName("BuE_OpeZalID");
            entity.Property(e => e.BuEOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BuE_OpeZalKod");
            entity.Property(e => e.BuEOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BuE_OpeZalNazwisko");
            entity.Property(e => e.BuEStaModId).HasColumnName("BuE_StaModId");
            entity.Property(e => e.BuEStaZalId).HasColumnName("BuE_StaZalId");
            entity.Property(e => e.BuETsMod)
                .HasColumnType("datetime")
                .HasColumnName("BuE_TS_Mod");
            entity.Property(e => e.BuETsZal)
                .HasColumnType("datetime")
                .HasColumnName("BuE_TS_Zal");

            entity.HasOne(d => d.BuEBuN).WithMany(p => p.BudzetElems)
                .HasForeignKey(d => d.BuEBuNid)
                .HasConstraintName("FK_BuEBuNID");
        });

        modelBuilder.Entity<BudzetNag>(entity =>
        {
            entity.HasKey(e => e.BuNBuNid)
                .HasName("BuN_Primary")
                .HasFillFactor(100);

            entity.ToTable("BudzetNag", "CDN", tb => tb.HasTrigger("BudzetNag_InsertDelete_Trigger"));

            entity.HasIndex(e => new { e.BuNDataDok, e.BuNBufor, e.BuNKorekta, e.BuNFinalny }, "BuNDokument").HasFillFactor(100);

            entity.HasIndex(e => e.BuNAccId, "BuNKonto").HasFillFactor(100);

            entity.Property(e => e.BuNBuNid).HasColumnName("BuN_BuNId");
            entity.Property(e => e.BuNAccId).HasColumnName("BuN_AccId");
            entity.Property(e => e.BuNBufor).HasColumnName("BuN_Bufor");
            entity.Property(e => e.BuNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("BuN_DataDok");
            entity.Property(e => e.BuNFinalny).HasColumnName("BuN_Finalny");
            entity.Property(e => e.BuNKorekta).HasColumnName("BuN_Korekta");
            entity.Property(e => e.BuNKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BuN_Kwota");
            entity.Property(e => e.BuNKwotaPoprzednia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BuN_KwotaPoprzednia");
            entity.Property(e => e.BuNOpeModId).HasColumnName("BuN_OpeModID");
            entity.Property(e => e.BuNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BuN_OpeModKod");
            entity.Property(e => e.BuNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BuN_OpeModNazwisko");
            entity.Property(e => e.BuNOpeZalId).HasColumnName("BuN_OpeZalID");
            entity.Property(e => e.BuNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BuN_OpeZalKod");
            entity.Property(e => e.BuNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("BuN_OpeZalNazwisko");
            entity.Property(e => e.BuNOpis)
                .HasMaxLength(50)
                .HasColumnName("BuN_Opis");
            entity.Property(e => e.BuNStaModId).HasColumnName("BuN_StaModId");
            entity.Property(e => e.BuNStaZalId).HasColumnName("BuN_StaZalId");
            entity.Property(e => e.BuNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("BuN_TS_Mod");
            entity.Property(e => e.BuNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("BuN_TS_Zal");
        });

        modelBuilder.Entity<BudzetView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BudzetView", "CDN");

            entity.Property(e => e.BuVAccId).HasColumnName("BuV_AccId");
            entity.Property(e => e.BuVAccNazwa)
                .HasMaxLength(50)
                .HasColumnName("BuV_AccNazwa");
            entity.Property(e => e.BuVAccNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BuV_AccNumer");
            entity.Property(e => e.BuVAccNumerIdx)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BuV_AccNumerIdx");
            entity.Property(e => e.BuVOobId).HasColumnName("BuV_OObId");
            entity.Property(e => e.BuVPlanKwotaMa)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("BuV_PlanKwotaMa");
            entity.Property(e => e.BuVPlanKwotaWn)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("BuV_PlanKwotaWn");
            entity.Property(e => e.BuVPrzekKwotaMa)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("BuV_PrzekKwotaMa");
            entity.Property(e => e.BuVPrzekKwotaWn)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("BuV_PrzekKwotaWn");
            entity.Property(e => e.BuVRealKwotaMa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BuV_RealKwotaMa");
            entity.Property(e => e.BuVRealKwotaWn)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BuV_RealKwotaWn");
        });

        modelBuilder.Entity<Centra>(entity =>
        {
            entity.HasKey(e => e.CntCntId)
                .HasName("CNT_Primary")
                .HasFillFactor(100);

            entity.ToTable("Centra", "CDN", tb =>
                {
                    tb.HasTrigger("Centra_Delete_Trigger");
                    tb.HasTrigger("Centra_Insert_Trigger");
                });

            entity.HasIndex(e => new { e.CntKod, e.CntCntId }, "CNTGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.CntParentId, e.CntKod }, "CNTInclude")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.CntCntId).HasColumnName("CNT_CntId");
            entity.Property(e => e.CntAddMethod).HasColumnName("CNT_AddMethod");
            entity.Property(e => e.CntAdresWezla)
                .HasMaxLength(512)
                .HasColumnName("CNT_AdresWezla");
            entity.Property(e => e.CntImpId).HasColumnName("CNT_ImpId");
            entity.Property(e => e.CntKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CNT_Kod");
            entity.Property(e => e.CntLast).HasColumnName("CNT_Last");
            entity.Property(e => e.CntLisc).HasColumnName("CNT_Lisc");
            entity.Property(e => e.CntNazwa)
                .HasMaxLength(254)
                .HasColumnName("CNT_Nazwa");
            entity.Property(e => e.CntNieaktywny).HasColumnName("CNT_Nieaktywny");
            entity.Property(e => e.CntOpeModId).HasColumnName("CNT_OpeModId");
            entity.Property(e => e.CntOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CNT_OpeModKod");
            entity.Property(e => e.CntOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CNT_OpeModNazwisko");
            entity.Property(e => e.CntOpeZalId).HasColumnName("CNT_OpeZalId");
            entity.Property(e => e.CntOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CNT_OpeZalKod");
            entity.Property(e => e.CntOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CNT_OpeZalNazwisko");
            entity.Property(e => e.CntParentId).HasColumnName("CNT_ParentId");
            entity.Property(e => e.CntPoziom).HasColumnName("CNT_Poziom");
            entity.Property(e => e.CntStaModId).HasColumnName("CNT_StaModId");
            entity.Property(e => e.CntStaZalId).HasColumnName("CNT_StaZalId");
            entity.Property(e => e.CntTsMod)
                .HasColumnType("datetime")
                .HasColumnName("CNT_TS_Mod");
            entity.Property(e => e.CntTsZal)
                .HasColumnType("datetime")
                .HasColumnName("CNT_TS_Zal");

            entity.HasOne(d => d.CntParent).WithMany(p => p.InverseCntParent)
                .HasForeignKey(d => d.CntParentId)
                .HasConstraintName("FK_CNTParrent");
        });

        modelBuilder.Entity<CentraKierownicy>(entity =>
        {
            entity.HasKey(e => e.CnkCnkId)
                .HasName("CNK_Primary")
                .HasFillFactor(100);

            entity.ToTable("CentraKierownicy", "CDN");

            entity.HasIndex(e => e.CnkCntId, "CNKCentra").HasFillFactor(100);

            entity.HasIndex(e => e.CnkPraId, "CNKPraLink").HasFillFactor(100);

            entity.Property(e => e.CnkCnkId).HasColumnName("CNK_CnkId");
            entity.Property(e => e.CnkCntId).HasColumnName("CNK_CntId");
            entity.Property(e => e.CnkKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CNK_Kod");
            entity.Property(e => e.CnkOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("CNK_OkresDo");
            entity.Property(e => e.CnkOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("CNK_OkresOd");
            entity.Property(e => e.CnkOpeModId).HasColumnName("CNK_OpeModId");
            entity.Property(e => e.CnkOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CNK_OpeModKod");
            entity.Property(e => e.CnkOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CNK_OpeModNazwisko");
            entity.Property(e => e.CnkOpeZalId).HasColumnName("CNK_OpeZalId");
            entity.Property(e => e.CnkOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CNK_OpeZalKod");
            entity.Property(e => e.CnkOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CNK_OpeZalNazwisko");
            entity.Property(e => e.CnkPraId).HasColumnName("CNK_PraId");
            entity.Property(e => e.CnkRodzaj).HasColumnName("CNK_Rodzaj");
            entity.Property(e => e.CnkStaModId).HasColumnName("CNK_StaModId");
            entity.Property(e => e.CnkStaZalId).HasColumnName("CNK_StaZalId");
            entity.Property(e => e.CnkTsMod)
                .HasColumnType("datetime")
                .HasColumnName("CNK_TS_Mod");
            entity.Property(e => e.CnkTsZal)
                .HasColumnType("datetime")
                .HasColumnName("CNK_TS_Zal");

            entity.HasOne(d => d.CnkCnt).WithMany(p => p.CentraKierownicies)
                .HasForeignKey(d => d.CnkCntId)
                .HasConstraintName("FK_CNKCentra");

            entity.HasOne(d => d.CnkPra).WithMany(p => p.CentraKierownicies)
                .HasForeignKey(d => d.CnkPraId)
                .HasConstraintName("FK_CNKPraLink");
        });

        modelBuilder.Entity<CentraLink>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CentraLink", "CDN");

            entity.HasIndex(e => e.CnlCntId, "CNLCnt").HasFillFactor(100);

            entity.HasIndex(e => new { e.CnlCntId, e.CnlParentId }, "CNLParent").HasFillFactor(100);

            entity.Property(e => e.CnlCntId).HasColumnName("CNL_CntId");
            entity.Property(e => e.CnlParentId).HasColumnName("CNL_ParentId");
        });

        modelBuilder.Entity<CfgInpostKontaAllegro>(entity =>
        {
            entity.HasKey(e => e.CikaCikaid)
                .HasName("CIKA_Primary")
                .HasFillFactor(100);

            entity.ToTable("CfgInpostKontaAllegro", "CDN");

            entity.Property(e => e.CikaCikaid).HasColumnName("CIKA_CIKAID");
            entity.Property(e => e.CikaDomyslne).HasColumnName("CIKA_Domyslne");
            entity.Property(e => e.CikaLogin)
                .HasMaxLength(40)
                .HasColumnName("CIKA_Login");
            entity.Property(e => e.CikaUserId)
                .HasMaxLength(40)
                .HasColumnName("CIKA_UserId");
        });

        modelBuilder.Entity<CfgKlucze>(entity =>
        {
            entity.HasKey(e => e.CfkCfkId)
                .HasName("CFK_Primary")
                .HasFillFactor(100);

            entity.ToTable("CfgKlucze", "CDN", tb => tb.HasTrigger("CfgKlucze_Update_Trigger"));

            entity.HasIndex(e => new { e.CfkParentId, e.CfkNazwa, e.CfkOkresOd }, "CFKParent")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.CfkCfkId).HasColumnName("CFK_CfkId");
            entity.Property(e => e.CfkNazwa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("CFK_Nazwa");
            entity.Property(e => e.CfkOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("CFK_OkresDo");
            entity.Property(e => e.CfkOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("CFK_OkresOd");
            entity.Property(e => e.CfkOpeModId).HasColumnName("CFK_OpeModId");
            entity.Property(e => e.CfkOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CFK_OpeModKod");
            entity.Property(e => e.CfkOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CFK_OpeModNazwisko");
            entity.Property(e => e.CfkOpeZalId).HasColumnName("CFK_OpeZalId");
            entity.Property(e => e.CfkOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CFK_OpeZalKod");
            entity.Property(e => e.CfkOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CFK_OpeZalNazwisko");
            entity.Property(e => e.CfkParentId).HasColumnName("CFK_ParentId");
            entity.Property(e => e.CfkStaModId).HasColumnName("CFK_StaModId");
            entity.Property(e => e.CfkStaZalId).HasColumnName("CFK_StaZalId");
            entity.Property(e => e.CfkTsMod)
                .HasColumnType("datetime")
                .HasColumnName("CFK_TS_Mod");
            entity.Property(e => e.CfkTsZal)
                .HasColumnType("datetime")
                .HasColumnName("CFK_TS_Zal");

            entity.HasOne(d => d.CfkParent).WithMany(p => p.InverseCfkParent)
                .HasForeignKey(d => d.CfkParentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CFK_Parent");
        });

        modelBuilder.Entity<CfgKurierzy>(entity =>
        {
            entity.HasKey(e => e.CkkCkkid)
                .HasName("CKK_Primary")
                .HasFillFactor(100);

            entity.ToTable("CfgKurierzy", "CDN", tb => tb.HasTrigger("CfgKurierzy_Insert_Trigger"));

            entity.HasIndex(e => e.CkkPrefix, "CKKPrefix")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.CkkCkkid)
                .ValueGeneratedNever()
                .HasColumnName("CKK_CKKID");
            entity.Property(e => e.CkkAktywny).HasColumnName("CKK_Aktywny");
            entity.Property(e => e.CkkDeklarowanaWartoscPp).HasColumnName("CKK_DeklarowanaWartoscPP");
            entity.Property(e => e.CkkDeklarowanaWartoscPpserwis).HasColumnName("CKK_DeklarowanaWartoscPPSerwis");
            entity.Property(e => e.CkkDeklarowanaWartoscPptyp).HasColumnName("CKK_DeklarowanaWartoscPPTyp");
            entity.Property(e => e.CkkDeklarowanaWartoscPpwartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKK_DeklarowanaWartoscPPWartosc");
            entity.Property(e => e.CkkDeklarowanaWartoscPpwartoscSerwis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKK_DeklarowanaWartoscPPWartoscSerwis");
            entity.Property(e => e.CkkDeklarowanaWartoscPrzesylki).HasColumnName("CKK_DeklarowanaWartoscPrzesylki");
            entity.Property(e => e.CkkDeklarowanaWartoscPrzesylkiSerwis).HasColumnName("CKK_DeklarowanaWartoscPrzesylkiSerwis");
            entity.Property(e => e.CkkDeklarowanaWartoscPrzesylkiTyp).HasColumnName("CKK_DeklarowanaWartoscPrzesylkiTyp");
            entity.Property(e => e.CkkDeklarowanaWartoscPrzesylkiWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKK_DeklarowanaWartoscPrzesylkiWartosc");
            entity.Property(e => e.CkkDeklarowanaWartoscPrzesylkiWartoscSerwis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKK_DeklarowanaWartoscPrzesylkiWartoscSerwis");
            entity.Property(e => e.CkkDokumentyZwrotne).HasColumnName("CKK_DokumentyZwrotne");
            entity.Property(e => e.CkkDokumentyZwrotneSerwis).HasColumnName("CKK_DokumentyZwrotneSerwis");
            entity.Property(e => e.CkkDokumentyZwrotneTyp).HasColumnName("CKK_DokumentyZwrotneTyp");
            entity.Property(e => e.CkkDokumentyZwrotneTypSerwis).HasColumnName("CKK_DokumentyZwrotneTypSerwis");
            entity.Property(e => e.CkkDomyslnaNumeracjaZleceniaNadaniaPaczek).HasColumnName("CKK_DomyslnaNumeracjaZleceniaNadaniaPaczek");
            entity.Property(e => e.CkkDomyslnaPaczka).HasColumnName("CKK_DomyslnaPaczka");
            entity.Property(e => e.CkkDomyslnaSeriaZleceniaNadaniaPaczek)
                .HasMaxLength(10)
                .HasColumnName("CKK_DomyslnaSeriaZleceniaNadaniaPaczek");
            entity.Property(e => e.CkkDomyslnePobranie).HasColumnName("CKK_DomyslnePobranie");
            entity.Property(e => e.CkkDomyslnePobranieDlaFormyPlat).HasColumnName("CKK_DomyslnePobranieDlaFormyPlat");
            entity.Property(e => e.CkkDomyslnePobranieSerwis).HasColumnName("CKK_DomyslnePobranieSerwis");
            entity.Property(e => e.CkkDomyslny).HasColumnName("CKK_Domyslny");
            entity.Property(e => e.CkkDoreczenieDoRakWlasnych).HasColumnName("CKK_DoreczenieDoRakWlasnych");
            entity.Property(e => e.CkkDoreczenieGwarantowane).HasColumnName("CKK_DoreczenieGwarantowane");
            entity.Property(e => e.CkkDoreczenieGwarantowaneDoGodziny).HasColumnName("CKK_DoreczenieGwarantowaneDoGodziny");
            entity.Property(e => e.CkkDoreczenieGwarantowaneDoGodzinyWybrana)
                .HasMaxLength(10)
                .HasColumnName("CKK_DoreczenieGwarantowaneDoGodzinyWybrana");
            entity.Property(e => e.CkkDoreczenieGwarantowaneNaGodzine).HasColumnName("CKK_DoreczenieGwarantowaneNaGodzine");
            entity.Property(e => e.CkkDoreczenieGwarantowaneNaGodzineWybrana)
                .HasMaxLength(10)
                .HasColumnName("CKK_DoreczenieGwarantowaneNaGodzineWybrana");
            entity.Property(e => e.CkkDoreczenieGwarantowaneSobota).HasColumnName("CKK_DoreczenieGwarantowaneSobota");
            entity.Property(e => e.CkkDoreczenieGwarantowaneWieczor).HasColumnName("CKK_DoreczenieGwarantowaneWieczor");
            entity.Property(e => e.CkkDoreczenieInfoPrzedDoreczeniem).HasColumnName("CKK_DoreczenieInfoPrzedDoreczeniem");
            entity.Property(e => e.CkkDoreczenieOdbiorWlasny).HasColumnName("CKK_DoreczenieOdbiorWlasny");
            entity.Property(e => e.CkkDoreczenieOdbiorWlasnyTyp).HasColumnName("CKK_DoreczenieOdbiorWlasnyTyp");
            entity.Property(e => e.CkkDoreczeniePotwierdzenieDoreczenia).HasColumnName("CKK_DoreczeniePotwierdzenieDoreczenia");
            entity.Property(e => e.CkkDrukarkaDomyslnaListPrzew)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("CKK_DrukarkaDomyslnaListPrzew");
            entity.Property(e => e.CkkDrukarkaDomyslnaProt)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("CKK_DrukarkaDomyslnaProt");
            entity.Property(e => e.CkkEpo).HasColumnName("CKK_EPO");
            entity.Property(e => e.CkkFormatPliku).HasColumnName("CKK_FormatPliku");
            entity.Property(e => e.CkkFormatWydruku).HasColumnName("CKK_FormatWydruku");
            entity.Property(e => e.CkkHaslo)
                .HasMaxLength(4000)
                .HasColumnName("CKK_Haslo");
            entity.Property(e => e.CkkInformacjeOzawartosci).HasColumnName("CKK_InformacjeOZawartosci");
            entity.Property(e => e.CkkInformacjeOzawartosciTekst)
                .HasMaxLength(254)
                .HasColumnName("CKK_InformacjeOZawartosciTekst");
            entity.Property(e => e.CkkInformacjeOzawartosciTyp).HasColumnName("CKK_InformacjeOZawartosciTyp");
            entity.Property(e => e.CkkKategoriaPrzesylki).HasColumnName("CKK_KategoriaPrzesylki");
            entity.Property(e => e.CkkKwotaPobrania).HasColumnName("CKK_KwotaPobrania");
            entity.Property(e => e.CkkKwotaPobraniaSerwis).HasColumnName("CKK_KwotaPobraniaSerwis");
            entity.Property(e => e.CkkKwotaPobraniaWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKK_KwotaPobraniaWartosc");
            entity.Property(e => e.CkkKwotaPobraniaWartoscSerwis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKK_KwotaPobraniaWartoscSerwis");
            entity.Property(e => e.CkkLogin)
                .HasMaxLength(40)
                .HasColumnName("CKK_Login");
            entity.Property(e => e.CkkNadanieWsobote).HasColumnName("CKK_NadanieWSobote");
            entity.Property(e => e.CkkNazwiskoOperatora)
                .HasDefaultValue((byte)1)
                .HasColumnName("CKK_NazwiskoOperatora");
            entity.Property(e => e.CkkNumerKlienta)
                .HasMaxLength(40)
                .HasColumnName("CKK_NumerKlienta");
            entity.Property(e => e.CkkOpcjaUwagi).HasColumnName("CKK_OpcjaUwagi");
            entity.Property(e => e.CkkPaczkaDomyslnyRozmiar).HasColumnName("CKK_PaczkaDomyslnyRozmiar");
            entity.Property(e => e.CkkPlatnik).HasColumnName("CKK_Platnik");
            entity.Property(e => e.CkkPobranieDlaFormPlat)
                .HasMaxLength(254)
                .HasColumnName("CKK_PobranieDlaFormPlat");
            entity.Property(e => e.CkkPobranieDlaMm).HasColumnName("CKK_PobranieDlaMM");
            entity.Property(e => e.CkkPocztaPoleconaUmowaGabaryt)
                .HasDefaultValue((byte)1)
                .HasColumnName("CKK_PocztaPoleconaUmowaGabaryt");
            entity.Property(e => e.CkkPotwierdzenieDoreczenia).HasColumnName("CKK_PotwierdzenieDoreczenia");
            entity.Property(e => e.CkkPotwierdzenieDoreczeniaSerwis).HasColumnName("CKK_PotwierdzenieDoreczeniaSerwis");
            entity.Property(e => e.CkkPotwierdzenieDoreczeniaTyp).HasColumnName("CKK_PotwierdzenieDoreczeniaTyp");
            entity.Property(e => e.CkkPotwierdzenieDoreczeniaTypSerwis).HasColumnName("CKK_PotwierdzenieDoreczeniaTypSerwis");
            entity.Property(e => e.CkkPotwierdzenieOdbioru).HasColumnName("CKK_PotwierdzenieOdbioru");
            entity.Property(e => e.CkkPotwierdzenieOdbioruIlosc).HasColumnName("CKK_PotwierdzenieOdbioruIlosc");
            entity.Property(e => e.CkkPotwierdzenieOdbioruIloscSerwis).HasColumnName("CKK_PotwierdzenieOdbioruIloscSerwis");
            entity.Property(e => e.CkkPotwierdzenieOdbioruSerwis).HasColumnName("CKK_PotwierdzenieOdbioruSerwis");
            entity.Property(e => e.CkkPotwierdzenieOdbioruTyp).HasColumnName("CKK_PotwierdzenieOdbioruTyp");
            entity.Property(e => e.CkkPotwierdzenieOdbioruTypSerwis).HasColumnName("CKK_PotwierdzenieOdbioruTypSerwis");
            entity.Property(e => e.CkkPreawizacja).HasColumnName("CKK_Preawizacja");
            entity.Property(e => e.CkkPreawizacjaSerwis).HasColumnName("CKK_PreawizacjaSerwis");
            entity.Property(e => e.CkkPrefix)
                .HasMaxLength(14)
                .HasDefaultValue("")
                .HasColumnName("CKK_Prefix");
            entity.Property(e => e.CkkPrzesylkaZwrotna).HasColumnName("CKK_PrzesylkaZwrotna");
            entity.Property(e => e.CkkPrzesylkaZwrotnaSerwis).HasColumnName("CKK_PrzesylkaZwrotnaSerwis");
            entity.Property(e => e.CkkReferencje).HasColumnName("CKK_Referencje");
            entity.Property(e => e.CkkReferencjeTyp).HasColumnName("CKK_ReferencjeTyp");
            entity.Property(e => e.CkkSenditAdresSerwera)
                .HasMaxLength(254)
                .HasColumnName("CKK_SenditAdresSerwera");
            entity.Property(e => e.CkkSenditBraId).HasColumnName("CKK_SenditBraID");
            entity.Property(e => e.CkkSenditEmail)
                .HasMaxLength(254)
                .HasColumnName("CKK_SenditEmail");
            entity.Property(e => e.CkkSenditFirmaKurierska).HasColumnName("CKK_SenditFirmaKurierska");
            entity.Property(e => e.CkkSenditImie)
                .HasMaxLength(254)
                .HasColumnName("CKK_SenditImie");
            entity.Property(e => e.CkkSenditKey)
                .HasMaxLength(512)
                .HasColumnName("CKK_SenditKey");
            entity.Property(e => e.CkkSenditKodPocztowy)
                .HasMaxLength(254)
                .HasColumnName("CKK_SenditKodPocztowy");
            entity.Property(e => e.CkkSenditNazwa)
                .HasMaxLength(254)
                .HasColumnName("CKK_SenditNazwa");
            entity.Property(e => e.CkkSenditNazwisko)
                .HasMaxLength(254)
                .HasColumnName("CKK_SenditNazwisko");
            entity.Property(e => e.CkkSenditTelefon)
                .HasMaxLength(254)
                .HasColumnName("CKK_SenditTelefon");
            entity.Property(e => e.CkkSenditWycenaPrzedWysylka).HasColumnName("CKK_SenditWycenaPrzedWysylka");
            entity.Property(e => e.CkkSerwis).HasColumnName("CKK_Serwis");
            entity.Property(e => e.CkkSeryjneGenerowanieDoJednegoDok).HasColumnName("CKK_SeryjneGenerowanieDoJednegoDok");
            entity.Property(e => e.CkkSeryjneGenerowanieWielopak).HasColumnName("CKK_SeryjneGenerowanieWielopak");
            entity.Property(e => e.CkkSposobPobrania).HasColumnName("CKK_SposobPobrania");
            entity.Property(e => e.CkkSposobPobraniaSerwis).HasColumnName("CKK_SposobPobraniaSerwis");
            entity.Property(e => e.CkkTytulPrzelewu).HasColumnName("CKK_TytulPrzelewu");
            entity.Property(e => e.CkkTytulPrzelewuSerwis).HasColumnName("CKK_TytulPrzelewuSerwis");
            entity.Property(e => e.CkkUmowaEpo).HasColumnName("CKK_UmowaEPO");
            entity.Property(e => e.CkkUrzadNadaniaAdres)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("CKK_UrzadNadaniaAdres");
            entity.Property(e => e.CkkUrzadNadaniaKod)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("CKK_UrzadNadaniaKod");
            entity.Property(e => e.CkkUwagiOdbTekst)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("CKK_UwagiOdbTekst");
            entity.Property(e => e.CkkUwagiOdbTyp).HasColumnName("CKK_UwagiOdbTyp");
            entity.Property(e => e.CkkWagaZkarty).HasColumnName("CKK_WagaZKarty");
            entity.Property(e => e.CkkWagaZkartySerwis).HasColumnName("CKK_WagaZKartySerwis");
            entity.Property(e => e.CkkZlecenieOdbioruWysylki).HasColumnName("CKK_ZlecenieOdbioruWysylki");
        });

        modelBuilder.Entity<CfgKurierzyDefPaczki>(entity =>
        {
            entity.HasKey(e => e.CkpCkpid)
                .HasName("CKP_Primary")
                .HasFillFactor(100);

            entity.ToTable("CfgKurierzyDefPaczki", "CDN");

            entity.Property(e => e.CkpCkpid).HasColumnName("CKP_CKPID");
            entity.Property(e => e.CkpCkkid).HasColumnName("CKP_CKKID");
            entity.Property(e => e.CkpDlugosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKP_Dlugosc");
            entity.Property(e => e.CkpGabaryt).HasColumnName("CKP_Gabaryt");
            entity.Property(e => e.CkpNiestandardowa).HasColumnName("CKP_Niestandardowa");
            entity.Property(e => e.CkpOstroznie).HasColumnName("CKP_Ostroznie");
            entity.Property(e => e.CkpSposobPakowania)
                .HasMaxLength(254)
                .HasColumnName("CKP_SposobPakowania");
            entity.Property(e => e.CkpSposobPakowaniaKey)
                .HasMaxLength(254)
                .HasColumnName("CKP_SposobPakowaniaKey");
            entity.Property(e => e.CkpSzerokosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKP_Szerokosc");
            entity.Property(e => e.CkpWaga)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKP_Waga");
            entity.Property(e => e.CkpWysokosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKP_Wysokosc");

            entity.HasOne(d => d.CkpCkk).WithMany(p => p.CfgKurierzyDefPaczkis)
                .HasForeignKey(d => d.CkpCkkid)
                .HasConstraintName("FK_CKPCKKID");
        });

        modelBuilder.Entity<CfgKurierzyPobranieFormyPlat>(entity =>
        {
            entity.HasKey(e => e.CkfCkfid)
                .HasName("CKF_Primary")
                .HasFillFactor(100);

            entity.ToTable("CfgKurierzyPobranieFormyPlat", "CDN");

            entity.Property(e => e.CkfCkfid).HasColumnName("CKF_CKFID");
            entity.Property(e => e.CkfCkkid).HasColumnName("CKF_CKKID");
            entity.Property(e => e.CkfFplId).HasColumnName("CKF_FplId");

            entity.HasOne(d => d.CkfCkk).WithMany(p => p.CfgKurierzyPobranieFormyPlats)
                .HasForeignKey(d => d.CkfCkkid)
                .HasConstraintName("FK_CKFCKKID");

            entity.HasOne(d => d.CkfFpl).WithMany(p => p.CfgKurierzyPobranieFormyPlats)
                .HasForeignKey(d => d.CkfFplId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CKFPlatnosc");
        });

        modelBuilder.Entity<CfgTowarAutonumerSerie>(entity =>
        {
            entity.HasKey(e => e.CtasCtasid)
                .HasName("CTAS_Primary")
                .HasFillFactor(100);

            entity.ToTable("CfgTowarAutonumerSerie", "CDN", tb => tb.HasTrigger("CfgTowarAutonumerSerie_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => e.CtasNazwa, "CTAS_Nazwa_UniqueIx")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.CtasCtasid).HasColumnName("CTAS_CTASId");
            entity.Property(e => e.CtasDomyslna).HasColumnName("CTAS_Domyslna");
            entity.Property(e => e.CtasNazwa)
                .HasMaxLength(19)
                .HasColumnName("CTAS_Nazwa");
            entity.Property(e => e.CtasOpis)
                .HasMaxLength(40)
                .HasColumnName("CTAS_Opis");
        });

        modelBuilder.Entity<CfgWartosci>(entity =>
        {
            entity.HasKey(e => e.CfwCfwId)
                .HasName("CFW_Primary")
                .HasFillFactor(100);

            entity.ToTable("CfgWartosci", "CDN");

            entity.HasIndex(e => new { e.CfwCfkId, e.CfwNazwa }, "CFWCfkLink")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.CfwCfwId).HasColumnName("CFW_CfwId");
            entity.Property(e => e.CfwCfkId).HasColumnName("CFW_CfkId");
            entity.Property(e => e.CfwNazwa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("CFW_Nazwa");
            entity.Property(e => e.CfwOpeModId).HasColumnName("CFW_OpeModId");
            entity.Property(e => e.CfwOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CFW_OpeModKod");
            entity.Property(e => e.CfwOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CFW_OpeModNazwisko");
            entity.Property(e => e.CfwOpeZalId).HasColumnName("CFW_OpeZalId");
            entity.Property(e => e.CfwOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CFW_OpeZalKod");
            entity.Property(e => e.CfwOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CFW_OpeZalNazwisko");
            entity.Property(e => e.CfwStaModId).HasColumnName("CFW_StaModId");
            entity.Property(e => e.CfwStaZalId).HasColumnName("CFW_StaZalId");
            entity.Property(e => e.CfwTsMod)
                .HasColumnType("datetime")
                .HasColumnName("CFW_TS_Mod");
            entity.Property(e => e.CfwTsZal)
                .HasColumnType("datetime")
                .HasColumnName("CFW_TS_Zal");
            entity.Property(e => e.CfwTyp).HasColumnName("CFW_Typ");
            entity.Property(e => e.CfwWartosc)
                .HasMaxLength(4000)
                .HasColumnName("CFW_Wartosc");

            entity.HasOne(d => d.CfwCfk).WithMany(p => p.CfgWartoscis)
                .HasForeignKey(d => d.CfwCfkId)
                .HasConstraintName("FK_CFWCfkLink");
        });

        modelBuilder.Entity<CrmKontaktyCykl>(entity =>
        {
            entity.HasKey(e => e.CrcCrcid)
                .HasName("CRC_Primary")
                .HasFillFactor(100);

            entity.ToTable("CrmKontaktyCykl", "CDN");

            entity.HasIndex(e => new { e.CrcCrkid, e.CrcCrcid }, "CRCCRMKontakty").HasFillFactor(100);

            entity.Property(e => e.CrcCrcid).HasColumnName("CRC_CRCId");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaMailCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaMailCzasPrzypomnienia");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaMailWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaMailWyslano");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaOpeMailCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaOpeMailCzasPrzypomnienia");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaOpeMailWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaOpeMailWyslano");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaOpeSmsCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaOpeSmsCzasPrzypomnienia");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaOpeSmsWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaOpeSmsWyslano");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaSmsCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaSmsCzasPrzypomnienia");
            entity.Property(e => e.CrCAutomatycznePrzypomnieniaSmsWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrC_AutomatycznePrzypomnieniaSmsWyslano");
            entity.Property(e => e.CrcAktywny).HasColumnName("CRC_Aktywny");
            entity.Property(e => e.CrcBufor).HasColumnName("CRC_Bufor");
            entity.Property(e => e.CrcCrKwylaczonyId).HasColumnName("CRC_CrKWylaczonyId");
            entity.Property(e => e.CrcCrkid).HasColumnName("CRC_CRKId");
            entity.Property(e => e.CrcCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CRC_CzasPrzypomnienia");
            entity.Property(e => e.CrcPrzypomnienie).HasColumnName("CRC_Przypomnienie");
            entity.Property(e => e.CrcTerminDo)
                .HasColumnType("datetime")
                .HasColumnName("CRC_TerminDo");
            entity.Property(e => e.CrcTerminOd)
                .HasColumnType("datetime")
                .HasColumnName("CRC_TerminOd");

            entity.HasOne(d => d.CrcCrk).WithMany(p => p.CrmKontaktyCykls)
                .HasForeignKey(d => d.CrcCrkid)
                .HasConstraintName("FK_CRCCRMKontakty");
        });

        modelBuilder.Entity<CrmKontaktyParentView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CrmKontaktyParentView", "CDN");

            entity.Property(e => e.Crkv2Bufor).HasColumnName("CRKV2_Bufor");
            entity.Property(e => e.Crkv2CrkvId).HasColumnName("CRKV2_CrkvID");
            entity.Property(e => e.Crkv2CzasKontaktu)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_CzasKontaktu");
            entity.Property(e => e.Crkv2CzasOpracow)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_CzasOpracow");
            entity.Property(e => e.Crkv2CzasPrzygot)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_CzasPrzygot");
            entity.Property(e => e.Crkv2CzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_CzasPrzypomnienia");
            entity.Property(e => e.Crkv2DataDok)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_DataDok");
            entity.Property(e => e.Crkv2EtapRealizacji).HasColumnName("CRKV2_EtapRealizacji");
            entity.Property(e => e.Crkv2NumerPelny)
                .HasMaxLength(35)
                .HasColumnName("CRKV2_NumerPelny");
            entity.Property(e => e.Crkv2Obsluga).HasColumnName("CRKV2_Obsluga");
            entity.Property(e => e.Crkv2OpeModId).HasColumnName("CRKV2_OpeModID");
            entity.Property(e => e.Crkv2OpeZalId).HasColumnName("CRKV2_OpeZalID");
            entity.Property(e => e.Crkv2OpiekunId).HasColumnName("CRKV2_OpiekunId");
            entity.Property(e => e.Crkv2OpiekunTyp).HasColumnName("CRKV2_OpiekunTyp");
            entity.Property(e => e.Crkv2Opis).HasColumnName("CRKV2_Opis");
            entity.Property(e => e.Crkv2ParentId).HasColumnName("CRKV2_ParentID");
            entity.Property(e => e.Crkv2PodId).HasColumnName("CRKV2_PodID");
            entity.Property(e => e.Crkv2PodmiotTyp).HasColumnName("CRKV2_PodmiotTyp");
            entity.Property(e => e.Crkv2Priorytet).HasColumnName("CRKV2_Priorytet");
            entity.Property(e => e.Crkv2Przypomnienie).HasColumnName("CRKV2_Przypomnienie");
            entity.Property(e => e.Crkv2StaModId).HasColumnName("CRKV2_StaModId");
            entity.Property(e => e.Crkv2StaZalId).HasColumnName("CRKV2_StaZalId");
            entity.Property(e => e.Crkv2Temat)
                .HasMaxLength(255)
                .HasColumnName("CRKV2_Temat");
            entity.Property(e => e.Crkv2TerminDo)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_TerminDo");
            entity.Property(e => e.Crkv2TerminOd)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_TerminOd");
            entity.Property(e => e.Crkv2TsMod)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_TS_Mod");
            entity.Property(e => e.Crkv2TsZal)
                .HasColumnType("datetime")
                .HasColumnName("CRKV2_TS_Zal");
            entity.Property(e => e.Crkv2WatekId).HasColumnName("CRKV2_WatekID");
            entity.Property(e => e.Crkv2Wykonano)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CRKV2_Wykonano");
            entity.Property(e => e.Crkv2Zadanie).HasColumnName("CRKV2_Zadanie");
        });

        modelBuilder.Entity<CrmKontaktyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CrmKontaktyView", "CDN");

            entity.Property(e => e.CrkvBufor).HasColumnName("CRKV_Bufor");
            entity.Property(e => e.CrkvCrkvId).HasColumnName("CRKV_CrkvID");
            entity.Property(e => e.CrkvCzasKontaktu)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_CzasKontaktu");
            entity.Property(e => e.CrkvCzasOpracow)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_CzasOpracow");
            entity.Property(e => e.CrkvCzasPrzygot)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_CzasPrzygot");
            entity.Property(e => e.CrkvCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_CzasPrzypomnienia");
            entity.Property(e => e.CrkvDataDok)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_DataDok");
            entity.Property(e => e.CrkvEtapRealizacji).HasColumnName("CRKV_EtapRealizacji");
            entity.Property(e => e.CrkvKodKnt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CRKV_KodKnt");
            entity.Property(e => e.CrkvNumerPelny)
                .HasMaxLength(35)
                .HasColumnName("CRKV_NumerPelny");
            entity.Property(e => e.CrkvObsluga).HasColumnName("CRKV_Obsluga");
            entity.Property(e => e.CrkvOpeModId).HasColumnName("CRKV_OpeModID");
            entity.Property(e => e.CrkvOpeZalId).HasColumnName("CRKV_OpeZalID");
            entity.Property(e => e.CrkvOpiekunId).HasColumnName("CRKV_OpiekunId");
            entity.Property(e => e.CrkvOpiekunTyp).HasColumnName("CRKV_OpiekunTyp");
            entity.Property(e => e.CrkvOpis).HasColumnName("CRKV_Opis");
            entity.Property(e => e.CrkvParentId).HasColumnName("CRKV_ParentID");
            entity.Property(e => e.CrkvPodId).HasColumnName("CRKV_PodID");
            entity.Property(e => e.CrkvPodmiotTyp).HasColumnName("CRKV_PodmiotTyp");
            entity.Property(e => e.CrkvPriorytet).HasColumnName("CRKV_Priorytet");
            entity.Property(e => e.CrkvPrzypomnienie).HasColumnName("CRKV_Przypomnienie");
            entity.Property(e => e.CrkvRodzaj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CRKV_Rodzaj");
            entity.Property(e => e.CrkvStaModId).HasColumnName("CRKV_StaModId");
            entity.Property(e => e.CrkvStaZalId).HasColumnName("CRKV_StaZalId");
            entity.Property(e => e.CrkvTemat)
                .HasMaxLength(255)
                .HasColumnName("CRKV_Temat");
            entity.Property(e => e.CrkvTerminDo)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_TerminDo");
            entity.Property(e => e.CrkvTerminOd)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_TerminOd");
            entity.Property(e => e.CrkvTsMod)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_TS_Mod");
            entity.Property(e => e.CrkvTsZal)
                .HasColumnType("datetime")
                .HasColumnName("CRKV_TS_Zal");
            entity.Property(e => e.CrkvWatekId).HasColumnName("CRKV_WatekID");
            entity.Property(e => e.CrkvWykonano)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CRKV_Wykonano");
            entity.Property(e => e.CrkvZadanie).HasColumnName("CRKV_Zadanie");
        });

        modelBuilder.Entity<CrmOsobyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CrmOsobyView", "CDN");

            entity.Property(e => e.Kod)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Nazwa).HasMaxLength(50);
        });

        modelBuilder.Entity<CrmUczestnicy>(entity =>
        {
            entity.HasKey(e => e.CrUCrUid)
                .HasName("CrU_Primary")
                .HasFillFactor(100);

            entity.ToTable("CrmUczestnicy", "CDN");

            entity.HasIndex(e => new { e.CrUCrKid, e.CrUCrUid }, "CruCrmKontakty").HasFillFactor(100);

            entity.Property(e => e.CrUCrUid).HasColumnName("CrU_CrUId");
            entity.Property(e => e.CrUAkronim)
                .HasMaxLength(20)
                .HasColumnName("CrU_Akronim");
            entity.Property(e => e.CrUAutomatycznePrzypomnienia).HasColumnName("CrU_AutomatycznePrzypomnienia");
            entity.Property(e => e.CrUCrKid).HasColumnName("CrU_CrKId");
            entity.Property(e => e.CrUEmail)
                .HasMaxLength(127)
                .HasColumnName("CrU_Email");
            entity.Property(e => e.CrUNazwisko)
                .HasMaxLength(255)
                .HasColumnName("CrU_Nazwisko");
            entity.Property(e => e.CrUOrganizator).HasColumnName("CrU_Organizator");
            entity.Property(e => e.CrUPodmiotId).HasColumnName("CrU_PodmiotId");
            entity.Property(e => e.CrUPodmiotTyp).HasColumnName("CrU_PodmiotTyp");
            entity.Property(e => e.CrUTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CrU_TelefonSms");
        });

        modelBuilder.Entity<Crmdokumenty>(entity =>
        {
            entity.HasKey(e => e.CrdCrdid)
                .HasName("CRD_Primary")
                .HasFillFactor(100);

            entity.ToTable("CRMDokumenty", "CDN", tb => tb.HasTrigger("CRMDokumenty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.CrdCrkid, e.CrdCrdid }, "CRDCRMKontakty").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrdDokumentId, e.CrdTypDokumentu, e.CrdRodzajDokumentu }, "CRDDokument").HasFillFactor(100);

            entity.Property(e => e.CrdCrdid).HasColumnName("CRD_CRDId");
            entity.Property(e => e.CrdCrkid).HasColumnName("CRD_CRKId");
            entity.Property(e => e.CrdDokumentId).HasColumnName("CRD_DokumentId");
            entity.Property(e => e.CrdIbardId).HasColumnName("CRD_IBardId");
            entity.Property(e => e.CrdPolozeniePliku).HasColumnName("CRD_PolozeniePliku");
            entity.Property(e => e.CrdRodzajDokumentu).HasColumnName("CRD_RodzajDokumentu");
            entity.Property(e => e.CrdSciezkaDostepu)
                .HasMaxLength(512)
                .HasColumnName("CRD_SciezkaDostepu");
            entity.Property(e => e.CrdTypDokumentu).HasColumnName("CRD_TypDokumentu");

            entity.HasOne(d => d.CrdCrk).WithMany(p => p.Crmdokumenties)
                .HasForeignKey(d => d.CrdCrkid)
                .HasConstraintName("FK_CRDCRMKontakty");
        });

        modelBuilder.Entity<Crmkontakty>(entity =>
        {
            entity.HasKey(e => e.CrkCrkid)
                .HasName("CRK_Primary")
                .HasFillFactor(100);

            entity.ToTable("CRMKontakty", "CDN", tb =>
                {
                    tb.HasTrigger("CRMKontakty_Delete_Trigger");
                    tb.HasTrigger("CrmKontakty_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.CrkDdfId, "CRKDokDef").HasFillFactor(100);

            entity.HasIndex(e => e.CrkEtapRealizacji, "CRKEtap").HasFillFactor(100);

            entity.HasIndex(e => e.CrkParId, "CRKNadrzedne").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkNumerString, e.CrkNumerNr, e.CrkAnulowany }, "CRKNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkNumerPelny, e.CrkAnulowany }, "CRKNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkOpiekunId, e.CrkOpiekunTyp }, "CRKOpiekun").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkPodId, e.CrkPodmiotTyp, e.CrkDataDok, e.CrkNumerString, e.CrkNumerNr, e.CrkAnulowany, e.CrkCrkid }, "CRKPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkBufor, e.CrKAutomatycznePrzypomnienia, e.CrKAutomatycznePrzypomnieniaMail, e.CrKAutomatycznePrzypomnieniaMailWyslano, e.CrKAutomatycznePrzypomnieniaMailCzasPrzypomnienia }, "CRMKontaktyAutoMail").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkBufor, e.CrKAutomatycznePrzypomnieniaOpe, e.CrKAutomatycznePrzypomnieniaOpeMail, e.CrKAutomatycznePrzypomnieniaOpeMailWyslano, e.CrKAutomatycznePrzypomnieniaOpeMailCzasPrzypomnienia }, "CRMKontaktyAutoOpeMail").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkBufor, e.CrKAutomatycznePrzypomnieniaOpe, e.CrKAutomatycznePrzypomnieniaOpeSms }, "CRMKontaktyAutoOpeSMS").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkBufor, e.CrKAutomatycznePrzypomnienia, e.CrKAutomatycznePrzypomnieniaSms }, "CRMKontaktyAutoSMS").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkDataDok, e.CrkNumerString, e.CrkNumerNr, e.CrkAnulowany, e.CrkCrkid }, "CrKDataDok").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkBufor, e.CrkZadanie }, "CrkBufor").HasFillFactor(100);

            entity.HasIndex(e => e.CrkWatekId, "CrkOnlyWatek").HasFillFactor(100);

            entity.HasIndex(e => e.CrkOsobaId, "CrkPrzedstawiciel").HasFillFactor(100);

            entity.HasIndex(e => e.CrkTemat, "CrkTemat").HasFillFactor(100);

            entity.HasIndex(e => new { e.CrkWatekId, e.CrkCrkid }, "CrkWatek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.CrkCrkid).HasColumnName("CRK_CRKId");
            entity.Property(e => e.CrKAutomatycznePrzypomnienia).HasColumnName("CrK_AutomatycznePrzypomnienia");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaEmailAdres)
                .HasMaxLength(127)
                .HasColumnName("CrK_AutomatycznePrzypomnieniaEmailAdres");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaMail).HasColumnName("CrK_AutomatycznePrzypomnieniaMail");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaMailCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaMailCzasPrzypomnienia");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaMailSzablonId).HasColumnName("CrK_AutomatycznePrzypomnieniaMailSzablonId");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaMailWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaMailWyslano");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpe).HasColumnName("CrK_AutomatycznePrzypomnieniaOpe");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeMail).HasColumnName("CrK_AutomatycznePrzypomnieniaOpeMail");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeMailCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaOpeMailCzasPrzypomnienia");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeMailSzablonId).HasColumnName("CrK_AutomatycznePrzypomnieniaOpeMailSzablonId");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeMailWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaOpeMailWyslano");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeSms).HasColumnName("CrK_AutomatycznePrzypomnieniaOpeSms");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeSmsCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaOpeSmsCzasPrzypomnienia");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeSmsSzablonId).HasColumnName("CrK_AutomatycznePrzypomnieniaOpeSmsSzablonId");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaOpeSmsWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaOpeSmsWyslano");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaSms).HasColumnName("CrK_AutomatycznePrzypomnieniaSms");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaSmsCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaSmsCzasPrzypomnienia");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaSmsNumerTelefonu)
                .HasMaxLength(127)
                .HasColumnName("CrK_AutomatycznePrzypomnieniaSmsNumerTelefonu");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaSmsSzablonId).HasColumnName("CrK_AutomatycznePrzypomnieniaSmsSzablonId");
            entity.Property(e => e.CrKAutomatycznePrzypomnieniaSmsWyslano)
                .HasColumnType("datetime")
                .HasColumnName("CrK_AutomatycznePrzypomnieniaSmsWyslano");
            entity.Property(e => e.CrkAnulowany).HasColumnName("CRK_Anulowany");
            entity.Property(e => e.CrkBufor).HasColumnName("CRK_Bufor");
            entity.Property(e => e.CrkCykl).HasColumnName("CRK_Cykl");
            entity.Property(e => e.CrkCyklDataEnd)
                .HasColumnType("datetime")
                .HasColumnName("CRK_CyklDataEnd");
            entity.Property(e => e.CrkCyklDataStart)
                .HasColumnType("datetime")
                .HasColumnName("CRK_CyklDataStart");
            entity.Property(e => e.CrkCyklDzienMiesiaca)
                .HasDefaultValue(1)
                .HasColumnName("CRK_CyklDzienMiesiaca");
            entity.Property(e => e.CrkCyklDzienTygodnia)
                .HasDefaultValue(1)
                .HasColumnName("CRK_CyklDzienTygodnia");
            entity.Property(e => e.CrkCyklLiczbaWystapien)
                .HasDefaultValue(1)
                .HasColumnName("CRK_CyklLiczbaWystapien");
            entity.Property(e => e.CrkCyklMiesiac)
                .HasDefaultValue(1)
                .HasColumnName("CRK_CyklMiesiac");
            entity.Property(e => e.CrkCyklParentId).HasColumnName("CRK_CyklParentId");
            entity.Property(e => e.CrkCyklPowtarzajCo)
                .HasDefaultValue(1)
                .HasColumnName("CRK_CyklPowtarzajCo");
            entity.Property(e => e.CrkCyklTydzien)
                .HasDefaultValue(1)
                .HasColumnName("CRK_CyklTydzien");
            entity.Property(e => e.CrkCyklTyp)
                .HasDefaultValue(2)
                .HasColumnName("CRK_CyklTyp");
            entity.Property(e => e.CrkCzasKontaktu)
                .HasColumnType("datetime")
                .HasColumnName("CRK_CzasKontaktu");
            entity.Property(e => e.CrkCzasOpracow)
                .HasColumnType("datetime")
                .HasColumnName("CRK_CzasOpracow");
            entity.Property(e => e.CrkCzasPrzygot)
                .HasColumnType("datetime")
                .HasColumnName("CRK_CzasPrzygot");
            entity.Property(e => e.CrkCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("CRK_CzasPrzypomnienia");
            entity.Property(e => e.CrkDataDok)
                .HasColumnType("datetime")
                .HasColumnName("CRK_DataDok");
            entity.Property(e => e.CrkDdfId).HasColumnName("CRK_DDfId");
            entity.Property(e => e.CrkDokId).HasColumnName("CRK_DokID");
            entity.Property(e => e.CrkEtapRealizacji).HasColumnName("CRK_EtapRealizacji");
            entity.Property(e => e.CrkLokalizacja)
                .HasMaxLength(255)
                .HasColumnName("CRK_Lokalizacja");
            entity.Property(e => e.CrkNumerNr).HasColumnName("CRK_NumerNr");
            entity.Property(e => e.CrkNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([CRK_NUMERNR],[CRK_NUMERSTRING]))", false)
                .HasColumnName("CRK_NumerPelny");
            entity.Property(e => e.CrkNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CRK_NumerString");
            entity.Property(e => e.CrkObsluga).HasColumnName("CRK_Obsluga");
            entity.Property(e => e.CrkOpeModId).HasColumnName("CRK_OpeModID");
            entity.Property(e => e.CrkOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CRK_OpeModKod");
            entity.Property(e => e.CrkOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CRK_OpeModNazwisko");
            entity.Property(e => e.CrkOpeZalId).HasColumnName("CRK_OpeZalID");
            entity.Property(e => e.CrkOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CRK_OpeZalKod");
            entity.Property(e => e.CrkOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("CRK_OpeZalNazwisko");
            entity.Property(e => e.CrkOpiekunId).HasColumnName("CRK_OpiekunId");
            entity.Property(e => e.CrkOpiekunTyp).HasColumnName("CRK_OpiekunTyp");
            entity.Property(e => e.CrkOpis).HasColumnName("CRK_Opis");
            entity.Property(e => e.CrkOsobaId).HasColumnName("CRK_OsobaId");
            entity.Property(e => e.CrkOsobaNazwisko)
                .HasMaxLength(40)
                .HasColumnName("CRK_OsobaNazwisko");
            entity.Property(e => e.CrkParId).HasColumnName("CRK_ParId");
            entity.Property(e => e.CrkPodId).HasColumnName("CRK_PodID");
            entity.Property(e => e.CrkPodmiotTyp).HasColumnName("CRK_PodmiotTyp");
            entity.Property(e => e.CrkPriorytet).HasColumnName("CRK_Priorytet");
            entity.Property(e => e.CrkPrzypomnienie).HasColumnName("CRK_Przypomnienie");
            entity.Property(e => e.CrkStaModId).HasColumnName("CRK_StaModId");
            entity.Property(e => e.CrkStaZalId).HasColumnName("CRK_StaZalId");
            entity.Property(e => e.CrkStanowiskoId).HasColumnName("CRK_StanowiskoID");
            entity.Property(e => e.CrkTemat)
                .HasMaxLength(255)
                .HasColumnName("CRK_Temat");
            entity.Property(e => e.CrkTerminDo)
                .HasColumnType("datetime")
                .HasColumnName("CRK_TerminDo");
            entity.Property(e => e.CrkTerminOd)
                .HasColumnType("datetime")
                .HasColumnName("CRK_TerminOd");
            entity.Property(e => e.CrkTsMod)
                .HasColumnType("datetime")
                .HasColumnName("CRK_TS_Mod");
            entity.Property(e => e.CrkTsZal)
                .HasColumnType("datetime")
                .HasColumnName("CRK_TS_Zal");
            entity.Property(e => e.CrkUwagiDoRealizacji)
                .HasDefaultValue("")
                .HasColumnName("CRK_UwagiDoRealizacji");
            entity.Property(e => e.CrkWatekId).HasColumnName("CRK_WatekId");
            entity.Property(e => e.CrkWindykacja).HasColumnName("CRK_Windykacja");
            entity.Property(e => e.CrkWykonano)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CRK_Wykonano");
            entity.Property(e => e.CrkZadanie).HasColumnName("CRK_Zadanie");

            entity.HasOne(d => d.CrkDdf).WithMany(p => p.Crmkontakties)
                .HasForeignKey(d => d.CrkDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRKDokDef");

            entity.HasOne(d => d.CrkOsoba).WithMany(p => p.Crmkontakties)
                .HasForeignKey(d => d.CrkOsobaId)
                .HasConstraintName("FK_CrkPrzedstawiciel");

            entity.HasOne(d => d.CrkPar).WithMany(p => p.InverseCrkPar)
                .HasForeignKey(d => d.CrkParId)
                .HasConstraintName("FK_CRKNadrzedne");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.Crmkontakties)
                .HasForeignKey(d => new { d.CrkPodId, d.CrkPodmiotTyp })
                .HasConstraintName("FK_CRKPodmiot");
        });

        modelBuilder.Entity<DaneBinarne>(entity =>
        {
            entity.HasKey(e => e.DabDabid)
                .HasName("DAB_Primary")
                .HasFillFactor(100);

            entity.ToTable("DaneBinarne", "CDN", tb => tb.HasTrigger("DaneBinarne_Delete_Trigger"));

            entity.HasIndex(e => e.DabTwAid, "AtBTwrAtrybut").HasFillFactor(100);

            entity.HasIndex(e => new { e.DabNazwa, e.DabDabid }, "DABKeyNazwa").HasFillFactor(100);

            entity.Property(e => e.DabDabid).HasColumnName("DAB_DABID");
            entity.Property(e => e.DabESklepId).HasColumnName("DAB_eSklepID");
            entity.Property(e => e.DabESklepJezykId).HasColumnName("DAB_eSklepJezykID");
            entity.Property(e => e.DabESklepZalId).HasColumnName("DAB_eSklepZalID");
            entity.Property(e => e.DabESklepZalVerId).HasColumnName("DAB_eSklepZalVerID");
            entity.Property(e => e.DabFlaga).HasColumnName("DAB_Flaga");
            entity.Property(e => e.DabGuid).HasColumnName("DAB_GUID");
            entity.Property(e => e.DabIbard24Id).HasColumnName("DAB_IBard24Id");
            entity.Property(e => e.DabIbard24LinkPrywatny)
                .HasMaxLength(512)
                .HasColumnName("DAB_IBard24LinkPrywatny");
            entity.Property(e => e.DabMagazynDanych)
                .HasDefaultValue((byte)1)
                .HasColumnName("DAB_MagazynDanych");
            entity.Property(e => e.DabMagazynDanychId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DAB_MagazynDanychId");
            entity.Property(e => e.DabNazwa)
                .HasMaxLength(128)
                .HasColumnName("DAB_Nazwa");
            entity.Property(e => e.DabNazwaPliku)
                .HasMaxLength(254)
                .HasColumnName("DAB_NazwaPliku");
            entity.Property(e => e.DabOpeModId).HasColumnName("DAB_OpeModID");
            entity.Property(e => e.DabOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_OpeModKod");
            entity.Property(e => e.DabOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DAB_OpeModNazwisko");
            entity.Property(e => e.DabOpeZalId).HasColumnName("DAB_OpeZalID");
            entity.Property(e => e.DabOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_OpeZalKod");
            entity.Property(e => e.DabOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DAB_OpeZalNazwisko");
            entity.Property(e => e.DabRozmiar).HasColumnName("DAB_Rozmiar");
            entity.Property(e => e.DabRozmiarWartosci)
                .HasComputedColumnSql("(datalength([DAB_WARTOSC]))", false)
                .HasColumnName("DAB_RozmiarWartosci");
            entity.Property(e => e.DabRozszerzenie)
                .HasMaxLength(4)
                .HasColumnName("DAB_Rozszerzenie");
            entity.Property(e => e.DabSciezka)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("DAB_Sciezka");
            entity.Property(e => e.DabStaModId).HasColumnName("DAB_StaModId");
            entity.Property(e => e.DabStaZalId).HasColumnName("DAB_StaZalId");
            entity.Property(e => e.DabTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DAB_TS_Mod");
            entity.Property(e => e.DabTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DAB_TS_Zal");
            entity.Property(e => e.DabTwAid).HasColumnName("DAB_TwAID");
            entity.Property(e => e.DabTyp).HasColumnName("DAB_Typ");
            entity.Property(e => e.DabWartosc)
                .HasColumnType("image")
                .HasColumnName("DAB_Wartosc");
            entity.Property(e => e.DabWersja)
                .HasMaxLength(20)
                .HasColumnName("DAB_Wersja");
        });

        modelBuilder.Entity<DaneBinarneLinki>(entity =>
        {
            entity.HasKey(e => e.DblDblid)
                .HasName("DBL_Primary")
                .HasFillFactor(100);

            entity.ToTable("DaneBinarneLinki", "CDN", tb =>
                {
                    tb.HasTrigger("DaneBinarneLinki_Delete_Trigger");
                    tb.HasTrigger("DaneBinarneLinki_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.DblDokumentTyp, e.DblDokumentId }, "DBL_Dokument_Index").HasFillFactor(100);

            entity.HasIndex(e => e.DblTwrId, "DBL_TwrId_Index").HasFillFactor(100);

            entity.HasIndex(e => new { e.DblDabId, e.DblEsklep }, "DaneBinarneLinkiDabIdESklep").HasFillFactor(100);

            entity.HasIndex(e => new { e.DblEsklep, e.DblDabId }, "DaneBinarneLinkiESklepDabId").HasFillFactor(100);

            entity.Property(e => e.DblDblid).HasColumnName("DBL_DBLID");
            entity.Property(e => e.DblDabId).HasColumnName("DBL_DabId");
            entity.Property(e => e.DblDokumentId).HasColumnName("DBL_DokumentId");
            entity.Property(e => e.DblDokumentTyp).HasColumnName("DBL_DokumentTyp");
            entity.Property(e => e.DblESklepJezykId).HasColumnName("DBL_eSklepJezykID");
            entity.Property(e => e.DblESklepZalVerId).HasColumnName("DBL_eSklepZalVerID");
            entity.Property(e => e.DblEsklep).HasColumnName("DBL_ESklep");
            entity.Property(e => e.DblFileMode).HasColumnName("DBL_FileMode");
            entity.Property(e => e.DblJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("DBL_JezykId");
            entity.Property(e => e.DblLp).HasColumnName("DBL_Lp");
            entity.Property(e => e.DblNazwaPliku)
                .HasMaxLength(255)
                .HasColumnName("DBL_NazwaPliku");
            entity.Property(e => e.DblSciezka)
                .HasMaxLength(255)
                .HasColumnName("DBL_Sciezka");
            entity.Property(e => e.DblTagAlt)
                .HasMaxLength(500)
                .HasDefaultValue("")
                .HasColumnName("DBL_TagAlt");
            entity.Property(e => e.DblTagLink)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("DBL_TagLink");
            entity.Property(e => e.DblTagRel).HasColumnName("DBL_TagRel");
            entity.Property(e => e.DblTagTitle)
                .HasMaxLength(500)
                .HasDefaultValue("")
                .HasColumnName("DBL_TagTitle");
            entity.Property(e => e.DblTwrId).HasColumnName("DBL_TwrID");
            entity.Property(e => e.DblTyp).HasColumnName("DBL_Typ");
            entity.Property(e => e.DblWbazie).HasColumnName("DBL_WBazie");
        });

        modelBuilder.Entity<DaneKad>(entity =>
        {
            entity.HasKey(e => e.DkdDkdId)
                .HasName("DKD_Primary")
                .HasFillFactor(100);

            entity.ToTable("DaneKad", "CDN");

            entity.HasIndex(e => e.DkdZjeId, "DKDZjeLink").HasFillFactor(100);

            entity.Property(e => e.DkdDkdId).HasColumnName("DKD_DkdId");
            entity.Property(e => e.DkdKod).HasColumnName("DKD_Kod");
            entity.Property(e => e.DkdOpis)
                .HasMaxLength(254)
                .HasColumnName("DKD_Opis");
            entity.Property(e => e.DkdPoziom).HasColumnName("DKD_Poziom");
            entity.Property(e => e.DkdRodzaj).HasColumnName("DKD_Rodzaj");
            entity.Property(e => e.DkdWybieralny).HasColumnName("DKD_Wybieralny");
            entity.Property(e => e.DkdZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("DKD_ZjeId");
        });

        modelBuilder.Entity<DaneKadMod>(entity =>
        {
            entity.HasKey(e => e.DkmDkmId)
                .HasName("DKM_Primary")
                .HasFillFactor(100);

            entity.ToTable("DaneKadMod", "CDN", tb =>
                {
                    tb.HasTrigger("DaneKadMod_Delete_Trigger");
                    tb.HasTrigger("DaneKadMod_InsertUpdate_Trigger");
                    tb.HasTrigger("DaneKadMod_Update_Trigger");
                });

            entity.HasIndex(e => e.DkmZjeId, "DKMZjeLink").HasFillFactor(100);

            entity.Property(e => e.DkmDkmId).HasColumnName("DKM_DkmId");
            entity.Property(e => e.DkmImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DKM_ImportRowId");
            entity.Property(e => e.DkmNazwa)
                .HasMaxLength(280)
                .IsUnicode(false)
                .HasColumnName("DKM_Nazwa");
            entity.Property(e => e.DkmOpis)
                .HasMaxLength(60)
                .HasColumnName("DKM_Opis");
            entity.Property(e => e.DkmRobotnicze).HasColumnName("DKM_Robotnicze");
            entity.Property(e => e.DkmRodzaj).HasColumnName("DKM_Rodzaj");
            entity.Property(e => e.DkmZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("DKM_ZjeId");
        });

        modelBuilder.Entity<DaneKadModRelacje>(entity =>
        {
            entity.HasKey(e => e.DkrDkrId)
                .HasName("DKR_Primary")
                .HasFillFactor(100);

            entity.ToTable("DaneKadModRelacje", "CDN");

            entity.Property(e => e.DkrDkrId).HasColumnName("DKR_DkrId");
            entity.Property(e => e.DkrDkmId1).HasColumnName("DKR_DkmId_1");
            entity.Property(e => e.DkrDkmId2).HasColumnName("DKR_DkmId_2");
            entity.Property(e => e.DkrDkmNazwa)
                .HasMaxLength(280)
                .HasColumnName("DKR_DkmNazwa");
            entity.Property(e => e.DkrDkmRobotnicze).HasColumnName("DKR_DkmRobotnicze");
            entity.Property(e => e.DkrRodzaj)
                .HasDefaultValue((byte)1)
                .HasColumnName("DKR_Rodzaj");

            entity.HasOne(d => d.DkrDkmId1Navigation).WithMany(p => p.DaneKadModRelacjeDkrDkmId1Navigations)
                .HasForeignKey(d => d.DkrDkmId1)
                .HasConstraintName("FK_DkrDkm1Link");

            entity.HasOne(d => d.DkrDkmId2Navigation).WithMany(p => p.DaneKadModRelacjeDkrDkmId2Navigations)
                .HasForeignKey(d => d.DkrDkmId2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DkrDkm2Link");
        });

        modelBuilder.Entity<DaneKadStr>(entity =>
        {
            entity.HasKey(e => e.DktDktId)
                .HasName("DKT_Primary")
                .HasFillFactor(100);

            entity.ToTable("DaneKadStr", "CDN");

            entity.HasIndex(e => e.DktZjeId, "DKTZjeLink").HasFillFactor(100);

            entity.Property(e => e.DktDktId).HasColumnName("DKT_DktId");
            entity.Property(e => e.DktKod)
                .HasMaxLength(32)
                .HasColumnName("DKT_Kod");
            entity.Property(e => e.DktOpis)
                .HasMaxLength(254)
                .HasColumnName("DKT_Opis");
            entity.Property(e => e.DktPoziom).HasColumnName("DKT_Poziom");
            entity.Property(e => e.DktRodzaj).HasColumnName("DKT_Rodzaj");
            entity.Property(e => e.DktWybieralny).HasColumnName("DKT_Wybieralny");
            entity.Property(e => e.DktZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("DKT_ZjeId");
        });

        modelBuilder.Entity<DanePlac>(entity =>
        {
            entity.HasKey(e => e.DplDplId)
                .HasName("DPL_Primary")
                .HasFillFactor(100);

            entity.ToTable("DanePlac", "CDN");

            entity.HasIndex(e => e.DplZjeId, "DPLZjeLink").HasFillFactor(100);

            entity.Property(e => e.DplDplId).HasColumnName("DPL_DplId");
            entity.Property(e => e.DplKod).HasColumnName("DPL_Kod");
            entity.Property(e => e.DplOpis)
                .HasMaxLength(254)
                .HasColumnName("DPL_Opis");
            entity.Property(e => e.DplPoziom).HasColumnName("DPL_Poziom");
            entity.Property(e => e.DplRodzaj).HasColumnName("DPL_Rodzaj");
            entity.Property(e => e.DplWybieralny).HasColumnName("DPL_Wybieralny");
            entity.Property(e => e.DplZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("DPL_ZjeId");
        });

        modelBuilder.Entity<DanePlacMod>(entity =>
        {
            entity.HasKey(e => e.DpmDpmId)
                .HasName("DPM_Primary")
                .HasFillFactor(100);

            entity.ToTable("DanePlacMod", "CDN");

            entity.HasIndex(e => e.DpmNazwa, "DPMNazwa").HasFillFactor(100);

            entity.HasIndex(e => e.DpmZjeId, "DPMZjeLink").HasFillFactor(100);

            entity.Property(e => e.DpmDpmId).HasColumnName("DPM_DpmId");
            entity.Property(e => e.DpmDodatkowe)
                .HasMaxLength(254)
                .HasColumnName("DPM_Dodatkowe");
            entity.Property(e => e.DpmFormat)
                .HasMaxLength(20)
                .HasColumnName("DPM_Format");
            entity.Property(e => e.DpmInne)
                .HasMaxLength(128)
                .HasColumnName("DPM_Inne");
            entity.Property(e => e.DpmKod).HasColumnName("DPM_Kod");
            entity.Property(e => e.DpmKolejkaOpis)
                .HasMaxLength(254)
                .HasColumnName("DPM_KolejkaOpis");
            entity.Property(e => e.DpmKolejkaWartosc)
                .HasMaxLength(254)
                .HasColumnName("DPM_KolejkaWartosc");
            entity.Property(e => e.DpmKolekcja)
                .HasMaxLength(128)
                .HasColumnName("DPM_Kolekcja");
            entity.Property(e => e.DpmNazwa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DPM_Nazwa");
            entity.Property(e => e.DpmNieaktywny).HasColumnName("DPM_Nieaktywny");
            entity.Property(e => e.DpmOpis)
                .HasMaxLength(254)
                .HasColumnName("DPM_Opis");
            entity.Property(e => e.DpmRodzaj).HasColumnName("DPM_Rodzaj");
            entity.Property(e => e.DpmTag).HasColumnName("DPM_Tag");
            entity.Property(e => e.DpmWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DPM_Wartosc");
            entity.Property(e => e.DpmZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("DPM_ZjeId");
        });

        modelBuilder.Entity<DefAtrElem>(entity =>
        {
            entity.HasKey(e => e.DaeDaeid)
                .HasName("DAE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefAtrElem", "CDN", tb =>
                {
                    tb.HasTrigger("DefAtrElem_Delete_Trigger");
                    tb.HasTrigger("DefAtrElem_Update_Trigger");
                });

            entity.HasIndex(e => e.DaeDeAid, "TwADefAtrybut").HasFillFactor(100);

            entity.Property(e => e.DaeDaeid).HasColumnName("DAE_DAEId");
            entity.Property(e => e.DaeDeAid).HasColumnName("DAE_DeAId");
            entity.Property(e => e.DaeLp)
                .HasDefaultValue(1)
                .HasColumnName("DAE_Lp");
            entity.Property(e => e.DaeWartosc)
                .HasMaxLength(100)
                .HasColumnName("DAE_Wartosc");
        });

        modelBuilder.Entity<DefAtrybuty>(entity =>
        {
            entity.HasKey(e => e.DeADeAid)
                .HasName("DeA_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefAtrybuty", "CDN", tb =>
                {
                    tb.HasTrigger("DefAtrybuty_Delete_Trigger");
                    tb.HasTrigger("DefAtrybuty_Insert_Trigger");
                    tb.HasTrigger("DefAtrybuty_Update_Trigger");
                });

            entity.HasIndex(e => new { e.DeAKod, e.DeADeAid }, "DeAGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DeATyp, e.DeAKod }, "DeAKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DeADeAid).HasColumnName("DeA_DeAId");
            entity.Property(e => e.DeAAnalizyBi).HasColumnName("DeA_AnalizyBI");
            entity.Property(e => e.DeACzyDrukowac).HasColumnName("DeA_CzyDrukowac");
            entity.Property(e => e.DeACzyKod).HasColumnName("DeA_CzyKod");
            entity.Property(e => e.DeACzyKopiowacDoVat).HasColumnName("DeA_CzyKopiowacDoVAT");
            entity.Property(e => e.DeACzyKopiowacFa).HasColumnName("DeA_CzyKopiowacFA");
            entity.Property(e => e.DeACzyObowiazkowyDostawy).HasColumnName("DeA_CzyObowiazkowyDostawy");
            entity.Property(e => e.DeACzyPrzenosic).HasColumnName("DeA_CzyPrzenosic");
            entity.Property(e => e.DeACzyPrzenosicNaDostawy).HasColumnName("DeA_CzyPrzenosicNaDostawy");
            entity.Property(e => e.DeAEsklep).HasColumnName("DeA_ESklep");
            entity.Property(e => e.DeAFormat).HasColumnName("DeA_Format");
            entity.Property(e => e.DeAImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DeA_ImportAppId");
            entity.Property(e => e.DeAImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DeA_ImportRowId");
            entity.Property(e => e.DeAJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("DeA_JezykId");
            entity.Property(e => e.DeAJpkdostepnyFa).HasColumnName("DeA_JPKDostepnyFA");
            entity.Property(e => e.DeAJpkdostepnyFavat).HasColumnName("DeA_JPKDostepnyFAVAT");
            entity.Property(e => e.DeAJpkdostepnyVat).HasColumnName("DeA_JPKDostepnyVAT");
            entity.Property(e => e.DeAKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DeA_Kod");
            entity.Property(e => e.DeANazwa)
                .HasMaxLength(40)
                .HasColumnName("DeA_Nazwa");
            entity.Property(e => e.DeANieaktywny).HasColumnName("DeA_Nieaktywny");
            entity.Property(e => e.DeAOpeModId).HasColumnName("DeA_OpeModID");
            entity.Property(e => e.DeAOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DeA_OpeModKod");
            entity.Property(e => e.DeAOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DeA_OpeModNazwisko");
            entity.Property(e => e.DeAOpeZalId).HasColumnName("DeA_OpeZalID");
            entity.Property(e => e.DeAOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DeA_OpeZalKod");
            entity.Property(e => e.DeAOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DeA_OpeZalNazwisko");
            entity.Property(e => e.DeAPozwalajNaEdycje).HasColumnName("DeA_PozwalajNaEdycje");
            entity.Property(e => e.DeAPozwalajNaEdycjeEsklep).HasColumnName("DeA_PozwalajNaEdycjeESklep");
            entity.Property(e => e.DeAStaModId).HasColumnName("DeA_StaModId");
            entity.Property(e => e.DeAStaZalId).HasColumnName("DeA_StaZalId");
            entity.Property(e => e.DeATsExport)
                .HasColumnType("datetime")
                .HasColumnName("DeA_TS_Export");
            entity.Property(e => e.DeATsMod)
                .HasColumnType("datetime")
                .HasColumnName("DeA_TS_Mod");
            entity.Property(e => e.DeATsZal)
                .HasColumnType("datetime")
                .HasColumnName("DeA_TS_Zal");
            entity.Property(e => e.DeATyp).HasColumnName("DeA_Typ");
            entity.Property(e => e.DeAUdostepniajWmobile).HasColumnName("DeA_UdostepniajWMobile");
            entity.Property(e => e.DeAZalezny).HasColumnName("DeA_Zalezny");
        });

        modelBuilder.Entity<DefCeny>(entity =>
        {
            entity.HasKey(e => e.DfCDfCid)
                .HasName("DfC_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefCeny", "CDN", tb =>
                {
                    tb.HasTrigger("DefCeny_InsertUpdateDelete_Trigger");
                    tb.HasTrigger("DefCeny_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.DfCLp, "DfCLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DfCDfCid).HasColumnName("DfC_DfCId");
            entity.Property(e => e.DfCAktualizacja).HasColumnName("DfC_Aktualizacja");
            entity.Property(e => e.DfCLp).HasColumnName("DfC_Lp");
            entity.Property(e => e.DfCMarza)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DfC_Marza");
            entity.Property(e => e.DfCNazwa)
                .HasMaxLength(20)
                .HasColumnName("DfC_Nazwa");
            entity.Property(e => e.DfCNieaktywna).HasColumnName("DfC_Nieaktywna");
            entity.Property(e => e.DfCOffset)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("DfC_Offset");
            entity.Property(e => e.DfCTyp).HasColumnName("DfC_Typ");
            entity.Property(e => e.DfCWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DfC_Waluta");
            entity.Property(e => e.DfCXlLp).HasColumnName("DfC_XL_Lp");
            entity.Property(e => e.DfCZaokraglenie)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("DfC_Zaokraglenie");
        });

        modelBuilder.Entity<DefEtapy>(entity =>
        {
            entity.HasKey(e => e.DetDetId)
                .HasName("DEt_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefEtapy", "CDN", tb => tb.HasTrigger("DefEtapy_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.DetTyp, e.DetKod }, "DEtKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DetDetId).HasColumnName("DEt_DEtId");
            entity.Property(e => e.DetCzyData).HasColumnName("DEt_CzyData");
            entity.Property(e => e.DetKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DEt_Kod");
            entity.Property(e => e.DetLp).HasColumnName("DEt_Lp");
            entity.Property(e => e.DetOpis)
                .HasMaxLength(255)
                .HasColumnName("DEt_Opis");
            entity.Property(e => e.DetTyp).HasColumnName("DEt_Typ");
        });

        modelBuilder.Entity<DefProjekty>(entity =>
        {
            entity.HasKey(e => e.PrjPrjId)
                .HasName("PRJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefProjekty", "CDN", tb =>
                {
                    tb.HasTrigger("DefProjekty_Delete_Trigger");
                    tb.HasTrigger("DefProjekty_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.PrjKod, e.PrjPrjId }, "PRJGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PrjParentId, e.PrjKod }, "PrjKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PrjPrjId).HasColumnName("PRJ_PrjId");
            entity.Property(e => e.PrjDataOtw)
                .HasColumnType("datetime")
                .HasColumnName("PRJ_DataOtw");
            entity.Property(e => e.PrjDataZam)
                .HasColumnType("datetime")
                .HasColumnName("PRJ_DataZam");
            entity.Property(e => e.PrjImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PRJ_ImportAppId");
            entity.Property(e => e.PrjImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PRJ_ImportRowId");
            entity.Property(e => e.PrjKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PRJ_Kod");
            entity.Property(e => e.PrjKonto)
                .HasMaxLength(51)
                .HasColumnName("PRJ_Konto");
            entity.Property(e => e.PrjLp).HasColumnName("PRJ_Lp");
            entity.Property(e => e.PrjNazwa)
                .HasMaxLength(255)
                .HasColumnName("PRJ_Nazwa");
            entity.Property(e => e.PrjNieaktywny).HasColumnName("PRJ_Nieaktywny");
            entity.Property(e => e.PrjOpeModId).HasColumnName("PRJ_OpeModId");
            entity.Property(e => e.PrjOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_OpeModKod");
            entity.Property(e => e.PrjOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRJ_OpeModNazwisko");
            entity.Property(e => e.PrjOpeZalId).HasColumnName("PRJ_OpeZalId");
            entity.Property(e => e.PrjOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_OpeZalKod");
            entity.Property(e => e.PrjOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRJ_OpeZalNazwisko");
            entity.Property(e => e.PrjParentId).HasColumnName("PRJ_ParentId");
            entity.Property(e => e.PrjPoziom).HasColumnName("PRJ_Poziom");
            entity.Property(e => e.PrjStaModId).HasColumnName("PRJ_StaModId");
            entity.Property(e => e.PrjStaZalId).HasColumnName("PRJ_StaZalId");
            entity.Property(e => e.PrjSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRJ_Symbol");
            entity.Property(e => e.PrjTsExport)
                .HasColumnType("datetime")
                .HasColumnName("PRJ_TS_Export");
            entity.Property(e => e.PrjTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PRJ_TS_Mod");
            entity.Property(e => e.PrjTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PRJ_TS_Zal");
            entity.Property(e => e.PrjUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PRJ_Url");
            entity.Property(e => e.PrjWezel)
                .HasMaxLength(255)
                .HasColumnName("PRJ_Wezel");
        });

        modelBuilder.Entity<DefProjektyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DefProjektyView", "CDN");

            entity.Property(e => e.DvPrjid)
                .ValueGeneratedOnAdd()
                .HasColumnName("DV_PRJID");
            entity.Property(e => e.DvPrjkod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DV_PRJKOD");
            entity.Property(e => e.DvPrjkonto)
                .HasMaxLength(51)
                .HasColumnName("DV_PRJKONTO");
            entity.Property(e => e.DvPrjnazwa)
                .HasMaxLength(255)
                .HasColumnName("DV_PRJNAZWA");
            entity.Property(e => e.DvPrjnieaktywny).HasColumnName("DV_PRJNIEAKTYWNY");
            entity.Property(e => e.DvPrjparentid).HasColumnName("DV_PRJPARENTID");
        });

        modelBuilder.Entity<DefinicjaZmian>(entity =>
        {
            entity.HasKey(e => e.DfzDfzId)
                .HasName("DFZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefinicjaZmian", "CDN", tb => tb.HasTrigger("DefinicjaZmian_Delete_Trigger"));

            entity.HasIndex(e => e.DfzNazwa, "DFZNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DfzDfzId).HasColumnName("DFZ_DfzId");
            entity.Property(e => e.DfzAktualizacja).HasColumnName("DFZ_Aktualizacja");
            entity.Property(e => e.DfzInteraktywna).HasColumnName("DFZ_Interaktywna");
            entity.Property(e => e.DfzNazwa)
                .HasMaxLength(128)
                .HasColumnName("DFZ_Nazwa");
            entity.Property(e => e.DfzNieaktywny).HasColumnName("DFZ_Nieaktywny");
            entity.Property(e => e.DfzPole1).HasColumnName("DFZ_Pole1");
            entity.Property(e => e.DfzPole2).HasColumnName("DFZ_Pole2");
            entity.Property(e => e.DfzPole3).HasColumnName("DFZ_Pole3");
            entity.Property(e => e.DfzStandardowy).HasColumnName("DFZ_Standardowy");
            entity.Property(e => e.DfzWzor)
                .HasMaxLength(2048)
                .HasColumnName("DFZ_Wzor");
            entity.Property(e => e.DfzWzor1)
                .HasMaxLength(254)
                .HasColumnName("DFZ_Wzor1");
            entity.Property(e => e.DfzWzor2)
                .HasMaxLength(254)
                .HasColumnName("DFZ_Wzor2");
            entity.Property(e => e.DfzWzor3)
                .HasMaxLength(254)
                .HasColumnName("DFZ_Wzor3");
            entity.Property(e => e.DfzZaawansowany).HasColumnName("DFZ_Zaawansowany");

            entity.HasOne(d => d.DfzPole1Navigation).WithMany(p => p.DefinicjaZmianDfzPole1Navigations)
                .HasForeignKey(d => d.DfzPole1)
                .HasConstraintName("FK_DFZPole1");

            entity.HasOne(d => d.DfzPole2Navigation).WithMany(p => p.DefinicjaZmianDfzPole2Navigations)
                .HasForeignKey(d => d.DfzPole2)
                .HasConstraintName("FK_DFZPole2");

            entity.HasOne(d => d.DfzPole3Navigation).WithMany(p => p.DefinicjaZmianDfzPole3Navigations)
                .HasForeignKey(d => d.DfzPole3)
                .HasConstraintName("FK_DFZPole3");
        });

        modelBuilder.Entity<DefinicjaZmianPola>(entity =>
        {
            entity.HasKey(e => e.DzpDzpId)
                .HasName("DZP_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefinicjaZmianPola", "CDN");

            entity.HasIndex(e => new { e.DzpNazwa, e.DzpDfzId }, "DFZNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DzpDfzId, "DZPDfzLink").HasFillFactor(100);

            entity.Property(e => e.DzpDzpId).HasColumnName("DZP_DzpId");
            entity.Property(e => e.DzpDfzId).HasColumnName("DZP_DfzId");
            entity.Property(e => e.DzpDodatkowe)
                .HasMaxLength(254)
                .HasColumnName("DZP_Dodatkowe");
            entity.Property(e => e.DzpFormat)
                .HasMaxLength(20)
                .HasColumnName("DZP_Format");
            entity.Property(e => e.DzpInne)
                .HasMaxLength(128)
                .HasColumnName("DZP_Inne");
            entity.Property(e => e.DzpKolekcja)
                .HasMaxLength(128)
                .HasColumnName("DZP_Kolekcja");
            entity.Property(e => e.DzpNazwa)
                .HasMaxLength(61)
                .HasColumnName("DZP_Nazwa");
            entity.Property(e => e.DzpNieaktywny).HasColumnName("DZP_Nieaktywny");
            entity.Property(e => e.DzpRodzaj).HasColumnName("DZP_Rodzaj");
            entity.Property(e => e.DzpWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DZP_Wartosc");
            entity.Property(e => e.DzpWartoscTekst)
                .HasMaxLength(254)
                .HasColumnName("DZP_WartoscTekst");

            entity.HasOne(d => d.DzpDfz).WithMany(p => p.DefinicjaZmianPolas)
                .HasForeignKey(d => d.DzpDfzId)
                .HasConstraintName("FK_DZPDfzLink");
        });

        modelBuilder.Entity<DefinicjeStref>(entity =>
        {
            entity.HasKey(e => e.DstDstId)
                .HasName("DST_Primary")
                .HasFillFactor(100);

            entity.ToTable("DefinicjeStref", "CDN", tb =>
                {
                    tb.HasTrigger("DefinicjeStref_Delete_Trigger");
                    tb.HasTrigger("DefinicjeStref_InsertUpdate_Trigger");
                    tb.HasTrigger("DefinicjeStref_Update_Trigger");
                });

            entity.HasIndex(e => e.DstAkronim, "DstAkronim")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DstNazwa, "DstNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DstSymbol, "DstSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DstDstId).HasColumnName("DST_DstId");
            entity.Property(e => e.DstAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DST_Akronim");
            entity.Property(e => e.DstImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DST_ImportRowId");
            entity.Property(e => e.DstNazwa)
                .HasMaxLength(50)
                .HasColumnName("DST_Nazwa");
            entity.Property(e => e.DstNieaktywny).HasColumnName("DST_Nieaktywny");
            entity.Property(e => e.DstOpeModId).HasColumnName("DST_OpeModId");
            entity.Property(e => e.DstOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DST_OpeModKod");
            entity.Property(e => e.DstOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DST_OpeModNazwisko");
            entity.Property(e => e.DstOpeZalId).HasColumnName("DST_OpeZalId");
            entity.Property(e => e.DstOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DST_OpeZalKod");
            entity.Property(e => e.DstOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DST_OpeZalNazwisko");
            entity.Property(e => e.DstProcentWynZas)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("DST_ProcentWynZas");
            entity.Property(e => e.DstStaModId).HasColumnName("DST_StaModId");
            entity.Property(e => e.DstStaZalId).HasColumnName("DST_StaZalId");
            entity.Property(e => e.DstStandardowy).HasColumnName("DST_Standardowy");
            entity.Property(e => e.DstSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DST_Symbol");
            entity.Property(e => e.DstTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DST_TS_Mod");
            entity.Property(e => e.DstTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DST_TS_Zal");
            entity.Property(e => e.DstUwzglCzasPracy).HasColumnName("DST_UwzglCzasPracy");
        });

        modelBuilder.Entity<DeklCuk>(entity =>
        {
            entity.HasKey(e => e.CukCukid)
                .HasName("CUK_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklCUK", "CDN");

            entity.Property(e => e.CukCukid).HasColumnName("CUK_CUKID");
            entity.Property(e => e.CukDataFaktury).HasColumnName("CUK_DataFaktury");
            entity.Property(e => e.CukDkNid).HasColumnName("CUK_DkNID");
            entity.Property(e => e.CukLpFaktury).HasColumnName("CUK_LpFaktury");
            entity.Property(e => e.CukNipdostawcy)
                .HasMaxLength(255)
                .HasColumnName("CUK_NIPDostawcy");
            entity.Property(e => e.CukNipnabywcy)
                .HasMaxLength(255)
                .HasColumnName("CUK_NIPNabywcy");
            entity.Property(e => e.CukNrFaktury)
                .HasMaxLength(255)
                .HasColumnName("CUK_NrFaktury");
            entity.Property(e => e.CukNrPartiiTowaru)
                .HasMaxLength(256)
                .HasColumnName("CUK_NrPartiiTowaru");

            entity.HasOne(d => d.CukDkN).WithMany(p => p.DeklCuks)
                .HasForeignKey(d => d.CukDkNid)
                .HasConstraintName("FK_CUKDeklNag");
        });

        modelBuilder.Entity<DeklElem>(entity =>
        {
            entity.HasKey(e => e.DkEDkEid)
                .HasName("DkE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklElem", "CDN");

            entity.HasIndex(e => new { e.DkEDkNid, e.DkENumer }, "DkEDeklNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DkEDkEid).HasColumnName("DkE_DkEID");
            entity.Property(e => e.DkEDkNid).HasColumnName("DkE_DkNID");
            entity.Property(e => e.DkENumer).HasColumnName("DkE_Numer");
            entity.Property(e => e.DkEOpis)
                .HasMaxLength(254)
                .HasColumnName("DkE_Opis");
            entity.Property(e => e.DkEWartoscL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DkE_WartoscL");
            entity.Property(e => e.DkEWartoscM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DkE_WartoscM");
            entity.Property(e => e.DkEWartoscTekst).HasColumnName("DkE_WartoscTekst");

            entity.HasOne(d => d.DkEDkN).WithMany(p => p.DeklElems)
                .HasForeignKey(d => d.DkEDkNid)
                .HasConstraintName("FK_DkEDeklNag");
        });

        modelBuilder.Entity<DeklKedu>(entity =>
        {
            entity.HasKey(e => e.DkkDkkId)
                .HasName("DKK_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklKedu", "CDN", tb => tb.HasTrigger("DeklKedu_Delete_Trigger"));

            entity.HasIndex(e => e.DkkNazwa, "DkkNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DkkDkkId).HasColumnName("DKK_DkkId");
            entity.Property(e => e.DkkData)
                .HasColumnType("datetime")
                .HasColumnName("DKK_Data");
            entity.Property(e => e.DkkNazwa)
                .HasMaxLength(72)
                .IsUnicode(false)
                .HasColumnName("DKK_Nazwa");
            entity.Property(e => e.DkkOpeModId).HasColumnName("DKK_OpeModId");
            entity.Property(e => e.DkkOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DKK_OpeModKod");
            entity.Property(e => e.DkkOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DKK_OpeModNazwisko");
            entity.Property(e => e.DkkOpeZalId).HasColumnName("DKK_OpeZalId");
            entity.Property(e => e.DkkOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DKK_OpeZalKod");
            entity.Property(e => e.DkkOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DKK_OpeZalNazwisko");
            entity.Property(e => e.DkkOpis)
                .HasMaxLength(254)
                .HasColumnName("DKK_Opis");
            entity.Property(e => e.DkkStaModId).HasColumnName("DKK_StaModId");
            entity.Property(e => e.DkkStaZalId).HasColumnName("DKK_StaZalId");
            entity.Property(e => e.DkkTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DKK_TS_Mod");
            entity.Property(e => e.DkkTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DKK_TS_Zal");
            entity.Property(e => e.DkkZablokowana).HasColumnName("DKK_Zablokowana");
        });

        modelBuilder.Entity<DeklNag>(entity =>
        {
            entity.HasKey(e => e.DkNDkNid)
                .HasName("DkN_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklNag", "CDN", tb =>
                {
                    tb.HasTrigger("DeklNag_DeleteHandler");
                    tb.HasTrigger("DeklNag_Delete_Trigger");
                    tb.HasTrigger("DeklNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.DkNDkkId, "DKNDeklKedu").HasFillFactor(100);

            entity.HasIndex(e => e.DkNParentId, "DKNParentId").HasFillFactor(100);

            entity.HasIndex(e => e.DkNDekId, "DkNDekretyNag").HasFillFactor(100);

            entity.HasIndex(e => new { e.DkNPraId, e.DkNKntId, e.DkNTypDeklar, e.DkNRokMiesiac, e.DkNData, e.DkNNumer, e.DkNParentId, e.DkNConstNip }, "DkNPodatnik")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DkNPreDekId, "DkNPreDekret").HasFillFactor(100);

            entity.HasIndex(e => new { e.DkNTypDeklar, e.DkNRokMiesiac, e.DkNData, e.DkNNumer, e.DkNPraId, e.DkNKntId, e.DkNParentId, e.DkNConstNip }, "DkNRokMies")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DkNDkNid).HasColumnName("DkN_DkNID");
            entity.Property(e => e.DkNConstNip)
                .HasMaxLength(20)
                .HasColumnName("DkN_ConstNIP");
            entity.Property(e => e.DkNData)
                .HasColumnType("datetime")
                .HasColumnName("DkN_Data");
            entity.Property(e => e.DkNDataKur)
                .HasColumnType("datetime")
                .HasColumnName("DkN_DataKur");
            entity.Property(e => e.DkNDekId).HasColumnName("DkN_DekId");
            entity.Property(e => e.DkNDkkId).HasColumnName("DkN_DkkId");
            entity.Property(e => e.DkNEdeklDataOdebraniaUpo)
                .HasColumnType("datetime")
                .HasColumnName("DkN_EDekl_DataOdebraniaUPO");
            entity.Property(e => e.DkNEdeklDataWplyniecia)
                .HasMaxLength(50)
                .HasColumnName("DkN_EDekl_DataWplyniecia");
            entity.Property(e => e.DkNEdeklDataWyslania)
                .HasColumnType("datetime")
                .HasColumnName("DkN_EDekl_DataWyslania");
            entity.Property(e => e.DkNEdeklDokumentId)
                .HasMaxLength(240)
                .IsUnicode(false)
                .HasColumnName("DkN_EDekl_DokumentID");
            entity.Property(e => e.DkNEdeklKodUrzedu)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("DkN_EDekl_KodUrzedu");
            entity.Property(e => e.DkNEdeklNip1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DkN_EDekl_NIP1");
            entity.Property(e => e.DkNEdeklNip2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DkN_EDekl_NIP2");
            entity.Property(e => e.DkNEdeklOperatorPobierajacyUpo).HasColumnName("DkN_EDekl_OperatorPobierajacyUPO");
            entity.Property(e => e.DkNEdeklOperatorWysylajacy).HasColumnName("DkN_EDekl_OperatorWysylajacy");
            entity.Property(e => e.DkNEdeklPodmiot)
                .HasMaxLength(1000)
                .HasColumnName("DkN_EDekl_Podmiot");
            entity.Property(e => e.DkNEdeklRefId)
                .HasMaxLength(240)
                .HasColumnName("DkN_EDekl_RefID");
            entity.Property(e => e.DkNEdeklSigningTime)
                .HasMaxLength(50)
                .HasColumnName("DkN_EDekl_SigningTime");
            entity.Property(e => e.DkNEdeklSkrotDokumentu)
                .HasMaxLength(240)
                .HasColumnName("DkN_EDekl_SkrotDokumentu");
            entity.Property(e => e.DkNEdeklSkrotStruktury)
                .HasMaxLength(240)
                .HasColumnName("DkN_EDekl_SkrotStruktury");
            entity.Property(e => e.DkNEdeklStatus).HasColumnName("DkN_EDekl_Status");
            entity.Property(e => e.DkNEdeklStatusOpis)
                .HasMaxLength(1000)
                .HasColumnName("DkN_EDekl_StatusOpis");
            entity.Property(e => e.DkNEdeklStempelCzasu)
                .HasMaxLength(240)
                .HasColumnName("DkN_EDekl_StempelCzasu");
            entity.Property(e => e.DkNEdeklStrukturaLogiczna)
                .HasMaxLength(240)
                .HasColumnName("DkN_EDekl_StrukturaLogiczna");
            entity.Property(e => e.DkNFinalna)
                .HasComputedColumnSql("([CDN].[DEKLFINALNA]([DKN_DKNID],[DKN_ROKMIESIAC]))", false)
                .HasColumnName("DkN_Finalna");
            entity.Property(e => e.DkNImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DkN_ImportRowID");
            entity.Property(e => e.DkNKntId).HasColumnName("DkN_KntId");
            entity.Property(e => e.DkNKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DkN_KursL");
            entity.Property(e => e.DkNKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DkN_KursM");
            entity.Property(e => e.DkNKursNumer).HasColumnName("DkN_KursNumer");
            entity.Property(e => e.DkNKwota)
                .HasComputedColumnSql("([CDN].[KWOTADEKLARACJI]([DKN_DKNID]))", false)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DkN_Kwota");
            entity.Property(e => e.DkNNumer).HasColumnName("DkN_Numer");
            entity.Property(e => e.DkNOpeModId).HasColumnName("DkN_OpeModID");
            entity.Property(e => e.DkNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DkN_OpeModKod");
            entity.Property(e => e.DkNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DkN_OpeModNazwisko");
            entity.Property(e => e.DkNOpeZalId).HasColumnName("DkN_OpeZalID");
            entity.Property(e => e.DkNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DkN_OpeZalKod");
            entity.Property(e => e.DkNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DkN_OpeZalNazwisko");
            entity.Property(e => e.DkNParentId).HasColumnName("DkN_ParentId");
            entity.Property(e => e.DkNPra2Id).HasColumnName("DkN_Pra2ID");
            entity.Property(e => e.DkNPraId).HasColumnName("DkN_PraID");
            entity.Property(e => e.DkNPreDekId).HasColumnName("DkN_PreDekId");
            entity.Property(e => e.DkNRokMiesiac).HasColumnName("DkN_RokMiesiac");
            entity.Property(e => e.DkNStaModId).HasColumnName("DkN_StaModId");
            entity.Property(e => e.DkNStaZalId).HasColumnName("DkN_StaZalId");
            entity.Property(e => e.DkNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DkN_TS_Mod");
            entity.Property(e => e.DkNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DkN_TS_Zal");
            entity.Property(e => e.DkNTypDeklar).HasColumnName("DkN_TypDeklar");
            entity.Property(e => e.DkNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DkN_Waluta");
            entity.Property(e => e.DkNWersja).HasColumnName("DkN_Wersja");
            entity.Property(e => e.DkNZablokowana).HasColumnName("DkN_Zablokowana");

            entity.HasOne(d => d.DkNDkk).WithMany(p => p.DeklNags)
                .HasForeignKey(d => d.DkNDkkId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DKNDeklKedu");

            entity.HasOne(d => d.DkNKnt).WithMany(p => p.DeklNags)
                .HasForeignKey(d => d.DkNKntId)
                .HasConstraintName("FK_DkNKontrahent");

            entity.HasOne(d => d.DkNPra2).WithMany(p => p.DeklNagDkNPra2s)
                .HasForeignKey(d => d.DkNPra2Id)
                .HasConstraintName("FK_DkNWspolwlasciciel");

            entity.HasOne(d => d.DkNPra).WithMany(p => p.DeklNagDkNPras)
                .HasForeignKey(d => d.DkNPraId)
                .HasConstraintName("FK_DkNPodatnik");
        });

        modelBuilder.Entity<DeklStr>(entity =>
        {
            entity.HasKey(e => e.DksDksId)
                .HasName("DKS_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklStr", "CDN");

            entity.HasIndex(e => e.DksDknId, "DKSDknLink").HasFillFactor(100);

            entity.Property(e => e.DksDksId).HasColumnName("DKS_DksId");
            entity.Property(e => e.DksDknId).HasColumnName("DKS_DknId");
            entity.Property(e => e.DksLp).HasColumnName("DKS_LP");
            entity.Property(e => e.DksTekst).HasColumnName("DKS_Tekst");

            entity.HasOne(d => d.DksDkn).WithMany(p => p.DeklStrs)
                .HasForeignKey(d => d.DksDknId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DKSDknLink");
        });

        modelBuilder.Entity<DeklV27>(entity =>
        {
            entity.HasKey(e => e.V27V27id)
                .HasName("V27_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklV27", "CDN");

            entity.Property(e => e.V27V27id).HasColumnName("V27_V27ID");
            entity.Property(e => e.V27DkNid).HasColumnName("V27_DkNID");
            entity.Property(e => e.V27Kwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("V27_Kwota");
            entity.Property(e => e.V27Lp).HasColumnName("V27_LP");
            entity.Property(e => e.V27Nazwa)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasColumnName("V27_Nazwa");
            entity.Property(e => e.V27Nip)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("V27_NIP");
            entity.Property(e => e.V27Numer).HasColumnName("V27_Numer");
            entity.Property(e => e.V27Typ).HasColumnName("V27_Typ");
            entity.Property(e => e.V27Zmiana).HasColumnName("V27_Zmiana");

            entity.HasOne(d => d.V27DkN).WithMany(p => p.DeklV27s)
                .HasForeignKey(d => d.V27DkNid)
                .HasConstraintName("FK_V27DeklNag");
        });

        modelBuilder.Entity<DeklVuek>(entity =>
        {
            entity.HasKey(e => e.DvuDvuid)
                .HasName("DVU_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklVUEK", "CDN");

            entity.Property(e => e.DvuDvuid).HasColumnName("DVU_DVUID");
            entity.Property(e => e.DvuByloJest).HasColumnName("DVU_ByloJest");
            entity.Property(e => e.DvuByloJestString)
                .HasMaxLength(4)
                .HasColumnName("DVU_ByloJestString");
            entity.Property(e => e.DvuDkNid).HasColumnName("DVU_DkNID");
            entity.Property(e => e.DvuKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DVU_Kraj");
            entity.Property(e => e.DvuKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DVU_Kwota");
            entity.Property(e => e.DvuLp).HasColumnName("DVU_LP");
            entity.Property(e => e.DvuNip)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DVU_NIP");
            entity.Property(e => e.DvuNip2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DVU_NIP2");
            entity.Property(e => e.DvuTt).HasColumnName("DVU_TT");
            entity.Property(e => e.DvuTtstring)
                .HasMaxLength(3)
                .HasColumnName("DVU_TTString");
            entity.Property(e => e.DvuTyp).HasColumnName("DVU_Typ");
            entity.Property(e => e.DvuZnumer).HasColumnName("DVU_ZNumer");

            entity.HasOne(d => d.DvuDkN).WithMany(p => p.DeklVueks)
                .HasForeignKey(d => d.DvuDkNid)
                .HasConstraintName("FK_DVUDeklNag");
        });

        modelBuilder.Entity<DeklWydr>(entity =>
        {
            entity.HasKey(e => e.DkWDkWid)
                .HasName("DkW_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklWydr", "CDN");

            entity.HasIndex(e => new { e.DkWDkNid, e.DkWRubryka, e.DkWSubRubryka }, "DkWDeklNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DkWDkWid).HasColumnName("DkW_DkWID");
            entity.Property(e => e.DkWDkNid).HasColumnName("DkW_DkNID");
            entity.Property(e => e.DkWOpis)
                .HasMaxLength(254)
                .HasColumnName("DkW_Opis");
            entity.Property(e => e.DkWRubryka).HasColumnName("DkW_Rubryka");
            entity.Property(e => e.DkWSubRubryka).HasColumnName("DkW_SubRubryka");
            entity.Property(e => e.DkWWartosc).HasColumnName("DkW_Wartosc");

            entity.HasOne(d => d.DkWDkN).WithMany(p => p.DeklWydrs)
                .HasForeignKey(d => d.DkWDkNid)
                .HasConstraintName("FK_DkWDeklNag");
        });

        modelBuilder.Entity<DeklZaklady>(entity =>
        {
            entity.HasKey(e => e.DkZDkZid)
                .HasName("DkZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DeklZaklady", "CDN");

            entity.HasIndex(e => e.DkZNazwaPelna, "DkZNazwaPelna").HasFillFactor(100);

            entity.Property(e => e.DkZDkZid).HasColumnName("DkZ_DkZID");
            entity.Property(e => e.DkZDataRozpDzial)
                .HasColumnType("datetime")
                .HasColumnName("DkZ_DataRozpDzial");
            entity.Property(e => e.DkZGmina)
                .HasMaxLength(40)
                .HasColumnName("DkZ_Gmina");
            entity.Property(e => e.DkZKodGminy)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DkZ_KodGminy");
            entity.Property(e => e.DkZKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DkZ_KodP");
            entity.Property(e => e.DkZKraj)
                .HasMaxLength(40)
                .HasColumnName("DkZ_Kraj");
            entity.Property(e => e.DkZLiczbaZatrudnionych).HasColumnName("DkZ_LiczbaZatrudnionych");
            entity.Property(e => e.DkZMiasto)
                .HasMaxLength(40)
                .HasColumnName("DkZ_Miasto");
            entity.Property(e => e.DkZNazwaPelna)
                .HasMaxLength(240)
                .HasColumnName("DkZ_NazwaPelna");
            entity.Property(e => e.DkZNazwaSkrocona)
                .HasMaxLength(70)
                .HasColumnName("DkZ_NazwaSkrocona");
            entity.Property(e => e.DkZNieaktywny).HasColumnName("DkZ_Nieaktywny");
            entity.Property(e => e.DkZNip)
                .HasMaxLength(20)
                .HasColumnName("DkZ_Nip");
            entity.Property(e => e.DkZNrDomu)
                .HasMaxLength(10)
                .HasColumnName("DkZ_NrDomu");
            entity.Property(e => e.DkZNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("DkZ_NrLokalu");
            entity.Property(e => e.DkZOpeModId).HasColumnName("DkZ_OpeModId");
            entity.Property(e => e.DkZOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DkZ_OpeModKod");
            entity.Property(e => e.DkZOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DkZ_OpeModNazwisko");
            entity.Property(e => e.DkZOpeZalId).HasColumnName("DkZ_OpeZalId");
            entity.Property(e => e.DkZOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DkZ_OpeZalKod");
            entity.Property(e => e.DkZOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DkZ_OpeZalNazwisko");
            entity.Property(e => e.DkZPoczta)
                .HasMaxLength(40)
                .HasColumnName("DkZ_Poczta");
            entity.Property(e => e.DkZPowiat)
                .HasMaxLength(40)
                .HasColumnName("DkZ_Powiat");
            entity.Property(e => e.DkZRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DkZ_Regon");
            entity.Property(e => e.DkZStaModId).HasColumnName("DkZ_StaModId");
            entity.Property(e => e.DkZStaZalId).HasColumnName("DkZ_StaZalId");
            entity.Property(e => e.DkZTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DkZ_TS_Mod");
            entity.Property(e => e.DkZTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DkZ_TS_Zal");
            entity.Property(e => e.DkZUlica)
                .HasMaxLength(40)
                .HasColumnName("DkZ_Ulica");
            entity.Property(e => e.DkZUwzgledniajNaCitst).HasColumnName("DkZ_UwzgledniajNaCITST");
            entity.Property(e => e.DkZUwzgledniajNaCitsta).HasColumnName("DkZ_UwzgledniajNaCITSTA");
            entity.Property(e => e.DkZWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("DkZ_Wojewodztwo");
        });

        modelBuilder.Entity<DekretyElem>(entity =>
        {
            entity.HasKey(e => e.DeEDeEid)
                .HasName("DeE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DekretyElem", "CDN", tb =>
                {
                    tb.HasTrigger("DekretyElem_DeleteHandler");
                    tb.HasTrigger("DekretyElem_InsertUpdateDelete_Trigger");
                    tb.HasTrigger("DekretyElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.DeEBzdId, "DeEBZdId").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeEDokumentId, e.DeEDokumentTyp }, "DeEDokument").HasFillFactor(100);

            entity.HasIndex(e => e.DeEKatId, "DeEKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeEDeNid, e.DeELp }, "DeENaglowek").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeESlownikId, e.DeESlownikTyp }, "DeEPodmiot").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeEDeEid, e.DeERozrachunki, e.DeEAccWnId, e.DeEAccMaId, e.DeEDeNid }, "DeE_DETA").HasFillFactor(100);

            entity.Property(e => e.DeEDeEid).HasColumnName("DeE_DeEId");
            entity.Property(e => e.DeEAccMaId).HasColumnName("DeE_AccMaId");
            entity.Property(e => e.DeEAccWnId).HasColumnName("DeE_AccWnId");
            entity.Property(e => e.DeEBezRozliczenia).HasColumnName("DeE_BezRozliczenia");
            entity.Property(e => e.DeEBzdId).HasColumnName("DeE_BZdId");
            entity.Property(e => e.DeEDataKur)
                .HasColumnType("datetime")
                .HasColumnName("DeE_DataKur");
            entity.Property(e => e.DeEDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("DeE_DataOpe");
            entity.Property(e => e.DeEDataWys)
                .HasColumnType("datetime")
                .HasColumnName("DeE_DataWys");
            entity.Property(e => e.DeEDeNid).HasColumnName("DeE_DeNId");
            entity.Property(e => e.DeEDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("DeE_Dokument");
            entity.Property(e => e.DeEDokumentId).HasColumnName("DeE_DokumentId");
            entity.Property(e => e.DeEDokumentTyp).HasColumnName("DeE_DokumentTyp");
            entity.Property(e => e.DeEFplId).HasColumnName("DeE_FPlID");
            entity.Property(e => e.DeEKatId).HasColumnName("DeE_KatId");
            entity.Property(e => e.DeEKategoria)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("DeE_Kategoria");
            entity.Property(e => e.DeEKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DeE_KontoMa");
            entity.Property(e => e.DeEKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DeE_KontoWn");
            entity.Property(e => e.DeEKorekta).HasColumnName("DeE_Korekta");
            entity.Property(e => e.DeEKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DeE_KursL");
            entity.Property(e => e.DeEKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DeE_KursM");
            entity.Property(e => e.DeEKursNumer).HasColumnName("DeE_KursNumer");
            entity.Property(e => e.DeEKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DeE_Kwota");
            entity.Property(e => e.DeEKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DeE_KwotaWal");
            entity.Property(e => e.DeELp).HasColumnName("DeE_Lp");
            entity.Property(e => e.DeEPlatnosci).HasColumnName("DeE_Platnosci");
            entity.Property(e => e.DeERozrachunki).HasColumnName("DeE_Rozrachunki");
            entity.Property(e => e.DeESlownikId).HasColumnName("DeE_SlownikId");
            entity.Property(e => e.DeESlownikTyp).HasColumnName("DeE_SlownikTyp");
            entity.Property(e => e.DeEStatusRozrachunku).HasColumnName("DeE_StatusRozrachunku");
            entity.Property(e => e.DeETermin)
                .HasColumnType("datetime")
                .HasColumnName("DeE_Termin");
            entity.Property(e => e.DeETerminRoz)
                .HasColumnType("datetime")
                .HasColumnName("DeE_TerminRoz");
            entity.Property(e => e.DeEWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DeE_Waluta");

            entity.HasOne(d => d.DeEDeN).WithMany(p => p.DekretyElems)
                .HasForeignKey(d => d.DeEDeNid)
                .HasConstraintName("FK_DeENaglowek");

            entity.HasOne(d => d.DeEKat).WithMany(p => p.DekretyElems)
                .HasForeignKey(d => d.DeEKatId)
                .HasConstraintName("FK_DeEKategoria");
        });

        modelBuilder.Entity<DekretyKontum>(entity =>
        {
            entity.HasKey(e => e.DeKDeKid)
                .HasName("DeK_Primary")
                .HasFillFactor(100);

            entity.ToTable("DekretyKonta", "CDN", tb => tb.HasTrigger("DekretyKonta_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.DeKDziId, e.DeKAccId, e.DeKDataDok, e.DeKDeEid, e.DeKStrona }, "DeEDziennik")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DeKDeEid, e.DeKStrona }, "DeKElement")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DeKAccId, e.DeKDataDok, e.DeKDeEid, e.DeKStrona }, "DeKKonto")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DeKDeNid, "DeKNaglowek").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeKDeEid, e.DeKAccId, e.DeKDataDok }, "DeK_DETA").HasFillFactor(100);

            entity.Property(e => e.DeKDeKid).HasColumnName("DeK_DeKId");
            entity.Property(e => e.DeKAccId).HasColumnName("DeK_AccId");
            entity.Property(e => e.DeKBufor).HasColumnName("DeK_Bufor");
            entity.Property(e => e.DeKDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DeK_DataDok");
            entity.Property(e => e.DeKDeEid).HasColumnName("DeK_DeEId");
            entity.Property(e => e.DeKDeNid).HasColumnName("DeK_DeNId");
            entity.Property(e => e.DeKDziId).HasColumnName("DeK_DziId");
            entity.Property(e => e.DeKKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DeK_Kwota");
            entity.Property(e => e.DeKKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DeK_KwotaWal");
            entity.Property(e => e.DeKStrona).HasColumnName("DeK_Strona");
            entity.Property(e => e.DeKWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DeK_Waluta");

            entity.HasOne(d => d.DeKAcc).WithMany(p => p.DekretyKonta)
                .HasForeignKey(d => d.DeKAccId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeKKonto");
        });

        modelBuilder.Entity<DekretyNag>(entity =>
        {
            entity.HasKey(e => e.DeNDeNid)
                .HasName("DeN_Primary")
                .HasFillFactor(100);

            entity.ToTable("DekretyNag", "CDN", tb =>
                {
                    tb.HasTrigger("DekretyNag_Delete_Trigger");
                    tb.HasTrigger("DekretyNag_InsertUpdateHandler");
                    tb.HasTrigger("DekretyNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.DeNTyp, e.DeNDziId, e.DeNDataDok, e.DeNBufor, e.DeNNrDziennika, e.DeNDeNid }, "DeNDziennikChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNTyp, e.DeNDziId, e.DeNBufor, e.DeNNrDziennika }, "DeNDziennikNumer").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNIdentKsieg, e.DeNIdentKsiegStr, e.DeNIdentKsiegNr }, "DeNIdentKsieg").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNKatId, e.DeNDataDok, e.DeNDeNid }, "DeNKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNTyp, e.DeNOobId, e.DeNDataDok, e.DeNBufor, e.DeNNrKsiegi, e.DeNDeNid }, "DeNKsiegaChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNTyp, e.DeNOobId, e.DeNBufor, e.DeNNrKsiegi }, "DeNKsiegaNumer").HasFillFactor(100);

            entity.HasIndex(e => e.DeNNumerPelny, "DeNNumerPelny").HasFillFactor(100);

            entity.HasIndex(e => e.DeNOrgId, "DeNOryginal").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNPodmiotId, e.DeNPodmiotTyp, e.DeNDataDok, e.DeNDeNid }, "DeNPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNWzorzecId, e.DeNWzorzecTyp }, "DeNWzorzec").HasFillFactor(100);

            entity.HasIndex(e => new { e.DeNTyp, e.DeNOobId, e.DeNBufor, e.DeNDziId, e.DeNDeNid }, "DeN_DETA").HasFillFactor(100);

            entity.Property(e => e.DeNDeNid).HasColumnName("DeN_DeNId");
            entity.Property(e => e.DeNBufor).HasColumnName("DeN_Bufor");
            entity.Property(e => e.DeNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DeN_DataDok");
            entity.Property(e => e.DeNDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("DeN_DataOpe");
            entity.Property(e => e.DeNDataWys)
                .HasColumnType("datetime")
                .HasColumnName("DeN_DataWys");
            entity.Property(e => e.DeNDdfId).HasColumnName("DeN_DDfId");
            entity.Property(e => e.DeNDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("DeN_Dokument");
            entity.Property(e => e.DeNDziId).HasColumnName("DeN_DziId");
            entity.Property(e => e.DeNDziennik)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DeN_Dziennik");
            entity.Property(e => e.DeNIdentKsieg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DeN_IdentKsieg");
            entity.Property(e => e.DeNIdentKsiegDdfId).HasColumnName("DeN_IdentKsiegDDfID");
            entity.Property(e => e.DeNIdentKsiegNr)
                .HasComputedColumnSql("([CDN].[IdentKsiNr]([DeN_IdentKsieg],[DeN_IdentKsiegNumeracja]))", false)
                .HasColumnName("DeN_IdentKsiegNr");
            entity.Property(e => e.DeNIdentKsiegNumeracja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DeN_IdentKsiegNumeracja");
            entity.Property(e => e.DeNIdentKsiegStr)
                .HasMaxLength(50)
                .HasComputedColumnSql("([CDN].[IdentKsiStr]([DeN_IdentKsieg],[DeN_IdentKsiegNumeracja]))", false)
                .HasColumnName("DeN_IdentKsiegStr");
            entity.Property(e => e.DeNKatId).HasColumnName("DeN_KatId");
            entity.Property(e => e.DeNKategoria)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("DeN_Kategoria");
            entity.Property(e => e.DeNKorekta).HasColumnName("DeN_Korekta");
            entity.Property(e => e.DeNKorektaZaplaconych).HasColumnName("DeN_KorektaZaplaconych");
            entity.Property(e => e.DeNKwotaMa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DeN_KwotaMa");
            entity.Property(e => e.DeNKwotaWn)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DeN_KwotaWn");
            entity.Property(e => e.DeNNrDziennika).HasColumnName("DeN_NrDziennika");
            entity.Property(e => e.DeNNrKsiegi).HasColumnName("DeN_NrKsiegi");
            entity.Property(e => e.DeNNumerNr).HasColumnName("DeN_NumerNr");
            entity.Property(e => e.DeNNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([DeN_NumerNr],[DeN_NumerString]))", false)
                .HasColumnName("DeN_NumerPelny");
            entity.Property(e => e.DeNNumerString)
                .HasMaxLength(31)
                .HasColumnName("DeN_NumerString");
            entity.Property(e => e.DeNOobId).HasColumnName("DeN_OObId");
            entity.Property(e => e.DeNOpeModId).HasColumnName("DeN_OpeModID");
            entity.Property(e => e.DeNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DeN_OpeModKod");
            entity.Property(e => e.DeNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DeN_OpeModNazwisko");
            entity.Property(e => e.DeNOpeZalId).HasColumnName("DeN_OpeZalID");
            entity.Property(e => e.DeNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DeN_OpeZalKod");
            entity.Property(e => e.DeNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DeN_OpeZalNazwisko");
            entity.Property(e => e.DeNOpisKorekta)
                .HasMaxLength(254)
                .HasColumnName("DeN_OpisKorekta");
            entity.Property(e => e.DeNOrgId).HasColumnName("DeN_OrgID");
            entity.Property(e => e.DeNPodmiotId).HasColumnName("DeN_PodmiotId");
            entity.Property(e => e.DeNPodmiotTyp).HasColumnName("DeN_PodmiotTyp");
            entity.Property(e => e.DeNStaModId).HasColumnName("DeN_StaModId");
            entity.Property(e => e.DeNStaZalId).HasColumnName("DeN_StaZalId");
            entity.Property(e => e.DeNStorno).HasColumnName("DeN_Storno");
            entity.Property(e => e.DeNTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DeN_TS_Export");
            entity.Property(e => e.DeNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DeN_TS_Mod");
            entity.Property(e => e.DeNTsModB)
                .HasColumnType("datetime")
                .HasColumnName("DeN_TS_ModB");
            entity.Property(e => e.DeNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DeN_TS_Zal");
            entity.Property(e => e.DeNTyp).HasColumnName("DeN_Typ");
            entity.Property(e => e.DeNTypRozliczenia).HasColumnName("DeN_TypRozliczenia");
            entity.Property(e => e.DeNWzorzecId).HasColumnName("DeN_WzorzecId");
            entity.Property(e => e.DeNWzorzecTyp).HasColumnName("DeN_WzorzecTyp");
            entity.Property(e => e.DeNZrodlo).HasColumnName("DeN_Zrodlo");

            entity.HasOne(d => d.DeNKat).WithMany(p => p.DekretyNags)
                .HasForeignKey(d => d.DeNKatId)
                .HasConstraintName("FK_DeNKategoria");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.DekretyNags)
                .HasForeignKey(d => new { d.DeNPodmiotId, d.DeNPodmiotTyp })
                .HasConstraintName("FK_DeNPodmiot");
        });

        modelBuilder.Entity<DetalAtrybuty>(entity =>
        {
            entity.HasKey(e => e.DatrDatrId)
                .HasName("DAtr_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalAtrybuty", "CDN");

            entity.Property(e => e.DatrDatrId).HasColumnName("DAtr_DAtrId");
            entity.Property(e => e.DatrClassId).HasColumnName("DAtr_classId");
            entity.Property(e => e.DatrDsatrId).HasColumnName("DAtr_DSAtrId");
            entity.Property(e => e.DatrFormat)
                .HasMaxLength(10)
                .HasColumnName("DAtr_format");
            entity.Property(e => e.DatrObjectId).HasColumnName("DAtr_objectId");
            entity.Property(e => e.DatrObjectType).HasColumnName("DAtr_objectType");
            entity.Property(e => e.DatrOptimaId).HasColumnName("DAtr_OptimaId");
            entity.Property(e => e.DatrStanDetalId).HasColumnName("DAtr_StanDetalID");
            entity.Property(e => e.DatrValue).HasColumnName("DAtr_value");
            entity.Property(e => e.DatrValueId).HasColumnName("DAtr_valueId");
            entity.Property(e => e.DatrValueType).HasColumnName("DAtr_valueType");
        });

        modelBuilder.Entity<DetalCeny>(entity =>
        {
            entity.HasKey(e => e.DdfCDdfCid)
                .HasName("DDfC_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalCeny", "CDN");

            entity.HasIndex(e => new { e.DdfCDstaId, e.DdfCDfCid }, "DDfCStanowiskoDetal")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DdfCDdfCid).HasColumnName("DDfC_DDfCId");
            entity.Property(e => e.DdfCDfCid).HasColumnName("DDfC_DfCId");
            entity.Property(e => e.DdfCDstaId).HasColumnName("DDfC_DStaId");

            entity.HasOne(d => d.DdfCDsta).WithMany(p => p.DetalCenies)
                .HasForeignKey(d => d.DdfCDstaId)
                .HasConstraintName("FK_DDfCStanowiskoDetal");
        });

        modelBuilder.Entity<DetalFormyPlatnosci>(entity =>
        {
            entity.HasKey(e => e.DfplDfplId)
                .HasName("DFPl_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalFormyPlatnosci", "CDN");

            entity.HasIndex(e => new { e.DfplDstaId, e.DfplFplId }, "DFplStanowiskoDetal")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DfplDfplId).HasColumnName("DFPl_DFPlId");
            entity.Property(e => e.DfplDomyslna).HasColumnName("DFPl_Domyslna");
            entity.Property(e => e.DfplDstaId).HasColumnName("DFPl_DStaId");
            entity.Property(e => e.DfplFplId).HasColumnName("DFPl_FPlId");
            entity.Property(e => e.DfplNazwa)
                .HasMaxLength(20)
                .HasColumnName("DFPl_Nazwa");
            entity.Property(e => e.DfplNazwaDetal)
                .HasMaxLength(20)
                .HasColumnName("DFPl_NazwaDetal");
        });

        modelBuilder.Entity<DetalKntOsoby>(entity =>
        {
            entity.HasKey(e => e.DknODknOid)
                .HasName("DKnO_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalKntOsoby", "CDN");

            entity.Property(e => e.DknODknOid).HasColumnName("DKnO_DKnOId");
            entity.Property(e => e.DknODsknOid).HasColumnName("DKnO_DSKnOId");
            entity.Property(e => e.DknODskntId).HasColumnName("DKnO_DSKntId");
            entity.Property(e => e.DknOEmail)
                .HasMaxLength(60)
                .HasColumnName("DKnO_Email");
            entity.Property(e => e.DknOGsm)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DKnO_GSM");
            entity.Property(e => e.DknOInformacje).HasColumnName("DKnO_Informacje");
            entity.Property(e => e.DknONazwisko)
                .HasMaxLength(40)
                .HasColumnName("DKnO_Nazwisko");
            entity.Property(e => e.DknOOptimaId).HasColumnName("DKnO_OptimaId");
            entity.Property(e => e.DknOStanDetalId).HasColumnName("DKnO_StanDetalID");
            entity.Property(e => e.DknOTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DKnO_Telefon");
        });

        modelBuilder.Entity<DetalKontrahenci>(entity =>
        {
            entity.HasKey(e => e.DkntDkntId)
                .HasName("DKnt_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalKontrahenci", "CDN");

            entity.HasIndex(e => new { e.DkntOptimaId, e.DkntDskntId, e.DkntStanDetalId }, "DKntDetal")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DkntDkntId).HasColumnName("DKnt_DKntId");
            entity.Property(e => e.DkntAdres2)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Adres2");
            entity.Property(e => e.DkntAdresId).HasColumnName("DKnt_AdresId");
            entity.Property(e => e.DkntAdresId2).HasColumnName("DKnt_AdresId2");
            entity.Property(e => e.DkntDskntId).HasColumnName("DKnt_DSKntId");
            entity.Property(e => e.DkntEMail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DKnt_eMail");
            entity.Property(e => e.DkntEan)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("DKnt_EAN");
            entity.Property(e => e.DkntFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DKnt_Fax");
            entity.Property(e => e.DkntFinalny).HasColumnName("DKnt_Finalny");
            entity.Property(e => e.DkntGmina)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Gmina");
            entity.Property(e => e.DkntKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DKnt_Kod");
            entity.Property(e => e.DkntKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DKnt_KodPocztowy");
            entity.Property(e => e.DkntKraj)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Kraj");
            entity.Property(e => e.DkntMiasto)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Miasto");
            entity.Property(e => e.DkntNazwa1)
                .HasMaxLength(50)
                .HasColumnName("DKnt_Nazwa1");
            entity.Property(e => e.DkntNazwa2)
                .HasMaxLength(50)
                .HasColumnName("DKnt_Nazwa2");
            entity.Property(e => e.DkntNazwa3)
                .HasMaxLength(250)
                .HasColumnName("DKnt_Nazwa3");
            entity.Property(e => e.DkntNip)
                .HasMaxLength(20)
                .HasColumnName("DKnt_Nip");
            entity.Property(e => e.DkntNipE)
                .HasMaxLength(20)
                .HasColumnName("DKnt_NipE");
            entity.Property(e => e.DkntNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DKnt_NipKraj");
            entity.Property(e => e.DkntNrDomu)
                .HasMaxLength(10)
                .HasColumnName("DKnt_NrDomu");
            entity.Property(e => e.DkntNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("DKnt_NrLokalu");
            entity.Property(e => e.DkntOpeId).HasColumnName("DKnt_OpeID");
            entity.Property(e => e.DkntOpis)
                .HasMaxLength(254)
                .HasColumnName("DKnt_Opis");
            entity.Property(e => e.DkntOptimaId).HasColumnName("DKnt_OptimaId");
            entity.Property(e => e.DkntOsobaOdbierajaca)
                .HasMaxLength(40)
                .HasColumnName("DKnt_OsobaOdbierajaca");
            entity.Property(e => e.DkntPesel)
                .HasMaxLength(11)
                .HasColumnName("DKnt_Pesel");
            entity.Property(e => e.DkntPoczta)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Poczta");
            entity.Property(e => e.DkntPowiat)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Powiat");
            entity.Property(e => e.DkntRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DKnt_Regon");
            entity.Property(e => e.DkntRodzajDostawca).HasColumnName("DKnt_Rodzaj_Dostawca");
            entity.Property(e => e.DkntRodzajKonkurencja).HasColumnName("DKnt_Rodzaj_Konkurencja");
            entity.Property(e => e.DkntRodzajOdbiorca)
                .HasDefaultValue((byte)1)
                .HasColumnName("DKnt_Rodzaj_Odbiorca");
            entity.Property(e => e.DkntRodzajPartner).HasColumnName("DKnt_Rodzaj_Partner");
            entity.Property(e => e.DkntRodzajPotencjalny).HasColumnName("DKnt_Rodzaj_Potencjalny");
            entity.Property(e => e.DkntStanDetalId).HasColumnName("DKnt_StanDetalID");
            entity.Property(e => e.DkntStanSynchronizacji).HasColumnName("DKnt_StanSynchronizacji");
            entity.Property(e => e.DkntTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DKnt_Telefon");
            entity.Property(e => e.DkntTelefon1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DKnt_Telefon1");
            entity.Property(e => e.DkntTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DKnt_TS_Mod");
            entity.Property(e => e.DkntUlica)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Ulica");
            entity.Property(e => e.DkntUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DKnt_URL");
            entity.Property(e => e.DkntWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("DKnt_Wojewodztwo");
        });

        modelBuilder.Entity<DetalOperator>(entity =>
        {
            entity.HasKey(e => e.DopeDopeId)
                .HasName("DOpe_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalOperator", "CDN");

            entity.HasIndex(e => new { e.DopeDstaId, e.DopeOpeId }, "DOpeStanowiskoDetal")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DopeDopeId).HasColumnName("DOpe_DOpeId");
            entity.Property(e => e.DopeDstaId).HasColumnName("DOpe_DStaId");
            entity.Property(e => e.DopeOpeId).HasColumnName("DOpe_OpeId");

            entity.HasOne(d => d.DopeDsta).WithMany(p => p.DetalOperators)
                .HasForeignKey(d => d.DopeDstaId)
                .HasConstraintName("FK_DOpeStanowiskoDetal");
        });

        modelBuilder.Entity<DetalPlatnosciDokumentu>(entity =>
        {
            entity.HasKey(e => e.DplDDplDid)
                .HasName("DPlD_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalPlatnosciDokumentu", "CDN");

            entity.HasIndex(e => new { e.DplDDstrNid, e.DplDDszkbid, e.DplDStanDetalId, e.DplDDsplDid }, "DPlDTraNagDS")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DplDDszkbid, e.DplDStanDetalId }, "DetalPlatnosciDokumentuDSZKBID").HasFillFactor(100);

            entity.Property(e => e.DplDDplDid).HasColumnName("DPlD_DPlDId");
            entity.Property(e => e.DplDDataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("DPlD_DataPlatnosci");
            entity.Property(e => e.DplDDsfplId).HasColumnName("DPlD_DSFPlId");
            entity.Property(e => e.DplDDsplDid).HasColumnName("DPlD_DSPlDId");
            entity.Property(e => e.DplDDstrNid).HasColumnName("DPlD_DSTrNId");
            entity.Property(e => e.DplDDszkbid).HasColumnName("DPlD_DSZKBID");
            entity.Property(e => e.DplDGotowka).HasColumnName("DPlD_Gotowka");
            entity.Property(e => e.DplDKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DPlD_Kwota");
            entity.Property(e => e.DplDKwotaZaplacona)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DPlD_KwotaZaplacona");
            entity.Property(e => e.DplDStanDetalId).HasColumnName("DPlD_StanDetalID");
            entity.Property(e => e.DplDStanSynchronizacji).HasColumnName("DPlD_StanSynchronizacji");
            entity.Property(e => e.DplDTermin)
                .HasColumnType("datetime")
                .HasColumnName("DPlD_Termin");
            entity.Property(e => e.DplDTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DPlD_TS_Export");

            entity.HasOne(d => d.DetalTraNag).WithMany(p => p.DetalPlatnosciDokumentus)
                .HasForeignKey(d => new { d.DplDDstrNid, d.DplDStanDetalId })
                .HasConstraintName("FK_DPlDTraNagDS");
        });

        modelBuilder.Entity<DetalRaporty>(entity =>
        {
            entity.HasKey(e => e.DrapDrapId)
                .HasName("DRap_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalRaporty", "CDN");

            entity.HasIndex(e => new { e.DrapDstaId, e.DrapDsrapId }, "DFplStanowiskoDetal")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DrapDrapId).HasColumnName("DRap_DRapId");
            entity.Property(e => e.DrapDsrapId).HasColumnName("DRap_DSRapId");
            entity.Property(e => e.DrapDstaId).HasColumnName("DRap_DStaId");
            entity.Property(e => e.DrapTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DRap_TS_Export");
        });

        modelBuilder.Entity<DetalRoliczeniaZaleglosci>(entity =>
        {
            entity.HasKey(e => e.DrzDrzid)
                .HasName("DRZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalRoliczeniaZaleglosci", "CDN");

            entity.Property(e => e.DrzDrzid).HasColumnName("DRZ_DRZId");
            entity.Property(e => e.DrzBzdId).HasColumnName("DRZ_BZdId");
            entity.Property(e => e.DrzDsdrzid).HasColumnName("DRZ_DSDRZId");
            entity.Property(e => e.DrzDszkbid).HasColumnName("DRZ_DSZKBID");
            entity.Property(e => e.DrzKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DRZ_Kwota");
            entity.Property(e => e.DrzStanDetalId).HasColumnName("DRZ_StanDetalID");
            entity.Property(e => e.DrzStanSynchronizacji).HasColumnName("DRZ_StanSynchronizacji");
            entity.Property(e => e.DrzTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DRZ_TS_Export");
        });

        modelBuilder.Entity<DetalStanFormyPlatnosci>(entity =>
        {
            entity.HasKey(e => e.DsfplDsfplId)
                .HasName("DSFPl_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanFormyPlatnosci", "CDN");

            entity.HasIndex(e => new { e.DsfplOptimaId, e.DsfplStanDetalId }, "DSFPlIdDetalStanOptimaId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DsfplDsfplId).HasColumnName("DSFPl_DSFPlId");
            entity.Property(e => e.DsfplBnkNazwa)
                .HasMaxLength(50)
                .HasColumnName("DSFPl_BnkNazwa");
            entity.Property(e => e.DsfplDfnr).HasColumnName("DSFPl_DFNr");
            entity.Property(e => e.DsfplDomyslna).HasColumnName("DSFPl_Domyslna");
            entity.Property(e => e.DsfplGotowka).HasColumnName("DSFPl_Gotowka");
            entity.Property(e => e.DsfplNazwa)
                .HasMaxLength(20)
                .HasColumnName("DSFPl_Nazwa");
            entity.Property(e => e.DsfplNieaktywny).HasColumnName("DSFPl_Nieaktywny");
            entity.Property(e => e.DsfplOptimaId).HasColumnName("DSFPl_OptimaId");
            entity.Property(e => e.DsfplRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("DSFPl_RachunekNr");
            entity.Property(e => e.DsfplStanDetalId).HasColumnName("DSFPl_StanDetalID");
            entity.Property(e => e.DsfplTermin).HasColumnName("DSFPl_Termin");
            entity.Property(e => e.DsfplTerminalPlatniczy).HasColumnName("DSFPl_TerminalPlatniczy");
            entity.Property(e => e.DsfplTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DSFPl_TS_Mod");
            entity.Property(e => e.DsfplTypGotowka).HasColumnName("DSFPl_TypGotowka");
        });

        modelBuilder.Entity<DetalStanKonfiguracja>(entity =>
        {
            entity.HasKey(e => e.DsknfDsknfId)
                .HasName("DSKnf_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanKonfiguracja", "CDN");

            entity.Property(e => e.DsknfDsknfId).HasColumnName("DSKnf_DSKnfId");
            entity.Property(e => e.DsknfNazwaStanowiska)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NazwaStanowiska");
            entity.Property(e => e.DsknfNumeracjaFs)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NumeracjaFS");
            entity.Property(e => e.DsknfNumeracjaFskor)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NumeracjaFSKor");
            entity.Property(e => e.DsknfNumeracjaKp)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NumeracjaKP");
            entity.Property(e => e.DsknfNumeracjaKw)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NumeracjaKW");
            entity.Property(e => e.DsknfNumeracjaPa)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NumeracjaPA");
            entity.Property(e => e.DsknfNumeracjaPakor)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NumeracjaPAKor");
            entity.Property(e => e.DsknfNumeracjaPka)
                .HasMaxLength(50)
                .HasColumnName("DSKnf_NumeracjaPKA");
            entity.Property(e => e.DsknfOddzial).HasColumnName("DSKnf_Oddzial");
            entity.Property(e => e.DsknfStanDetalId).HasColumnName("DSKnf_StanDetalID");
            entity.Property(e => e.DsknfTsSynchro)
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_Synchro");
            entity.Property(e => e.DsknfTsSynchroImportKnt)
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_SynchroImportKnt");
            entity.Property(e => e.DsknfTsSynchroKnt)
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_SynchroKnt");
            entity.Property(e => e.DsknfTsSynchroOpak)
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_SynchroOpak");
            entity.Property(e => e.DsknfTsSynchroOptima)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_SynchroOptima");
            entity.Property(e => e.DsknfTsSynchroTraNag)
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_SynchroTraNag");
            entity.Property(e => e.DsknfTsSynchroTwr)
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_SynchroTwr");
            entity.Property(e => e.DsknfTsSynchroZapisKb)
                .HasColumnType("datetime")
                .HasColumnName("DSKnf_TS_SynchroZapisKB");
        });

        modelBuilder.Entity<DetalStanKontrahenci>(entity =>
        {
            entity.HasKey(e => e.DskntDskntId)
                .HasName("DSKnt_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanKontrahenci", "CDN", tb => tb.HasTrigger("DSKontrahenci_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.DskntOptimaId, e.DskntDskntId }, "DSKntDetalOptimaId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DskntDskntId).HasColumnName("DSKnt_DSKntId");
            entity.Property(e => e.DskntAdres2)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Adres2");
            entity.Property(e => e.DskntEan)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("DSKnt_EAN");
            entity.Property(e => e.DskntGmina)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Gmina");
            entity.Property(e => e.DskntKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DSKnt_Kod");
            entity.Property(e => e.DskntKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DSKnt_KodPocztowy");
            entity.Property(e => e.DskntKraj)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Kraj");
            entity.Property(e => e.DskntMiasto)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Miasto");
            entity.Property(e => e.DskntNazwa1)
                .HasMaxLength(50)
                .HasColumnName("DSKnt_Nazwa1");
            entity.Property(e => e.DskntNazwa2)
                .HasMaxLength(50)
                .HasColumnName("DSKnt_Nazwa2");
            entity.Property(e => e.DskntNazwa3)
                .HasMaxLength(250)
                .HasColumnName("DSKnt_Nazwa3");
            entity.Property(e => e.DskntNieAktywny).HasColumnName("DSKnt_NieAktywny");
            entity.Property(e => e.DskntNip)
                .HasMaxLength(20)
                .HasColumnName("DSKnt_Nip");
            entity.Property(e => e.DskntNipE)
                .HasMaxLength(20)
                .HasColumnName("DSKnt_NipE");
            entity.Property(e => e.DskntNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DSKnt_NipKraj");
            entity.Property(e => e.DskntNrDomu)
                .HasMaxLength(10)
                .HasColumnName("DSKnt_NrDomu");
            entity.Property(e => e.DskntNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("DSKnt_NrLokalu");
            entity.Property(e => e.DskntOpeId).HasColumnName("DSKnt_OpeID");
            entity.Property(e => e.DskntOpis)
                .HasMaxLength(254)
                .HasColumnName("DSKnt_Opis");
            entity.Property(e => e.DskntOptimaId).HasColumnName("DSKnt_OptimaId");
            entity.Property(e => e.DskntOsobaOdbierajaca)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_OsobaOdbierajaca");
            entity.Property(e => e.DskntPesel)
                .HasMaxLength(11)
                .HasColumnName("DSKnt_Pesel");
            entity.Property(e => e.DskntPoczta)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Poczta");
            entity.Property(e => e.DskntPowiat)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Powiat");
            entity.Property(e => e.DskntRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DSKnt_Regon");
            entity.Property(e => e.DskntStanSynchronizacji).HasColumnName("DSKnt_StanSynchronizacji");
            entity.Property(e => e.DskntTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DSKnt_Telefon");
            entity.Property(e => e.DskntTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DSKnt_TS_Mod");
            entity.Property(e => e.DskntUlica)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Ulica");
            entity.Property(e => e.DskntWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("DSKnt_Wojewodztwo");
        });

        modelBuilder.Entity<DetalStanOpakElem>(entity =>
        {
            entity.HasKey(e => e.DsoeDsoeid)
                .HasName("DSOE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanOpakElem", "CDN");

            entity.HasIndex(e => new { e.DsoeDsonid, e.DsoeDsoeid }, "DSOENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DsoeDstwrId, e.DsoeDsoeid }, "DSOETowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DsoeDsoeid).HasColumnName("DSOE_DSOEId");
            entity.Property(e => e.DsoeDsonid).HasColumnName("DSOE_DSONId");
            entity.Property(e => e.DsoeDstwrId).HasColumnName("DSOE_DSTwrId");
            entity.Property(e => e.DsoeIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DSOE_Ilosc");
            entity.Property(e => e.DsoeLp).HasColumnName("DSOE_Lp");

            entity.HasOne(d => d.DsoeDson).WithMany(p => p.DetalStanOpakElems)
                .HasForeignKey(d => d.DsoeDsonid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DSOENaglowek");
        });

        modelBuilder.Entity<DetalStanOpakNag>(entity =>
        {
            entity.HasKey(e => e.DsonDsonid)
                .HasName("DSON_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanOpakNag", "CDN");

            entity.HasIndex(e => new { e.DsonKod, e.DsonStanDetalId }, "DSONKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DsonDsonid).HasColumnName("DSON_DSONId");
            entity.Property(e => e.DsonKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DSON_Kod");
            entity.Property(e => e.DsonNazwa)
                .HasMaxLength(50)
                .HasColumnName("DSON_Nazwa");
            entity.Property(e => e.DsonNieaktywny).HasColumnName("DSON_Nieaktywny");
            entity.Property(e => e.DsonOptimaId).HasColumnName("DSON_OptimaId");
            entity.Property(e => e.DsonStanDetalId).HasColumnName("DSON_StanDetalID");
            entity.Property(e => e.DsonTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DSON_TS_Mod");
        });

        modelBuilder.Entity<DetalStanOperatorzy>(entity =>
        {
            entity.HasKey(e => e.DsopeDsopeId)
                .HasName("DSOpe_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanOperatorzy", "CDN");

            entity.HasIndex(e => e.DsopeOptimaId, "DelalStanDSOpe_OptimaID").HasFillFactor(100);

            entity.Property(e => e.DsopeDsopeId).HasColumnName("DSOpe_DSOpeID");
            entity.Property(e => e.DsopeDataLogowania)
                .HasColumnType("datetime")
                .HasColumnName("DSOpe_DataLogowania");
            entity.Property(e => e.DsopeEdycjaParagonow).HasColumnName("DSOpe_EdycjaParagonow");
            entity.Property(e => e.DsopeFakturaDoParagonu).HasColumnName("DSOpe_FakturaDoParagonu");
            entity.Property(e => e.DsopeHaslo)
                .HasMaxLength(30)
                .HasColumnName("DSOpe_Haslo");
            entity.Property(e => e.DsopeKarta)
                .HasMaxLength(254)
                .HasColumnName("DSOpe_Karta");
            entity.Property(e => e.DsopeKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DSOpe_Kod");
            entity.Property(e => e.DsopeKodDlaDf)
                .HasMaxLength(10)
                .HasColumnName("DSOpe_KodDlaDF");
            entity.Property(e => e.DsopeKodFunkcji)
                .HasMaxLength(20)
                .HasColumnName("DSOpe_KodFunkcji");
            entity.Property(e => e.DsopeKonfiguracjaInterfejsu).HasColumnName("DSOpe_KonfiguracjaInterfejsu");
            entity.Property(e => e.DsopeKonfiguracjaProgramu).HasColumnName("DSOpe_KonfiguracjaProgramu");
            entity.Property(e => e.DsopeKontoDomenowe)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DSOpe_KontoDomenowe");
            entity.Property(e => e.DsopeKontoDomenoweSid)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DSOpe_KontoDomenoweSID");
            entity.Property(e => e.DsopeMaxRabat)
                .HasDefaultValueSql("((99.99))")
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSOpe_MaxRabat");
            entity.Property(e => e.DsopeNazwisko)
                .HasMaxLength(50)
                .HasColumnName("DSOpe_Nazwisko");
            entity.Property(e => e.DsopeNieokreslonyPlatOdroczona).HasColumnName("DSOpe_NieokreslonyPlatOdroczona");
            entity.Property(e => e.DsopeNtkonto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DSOpe_NTKonto");
            entity.Property(e => e.DsopeNtlogin).HasColumnName("DSOpe_NTLogin");
            entity.Property(e => e.DsopeNtsid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DSOpe_NTSid");
            entity.Property(e => e.DsopeOpeNieAktywny).HasColumnName("DSOpe_OpeNieAktywny");
            entity.Property(e => e.DsopeOptimaId).HasColumnName("DSOpe_OptimaId");
            entity.Property(e => e.DsopeOtwarcieZmiany).HasColumnName("DSOpe_OtwarcieZmiany");
            entity.Property(e => e.DsopePlatnoscInnymiFormami).HasColumnName("DSOpe_PlatnoscInnymiFormami");
            entity.Property(e => e.DsopePodgladDokWlasnych).HasColumnName("DSOpe_PodgladDokWlasnych");
            entity.Property(e => e.DsopePodgladDokWszystkich).HasColumnName("DSOpe_PodgladDokWszystkich");
            entity.Property(e => e.DsopePodgladStanuKasy).HasColumnName("DSOpe_PodgladStanuKasy");
            entity.Property(e => e.DsopePrawoDoRabatowDokument).HasColumnName("DSOpe_PrawoDoRabatowDokument");
            entity.Property(e => e.DsopePrawoDoRabatowPozycja).HasColumnName("DSOpe_PrawoDoRabatowPozycja");
            entity.Property(e => e.DsopePrzekazanieParagonow).HasColumnName("DSOpe_PrzekazanieParagonow");
            entity.Property(e => e.DsopeRaportFiskalny).HasColumnName("DSOpe_RaportFiskalny");
            entity.Property(e => e.DsopeRaportOkresowy).HasColumnName("DSOpe_RaportOkresowy");
            entity.Property(e => e.DsopeReczneOtwarcieSzuflady).HasColumnName("DSOpe_ReczneOtwarcieSzuflady");
            entity.Property(e => e.DsopeStanDetalId).HasColumnName("DSOpe_StanDetalID");
            entity.Property(e => e.DsopeStanWszystkieMagazyny).HasColumnName("DSOpe_StanWszystkieMagazyny");
            entity.Property(e => e.DsopeStornoCalegoParagonu).HasColumnName("DSOpe_StornoCalegoParagonu");
            entity.Property(e => e.DsopeStornoOstatniejPozycji).HasColumnName("DSOpe_StornoOstatniejPozycji");
            entity.Property(e => e.DsopeTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DSOpe_TS_Mod");
            entity.Property(e => e.DsopeWplataDoKasy).HasColumnName("DSOpe_WplataDoKasy");
            entity.Property(e => e.DsopeWyplataZkasy).HasColumnName("DSOpe_WyplataZKasy");
            entity.Property(e => e.DsopeZamkniecieZmiany).HasColumnName("DSOpe_ZamkniecieZmiany");
            entity.Property(e => e.DsopeZmianaCenySprzedazy).HasColumnName("DSOpe_ZmianaCenySprzedazy");
            entity.Property(e => e.DsopeZmianaJm).HasColumnName("DSOpe_ZmianaJM");
            entity.Property(e => e.DsopeZwrotTowaru).HasColumnName("DSOpe_ZwrotTowaru");
        });

        modelBuilder.Entity<DetalStanPlatnosciDokumentu>(entity =>
        {
            entity.HasKey(e => e.DsplDDsplDid)
                .HasName("DSPlD_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanPlatnosciDokumentu", "CDN");

            entity.HasIndex(e => new { e.DsplDDstrNid, e.DsplDDsplDid }, "DSTraNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DsplDDsplDid).HasColumnName("DSPlD_DSPlDId");
            entity.Property(e => e.DsplDDataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("DSPlD_DataPlatnosci");
            entity.Property(e => e.DsplDDsfplId).HasColumnName("DSPlD_DSFPlId");
            entity.Property(e => e.DsplDDstrNid).HasColumnName("DSPlD_DSTrNId");
            entity.Property(e => e.DsplDKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSPlD_Kwota");
            entity.Property(e => e.DsplDKwotaZaplacona)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSPlD_KwotaZaplacona");
            entity.Property(e => e.DsplDTermin)
                .HasColumnType("datetime")
                .HasColumnName("DSPlD_Termin");

            entity.HasOne(d => d.DsplDDstrN).WithMany(p => p.DetalStanPlatnosciDokumentus)
                .HasForeignKey(d => d.DsplDDstrNid)
                .HasConstraintName("FK_DSTraNag");
        });

        modelBuilder.Entity<DetalStanStawkiVat>(entity =>
        {
            entity.HasKey(e => e.DssvatDssvatid)
                .HasName("DSSVAT_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanStawkiVAT", "CDN");

            entity.Property(e => e.DssvatDssvatid).HasColumnName("DSSVAT_DSSVATId");
            entity.Property(e => e.DssvatDfsymbol)
                .HasMaxLength(40)
                .HasColumnName("DSSVAT_DFSymbol");
            entity.Property(e => e.DssvatFlaga).HasColumnName("DSSVAT_Flaga");
            entity.Property(e => e.DssvatStanDetalId).HasColumnName("DSSVAT_StanDetalID");
            entity.Property(e => e.DssvatStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DSSVAT_Stawka");
        });

        modelBuilder.Entity<DetalStanTowary>(entity =>
        {
            entity.HasKey(e => e.DstwrDstwrId)
                .HasName("DSTwr_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanTowary", "CDN");

            entity.HasIndex(e => new { e.DstwrOptimaId, e.DstwrStanDetalId }, "DelalStanDSTwr_OptimaID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DstwrSonid, "TwrDSON").HasFillFactor(100);

            entity.Property(e => e.DstwrDstwrId).HasColumnName("DSTwr_DSTwrId");
            entity.Property(e => e.DstwrCena)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSTwr_Cena");
            entity.Property(e => e.DstwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DSTwr_EAN");
            entity.Property(e => e.DstwrFlaga).HasColumnName("DSTwr_Flaga");
            entity.Property(e => e.DstwrJm)
                .HasMaxLength(20)
                .HasColumnName("DSTwr_JM");
            entity.Property(e => e.DstwrJmcalkowite).HasColumnName("DSTwr_JMCalkowite");
            entity.Property(e => e.DstwrKaucja).HasColumnName("DSTwr_Kaucja");
            entity.Property(e => e.DstwrKntId).HasColumnName("DSTwr_KntId");
            entity.Property(e => e.DstwrKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DSTwr_Kod");
            entity.Property(e => e.DstwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("DSTwr_Nazwa");
            entity.Property(e => e.DstwrNieAktywny).HasColumnName("DSTwr_NieAktywny");
            entity.Property(e => e.DstwrNumerKat)
                .HasMaxLength(40)
                .HasColumnName("DSTwr_NumerKat");
            entity.Property(e => e.DstwrOpis)
                .HasMaxLength(254)
                .HasColumnName("DSTwr_Opis");
            entity.Property(e => e.DstwrOptimaId).HasColumnName("DSTwr_OptimaId");
            entity.Property(e => e.DstwrSonid).HasColumnName("DSTwr_SONId");
            entity.Property(e => e.DstwrStanDetalId).HasColumnName("DSTwr_StanDetalID");
            entity.Property(e => e.DstwrStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DSTwr_Stawka");
            entity.Property(e => e.DstwrSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DSTwr_SWW");
            entity.Property(e => e.DstwrTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DSTwr_TS_Mod");
            entity.Property(e => e.DstwrTyp).HasColumnName("DSTwr_Typ");
            entity.Property(e => e.DstwrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DSTwr_Waluta");
        });

        modelBuilder.Entity<DetalStanTraElem>(entity =>
        {
            entity.HasKey(e => e.DstrEDstrEid)
                .HasName("DSTrE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanTraElem", "CDN");

            entity.HasIndex(e => new { e.DstrETwrId, e.DstrEDstrEid }, "DSTrETowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DstrEDstrNid, e.DstrELp, e.DstrEDstrEid }, "DSTrETraNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DstrEDstrNid, e.DstrETwrKod }, "DSTrETwrKod").HasFillFactor(100);

            entity.HasIndex(e => new { e.DstrEStornoId, e.DstrEDstrEid }, "DSTrEZwrot")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DstrEDstrEid).HasColumnName("DSTrE_DSTrEID");
            entity.Property(e => e.DstrECena)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSTrE_Cena");
            entity.Property(e => e.DstrECenaPoRabacie)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSTrE_CenaPoRabacie");
            entity.Property(e => e.DstrEDstrNid).HasColumnName("DSTrE_DSTrNId");
            entity.Property(e => e.DstrEFlaga).HasColumnName("DSTrE_Flaga");
            entity.Property(e => e.DstrEIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DSTrE_Ilosc");
            entity.Property(e => e.DstrEJm)
                .HasMaxLength(20)
                .HasColumnName("DSTrE_Jm");
            entity.Property(e => e.DstrEJmCalkowite).HasColumnName("DSTrE_JmCalkowite");
            entity.Property(e => e.DstrEJmprzelicznikL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSTrE_JMPrzelicznikL");
            entity.Property(e => e.DstrEJmprzelicznikM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("DSTrE_JMPrzelicznikM");
            entity.Property(e => e.DstrEKaucja).HasColumnName("DSTrE_Kaucja");
            entity.Property(e => e.DstrELp).HasColumnName("DSTrE_Lp");
            entity.Property(e => e.DstrERabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DSTrE_Rabat");
            entity.Property(e => e.DstrEStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DSTrE_Stawka");
            entity.Property(e => e.DstrEStornoId).HasColumnName("DSTrE_StornoId");
            entity.Property(e => e.DstrETwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DSTrE_TwrEAN");
            entity.Property(e => e.DstrETwrId).HasColumnName("DSTrE_TwrId");
            entity.Property(e => e.DstrETwrKod)
                .HasMaxLength(50)
                .HasColumnName("DSTrE_TwrKod");
            entity.Property(e => e.DstrETwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("DSTrE_TwrNazwa");
            entity.Property(e => e.DstrEWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DSTrE_Waluta");
            entity.Property(e => e.DstrEWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSTrE_WartoscBrutto");
            entity.Property(e => e.DstrEZwrId).HasColumnName("DSTrE_ZwrId");

            entity.HasOne(d => d.DstrEDstrN).WithMany(p => p.DetalStanTraElems)
                .HasForeignKey(d => d.DstrEDstrNid)
                .HasConstraintName("FK_DSTrETraNag");

            entity.HasOne(d => d.DstrETwr).WithMany(p => p.DetalStanTraElems)
                .HasForeignKey(d => d.DstrETwrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DSTrETowar");
        });

        modelBuilder.Entity<DetalStanTraNag>(entity =>
        {
            entity.HasKey(e => e.DstrNDstrNid)
                .HasName("DSTrN_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanTraNag", "CDN");

            entity.HasIndex(e => new { e.DstrNOdbId, e.DstrNDstrNid }, "DSTrNIDOdbiorca")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DstrNOpeId, e.DstrNDstrNid }, "DSTrNIDOperator")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DstrNPodId, e.DstrNDstrNid }, "DSTrNIDPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DstrNNumerString, e.DstrNNumerNr, e.DstrNAnulowany }, "DSTrNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DstrNTypDokumentu, e.DstrNBufor, e.DstrNZmianaId }, "DetalStanTraNagTypDokumentuBufor").HasFillFactor(100);

            entity.Property(e => e.DstrNDstrNid).HasColumnName("DSTrN_DSTrNID");
            entity.Property(e => e.DstrNAnulowany).HasColumnName("DSTrN_Anulowany");
            entity.Property(e => e.DstrNBufor).HasColumnName("DSTrN_Bufor");
            entity.Property(e => e.DstrNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DSTrN_DataDok");
            entity.Property(e => e.DstrNFaId).HasColumnName("DSTrN_FaId");
            entity.Property(e => e.DstrNFiskalna).HasColumnName("DSTrN_Fiskalna");
            entity.Property(e => e.DstrNFiskalnaErr).HasColumnName("DSTrN_FiskalnaErr");
            entity.Property(e => e.DstrNKorekta).HasColumnName("DSTrN_Korekta");
            entity.Property(e => e.DstrNNumerNr).HasColumnName("DSTrN_NumerNr");
            entity.Property(e => e.DstrNNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[DETALNUMERPELNY]([DSTRN_NUMERNR],[DSTRN_NUMERSTRING]))", false)
                .HasColumnName("DSTrN_NumerPelny");
            entity.Property(e => e.DstrNNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DSTrN_NumerString");
            entity.Property(e => e.DstrNOdbId).HasColumnName("DSTrN_OdbID");
            entity.Property(e => e.DstrNOpeId).HasColumnName("DSTrN_OpeID");
            entity.Property(e => e.DstrNOpis)
                .HasMaxLength(1024)
                .HasDefaultValue("")
                .HasColumnName("DSTrN_Opis");
            entity.Property(e => e.DstrNOsobaOdbierajaca)
                .HasMaxLength(40)
                .HasColumnName("DSTrN_OsobaOdbierajaca");
            entity.Property(e => e.DstrNParodzajKor).HasColumnName("DSTrN_PARodzajKor");
            entity.Property(e => e.DstrNPodId).HasColumnName("DSTrN_PodID");
            entity.Property(e => e.DstrNRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DSTrN_Rabat");
            entity.Property(e => e.DstrNRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSTrN_RazemBrutto");
            entity.Property(e => e.DstrNStanDetalId).HasColumnName("DSTrN_StanDetalID");
            entity.Property(e => e.DstrNStanSynchronizacji).HasColumnName("DSTrN_StanSynchronizacji");
            entity.Property(e => e.DstrNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DSTrN_TS_Zal");
            entity.Property(e => e.DstrNTypDokumentu).HasColumnName("DSTrN_TypDokumentu");
            entity.Property(e => e.DstrNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DSTrN_Waluta");
            entity.Property(e => e.DstrNZmianaId).HasColumnName("DSTrN_ZmianaId");
            entity.Property(e => e.DstrNZwrId).HasColumnName("DSTrN_ZwrId");

            entity.HasOne(d => d.DstrNOpe).WithMany(p => p.DetalStanTraNags)
                .HasForeignKey(d => d.DstrNOpeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DSTrNIDOperator");

            entity.HasOne(d => d.DstrNPod).WithMany(p => p.DetalStanTraNags)
                .HasForeignKey(d => d.DstrNPodId)
                .HasConstraintName("FK_DSTrNIDPodmiot");
        });

        modelBuilder.Entity<DetalStanTwrEan>(entity =>
        {
            entity.HasKey(e => e.DstwEDstwEid)
                .HasName("DSTwE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanTwrEan", "CDN");

            entity.HasIndex(e => e.DstwEDstwrId, "IDX_DSTwE_DSTwrId").HasFillFactor(100);

            entity.Property(e => e.DstwEDstwEid).HasColumnName("DSTwE_DSTwEId");
            entity.Property(e => e.DstwEDomyslny).HasColumnName("DSTwE_Domyslny");
            entity.Property(e => e.DstwEDstwrId).HasColumnName("DSTwE_DSTwrId");
            entity.Property(e => e.DstwEEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DSTwE_EAN");
            entity.Property(e => e.DstwEJm)
                .HasMaxLength(20)
                .HasColumnName("DSTwE_JM");
            entity.Property(e => e.DstwEOpis)
                .HasMaxLength(100)
                .HasColumnName("DSTwE_Opis");

            entity.HasOne(d => d.DstwEDstwr).WithMany(p => p.DetalStanTwrEans)
                .HasForeignKey(d => d.DstwEDstwrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DSTwE_DSTwrId");
        });

        modelBuilder.Entity<DetalStanTwrJmz>(entity =>
        {
            entity.HasKey(e => e.DstjzDstjzid)
                .HasName("DSTJZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanTwrJMZ", "CDN");

            entity.HasIndex(e => e.DstjzDstwrId, "IDX_DSTJZ_DSTwrId").HasFillFactor(100);

            entity.Property(e => e.DstjzDstjzid).HasColumnName("DSTJZ_DSTJZId");
            entity.Property(e => e.DstjzDstwrId).HasColumnName("DSTJZ_DSTwrId");
            entity.Property(e => e.DstjzJm)
                .HasMaxLength(20)
                .HasColumnName("DSTJZ_JM");
            entity.Property(e => e.DstjzJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSTJZ_JMPrzelicznikL");
            entity.Property(e => e.DstjzJmprzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("DSTJZ_JMPrzelicznikM");

            entity.HasOne(d => d.DstjzDstwr).WithMany(p => p.DetalStanTwrJmzs)
                .HasForeignKey(d => d.DstjzDstwrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DSTJZ_DSTwrId");
        });

        modelBuilder.Entity<DetalStanZapisyKb>(entity =>
        {
            entity.HasKey(e => e.DszkbDszkbid)
                .HasName("DSZKB_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanZapisyKB", "CDN");

            entity.HasIndex(e => new { e.DszkbDszkbid, e.DszkbOpeId }, "DSZKBIDOperator")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DszkbPodId, e.DszkbDszkbid }, "DSZKBIDPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DszkbDszkbid).HasColumnName("DSZKB_DSZKBID");
            entity.Property(e => e.DszkbBufor).HasColumnName("DSZKB_Bufor");
            entity.Property(e => e.DszkbDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DSZKB_DataDok");
            entity.Property(e => e.DszkbDsfplId).HasColumnName("DSZKB_DSFPlId");
            entity.Property(e => e.DszkbNumerNr).HasColumnName("DSZKB_NumerNr");
            entity.Property(e => e.DszkbNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[DETALNUMERPELNY]([DSZKB_NUMERNR],[DSZKB_NUMERSTRING]))", false)
                .HasColumnName("DSZKB_NumerPelny");
            entity.Property(e => e.DszkbNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DSZKB_NumerString");
            entity.Property(e => e.DszkbOpeId).HasColumnName("DSZKB_OpeID");
            entity.Property(e => e.DszkbOpis)
                .HasMaxLength(254)
                .HasColumnName("DSZKB_Opis");
            entity.Property(e => e.DszkbPodId).HasColumnName("DSZKB_PodID");
            entity.Property(e => e.DszkbRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSZKB_RazemBrutto");
            entity.Property(e => e.DszkbStanDetalId).HasColumnName("DSZKB_StanDetalID");
            entity.Property(e => e.DszkbStanSynchronizacji).HasColumnName("DSZKB_StanSynchronizacji");
            entity.Property(e => e.DszkbTypDokumentu).HasColumnName("DSZKB_TypDokumentu");
            entity.Property(e => e.DszkbZmianaId).HasColumnName("DSZKB_ZmianaId");
        });

        modelBuilder.Entity<DetalStanZmiany>(entity =>
        {
            entity.HasKey(e => e.DszDszid)
                .HasName("DSZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanZmiany", "CDN");

            entity.HasIndex(e => new { e.DszOpeIdOtw, e.DszDszid }, "DSZIDOperatorOtw")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DszOpeIdZamk, e.DszDszid }, "DSZIDOperatorZam")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DszDszid).HasColumnName("DSZ_DSZID");
            entity.Property(e => e.DszBufor).HasColumnName("DSZ_Bufor");
            entity.Property(e => e.DszDataOtw)
                .HasColumnType("datetime")
                .HasColumnName("DSZ_DataOtw");
            entity.Property(e => e.DszDataZamk)
                .HasColumnType("datetime")
                .HasColumnName("DSZ_DataZamk");
            entity.Property(e => e.DszIloscAnulowanychParagonow).HasColumnName("DSZ_IloscAnulowanychParagonow");
            entity.Property(e => e.DszKpotw)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSZ_KPOtw");
            entity.Property(e => e.DszKwotaZprzeniesienia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSZ_KwotaZPrzeniesienia");
            entity.Property(e => e.DszKwzamk)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSZ_KWZamk");
            entity.Property(e => e.DszNumerNr).HasColumnName("DSZ_NumerNr");
            entity.Property(e => e.DszNumerPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DSZ_NumerPelny");
            entity.Property(e => e.DszOpeIdOtw).HasColumnName("DSZ_OpeIdOtw");
            entity.Property(e => e.DszOpeIdZamk).HasColumnName("DSZ_OpeIdZamk");
            entity.Property(e => e.DszStanDetalId).HasColumnName("DSZ_StanDetalID");
            entity.Property(e => e.DszStanKasy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DSZ_StanKasy");
        });

        modelBuilder.Entity<DetalStanowiska>(entity =>
        {
            entity.HasKey(e => e.DstaDstaId)
                .HasName("DSta_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalStanowiska", "CDN", tb =>
                {
                    tb.HasTrigger("DetalStanowiska_Delete_Trigger");
                    tb.HasTrigger("DetalStanowiska_InsertINSTEADOF_Trigger");
                    tb.HasTrigger("DetalStanowiska_InsertUpdate_Trigger");
                    tb.HasTrigger("DetalStanowiska_UpdateDelete_Trigger");
                });

            entity.Property(e => e.DstaDstaId).HasColumnName("DSta_DStaId");
            entity.Property(e => e.DstaBraId).HasColumnName("DSta_BRaId");
            entity.Property(e => e.DstaDdfIdCrm).HasColumnName("DSta_DDfIdCRM");
            entity.Property(e => e.DstaDdfIdFs).HasColumnName("DSta_DDfIdFS");
            entity.Property(e => e.DstaDdfIdFskor).HasColumnName("DSta_DDfIdFSKor");
            entity.Property(e => e.DstaDdfIdKp).HasColumnName("DSta_DDfIdKP");
            entity.Property(e => e.DstaDdfIdKw).HasColumnName("DSta_DDfIdKW");
            entity.Property(e => e.DstaDdfIdMm).HasColumnName("DSta_DDfIdMM");
            entity.Property(e => e.DstaDdfIdPa).HasColumnName("DSta_DDfIdPA");
            entity.Property(e => e.DstaDdfIdPakor).HasColumnName("DSta_DDfIdPAKor");
            entity.Property(e => e.DstaDdfIdPf).HasColumnName("DSta_DDfIdPF");
            entity.Property(e => e.DstaDdfIdPka).HasColumnName("DSta_DDfIdPKA");
            entity.Property(e => e.DstaDdfIdRo).HasColumnName("DSta_DDfIdRO");
            entity.Property(e => e.DstaDdfIdWz).HasColumnName("DSta_DDfIdWZ");
            entity.Property(e => e.DstaEdycjaKnt)
                .HasDefaultValue((byte)1)
                .HasColumnName("DSta_EdycjaKnt");
            entity.Property(e => e.DstaGenerujWz).HasColumnName("DSta_GenerujWZ");
            entity.Property(e => e.DstaKntGrupa)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("DSta_KntGrupa");
            entity.Property(e => e.DstaKntOpiekun).HasColumnName("DSta_KntOpiekun");
            entity.Property(e => e.DstaMagId).HasColumnName("DSta_MagId");
            entity.Property(e => e.DstaMagIdZwrotny).HasColumnName("DSta_MagIdZwrotny");
            entity.Property(e => e.DstaNazwa)
                .HasMaxLength(50)
                .HasColumnName("DSta_Nazwa");
            entity.Property(e => e.DstaNieaktywne).HasColumnName("DSta_Nieaktywne");
            entity.Property(e => e.DstaOpis)
                .HasMaxLength(100)
                .HasColumnName("DSta_Opis");
            entity.Property(e => e.DstaPobieranieSkladnikowFsuslugaZlozona).HasColumnName("DSta_PobieranieSkladnikowFSUslugaZlozona");
            entity.Property(e => e.DstaSeria)
                .HasMaxLength(5)
                .HasColumnName("DSta_Seria");
            entity.Property(e => e.DstaTsSynchro)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_Synchro");
            entity.Property(e => e.DstaTsSynchroGrup)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroGrup");
            entity.Property(e => e.DstaTsSynchroGrupPotw)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroGrupPotw");
            entity.Property(e => e.DstaTsSynchroImportKnt)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroImportKnt");
            entity.Property(e => e.DstaTsSynchroKnt)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroKnt");
            entity.Property(e => e.DstaTsSynchroKntPotw)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroKntPotw");
            entity.Property(e => e.DstaTsSynchroOpak)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroOpak");
            entity.Property(e => e.DstaTsSynchroPotw)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroPotw");
            entity.Property(e => e.DstaTsSynchroTraNag)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroTraNag");
            entity.Property(e => e.DstaTsSynchroTwr)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroTwr");
            entity.Property(e => e.DstaTsSynchroTwrPotw)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroTwrPotw");
            entity.Property(e => e.DstaTsSynchroZapisKb)
                .HasColumnType("datetime")
                .HasColumnName("DSta_TS_SynchroZapisKB");
            entity.Property(e => e.DstaTwCnumer).HasColumnName("DSta_TwCNumer");
            entity.Property(e => e.DstaTwGgidnumer).HasColumnName("DSta_TwGGIDNumer");
            entity.Property(e => e.DstaTyp).HasColumnName("DSta_Typ");
            entity.Property(e => e.DstaTypNettoBrutto).HasColumnName("DSta_TypNettoBrutto");
        });

        modelBuilder.Entity<DetalTraElem>(entity =>
        {
            entity.HasKey(e => e.DtrEDtrEid)
                .HasName("DTrE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalTraElem", "CDN");

            entity.HasIndex(e => new { e.DtrETwrId, e.DtrEDtrEid }, "DTrETowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DtrEDstrNid, e.DtrEStanDetalId, e.DtrEDstrEid }, "DTrETraNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DtrEDstrEid, e.DtrEStanDetalId }, "DetalTraElemDSTrEID").HasFillFactor(100);

            entity.Property(e => e.DtrEDtrEid).HasColumnName("DTrE_DTrEID");
            entity.Property(e => e.DtrECena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("DTrE_Cena");
            entity.Property(e => e.DtrECenaPoRabacie)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("DTrE_CenaPoRabacie");
            entity.Property(e => e.DtrEDstrEid).HasColumnName("DTrE_DSTrEID");
            entity.Property(e => e.DtrEDstrNid).HasColumnName("DTrE_DSTrNId");
            entity.Property(e => e.DtrEFlaga).HasColumnName("DTrE_Flaga");
            entity.Property(e => e.DtrEIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DTrE_Ilosc");
            entity.Property(e => e.DtrEIloscJm)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DTrE_IloscJM");
            entity.Property(e => e.DtrEJm)
                .HasMaxLength(20)
                .HasColumnName("DTrE_Jm");
            entity.Property(e => e.DtrEJmCalkowite).HasColumnName("DTrE_JmCalkowite");
            entity.Property(e => e.DtrEJmprzelicznikL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DTrE_JMPrzelicznikL");
            entity.Property(e => e.DtrEJmprzelicznikM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("DTrE_JMPrzelicznikM");
            entity.Property(e => e.DtrEJmz)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("DTrE_JMZ");
            entity.Property(e => e.DtrEKaucja).HasColumnName("DTrE_Kaucja");
            entity.Property(e => e.DtrEOpis)
                .HasMaxLength(1024)
                .HasDefaultValue("")
                .HasColumnName("DTrE_Opis");
            entity.Property(e => e.DtrERabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DTrE_Rabat");
            entity.Property(e => e.DtrEStanDetalId).HasColumnName("DTrE_StanDetalId");
            entity.Property(e => e.DtrEStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DTrE_Stawka");
            entity.Property(e => e.DtrETwrId).HasColumnName("DTrE_TwrId");
            entity.Property(e => e.DtrEUslugaZlozona).HasColumnName("DTrE_UslugaZlozona");
            entity.Property(e => e.DtrEUslugaZlozonaRecepturaId).HasColumnName("DTrE_UslugaZlozonaRecepturaID");
            entity.Property(e => e.DtrEWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DTrE_Waluta");
            entity.Property(e => e.DtrEWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DTrE_WartoscBrutto");
            entity.Property(e => e.DtrEZwrId).HasColumnName("DTrE_ZwrId");
            entity.Property(e => e.DtreOdwrotneObciazenie).HasColumnName("DTre_OdwrotneObciazenie");
            entity.Property(e => e.DtreTwCnumer)
                .HasDefaultValue(-1)
                .HasColumnName("DTre_TwCNumer");

            entity.HasOne(d => d.DetalTraNag).WithMany(p => p.DetalTraElems)
                .HasForeignKey(d => new { d.DtrEDstrNid, d.DtrEStanDetalId })
                .HasConstraintName("FK_DTrETraNag");
        });

        modelBuilder.Entity<DetalTraNag>(entity =>
        {
            entity.HasKey(e => new { e.DtrNDstrNid, e.DtrNStanDetalId })
                .HasName("DTrN_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalTraNag", "CDN");

            entity.HasIndex(e => e.DtrNDtrNid, "DTrNID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DtrNDtrNid, e.DtrNOdbId }, "DTrNIDOdbiorca")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DtrNDtrNid, e.DtrNOpeId }, "DTrNIDOperator")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DtrNPodId, e.DtrNDtrNid }, "DTrNIDPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DtrNTypDokumentu, e.DtrNStanDetalId, e.DtrNStanSynchronizacji }, "DetalTraNagTypDokumentu").HasFillFactor(100);

            entity.Property(e => e.DtrNDstrNid).HasColumnName("DTrN_DSTrNID");
            entity.Property(e => e.DtrNStanDetalId).HasColumnName("DTrN_StanDetalID");
            entity.Property(e => e.DtrNAdresId).HasColumnName("DTrN_AdresId");
            entity.Property(e => e.DtrNAnulowanie).HasColumnName("DTrN_Anulowanie");
            entity.Property(e => e.DtrNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DTrN_DataDok");
            entity.Property(e => e.DtrNDataPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("DTrN_DataPlatnosci");
            entity.Property(e => e.DtrNDataRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("DTrN_DataRealizacji");
            entity.Property(e => e.DtrNDdfId).HasColumnName("DTrN_DDfID");
            entity.Property(e => e.DtrNDtrNid)
                .ValueGeneratedOnAdd()
                .HasColumnName("DTrN_DTrNID");
            entity.Property(e => e.DtrNFaId).HasColumnName("DTrN_FaId");
            entity.Property(e => e.DtrNFiskalna).HasColumnName("DTrN_Fiskalna");
            entity.Property(e => e.DtrNFplId).HasColumnName("DTrN_FPlId");
            entity.Property(e => e.DtrNIloscElementow).HasColumnName("DTrN_IloscElementow");
            entity.Property(e => e.DtrNIloscPlatnosci).HasColumnName("DTrN_IloscPlatnosci");
            entity.Property(e => e.DtrNKorekta).HasColumnName("DTrN_Korekta");
            entity.Property(e => e.DtrNMagId)
                .HasDefaultValue(0)
                .HasColumnName("DTrN_MagId");
            entity.Property(e => e.DtrNMagKod)
                .HasMaxLength(30)
                .HasDefaultValue("")
                .HasColumnName("DTrN_MagKod");
            entity.Property(e => e.DtrNNumerNr).HasColumnName("DTrN_NumerNr");
            entity.Property(e => e.DtrNNumerPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DTrN_NumerPelny");
            entity.Property(e => e.DtrNNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DTrN_NumerString");
            entity.Property(e => e.DtrNOdbId).HasColumnName("DTrN_OdbID");
            entity.Property(e => e.DtrNOpeId).HasColumnName("DTrN_OpeID");
            entity.Property(e => e.DtrNOpis)
                .HasMaxLength(1024)
                .HasDefaultValue("")
                .HasColumnName("DTrN_Opis");
            entity.Property(e => e.DtrNOptimaId).HasColumnName("DTrN_OptimaId");
            entity.Property(e => e.DtrNOsobaOdbierajaca)
                .HasMaxLength(40)
                .HasColumnName("DTrN_OsobaOdbierajaca");
            entity.Property(e => e.DtrNParodzajKor).HasColumnName("DTrN_PARodzajKor");
            entity.Property(e => e.DtrNPlatnikId).HasColumnName("DTrN_PlatnikID");
            entity.Property(e => e.DtrNPodId).HasColumnName("DTrN_PodID");
            entity.Property(e => e.DtrNRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DTrN_Rabat");
            entity.Property(e => e.DtrNRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DTrN_RazemBrutto");
            entity.Property(e => e.DtrNSplitPay).HasColumnName("DTrN_SplitPay");
            entity.Property(e => e.DtrNStanKorekta).HasColumnName("DTrN_StanKorekta");
            entity.Property(e => e.DtrNStanSynchronizacji).HasColumnName("DTrN_StanSynchronizacji");
            entity.Property(e => e.DtrNStawkaNpoo).HasColumnName("DTrN_StawkaNPOO");
            entity.Property(e => e.DtrNTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DTrN_TS_Export");
            entity.Property(e => e.DtrNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DTrN_TS_Zal");
            entity.Property(e => e.DtrNTypDokumentu).HasColumnName("DTrN_TypDokumentu");
            entity.Property(e => e.DtrNTypNb).HasColumnName("DTrN_TypNB");
            entity.Property(e => e.DtrNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DTrN_Waluta");
            entity.Property(e => e.DtrNZwrId).HasColumnName("DTrN_ZwrId");
        });

        modelBuilder.Entity<DetalWalKursy>(entity =>
        {
            entity.HasKey(e => e.DwkDwkid)
                .HasName("DWK_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalWalKursy", "CDN");

            entity.HasIndex(e => new { e.DwkDstaId, e.DwkDwkid }, "DWKCStanowiskoDetal")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DwkDwkid).HasColumnName("DWK_DWKId");
            entity.Property(e => e.DwkDomyslny).HasColumnName("DWK_Domyslny");
            entity.Property(e => e.DwkDstaId).HasColumnName("DWK_DStaId");
            entity.Property(e => e.DwkWkuId).HasColumnName("DWK_WKuID");
        });

        modelBuilder.Entity<DetalZakazyMagazyn>(entity =>
        {
            entity.HasKey(e => e.DzmDzmid)
                .HasName("DZM_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalZakazyMagazyn", "CDN");

            entity.HasIndex(e => new { e.DzmMagId, e.DzmDstaId }, "DZMMagazyn")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DzmDzmid).HasColumnName("DZM_DZMId");
            entity.Property(e => e.DzmDstaId).HasColumnName("DZM_DStaId");
            entity.Property(e => e.DzmMagId).HasColumnName("DZM_MagId");

            entity.HasOne(d => d.DzmMag).WithMany(p => p.DetalZakazyMagazyns)
                .HasForeignKey(d => d.DzmMagId)
                .HasConstraintName("FK_DZMMagazyn");
        });

        modelBuilder.Entity<DetalZapisyKb>(entity =>
        {
            entity.HasKey(e => e.DzkbDzkbid)
                .HasName("DZKB_Primary")
                .HasFillFactor(100);

            entity.ToTable("DetalZapisyKB", "CDN");

            entity.HasIndex(e => new { e.DzkbDzkbid, e.DzkbOpeId }, "DZKBIDOperator")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DzkbPodId, e.DzkbDzkbid }, "DZKBIDPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DzkbDszkbid, e.DzkbStanDetalId, e.DzkbStanSynchronizacji }, "DetalZapisyKBDSZKBID").HasFillFactor(100);

            entity.Property(e => e.DzkbDzkbid).HasColumnName("DZKB_DZKBID");
            entity.Property(e => e.DzkbDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DZKB_DataDok");
            entity.Property(e => e.DzkbDdfId).HasColumnName("DZKB_DDfID");
            entity.Property(e => e.DzkbDsfplId).HasColumnName("DZKB_DSFPlId");
            entity.Property(e => e.DzkbDszkbid).HasColumnName("DZKB_DSZKBID");
            entity.Property(e => e.DzkbNumerNr).HasColumnName("DZKB_NumerNr");
            entity.Property(e => e.DzkbNumerPelny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DZKB_NumerPelny");
            entity.Property(e => e.DzkbNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DZKB_NumerString");
            entity.Property(e => e.DzkbOpeId).HasColumnName("DZKB_OpeID");
            entity.Property(e => e.DzkbOpis)
                .HasMaxLength(254)
                .HasColumnName("DZKB_Opis");
            entity.Property(e => e.DzkbOptimaId).HasColumnName("DZKB_OptimaId");
            entity.Property(e => e.DzkbPodId).HasColumnName("DZKB_PodID");
            entity.Property(e => e.DzkbRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DZKB_RazemBrutto");
            entity.Property(e => e.DzkbStanDetalId).HasColumnName("DZKB_StanDetalID");
            entity.Property(e => e.DzkbStanSynchronizacji).HasColumnName("DZKB_StanSynchronizacji");
            entity.Property(e => e.DzkbTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DZKB_TS_Export");
            entity.Property(e => e.DzkbTyp)
                .HasDefaultValue(1)
                .HasColumnName("DZKB_Typ");
            entity.Property(e => e.DzkbTypDokumentu).HasColumnName("DZKB_TypDokumentu");
        });

        modelBuilder.Entity<DlgDokumenty>(entity =>
        {
            entity.HasKey(e => e.DldDldid)
                .HasName("DLD_Primary")
                .HasFillFactor(100);

            entity.ToTable("DlgDokumenty", "CDN");

            entity.Property(e => e.DldDldid).HasColumnName("DLD_DLDId");
            entity.Property(e => e.DldDleid).HasColumnName("DLD_DLEId");
            entity.Property(e => e.DldDokumentId).HasColumnName("DLD_DokumentId");
            entity.Property(e => e.DldDokumentTyp).HasColumnName("DLD_DokumentTyp");
            entity.Property(e => e.DldKwotaRozliczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLD_KwotaRozliczenia");
            entity.Property(e => e.DldOpis)
                .HasMaxLength(255)
                .HasColumnName("DLD_Opis");
            entity.Property(e => e.DldRozliczac).HasColumnName("DLD_Rozliczac");
            entity.Property(e => e.DldTyp).HasColumnName("DLD_Typ");

            entity.HasOne(d => d.DldDle).WithMany(p => p.DlgDokumenties)
                .HasForeignKey(d => d.DldDleid)
                .HasConstraintName("FK_DlgDokumentyDlgElem");
        });

        modelBuilder.Entity<DlgElem>(entity =>
        {
            entity.HasKey(e => e.DleDleid)
                .HasName("DLE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DlgElem", "CDN", tb => tb.HasTrigger("DlgElem_Delete_Trigger"));

            entity.Property(e => e.DleDleid).HasColumnName("DLE_DLEId");
            entity.Property(e => e.DleDataDo)
                .HasColumnType("datetime")
                .HasColumnName("DLE_DataDo");
            entity.Property(e => e.DleDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DLE_DataDok");
            entity.Property(e => e.DleDataKur)
                .HasColumnType("datetime")
                .HasColumnName("DLE_DataKur");
            entity.Property(e => e.DleDataOd)
                .HasColumnType("datetime")
                .HasColumnName("DLE_DataOd");
            entity.Property(e => e.DleDataPoniesieniaKosztu)
                .HasDefaultValue((short)1)
                .HasColumnName("DLE_DataPoniesieniaKosztu");
            entity.Property(e => e.DleDietyIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DLE_DietyIlosc");
            entity.Property(e => e.DleDietyKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_DietyKwota");
            entity.Property(e => e.DleDietyKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_DietyKwotaSys");
            entity.Property(e => e.DleDlnid).HasColumnName("DLE_DLNId");
            entity.Property(e => e.DleFplId).HasColumnName("DLE_FPlId");
            entity.Property(e => e.DleGenerujPlatnoscKb).HasColumnName("DLE_GenerujPlatnoscKB");
            entity.Property(e => e.DleGenerujZapisKb).HasColumnName("DLE_GenerujZapisKB");
            entity.Property(e => e.DleGodzinaDo)
                .HasColumnType("datetime")
                .HasColumnName("DLE_GodzinaDo");
            entity.Property(e => e.DleGodzinaOd)
                .HasColumnType("datetime")
                .HasColumnName("DLE_GodzinaOd");
            entity.Property(e => e.DleIloscGodzinDelegacji)
                .HasColumnType("datetime")
                .HasColumnName("DLE_IloscGodzinDelegacji");
            entity.Property(e => e.DleIloscGodzinPrzyjazd)
                .HasColumnType("datetime")
                .HasColumnName("DLE_IloscGodzinPrzyjazd");
            entity.Property(e => e.DleIloscGodzinWyjazd)
                .HasColumnType("datetime")
                .HasColumnName("DLE_IloscGodzinWyjazd");
            entity.Property(e => e.DleIloscKolacji).HasColumnName("DLE_IloscKolacji");
            entity.Property(e => e.DleIloscObiadow).HasColumnName("DLE_IloscObiadow");
            entity.Property(e => e.DleIloscSniadan).HasColumnName("DLE_IloscSniadan");
            entity.Property(e => e.DleKatId).HasColumnName("DLE_KatId");
            entity.Property(e => e.DleKategoria)
                .HasMaxLength(50)
                .HasColumnName("DLE_Kategoria");
            entity.Property(e => e.DleKraj)
                .HasMaxLength(255)
                .HasColumnName("DLE_Kraj");
            entity.Property(e => e.DleKsiDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DLE_KsiDataDok");
            entity.Property(e => e.DleKsiDataKur)
                .HasColumnType("datetime")
                .HasColumnName("DLE_KsiDataKur");
            entity.Property(e => e.DleKsiDietyKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiDietyKwota");
            entity.Property(e => e.DleKsiDietyKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiDietyKwotaSys");
            entity.Property(e => e.DleKsiKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DLE_KsiKursL");
            entity.Property(e => e.DleKsiKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DLE_KsiKursM");
            entity.Property(e => e.DleKsiKursNumer).HasColumnName("DLE_KsiKursNumer");
            entity.Property(e => e.DleKsiKwotaRozliczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiKwotaRozliczenia");
            entity.Property(e => e.DleKsiKwotaRozliczeniaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiKwotaRozliczeniaSys");
            entity.Property(e => e.DleKsiKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiKwotaSys");
            entity.Property(e => e.DleKsiKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiKwotaWal");
            entity.Property(e => e.DleKsiPojazdKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiPojazdKoszt");
            entity.Property(e => e.DleKsiPojazdKosztSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiPojazdKosztSys");
            entity.Property(e => e.DleKsiRazemDiety)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemDiety");
            entity.Property(e => e.DleKsiRazemDietySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemDietySys");
            entity.Property(e => e.DleKsiRazemInneWydatki)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemInneWydatki");
            entity.Property(e => e.DleKsiRazemInneWydatkiSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemInneWydatkiSys");
            entity.Property(e => e.DleKsiRazemRyczaltDiety)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemRyczaltDiety");
            entity.Property(e => e.DleKsiRazemRyczaltDietySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemRyczaltDietySys");
            entity.Property(e => e.DleKsiRazemRyczaltDojazdy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemRyczaltDojazdy");
            entity.Property(e => e.DleKsiRazemRyczaltDojazdySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemRyczaltDojazdySys");
            entity.Property(e => e.DleKsiRazemRyczaltNoclegi)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemRyczaltNoclegi");
            entity.Property(e => e.DleKsiRazemRyczaltNoclegiSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemRyczaltNoclegiSys");
            entity.Property(e => e.DleKsiRazemWydatki)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemWydatki");
            entity.Property(e => e.DleKsiRazemWydatkiSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemWydatkiSys");
            entity.Property(e => e.DleKsiRazemZaliczka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemZaliczka");
            entity.Property(e => e.DleKsiRazemZaliczkaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRazemZaliczkaSys");
            entity.Property(e => e.DleKsiRyczaltDojazdyDworzecKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltDojazdyDworzecKwota");
            entity.Property(e => e.DleKsiRyczaltDojazdyDworzecKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltDojazdyDworzecKwotaSys");
            entity.Property(e => e.DleKsiRyczaltDojazdyKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltDojazdyKwota");
            entity.Property(e => e.DleKsiRyczaltDojazdyKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltDojazdyKwotaSys");
            entity.Property(e => e.DleKsiRyczaltNoclegiKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltNoclegiKwota");
            entity.Property(e => e.DleKsiRyczaltNoclegiKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltNoclegiKwotaSys");
            entity.Property(e => e.DleKsiRyczaltPobytSzpitalKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltPobytSzpitalKwota");
            entity.Property(e => e.DleKsiRyczaltPobytSzpitalKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KsiRyczaltPobytSzpitalKwotaSys");
            entity.Property(e => e.DleKsiWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DLE_KsiWaluta");
            entity.Property(e => e.DleKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DLE_KursL");
            entity.Property(e => e.DleKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DLE_KursM");
            entity.Property(e => e.DleKursNumer).HasColumnName("DLE_KursNumer");
            entity.Property(e => e.DleKursRozliczenia)
                .HasDefaultValue((short)1)
                .HasColumnName("DLE_KursRozliczenia");
            entity.Property(e => e.DleKwotaRozliczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KwotaRozliczenia");
            entity.Property(e => e.DleKwotaRozliczeniaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KwotaRozliczeniaSys");
            entity.Property(e => e.DleKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KwotaSys");
            entity.Property(e => e.DleKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_KwotaWal");
            entity.Property(e => e.DleNumerRejestracyjny)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DLE_NumerRejestracyjny");
            entity.Property(e => e.DleOpis)
                .HasMaxLength(255)
                .HasColumnName("DLE_Opis");
            entity.Property(e => e.DlePojazdIloscKilometrow).HasColumnName("DLE_PojazdIloscKilometrow");
            entity.Property(e => e.DlePojazdKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_PojazdKoszt");
            entity.Property(e => e.DlePojazdKosztSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_PojazdKosztSys");
            entity.Property(e => e.DlePojazdStawkaZaKilometr)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DLE_PojazdStawkaZaKilometr");
            entity.Property(e => e.DlePozostaje)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_Pozostaje");
            entity.Property(e => e.DleRazemDiety)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemDiety");
            entity.Property(e => e.DleRazemDietySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemDietySys");
            entity.Property(e => e.DleRazemInneWydatki)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemInneWydatki");
            entity.Property(e => e.DleRazemInneWydatkiSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemInneWydatkiSys");
            entity.Property(e => e.DleRazemRyczaltDiety)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemRyczaltDiety");
            entity.Property(e => e.DleRazemRyczaltDietySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemRyczaltDietySys");
            entity.Property(e => e.DleRazemRyczaltDojazdy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemRyczaltDojazdy");
            entity.Property(e => e.DleRazemRyczaltDojazdySys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemRyczaltDojazdySys");
            entity.Property(e => e.DleRazemRyczaltNoclegi)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemRyczaltNoclegi");
            entity.Property(e => e.DleRazemRyczaltNoclegiSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemRyczaltNoclegiSys");
            entity.Property(e => e.DleRazemWydatki)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemWydatki");
            entity.Property(e => e.DleRazemWydatkiBilety)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemWydatkiBilety");
            entity.Property(e => e.DleRazemWydatkiBiletyIlosc).HasColumnName("DLE_RazemWydatkiBiletyIlosc");
            entity.Property(e => e.DleRazemWydatkiInne)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemWydatkiInne");
            entity.Property(e => e.DleRazemWydatkiInneIlosc).HasColumnName("DLE_RazemWydatkiInneIlosc");
            entity.Property(e => e.DleRazemWydatkiNoclegi)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemWydatkiNoclegi");
            entity.Property(e => e.DleRazemWydatkiNoclegiIlosc).HasColumnName("DLE_RazemWydatkiNoclegiIlosc");
            entity.Property(e => e.DleRazemWydatkiSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemWydatkiSys");
            entity.Property(e => e.DleRazemZaliczka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemZaliczka");
            entity.Property(e => e.DleRazemZaliczkaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RazemZaliczkaSys");
            entity.Property(e => e.DleRodzajEtapu)
                .HasDefaultValue((short)1)
                .HasColumnName("DLE_RodzajEtapu");
            entity.Property(e => e.DleRozliczenieSys).HasColumnName("DLE_RozliczenieSYS");
            entity.Property(e => e.DleRozliczono)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_Rozliczono");
            entity.Property(e => e.DleRoznicaKursowa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RoznicaKursowa");
            entity.Property(e => e.DleRyczaltDojazdyAuto).HasColumnName("DLE_RyczaltDojazdyAuto");
            entity.Property(e => e.DleRyczaltDojazdyDworzecAuto).HasColumnName("DLE_RyczaltDojazdyDworzecAuto");
            entity.Property(e => e.DleRyczaltDojazdyDworzecIlosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltDojazdyDworzecIlosc");
            entity.Property(e => e.DleRyczaltDojazdyDworzecKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltDojazdyDworzecKwota");
            entity.Property(e => e.DleRyczaltDojazdyDworzecKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltDojazdyDworzecKwotaSys");
            entity.Property(e => e.DleRyczaltDojazdyIlosc).HasColumnName("DLE_RyczaltDojazdyIlosc");
            entity.Property(e => e.DleRyczaltDojazdyKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltDojazdyKwota");
            entity.Property(e => e.DleRyczaltDojazdyKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltDojazdyKwotaSys");
            entity.Property(e => e.DleRyczaltNoclegiAuto).HasColumnName("DLE_RyczaltNoclegiAuto");
            entity.Property(e => e.DleRyczaltNoclegiIlosc).HasColumnName("DLE_RyczaltNoclegiIlosc");
            entity.Property(e => e.DleRyczaltNoclegiKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltNoclegiKwota");
            entity.Property(e => e.DleRyczaltNoclegiKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltNoclegiKwotaSys");
            entity.Property(e => e.DleRyczaltPobytSzpitalAuto).HasColumnName("DLE_RyczaltPobytSzpitalAuto");
            entity.Property(e => e.DleRyczaltPobytSzpitalIlosc).HasColumnName("DLE_RyczaltPobytSzpitalIlosc");
            entity.Property(e => e.DleRyczaltPobytSzpitalKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltPobytSzpitalKwota");
            entity.Property(e => e.DleRyczaltPobytSzpitalKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_RyczaltPobytSzpitalKwotaSys");
            entity.Property(e => e.DleStawkaDiety)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLE_StawkaDiety");
            entity.Property(e => e.DleStawkaTyp).HasColumnName("DLE_StawkaTyp");
            entity.Property(e => e.DleSumujWyjazdPrzyjazd).HasColumnName("DLE_SumujWyjazdPrzyjazd");
            entity.Property(e => e.DleTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("DLE_TerminPlatnosci");
            entity.Property(e => e.DleTypPojazdu).HasColumnName("DLE_TypPojazdu");
            entity.Property(e => e.DleWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DLE_Waluta");
            entity.Property(e => e.DleWymagaPrzeliczenia).HasColumnName("DLE_WymagaPrzeliczenia");
            entity.Property(e => e.DleWyplataZaliczkiSys).HasColumnName("DLE_WyplataZaliczkiSys");
            entity.Property(e => e.DleZapisKbBraAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DLE_ZapisKbBRaAkronim");
            entity.Property(e => e.DleZrodlo).HasColumnName("DLE_Zrodlo");

            entity.HasOne(d => d.DleDln).WithMany(p => p.DlgElems)
                .HasForeignKey(d => d.DleDlnid)
                .HasConstraintName("FK_DlgElemDlgNag");
        });

        modelBuilder.Entity<DlgNag>(entity =>
        {
            entity.HasKey(e => e.DlnDlnid)
                .HasName("DLN_Primary")
                .HasFillFactor(100);

            entity.ToTable("DlgNag", "CDN", tb => tb.HasTrigger("DlgNag_Delete_Trigger"));

            entity.HasIndex(e => e.DlnDekId, "DLNDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.DlnKprid, "DLNKPR").HasFillFactor(100);

            entity.HasIndex(e => new { e.DlnNumerString, e.DlnNumerNr }, "DLNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DlnNumerPelny, "DLNNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DlnPreDekId, "DLNPreDekrety").HasFillFactor(100);

            entity.Property(e => e.DlnDlnid).HasColumnName("DLN_DLNId");
            entity.Property(e => e.DlnBuforData)
                .HasColumnType("datetime")
                .HasColumnName("DLN_BuforData");
            entity.Property(e => e.DlnBuforOperatorId).HasColumnName("DLN_BuforOperatorId");
            entity.Property(e => e.DlnDataDo)
                .HasColumnType("datetime")
                .HasColumnName("DLN_DataDo");
            entity.Property(e => e.DlnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DLN_DataDok");
            entity.Property(e => e.DlnDataOd)
                .HasColumnType("datetime")
                .HasColumnName("DLN_DataOd");
            entity.Property(e => e.DlnDataRozliczenia)
                .HasColumnType("datetime")
                .HasColumnName("DLN_DataRozliczenia");
            entity.Property(e => e.DlnDdfId).HasColumnName("DLN_DDfId");
            entity.Property(e => e.DlnDekId).HasColumnName("DLN_DekId");
            entity.Property(e => e.DlnKatId).HasColumnName("DLN_KatId");
            entity.Property(e => e.DlnKategoria)
                .HasMaxLength(50)
                .HasColumnName("DLN_Kategoria");
            entity.Property(e => e.DlnKprid).HasColumnName("DLN_KPRId");
            entity.Property(e => e.DlnKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DLN_KursL");
            entity.Property(e => e.DlnKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DLN_KursM");
            entity.Property(e => e.DlnKursNumer).HasColumnName("DLN_KursNumer");
            entity.Property(e => e.DlnKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLN_KwotaSys");
            entity.Property(e => e.DlnKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLN_KwotaWal");
            entity.Property(e => e.DlnMiejsceDocelowe)
                .HasMaxLength(255)
                .HasColumnName("DLN_MiejsceDocelowe");
            entity.Property(e => e.DlnNumerNr).HasColumnName("DLN_NumerNr");
            entity.Property(e => e.DlnNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([DLN_NumerNr],[DLN_NumerString]))", false)
                .HasColumnName("DLN_NumerPelny");
            entity.Property(e => e.DlnNumerString)
                .HasMaxLength(31)
                .HasColumnName("DLN_NumerString");
            entity.Property(e => e.DlnOpeModId).HasColumnName("DLN_OpeModID");
            entity.Property(e => e.DlnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLN_OpeModKod");
            entity.Property(e => e.DlnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DLN_OpeModNazwisko");
            entity.Property(e => e.DlnOpeZalId).HasColumnName("DLN_OpeZalID");
            entity.Property(e => e.DlnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLN_OpeZalKod");
            entity.Property(e => e.DlnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DLN_OpeZalNazwisko");
            entity.Property(e => e.DlnOpis)
                .HasMaxLength(255)
                .HasColumnName("DLN_Opis");
            entity.Property(e => e.DlnPodmiotId).HasColumnName("DLN_PodmiotId");
            entity.Property(e => e.DlnPodmiotTyp).HasColumnName("DLN_PodmiotTyp");
            entity.Property(e => e.DlnPolecenieWyjazduData)
                .HasColumnType("datetime")
                .HasColumnName("DLN_PolecenieWyjazduData");
            entity.Property(e => e.DlnPolecenieWyjazduOperatorId).HasColumnName("DLN_PolecenieWyjazduOperatorId");
            entity.Property(e => e.DlnPreDekId).HasColumnName("DLN_PreDekId");
            entity.Property(e => e.DlnStaModId).HasColumnName("DLN_StaModId");
            entity.Property(e => e.DlnStaZalId).HasColumnName("DLN_StaZalId");
            entity.Property(e => e.DlnStatus).HasColumnName("DLN_Status");
            entity.Property(e => e.DlnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DLN_TS_Mod");
            entity.Property(e => e.DlnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DLN_TS_Zal");
            entity.Property(e => e.DlnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DLN_Waluta");
            entity.Property(e => e.DlnWydatkiData)
                .HasColumnType("datetime")
                .HasColumnName("DLN_WydatkiData");
            entity.Property(e => e.DlnWydatkiOperatorId).HasColumnName("DLN_WydatkiOperatorId");
            entity.Property(e => e.DlnWyjazdZmz).HasColumnName("DLN_WyjazdZMZ");
            entity.Property(e => e.DlnWymagaPrzeliczenia).HasColumnName("DLN_WymagaPrzeliczenia");
            entity.Property(e => e.DlnZagraniczna).HasColumnName("DLN_Zagraniczna");
            entity.Property(e => e.DlnZakId).HasColumnName("DLN_ZakId");
            entity.Property(e => e.DlnZatwierdzenieData)
                .HasColumnType("datetime")
                .HasColumnName("DLN_ZatwierdzenieData");
            entity.Property(e => e.DlnZatwierdzenieOperatorId).HasColumnName("DLN_ZatwierdzenieOperatorId");
            entity.Property(e => e.DlnZrodlo).HasColumnName("DLN_Zrodlo");
        });

        modelBuilder.Entity<DlgTrasy>(entity =>
        {
            entity.HasKey(e => e.DltDltid)
                .HasName("DLT_Primary")
                .HasFillFactor(100);

            entity.ToTable("DlgTrasy", "CDN");

            entity.Property(e => e.DltDltid).HasColumnName("DLT_DLTId");
            entity.Property(e => e.DltDataOdjazdu)
                .HasColumnType("datetime")
                .HasColumnName("DLT_DataOdjazdu");
            entity.Property(e => e.DltDataPrzyjazdu)
                .HasColumnType("datetime")
                .HasColumnName("DLT_DataPrzyjazdu");
            entity.Property(e => e.DltDldid).HasColumnName("DLT_DLDId");
            entity.Property(e => e.DltDleid).HasColumnName("DLT_DLEId");
            entity.Property(e => e.DltGodzinaOdjazdu)
                .HasColumnType("datetime")
                .HasColumnName("DLT_GodzinaOdjazdu");
            entity.Property(e => e.DltGodzinaPrzyjazdu)
                .HasColumnType("datetime")
                .HasColumnName("DLT_GodzinaPrzyjazdu");
            entity.Property(e => e.DltKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLT_KwotaSys");
            entity.Property(e => e.DltKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLT_KwotaWal");
            entity.Property(e => e.DltMiejsceOdjazdu)
                .HasMaxLength(127)
                .HasColumnName("DLT_MiejsceOdjazdu");
            entity.Property(e => e.DltMiejscePrzyjazdu)
                .HasMaxLength(127)
                .HasColumnName("DLT_MiejscePrzyjazdu");
            entity.Property(e => e.DltSrodekLokomocji)
                .HasMaxLength(50)
                .HasColumnName("DLT_SrodekLokomocji");
            entity.Property(e => e.DltWyjazd).HasColumnName("DLT_Wyjazd");
            entity.Property(e => e.DltZrodlo).HasColumnName("DLT_Zrodlo");

            entity.HasOne(d => d.DltDle).WithMany(p => p.DlgTrasies)
                .HasForeignKey(d => d.DltDleid)
                .HasConstraintName("FK_DlgTrasyDlgElem");
        });

        modelBuilder.Entity<DlgZaliczki>(entity =>
        {
            entity.HasKey(e => e.DlzDlzid)
                .HasName("DLZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DlgZaliczki", "CDN");

            entity.Property(e => e.DlzDlzid).HasColumnName("DLZ_DLZId");
            entity.Property(e => e.DlzBzpId).HasColumnName("DLZ_BZpId");
            entity.Property(e => e.DlzData)
                .HasColumnType("datetime")
                .HasColumnName("DLZ_Data");
            entity.Property(e => e.DlzDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DLZ_DataDok");
            entity.Property(e => e.DlzDataKur)
                .HasColumnType("datetime")
                .HasColumnName("DLZ_DataKur");
            entity.Property(e => e.DlzDleid).HasColumnName("DLZ_DLEId");
            entity.Property(e => e.DlzDokument)
                .HasMaxLength(256)
                .HasColumnName("DLZ_Dokument");
            entity.Property(e => e.DlzFplId).HasColumnName("DLZ_FPlID");
            entity.Property(e => e.DlzKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DLZ_KursL");
            entity.Property(e => e.DlzKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DLZ_KursM");
            entity.Property(e => e.DlzKursNumer).HasColumnName("DLZ_KursNumer");
            entity.Property(e => e.DlzKwotaRozliczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLZ_KwotaRozliczenia");
            entity.Property(e => e.DlzKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLZ_KwotaSys");
            entity.Property(e => e.DlzKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLZ_KwotaWal");
            entity.Property(e => e.DlzTyp).HasColumnName("DLZ_Typ");
            entity.Property(e => e.DlzWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DLZ_Waluta");
            entity.Property(e => e.DlzZrodlo).HasColumnName("DLZ_Zrodlo");

            entity.HasOne(d => d.DlzDle).WithMany(p => p.DlgZaliczkis)
                .HasForeignKey(d => d.DlzDleid)
                .HasConstraintName("FK_DlgZaliczkiDlgElem");
        });

        modelBuilder.Entity<Dodatki>(entity =>
        {
            entity.HasKey(e => e.DodDodId)
                .HasName("DOD_Primary")
                .HasFillFactor(100);

            entity.ToTable("Dodatki", "CDN", tb =>
                {
                    tb.HasTrigger("Dodatki2WypSkladniki_Delete_Trigger");
                    tb.HasTrigger("Dodatki_InsertUpdateHandler");
                    tb.HasTrigger("Dodatki_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.DodPraId, "DODPraLink").HasFillFactor(100);

            entity.HasIndex(e => e.DodRdzId, "DODRdzLink").HasFillFactor(100);

            entity.Property(e => e.DodDodId).HasColumnName("DOD_DodId");
            entity.Property(e => e.DodImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DOD_ImportRowId");
            entity.Property(e => e.DodNazwa)
                .HasMaxLength(40)
                .HasColumnName("DOD_Nazwa");
            entity.Property(e => e.DodNieaktywny).HasColumnName("DOD_Nieaktywny");
            entity.Property(e => e.DodPraId).HasColumnName("DOD_PraId");
            entity.Property(e => e.DodRdzId).HasColumnName("DOD_RdzId");
            entity.Property(e => e.DodRodzaj).HasColumnName("DOD_Rodzaj");
            entity.Property(e => e.DodUmowa).HasColumnName("DOD_Umowa");
            entity.Property(e => e.DodWliczChorWokresie).HasColumnName("DOD_WliczChorWOkresie");

            entity.HasOne(d => d.DodPra).WithMany(p => p.Dodatkis)
                .HasForeignKey(d => d.DodPraId)
                .HasConstraintName("FK_DODPraLink");
        });

        modelBuilder.Entity<DodatkiHist>(entity =>
        {
            entity.HasKey(e => e.DohDohId)
                .HasName("DOH_Primary")
                .HasFillFactor(100);

            entity.ToTable("DodatkiHist", "CDN", tb =>
                {
                    tb.HasTrigger("DodatkiHis_Delete_Trigger");
                    tb.HasTrigger("DodatkiHist_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.DohDodId, "DOHDodLink").HasFillFactor(100);

            entity.HasIndex(e => e.DohListaPlacSymbol, "DOHLPLink").HasFillFactor(100);

            entity.HasIndex(e => e.DohTwpId, "DOHTwpLink").HasFillFactor(100);

            entity.Property(e => e.DohDohId).HasColumnName("DOH_DohId");
            entity.Property(e => e.DohDodId).HasColumnName("DOH_DodId");
            entity.Property(e => e.DohImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DOH_ImportRowId");
            entity.Property(e => e.DohListaPlacSymbol).HasColumnName("DOH_ListaPlacSymbol");
            entity.Property(e => e.DohNazwa)
                .HasMaxLength(40)
                .HasColumnName("DOH_Nazwa");
            entity.Property(e => e.DohOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("DOH_OkresDo");
            entity.Property(e => e.DohOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("DOH_OkresOd");
            entity.Property(e => e.DohOpeModId).HasColumnName("DOH_OpeModId");
            entity.Property(e => e.DohOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DOH_OpeModKod");
            entity.Property(e => e.DohOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DOH_OpeModNazwisko");
            entity.Property(e => e.DohOpeZalId).HasColumnName("DOH_OpeZalId");
            entity.Property(e => e.DohOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DOH_OpeZalKod");
            entity.Property(e => e.DohOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DOH_OpeZalNazwisko");
            entity.Property(e => e.DohOpis)
                .HasMaxLength(512)
                .HasColumnName("DOH_Opis");
            entity.Property(e => e.DohPozyczkaNr)
                .HasMaxLength(40)
                .HasColumnName("DOH_PozyczkaNr");
            entity.Property(e => e.DohStaModId).HasColumnName("DOH_StaModId");
            entity.Property(e => e.DohStaZalId).HasColumnName("DOH_StaZalId");
            entity.Property(e => e.DohTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DOH_TS_Mod");
            entity.Property(e => e.DohTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DOH_TS_Zal");
            entity.Property(e => e.DohTwpId).HasColumnName("DOH_TwpId");
            entity.Property(e => e.DohWartosc1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DOH_Wartosc1");
            entity.Property(e => e.DohWartosc2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DOH_Wartosc2");
            entity.Property(e => e.DohWaznyDo)
                .HasColumnType("datetime")
                .HasColumnName("DOH_WaznyDo");
            entity.Property(e => e.DohWaznyOd)
                .HasColumnType("datetime")
                .HasColumnName("DOH_WaznyOd");

            entity.HasOne(d => d.DohDod).WithMany(p => p.DodatkiHists)
                .HasForeignKey(d => d.DohDodId)
                .HasConstraintName("FK_DOHDodLink");

            entity.HasOne(d => d.DohTwp).WithMany(p => p.DodatkiHists)
                .HasForeignKey(d => d.DohTwpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOHTwpLink");
        });

        modelBuilder.Entity<DodatkiUmowy>(entity =>
        {
            entity.HasKey(e => e.DouDouId)
                .HasName("DOU_Primary")
                .HasFillFactor(100);

            entity.ToTable("DodatkiUmowy", "CDN", tb =>
                {
                    tb.HasTrigger("DodatkiUmowy_Delete_Trigger");
                    tb.HasTrigger("DodatkiUmowy_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.DouDodId, "DOUDodLink").HasFillFactor(100);

            entity.HasIndex(e => e.DouUmwId, "DOUUmwLink").HasFillFactor(100);

            entity.Property(e => e.DouDouId).HasColumnName("DOU_DouId");
            entity.Property(e => e.DouDodId).HasColumnName("DOU_DodId");
            entity.Property(e => e.DouImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DOU_ImportRowId");
            entity.Property(e => e.DouUmwId).HasColumnName("DOU_UmwId");

            entity.HasOne(d => d.DouDod).WithMany(p => p.DodatkiUmowies)
                .HasForeignKey(d => d.DouDodId)
                .HasConstraintName("FK_DOUDodLink");

            entity.HasOne(d => d.DouUmw).WithMany(p => p.DodatkiUmowies)
                .HasForeignKey(d => d.DouUmwId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOUUmwLink");
        });

        modelBuilder.Entity<DokAtrybuty>(entity =>
        {
            entity.HasKey(e => e.DatDatId)
                .HasName("DAt_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokAtrybuty", "CDN");

            entity.HasIndex(e => new { e.DatDeAid, e.DatTrNid }, "DAtAtrybutyTraNag").HasFillFactor(100);

            entity.HasIndex(e => e.DatCrkid, "DAtCRMKey").HasFillFactor(100);

            entity.HasIndex(e => e.DatDeAid, "DAtDefAtrybut").HasFillFactor(100);

            entity.HasIndex(e => e.DatDoNid, "DAtDokNag").HasFillFactor(100);

            entity.HasIndex(e => new { e.DatDokumentTyp, e.DatDokumentId }, "DAtDokument").HasFillFactor(100);

            entity.HasIndex(e => e.DatDkfid, "DAtDokumentyKSeF").HasFillFactor(100);

            entity.HasIndex(e => e.DatOfdId, "DAtOfertyDok").HasFillFactor(100);

            entity.HasIndex(e => e.DatSrZid, "DAtSrSZlecenia").HasFillFactor(100);

            entity.HasIndex(e => e.DatVaNid, "DAtVatNag").HasFillFactor(100);

            entity.HasIndex(e => e.DatTrNid, "DTaTraNag").HasFillFactor(100);

            entity.Property(e => e.DatDatId).HasColumnName("DAt_DAtId");
            entity.Property(e => e.DatCrkid).HasColumnName("DAt_CRKId");
            entity.Property(e => e.DatDeAid).HasColumnName("DAt_DeAId");
            entity.Property(e => e.DatDkfid).HasColumnName("DAt_DKFID");
            entity.Property(e => e.DatDoNid).HasColumnName("DAt_DoNID");
            entity.Property(e => e.DatDokumentId).HasColumnName("DAt_DokumentId");
            entity.Property(e => e.DatDokumentTyp).HasColumnName("DAt_DokumentTyp");
            entity.Property(e => e.DatKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DAt_Kod");
            entity.Property(e => e.DatOfdId).HasColumnName("DAt_OfdID");
            entity.Property(e => e.DatSrZid).HasColumnName("DAt_SrZId");
            entity.Property(e => e.DatTrNid).HasColumnName("DAt_TrNId");
            entity.Property(e => e.DatTypJpk).HasColumnName("DAt_TypJPK");
            entity.Property(e => e.DatVaNid).HasColumnName("DAt_VaNID");
            entity.Property(e => e.DatWartoscDecimal)
                .HasComputedColumnSql("(case when len([DAT_WARTOSCTXT])<(15) AND isnumeric(replace([DAT_WARTOSCTXT],',','.')+'E0')=(1) AND NOT ltrim(rtrim([DAT_WARTOSCTXT])) like '[-.,+]' AND NOT [DAT_WARTOSCTXT] like ('%'+char((13)))+'%' then CONVERT([decimal](18,4),ltrim(rtrim(replace(replace([DAT_WARTOSCTXT],char((9)),''),',','.'))),(0)) else (-99999999) end)", false)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DAt_WartoscDecimal");
            entity.Property(e => e.DatWartoscTxt)
                .HasMaxLength(1024)
                .HasColumnName("DAt_WartoscTxt");

            entity.HasOne(d => d.DatCrk).WithMany(p => p.DokAtrybuties)
                .HasForeignKey(d => d.DatCrkid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DAtCRMKey");

            entity.HasOne(d => d.DatDeA).WithMany(p => p.DokAtrybuties)
                .HasForeignKey(d => d.DatDeAid)
                .HasConstraintName("FK_DAtDefAtrybut");

            entity.HasOne(d => d.DatDkf).WithMany(p => p.DokAtrybuties)
                .HasForeignKey(d => d.DatDkfid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DAtDokumentyKSeF");

            entity.HasOne(d => d.DatOfd).WithMany(p => p.DokAtrybuties)
                .HasForeignKey(d => d.DatOfdId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DAtOfertyDok");

            entity.HasOne(d => d.DatSrZ).WithMany(p => p.DokAtrybuties)
                .HasForeignKey(d => d.DatSrZid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DAtSrSZlecenia");

            entity.HasOne(d => d.DatTrN).WithMany(p => p.DokAtrybuties)
                .HasForeignKey(d => d.DatTrNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DTaTraNag");

            entity.HasOne(d => d.DatVaN).WithMany(p => p.DokAtrybuties)
                .HasForeignKey(d => d.DatVaNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DAtVatNag");
        });

        modelBuilder.Entity<DokDefinicje>(entity =>
        {
            entity.HasKey(e => e.DdfDdfId)
                .HasName("DDf_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokDefinicje", "CDN", tb =>
                {
                    tb.HasTrigger("DokDefinicje_Delete_Trigger");
                    tb.HasTrigger("DokDefinicje_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.DdfImportRowId, "DDfGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DdfImportRowId2, "DDfGUID2")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DdfKlasa, e.DdfSymbol }, "DDfKlasa").HasFillFactor(100);

            entity.HasIndex(e => e.DdfSymbol, "DDfSymbol").HasFillFactor(100);

            entity.Property(e => e.DdfDdfId).HasColumnName("DDf_DDfID");
            entity.Property(e => e.DdfImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DDf_ImportAppId");
            entity.Property(e => e.DdfImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DDf_ImportRowId");
            entity.Property(e => e.DdfImportRowId2)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DDf_ImportRowId2");
            entity.Property(e => e.DdfImportSchematId).HasColumnName("DDf_ImportSchematID");
            entity.Property(e => e.DdfKatalogObdId).HasColumnName("DDf_KatalogObdId");
            entity.Property(e => e.DdfKierunekOrg)
                .HasComputedColumnSql("(case when [DDF_KLASA]=(650) OR [DDF_KLASA]=(600) OR [DDF_KLASA]=(313) OR [DDF_KLASA]=(307) OR [DDF_KLASA]=(301) OR [DDF_KLASA]=(224) OR [DDF_KLASA]=(201) OR [DDF_KLASA]=(117) OR [DDF_KLASA]=(114) OR [DDF_KLASA]=(102) then (-1) when [DDF_KLASA]=(314) OR [DDF_KLASA]=(308) OR [DDF_KLASA]=(306) OR [DDF_KLASA]=(305) OR [DDF_KLASA]=(302) OR [DDF_KLASA]=(221) OR [DDF_KLASA]=(202) OR [DDF_KLASA]=(101) then (1) else (0) end)", false)
                .HasColumnName("DDf_KierunekOrg");
            entity.Property(e => e.DdfKlasa).HasColumnName("DDf_Klasa");
            entity.Property(e => e.DdfNazwa)
                .HasMaxLength(256)
                .HasColumnName("DDf_Nazwa");
            entity.Property(e => e.DdfNieaktywna).HasColumnName("DDf_Nieaktywna");
            entity.Property(e => e.DdfNumeracja)
                .HasMaxLength(50)
                .HasColumnName("DDf_Numeracja");
            entity.Property(e => e.DdfOpeModId).HasColumnName("DDf_OpeModID");
            entity.Property(e => e.DdfOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDf_OpeModKod");
            entity.Property(e => e.DdfOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DDf_OpeModNazwisko");
            entity.Property(e => e.DdfOpeZalId).HasColumnName("DDf_OpeZalID");
            entity.Property(e => e.DdfOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDf_OpeZalKod");
            entity.Property(e => e.DdfOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DDf_OpeZalNazwisko");
            entity.Property(e => e.DdfPowDdfId).HasColumnName("DDf_PowDDfID");
            entity.Property(e => e.DdfPowSeria)
                .HasMaxLength(5)
                .HasColumnName("DDf_PowSeria");
            entity.Property(e => e.DdfPrevNumeracja)
                .HasMaxLength(50)
                .HasColumnName("DDf_PrevNumeracja");
            entity.Property(e => e.DdfPrevSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DDf_PrevSymbol");
            entity.Property(e => e.DdfSeriaOperatora).HasColumnName("DDf_SeriaOperatora");
            entity.Property(e => e.DdfStaModId).HasColumnName("DDf_StaModId");
            entity.Property(e => e.DdfStaZalId).HasColumnName("DDf_StaZalId");
            entity.Property(e => e.DdfSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DDf_Symbol");
            entity.Property(e => e.DdfTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DDf_TS_Export");
            entity.Property(e => e.DdfTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DDf_TS_Mod");
            entity.Property(e => e.DdfTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DDf_TS_Zal");
        });

        modelBuilder.Entity<DokDefinicjeView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DokDefinicjeView", "CDN");

            entity.Property(e => e.DdfVDdfId).HasColumnName("DDfV_DDfID");
            entity.Property(e => e.DdfVImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DDfV_ImportAppId");
            entity.Property(e => e.DdfVImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DDfV_ImportRowId");
            entity.Property(e => e.DdfVKierunekOrg).HasColumnName("DDfV_KierunekOrg");
            entity.Property(e => e.DdfVKlasa).HasColumnName("DDfV_Klasa");
            entity.Property(e => e.DdfVNazwa)
                .HasMaxLength(256)
                .HasColumnName("DDfV_Nazwa");
            entity.Property(e => e.DdfVNieaktywna).HasColumnName("DDfV_Nieaktywna");
            entity.Property(e => e.DdfVNumeracja)
                .HasMaxLength(50)
                .HasColumnName("DDfV_Numeracja");
            entity.Property(e => e.DdfVOpeModId).HasColumnName("DDfV_OpeModID");
            entity.Property(e => e.DdfVOpeZalId).HasColumnName("DDfV_OpeZalID");
            entity.Property(e => e.DdfVSeriaOperatora).HasColumnName("DDfV_SeriaOperatora");
            entity.Property(e => e.DdfVStaModId).HasColumnName("DDfV_StaModId");
            entity.Property(e => e.DdfVStaZalId).HasColumnName("DDfV_StaZalId");
            entity.Property(e => e.DdfVSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DDfV_Symbol");
            entity.Property(e => e.DdfVTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DDfV_TS_Export");
            entity.Property(e => e.DdfVTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DDfV_TS_Mod");
            entity.Property(e => e.DdfVTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DDfV_TS_Zal");
        });

        modelBuilder.Entity<DokKodyJpkv7>(entity =>
        {
            entity.HasKey(e => e.Dkv7Dkv7id)
                .HasName("DKV7_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokKodyJPKV7", "CDN");

            entity.HasIndex(e => new { e.Dkv7Kv7id, e.Dkv7ParentTyp, e.Dkv7ParentId }, "DKV7KodyJPKV7").HasFillFactor(100);

            entity.HasIndex(e => new { e.Dkv7ParentTyp, e.Dkv7ParentId }, "DokKodyJPKV7Parent").HasFillFactor(100);

            entity.Property(e => e.Dkv7Dkv7id).HasColumnName("DKV7_DKV7ID");
            entity.Property(e => e.Dkv7Kv7id).HasColumnName("DKV7_KV7ID");
            entity.Property(e => e.Dkv7ParentId).HasColumnName("DKV7_ParentID");
            entity.Property(e => e.Dkv7ParentTyp).HasColumnName("DKV7_ParentTyp");
            entity.Property(e => e.Dkv7Status).HasColumnName("DKV7_Status");
        });

        modelBuilder.Entity<DokNag>(entity =>
        {
            entity.HasKey(e => e.DoNDoNid)
                .HasName("DoN_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokNag", "CDN", tb =>
                {
                    tb.HasTrigger("DokNag_Delete_Trigger");
                    tb.HasTrigger("DokNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.DoNDataDok, e.DoNNumerString, e.DoNNumerNr }, "DONDataDok")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DoNNumerString, e.DoNNumerNr }, "DokNagKeyNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DoNTytul, "DokNagKeyTytul").HasFillFactor(100);

            entity.Property(e => e.DoNDoNid).HasColumnName("DoN_DoNID");
            entity.Property(e => e.DoNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DoN_DataDok");
            entity.Property(e => e.DoNDdfId).HasColumnName("DoN_DDfId");
            entity.Property(e => e.DoNDotyczy)
                .HasMaxLength(1024)
                .HasColumnName("DoN_Dotyczy");
            entity.Property(e => e.DoNEtapBiezacyLp).HasColumnName("DoN_EtapBiezacyLp");
            entity.Property(e => e.DoNImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DoN_ImportAppId");
            entity.Property(e => e.DoNImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DoN_ImportRowId");
            entity.Property(e => e.DoNKatalog).HasColumnName("DoN_Katalog");
            entity.Property(e => e.DoNNumerNr).HasColumnName("DoN_NumerNr");
            entity.Property(e => e.DoNNumerObcy)
                .HasMaxLength(256)
                .HasColumnName("DoN_NumerObcy");
            entity.Property(e => e.DoNNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([DON_NUMERNR],[DON_NUMERSTRING]))", false)
                .HasColumnName("DoN_NumerPelny");
            entity.Property(e => e.DoNNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DoN_NumerString");
            entity.Property(e => e.DoNOpeModId).HasColumnName("DoN_OpeModID");
            entity.Property(e => e.DoNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DoN_OpeModKod");
            entity.Property(e => e.DoNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DoN_OpeModNazwisko");
            entity.Property(e => e.DoNOpeZalId).HasColumnName("DoN_OpeZalID");
            entity.Property(e => e.DoNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DoN_OpeZalKod");
            entity.Property(e => e.DoNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DoN_OpeZalNazwisko");
            entity.Property(e => e.DoNOpiekunId).HasColumnName("DoN_OpiekunID");
            entity.Property(e => e.DoNOpiekunTyp).HasColumnName("DoN_OpiekunTyp");
            entity.Property(e => e.DoNOriginId).HasColumnName("DoN_OriginId");
            entity.Property(e => e.DoNProcesKod)
                .HasMaxLength(20)
                .HasColumnName("DoN_ProcesKod");
            entity.Property(e => e.DoNSsid).HasColumnName("DoN_SSID");
            entity.Property(e => e.DoNStaModId).HasColumnName("DoN_StaModId");
            entity.Property(e => e.DoNStaZalId).HasColumnName("DoN_StaZalId");
            entity.Property(e => e.DoNStatus).HasColumnName("DoN_Status");
            entity.Property(e => e.DoNTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DoN_TS_Export");
            entity.Property(e => e.DoNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DoN_TS_Mod");
            entity.Property(e => e.DoNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DoN_TS_Zal");
            entity.Property(e => e.DoNTyp).HasColumnName("DoN_Typ");
            entity.Property(e => e.DoNTytul)
                .HasMaxLength(50)
                .HasColumnName("DoN_Tytul");
        });

        modelBuilder.Entity<DokNagEtapy>(entity =>
        {
            entity.HasKey(e => e.DnEDnEid)
                .HasName("DnE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokNagEtapy", "CDN");

            entity.HasIndex(e => new { e.DnEDnPrId, e.DnEDnEid }, "DnEProcesEtapy")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DnEDnEid).HasColumnName("DnE_DnEId");
            entity.Property(e => e.DnECzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("DnE_CzasPrzypomnienia");
            entity.Property(e => e.DnECzyTerminWykonania).HasColumnName("DnE_CzyTerminWykonania");
            entity.Property(e => e.DnEDnPrId).HasColumnName("DnE_DnPrID");
            entity.Property(e => e.DnEEtapId).HasColumnName("DnE_EtapID");
            entity.Property(e => e.DnEKomentarz)
                .HasMaxLength(1024)
                .HasColumnName("DnE_Komentarz");
            entity.Property(e => e.DnEObowiazkowy).HasColumnName("DnE_Obowiazkowy");
            entity.Property(e => e.DnEOpeId).HasColumnName("DnE_OpeId");
            entity.Property(e => e.DnEPrzypomnienie).HasColumnName("DnE_Przypomnienie");
            entity.Property(e => e.DnERezerwujCzas).HasColumnName("DnE_RezerwujCzas");
            entity.Property(e => e.DnETerminDo)
                .HasColumnType("datetime")
                .HasColumnName("DnE_TerminDo");
            entity.Property(e => e.DnETerminOd)
                .HasColumnType("datetime")
                .HasColumnName("DnE_TerminOd");
            entity.Property(e => e.DnETerminWykonania)
                .HasColumnType("datetime")
                .HasColumnName("DnE_TerminWykonania");
            entity.Property(e => e.DnETyp).HasColumnName("DnE_Typ");
            entity.Property(e => e.DnEWykonany).HasColumnName("DnE_Wykonany");

            entity.HasOne(d => d.DnEDnPr).WithMany(p => p.DokNagEtapies)
                .HasForeignKey(d => d.DnEDnPrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DnEProcesEtapy");
        });

        modelBuilder.Entity<DokNagEtapyHistorium>(entity =>
        {
            entity.HasKey(e => e.DnEhDnEhid)
                .HasName("DnEH_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokNagEtapyHistoria", "CDN");

            entity.HasIndex(e => new { e.DnEhDoNid, e.DnEhTyp, e.DnEhDnEhid }, "DnEHDokumenty")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DnEhDoNid, e.DnEhDataZmiany }, "DnEKDataZmiany").HasFillFactor(100);

            entity.Property(e => e.DnEhDnEhid).HasColumnName("DnEH_DnEHID");
            entity.Property(e => e.DnEhDataZmiany)
                .HasColumnType("datetime")
                .HasColumnName("DnEH_DataZmiany");
            entity.Property(e => e.DnEhDoNid).HasColumnName("DnEH_DoNID");
            entity.Property(e => e.DnEhKomentarz)
                .HasMaxLength(1024)
                .HasColumnName("DnEH_Komentarz");
            entity.Property(e => e.DnEhOpeId).HasColumnName("DnEH_OpeID");
            entity.Property(e => e.DnEhOpeKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DnEH_OpeKod");
            entity.Property(e => e.DnEhSymbolPo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DnEH_SymbolPo");
            entity.Property(e => e.DnEhSymbolPrzed)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DnEH_SymbolPrzed");
            entity.Property(e => e.DnEhTyp).HasColumnName("DnEH_Typ");

            entity.HasOne(d => d.DnEhDoN).WithMany(p => p.DokNagEtapyHistoria)
                .HasForeignKey(d => d.DnEhDoNid)
                .HasConstraintName("FK_DnEHDokumenty");
        });

        modelBuilder.Entity<DokNagEtapyKolejne>(entity =>
        {
            entity.HasKey(e => e.DnEkDnEkId)
                .HasName("DnEK_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokNagEtapyKolejne", "CDN");

            entity.HasIndex(e => new { e.DnEkDnPrId, e.DnEkDnEkId }, "DnEKEtap")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DnEkDnPrIdkolejny, e.DnEkDnEkId }, "DnEKKolejny")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DnEkDnEkId).HasColumnName("DnEK_DnEkID");
            entity.Property(e => e.DnEkDnPrId).HasColumnName("DnEK_DnPrID");
            entity.Property(e => e.DnEkDnPrIdkolejny).HasColumnName("DnEK_DnPrIDKolejny");
        });

        modelBuilder.Entity<DokNagEtapyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DokNagEtapyView", "CDN");

            entity.Property(e => e.DnECzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("DnE_CzasPrzypomnienia");
            entity.Property(e => e.DnECzyTerminWykonania).HasColumnName("DnE_CzyTerminWykonania");
            entity.Property(e => e.DnEDnEid).HasColumnName("DnE_DnEId");
            entity.Property(e => e.DnEDnPrId).HasColumnName("DnE_DnPrID");
            entity.Property(e => e.DnEKomentarz)
                .HasMaxLength(1024)
                .HasColumnName("DnE_Komentarz");
            entity.Property(e => e.DnENazwa)
                .HasMaxLength(255)
                .HasColumnName("DnE_Nazwa");
            entity.Property(e => e.DnEObowiazkowy).HasColumnName("DnE_Obowiazkowy");
            entity.Property(e => e.DnEOpeId).HasColumnName("DnE_OpeId");
            entity.Property(e => e.DnEPrzypomnienie).HasColumnName("DnE_Przypomnienie");
            entity.Property(e => e.DnERezerwujCzas).HasColumnName("DnE_RezerwujCzas");
            entity.Property(e => e.DnESymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DnE_Symbol");
            entity.Property(e => e.DnETerminDo)
                .HasColumnType("datetime")
                .HasColumnName("DnE_TerminDo");
            entity.Property(e => e.DnETerminOd)
                .HasColumnType("datetime")
                .HasColumnName("DnE_TerminOd");
            entity.Property(e => e.DnETerminWykonania)
                .HasColumnType("datetime")
                .HasColumnName("DnE_TerminWykonania");
            entity.Property(e => e.DnETyp).HasColumnName("DnE_Typ");
            entity.Property(e => e.DnEWykonany).HasColumnName("DnE_Wykonany");
        });

        modelBuilder.Entity<DokNagPliki>(entity =>
        {
            entity.HasKey(e => e.DnPDnPid)
                .HasName("DnP_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokNagPliki", "CDN", tb => tb.HasTrigger("DokNagPliki_Delete_Trigger"));

            entity.Property(e => e.DnPDnPid).HasColumnName("DnP_DnPID");
            entity.Property(e => e.DnPArchiwalny).HasColumnName("DnP_Archiwalny");
            entity.Property(e => e.DnPDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DnP_DataDok");
            entity.Property(e => e.DnPDlaOcr).HasColumnName("DnP_DlaOcr");
            entity.Property(e => e.DnPDoNid).HasColumnName("DnP_DoNID");
            entity.Property(e => e.DnPFileMode).HasColumnName("DnP_FileMode");
            entity.Property(e => e.DnPNazwaPliku)
                .HasMaxLength(255)
                .HasColumnName("DnP_NazwaPliku");
            entity.Property(e => e.DnPOpeEditId).HasColumnName("DnP_OpeEditId");
            entity.Property(e => e.DnPOpeModId).HasColumnName("DnP_OpeModID");
            entity.Property(e => e.DnPOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DnP_OpeModKod");
            entity.Property(e => e.DnPOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DnP_OpeModNazwisko");
            entity.Property(e => e.DnPOpeZalId).HasColumnName("DnP_OpeZalID");
            entity.Property(e => e.DnPOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DnP_OpeZalKod");
            entity.Property(e => e.DnPOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DnP_OpeZalNazwisko");
            entity.Property(e => e.DnPSciezka)
                .HasMaxLength(255)
                .HasColumnName("DnP_Sciezka");
            entity.Property(e => e.DnPStaEditId).HasColumnName("DnP_StaEditId");
            entity.Property(e => e.DnPStaModId).HasColumnName("DnP_StaModId");
            entity.Property(e => e.DnPStaZalId).HasColumnName("DnP_StaZalId");
            entity.Property(e => e.DnPTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DnP_TS_Mod");
            entity.Property(e => e.DnPTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DnP_TS_Zal");
            entity.Property(e => e.DnPTyp).HasColumnName("DnP_Typ");
            entity.Property(e => e.DnPWbazie).HasColumnName("DnP_WBazie");
            entity.Property(e => e.DnPWersja).HasColumnName("DnP_Wersja");

            entity.HasOne(d => d.DnPDoN).WithMany(p => p.DokNagPlikis)
                .HasForeignKey(d => d.DnPDoNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DnPDoNId");
        });

        modelBuilder.Entity<DokNagPlikiView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DokNagPlikiView", "CDN");

            entity.Property(e => e.DnPArchiwalny).HasColumnName("DnP_Archiwalny");
            entity.Property(e => e.DnPDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DnP_DataDok");
            entity.Property(e => e.DnPDlaOcr).HasColumnName("DnP_DlaOcr");
            entity.Property(e => e.DnPDnPid).HasColumnName("DnP_DnPID");
            entity.Property(e => e.DnPDoNid).HasColumnName("DnP_DoNID");
            entity.Property(e => e.DnPFileMode).HasColumnName("DnP_FileMode");
            entity.Property(e => e.DnPNazwaPliku)
                .HasMaxLength(255)
                .HasColumnName("DnP_NazwaPliku");
            entity.Property(e => e.DnPOpeEditId).HasColumnName("DnP_OpeEditId");
            entity.Property(e => e.DnPOpeModId).HasColumnName("DnP_OpeModID");
            entity.Property(e => e.DnPOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DnP_OpeModKod");
            entity.Property(e => e.DnPOpeModNazwisko)
                .HasMaxLength(50)
                .HasColumnName("DnP_OpeModNazwisko");
            entity.Property(e => e.DnPOpeZalId).HasColumnName("DnP_OpeZalID");
            entity.Property(e => e.DnPOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DnP_OpeZalKod");
            entity.Property(e => e.DnPOpeZalNazwisko)
                .HasMaxLength(50)
                .HasColumnName("DnP_OpeZalNazwisko");
            entity.Property(e => e.DnPSciezka)
                .HasMaxLength(255)
                .HasColumnName("DnP_Sciezka");
            entity.Property(e => e.DnPStaEditId).HasColumnName("DnP_StaEditId");
            entity.Property(e => e.DnPStaModId).HasColumnName("DnP_StaModId");
            entity.Property(e => e.DnPStaZalId).HasColumnName("DnP_StaZalId");
            entity.Property(e => e.DnPTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DnP_TS_Mod");
            entity.Property(e => e.DnPTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DnP_TS_Zal");
            entity.Property(e => e.DnPTyp).HasColumnName("DnP_Typ");
            entity.Property(e => e.DnPWbazie).HasColumnName("DnP_WBazie");
            entity.Property(e => e.DnPWersja).HasColumnName("DnP_Wersja");
        });

        modelBuilder.Entity<DokNagProcesEtapy>(entity =>
        {
            entity.HasKey(e => e.DnPrDnPrId)
                .HasName("DnPr_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokNagProcesEtapy", "CDN", tb => tb.HasTrigger("DokNagProcesEtapy_Delete_Trigger"));

            entity.HasIndex(e => new { e.DnPrDoNid, e.DnPrDnPrId }, "DnPrDokNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DnPrDoNid, e.DnPrLp, e.DnPrPoziom, e.DnPrDnPrId }, "DnPrLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DnPrDnPrId).HasColumnName("DnPr_DnPrID");
            entity.Property(e => e.DnPrDoNid).HasColumnName("DnPr_DoNID");
            entity.Property(e => e.DnPrLp).HasColumnName("DnPr_Lp");
            entity.Property(e => e.DnPrPoprzedniLp).HasColumnName("DnPr_PoprzedniLp");
            entity.Property(e => e.DnPrPoziom).HasColumnName("DnPr_Poziom");
            entity.Property(e => e.DnPrTyp).HasColumnName("DnPr_Typ");

            entity.HasOne(d => d.DnPrDoN).WithMany(p => p.DokNagProcesEtapies)
                .HasForeignKey(d => d.DnPrDoNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DnPrDokNag");
        });

        modelBuilder.Entity<DokNagProcesEtapyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DokNagProcesEtapyView", "CDN");

            entity.Property(e => e.DnPrDnPrId).HasColumnName("DnPr_DnPrID");
            entity.Property(e => e.DnPrDoNid).HasColumnName("DnPr_DoNID");
            entity.Property(e => e.DnPrLp).HasColumnName("DnPr_Lp");
            entity.Property(e => e.DnPrPoprzedniLp).HasColumnName("DnPr_PoprzedniLp");
            entity.Property(e => e.DnPrPoziom).HasColumnName("DnPr_Poziom");
            entity.Property(e => e.DnPrTyp).HasColumnName("DnPr_Typ");
        });

        modelBuilder.Entity<DokNagView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DokNagView", "CDN");

            entity.Property(e => e.DnvDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DNV_DataDok");
            entity.Property(e => e.DnvDdfId).HasColumnName("DNV_DDfId");
            entity.Property(e => e.DnvDoNid).HasColumnName("DNV_DoNID");
            entity.Property(e => e.DnvDotyczy)
                .HasMaxLength(1024)
                .HasColumnName("DNV_Dotyczy");
            entity.Property(e => e.DnvEtapBiezacyLp).HasColumnName("DNV_EtapBiezacyLp");
            entity.Property(e => e.DnvKatalog).HasColumnName("DNV_Katalog");
            entity.Property(e => e.DnvKatalogNazwa)
                .HasMaxLength(50)
                .HasColumnName("DNV_KatalogNazwa");
            entity.Property(e => e.DnvKatalogSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DNV_KatalogSymbol");
            entity.Property(e => e.DnvNumerNr).HasColumnName("DNV_NumerNr");
            entity.Property(e => e.DnvNumerObcy)
                .HasMaxLength(256)
                .HasColumnName("DNV_NumerObcy");
            entity.Property(e => e.DnvNumerPelny)
                .HasMaxLength(30)
                .HasColumnName("DNV_NumerPelny");
            entity.Property(e => e.DnvNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DNV_NumerString");
            entity.Property(e => e.DnvOpeModId).HasColumnName("DNV_OpeModID");
            entity.Property(e => e.DnvOpeZalId).HasColumnName("DNV_OpeZalID");
            entity.Property(e => e.DnvOpiekunId).HasColumnName("DNV_OpiekunID");
            entity.Property(e => e.DnvOpiekunTyp).HasColumnName("DNV_OpiekunTyp");
            entity.Property(e => e.DnvOriginId).HasColumnName("DNV_OriginId");
            entity.Property(e => e.DnvProcesKod)
                .HasMaxLength(20)
                .HasColumnName("DNV_ProcesKod");
            entity.Property(e => e.DnvSsid).HasColumnName("DNV_SSID");
            entity.Property(e => e.DnvStaModId).HasColumnName("DNV_StaModId");
            entity.Property(e => e.DnvStaZalId).HasColumnName("DNV_StaZalId");
            entity.Property(e => e.DnvStatus).HasColumnName("DNV_Status");
            entity.Property(e => e.DnvTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DNV_TS_Mod");
            entity.Property(e => e.DnvTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DNV_TS_Zal");
            entity.Property(e => e.DnvTyp).HasColumnName("DNV_Typ");
            entity.Property(e => e.DnvTytul)
                .HasMaxLength(50)
                .HasColumnName("DNV_Tytul");
        });

        modelBuilder.Entity<DokPodmioty>(entity =>
        {
            entity.HasKey(e => e.DoPDoPid)
                .HasName("DoP_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokPodmioty", "CDN");

            entity.HasIndex(e => e.DoPDoNid, "DoPDokNag").HasFillFactor(100);

            entity.Property(e => e.DoPDoPid).HasColumnName("DoP_DoPId");
            entity.Property(e => e.DoPDoNid).HasColumnName("DoP_DoNID");
            entity.Property(e => e.DoPPodmiotId).HasColumnName("DoP_PodmiotID");
            entity.Property(e => e.DoPPodmiotTyp).HasColumnName("DoP_PodmiotTyp");
        });

        modelBuilder.Entity<DokRelacje>(entity =>
        {
            entity.HasKey(e => e.DoRDoRid)
                .HasName("DoR_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokRelacje", "CDN", tb =>
                {
                    tb.HasTrigger("DokRelacje_Delete_Trigger");
                    tb.HasTrigger("DokRelacje_InsertUpdate_Trigger");
                    tb.HasTrigger("DokRelacje_InsteadOf_Insert_Trigger");
                });

            entity.HasIndex(e => new { e.DoRParentTyp, e.DoRParentId, e.DoRDokumentTyp, e.DoRDokumentId, e.DoRParentGuid, e.DoRDokumentGuid }, "DoRUniqueDok")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DoRDokumentTyp, e.DoRDokumentId }, "DoSDokument").HasFillFactor(100);

            entity.HasIndex(e => new { e.DoRParentTyp, e.DoRParentId, e.DoRDoRid }, "DosParent").HasFillFactor(100);

            entity.Property(e => e.DoRDoRid).HasColumnName("DoR_DoRId");
            entity.Property(e => e.DoRDokumentGuid).HasColumnName("DoR_DokumentGUID");
            entity.Property(e => e.DoRDokumentId).HasColumnName("DoR_DokumentId");
            entity.Property(e => e.DoRDokumentTyp).HasColumnName("DoR_DokumentTyp");
            entity.Property(e => e.DoRFlaga).HasColumnName("DoR_Flaga");
            entity.Property(e => e.DoRHrm).HasColumnName("DoR_HRM");
            entity.Property(e => e.DoRParentGuid).HasColumnName("DoR_ParentGUID");
            entity.Property(e => e.DoRParentId).HasColumnName("DoR_ParentId");
            entity.Property(e => e.DoRParentTyp).HasColumnName("DoR_ParentTyp");
        });

        modelBuilder.Entity<DokumentyDostawyElem>(entity =>
        {
            entity.HasKey(e => e.DdeDdeid)
                .HasName("DDE_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokumentyDostawyElem", "CDN");

            entity.Property(e => e.DdeDdeid).HasColumnName("DDE_DDEID");
            entity.Property(e => e.DdeDdnid).HasColumnName("DDE_DDNID");
            entity.Property(e => e.DdeIlosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DDE_Ilosc");
            entity.Property(e => e.DdeJm)
                .HasMaxLength(20)
                .HasColumnName("DDE_JM");
            entity.Property(e => e.DdeKodCn)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DDE_KodCN");
            entity.Property(e => e.DdeLp).HasColumnName("DDE_Lp");
            entity.Property(e => e.DdeMasaBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DDE_MasaBrutto");
            entity.Property(e => e.DdeMasaNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DDE_MasaNetto");
            entity.Property(e => e.DdeOpis)
                .HasMaxLength(2000)
                .HasColumnName("DDE_Opis");

            entity.HasOne(d => d.DdeDdn).WithMany(p => p.DokumentyDostawyElems)
                .HasForeignKey(d => d.DdeDdnid)
                .HasConstraintName("FK_DokumentyDostawyElemDokumentyDostawyNag");
        });

        modelBuilder.Entity<DokumentyDostawyHistorium>(entity =>
        {
            entity.HasKey(e => e.DdhDdhid)
                .HasName("DDH_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokumentyDostawyHistoria", "CDN");

            entity.HasIndex(e => e.DdhDataOperacji, "DDHDataOperacji").HasFillFactor(100);

            entity.Property(e => e.DdhDdhid).HasColumnName("DDH_DDHID");
            entity.Property(e => e.DdhCheckSum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DDH_CheckSum");
            entity.Property(e => e.DdhDataOperacji)
                .HasColumnType("datetime")
                .HasColumnName("DDH_DataOperacji");
            entity.Property(e => e.DdhDdnid).HasColumnName("DDH_DDNID");
            entity.Property(e => e.DdhDdtyp)
                .HasMaxLength(10)
                .HasColumnName("DDH_DDTyp");
            entity.Property(e => e.DdhKorelacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DDH_Korelacja");
            entity.Property(e => e.DdhModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("DDH_ModificationDate");
            entity.Property(e => e.DdhOpeId).HasColumnName("DDH_OpeID");
            entity.Property(e => e.DdhOpeKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DDH_OpeKod");
            entity.Property(e => e.DdhOpeNazwisko)
                .HasMaxLength(50)
                .HasColumnName("DDH_OpeNazwisko");
            entity.Property(e => e.DdhOpis)
                .HasMaxLength(1000)
                .HasColumnName("DDH_Opis");
            entity.Property(e => e.DdhPlik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DDH_Plik");
            entity.Property(e => e.DdhRodzaj).HasColumnName("DDH_Rodzaj");
            entity.Property(e => e.DdhStatus).HasColumnName("DDH_Status");

            entity.HasOne(d => d.DdhDdn).WithMany(p => p.DokumentyDostawyHistoria)
                .HasForeignKey(d => d.DdhDdnid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DokumentyDostawyHistoriaDokumentDostawyNag");
        });

        modelBuilder.Entity<DokumentyDostawyNag>(entity =>
        {
            entity.HasKey(e => e.DdnDdnid)
                .HasName("DDN_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokumentyDostawyNag", "CDN", tb => tb.HasTrigger("DokumentyDostawyNag_Delete_Trigger"));

            entity.HasIndex(e => e.DdnDdfId, "DDNDokDef").HasFillFactor(100);

            entity.HasIndex(e => new { e.DdnNumerString, e.DdnNumerNr }, "DDNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DdnDdnid).HasColumnName("DDN_DDNID");
            entity.Property(e => e.DdnCarrierKey)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("DDN_CarrierKey");
            entity.Property(e => e.DdnCzasPrzewozu).HasColumnName("DDN_CzasPrzewozu");
            entity.Property(e => e.DdnCzasPrzewozuTyp).HasColumnName("DDN_CzasPrzewozuTyp");
            entity.Property(e => e.DdnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DDN_DataDok");
            entity.Property(e => e.DdnDataFaktury)
                .HasColumnType("datetime")
                .HasColumnName("DDN_DataFaktury");
            entity.Property(e => e.DdnDataWyslaniaPuesc)
                .HasColumnType("datetime")
                .HasColumnName("DDN_DataWyslaniaPuesc");
            entity.Property(e => e.DdnDataWywozu)
                .HasColumnType("datetime")
                .HasColumnName("DDN_DataWywozu");
            entity.Property(e => e.DdnDdfId).HasColumnName("DDN_DDfId");
            entity.Property(e => e.DdnDokumentPuescChecksum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDN_DokumentPuescChecksum");
            entity.Property(e => e.DdnDokumentPuescModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("DDN_DokumentPuescModificationDate");
            entity.Property(e => e.DdnDokumentPuescTyp)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("DDN_DokumentPuescTyp");
            entity.Property(e => e.DdnDokumentZrodlowyTyp).HasColumnName("DDN_DokumentZrodlowyTyp");
            entity.Property(e => e.DdnIdSisc)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDN_IdSisc");
            entity.Property(e => e.DdnImiePuesc)
                .HasMaxLength(50)
                .HasColumnName("DDN_ImiePuesc");
            entity.Property(e => e.DdnNazwiskoPuesc)
                .HasMaxLength(50)
                .HasColumnName("DDN_NazwiskoPuesc");
            entity.Property(e => e.DdnNrFaktury)
                .HasMaxLength(40)
                .HasColumnName("DDN_NrFaktury");
            entity.Property(e => e.DdnNumerNr).HasColumnName("DDN_NumerNr");
            entity.Property(e => e.DdnNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([DDN_NUMERNR],[DDN_NUMERSTRING]))", false)
                .HasColumnName("DDN_NumerPelny");
            entity.Property(e => e.DdnNumerPuesc)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DDN_NumerPuesc");
            entity.Property(e => e.DdnNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DDN_NumerString");
            entity.Property(e => e.DdnOpeModId).HasColumnName("DDN_OpeModID");
            entity.Property(e => e.DdnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDN_OpeModKod");
            entity.Property(e => e.DdnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DDN_OpeModNazwisko");
            entity.Property(e => e.DdnOpeZalId).HasColumnName("DDN_OpeZalID");
            entity.Property(e => e.DdnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDN_OpeZalKod");
            entity.Property(e => e.DdnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DDN_OpeZalNazwisko");
            entity.Property(e => e.DdnPodId).HasColumnName("DDN_PodID");
            entity.Property(e => e.DdnPodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DDN_PodKodPocztowy");
            entity.Property(e => e.DdnPodKodUrzedu)
                .HasMaxLength(8)
                .HasColumnName("DDN_PodKodUrzedu");
            entity.Property(e => e.DdnPodKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("DDN_PodKraj");
            entity.Property(e => e.DdnPodMiasto)
                .HasMaxLength(40)
                .HasColumnName("DDN_PodMiasto");
            entity.Property(e => e.DdnPodNazwa)
                .HasMaxLength(250)
                .HasColumnName("DDN_PodNazwa");
            entity.Property(e => e.DdnPodNipE)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("DDN_PodNipE");
            entity.Property(e => e.DdnPodNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDN_PodNipKraj");
            entity.Property(e => e.DdnPodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("DDN_PodNrDomu");
            entity.Property(e => e.DdnPodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("DDN_PodNrLokalu");
            entity.Property(e => e.DdnPodUlica)
                .HasMaxLength(40)
                .HasColumnName("DDN_PodUlica");
            entity.Property(e => e.DdnPodmiotTyp).HasColumnName("DDN_PodmiotTyp");
            entity.Property(e => e.DdnRecipientKey)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("DDN_RecipientKey");
            entity.Property(e => e.DdnRodzajIdentyfikatoraPodatkowego).HasColumnName("DDN_RodzajIdentyfikatoraPodatkowego");
            entity.Property(e => e.DdnSanemail)
                .HasMaxLength(40)
                .HasColumnName("DDN_SANEmail");
            entity.Property(e => e.DdnSanid).HasColumnName("DDN_SANID");
            entity.Property(e => e.DdnSankodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DDN_SANKodPocztowy");
            entity.Property(e => e.DdnSankodUrzedu)
                .HasMaxLength(8)
                .HasColumnName("DDN_SANKodUrzedu");
            entity.Property(e => e.DdnSanmiasto)
                .HasMaxLength(40)
                .HasColumnName("DDN_SANMiasto");
            entity.Property(e => e.DdnSannrDomu)
                .HasMaxLength(10)
                .HasColumnName("DDN_SANNrDomu");
            entity.Property(e => e.DdnSannrLokalu)
                .HasMaxLength(10)
                .HasColumnName("DDN_SANNrLokalu");
            entity.Property(e => e.DdnSantelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DDN_SANTelefon");
            entity.Property(e => e.DdnSanulica)
                .HasMaxLength(40)
                .HasColumnName("DDN_SANUlica");
            entity.Property(e => e.DdnSanwojewodztwo)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DDN_SANWojewodztwo");
            entity.Property(e => e.DdnSenderKey)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("DDN_SenderKey");
            entity.Property(e => e.DdnStaModId).HasColumnName("DDN_StaModId");
            entity.Property(e => e.DdnStaZalId).HasColumnName("DDN_StaZalId");
            entity.Property(e => e.DdnStatus).HasColumnName("DDN_Status");
            entity.Property(e => e.DdnStatusPuesc)
                .HasMaxLength(1000)
                .HasColumnName("DDN_StatusPuesc");
            entity.Property(e => e.DdnTransportInneOpis)
                .HasMaxLength(350)
                .HasDefaultValue("")
                .HasColumnName("DDN_TransportInneOpis");
            entity.Property(e => e.DdnTrybOdroczony).HasColumnName("DDN_TrybOdroczony");
            entity.Property(e => e.DdnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DDN_TS_Mod");
            entity.Property(e => e.DdnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DDN_TS_Zal");
            entity.Property(e => e.DdnTypZgloszenia).HasColumnName("DDN_TypZgloszenia");
            entity.Property(e => e.DdnTypeOfTransport)
                .HasDefaultValue(2)
                .HasColumnName("DDN_TypeOfTransport");

            entity.HasOne(d => d.DdnDdf).WithMany(p => p.DokumentyDostawyNags)
                .HasForeignKey(d => d.DdnDdfId)
                .HasConstraintName("FK_DDNDokDef");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.DokumentyDostawyNags)
                .HasForeignKey(d => new { d.DdnPodId, d.DdnPodmiotTyp })
                .HasConstraintName("FK_DDNPodmiot");
        });

        modelBuilder.Entity<DokumentyKbview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DokumentyKBView", "CDN");

            entity.Property(e => e.DkbBraId).HasColumnName("DKB_BraId");
            entity.Property(e => e.DkbDataDok)
                .HasColumnType("datetime")
                .HasColumnName("DKB_DataDok");
            entity.Property(e => e.DkbDataKur)
                .HasColumnType("datetime")
                .HasColumnName("DKB_DataKur");
            entity.Property(e => e.DkbDataReal)
                .HasColumnType("datetime")
                .HasColumnName("DKB_DataReal");
            entity.Property(e => e.DkbDataRoz)
                .HasColumnType("datetime")
                .HasColumnName("DKB_DataRoz");
            entity.Property(e => e.DkbDkbid).HasColumnName("DKB_DKBID");
            entity.Property(e => e.DkbDokumentId).HasColumnName("DKB_DokumentID");
            entity.Property(e => e.DkbDokumentTyp).HasColumnName("DKB_DokumentTyp");
            entity.Property(e => e.DkbKatId).HasColumnName("DKB_KatID");
            entity.Property(e => e.DkbKierunek).HasColumnName("DKB_Kierunek");
            entity.Property(e => e.DkbKontoPrzeciwstawne)
                .HasMaxLength(50)
                .HasColumnName("DKB_KontoPrzeciwstawne");
            entity.Property(e => e.DkbKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DKB_KursL");
            entity.Property(e => e.DkbKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DKB_KursM");
            entity.Property(e => e.DkbKursNumer).HasColumnName("DKB_KursNumer");
            entity.Property(e => e.DkbKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DKB_Kwota");
            entity.Property(e => e.DkbKwotaKierunkowa)
                .HasColumnType("decimal(26, 2)")
                .HasColumnName("DKB_KwotaKierunkowa");
            entity.Property(e => e.DkbKwotaKierunkowaSys)
                .HasColumnType("decimal(26, 2)")
                .HasColumnName("DKB_KwotaKierunkowaSys");
            entity.Property(e => e.DkbKwotaRoz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DKB_KwotaRoz");
            entity.Property(e => e.DkbKwotaRozSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DKB_KwotaRozSys");
            entity.Property(e => e.DkbKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DKB_KwotaSys");
            entity.Property(e => e.DkbNumer)
                .HasMaxLength(256)
                .HasColumnName("DKB_Numer");
            entity.Property(e => e.DkbNumerPelny)
                .HasMaxLength(256)
                .HasColumnName("DKB_NumerPelny");
            entity.Property(e => e.DkbOpis)
                .HasMaxLength(1024)
                .HasColumnName("DKB_Opis");
            entity.Property(e => e.DkbPodmiotId).HasColumnName("DKB_PodmiotId");
            entity.Property(e => e.DkbPodmiotTyp).HasColumnName("DKB_PodmiotTyp");
            entity.Property(e => e.DkbRozliczono).HasColumnName("DKB_Rozliczono");
            entity.Property(e => e.DkbRozliczono2).HasColumnName("DKB_Rozliczono2");
            entity.Property(e => e.DkbStan).HasColumnName("DKB_Stan");
            entity.Property(e => e.DkbTermin)
                .HasColumnType("datetime")
                .HasColumnName("DKB_Termin");
            entity.Property(e => e.DkbTypDokumentuKb).HasColumnName("DKB_TypDokumentuKB");
            entity.Property(e => e.DkbWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DKB_Waluta");
            entity.Property(e => e.DkbWalutaDok)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DKB_WalutaDok");
            entity.Property(e => e.DkbWindykacjaSchematId).HasColumnName("DKB_WindykacjaSchematID");
            entity.Property(e => e.DkbWynagrodzenie).HasColumnName("DKB_Wynagrodzenie");
        });

        modelBuilder.Entity<DokumentyKseF>(entity =>
        {
            entity.HasKey(e => e.DkfDkfid)
                .HasName("DKF_Primary")
                .HasFillFactor(100);

            entity.ToTable("DokumentyKSeF", "CDN");

            entity.HasIndex(e => e.DkfTrNid, "DKF_TrNId_index").HasFillFactor(100);

            entity.HasIndex(e => e.DkfVaNid, "DKF_VaNId_index").HasFillFactor(100);

            entity.Property(e => e.DkfDkfid).HasColumnName("DKF_DKFID");
            entity.Property(e => e.DkfAdres).HasColumnName("DKF_Adres");
            entity.Property(e => e.DkfBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DKF_Brutto");
            entity.Property(e => e.DkfDataDostawy)
                .HasColumnType("datetime")
                .HasColumnName("DKF_DataDostawy");
            entity.Property(e => e.DkfDataPozyskania)
                .HasColumnType("datetime")
                .HasColumnName("DKF_DataPozyskania");
            entity.Property(e => e.DkfDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("DKF_DataWystawienia");
            entity.Property(e => e.DkfEmail)
                .HasMaxLength(127)
                .HasColumnName("DKF_Email");
            entity.Property(e => e.DkfEwidencja).HasColumnName("DKF_Ewidencja");
            entity.Property(e => e.DkfFormaPlatnosciKseF)
                .HasMaxLength(30)
                .HasColumnName("DKF_FormaPlatnosciKSeF");
            entity.Property(e => e.DkfFplEid).HasColumnName("DKF_FplEID");
            entity.Property(e => e.DkfFplId).HasColumnName("DKF_FplID");
            entity.Property(e => e.DkfGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("DKF_GLN");
            entity.Property(e => e.DkfGmina)
                .HasMaxLength(40)
                .HasColumnName("DKF_Gmina");
            entity.Property(e => e.DkfHtml).HasColumnName("DKF_Html");
            entity.Property(e => e.DkfKatId).HasColumnName("DKF_KatId");
            entity.Property(e => e.DkfKategoria)
                .HasMaxLength(50)
                .HasColumnName("DKF_Kategoria");
            entity.Property(e => e.DkfKodKraju)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DKF_KodKraju");
            entity.Property(e => e.DkfKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DKF_KodPocztowy");
            entity.Property(e => e.DkfMiejscowosc)
                .HasMaxLength(40)
                .HasColumnName("DKF_Miejscowosc");
            entity.Property(e => e.DkfNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DKF_Netto");
            entity.Property(e => e.DkfNip)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("DKF_NIP");
            entity.Property(e => e.DkfNipkraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DKF_NIPKraj");
            entity.Property(e => e.DkfNrDomu)
                .HasMaxLength(10)
                .HasColumnName("DKF_NrDomu");
            entity.Property(e => e.DkfNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("DKF_NrLokalu");
            entity.Property(e => e.DkfNumerDokumentu)
                .HasMaxLength(256)
                .HasColumnName("DKF_NumerDokumentu");
            entity.Property(e => e.DkfNumerKseF)
                .HasMaxLength(256)
                .HasColumnName("DKF_NumerKSeF");
            entity.Property(e => e.DkfOpis).HasColumnName("DKF_Opis");
            entity.Property(e => e.DkfPelnaNazwa)
                .HasMaxLength(256)
                .HasColumnName("DKF_PelnaNazwa");
            entity.Property(e => e.DkfPoczta)
                .HasMaxLength(40)
                .HasColumnName("DKF_Poczta");
            entity.Property(e => e.DkfPodmiotId).HasColumnName("DKF_PodmiotId");
            entity.Property(e => e.DkfPodmiotMode).HasColumnName("DKF_PodmiotMode");
            entity.Property(e => e.DkfPodmiotTyp).HasColumnName("DKF_PodmiotTyp");
            entity.Property(e => e.DkfPowiat)
                .HasMaxLength(40)
                .HasColumnName("DKF_Powiat");
            entity.Property(e => e.DkfRejestrDocelowy)
                .HasMaxLength(30)
                .HasColumnName("DKF_RejestrDocelowy");
            entity.Property(e => e.DkfRozmiar).HasColumnName("DKF_Rozmiar");
            entity.Property(e => e.DkfRozmiarHtml).HasColumnName("DKF_RozmiarHtml");
            entity.Property(e => e.DkfRozmiarXml).HasColumnName("DKF_RozmiarXml");
            entity.Property(e => e.DkfServer).HasColumnName("DKF_Server");
            entity.Property(e => e.DkfStatus).HasColumnName("DKF_Status");
            entity.Property(e => e.DkfTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DKF_Telefon");
            entity.Property(e => e.DkfTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("DKF_TerminPlatnosci");
            entity.Property(e => e.DkfTerminPlatnosciE)
                .HasColumnType("datetime")
                .HasColumnName("DKF_TerminPlatnosciE");
            entity.Property(e => e.DkfTrNid).HasColumnName("DKF_TrNId");
            entity.Property(e => e.DkfTyp).HasColumnName("DKF_Typ");
            entity.Property(e => e.DkfUlica)
                .HasMaxLength(40)
                .HasColumnName("DKF_Ulica");
            entity.Property(e => e.DkfVaNid).HasColumnName("DKF_VaNId");
            entity.Property(e => e.DkfVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DKF_VAT");
            entity.Property(e => e.DkfWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DKF_Waluta");
            entity.Property(e => e.DkfWartosc).HasColumnName("DKF_Wartosc");
            entity.Property(e => e.DkfWartoscXml).HasColumnName("DKF_WartoscXml");
            entity.Property(e => e.DkfWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("DKF_Wojewodztwo");
            entity.Property(e => e.DkfZrodlo).HasColumnName("DKF_Zrodlo");
        });

        modelBuilder.Entity<DokumentyKsiegowaneView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DokumentyKsiegowaneView", "CDN");

            entity.Property(e => e.DksData)
                .HasColumnType("datetime")
                .HasColumnName("DKs_Data");
            entity.Property(e => e.DksDekId).HasColumnName("DKs_DekId");
            entity.Property(e => e.DksDksId).HasColumnName("DKs_DKsId");
            entity.Property(e => e.DksKprid).HasColumnName("DKs_KPRId");
            entity.Property(e => e.DksKwota)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("DKs_Kwota");
            entity.Property(e => e.DksNumer)
                .HasMaxLength(256)
                .HasColumnName("DKs_Numer");
            entity.Property(e => e.DksRycId).HasColumnName("DKs_RycId");
            entity.Property(e => e.DksTyp).HasColumnName("DKs_Typ");
            entity.Property(e => e.DksTypStr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DKs_TypStr");
        });

        modelBuilder.Entity<Dpd>(entity =>
        {
            entity.HasKey(e => e.DpdDpdid)
                .HasName("DPD_Primary")
                .HasFillFactor(100);

            entity.ToTable("DPD", "CDN");

            entity.Property(e => e.DpdDpdid).HasColumnName("DPD_DPDID");
            entity.Property(e => e.DpdData)
                .HasColumnType("datetime")
                .HasColumnName("DPD_Data");
            entity.Property(e => e.DpdDataKorekty)
                .HasColumnType("datetime")
                .HasColumnName("DPD_DataKorekty");
            entity.Property(e => e.DpdDataKur)
                .HasColumnType("datetime")
                .HasColumnName("DPD_DataKur");
            entity.Property(e => e.DpdDataWys)
                .HasColumnType("datetime")
                .HasColumnName("DPD_DataWys");
            entity.Property(e => e.DpdDekId).HasColumnName("DPD_DekId");
            entity.Property(e => e.DpdDokumentId).HasColumnName("DPD_DokumentID");
            entity.Property(e => e.DpdDokumentTyp).HasColumnName("DPD_DokumentTyp");
            entity.Property(e => e.DpdKprid).HasColumnName("DPD_KPRId");
            entity.Property(e => e.DpdKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DPD_KursL");
            entity.Property(e => e.DpdKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DPD_KursM");
            entity.Property(e => e.DpdKursNumer).HasColumnName("DPD_KursNumer");
            entity.Property(e => e.DpdKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DPD_Kwota");
            entity.Property(e => e.DpdNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DPD_Numer");
            entity.Property(e => e.DpdOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DPD_Opis");
            entity.Property(e => e.DpdRozliczono).HasColumnName("DPD_Rozliczono");
            entity.Property(e => e.DpdSkreslony).HasColumnName("DPD_Skreslony");
            entity.Property(e => e.DpdSumaKwotRozliczen)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DPD_SumaKwotRozliczen");
            entity.Property(e => e.DpdSumaKwotZdarzen)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DPD_SumaKwotZdarzen");
            entity.Property(e => e.DpdTermin)
                .HasColumnType("datetime")
                .HasColumnName("DPD_Termin");
            entity.Property(e => e.DpdWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DPD_Waluta");
        });

        modelBuilder.Entity<DzialZakazy>(entity =>
        {
            entity.HasKey(e => e.DzaDzaId)
                .HasName("DZA_Primary")
                .HasFillFactor(100);

            entity.ToTable("DzialZakazy", "CDN");

            entity.HasIndex(e => new { e.DzaDzlId, e.DzaOpeId }, "DZADzialy")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DzaDzlId, e.DzaOpeId, e.DzaDeklaracjeView }, "DZAZakazDek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DzaDzlId, e.DzaOpeId, e.DzaPracView }, "DZAZakazPrac")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DzaDzlId, e.DzaOpeId, e.DzaWyplatyView }, "DZAZakazWyp")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DzaDzaId).HasColumnName("DZA_DzaId");
            entity.Property(e => e.DzaDeklaracjeEdit).HasColumnName("DZA_DeklaracjeEdit");
            entity.Property(e => e.DzaDeklaracjeInsDel).HasColumnName("DZA_DeklaracjeInsDel");
            entity.Property(e => e.DzaDeklaracjeView).HasColumnName("DZA_DeklaracjeView");
            entity.Property(e => e.DzaDzlId).HasColumnName("DZA_DzlId");
            entity.Property(e => e.DzaEdycja).HasColumnName("DZA_Edycja");
            entity.Property(e => e.DzaListyPlac).HasColumnName("DZA_ListyPlac");
            entity.Property(e => e.DzaOpeId).HasColumnName("DZA_OpeId");
            entity.Property(e => e.DzaPodglad).HasColumnName("DZA_Podglad");
            entity.Property(e => e.DzaPracDel).HasColumnName("DZA_PracDel");
            entity.Property(e => e.DzaPracDodatki).HasColumnName("DZA_PracDodatki");
            entity.Property(e => e.DzaPracEdit).HasColumnName("DZA_PracEdit");
            entity.Property(e => e.DzaPracEtat).HasColumnName("DZA_PracEtat");
            entity.Property(e => e.DzaPracIns).HasColumnName("DZA_PracIns");
            entity.Property(e => e.DzaPracKadry).HasColumnName("DZA_PracKadry");
            entity.Property(e => e.DzaPracPlace).HasColumnName("DZA_PracPlace");
            entity.Property(e => e.DzaPracUmowy).HasColumnName("DZA_PracUmowy");
            entity.Property(e => e.DzaPracView).HasColumnName("DZA_PracView");
            entity.Property(e => e.DzaRptKadry).HasColumnName("DZA_RptKadry");
            entity.Property(e => e.DzaRptPlace).HasColumnName("DZA_RptPlace");
            entity.Property(e => e.DzaUsuwanie).HasColumnName("DZA_Usuwanie");
            entity.Property(e => e.DzaWyplatyEdit).HasColumnName("DZA_WyplatyEdit");
            entity.Property(e => e.DzaWyplatyInsDel).HasColumnName("DZA_WyplatyInsDel");
            entity.Property(e => e.DzaWyplatyView).HasColumnName("DZA_WyplatyView");

            entity.HasOne(d => d.DzaDzl).WithMany(p => p.DzialZakazies)
                .HasForeignKey(d => d.DzaDzlId)
                .HasConstraintName("FK_DZADzialy");
        });

        modelBuilder.Entity<Dzialy>(entity =>
        {
            entity.HasKey(e => e.DzlDzlId)
                .HasName("DZL_Primary")
                .HasFillFactor(100);

            entity.ToTable("Dzialy", "CDN", tb =>
                {
                    tb.HasTrigger("Dzialy_Delete_Trigger");
                    tb.HasTrigger("Dzialy_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.DzlKod, e.DzlDzlId }, "DZLGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.DzlParentId, e.DzlKod }, "DZLInclude")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.DzlLokId, "DZLLokId").HasFillFactor(100);

            entity.HasIndex(e => e.DzlZrgId, "DZLZrgId").HasFillFactor(100);

            entity.Property(e => e.DzlDzlId).HasColumnName("DZL_DzlId");
            entity.Property(e => e.DzlAddMethod).HasColumnName("DZL_AddMethod");
            entity.Property(e => e.DzlAdresWezla)
                .HasMaxLength(512)
                .HasColumnName("DZL_AdresWezla");
            entity.Property(e => e.DzlImpId).HasColumnName("DZL_ImpId");
            entity.Property(e => e.DzlImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DZL_ImportAppId");
            entity.Property(e => e.DzlImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("DZL_ImportRowId");
            entity.Property(e => e.DzlKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DZL_Kod");
            entity.Property(e => e.DzlKonto)
                .HasMaxLength(51)
                .HasColumnName("DZL_Konto");
            entity.Property(e => e.DzlLast).HasColumnName("DZL_Last");
            entity.Property(e => e.DzlLisc).HasColumnName("DZL_Lisc");
            entity.Property(e => e.DzlLokId).HasColumnName("DZL_LokId");
            entity.Property(e => e.DzlNazwa)
                .HasMaxLength(254)
                .HasColumnName("DZL_Nazwa");
            entity.Property(e => e.DzlNieaktywny).HasColumnName("DZL_Nieaktywny");
            entity.Property(e => e.DzlOpeModId).HasColumnName("DZL_OpeModId");
            entity.Property(e => e.DzlOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZL_OpeModKod");
            entity.Property(e => e.DzlOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DZL_OpeModNazwisko");
            entity.Property(e => e.DzlOpeZalId).HasColumnName("DZL_OpeZalId");
            entity.Property(e => e.DzlOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZL_OpeZalKod");
            entity.Property(e => e.DzlOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("DZL_OpeZalNazwisko");
            entity.Property(e => e.DzlParentId).HasColumnName("DZL_ParentId");
            entity.Property(e => e.DzlPoziom).HasColumnName("DZL_Poziom");
            entity.Property(e => e.DzlStaModId).HasColumnName("DZL_StaModId");
            entity.Property(e => e.DzlStaZalId).HasColumnName("DZL_StaZalId");
            entity.Property(e => e.DzlSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DZL_Symbol");
            entity.Property(e => e.DzlTsExport)
                .HasColumnType("datetime")
                .HasColumnName("DZL_TS_Export");
            entity.Property(e => e.DzlTsMod)
                .HasColumnType("datetime")
                .HasColumnName("DZL_TS_Mod");
            entity.Property(e => e.DzlTsZal)
                .HasColumnType("datetime")
                .HasColumnName("DZL_TS_Zal");
            entity.Property(e => e.DzlZrgId).HasColumnName("DZL_ZrgId");

            entity.HasOne(d => d.DzlLok).WithMany(p => p.Dzialies)
                .HasForeignKey(d => d.DzlLokId)
                .HasConstraintName("FK_DZLLokId");

            entity.HasOne(d => d.DzlParent).WithMany(p => p.InverseDzlParent)
                .HasForeignKey(d => d.DzlParentId)
                .HasConstraintName("FK_DZLParrent");

            entity.HasOne(d => d.DzlZrg).WithMany(p => p.Dzialies)
                .HasForeignKey(d => d.DzlZrgId)
                .HasConstraintName("FK_DZLZrgId");
        });

        modelBuilder.Entity<DzialyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DzialyView", "CDN");

            entity.Property(e => e.DvDzlKonto)
                .HasMaxLength(51)
                .HasColumnName("DV_DzlKonto");
            entity.Property(e => e.DvDzlid)
                .ValueGeneratedOnAdd()
                .HasColumnName("DV_DZLID");
            entity.Property(e => e.DvDzlkod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DV_DZLKOD");
            entity.Property(e => e.DvDzllokId).HasColumnName("DV_DZLLokID");
            entity.Property(e => e.DvDzlnazwa)
                .HasMaxLength(254)
                .HasColumnName("DV_DZLNazwa");
            entity.Property(e => e.DvDzlnieaktywny).HasColumnName("DV_DZLNieaktywny");
            entity.Property(e => e.DvDzlparentid).HasColumnName("DV_DZLPARENTID");
        });

        modelBuilder.Entity<DziennikZakazy>(entity =>
        {
            entity.HasKey(e => e.DzZDzZid)
                .HasName("DzZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("DziennikZakazy", "CDN");

            entity.HasIndex(e => new { e.DzZDziId, e.DzZOpeId }, "DzZDziennik")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DzZDzZid).HasColumnName("DzZ_DzZId");
            entity.Property(e => e.DzZDodawanie).HasColumnName("DzZ_Dodawanie");
            entity.Property(e => e.DzZDziId).HasColumnName("DzZ_DziId");
            entity.Property(e => e.DzZKasowanieInne).HasColumnName("DzZ_KasowanieInne");
            entity.Property(e => e.DzZKasowanieWlas).HasColumnName("DzZ_KasowanieWlas");
            entity.Property(e => e.DzZOpeId).HasColumnName("DzZ_OpeId");
            entity.Property(e => e.DzZPodglad).HasColumnName("DzZ_Podglad");
            entity.Property(e => e.DzZZmianaInne).HasColumnName("DzZ_ZmianaInne");
            entity.Property(e => e.DzZZmianaWlas).HasColumnName("DzZ_ZmianaWlas");

            entity.HasOne(d => d.DzZDzi).WithMany(p => p.DziennikZakazies)
                .HasForeignKey(d => d.DzZDziId)
                .HasConstraintName("FK_DzZDziennik");
        });

        modelBuilder.Entity<Dzienniki>(entity =>
        {
            entity.HasKey(e => e.DziDziId)
                .HasName("Dzi_Primary")
                .HasFillFactor(100);

            entity.ToTable("Dzienniki", "CDN", tb =>
                {
                    tb.HasTrigger("Dzienniki_Delete_Trigger");
                    tb.HasTrigger("Dzienniki_Update_Trigger");
                });

            entity.HasIndex(e => new { e.DziOobId, e.DziSymbol }, "DziSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DziDziId).HasColumnName("Dzi_DziId");
            entity.Property(e => e.DziNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dzi_Nazwa");
            entity.Property(e => e.DziOobId).HasColumnName("Dzi_OObId");
            entity.Property(e => e.DziOpeModId).HasColumnName("Dzi_OpeModID");
            entity.Property(e => e.DziOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dzi_OpeModKod");
            entity.Property(e => e.DziOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Dzi_OpeModNazwisko");
            entity.Property(e => e.DziOpeZalId).HasColumnName("Dzi_OpeZalID");
            entity.Property(e => e.DziOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dzi_OpeZalKod");
            entity.Property(e => e.DziOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Dzi_OpeZalNazwisko");
            entity.Property(e => e.DziStaModId).HasColumnName("Dzi_StaModId");
            entity.Property(e => e.DziStaZalId).HasColumnName("Dzi_StaZalId");
            entity.Property(e => e.DziSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Dzi_Symbol");
            entity.Property(e => e.DziTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Dzi_TS_Mod");
            entity.Property(e => e.DziTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Dzi_TS_Zal");

            entity.HasOne(d => d.DziOob).WithMany(p => p.Dziennikis)
                .HasForeignKey(d => d.DziOobId)
                .HasConstraintName("FK_DziSymbol");
        });

        modelBuilder.Entity<ESklepAdresyNadawczeRelacje>(entity =>
        {
            entity.HasKey(e => e.EsanEsanid)
                .HasName("ESAN_Primary")
                .HasFillFactor(100);

            entity.ToTable("eSklepAdresyNadawczeRelacje", "CDN");

            entity.Property(e => e.EsanEsanid).HasColumnName("ESAN_ESANId");
            entity.Property(e => e.EsanESklepId).HasColumnName("ESAN_eSklepID");
            entity.Property(e => e.EsanSaneSklepId).HasColumnName("ESAN_SANeSklepID");
            entity.Property(e => e.EsanSanoptimaId).HasColumnName("ESAN_SANOptimaID");
            entity.Property(e => e.EsanTs)
                .HasColumnType("datetime")
                .HasColumnName("ESAN_TS");

            entity.HasOne(d => d.EsanSanoptima).WithMany(p => p.ESklepAdresyNadawczeRelacjes)
                .HasForeignKey(d => d.EsanSanoptimaId)
                .HasConstraintName("FK_eSklepAdresyNadawczeRelacje");
        });

        modelBuilder.Entity<ESklepFormyPlatnosci>(entity =>
        {
            entity.HasKey(e => e.EsfEsfid)
                .HasName("ESF_Primary")
                .HasFillFactor(100);

            entity.ToTable("eSklepFormyPlatnosci", "CDN");

            entity.Property(e => e.EsfEsfid).HasColumnName("ESF_ESFId");
            entity.Property(e => e.EsfAktywna).HasColumnName("ESF_Aktywna");
            entity.Property(e => e.EsfEssid).HasColumnName("ESF_ESSId");
            entity.Property(e => e.EsfFplId).HasColumnName("ESF_FPlId");
            entity.Property(e => e.EsfIgfplId).HasColumnName("ESF_IGFPlId");
            entity.Property(e => e.EsfNazwa)
                .HasMaxLength(50)
                .HasColumnName("ESF_Nazwa");
            entity.Property(e => e.EsfPlatOnline).HasColumnName("ESF_PlatOnline");

            entity.HasOne(d => d.EsfEss).WithMany(p => p.ESklepFormyPlatnoscis)
                .HasForeignKey(d => d.EsfEssid)
                .HasConstraintName("FK_ESFESSId");
        });

        modelBuilder.Entity<ESklepFormyPlatnosciOnline>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("eSklepFormyPlatnosciOnline", "CDN");

            entity.Property(e => e.EsfoEsfoid).HasColumnName("ESFO_ESFOId");
            entity.Property(e => e.EsfoNazwa)
                .HasMaxLength(50)
                .HasColumnName("ESFO_Nazwa");
        });

        modelBuilder.Entity<ESklepKntRelacje>(entity =>
        {
            entity.HasKey(e => e.EskEskid)
                .HasName("ESK_Primary")
                .HasFillFactor(100);

            entity.ToTable("eSklepKntRelacje", "CDN");

            entity.Property(e => e.EskEskid).HasColumnName("ESK_ESKId");
            entity.Property(e => e.EskESklepId).HasColumnName("ESK_eSklepID");
            entity.Property(e => e.EskKntOptimaId).HasColumnName("ESK_KntOptimaID");
            entity.Property(e => e.EskKnteSklepId).HasColumnName("ESK_KnteSklepID");
        });

        modelBuilder.Entity<ESklepMagazyny>(entity =>
        {
            entity.HasKey(e => e.EsmEsmid)
                .HasName("ESM_Primary")
                .HasFillFactor(100);

            entity.ToTable("eSklepMagazyny", "CDN");

            entity.HasIndex(e => new { e.EsmMagId, e.EsmEssid }, "ESMMagazyn")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.EsmEsmid).HasColumnName("ESM_ESMId");
            entity.Property(e => e.EsmDomyslny).HasColumnName("ESM_Domyslny");
            entity.Property(e => e.EsmEssid).HasColumnName("ESM_ESSId");
            entity.Property(e => e.EsmMagId).HasColumnName("ESM_MagId");

            entity.HasOne(d => d.EsmEss).WithMany(p => p.ESklepMagazynies)
                .HasForeignKey(d => d.EsmEssid)
                .HasConstraintName("FK_eSklepMagazyny");
        });

        modelBuilder.Entity<ESklepRocechy>(entity =>
        {
            entity.HasKey(e => e.EscEscid)
                .HasName("ESC_Primary")
                .HasFillFactor(100);

            entity.ToTable("eSklepROCechy", "CDN");

            entity.Property(e => e.EscEscid).HasColumnName("ESC_ESCID");
            entity.Property(e => e.EscCechaDeAid).HasColumnName("ESC_Cecha_DeAId");
            entity.Property(e => e.EscCechaWartosc)
                .HasMaxLength(255)
                .HasColumnName("ESC_Cecha_Wartosc");
            entity.Property(e => e.EscTrEid).HasColumnName("ESC_TrEID");
            entity.Property(e => e.EscTwRid).HasColumnName("ESC_TwRID");
        });

        modelBuilder.Entity<ESklepStanowiska>(entity =>
        {
            entity.HasKey(e => e.EssEssid)
                .HasName("ESS_Primary")
                .HasFillFactor(100);

            entity.ToTable("eSklepStanowiska", "CDN", tb => tb.HasTrigger("eSklepStanowiska_InsertUpdate_Trigger"));

            entity.Property(e => e.EssEssid).HasColumnName("ESS_ESSId");
            entity.Property(e => e.EssAsserwer)
                .HasMaxLength(254)
                .HasColumnName("ESS_ASSerwer");
            entity.Property(e => e.EssDaneFirmyEmail)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyEmail");
            entity.Property(e => e.EssDaneFirmyFacebook)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyFacebook");
            entity.Property(e => e.EssDaneFirmyGg)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyGG");
            entity.Property(e => e.EssDaneFirmyGsm)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("ESS_DaneFirmyGSM");
            entity.Property(e => e.EssDaneFirmyKodPocztowy)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("ESS_DaneFirmyKodPocztowy");
            entity.Property(e => e.EssDaneFirmyLogo).HasColumnName("ESS_DaneFirmyLogo");
            entity.Property(e => e.EssDaneFirmyMiasto)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyMiasto");
            entity.Property(e => e.EssDaneFirmyNazwa)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyNazwa");
            entity.Property(e => e.EssDaneFirmyNrDomu)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyNrDomu");
            entity.Property(e => e.EssDaneFirmyNrMieszkania)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyNrMieszkania");
            entity.Property(e => e.EssDaneFirmyOpis)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyOpis");
            entity.Property(e => e.EssDaneFirmyRok)
                .HasMaxLength(4)
                .HasColumnName("ESS_DaneFirmyRok");
            entity.Property(e => e.EssDaneFirmySkype)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmySkype");
            entity.Property(e => e.EssDaneFirmyTelefon)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("ESS_DaneFirmyTelefon");
            entity.Property(e => e.EssDaneFirmyUlica)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyUlica");
            entity.Property(e => e.EssDaneFirmyUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("ESS_DaneFirmyURL");
            entity.Property(e => e.EssDaneFirmyWojewodztwo)
                .HasMaxLength(254)
                .HasColumnName("ESS_DaneFirmyWojewodztwo");
            entity.Property(e => e.EssDomyslnaWaluta)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ESS_DomyslnaWaluta");
            entity.Property(e => e.EssDomyslnyMagazyn).HasColumnName("ESS_DomyslnyMagazyn");
            entity.Property(e => e.EssEsklepCena0).HasColumnName("ESS_EsklepCena0");
            entity.Property(e => e.EssExpCennik).HasColumnName("ESS_ExpCennik");
            entity.Property(e => e.EssExpCennikTyp).HasColumnName("ESS_ExpCennikTyp");
            entity.Property(e => e.EssExpGrup).HasColumnName("ESS_ExpGrup");
            entity.Property(e => e.EssExpGrupTyp).HasColumnName("ESS_ExpGrupTyp");
            entity.Property(e => e.EssExpZasoby).HasColumnName("ESS_ExpZasoby");
            entity.Property(e => e.EssFakturaPdf).HasColumnName("ESS_FakturaPDF");
            entity.Property(e => e.EssFormaPlatnosciEspos1).HasColumnName("ESS_FormaPlatnosciESPOS1");
            entity.Property(e => e.EssFormaPlatnosciEspos2).HasColumnName("ESS_FormaPlatnosciESPOS2");
            entity.Property(e => e.EssFormaPlatnosciEspos3).HasColumnName("ESS_FormaPlatnosciESPOS3");
            entity.Property(e => e.EssFormaPlatnosciEspos4).HasColumnName("ESS_FormaPlatnosciESPOS4");
            entity.Property(e => e.EssFormaPlatnosciEspos5).HasColumnName("ESS_FormaPlatnosciESPOS5");
            entity.Property(e => e.EssGuidZamowienia)
                .HasMaxLength(36)
                .HasColumnName("ESS_GuidZamowienia");
            entity.Property(e => e.EssHash)
                .HasMaxLength(54)
                .HasColumnName("ESS_Hash");
            entity.Property(e => e.EssIdIsklep).HasColumnName("ESS_IdISklep");
            entity.Property(e => e.EssIdKlienta)
                .HasMaxLength(10)
                .HasColumnName("ESS_IdKlienta");
            entity.Property(e => e.EssKntGrupa)
                .HasMaxLength(20)
                .HasColumnName("ESS_KntGrupa");
            entity.Property(e => e.EssKntSprawdzEmail).HasColumnName("ESS_KntSprawdzEMail");
            entity.Property(e => e.EssKntSprawdzNip).HasColumnName("ESS_KntSprawdzNIP");
            entity.Property(e => e.EssKontrolaLimituPlat).HasColumnName("ESS_KontrolaLimituPlat");
            entity.Property(e => e.EssKosztPrzesylki).HasColumnName("ESS_KosztPrzesylki");
            entity.Property(e => e.EssNazwa)
                .HasMaxLength(40)
                .HasColumnName("ESS_Nazwa");
            entity.Property(e => e.EssNieaktywny).HasColumnName("ESS_Nieaktywny");
            entity.Property(e => e.EssNrCeny).HasColumnName("ESS_NrCeny");
            entity.Property(e => e.EssNrCenyDomyslnej).HasColumnName("ESS_NrCenyDomyslnej");
            entity.Property(e => e.EssOstatnieDabId).HasColumnName("ESS_OstatnieDabId");
            entity.Property(e => e.EssOstatnieRabatyPusto).HasColumnName("ESS_OstatnieRabatyPusto");
            entity.Property(e => e.EssOstatnieTwrId).HasColumnName("ESS_OstatnieTwrId");
            entity.Property(e => e.EssPierwszaSynchroDefAtr).HasColumnName("ESS_PierwszaSynchroDefAtr");
            entity.Property(e => e.EssPierwszaSynchroLoginy).HasColumnName("ESS_PierwszaSynchroLoginy");
            entity.Property(e => e.EssPierwszaSynchroZgody).HasColumnName("ESS_PierwszaSynchroZgody");
            entity.Property(e => e.EssPomijajKosztyDostawyZeroweFaktura).HasColumnName("ESS_PomijajKosztyDostawyZeroweFaktura");
            entity.Property(e => e.EssPomijajKosztyDostawyZeroweParagon)
                .HasDefaultValue((byte)1)
                .HasColumnName("ESS_PomijajKosztyDostawyZeroweParagon");
            entity.Property(e => e.EssSchematNumeracjiRo).HasColumnName("ESS_SchematNumeracjiRO");
            entity.Property(e => e.EssSchematNumeracjiRoseria)
                .HasMaxLength(5)
                .HasColumnName("ESS_SchematNumeracjiROSeria");
            entity.Property(e => e.EssStanSynchronizacji).HasColumnName("ESS_StanSynchronizacji");
            entity.Property(e => e.EssStanyNaDzien).HasColumnName("ESS_StanyNaDzien");
            entity.Property(e => e.EssStatusZamowienia).HasColumnName("ESS_StatusZamowienia");
            entity.Property(e => e.EssTsSynchro).HasColumnName("ESS_TS_Synchro");
            entity.Property(e => e.EssTsSynchroBin).HasColumnName("ESS_TS_SynchroBin");
            entity.Property(e => e.EssTsSynchroBinPotw).HasColumnName("ESS_TS_SynchroBinPotw");
            entity.Property(e => e.EssTsSynchroGrup).HasColumnName("ESS_TS_SynchroGrup");
            entity.Property(e => e.EssTsSynchroGrupPotw).HasColumnName("ESS_TS_SynchroGrupPotw");
            entity.Property(e => e.EssTsSynchroKnt).HasColumnName("ESS_TS_SynchroKnt");
            entity.Property(e => e.EssTsSynchroKntOptima).HasColumnName("ESS_TS_SynchroKntOptima");
            entity.Property(e => e.EssTsSynchroKntOptimaPotw).HasColumnName("ESS_TS_SynchroKntOptimaPotw");
            entity.Property(e => e.EssTsSynchroKntPotw).HasColumnName("ESS_TS_SynchroKntPotw");
            entity.Property(e => e.EssTsSynchroPotw).HasColumnName("ESS_TS_SynchroPotw");
            entity.Property(e => e.EssTsSynchroSlowniki).HasColumnName("ESS_TS_SynchroSlowniki");
            entity.Property(e => e.EssTsSynchroTwr).HasColumnName("ESS_TS_SynchroTwr");
            entity.Property(e => e.EssTsSynchroTwrPotw).HasColumnName("ESS_TS_SynchroTwrPotw");
            entity.Property(e => e.EssTsSynchroZestawyTwr).HasColumnName("ESS_TS_SynchroZestawyTwr");
            entity.Property(e => e.EssTsSynchroZestawyTwrPotw).HasColumnName("ESS_TS_SynchroZestawyTwrPotw");
            entity.Property(e => e.EssTwGnumer).HasColumnName("ESS_TwGNumer");
            entity.Property(e => e.EssTyp).HasColumnName("ESS_Typ");
            entity.Property(e => e.EssTypSklepu).HasColumnName("ESS_TypSklepu");
            entity.Property(e => e.EssWersjaProt)
                .HasDefaultValue(15m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ESS_WersjaProt");
            entity.Property(e => e.EssWyslijCechyPartii).HasColumnName("ESS_WyslijCechyPartii");
            entity.Property(e => e.EssWyslijStanWszystkieMag).HasColumnName("ESS_WyslijStanWszystkieMag");
        });

        modelBuilder.Entity<ESklepWaluty>(entity =>
        {
            entity.HasKey(e => e.EswEswid)
                .HasName("ESW_Primary")
                .HasFillFactor(100);

            entity.ToTable("eSklepWaluty", "CDN", tb => tb.HasTrigger("eSklepWaluty_InsertUpdate_Trigger"));

            entity.Property(e => e.EswEswid).HasColumnName("ESW_ESWId");
            entity.Property(e => e.EswEssid).HasColumnName("ESW_ESSId");
            entity.Property(e => e.EswKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ESW_KursL");
            entity.Property(e => e.EswKursM)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ESW_KursM");
            entity.Property(e => e.EswTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ESW_TS_Mod");
            entity.Property(e => e.EswWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ESW_Waluta");
            entity.Property(e => e.EswZkonfig).HasColumnName("ESW_ZKonfig");

            entity.HasOne(d => d.EswEss).WithMany(p => p.ESklepWaluties)
                .HasForeignKey(d => d.EswEssid)
                .HasConstraintName("FK_ESWESSId");
        });

        modelBuilder.Entity<EwidDodElem>(entity =>
        {
            entity.HasKey(e => e.EdeEdeid)
                .HasName("EDE_Primary")
                .HasFillFactor(100);

            entity.ToTable("EwidDodElem", "CDN");

            entity.HasIndex(e => e.EdeKatId, "EDEKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.EdeEdnid, e.EdeEdeid }, "EDENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.EdeEdeid).HasColumnName("EDE_EDEID");
            entity.Property(e => e.EdeEdnid).HasColumnName("EDE_EDNID");
            entity.Property(e => e.EdeKatId).HasColumnName("EDE_KatID");
            entity.Property(e => e.EdeKolumnaKpr).HasColumnName("EDE_KolumnaKPR");
            entity.Property(e => e.EdeKolumnaRyc).HasColumnName("EDE_KolumnaRYC");
            entity.Property(e => e.EdeKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EDE_KontoMa");
            entity.Property(e => e.EdeKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EDE_KontoWn");
            entity.Property(e => e.EdeKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("EDE_Kwota");

            entity.HasOne(d => d.EdeEdn).WithMany(p => p.EwidDodElems)
                .HasForeignKey(d => d.EdeEdnid)
                .HasConstraintName("FK_EDENaglowek");

            entity.HasOne(d => d.EdeKat).WithMany(p => p.EwidDodElems)
                .HasForeignKey(d => d.EdeKatId)
                .HasConstraintName("FK_EDEKategoria");
        });

        modelBuilder.Entity<EwidDodNag>(entity =>
        {
            entity.HasKey(e => e.EdnEdnid)
                .HasName("EDN_Primary")
                .HasFillFactor(100);

            entity.ToTable("EwidDodNag", "CDN", tb =>
                {
                    tb.HasTrigger("EwidDodNag_DeleteHandler");
                    tb.HasTrigger("EwidDodNag_Delete_Trigger");
                    tb.HasTrigger("EwidDodNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.EdnTyp, e.EdnRejestr, e.EdnDataDok, e.EdnEdnid }, "EDNChronoRej")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.EdnDekId, "EDNDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.EdnDdfId, "EDNDokDef").HasFillFactor(100);

            entity.HasIndex(e => e.EdnImportRowId, "EDNGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.EdnKatId, e.EdnTyp, e.EdnDataWys, e.EdnEdnid }, "EDNKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.EdnTyp, e.EdnRejestr, e.EdnRokMies, e.EdnLp, e.EdnEdnid }, "EDNLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.EdnNumerString, e.EdnNumerNr }, "EDNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.EdnNumerPelny, "EDNNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.EdnFplId, "EDNPlatnosc").HasFillFactor(100);

            entity.HasIndex(e => new { e.EdnPodId, e.EdnPodmiotTyp, e.EdnTyp, e.EdnDataWys, e.EdnEdnid }, "EDNPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.EdnPodZalId, e.EdnPodmiotZalTyp }, "EDNPodmiotZal").HasFillFactor(100);

            entity.HasIndex(e => e.EdnPreDekId, "EDNPreDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.EdnRycId, "EDNRyczalt").HasFillFactor(100);

            entity.HasIndex(e => e.EdnKprid, "EDNZapisy").HasFillFactor(100);

            entity.Property(e => e.EdnEdnid).HasColumnName("EDN_EDNID");
            entity.Property(e => e.EdnAdres2)
                .HasMaxLength(40)
                .HasColumnName("EDN_Adres2");
            entity.Property(e => e.EdnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("EDN_DataDok");
            entity.Property(e => e.EdnDataKur)
                .HasColumnType("datetime")
                .HasColumnName("EDN_DataKur");
            entity.Property(e => e.EdnDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("EDN_DataOpe");
            entity.Property(e => e.EdnDataWys)
                .HasColumnType("datetime")
                .HasColumnName("EDN_DataWys");
            entity.Property(e => e.EdnDdfId).HasColumnName("EDN_DDfId");
            entity.Property(e => e.EdnDekId).HasColumnName("EDN_DekId");
            entity.Property(e => e.EdnDnpId).HasColumnName("EDN_DnpID");
            entity.Property(e => e.EdnFplId).HasColumnName("EDN_FPlId");
            entity.Property(e => e.EdnGmina)
                .HasMaxLength(40)
                .HasColumnName("EDN_Gmina");
            entity.Property(e => e.EdnImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("EDN_ImportAppId");
            entity.Property(e => e.EdnImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("EDN_ImportRowId");
            entity.Property(e => e.EdnKatId).HasColumnName("EDN_KatID");
            entity.Property(e => e.EdnKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EDN_Kategoria");
            entity.Property(e => e.EdnKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EDN_KodPocztowy");
            entity.Property(e => e.EdnKontrolaSumy).HasColumnName("EDN_KontrolaSumy");
            entity.Property(e => e.EdnKprid).HasColumnName("EDN_KPRId");
            entity.Property(e => e.EdnKraj)
                .HasMaxLength(40)
                .HasColumnName("EDN_Kraj");
            entity.Property(e => e.EdnKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("EDN_KursL");
            entity.Property(e => e.EdnKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("EDN_KursM");
            entity.Property(e => e.EdnKursNumer).HasColumnName("EDN_KursNumer");
            entity.Property(e => e.EdnKwotaRazem)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("EDN_KwotaRazem");
            entity.Property(e => e.EdnKwotaRazemSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("EDN_KwotaRazemSys");
            entity.Property(e => e.EdnLp).HasColumnName("EDN_Lp");
            entity.Property(e => e.EdnMagazynDocelowy)
                .HasMaxLength(20)
                .HasColumnName("EDN_MagazynDocelowy");
            entity.Property(e => e.EdnMagazynZrodlowy)
                .HasMaxLength(20)
                .HasColumnName("EDN_MagazynZrodlowy");
            entity.Property(e => e.EdnMiasto)
                .HasMaxLength(40)
                .HasColumnName("EDN_Miasto");
            entity.Property(e => e.EdnNazwa1)
                .HasMaxLength(50)
                .HasColumnName("EDN_Nazwa1");
            entity.Property(e => e.EdnNazwa2)
                .HasMaxLength(50)
                .HasColumnName("EDN_Nazwa2");
            entity.Property(e => e.EdnNazwa3)
                .HasMaxLength(250)
                .HasColumnName("EDN_Nazwa3");
            entity.Property(e => e.EdnNipE)
                .HasMaxLength(20)
                .HasColumnName("EDN_NipE");
            entity.Property(e => e.EdnNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("EDN_NipKraj");
            entity.Property(e => e.EdnNrDomu)
                .HasMaxLength(10)
                .HasColumnName("EDN_NrDomu");
            entity.Property(e => e.EdnNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("EDN_NrLokalu");
            entity.Property(e => e.EdnNumerNr).HasColumnName("EDN_NumerNr");
            entity.Property(e => e.EdnNumerObcy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("EDN_NumerObcy");
            entity.Property(e => e.EdnNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([EDN_NUMERNR],[EDN_NUMERSTRING]))", false)
                .HasColumnName("EDN_NumerPelny");
            entity.Property(e => e.EdnNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("EDN_NumerString");
            entity.Property(e => e.EdnOpeModId).HasColumnName("EDN_OpeModID");
            entity.Property(e => e.EdnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("EDN_OpeModKod");
            entity.Property(e => e.EdnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("EDN_OpeModNazwisko");
            entity.Property(e => e.EdnOpeZalId).HasColumnName("EDN_OpeZalID");
            entity.Property(e => e.EdnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("EDN_OpeZalKod");
            entity.Property(e => e.EdnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("EDN_OpeZalNazwisko");
            entity.Property(e => e.EdnOpis)
                .HasMaxLength(2048)
                .HasDefaultValue("")
                .HasColumnName("EDN_Opis");
            entity.Property(e => e.EdnPlatnikAdres2)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikAdres2");
            entity.Property(e => e.EdnPlatnikGmina)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikGmina");
            entity.Property(e => e.EdnPlatnikId).HasColumnName("EDN_PlatnikID");
            entity.Property(e => e.EdnPlatnikKodPocztowy)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikKodPocztowy");
            entity.Property(e => e.EdnPlatnikKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikKraj");
            entity.Property(e => e.EdnPlatnikMiasto)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikMiasto");
            entity.Property(e => e.EdnPlatnikNazwa1)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikNazwa1");
            entity.Property(e => e.EdnPlatnikNazwa2)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikNazwa2");
            entity.Property(e => e.EdnPlatnikNazwa3)
                .HasMaxLength(250)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikNazwa3");
            entity.Property(e => e.EdnPlatnikNrDomu)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikNrDomu");
            entity.Property(e => e.EdnPlatnikNrLokalu)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikNrLokalu");
            entity.Property(e => e.EdnPlatnikPoczta)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikPoczta");
            entity.Property(e => e.EdnPlatnikPowiat)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikPowiat");
            entity.Property(e => e.EdnPlatnikRachunekLp).HasColumnName("EDN_PlatnikRachunekLp");
            entity.Property(e => e.EdnPlatnikRachunekNr)
                .HasMaxLength(51)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikRachunekNr");
            entity.Property(e => e.EdnPlatnikTyp).HasColumnName("EDN_PlatnikTyp");
            entity.Property(e => e.EdnPlatnikUlica)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikUlica");
            entity.Property(e => e.EdnPlatnikWojewodztwo)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("EDN_PlatnikWojewodztwo");
            entity.Property(e => e.EdnPlatnosci).HasColumnName("EDN_Platnosci");
            entity.Property(e => e.EdnPoczta)
                .HasMaxLength(40)
                .HasColumnName("EDN_Poczta");
            entity.Property(e => e.EdnPodId).HasColumnName("EDN_PodID");
            entity.Property(e => e.EdnPodZalId).HasColumnName("EDN_PodZalId");
            entity.Property(e => e.EdnPodmiotTyp).HasColumnName("EDN_PodmiotTyp");
            entity.Property(e => e.EdnPodmiotZalTyp).HasColumnName("EDN_PodmiotZalTyp");
            entity.Property(e => e.EdnPowiat)
                .HasMaxLength(40)
                .HasColumnName("EDN_Powiat");
            entity.Property(e => e.EdnPreDekId).HasColumnName("EDN_PreDekId");
            entity.Property(e => e.EdnRejestr)
                .HasMaxLength(20)
                .HasColumnName("EDN_Rejestr");
            entity.Property(e => e.EdnRokMies)
                .HasComputedColumnSql("((100)*datepart(year,[EDN_DATADOK])+datepart(month,[EDN_DATADOK]))", false)
                .HasColumnName("EDN_RokMies");
            entity.Property(e => e.EdnRycId).HasColumnName("EDN_RycId");
            entity.Property(e => e.EdnStaModId).HasColumnName("EDN_StaModId");
            entity.Property(e => e.EdnStaZalId).HasColumnName("EDN_StaZalId");
            entity.Property(e => e.EdnTermin)
                .HasColumnType("datetime")
                .HasColumnName("EDN_Termin");
            entity.Property(e => e.EdnTsExport)
                .HasColumnType("datetime")
                .HasColumnName("EDN_TS_Export");
            entity.Property(e => e.EdnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("EDN_TS_Mod");
            entity.Property(e => e.EdnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("EDN_TS_Zal");
            entity.Property(e => e.EdnTyp).HasColumnName("EDN_Typ");
            entity.Property(e => e.EdnUlica)
                .HasMaxLength(40)
                .HasColumnName("EDN_Ulica");
            entity.Property(e => e.EdnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EDN_Waluta");
            entity.Property(e => e.EdnWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("EDN_Wojewodztwo");
            entity.Property(e => e.EdnZakId).HasColumnName("EDN_ZakID");

            entity.HasOne(d => d.EdnDdf).WithMany(p => p.EwidDodNags)
                .HasForeignKey(d => d.EdnDdfId)
                .HasConstraintName("FK_EDNDokDef");

            entity.HasOne(d => d.EdnFpl).WithMany(p => p.EwidDodNags)
                .HasForeignKey(d => d.EdnFplId)
                .HasConstraintName("FK_EDNPlatnosc");

            entity.HasOne(d => d.EdnKat).WithMany(p => p.EwidDodNags)
                .HasForeignKey(d => d.EdnKatId)
                .HasConstraintName("FK_EDNKategoria");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.EwidDodNags)
                .HasForeignKey(d => new { d.EdnPodId, d.EdnPodmiotTyp })
                .HasConstraintName("FK_EDNPodmiot");
        });

        modelBuilder.Entity<FaCyklElem>(entity =>
        {
            entity.HasKey(e => e.FceFcEid)
                .HasName("FCE_Primary")
                .HasFillFactor(100);

            entity.ToTable("FaCyklElem", "CDN", tb => tb.HasTrigger("FaCyklElem_Delete_Trigger"));

            entity.HasIndex(e => new { e.FceFcEid, e.FceLp }, "FcELp").HasFillFactor(100);

            entity.HasIndex(e => new { e.FceFcNid, e.FceFcEid, e.FceLp }, "FcENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.FceFcEid).HasColumnName("FCE_FcEID");
            entity.Property(e => e.FceCena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCE_Cena");
            entity.Property(e => e.FceCenaBrutto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCE_CenaBrutto");
            entity.Property(e => e.FceCenaBruttoPln)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCE_CenaBruttoPLN");
            entity.Property(e => e.FceCenaNettoPln)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCE_CenaNettoPLN");
            entity.Property(e => e.FceCenaTyp).HasColumnName("FCE_CenaTyp");
            entity.Property(e => e.FceCenaZczteremaMiejscami).HasColumnName("FCE_CenaZCzteremaMiejscami");
            entity.Property(e => e.FceCloneId).HasColumnName("FCE_CloneId");
            entity.Property(e => e.FceFcNid).HasColumnName("FCE_FcNID");
            entity.Property(e => e.FceGrupaCenowa).HasColumnName("FCE_GrupaCenowa");
            entity.Property(e => e.FceIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("FCE_Ilosc");
            entity.Property(e => e.FceIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("FCE_IloscJM");
            entity.Property(e => e.FceIloscTyp).HasColumnName("FCE_IloscTyp");
            entity.Property(e => e.FceJm)
                .HasMaxLength(20)
                .HasColumnName("FCE_JM");
            entity.Property(e => e.FceJmprzelicznikL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FCE_JMPrzelicznikL");
            entity.Property(e => e.FceJmprzelicznikM)
                .HasDefaultValue(1)
                .HasColumnName("FCE_JMPrzelicznikM");
            entity.Property(e => e.FceJmz)
                .HasMaxLength(20)
                .HasColumnName("FCE_JMZ");
            entity.Property(e => e.FceKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FCE_Kod");
            entity.Property(e => e.FceLp).HasColumnName("FCE_Lp");
            entity.Property(e => e.FceMagId).HasColumnName("FCE_MagId");
            entity.Property(e => e.FceNazwa)
                .HasMaxLength(255)
                .HasColumnName("FCE_Nazwa");
            entity.Property(e => e.FceTwrId).HasColumnName("FCE_TwrID");
            entity.Property(e => e.FceTypNb).HasColumnName("FCE_TypNB");
            entity.Property(e => e.FceWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FCE_Waluta");

            entity.HasOne(d => d.FceFcN).WithMany(p => p.FaCyklElems)
                .HasForeignKey(d => d.FceFcNid)
                .HasConstraintName("FK_FcENaglowek");
        });

        modelBuilder.Entity<FaCyklKnt>(entity =>
        {
            entity.HasKey(e => e.FckFcKid)
                .HasName("FCK_Primary")
                .HasFillFactor(100);

            entity.ToTable("FaCyklKnt", "CDN", tb => tb.HasTrigger("FaCyklKnt_Delete_Trigger"));

            entity.HasIndex(e => new { e.FckTypKnt, e.FckKod }, "FCKKod").HasFillFactor(100);

            entity.HasIndex(e => new { e.FckFcNid, e.FckFcKid }, "FCKNaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.FckPodmiotTyp, e.FckPodmiotId }, "FaCyklKnt").HasFillFactor(100);

            entity.HasIndex(e => new { e.FckTypKnt, e.FckPodmiotTyp, e.FckPodmiotId, e.FckFcNid }, "FcKKontrahent").HasFillFactor(100);

            entity.Property(e => e.FckFcKid).HasColumnName("FCK_FcKID");
            entity.Property(e => e.FckFcNid).HasColumnName("FCK_FcNID");
            entity.Property(e => e.FckKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FCK_Kod");
            entity.Property(e => e.FckLpDlaTypKnt).HasColumnName("FCK_LpDlaTypKnt");
            entity.Property(e => e.FckNazwa)
                .HasMaxLength(350)
                .HasColumnName("FCK_Nazwa");
            entity.Property(e => e.FckObowiazujeDo).HasColumnName("FCK_ObowiazujeDo");
            entity.Property(e => e.FckObowiazujeOd).HasColumnName("FCK_ObowiazujeOd");
            entity.Property(e => e.FckOdbiorcaId).HasColumnName("FCK_OdbiorcaID");
            entity.Property(e => e.FckOdbiorcaKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FCK_OdbiorcaKod");
            entity.Property(e => e.FckOdbiorcaNazwa)
                .HasMaxLength(352)
                .HasDefaultValue("")
                .HasColumnName("FCK_OdbiorcaNazwa");
            entity.Property(e => e.FckOdbiorcaTyp).HasColumnName("FCK_OdbiorcaTyp");
            entity.Property(e => e.FckOpisNaFakturze)
                .HasMaxLength(1024)
                .HasColumnName("FCK_OpisNaFakturze");
            entity.Property(e => e.FckPodmiotId).HasColumnName("FCK_PodmiotID");
            entity.Property(e => e.FckPodmiotTyp).HasColumnName("FCK_PodmiotTyp");
            entity.Property(e => e.FckTerminDo)
                .HasColumnType("datetime")
                .HasColumnName("FCK_TerminDo");
            entity.Property(e => e.FckTerminOd)
                .HasColumnType("datetime")
                .HasColumnName("FCK_TerminOd");
            entity.Property(e => e.FckTypKnt).HasColumnName("FCK_TypKnt");

            entity.HasOne(d => d.FckFcN).WithMany(p => p.FaCyklKnts)
                .HasForeignKey(d => d.FckFcNid)
                .HasConstraintName("FK_FCKNaglowek");
        });

        modelBuilder.Entity<FaCyklNag>(entity =>
        {
            entity.HasKey(e => e.FcnFcNid)
                .HasName("FCN_Primary")
                .HasFillFactor(100);

            entity.ToTable("FaCyklNag", "CDN", tb => tb.HasTrigger("FaCyklNag_Delete_Trigger"));

            entity.HasIndex(e => e.FcnKod, "FCNKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.FcnNazwa, "FCNNazwa").HasFillFactor(100);

            entity.Property(e => e.FcnFcNid).HasColumnName("FCN_FcNID");
            entity.Property(e => e.FcnAutomatEmailSzablonId).HasColumnName("FCN_AutomatEmailSzablonId");
            entity.Property(e => e.FcnAutomatWydrukId).HasColumnName("FCN_AutomatWydrukId");
            entity.Property(e => e.FcnAutomatWydrukStandardowy).HasColumnName("FCN_AutomatWydrukStandardowy");
            entity.Property(e => e.FcnAutomatWyslijEmailDoKnt).HasColumnName("FCN_AutomatWyslijEmailDoKnt");
            entity.Property(e => e.FcnBlokujDuplikatyKnt)
                .HasDefaultValue((byte)1)
                .HasColumnName("FCN_BlokujDuplikatyKnt");
            entity.Property(e => e.FcnCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("FCN_CzasPrzypomnienia");
            entity.Property(e => e.FcnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("FCN_DataDok");
            entity.Property(e => e.FcnDataDokDzienMiesiaca).HasColumnName("FCN_DataDokDzienMiesiaca");
            entity.Property(e => e.FcnDataDokTyp).HasColumnName("FCN_DataDokTyp");
            entity.Property(e => e.FcnDataKolejnegoGen)
                .HasColumnType("datetime")
                .HasColumnName("FCN_DataKolejnegoGen");
            entity.Property(e => e.FcnDataKur)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("FCN_DataKur");
            entity.Property(e => e.FcnDataOstatniej)
                .HasColumnType("datetime")
                .HasColumnName("FCN_DataOstatniej");
            entity.Property(e => e.FcnDataSprzedazy)
                .HasColumnType("datetime")
                .HasColumnName("FCN_DataSprzedazy");
            entity.Property(e => e.FcnDataSprzedazyDzienMiesiaca).HasColumnName("FCN_DataSprzedazyDzienMiesiaca");
            entity.Property(e => e.FcnDataSprzedazyTyp).HasColumnName("FCN_DataSprzedazyTyp");
            entity.Property(e => e.FcnDdfId).HasColumnName("FCN_DdfID");
            entity.Property(e => e.FcnDoBufora).HasColumnName("FCN_DoBufora");
            entity.Property(e => e.FcnDzienMiesiaca).HasColumnName("FCN_DzienMiesiaca");
            entity.Property(e => e.FcnDzienTygodnia).HasColumnName("FCN_DzienTygodnia");
            entity.Property(e => e.FcnFplId).HasColumnName("FCN_FplID");
            entity.Property(e => e.FcnFplTyp).HasColumnName("FCN_FPlTyp");
            entity.Property(e => e.FcnGenerujAutomatycznie).HasColumnName("FCN_GenerujAutomatycznie");
            entity.Property(e => e.FcnKatId).HasColumnName("FCN_KatID");
            entity.Property(e => e.FcnKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FCN_Kategoria");
            entity.Property(e => e.FcnKategoriaTyp).HasColumnName("FCN_KategoriaTyp");
            entity.Property(e => e.FcnKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FCN_Kod");
            entity.Property(e => e.FcnKursL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("FCN_KursL");
            entity.Property(e => e.FcnKursM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("FCN_KursM");
            entity.Property(e => e.FcnKursNumer)
                .HasDefaultValue(-1)
                .HasColumnName("FCN_KursNumer");
            entity.Property(e => e.FcnMagId).HasColumnName("FCN_MagID");
            entity.Property(e => e.FcnNazwa)
                .HasMaxLength(50)
                .HasColumnName("FCN_Nazwa");
            entity.Property(e => e.FcnNieaktywny).HasColumnName("FCN_Nieaktywny");
            entity.Property(e => e.FcnNumerNr).HasColumnName("FCN_NumerNr");
            entity.Property(e => e.FcnNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("FCN_NumerString");
            entity.Property(e => e.FcnOkresCyklu).HasColumnName("FCN_OkresCyklu");
            entity.Property(e => e.FcnOpeModId).HasColumnName("FCN_OpeModID");
            entity.Property(e => e.FcnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FCN_OpeModKod");
            entity.Property(e => e.FcnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("FCN_OpeModNazwisko");
            entity.Property(e => e.FcnOpeZalId).HasColumnName("FCN_OpeZalID");
            entity.Property(e => e.FcnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FCN_OpeZalKod");
            entity.Property(e => e.FcnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("FCN_OpeZalNazwisko");
            entity.Property(e => e.FcnOpisNaFakturze)
                .HasMaxLength(1024)
                .HasColumnName("FCN_OpisNaFakturze");
            entity.Property(e => e.FcnPowtarzajCo).HasColumnName("FCN_PowtarzajCo");
            entity.Property(e => e.FcnPowtarzajCoData)
                .HasColumnType("datetime")
                .HasColumnName("FCN_PowtarzajCoData");
            entity.Property(e => e.FcnPrzenosNaFaAtrybutyKartyKnt)
                .HasDefaultValue((byte)1)
                .HasColumnName("FCN_PrzenosNaFaAtrybutyKartyKnt");
            entity.Property(e => e.FcnPrzypomnienie).HasColumnName("FCN_Przypomnienie");
            entity.Property(e => e.FcnStaModId).HasColumnName("FCN_StaModID");
            entity.Property(e => e.FcnStaZalId).HasColumnName("FCN_StaZalID");
            entity.Property(e => e.FcnTerminPlatDzien).HasColumnName("FCN_TerminPlatDzien");
            entity.Property(e => e.FcnTerminPlatTyp).HasColumnName("FCN_TerminPlatTyp");
            entity.Property(e => e.FcnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("FCN_TS_Mod");
            entity.Property(e => e.FcnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("FCN_TS_Zal");
            entity.Property(e => e.FcnTypDokumentu).HasColumnName("FCN_TypDokumentu");
            entity.Property(e => e.FcnTypNb).HasColumnName("FCN_TypNB");
            entity.Property(e => e.FcnUwagi)
                .HasMaxLength(254)
                .HasColumnName("FCN_Uwagi");
            entity.Property(e => e.FcnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FCN_Waluta");
        });

        modelBuilder.Entity<FaCyklTwrKnt>(entity =>
        {
            entity.HasKey(e => e.FctFcTid)
                .HasName("FCT_Primary")
                .HasFillFactor(100);

            entity.ToTable("FaCyklTwrKnt", "CDN");

            entity.HasIndex(e => new { e.FctFcEid, e.FctTypKnt, e.FctKntLp }, "FcTPozycjaElem").HasFillFactor(100);

            entity.Property(e => e.FctFcTid).HasColumnName("FCT_FcTID");
            entity.Property(e => e.FctCena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCT_Cena");
            entity.Property(e => e.FctCenaBrutto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCT_CenaBrutto");
            entity.Property(e => e.FctCenaBruttoPln)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCT_CenaBruttoPLN");
            entity.Property(e => e.FctCenaNettoPln)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("FCT_CenaNettoPLN");
            entity.Property(e => e.FctCenaZczteremaMiejscami).HasColumnName("FCT_CenaZCzteremaMiejscami");
            entity.Property(e => e.FctFcEid).HasColumnName("FCT_FcEID");
            entity.Property(e => e.FctFcKid).HasColumnName("FCT_FcKID");
            entity.Property(e => e.FctIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("FCT_Ilosc");
            entity.Property(e => e.FctJm)
                .HasMaxLength(20)
                .HasColumnName("FCT_JM");
            entity.Property(e => e.FctKntLp).HasColumnName("FCT_KntLp");
            entity.Property(e => e.FctNabywcaKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FCT_NabywcaKod");
            entity.Property(e => e.FctNabywcaNazwa)
                .HasMaxLength(352)
                .HasColumnName("FCT_NabywcaNazwa");
            entity.Property(e => e.FctObowiazujeDoTxt)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("FCT_ObowiazujeDoTxt");
            entity.Property(e => e.FctObowiazujeOdTxt)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("FCT_ObowiazujeOdTxt");
            entity.Property(e => e.FctOdbiorcaKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FCT_OdbiorcaKod");
            entity.Property(e => e.FctOdbiorcaNazwa)
                .HasMaxLength(352)
                .HasColumnName("FCT_OdbiorcaNazwa");
            entity.Property(e => e.FctTypKnt).HasColumnName("FCT_TypKnt");
            entity.Property(e => e.FctTypNb).HasColumnName("FCT_TypNB");
            entity.Property(e => e.FctWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FCT_Waluta");

            entity.HasOne(d => d.FctFcE).WithMany(p => p.FaCyklTwrKnts)
                .HasForeignKey(d => d.FctFcEid)
                .HasConstraintName("FK_FCT_FaCyklElem");
        });

        modelBuilder.Entity<Firma>(entity =>
        {
            entity.HasKey(e => e.FirFirId)
                .HasName("Fir_Primary")
                .HasFillFactor(100);

            entity.ToTable("Firma", "CDN", tb => tb.HasTrigger("TRIG_Firma_Kreator"));

            entity.HasIndex(e => e.FirNumer, "FirNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.FirFirId).HasColumnName("Fir_FirID");
            entity.Property(e => e.FirNumer).HasColumnName("Fir_Numer");
            entity.Property(e => e.FirOpis)
                .HasMaxLength(254)
                .HasColumnName("Fir_Opis");
            entity.Property(e => e.FirWartosc)
                .HasMaxLength(1200)
                .HasColumnName("Fir_Wartosc");
        });

        modelBuilder.Entity<FormatyRcp>(entity =>
        {
            entity.HasKey(e => e.ForForId)
                .HasName("FOR_Primary")
                .HasFillFactor(100);

            entity.ToTable("FormatyRcp", "CDN");

            entity.HasIndex(e => e.ForNazwa, "FORNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ForForId).HasColumnName("FOR_ForId");
            entity.Property(e => e.ForFormat)
                .HasMaxLength(50)
                .HasColumnName("FOR_Format");
            entity.Property(e => e.ForKatalog)
                .HasMaxLength(200)
                .HasColumnName("FOR_Katalog");
            entity.Property(e => e.ForNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FOR_Nazwa");
            entity.Property(e => e.ForNieaktywny).HasColumnName("FOR_Nieaktywny");
            entity.Property(e => e.ForRodzajImportu).HasColumnName("FOR_RodzajImportu");
            entity.Property(e => e.ForWeWySstrefaPlan).HasColumnName("FOR_WeWySStrefaPlan");
            entity.Property(e => e.ForWeWyStrefaPlan).HasColumnName("FOR_WeWyStrefaPlan");
            entity.Property(e => e.ForWejscie)
                .HasMaxLength(8)
                .HasColumnName("FOR_Wejscie");
            entity.Property(e => e.ForWejscieDstId).HasColumnName("FOR_WejscieDstId");
            entity.Property(e => e.ForWejscieSluzb)
                .HasMaxLength(8)
                .HasColumnName("FOR_WejscieSluzb");
            entity.Property(e => e.ForWejscieSluzbDstId).HasColumnName("FOR_WejscieSluzbDstId");
            entity.Property(e => e.ForWgObecnosci).HasColumnName("FOR_WgObecnosci");
            entity.Property(e => e.ForWyjscie)
                .HasMaxLength(8)
                .HasColumnName("FOR_Wyjscie");
            entity.Property(e => e.ForWyjscieSluzb)
                .HasMaxLength(8)
                .HasColumnName("FOR_WyjscieSluzb");
        });

        modelBuilder.Entity<FormyPlatnWaluty>(entity =>
        {
            entity.HasKey(e => e.FpwFpwid)
                .HasName("FPW_Primary")
                .HasFillFactor(100);

            entity.ToTable("FormyPlatnWaluty", "CDN", tb => tb.HasTrigger("FormyPlatnWaluty_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.FpwBraId, "FPWBnkrachunki").HasFillFactor(100);

            entity.HasIndex(e => new { e.FpwFplId, e.FpwBraId }, "FPWFormyPlatnosci")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.FpwFpwid).HasColumnName("FPW_FPWId");
            entity.Property(e => e.FpwBraId).HasColumnName("FPW_BRaId");
            entity.Property(e => e.FpwFplId).HasColumnName("FPW_FPlId");

            entity.HasOne(d => d.FpwBra).WithMany(p => p.FormyPlatnWaluties)
                .HasForeignKey(d => d.FpwBraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FPWBnkrachunki");

            entity.HasOne(d => d.FpwFpl).WithMany(p => p.FormyPlatnWaluties)
                .HasForeignKey(d => d.FpwFplId)
                .HasConstraintName("FK_FPWFormyPlatnosci");
        });

        modelBuilder.Entity<FormyPlatnosci>(entity =>
        {
            entity.HasKey(e => e.FplFplId)
                .HasName("FPl_Primary")
                .HasFillFactor(100);

            entity.ToTable("FormyPlatnosci", "CDN", tb => tb.HasTrigger("FormyPlatnosci_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => e.FplImportRowId, "FPlGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.FplNazwa, "FPlNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.FplBraId, "FplRachunek").HasFillFactor(100);

            entity.Property(e => e.FplFplId).HasColumnName("FPl_FPlId");
            entity.Property(e => e.FplBraId).HasColumnName("FPl_BRaId");
            entity.Property(e => e.FplDomyslna).HasColumnName("FPl_Domyslna");
            entity.Property(e => e.FplImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("FPl_ImportAppId");
            entity.Property(e => e.FplImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("FPl_ImportRowId");
            entity.Property(e => e.FplKseFid).HasColumnName("FPl_KSeFId");
            entity.Property(e => e.FplNazwa)
                .HasMaxLength(20)
                .HasColumnName("FPl_Nazwa");
            entity.Property(e => e.FplNieAktywny).HasColumnName("FPl_NieAktywny");
            entity.Property(e => e.FplPodmiotId).HasColumnName("FPl_PodmiotID");
            entity.Property(e => e.FplPodmiotTyp).HasColumnName("FPl_PodmiotTyp");
            entity.Property(e => e.FplRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("FPl_Rabat");
            entity.Property(e => e.FplTermin).HasColumnName("FPl_Termin");
            entity.Property(e => e.FplTerminalPlatniczy).HasColumnName("FPl_TerminalPlatniczy");
            entity.Property(e => e.FplTsExport)
                .HasColumnType("datetime")
                .HasColumnName("FPl_TS_Export");
            entity.Property(e => e.FplTyp).HasColumnName("FPl_Typ");
            entity.Property(e => e.FplXlid).HasColumnName("FPl_XLID");

            entity.HasOne(d => d.FplBra).WithMany(p => p.FormyPlatnoscis)
                .HasForeignKey(d => d.FplBraId)
                .HasConstraintName("FK_FplRachunek");
        });

        modelBuilder.Entity<FormyPlatnosciDf>(entity =>
        {
            entity.HasKey(e => e.FpdFpdid)
                .HasName("FPD_Primary")
                .HasFillFactor(100);

            entity.ToTable("FormyPlatnosciDF", "CDN");

            entity.HasIndex(e => e.FpdFplId, "FPDFormyPlatnosci").HasFillFactor(100);

            entity.Property(e => e.FpdFpdid).HasColumnName("FPD_FPDID");
            entity.Property(e => e.FpdDflp).HasColumnName("FPD_DFLp");
            entity.Property(e => e.FpdFplId).HasColumnName("FPD_FPlId");
            entity.Property(e => e.FpdNazwa)
                .HasMaxLength(20)
                .HasColumnName("FPD_Nazwa");
            entity.Property(e => e.FpdNumer).HasColumnName("FPD_Numer");

            entity.HasOne(d => d.FpdFpl).WithMany(p => p.FormyPlatnosciDfs)
                .HasForeignKey(d => d.FpdFplId)
                .HasConstraintName("FK_FPDFormyPlatnosci");
        });

        modelBuilder.Entity<FrsPromocje>(entity =>
        {
            entity.HasKey(e => e.FprId).HasName("FPR_Primary");

            entity.ToTable("FrsPromocje", "CDN");

            entity.HasIndex(e => new { e.FprFrsId, e.FprPrmId }, "FprFrS").IsUnique();

            entity.HasIndex(e => e.FprPrmId, "FprPrm");

            entity.Property(e => e.FprId).HasColumnName("FPR_Id");
            entity.Property(e => e.FprFrsId).HasColumnName("FPR_FrsId");
            entity.Property(e => e.FprPrmId).HasColumnName("FPR_PrmId");

            entity.HasOne(d => d.FprPrm).WithMany(p => p.FrsPromocjes)
                .HasForeignKey(d => d.FprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FprPrm");
        });

        modelBuilder.Entity<GrupaZakazy>(entity =>
        {
            entity.HasKey(e => e.GrZGrZid)
                .HasName("GrZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("GrupaZakazy", "CDN");

            entity.HasIndex(e => new { e.GrZGruId, e.GrZOpeId }, "GrZGrupa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.GrZGrZid).HasColumnName("GrZ_GrZId");
            entity.Property(e => e.GrZGruId).HasColumnName("GrZ_GruId");
            entity.Property(e => e.GrZOpeId).HasColumnName("GrZ_OpeId");

            entity.HasOne(d => d.GrZGru).WithMany(p => p.GrupaZakazies)
                .HasForeignKey(d => d.GrZGruId)
                .HasConstraintName("FK_GrZGrupa");
        });

        modelBuilder.Entity<Grupy>(entity =>
        {
            entity.HasKey(e => e.GruGruId)
                .HasName("Gru_Primary")
                .HasFillFactor(100);

            entity.ToTable("Grupy", "CDN", tb => tb.HasTrigger("Grupy_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.GruTyp, e.GruNazwa }, "GruNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.GruGruId).HasColumnName("Gru_GruID");
            entity.Property(e => e.GruFlaga).HasColumnName("Gru_Flaga");
            entity.Property(e => e.GruKontoMa)
                .HasMaxLength(50)
                .HasColumnName("Gru_KontoMa");
            entity.Property(e => e.GruKontoWn)
                .HasMaxLength(50)
                .HasColumnName("Gru_KontoWn");
            entity.Property(e => e.GruNazwa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("Gru_Nazwa");
            entity.Property(e => e.GruNazwaPef)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("Gru_NazwaPEF");
            entity.Property(e => e.GruOpeModId).HasColumnName("Gru_OpeModID");
            entity.Property(e => e.GruOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Gru_OpeModKod");
            entity.Property(e => e.GruOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Gru_OpeModNazwisko");
            entity.Property(e => e.GruOpeZalId).HasColumnName("Gru_OpeZalID");
            entity.Property(e => e.GruOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Gru_OpeZalKod");
            entity.Property(e => e.GruOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Gru_OpeZalNazwisko");
            entity.Property(e => e.GruOpis)
                .HasMaxLength(128)
                .HasColumnName("Gru_Opis");
            entity.Property(e => e.GruStaModId).HasColumnName("Gru_StaModId");
            entity.Property(e => e.GruStaZalId).HasColumnName("Gru_StaZalId");
            entity.Property(e => e.GruTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Gru_TS_Mod");
            entity.Property(e => e.GruTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Gru_TS_Zal");
            entity.Property(e => e.GruTyp).HasColumnName("Gru_Typ");
        });

        modelBuilder.Entity<GrupyJezykObcy>(entity =>
        {
            entity.HasKey(e => new { e.GruJGruId, e.GruJJezykId })
                .HasName("GruJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("GrupyJezykObcy", "CDN", tb => tb.HasTrigger("GrupyJezykObcy_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => e.GruJGruJid, "GruJID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.GruJGruId).HasColumnName("GruJ_GruID");
            entity.Property(e => e.GruJJezykId).HasColumnName("GruJ_JezykID");
            entity.Property(e => e.GruJGruJid)
                .ValueGeneratedOnAdd()
                .HasColumnName("GruJ_GruJID");
            entity.Property(e => e.GruJNazwa)
                .HasMaxLength(100)
                .HasColumnName("GruJ_Nazwa");

            entity.HasOne(d => d.GruJGru).WithMany(p => p.GrupyJezykObcies)
                .HasForeignKey(d => d.GruJGruId)
                .HasConstraintName("FK_GruJdoGrup");
        });

        modelBuilder.Entity<GrupyKontElem>(entity =>
        {
            entity.HasKey(e => e.GkeGkeid)
                .HasName("GKE_Primary")
                .HasFillFactor(100);

            entity.ToTable("GrupyKontElem", "CDN");

            entity.HasIndex(e => e.GkeAccId, "GKEKonto").HasFillFactor(100);

            entity.HasIndex(e => new { e.GkeGknid, e.GkeGkeid }, "GKENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.GkeGkeid).HasColumnName("GKE_GKEID");
            entity.Property(e => e.GkeAccId).HasColumnName("GKE_AccId");
            entity.Property(e => e.GkeGknid).HasColumnName("GKE_GKNID");

            entity.HasOne(d => d.GkeAcc).WithMany(p => p.GrupyKontElems)
                .HasForeignKey(d => d.GkeAccId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GKEKonto");

            entity.HasOne(d => d.GkeGkn).WithMany(p => p.GrupyKontElems)
                .HasForeignKey(d => d.GkeGknid)
                .HasConstraintName("FK_GKENaglowek");
        });

        modelBuilder.Entity<GrupyKontNag>(entity =>
        {
            entity.HasKey(e => e.GknGknid)
                .HasName("GKN_Primary")
                .HasFillFactor(100);

            entity.ToTable("GrupyKontNag", "CDN");

            entity.HasIndex(e => e.GknOobId, "GKNOkrObr").HasFillFactor(100);

            entity.HasIndex(e => new { e.GknSymbol, e.GknOobId }, "GKNSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.GknGknid).HasColumnName("GKN_GKNID");
            entity.Property(e => e.GknNieAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("GKN_NieAktywny");
            entity.Property(e => e.GknOobId).HasColumnName("GKN_OObId");
            entity.Property(e => e.GknOpeModId).HasColumnName("GKN_OpeModID");
            entity.Property(e => e.GknOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GKN_OpeModKod");
            entity.Property(e => e.GknOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("GKN_OpeModNazwisko");
            entity.Property(e => e.GknOpeZalId).HasColumnName("GKN_OpeZalId");
            entity.Property(e => e.GknOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GKN_OpeZalKod");
            entity.Property(e => e.GknOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("GKN_OpeZalNazwisko");
            entity.Property(e => e.GknStaModId).HasColumnName("GKN_StaModId");
            entity.Property(e => e.GknStaZalId).HasColumnName("GKN_StaZalId");
            entity.Property(e => e.GknSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GKN_Symbol");
            entity.Property(e => e.GknTsMod)
                .HasColumnType("datetime")
                .HasColumnName("GKN_TS_Mod");
            entity.Property(e => e.GknTsZal)
                .HasColumnType("datetime")
                .HasColumnName("GKN_TS_Zal");

            entity.HasOne(d => d.GknOob).WithMany(p => p.GrupyKontNags)
                .HasForeignKey(d => d.GknOobId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GKNOkrObr");
        });

        modelBuilder.Entity<GrupyPotrSkladniki>(entity =>
        {
            entity.HasKey(e => e.GpsGpsId)
                .HasName("GPS_Primary")
                .HasFillFactor(100);

            entity.ToTable("GrupyPotrSkladniki", "CDN", tb => tb.HasTrigger("GrupyPotrSkladniki_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.GpsGprId, "GPSGprLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.GpsRodzaj, e.GpsGprId }, "GPSRodzaj").HasFillFactor(100);

            entity.Property(e => e.GpsGpsId).HasColumnName("GPS_GpsId");
            entity.Property(e => e.GpsGprId).HasColumnName("GPS_GprId");
            entity.Property(e => e.GpsImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("GPS_ImportRowId");
            entity.Property(e => e.GpsParentId).HasColumnName("GPS_ParentId");
            entity.Property(e => e.GpsParentNazwa)
                .HasMaxLength(40)
                .HasColumnName("GPS_ParentNazwa");
            entity.Property(e => e.GpsParentSts).HasColumnName("GPS_ParentSTS");
            entity.Property(e => e.GpsPriorytet).HasColumnName("GPS_Priorytet");
            entity.Property(e => e.GpsRodzaj).HasColumnName("GPS_Rodzaj");

            entity.HasOne(d => d.GpsGpr).WithMany(p => p.GrupyPotrSkladnikis)
                .HasForeignKey(d => d.GpsGprId)
                .HasConstraintName("FK_GPSGprLink");
        });

        modelBuilder.Entity<GrupyPotracen>(entity =>
        {
            entity.HasKey(e => e.GprGprId)
                .HasName("GPR_Primary")
                .HasFillFactor(100);

            entity.ToTable("GrupyPotracen", "CDN", tb =>
                {
                    tb.HasTrigger("GrupyPotracen_Delete_Trigger");
                    tb.HasTrigger("GrupyPotracen_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.GprNazwa, "GPRNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.GprPriorytet, "GPRPriorytet").HasFillFactor(100);

            entity.Property(e => e.GprGprId).HasColumnName("GPR_GprId");
            entity.Property(e => e.GprImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("GPR_ImportRowId");
            entity.Property(e => e.GprKwotaEgzekucji1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("GPR_KwotaEgzekucji1");
            entity.Property(e => e.GprKwotaEgzekucji2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("GPR_KwotaEgzekucji2");
            entity.Property(e => e.GprKwotaEgzekucji3)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("GPR_KwotaEgzekucji3");
            entity.Property(e => e.GprKwotaEgzekucjiZus)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("GPR_KwotaEgzekucjiZUS");
            entity.Property(e => e.GprKwotaPobranaKonf).HasColumnName("GPR_KwotaPobranaKonf");
            entity.Property(e => e.GprKwotaRodzajPotracenia).HasColumnName("GPR_KwotaRodzajPotracenia");
            entity.Property(e => e.GprKwotaWolna)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("GPR_KwotaWolna");
            entity.Property(e => e.GprKwotaWolnaZus)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("GPR_KwotaWolnaZUS");
            entity.Property(e => e.GprKwotaWolnaZus2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("GPR_KwotaWolnaZUS2");
            entity.Property(e => e.GprNazwa)
                .HasMaxLength(40)
                .HasColumnName("GPR_Nazwa");
            entity.Property(e => e.GprNieaktywna).HasColumnName("GPR_Nieaktywna");
            entity.Property(e => e.GprOpeModId).HasColumnName("GPR_OpeModId");
            entity.Property(e => e.GprOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GPR_OpeModKod");
            entity.Property(e => e.GprOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("GPR_OpeModNazwisko");
            entity.Property(e => e.GprOpeZalId).HasColumnName("GPR_OpeZalId");
            entity.Property(e => e.GprOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GPR_OpeZalKod");
            entity.Property(e => e.GprOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("GPR_OpeZalNazwisko");
            entity.Property(e => e.GprPriorytet).HasColumnName("GPR_Priorytet");
            entity.Property(e => e.GprPropDniZasilku).HasColumnName("GPR_PropDniZasilku");
            entity.Property(e => e.GprPropWymiarEtatu).HasColumnName("GPR_PropWymiarEtatu");
            entity.Property(e => e.GprPropWymiarEtatuZus).HasColumnName("GPR_PropWymiarEtatuZUS");
            entity.Property(e => e.GprRodzajKwotyWolnejZus)
                .HasDefaultValue((byte)1)
                .HasColumnName("GPR_RodzajKwotyWolnejZUS");
            entity.Property(e => e.GprSkrot)
                .HasMaxLength(20)
                .HasColumnName("GPR_Skrot");
            entity.Property(e => e.GprStaModId).HasColumnName("GPR_StaModId");
            entity.Property(e => e.GprStaZalId).HasColumnName("GPR_StaZalId");
            entity.Property(e => e.GprStandardowy).HasColumnName("GPR_Standardowy");
            entity.Property(e => e.GprTsMod)
                .HasColumnType("datetime")
                .HasColumnName("GPR_TS_Mod");
            entity.Property(e => e.GprTsZal)
                .HasColumnType("datetime")
                .HasColumnName("GPR_TS_Zal");
        });

        modelBuilder.Entity<Harmonogram>(entity =>
        {
            entity.HasKey(e => e.HrmHrmId)
                .HasName("HRM_Primary")
                .HasFillFactor(100);

            entity.ToTable("Harmonogram", "CDN", tb => tb.HasTrigger("Harmonogram_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.HrmDkmId, "HRMDkmLink").HasFillFactor(100);

            entity.HasIndex(e => e.HrmDodId, "HRMDodLink").HasFillFactor(100);

            entity.Property(e => e.HrmHrmId).HasColumnName("HRM_HrmId");
            entity.Property(e => e.HrmDataNaliczenia)
                .HasColumnType("datetime")
                .HasColumnName("HRM_DataNaliczenia");
            entity.Property(e => e.HrmDkmId).HasColumnName("HRM_DkmId");
            entity.Property(e => e.HrmDodId).HasColumnName("HRM_DodId");
            entity.Property(e => e.HrmImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("HRM_ImportRowId");
            entity.Property(e => e.HrmKwotaZadluzenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HRM_KwotaZadluzenia");
            entity.Property(e => e.HrmLiczbaRat).HasColumnName("HRM_LiczbaRat");
            entity.Property(e => e.HrmMiesiac).HasColumnName("HRM_Miesiac");
            entity.Property(e => e.HrmNaliczacOdsetki).HasColumnName("HRM_NaliczacOdsetki");
            entity.Property(e => e.HrmNiepelnaRata).HasColumnName("HRM_NiepelnaRata");
            entity.Property(e => e.HrmOdsetkiPotracane).HasColumnName("HRM_OdsetkiPotracane");
            entity.Property(e => e.HrmOpeModId).HasColumnName("HRM_OpeModId");
            entity.Property(e => e.HrmOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HRM_OpeModKod");
            entity.Property(e => e.HrmOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HRM_OpeModNazwisko");
            entity.Property(e => e.HrmOpeZalId).HasColumnName("HRM_OpeZalId");
            entity.Property(e => e.HrmOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HRM_OpeZalKod");
            entity.Property(e => e.HrmOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HRM_OpeZalNazwisko");
            entity.Property(e => e.HrmProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HRM_Procent");
            entity.Property(e => e.HrmRataKapitalowa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HRM_RataKapitalowa");
            entity.Property(e => e.HrmRatyKapitalowe).HasColumnName("HRM_RatyKapitalowe");
            entity.Property(e => e.HrmRok).HasColumnName("HRM_Rok");
            entity.Property(e => e.HrmSplataKapitalu).HasColumnName("HRM_SplataKapitalu");
            entity.Property(e => e.HrmSplataOdsetek).HasColumnName("HRM_SplataOdsetek");
            entity.Property(e => e.HrmStaModId).HasColumnName("HRM_StaModId");
            entity.Property(e => e.HrmStaZalId).HasColumnName("HRM_StaZalId");
            entity.Property(e => e.HrmTerminSplaty)
                .HasColumnType("datetime")
                .HasColumnName("HRM_TerminSplaty");
            entity.Property(e => e.HrmTsMod)
                .HasColumnType("datetime")
                .HasColumnName("HRM_TS_Mod");
            entity.Property(e => e.HrmTsZal)
                .HasColumnType("datetime")
                .HasColumnName("HRM_TS_Zal");
            entity.Property(e => e.HrmUzyty).HasColumnName("HRM_Uzyty");
            entity.Property(e => e.HrmZablokowany).HasColumnName("HRM_Zablokowany");

            entity.HasOne(d => d.HrmDkm).WithMany(p => p.Harmonograms)
                .HasForeignKey(d => d.HrmDkmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMDkmLink");

            entity.HasOne(d => d.HrmDod).WithMany(p => p.Harmonograms)
                .HasForeignKey(d => d.HrmDodId)
                .HasConstraintName("FK_HRMDodLink");
        });

        modelBuilder.Entity<HarmonogramListum>(entity =>
        {
            entity.HasKey(e => e.HrlHrlId)
                .HasName("HRL_Primary")
                .HasFillFactor(100);

            entity.ToTable("HarmonogramLista", "CDN", tb => tb.HasTrigger("HarmonogramLista_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.HrlHrmId, "HRLHrmLink").HasFillFactor(100);

            entity.Property(e => e.HrlHrlId).HasColumnName("HRL_HrlId");
            entity.Property(e => e.HrlHrmId).HasColumnName("HRL_HrmId");
            entity.Property(e => e.HrlImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("HRL_ImportRowId");
            entity.Property(e => e.HrlMiesiac).HasColumnName("HRL_Miesiac");
            entity.Property(e => e.HrlRataKapitalowa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HRL_RataKapitalowa");
            entity.Property(e => e.HrlRataOdsetkowa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HRL_RataOdsetkowa");
            entity.Property(e => e.HrlRok).HasColumnName("HRL_Rok");

            entity.HasOne(d => d.HrlHrm).WithMany(p => p.HarmonogramLista)
                .HasForeignKey(d => d.HrlHrmId)
                .HasConstraintName("FK_HRLHrmLink");
        });

        modelBuilder.Entity<HisWyksztal>(entity =>
        {
            entity.HasKey(e => e.HwyHwyId)
                .HasName("HWY_Primary")
                .HasFillFactor(100);

            entity.ToTable("HisWyksztal", "CDN", tb => tb.HasTrigger("HisWyksztal_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.HwyPraId, "HWYPraLink").HasFillFactor(100);

            entity.Property(e => e.HwyHwyId).HasColumnName("HWY_HwyId");
            entity.Property(e => e.HwyImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("HWY_ImportRowId");
            entity.Property(e => e.HwyNazwa)
                .HasMaxLength(140)
                .HasColumnName("HWY_Nazwa");
            entity.Property(e => e.HwyOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("HWY_OkresDo");
            entity.Property(e => e.HwyOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("HWY_OkresOd");
            entity.Property(e => e.HwyOpeModId).HasColumnName("HWY_OpeModId");
            entity.Property(e => e.HwyOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HWY_OpeModKod");
            entity.Property(e => e.HwyOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HWY_OpeModNazwisko");
            entity.Property(e => e.HwyOpeZalId).HasColumnName("HWY_OpeZalId");
            entity.Property(e => e.HwyOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HWY_OpeZalKod");
            entity.Property(e => e.HwyOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HWY_OpeZalNazwisko");
            entity.Property(e => e.HwyPraId).HasColumnName("HWY_PraId");
            entity.Property(e => e.HwySpecjalnosc)
                .HasMaxLength(30)
                .HasColumnName("HWY_Specjalnosc");
            entity.Property(e => e.HwyStaModId).HasColumnName("HWY_StaModId");
            entity.Property(e => e.HwyStaZalId).HasColumnName("HWY_StaZalId");
            entity.Property(e => e.HwyStazDni).HasColumnName("HWY_StazDni");
            entity.Property(e => e.HwyStazLata).HasColumnName("HWY_StazLata");
            entity.Property(e => e.HwyStazMies).HasColumnName("HWY_StazMies");
            entity.Property(e => e.HwyStazWliczac).HasColumnName("HWY_StazWliczac");
            entity.Property(e => e.HwyStopien)
                .HasMaxLength(30)
                .HasColumnName("HWY_Stopien");
            entity.Property(e => e.HwyTsMod)
                .HasColumnType("datetime")
                .HasColumnName("HWY_TS_Mod");
            entity.Property(e => e.HwyTsZal)
                .HasColumnType("datetime")
                .HasColumnName("HWY_TS_Zal");
            entity.Property(e => e.HwyTytul)
                .HasMaxLength(30)
                .HasColumnName("HWY_Tytul");
            entity.Property(e => e.HwyZawod)
                .HasMaxLength(30)
                .HasColumnName("HWY_Zawod");

            entity.HasOne(d => d.HwyPra).WithMany(p => p.HisWyksztals)
                .HasForeignKey(d => d.HwyPraId)
                .HasConstraintName("FK_HWYPraLink");
        });

        modelBuilder.Entity<HisZatrud>(entity =>
        {
            entity.HasKey(e => e.HztHztId)
                .HasName("HZT_Primary")
                .HasFillFactor(100);

            entity.ToTable("HisZatrud", "CDN", tb => tb.HasTrigger("HisZatrud_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.HztDkmId, "HZTDkmId").HasFillFactor(100);

            entity.HasIndex(e => e.HztPraId, "HZTPraLink").HasFillFactor(100);

            entity.Property(e => e.HztHztId).HasColumnName("HZT_HztId");
            entity.Property(e => e.HztAdres1)
                .HasMaxLength(60)
                .HasColumnName("HZT_Adres1");
            entity.Property(e => e.HztAdres2)
                .HasMaxLength(60)
                .HasColumnName("HZT_Adres2");
            entity.Property(e => e.HztDkmId).HasColumnName("HZT_DkmId");
            entity.Property(e => e.HztEtaty).HasColumnName("HZT_Etaty");
            entity.Property(e => e.HztImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("HZT_ImportRowId");
            entity.Property(e => e.HztNazwa)
                .HasMaxLength(140)
                .HasColumnName("HZT_Nazwa");
            entity.Property(e => e.HztOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("HZT_OkresDo");
            entity.Property(e => e.HztOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("HZT_OkresOd");
            entity.Property(e => e.HztOpeModId).HasColumnName("HZT_OpeModId");
            entity.Property(e => e.HztOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HZT_OpeModKod");
            entity.Property(e => e.HztOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HZT_OpeModNazwisko");
            entity.Property(e => e.HztOpeZalId).HasColumnName("HZT_OpeZalId");
            entity.Property(e => e.HztOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HZT_OpeZalKod");
            entity.Property(e => e.HztOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HZT_OpeZalNazwisko");
            entity.Property(e => e.HztPraId).HasColumnName("HZT_PraId");
            entity.Property(e => e.HztPracaZdalnaOkaz).HasColumnName("HZT_PracaZdalnaOkaz");
            entity.Property(e => e.HztStaModId).HasColumnName("HZT_StaModId");
            entity.Property(e => e.HztStaZalId).HasColumnName("HZT_StaZalId");
            entity.Property(e => e.HztStanowisko)
                .HasMaxLength(30)
                .HasColumnName("HZT_Stanowisko");
            entity.Property(e => e.HztStazDni).HasColumnName("HZT_StazDni");
            entity.Property(e => e.HztStazLata).HasColumnName("HZT_StazLata");
            entity.Property(e => e.HztStazMies).HasColumnName("HZT_StazMies");
            entity.Property(e => e.HztStazWliczac).HasColumnName("HZT_StazWliczac");
            entity.Property(e => e.HztTsMod)
                .HasColumnType("datetime")
                .HasColumnName("HZT_TS_Mod");
            entity.Property(e => e.HztTsZal)
                .HasColumnType("datetime")
                .HasColumnName("HZT_TS_Zal");
            entity.Property(e => e.HztUrlopDodatkowyNiepelnosp).HasColumnName("HZT_UrlopDodatkowyNiepelnosp");
            entity.Property(e => e.HztUrlopNaZadanie).HasColumnName("HZT_UrlopNaZadanie");
            entity.Property(e => e.HztUrlopWypoczynkowy)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("HZT_UrlopWypoczynkowy");
            entity.Property(e => e.HztZbiorczy10).HasColumnName("HZT_Zbiorczy10");

            entity.HasOne(d => d.HztDkm).WithMany(p => p.HisZatruds)
                .HasForeignKey(d => d.HztDkmId)
                .HasConstraintName("FK_HZTDkmId");

            entity.HasOne(d => d.HztPra).WithMany(p => p.HisZatruds)
                .HasForeignKey(d => d.HztPraId)
                .HasConstraintName("FK_HZTPraLink");
        });

        modelBuilder.Entity<HisZatrudOkre>(entity =>
        {
            entity.HasKey(e => e.HzoHzoId)
                .HasName("HZO_Primary")
                .HasFillFactor(100);

            entity.ToTable("HisZatrudOkres", "CDN", tb => tb.HasTrigger("HisZatrudOkres_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.HzoDkmId, "HZODkmId").HasFillFactor(100);

            entity.HasIndex(e => e.HzoHztId, "HZOHztLink").HasFillFactor(100);

            entity.Property(e => e.HzoHzoId).HasColumnName("HZO_HzoId");
            entity.Property(e => e.HzoDkmId).HasColumnName("HZO_DkmId");
            entity.Property(e => e.HzoHztId).HasColumnName("HZO_HztId");
            entity.Property(e => e.HzoImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("HZO_ImportRowId");
            entity.Property(e => e.HzoOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("HZO_OkresDo");
            entity.Property(e => e.HzoOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("HZO_OkresOd");
            entity.Property(e => e.HzoOpeModId).HasColumnName("HZO_OpeModId");
            entity.Property(e => e.HzoOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HZO_OpeModKod");
            entity.Property(e => e.HzoOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HZO_OpeModNazwisko");
            entity.Property(e => e.HzoOpeZalId).HasColumnName("HZO_OpeZalId");
            entity.Property(e => e.HzoOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HZO_OpeZalKod");
            entity.Property(e => e.HzoOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("HZO_OpeZalNazwisko");
            entity.Property(e => e.HzoStaModId).HasColumnName("HZO_StaModId");
            entity.Property(e => e.HzoStaZalId).HasColumnName("HZO_StaZalId");
            entity.Property(e => e.HzoTsMod)
                .HasColumnType("datetime")
                .HasColumnName("HZO_TS_Mod");
            entity.Property(e => e.HzoTsZal)
                .HasColumnType("datetime")
                .HasColumnName("HZO_TS_Zal");

            entity.HasOne(d => d.HzoDkm).WithMany(p => p.HisZatrudOkres)
                .HasForeignKey(d => d.HzoDkmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HZODkmId");

            entity.HasOne(d => d.HzoHzt).WithMany(p => p.HisZatrudOkres)
                .HasForeignKey(d => d.HzoHztId)
                .HasConstraintName("FK_HZOHztLink");
        });

        modelBuilder.Entity<Idn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Idn", "CDN");

            entity.Property(e => e.I).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<IgaleriaAtrWartosci>(entity =>
        {
            entity.HasKey(e => e.IgawIgawid)
                .HasName("IGAW_Primary")
                .HasFillFactor(100);

            entity.ToTable("IGaleriaAtrWartosci", "CDN");

            entity.HasIndex(e => e.IgawTwrId, "IGAWTowar").HasFillFactor(100);

            entity.Property(e => e.IgawIgawid).HasColumnName("IGAW_IGAWId");
            entity.Property(e => e.IgawIgaid).HasColumnName("IGAW_IGAId");
            entity.Property(e => e.IgawIgdwid).HasColumnName("IGAW_IGDWID");
            entity.Property(e => e.IgawTwrId).HasColumnName("IGAW_TwrId");
            entity.Property(e => e.IgawWartosc)
                .HasMaxLength(100)
                .HasColumnName("IGAW_Wartosc");

            entity.HasOne(d => d.IgawTwr).WithMany(p => p.IgaleriaAtrWartoscis)
                .HasForeignKey(d => d.IgawTwrId)
                .HasConstraintName("FK_IGAWTowar");
        });

        modelBuilder.Entity<IgaleriaAtrybuty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IGaleriaAtrybuty", "CDN");

            entity.HasIndex(e => new { e.IgaIgaid, e.IgaIgkid }, "IGAtrybutyId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.IgaAktywny).HasColumnName("IGA_Aktywny");
            entity.Property(e => e.IgaDowolnaWartosc).HasColumnName("IGA_DowolnaWartosc");
            entity.Property(e => e.IgaIgaid).HasColumnName("IGA_IGAId");
            entity.Property(e => e.IgaIgkid).HasColumnName("IGA_IGKId");
            entity.Property(e => e.IgaJednostka)
                .HasMaxLength(30)
                .HasColumnName("IGA_Jednostka");
            entity.Property(e => e.IgaNazwa)
                .HasMaxLength(100)
                .HasColumnName("IGA_Nazwa");
            entity.Property(e => e.IgaTyp).HasColumnName("IGA_Typ");
        });

        modelBuilder.Entity<IgaleriaDefAtrWartosci>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IGaleriaDefAtrWartosci", "CDN");

            entity.HasIndex(e => e.IgdwIgaid, "IGaleriaDefAtrWartosci")
                .IsClustered()
                .HasFillFactor(100);

            entity.Property(e => e.IgdwAktywna).HasColumnName("IGDW_Aktywna");
            entity.Property(e => e.IgdwIgaid).HasColumnName("IGDW_IGAId");
            entity.Property(e => e.IgdwIgdwid).HasColumnName("IGDW_IGDWId");
            entity.Property(e => e.IgdwWartosc)
                .HasMaxLength(100)
                .HasColumnName("IGDW_Wartosc");
        });

        modelBuilder.Entity<IgaleriaKategorie>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IGaleriaKategorie", "CDN");

            entity.HasIndex(e => e.IgkIgkid, "IGKategorieId")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.IgkNazwa, e.IgkIgkid }, "IGKategorieNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.IgkAktywna).HasColumnName("IGK_Aktywna");
            entity.Property(e => e.IgkIgkid).HasColumnName("IGK_IGKId");
            entity.Property(e => e.IgkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IGK_Nazwa");
            entity.Property(e => e.IgkParentId).HasColumnName("IGK_ParentId");
        });

        modelBuilder.Entity<IntrastatElem>(entity =>
        {
            entity.HasKey(e => e.IsEIsEid)
                .HasName("IsE_Primary")
                .HasFillFactor(100);

            entity.ToTable("IntrastatElem", "CDN");

            entity.HasIndex(e => new { e.IsEIsNid, e.IsEIsEid }, "IsENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.IsEIsEid).HasColumnName("IsE_IsEId");
            entity.Property(e => e.IsEAutomatyczny).HasColumnName("IsE_Automatyczny");
            entity.Property(e => e.IsECn)
                .HasMaxLength(8)
                .HasColumnName("IsE_CN");
            entity.Property(e => e.IsEIsNid).HasColumnName("IsE_IsNId");
            entity.Property(e => e.IsEJmUzup)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IsE_JmUzup");
            entity.Property(e => e.IsEKraj)
                .HasMaxLength(2)
                .HasColumnName("IsE_Kraj");
            entity.Property(e => e.IsEKrajPochodzenia)
                .HasMaxLength(2)
                .HasColumnName("IsE_KrajPochodzenia");
            entity.Property(e => e.IsELp).HasColumnName("IsE_Lp");
            entity.Property(e => e.IsEMasaNetto)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("IsE_MasaNetto");
            entity.Property(e => e.IsENetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IsE_Netto");
            entity.Property(e => e.IsENumerIdentKnt)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("IsE_NumerIdentKnt");
            entity.Property(e => e.IsEOpis)
                .HasMaxLength(255)
                .HasColumnName("IsE_Opis");
            entity.Property(e => e.IsERodzajTransakcji)
                .HasMaxLength(2)
                .HasColumnName("IsE_RodzajTransakcji");

            entity.HasOne(d => d.IsEIsN).WithMany(p => p.IntrastatElems)
                .HasForeignKey(d => d.IsEIsNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_IsENaglowek");
        });

        modelBuilder.Entity<IntrastatNag>(entity =>
        {
            entity.HasKey(e => e.IsNIsNid)
                .HasName("IsN_Primary")
                .HasFillFactor(100);

            entity.ToTable("IntrastatNag", "CDN", tb =>
                {
                    tb.HasTrigger("IntrastatNag_Delete_Trigger");
                    tb.HasTrigger("IntrastatNag_Update_Trigger");
                });

            entity.HasIndex(e => new { e.IsNTyp, e.IsNRok, e.IsNMiesiac, e.IsNNumer, e.IsNWersja }, "IsNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.IsNZglId, e.IsNZglTyp }, "IsNZglaszajacy").HasFillFactor(100);

            entity.Property(e => e.IsNIsNid).HasColumnName("IsN_IsNId");
            entity.Property(e => e.IsNAutomatyczna).HasColumnName("IsN_Automatyczna");
            entity.Property(e => e.IsNBlokada).HasColumnName("IsN_Blokada");
            entity.Property(e => e.IsNCzesciowa).HasColumnName("IsN_Czesciowa");
            entity.Property(e => e.IsNDataWypelnienia)
                .HasColumnType("datetime")
                .HasColumnName("IsN_DataWypelnienia");
            entity.Property(e => e.IsNEdeklDataOdebraniaUpo)
                .HasColumnType("datetime")
                .HasColumnName("IsN_EDekl_DataOdebraniaUPO");
            entity.Property(e => e.IsNEdeklDataWplyniecia)
                .HasMaxLength(50)
                .HasColumnName("IsN_EDekl_DataWplyniecia");
            entity.Property(e => e.IsNEdeklDataWyslania)
                .HasColumnType("datetime")
                .HasColumnName("IsN_EDekl_DataWyslania");
            entity.Property(e => e.IsNEdeklDokumentId)
                .HasMaxLength(240)
                .IsUnicode(false)
                .HasColumnName("IsN_EDekl_DokumentID");
            entity.Property(e => e.IsNEdeklKodUrzedu)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("IsN_EDekl_KodUrzedu");
            entity.Property(e => e.IsNEdeklNip1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IsN_EDekl_NIP1");
            entity.Property(e => e.IsNEdeklNip2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IsN_EDekl_NIP2");
            entity.Property(e => e.IsNEdeklNrWlasny)
                .HasMaxLength(240)
                .HasColumnName("IsN_EDekl_NrWlasny");
            entity.Property(e => e.IsNEdeklOperatorPobierajacyUpo).HasColumnName("IsN_EDekl_OperatorPobierajacyUPO");
            entity.Property(e => e.IsNEdeklOperatorWysylajacy).HasColumnName("IsN_EDekl_OperatorWysylajacy");
            entity.Property(e => e.IsNEdeklPodmiot)
                .HasMaxLength(1000)
                .HasColumnName("IsN_EDekl_Podmiot");
            entity.Property(e => e.IsNEdeklRefId)
                .HasMaxLength(240)
                .HasColumnName("IsN_EDekl_RefID");
            entity.Property(e => e.IsNEdeklSigningTime)
                .HasMaxLength(50)
                .HasColumnName("IsN_EDekl_SigningTime");
            entity.Property(e => e.IsNEdeklSkrotDokumentu)
                .HasMaxLength(240)
                .HasColumnName("IsN_EDekl_SkrotDokumentu");
            entity.Property(e => e.IsNEdeklSkrotStruktury)
                .HasMaxLength(240)
                .HasColumnName("IsN_EDekl_SkrotStruktury");
            entity.Property(e => e.IsNEdeklStatus).HasColumnName("IsN_EDekl_Status");
            entity.Property(e => e.IsNEdeklStatusOpis)
                .HasMaxLength(1000)
                .HasColumnName("IsN_EDekl_StatusOpis");
            entity.Property(e => e.IsNEdeklStempelCzasu)
                .HasMaxLength(240)
                .HasColumnName("IsN_EDekl_StempelCzasu");
            entity.Property(e => e.IsNEdeklStrukturaLogiczna)
                .HasMaxLength(240)
                .HasColumnName("IsN_EDekl_StrukturaLogiczna");
            entity.Property(e => e.IsNIloscPozycji)
                .HasComputedColumnSql("([CDN].[FNISN_ILOSC]([ISN_ISNID]))", false)
                .HasColumnName("IsN_IloscPozycji");
            entity.Property(e => e.IsNKursNumer).HasColumnName("IsN_KursNumer");
            entity.Property(e => e.IsNMiejscowosc)
                .HasMaxLength(50)
                .HasColumnName("IsN_Miejscowosc");
            entity.Property(e => e.IsNMiesiac).HasColumnName("IsN_Miesiac");
            entity.Property(e => e.IsNNetto)
                .HasComputedColumnSql("([CDN].[FNISN_WARTOSC]([ISN_ISNID]))", false)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IsN_Netto");
            entity.Property(e => e.IsNNumer).HasColumnName("IsN_Numer");
            entity.Property(e => e.IsNOpeModId).HasColumnName("IsN_OpeModId");
            entity.Property(e => e.IsNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_OpeModKod");
            entity.Property(e => e.IsNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("IsN_OpeModNazwisko");
            entity.Property(e => e.IsNOpeZalId).HasColumnName("IsN_OpeZalId");
            entity.Property(e => e.IsNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_OpeZalKod");
            entity.Property(e => e.IsNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("IsN_OpeZalNazwisko");
            entity.Property(e => e.IsNPodAdres2)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodAdres2");
            entity.Property(e => e.IsNPodGmina)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodGmina");
            entity.Property(e => e.IsNPodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IsN_PodKodPocztowy");
            entity.Property(e => e.IsNPodKraj)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodKraj");
            entity.Property(e => e.IsNPodMiasto)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodMiasto");
            entity.Property(e => e.IsNPodNazwa1)
                .HasMaxLength(50)
                .HasColumnName("IsN_PodNazwa1");
            entity.Property(e => e.IsNPodNazwa2)
                .HasMaxLength(50)
                .HasColumnName("IsN_PodNazwa2");
            entity.Property(e => e.IsNPodNazwa3)
                .HasMaxLength(250)
                .HasColumnName("IsN_PodNazwa3");
            entity.Property(e => e.IsNPodNipE)
                .HasMaxLength(20)
                .HasColumnName("IsN_PodNipE");
            entity.Property(e => e.IsNPodNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IsN_PodNipKraj");
            entity.Property(e => e.IsNPodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("IsN_PodNrDomu");
            entity.Property(e => e.IsNPodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("IsN_PodNrLokalu");
            entity.Property(e => e.IsNPodPoczta)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodPoczta");
            entity.Property(e => e.IsNPodPowiat)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodPowiat");
            entity.Property(e => e.IsNPodRegon)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("IsN_PodRegon");
            entity.Property(e => e.IsNPodUlica)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodUlica");
            entity.Property(e => e.IsNPodWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("IsN_PodWojewodztwo");
            entity.Property(e => e.IsNRodzaj).HasColumnName("IsN_Rodzaj");
            entity.Property(e => e.IsNRok).HasColumnName("IsN_Rok");
            entity.Property(e => e.IsNStaModId).HasColumnName("IsN_StaModId");
            entity.Property(e => e.IsNStaZalId).HasColumnName("IsN_StaZalId");
            entity.Property(e => e.IsNTsExport)
                .HasColumnType("datetime")
                .HasColumnName("IsN_TS_Export");
            entity.Property(e => e.IsNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("IsN_TS_Mod");
            entity.Property(e => e.IsNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("IsN_TS_Zal");
            entity.Property(e => e.IsNTyp).HasColumnName("IsN_Typ");
            entity.Property(e => e.IsNUrzadCelnyKod)
                .HasMaxLength(8)
                .HasColumnName("IsN_UrzadCelnyKod");
            entity.Property(e => e.IsNWersja).HasColumnName("IsN_Wersja");
            entity.Property(e => e.IsNWypEmail)
                .HasMaxLength(50)
                .HasColumnName("IsN_WypEmail");
            entity.Property(e => e.IsNWypFax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IsN_WypFax");
            entity.Property(e => e.IsNWypImie)
                .HasMaxLength(50)
                .HasColumnName("IsN_WypImie");
            entity.Property(e => e.IsNWypNazwisko)
                .HasMaxLength(50)
                .HasColumnName("IsN_WypNazwisko");
            entity.Property(e => e.IsNWypTelefon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IsN_WypTelefon");
            entity.Property(e => e.IsNZglAdres2)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglAdres2");
            entity.Property(e => e.IsNZglGmina)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglGmina");
            entity.Property(e => e.IsNZglId).HasColumnName("IsN_ZglId");
            entity.Property(e => e.IsNZglKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IsN_ZglKodPocztowy");
            entity.Property(e => e.IsNZglKraj)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglKraj");
            entity.Property(e => e.IsNZglMiasto)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglMiasto");
            entity.Property(e => e.IsNZglNazwa1)
                .HasMaxLength(50)
                .HasColumnName("IsN_ZglNazwa1");
            entity.Property(e => e.IsNZglNazwa2)
                .HasMaxLength(50)
                .HasColumnName("IsN_ZglNazwa2");
            entity.Property(e => e.IsNZglNazwa3)
                .HasMaxLength(250)
                .HasColumnName("IsN_ZglNazwa3");
            entity.Property(e => e.IsNZglNipE)
                .HasMaxLength(20)
                .HasColumnName("IsN_ZglNipE");
            entity.Property(e => e.IsNZglNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IsN_ZglNipKraj");
            entity.Property(e => e.IsNZglNrDomu)
                .HasMaxLength(10)
                .HasColumnName("IsN_ZglNrDomu");
            entity.Property(e => e.IsNZglNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("IsN_ZglNrLokalu");
            entity.Property(e => e.IsNZglPoczta)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglPoczta");
            entity.Property(e => e.IsNZglPowiat)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglPowiat");
            entity.Property(e => e.IsNZglRegon)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("IsN_ZglRegon");
            entity.Property(e => e.IsNZglTyp).HasColumnName("IsN_ZglTyp");
            entity.Property(e => e.IsNZglUlica)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglUlica");
            entity.Property(e => e.IsNZglWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("IsN_ZglWojewodztwo");
            entity.Property(e => e.IsNZwrId).HasColumnName("IsN_ZwrId");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.IntrastatNags)
                .HasForeignKey(d => new { d.IsNZglId, d.IsNZglTyp })
                .HasConstraintName("FK_IsNZglaszajacy");
        });

        modelBuilder.Entity<KalendDni>(entity =>
        {
            entity.HasKey(e => e.KadKadId)
                .HasName("KAD_Primary")
                .HasFillFactor(100);

            entity.ToTable("KalendDni", "CDN", tb =>
                {
                    tb.HasTrigger("KalendDni_DeleteHandler");
                    tb.HasTrigger("KalendDni_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.KadData, "HRM_KalendDniData").HasFillFactor(100);

            entity.HasIndex(e => new { e.KadKalId, e.KadData }, "KADData")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KadKalId, e.KadData, e.KadKadId, e.KadTypDnia }, "KAD_DataTypDnia").HasFillFactor(100);

            entity.Property(e => e.KadKadId).HasColumnName("KAD_KadId");
            entity.Property(e => e.KadData)
                .HasColumnType("datetime")
                .HasColumnName("KAD_Data");
            entity.Property(e => e.KadImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("KAD_ImportRowId");
            entity.Property(e => e.KadKalId).HasColumnName("KAD_KalId");
            entity.Property(e => e.KadOdwId).HasColumnName("KAD_OdwId");
            entity.Property(e => e.KadOpeModId).HasColumnName("KAD_OpeModId");
            entity.Property(e => e.KadOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAD_OpeModKod");
            entity.Property(e => e.KadOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KAD_OpeModNazwisko");
            entity.Property(e => e.KadOpeZalId).HasColumnName("KAD_OpeZalId");
            entity.Property(e => e.KadOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAD_OpeZalKod");
            entity.Property(e => e.KadOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KAD_OpeZalNazwisko");
            entity.Property(e => e.KadStaModId).HasColumnName("KAD_StaModId");
            entity.Property(e => e.KadStaZalId).HasColumnName("KAD_StaZalId");
            entity.Property(e => e.KadTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KAD_TS_Mod");
            entity.Property(e => e.KadTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KAD_TS_Zal");
            entity.Property(e => e.KadTypDnia).HasColumnName("KAD_TypDnia");

            entity.HasOne(d => d.KadKal).WithMany(p => p.KalendDnis)
                .HasForeignKey(d => d.KadKalId)
                .HasConstraintName("FK_KADData");

            entity.HasOne(d => d.KadOdw).WithMany(p => p.KalendDnis)
                .HasForeignKey(d => d.KadOdwId)
                .HasConstraintName("FK_KADOdwLink");
        });

        modelBuilder.Entity<KalendDniGodz>(entity =>
        {
            entity.HasKey(e => e.KdgKdgId)
                .HasName("KDG_Primary")
                .HasFillFactor(100);

            entity.ToTable("KalendDniGodz", "CDN", tb => tb.HasTrigger("KalendDniGodz_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.KdgLp, "KDGLp").HasFillFactor(100);

            entity.HasIndex(e => new { e.KdgKadId, e.KdgKdgId, e.KdgStrefa }, "KDG_Strefa").HasFillFactor(100);

            entity.HasIndex(e => e.KdgKadId, "PDGKadLink").HasFillFactor(100);

            entity.Property(e => e.KdgKdgId).HasColumnName("KDG_KdgId");
            entity.Property(e => e.KdgDoGodziny)
                .HasColumnType("datetime")
                .HasColumnName("KDG_DoGodziny");
            entity.Property(e => e.KdgDzlId).HasColumnName("KDG_DzlId");
            entity.Property(e => e.KdgImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("KDG_ImportRowId");
            entity.Property(e => e.KdgKadId).HasColumnName("KDG_KadId");
            entity.Property(e => e.KdgLp).HasColumnName("KDG_Lp");
            entity.Property(e => e.KdgOdGodziny)
                .HasColumnType("datetime")
                .HasColumnName("KDG_OdGodziny");
            entity.Property(e => e.KdgPrjId).HasColumnName("KDG_PrjId");
            entity.Property(e => e.KdgStrefa).HasColumnName("KDG_Strefa");
        });

        modelBuilder.Entity<Kalendarze>(entity =>
        {
            entity.HasKey(e => e.KalKalId)
                .HasName("KAL_Primary")
                .HasFillFactor(100);

            entity.ToTable("Kalendarze", "CDN", tb =>
                {
                    tb.HasTrigger("Kalendarze_Delete_Trigger");
                    tb.HasTrigger("Kalendarze_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.KalAkronim, "KALAkronim")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KalKalId).HasColumnName("KAL_KalId");
            entity.Property(e => e.KalAkronim)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("KAL_Akronim");
            entity.Property(e => e.KalBilansowanie)
                .HasDefaultValue((byte)2)
                .HasColumnName("KAL_Bilansowanie");
            entity.Property(e => e.KalDoplataZaPraceWnocy).HasColumnName("KAL_DoplataZaPraceWNocy");
            entity.Property(e => e.KalEdycjaNadgodz).HasColumnName("KAL_EdycjaNadgodz");
            entity.Property(e => e.KalEdycjaNocne).HasColumnName("KAL_EdycjaNocne");
            entity.Property(e => e.KalImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("KAL_ImportRowId");
            entity.Property(e => e.KalLiczOdchylkiOdZasad).HasColumnName("KAL_LiczOdchylkiOdZasad");
            entity.Property(e => e.KalLiczStdDopNadg).HasColumnName("KAL_LiczStdDopNadg");
            entity.Property(e => e.KalLiczStdDopNadgNoc).HasColumnName("KAL_LiczStdDopNadgNoc");
            entity.Property(e => e.KalModPlanNb).HasColumnName("KAL_ModPlanNB");
            entity.Property(e => e.KalNadgodzKp130).HasColumnName("KAL_NadgodzKP130");
            entity.Property(e => e.KalNadgodzOkres).HasColumnName("KAL_NadgodzOkres");
            entity.Property(e => e.KalNadgodzOpoznienie).HasColumnName("KAL_NadgodzOpoznienie");
            entity.Property(e => e.KalNadgodzPrzesuniecie).HasColumnName("KAL_NadgodzPrzesuniecie");
            entity.Property(e => e.KalNadgodzRozlicz).HasColumnName("KAL_NadgodzRozlicz");
            entity.Property(e => e.KalNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("KAL_Nazwa");
            entity.Property(e => e.KalNieaktywny).HasColumnName("KAL_Nieaktywny");
            entity.Property(e => e.KalNocDo)
                .HasDefaultValueSql("((-2))")
                .HasColumnType("datetime")
                .HasColumnName("KAL_NocDo");
            entity.Property(e => e.KalNocKp130).HasColumnName("KAL_NocKP130");
            entity.Property(e => e.KalNocLimit)
                .HasDefaultValueSql("((-2))")
                .HasColumnType("datetime")
                .HasColumnName("KAL_NocLimit");
            entity.Property(e => e.KalNocOd)
                .HasDefaultValueSql("((-2))")
                .HasColumnType("datetime")
                .HasColumnName("KAL_NocOd");
            entity.Property(e => e.KalNocProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAL_NocProcent");
            entity.Property(e => e.KalNormaDobowa)
                .HasColumnType("datetime")
                .HasColumnName("KAL_NormaDobowa");
            entity.Property(e => e.KalNormaKalendarz).HasColumnName("KAL_NormaKalendarz");
            entity.Property(e => e.KalNormaTygodniowa)
                .HasColumnType("datetime")
                .HasColumnName("KAL_NormaTygodniowa");
            entity.Property(e => e.KalOpeModId).HasColumnName("KAL_OpeModId");
            entity.Property(e => e.KalOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAL_OpeModKod");
            entity.Property(e => e.KalOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KAL_OpeModNazwisko");
            entity.Property(e => e.KalOpeZalId).HasColumnName("KAL_OpeZalId");
            entity.Property(e => e.KalOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAL_OpeZalKod");
            entity.Property(e => e.KalOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KAL_OpeZalNazwisko");
            entity.Property(e => e.KalOpis)
                .HasMaxLength(64)
                .HasColumnName("KAL_Opis");
            entity.Property(e => e.KalPodzialNadgDobTyg).HasColumnName("KAL_PodzialNadgDobTyg");
            entity.Property(e => e.KalPowyzejPonizejKp130).HasColumnName("KAL_PowyzejPonizejKP130");
            entity.Property(e => e.KalProcent100)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAL_Procent100");
            entity.Property(e => e.KalProcent50)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAL_Procent50");
            entity.Property(e => e.KalStaModId).HasColumnName("KAL_StaModId");
            entity.Property(e => e.KalStaZalId).HasColumnName("KAL_StaZalId");
            entity.Property(e => e.KalTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KAL_TS_Mod");
            entity.Property(e => e.KalTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KAL_TS_Zal");
            entity.Property(e => e.KalUwzglDobowWymPlan).HasColumnName("KAL_UwzglDobowWymPlan");
            entity.Property(e => e.KalUwzglStandSwieta).HasColumnName("KAL_UwzglStandSwieta");
            entity.Property(e => e.KalUwzglWymiarEtatu).HasColumnName("KAL_UwzglWymiarEtatu");
            entity.Property(e => e.KalWeryfikacjaRegul)
                .HasDefaultValue((byte)1)
                .HasColumnName("KAL_WeryfikacjaRegul");
        });

        modelBuilder.Entity<KartyKredytowe>(entity =>
        {
            entity.HasKey(e => e.KkrKkrId)
                .HasName("KKr_Primary")
                .HasFillFactor(100);

            entity.ToTable("KartyKredytowe", "CDN");

            entity.HasIndex(e => e.KkrNazwa, "KKrNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KkrKkrId).HasColumnName("KKr_KKrId");
            entity.Property(e => e.KkrAlgorytm).HasColumnName("KKr_Algorytm");
            entity.Property(e => e.KkrNazwa)
                .HasMaxLength(20)
                .HasColumnName("KKr_Nazwa");
        });

        modelBuilder.Entity<KasaChor>(entity =>
        {
            entity.HasKey(e => e.KchKchId)
                .HasName("KCH_Primary")
                .HasFillFactor(100);

            entity.ToTable("KasaChor", "CDN");

            entity.HasIndex(e => e.KchZjeId, "KCHZjeLink").HasFillFactor(100);

            entity.Property(e => e.KchKchId).HasColumnName("KCH_KchId");
            entity.Property(e => e.KchKod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("KCH_Kod");
            entity.Property(e => e.KchOpis)
                .HasMaxLength(254)
                .HasColumnName("KCH_Opis");
            entity.Property(e => e.KchPoziom).HasColumnName("KCH_Poziom");
            entity.Property(e => e.KchWybieralny).HasColumnName("KCH_Wybieralny");
            entity.Property(e => e.KchZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("KCH_ZjeId");
        });

        modelBuilder.Entity<KatStawkiVat>(entity =>
        {
            entity.HasKey(e => e.KaVKaVid)
                .HasName("KaV_Primary")
                .HasFillFactor(100);

            entity.ToTable("KatStawkiVAT", "CDN");

            entity.HasIndex(e => new { e.KaVKatId, e.KaVKodKraju }, "KaVKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KaVKaVid).HasColumnName("KaV_KaVID");
            entity.Property(e => e.KaVFlaga).HasColumnName("KaV_Flaga");
            entity.Property(e => e.KaVKatId).HasColumnName("KaV_KatID");
            entity.Property(e => e.KaVKodKraju)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("KaV_KodKraju");
            entity.Property(e => e.KaVRodzaj).HasColumnName("KaV_Rodzaj");
            entity.Property(e => e.KaVStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KaV_Stawka");
            entity.Property(e => e.KaVZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KaV_Zrodlowa");

            entity.HasOne(d => d.KaVKat).WithMany(p => p.KatStawkiVats)
                .HasForeignKey(d => d.KaVKatId)
                .HasConstraintName("FK_KaVKategoria");
        });

        modelBuilder.Entity<KatalogZakazy>(entity =>
        {
            entity.HasKey(e => e.KtZKtZid)
                .HasName("KtZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("KatalogZakazy", "CDN");

            entity.HasIndex(e => new { e.KtZKtlId, e.KtZOpeId }, "KtZKatalog")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KtZKtZid).HasColumnName("KtZ_KtZId");
            entity.Property(e => e.KtZDodawanie).HasColumnName("KtZ_Dodawanie");
            entity.Property(e => e.KtZKasowanieInne).HasColumnName("KtZ_KasowanieInne");
            entity.Property(e => e.KtZKasowanieWlas).HasColumnName("KtZ_KasowanieWlas");
            entity.Property(e => e.KtZKtlId).HasColumnName("KtZ_KtlId");
            entity.Property(e => e.KtZOpeId).HasColumnName("KtZ_OpeId");
            entity.Property(e => e.KtZPodglad).HasColumnName("KtZ_Podglad");
            entity.Property(e => e.KtZZmianaInne).HasColumnName("KtZ_ZmianaInne");
            entity.Property(e => e.KtZZmianaWlas).HasColumnName("KtZ_ZmianaWlas");
        });

        modelBuilder.Entity<KatalogZakazyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KatalogZakazyView", "CDN");

            entity.Property(e => e.KtZDodawanie).HasColumnName("KtZ_Dodawanie");
            entity.Property(e => e.KtZKasowanieInne).HasColumnName("KtZ_KasowanieInne");
            entity.Property(e => e.KtZKasowanieWlas).HasColumnName("KtZ_KasowanieWlas");
            entity.Property(e => e.KtZKtZid).HasColumnName("KtZ_KtZId");
            entity.Property(e => e.KtZKtlId).HasColumnName("KtZ_KtlId");
            entity.Property(e => e.KtZOpeId).HasColumnName("KtZ_OpeId");
            entity.Property(e => e.KtZPodglad).HasColumnName("KtZ_Podglad");
            entity.Property(e => e.KtZTyp).HasColumnName("KtZ_Typ");
            entity.Property(e => e.KtZZmianaInne).HasColumnName("KtZ_ZmianaInne");
            entity.Property(e => e.KtZZmianaWlas).HasColumnName("KtZ_ZmianaWlas");
        });

        modelBuilder.Entity<Katalogi>(entity =>
        {
            entity.HasKey(e => e.KtlKtlId)
                .HasName("Ktl_Primary")
                .HasFillFactor(100);

            entity.ToTable("Katalogi", "CDN");

            entity.HasIndex(e => e.KtlSymbol, "KtlSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KtlKtlId).HasColumnName("Ktl_KtlId");
            entity.Property(e => e.KtlDomyslny).HasColumnName("Ktl_Domyslny");
            entity.Property(e => e.KtlIbard24)
                .HasMaxLength(255)
                .HasColumnName("Ktl_IBard24");
            entity.Property(e => e.KtlIbard24Id).HasColumnName("Ktl_IBard24Id");
            entity.Property(e => e.KtlNazwa)
                .HasMaxLength(50)
                .HasColumnName("Ktl_Nazwa");
            entity.Property(e => e.KtlNumeracja)
                .HasMaxLength(5)
                .HasColumnName("Ktl_Numeracja");
            entity.Property(e => e.KtlOpeModId).HasColumnName("Ktl_OpeModID");
            entity.Property(e => e.KtlOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ktl_OpeModKod");
            entity.Property(e => e.KtlOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Ktl_OpeModNazwisko");
            entity.Property(e => e.KtlOpeZalId).HasColumnName("Ktl_OpeZalID");
            entity.Property(e => e.KtlOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ktl_OpeZalKod");
            entity.Property(e => e.KtlOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Ktl_OpeZalNazwisko");
            entity.Property(e => e.KtlSsid).HasColumnName("Ktl_SSID");
            entity.Property(e => e.KtlStaModId).HasColumnName("Ktl_StaModId");
            entity.Property(e => e.KtlStaZalId).HasColumnName("Ktl_StaZalId");
            entity.Property(e => e.KtlSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ktl_Symbol");
            entity.Property(e => e.KtlTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Ktl_TS_Mod");
            entity.Property(e => e.KtlTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Ktl_TS_Zal");
        });

        modelBuilder.Entity<KatalogiView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KatalogiView", "CDN");

            entity.Property(e => e.KtlVDonTyp).HasColumnName("KtlV_DonTyp");
            entity.Property(e => e.KtlVKtlId).HasColumnName("KtlV_KtlId");
            entity.Property(e => e.KtlVNazwa)
                .HasMaxLength(50)
                .HasColumnName("KtlV_Nazwa");
            entity.Property(e => e.KtlVNumeracja)
                .HasMaxLength(5)
                .HasColumnName("KtlV_Numeracja");
            entity.Property(e => e.KtlVOpeModId).HasColumnName("KtlV_OpeModID");
            entity.Property(e => e.KtlVOpeZalId).HasColumnName("KtlV_OpeZalID");
            entity.Property(e => e.KtlVSsid).HasColumnName("KtlV_SSID");
            entity.Property(e => e.KtlVStaModId).HasColumnName("KtlV_StaModId");
            entity.Property(e => e.KtlVStaZalId).HasColumnName("KtlV_StaZalId");
            entity.Property(e => e.KtlVSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KtlV_Symbol");
            entity.Property(e => e.KtlVTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KtlV_TS_Mod");
            entity.Property(e => e.KtlVTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KtlV_TS_Zal");
        });

        modelBuilder.Entity<Kategorie>(entity =>
        {
            entity.HasKey(e => e.KatKatId)
                .HasName("Kat_Primary")
                .HasFillFactor(100);

            entity.ToTable("Kategorie", "CDN", tb =>
                {
                    tb.HasTrigger("Kategorie_Delete_Trigger");
                    tb.HasTrigger("Kategorie_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.KatImportRowId, "KatGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KatTyp, e.KatKodOgolny, e.KatPoziom, e.KatKodSzczegol }, "KatKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KatTyp, e.KatPoziom, e.KatKodOgolny, e.KatKodSzczegol }, "KatOgolny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KatKodSzczegol, "KatSzczegol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KatKatId).HasColumnName("Kat_KatID");
            entity.Property(e => e.KatBudzet)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Kat_Budzet");
            entity.Property(e => e.KatDetal).HasColumnName("Kat_Detal");
            entity.Property(e => e.KatElixirO1)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("Kat_ElixirO1");
            entity.Property(e => e.KatElixirO2)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("Kat_ElixirO2");
            entity.Property(e => e.KatElixirO3)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("Kat_ElixirO3");
            entity.Property(e => e.KatElixirO4)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("Kat_ElixirO4");
            entity.Property(e => e.KatFiskalny).HasColumnName("Kat_Fiskalny");
            entity.Property(e => e.KatFlaga).HasColumnName("Kat_Flaga");
            entity.Property(e => e.KatImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Kat_ImportAppId");
            entity.Property(e => e.KatImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("Kat_ImportRowId");
            entity.Property(e => e.KatKodOgolny)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Kat_KodOgolny");
            entity.Property(e => e.KatKodSzczegol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Kat_KodSzczegol");
            entity.Property(e => e.KatKolumnaKpir).HasColumnName("Kat_KolumnaKPIR");
            entity.Property(e => e.KatKolumnaRycz).HasColumnName("Kat_KolumnaRycz");
            entity.Property(e => e.KatKontoSegmentMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Kat_KontoSegmentMA");
            entity.Property(e => e.KatKontoSegmentWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Kat_KontoSegmentWN");
            entity.Property(e => e.KatKsiegujWkoszty).HasColumnName("Kat_KsiegujWKoszty");
            entity.Property(e => e.KatKsiegujWkosztyProcent)
                .HasDefaultValueSql("((75.00))")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Kat_KsiegujWKosztyProcent");
            entity.Property(e => e.KatKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Kat_Kwota");
            entity.Property(e => e.KatNieaktywny).HasColumnName("Kat_Nieaktywny");
            entity.Property(e => e.KatOdliczenia).HasColumnName("Kat_Odliczenia");
            entity.Property(e => e.KatOpeModId).HasColumnName("Kat_OpeModID");
            entity.Property(e => e.KatOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kat_OpeModKod");
            entity.Property(e => e.KatOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Kat_OpeModNazwisko");
            entity.Property(e => e.KatOpeZalId).HasColumnName("Kat_OpeZalID");
            entity.Property(e => e.KatOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kat_OpeZalKod");
            entity.Property(e => e.KatOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Kat_OpeZalNazwisko");
            entity.Property(e => e.KatOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Kat_Opis");
            entity.Property(e => e.KatParentId).HasColumnName("Kat_ParentID");
            entity.Property(e => e.KatPodzielOdliczenia).HasColumnName("Kat_PodzielOdliczenia");
            entity.Property(e => e.KatPodzielOdliczeniaProcent)
                .HasDefaultValueSql("((50.00))")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Kat_PodzielOdliczeniaProcent");
            entity.Property(e => e.KatPoziom).HasColumnName("Kat_Poziom");
            entity.Property(e => e.KatRodzajZakupu).HasColumnName("Kat_RodzajZakupu");
            entity.Property(e => e.KatStaModId).HasColumnName("Kat_StaModId");
            entity.Property(e => e.KatStaZalId).HasColumnName("Kat_StaZalId");
            entity.Property(e => e.KatStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Kat_Stawka");
            entity.Property(e => e.KatTsExport)
                .HasColumnType("datetime")
                .HasColumnName("Kat_TS_Export");
            entity.Property(e => e.KatTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Kat_TS_Mod");
            entity.Property(e => e.KatTsUzyc)
                .HasColumnType("datetime")
                .HasColumnName("Kat_TS_Uzyc");
            entity.Property(e => e.KatTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Kat_TS_Zal");
            entity.Property(e => e.KatTyp).HasColumnName("Kat_Typ");
            entity.Property(e => e.KatUdzial)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Kat_Udzial");
            entity.Property(e => e.KatWzId).HasColumnName("Kat_WzID");
            entity.Property(e => e.KatZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Kat_Zrodlowa");
        });

        modelBuilder.Entity<KnTupusty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KnTUpusty", "CDN");

            entity.Property(e => e.KnUFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("KnU_FlagaNB");
            entity.Property(e => e.KnUKntTyp).HasColumnName("KnU_KntTyp");
            entity.Property(e => e.KnUNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("KnU_Notatki");
            entity.Property(e => e.KnUNrKursu).HasColumnName("KnU_NrKursu");
            entity.Property(e => e.KnUSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("KnU_Symbol");
            entity.Property(e => e.KnUUpust)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KnU_Upust");
            entity.Property(e => e.KnUUpustWzor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("KnU_UpustWzor");
            entity.Property(e => e.KnuKntFirma).HasColumnName("Knu_KntFirma");
            entity.Property(e => e.KnuKntLp).HasColumnName("Knu_KntLp");
            entity.Property(e => e.KnuKntNumer).HasColumnName("Knu_KntNumer");
            entity.Property(e => e.KnuTwgFirma).HasColumnName("Knu_TwgFirma");
            entity.Property(e => e.KnuTwgLp).HasColumnName("Knu_TwgLp");
            entity.Property(e => e.KnuTwgNumer).HasColumnName("Knu_TwgNumer");
            entity.Property(e => e.KnuTwgTyp).HasColumnName("Knu_TwgTyp");
        });

        modelBuilder.Entity<KnfOdsetkiKbview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KnfOdsetkiKBView", "CDN");

            entity.Property(e => e.KokbvOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("KOKBV_OkresDo");
            entity.Property(e => e.KokbvOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("KOKBV_OkresOd");
            entity.Property(e => e.KokbvStopa)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("KOKBV_Stopa");
            entity.Property(e => e.KokbvTyp).HasColumnName("KOKBV_Typ");
        });

        modelBuilder.Entity<KntAtrybuty>(entity =>
        {
            entity.HasKey(e => e.KnAKnAid)
                .HasName("KnA_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntAtrybuty", "CDN");

            entity.HasIndex(e => e.KnADeAid, "KnADefAtrybut").HasFillFactor(100);

            entity.HasIndex(e => new { e.KnADeAid, e.KnAPodmiotId, e.KnAPodmiotTyp }, "KnADefAtrybutPodmiot").HasFillFactor(100);

            entity.HasIndex(e => new { e.KnAPodmiotId, e.KnAPodmiotTyp }, "KnAPodmiot").HasFillFactor(100);

            entity.Property(e => e.KnAKnAid).HasColumnName("KnA_KnAId");
            entity.Property(e => e.KnACzyDrukowac).HasColumnName("KnA_CzyDrukowac");
            entity.Property(e => e.KnACzyKod).HasColumnName("KnA_CzyKod");
            entity.Property(e => e.KnACzyKopiowac).HasColumnName("KnA_CzyKopiowac");
            entity.Property(e => e.KnACzyKopiowacDoVat).HasColumnName("KnA_CzyKopiowacDoVAT");
            entity.Property(e => e.KnACzyPrzenosic).HasColumnName("KnA_CzyPrzenosic");
            entity.Property(e => e.KnADeAid).HasColumnName("KnA_DeAId");
            entity.Property(e => e.KnAPodmiotId).HasColumnName("KnA_PodmiotId");
            entity.Property(e => e.KnAPodmiotTyp).HasColumnName("KnA_PodmiotTyp");
            entity.Property(e => e.KnAWartoscTxt)
                .HasMaxLength(1024)
                .HasColumnName("KnA_WartoscTxt");

            entity.HasOne(d => d.KnADeA).WithMany(p => p.KntAtrybuties)
                .HasForeignKey(d => d.KnADeAid)
                .HasConstraintName("FK_KnADefAtrybut");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.KntAtrybuties)
                .HasForeignKey(d => new { d.KnAPodmiotId, d.KnAPodmiotTyp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KnAPodmiot");
        });

        modelBuilder.Entity<KntEsklepy>(entity =>
        {
            entity.HasKey(e => e.KesKesid)
                .HasName("KES_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntESklepy", "CDN");

            entity.HasIndex(e => new { e.KesKntId, e.KesESklepId }, "KESKntESS")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KesKesid).HasColumnName("KES_KESID");
            entity.Property(e => e.KesESklepId).HasColumnName("KES_eSklepID");
            entity.Property(e => e.KesKntId).HasColumnName("KES_KntID");
            entity.Property(e => e.KesTypCenyDomyslnej).HasColumnName("KES_TypCenyDomyslnej");

            entity.HasOne(d => d.KesESklep).WithMany(p => p.KntEsklepies)
                .HasForeignKey(d => d.KesESklepId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KESESS");

            entity.HasOne(d => d.KesKnt).WithMany(p => p.KntEsklepies)
                .HasForeignKey(d => d.KesKntId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KESKnt");
        });

        modelBuilder.Entity<KntEsklepyPrzedstawiciele>(entity =>
        {
            entity.HasKey(e => e.KespKespid)
                .HasName("KESP_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntESklepyPrzedstawiciele", "CDN");

            entity.HasIndex(e => new { e.KespKntId, e.KespESklepId, e.KespPrzedstawicielId }, "KESPKntESS")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KespKespid).HasColumnName("KESP_KESPID");
            entity.Property(e => e.KespDomyslny).HasColumnName("KESP_Domyslny");
            entity.Property(e => e.KespESklepId).HasColumnName("KESP_eSklepID");
            entity.Property(e => e.KespEmail)
                .HasMaxLength(127)
                .HasColumnName("KESP_Email");
            entity.Property(e => e.KespKntId).HasColumnName("KESP_KntID");
            entity.Property(e => e.KespNazwisko)
                .HasMaxLength(40)
                .HasColumnName("KESP_Nazwisko");
            entity.Property(e => e.KespNieAktywny).HasColumnName("KESP_NieAktywny");
            entity.Property(e => e.KespPrzedstawicielId).HasColumnName("KESP_PrzedstawicielID");
            entity.Property(e => e.KespPrzedstawicieleSklepId).HasColumnName("KESP_PrzedstawicieleSklepID");

            entity.HasOne(d => d.KespESklep).WithMany(p => p.KntEsklepyPrzedstawicieles)
                .HasForeignKey(d => d.KespESklepId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KESPESS");

            entity.HasOne(d => d.KespKnt).WithMany(p => p.KntEsklepyPrzedstawicieles)
                .HasForeignKey(d => d.KespKntId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KESPKnt");
        });

        modelBuilder.Entity<KntGrupy>(entity =>
        {
            entity.HasKey(e => new { e.KnGGidtyp, e.KnGGidnumer, e.KnGGrOtyp, e.KnGGrOnumer }).HasName("KnG_Primary");

            entity.ToTable("KntGrupy", "CDN");

            entity.Property(e => e.KnGGidtyp).HasColumnName("KnG_GIDTyp");
            entity.Property(e => e.KnGGidnumer).HasColumnName("KnG_GIDNumer");
            entity.Property(e => e.KnGGrOtyp).HasColumnName("KnG_GrOTyp");
            entity.Property(e => e.KnGGrOnumer).HasColumnName("KnG_GrONumer");
            entity.Property(e => e.KnGAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KnG_Akronim");
            entity.Property(e => e.KnGCzasModyfikacji).HasColumnName("KnG_CzasModyfikacji");
            entity.Property(e => e.KnGGidfirma).HasColumnName("KnG_GIDFirma");
            entity.Property(e => e.KnGGidlp).HasColumnName("KnG_GIDLp");
            entity.Property(e => e.KnGGrOfirma).HasColumnName("KnG_GrOFirma");
            entity.Property(e => e.KnGGrOlp).HasColumnName("KnG_GrOLp");
        });

        modelBuilder.Entity<KntKarty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KntKarty", "CDN");

            entity.Property(e => e.KntAdres)
                .HasMaxLength(40)
                .HasColumnName("Knt_Adres");
            entity.Property(e => e.KntAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Akronim");
            entity.Property(e => e.KntAkronimFormat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_AkronimFormat");
            entity.Property(e => e.KntAktywna).HasColumnName("Knt_Aktywna");
            entity.Property(e => e.KntAkwFirma).HasColumnName("Knt_AkwFirma");
            entity.Property(e => e.KntAkwLp).HasColumnName("Knt_AkwLp");
            entity.Property(e => e.KntAkwNumer).HasColumnName("Knt_AkwNumer");
            entity.Property(e => e.KntAkwProwizja).HasColumnName("Knt_AkwProwizja");
            entity.Property(e => e.KntAkwTyp).HasColumnName("Knt_AkwTyp");
            entity.Property(e => e.KntAkwizytor).HasColumnName("Knt_Akwizytor");
            entity.Property(e => e.KntAtrybut1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Atrybut1");
            entity.Property(e => e.KntAtrybut2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Atrybut2");
            entity.Property(e => e.KntAtrybut3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Atrybut3");
            entity.Property(e => e.KntAutoPotwierdzenie).HasColumnName("Knt_AutoPotwierdzenie");
            entity.Property(e => e.KntBnkFirma).HasColumnName("Knt_BnkFirma");
            entity.Property(e => e.KntBnkLp).HasColumnName("Knt_BnkLp");
            entity.Property(e => e.KntBnkNumer).HasColumnName("Knt_BnkNumer");
            entity.Property(e => e.KntBnkTyp).HasColumnName("Knt_BnkTyp");
            entity.Property(e => e.KntBranza).HasColumnName("Knt_Branza");
            entity.Property(e => e.KntCechaOpis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_CechaOpis");
            entity.Property(e => e.KntCena).HasColumnName("Knt_Cena");
            entity.Property(e => e.KntDataKarty).HasColumnName("Knt_DataKarty");
            entity.Property(e => e.KntDataKoncesji).HasColumnName("Knt_DataKoncesji");
            entity.Property(e => e.KntDataW).HasColumnName("Knt_DataW");
            entity.Property(e => e.KntDewizowe).HasColumnName("Knt_Dewizowe");
            entity.Property(e => e.KntDzialalnosc).HasColumnName("Knt_Dzialalnosc");
            entity.Property(e => e.KntEan)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("Knt_Ean");
            entity.Property(e => e.KntEanFirma).HasColumnName("Knt_EanFirma");
            entity.Property(e => e.KntEanNumer).HasColumnName("Knt_EanNumer");
            entity.Property(e => e.KntEanTyp).HasColumnName("Knt_EanTyp");
            entity.Property(e => e.KntEmail)
                .HasMaxLength(127)
                .HasColumnName("Knt_EMail");
            entity.Property(e => e.KntExpoKraj).HasColumnName("Knt_ExpoKraj");
            entity.Property(e => e.KntFaVatosw)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_FaVATOsw");
            entity.Property(e => e.KntFavatdata).HasColumnName("Knt_FAVATData");
            entity.Property(e => e.KntFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Fax");
            entity.Property(e => e.KntFormaPl).HasColumnName("Knt_FormaPl");
            entity.Property(e => e.KntFormaplzak).HasColumnName("Knt_FORMAPLZAK");
            entity.Property(e => e.KntFormat1).HasColumnName("Knt_Format1");
            entity.Property(e => e.KntFormat2).HasColumnName("Knt_Format2");
            entity.Property(e => e.KntFormat3).HasColumnName("Knt_Format3");
            entity.Property(e => e.KntFppKod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_FppKod");
            entity.Property(e => e.KntGidfirma).HasColumnName("Knt_GIDFirma");
            entity.Property(e => e.KntGidlp).HasColumnName("Knt_GIDLp");
            entity.Property(e => e.KntGidnumer).HasColumnName("Knt_GIDNumer");
            entity.Property(e => e.KntGidtyp).HasColumnName("Knt_GIDTyp");
            entity.Property(e => e.KntHasloChk)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_HasloChk");
            entity.Property(e => e.KntHasloKontrahent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_HasloKontrahent");
            entity.Property(e => e.KntKarFirma).HasColumnName("Knt_KarFirma");
            entity.Property(e => e.KntKarLp).HasColumnName("Knt_KarLp");
            entity.Property(e => e.KntKarNumer).HasColumnName("Knt_KarNumer");
            entity.Property(e => e.KntKarTyp).HasColumnName("Knt_KarTyp");
            entity.Property(e => e.KntKnAfirma).HasColumnName("Knt_KnAFirma");
            entity.Property(e => e.KntKnAlp).HasColumnName("Knt_KnALp");
            entity.Property(e => e.KntKnAnumer).HasColumnName("Knt_KnANumer");
            entity.Property(e => e.KntKnAtyp).HasColumnName("Knt_KnATyp");
            entity.Property(e => e.KntKnPnumer).HasColumnName("KNT_KnPNumer");
            entity.Property(e => e.KntKnPparam).HasColumnName("KNT_KnPParam");
            entity.Property(e => e.KntKnPtyp).HasColumnName("KNT_KnPTyp");
            entity.Property(e => e.KntKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Knt_KodP");
            entity.Property(e => e.KntKoncesja).HasColumnName("Knt_Koncesja");
            entity.Property(e => e.KntKontoDostawcy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_KontoDostawcy");
            entity.Property(e => e.KntKontoOdbiorcy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_KontoOdbiorcy");
            entity.Property(e => e.KntKraj)
                .HasMaxLength(40)
                .HasColumnName("Knt_Kraj");
            entity.Property(e => e.KntLastModC).HasColumnName("Knt_LastModC");
            entity.Property(e => e.KntLastModL).HasColumnName("Knt_LastModL");
            entity.Property(e => e.KntLastModO).HasColumnName("Knt_LastModO");
            entity.Property(e => e.KntLimitOkres).HasColumnName("Knt_LimitOkres");
            entity.Property(e => e.KntLimitPoTerminie).HasColumnName("Knt_LimitPoTerminie");
            entity.Property(e => e.KntLimitWart).HasColumnName("Knt_LimitWart");
            entity.Property(e => e.KntMagFirma).HasColumnName("Knt_MagFirma");
            entity.Property(e => e.KntMagLp).HasColumnName("Knt_MagLp");
            entity.Property(e => e.KntMagNumer).HasColumnName("Knt_MagNumer");
            entity.Property(e => e.KntMagTyp).HasColumnName("Knt_MagTyp");
            entity.Property(e => e.KntMarza).HasColumnName("Knt_Marza");
            entity.Property(e => e.KntMaxLimitWart).HasColumnName("Knt_MaxLimitWart");
            entity.Property(e => e.KntMiasto)
                .HasMaxLength(40)
                .HasColumnName("Knt_Miasto");
            entity.Property(e => e.KntModem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Modem");
            entity.Property(e => e.KntNazwa1)
                .HasMaxLength(50)
                .HasColumnName("Knt_Nazwa1");
            entity.Property(e => e.KntNazwa2)
                .HasMaxLength(50)
                .HasColumnName("Knt_Nazwa2");
            entity.Property(e => e.KntNazwa3)
                .HasMaxLength(250)
                .HasColumnName("Knt_Nazwa3");
            entity.Property(e => e.KntNieaktywny).HasColumnName("Knt_Nieaktywny");
            entity.Property(e => e.KntNip)
                .HasMaxLength(20)
                .HasColumnName("Knt_Nip");
            entity.Property(e => e.KntNipE)
                .HasMaxLength(20)
                .HasColumnName("Knt_NipE");
            entity.Property(e => e.KntNrKursu).HasColumnName("Knt_NrKursu");
            entity.Property(e => e.KntNrRachunku)
                .HasMaxLength(51)
                .HasColumnName("Knt_NrRachunku");
            entity.Property(e => e.KntNumerKarty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_NumerKarty");
            entity.Property(e => e.KntObcaKarta).HasColumnName("Knt_ObcaKarta");
            entity.Property(e => e.KntOdleglosc).HasColumnName("Knt_Odleglosc");
            entity.Property(e => e.KntOpeFirma).HasColumnName("Knt_OpeFirma");
            entity.Property(e => e.KntOpeLp).HasColumnName("Knt_OpeLp");
            entity.Property(e => e.KntOpeNumer).HasColumnName("Knt_OpeNumer");
            entity.Property(e => e.KntOpeTyp).HasColumnName("Knt_OpeTyp");
            entity.Property(e => e.KntOsoba).HasColumnName("Knt_Osoba");
            entity.Property(e => e.KntOutlookUrl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_OutlookUrl");
            entity.Property(e => e.KntPesel)
                .HasMaxLength(11)
                .HasColumnName("Knt_Pesel");
            entity.Property(e => e.KntPlatnikVat).HasColumnName("Knt_PlatnikVat");
            entity.Property(e => e.KntPrcFirma).HasColumnName("Knt_PrcFirma");
            entity.Property(e => e.KntPrcLp).HasColumnName("Knt_PrcLp");
            entity.Property(e => e.KntPrcNumer).HasColumnName("Knt_PrcNumer");
            entity.Property(e => e.KntPrcTyp).HasColumnName("Knt_PrcTyp");
            entity.Property(e => e.KntRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Knt_Rabat");
            entity.Property(e => e.KntRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Regon");
            entity.Property(e => e.KntRodzaj).HasColumnName("Knt_Rodzaj");
            entity.Property(e => e.KntRolaPartnera).HasColumnName("Knt_RolaPartnera");
            entity.Property(e => e.KntSeriaFa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_SeriaFa");
            entity.Property(e => e.KntSoundex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Soundex");
            entity.Property(e => e.KntSposobDostawy).HasColumnName("Knt_SposobDostawy");
            entity.Property(e => e.KntStatus).HasColumnName("Knt_Status");
            entity.Property(e => e.KntSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Knt_Symbol");
            entity.Property(e => e.KntTelefon1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Telefon1");
            entity.Property(e => e.KntTelefon2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Telefon2");
            entity.Property(e => e.KntTelex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Telex");
            entity.Property(e => e.KntTyp).HasColumnName("Knt_Typ");
            entity.Property(e => e.KntTypDok).HasColumnName("Knt_TypDok");
            entity.Property(e => e.KntTypKarty).HasColumnName("Knt_TypKarty");
            entity.Property(e => e.KntUlica)
                .HasMaxLength(30)
                .HasColumnName("Knt_Ulica");
            entity.Property(e => e.KntUmowa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Umowa");
            entity.Property(e => e.KntUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("Knt_URL");
            entity.Property(e => e.KntWartosc1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Wartosc1");
            entity.Property(e => e.KntWartosc2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Wartosc2");
            entity.Property(e => e.KntWartosc3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Knt_Wartosc3");
            entity.Property(e => e.KntWsk).HasColumnName("Knt_Wsk");
            entity.Property(e => e.KntZrodlo).HasColumnName("Knt_Zrodlo");
            entity.Property(e => e.KntZtrFirma).HasColumnName("Knt_ZTrFirma");
            entity.Property(e => e.KntZtrLp).HasColumnName("Knt_ZTrLp");
            entity.Property(e => e.KntZtrNumer).HasColumnName("Knt_ZTrNumer");
            entity.Property(e => e.KntZtrTyp).HasColumnName("Knt_ZTrTyp");
        });

        modelBuilder.Entity<KntLinki>(entity =>
        {
            entity.HasKey(e => new { e.KnLGidtyp, e.KnLGidnumer, e.KnLGrOtyp, e.KnLGrOnumer }).HasName("KnL_Primary");

            entity.ToTable("KntLinki", "CDN");

            entity.Property(e => e.KnLGidtyp).HasColumnName("KnL_GIDTyp");
            entity.Property(e => e.KnLGidnumer).HasColumnName("KnL_GIDNumer");
            entity.Property(e => e.KnLGrOtyp).HasColumnName("KnL_GrOTyp");
            entity.Property(e => e.KnLGrOnumer).HasColumnName("KnL_GrONumer");
            entity.Property(e => e.KnLGidfirma).HasColumnName("KnL_GIDFirma");
            entity.Property(e => e.KnLGidlp).HasColumnName("KnL_GIDLp");
            entity.Property(e => e.KnLGrOfirma).HasColumnName("KnL_GrOFirma");
            entity.Property(e => e.KnLGrOlp).HasColumnName("KnL_GrOLp");
            entity.Property(e => e.KnLLiczbaPowtorzen).HasColumnName("KnL_LiczbaPowtorzen");
            entity.Property(e => e.KnLLisc).HasColumnName("KnL_Lisc");
            entity.Property(e => e.KnLTstampDataMod).HasColumnName("KnL_TStampDataMod");
        });

        modelBuilder.Entity<KntOdbiorcy>(entity =>
        {
            entity.HasKey(e => e.OdbOdbId)
                .HasName("Odb_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntOdbiorcy", "CDN", tb =>
                {
                    tb.HasTrigger("KntOdbiorcy_InsertUpdate_Trigger");
                    tb.HasTrigger("KntOdbiorcy_delete_Trigger");
                });

            entity.HasIndex(e => e.OdbKntOdbId, "KeyKntOdbID").HasFillFactor(100);

            entity.HasIndex(e => e.OdbOdbKntId, "KeyOdbKntID").HasFillFactor(100);

            entity.Property(e => e.OdbOdbId).HasColumnName("Odb_OdbID");
            entity.Property(e => e.OdbDomyslny).HasColumnName("Odb_Domyslny");
            entity.Property(e => e.OdbKntOdbId).HasColumnName("Odb_KntOdbID");
            entity.Property(e => e.OdbOdbKntId).HasColumnName("Odb_OdbKntID");
        });

        modelBuilder.Entity<KntOsoby>(entity =>
        {
            entity.HasKey(e => e.KnOKnOid)
                .HasName("KnO_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntOsoby", "CDN", tb => tb.HasTrigger("KntOsoby_Delete_Trigger"));

            entity.HasIndex(e => new { e.KnOKntId, e.KnOKnOid }, "KnOKontrahent")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KnOKnOid).HasColumnName("KnO_KnOId");
            entity.Property(e => e.KnOAdres2)
                .HasMaxLength(256)
                .HasColumnName("KnO_Adres2");
            entity.Property(e => e.KnODataAnonimizacji)
                .HasColumnType("datetime")
                .HasColumnName("KnO_DataAnonimizacji");
            entity.Property(e => e.KnODomyslny).HasColumnName("KnO_Domyslny");
            entity.Property(e => e.KnOEmail)
                .HasMaxLength(60)
                .HasColumnName("KnO_Email");
            entity.Property(e => e.KnOEmailEsklep)
                .HasMaxLength(60)
                .HasDefaultValue("")
                .HasColumnName("KnO_EmailESklep");
            entity.Property(e => e.KnOGmina)
                .HasMaxLength(40)
                .HasColumnName("KnO_Gmina");
            entity.Property(e => e.KnOGsm)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KnO_GSM");
            entity.Property(e => e.KnOInformacje).HasColumnName("KnO_Informacje");
            entity.Property(e => e.KnOKntId).HasColumnName("KnO_KntId");
            entity.Property(e => e.KnOKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("KnO_KodPocztowy");
            entity.Property(e => e.KnOKraj)
                .HasMaxLength(40)
                .HasColumnName("KnO_Kraj");
            entity.Property(e => e.KnOLpAnonimizacji).HasColumnName("KnO_LpAnonimizacji");
            entity.Property(e => e.KnOMailing)
                .HasDefaultValue((byte)1)
                .HasColumnName("KnO_Mailing");
            entity.Property(e => e.KnOMiasto)
                .HasMaxLength(40)
                .HasColumnName("KnO_Miasto");
            entity.Property(e => e.KnONazwisko)
                .HasMaxLength(40)
                .HasColumnName("KnO_Nazwisko");
            entity.Property(e => e.KnONieaktywny).HasColumnName("KnO_Nieaktywny");
            entity.Property(e => e.KnONrDomu)
                .HasMaxLength(10)
                .HasColumnName("KnO_NrDomu");
            entity.Property(e => e.KnONrLokalu)
                .HasMaxLength(10)
                .HasColumnName("KnO_NrLokalu");
            entity.Property(e => e.KnOOpeModId).HasColumnName("KnO_OpeModId");
            entity.Property(e => e.KnOOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnO_OpeModKod");
            entity.Property(e => e.KnOOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KnO_OpeModNazwisko");
            entity.Property(e => e.KnOOpeZalId).HasColumnName("KnO_OpeZalId");
            entity.Property(e => e.KnOOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnO_OpeZalKod");
            entity.Property(e => e.KnOOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KnO_OpeZalNazwisko");
            entity.Property(e => e.KnOPlec).HasColumnName("KnO_Plec");
            entity.Property(e => e.KnOPoczta)
                .HasMaxLength(40)
                .HasColumnName("KnO_Poczta");
            entity.Property(e => e.KnOPowiat)
                .HasMaxLength(40)
                .HasColumnName("KnO_Powiat");
            entity.Property(e => e.KnOStaModId).HasColumnName("KnO_StaModId");
            entity.Property(e => e.KnOStaZalId).HasColumnName("KnO_StaZalId");
            entity.Property(e => e.KnOTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KnO_Telefon");
            entity.Property(e => e.KnOTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnO_TelefonSms");
            entity.Property(e => e.KnOTsMod)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("KnO_TS_Mod");
            entity.Property(e => e.KnOTsZal)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("KnO_TS_Zal");
            entity.Property(e => e.KnOTytul)
                .HasMaxLength(255)
                .HasColumnName("KnO_Tytul");
            entity.Property(e => e.KnOUlica)
                .HasMaxLength(40)
                .HasColumnName("KnO_Ulica");
            entity.Property(e => e.KnOWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("KnO_Wojewodztwo");

            entity.HasOne(d => d.KnOKnt).WithMany(p => p.KntOsobies)
                .HasForeignKey(d => d.KnOKntId)
                .HasConstraintName("FK_KnOKontrahent");
        });

        modelBuilder.Entity<KntPromocje>(entity =>
        {
            entity.HasKey(e => e.KprId).HasName("XL_KPR_Primary");

            entity.ToTable("KntPromocje", "CDN");

            entity.HasIndex(e => new { e.KprKntTyp, e.KprKntNumer, e.KprKngTyp, e.KprKngNumer, e.KprPrmId }, "KprKontrahent").IsUnique();

            entity.HasIndex(e => e.KprPrmId, "KprPrm");

            entity.Property(e => e.KprId).HasColumnName("KPR_Id");
            entity.Property(e => e.KprKngFirma).HasColumnName("KPR_KngFirma");
            entity.Property(e => e.KprKngLp).HasColumnName("KPR_KngLp");
            entity.Property(e => e.KprKngNumer).HasColumnName("KPR_KngNumer");
            entity.Property(e => e.KprKngTyp).HasColumnName("KPR_KngTyp");
            entity.Property(e => e.KprKntFirma).HasColumnName("KPR_KntFirma");
            entity.Property(e => e.KprKntLp).HasColumnName("KPR_KntLp");
            entity.Property(e => e.KprKntNumer).HasColumnName("KPR_KntNumer");
            entity.Property(e => e.KprKntTyp).HasColumnName("KPR_KntTyp");
            entity.Property(e => e.KprPrmId).HasColumnName("KPR_PrmId");
            entity.Property(e => e.KprTyp).HasColumnName("KPR_Typ");
            entity.Property(e => e.KprWartosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KPR_Wartosc");

            entity.HasOne(d => d.KprPrm).WithMany(p => p.KntPromocjes)
                .HasForeignKey(d => d.KprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KprPrm");
        });

        modelBuilder.Entity<KntScalHist>(entity =>
        {
            entity.HasKey(e => e.KshKshid)
                .HasName("KSH_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntScalHist", "CDN");

            entity.Property(e => e.KshKshid).HasColumnName("KSH_KSHID");
            entity.Property(e => e.KshIdwiersza).HasColumnName("KSH_IDWiersza");
            entity.Property(e => e.KshNazwaTabeli)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KSH_NazwaTabeli");
            entity.Property(e => e.KshNewKntId).HasColumnName("KSH_NewKntID");
            entity.Property(e => e.KshNewKntKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KSH_NewKntKod");
            entity.Property(e => e.KshNumerDok)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KSH_NumerDok");
            entity.Property(e => e.KshOldKntId).HasColumnName("KSH_OldKntID");
            entity.Property(e => e.KshOldKntKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KSH_OldKntKod");
        });

        modelBuilder.Entity<KntWeryfRachHist>(entity =>
        {
            entity.HasKey(e => e.KwrhKwrhid)
                .HasName("KWRH_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntWeryfRachHist", "CDN");

            entity.HasIndex(e => new { e.KwrhKntId, e.KwrhRachunekNr, e.KwrhNip, e.KwrhData }, "KWRHChron")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KwrhKwrhid).HasColumnName("KWRH_KWRHID");
            entity.Property(e => e.KwrhData)
                .HasColumnType("datetime")
                .HasColumnName("KWRH_Data");
            entity.Property(e => e.KwrhIdOdpytania)
                .HasMaxLength(16)
                .HasColumnName("KWRH_IdOdpytania");
            entity.Property(e => e.KwrhKntId).HasColumnName("KWRH_KntID");
            entity.Property(e => e.KwrhNip)
                .HasMaxLength(20)
                .HasColumnName("KWRH_Nip");
            entity.Property(e => e.KwrhRachunekNr)
                .HasMaxLength(50)
                .HasColumnName("KWRH_RachunekNr");
            entity.Property(e => e.KwrhStatus).HasColumnName("KWRH_Status");

            entity.HasOne(d => d.KwrhKnt).WithMany(p => p.KntWeryfRachHists)
                .HasForeignKey(d => d.KwrhKntId)
                .HasConstraintName("FK_KWRHKNT");
        });

        modelBuilder.Entity<KntWeryfStatHist>(entity =>
        {
            entity.HasKey(e => e.KwshKwshid)
                .HasName("KWSH_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntWeryfStatHist", "CDN", tb => tb.HasTrigger("KntWeryfStatHist_Delete_Trigger"));

            entity.HasIndex(e => new { e.KwshKntId, e.KwshData }, "KWSHKntChron").HasFillFactor(100);

            entity.Property(e => e.KwshKwshid).HasColumnName("KWSH_KWSHID");
            entity.Property(e => e.KwshData)
                .HasColumnType("datetime")
                .HasColumnName("KWSH_Data");
            entity.Property(e => e.KwshKntId).HasColumnName("KWSH_KntID");
            entity.Property(e => e.KwshNip)
                .HasMaxLength(20)
                .HasColumnName("KWSH_Nip");
            entity.Property(e => e.KwshStatus).HasColumnName("KWSH_Status");
            entity.Property(e => e.KwshTypWeryfikacji).HasColumnName("KWSH_TypWeryfikacji");

            entity.HasOne(d => d.KwshKnt).WithMany(p => p.KntWeryfStatHists)
                .HasForeignKey(d => d.KwshKntId)
                .HasConstraintName("FK_WgKnt");
        });

        modelBuilder.Entity<KntZamknMy>(entity =>
        {
            entity.HasKey(e => e.KzmKzmid)
                .HasName("KZM_Primary")
                .HasFillFactor(100);

            entity.ToTable("KntZamknMies", "CDN");

            entity.HasIndex(e => new { e.KzmKntId, e.KzmRok, e.KzmMies }, "KZMChron")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KzmKzmid).HasColumnName("KZM_KZMID");
            entity.Property(e => e.KzmDataZamkn)
                .HasColumnType("datetime")
                .HasColumnName("KZM_DataZamkn");
            entity.Property(e => e.KzmKntId).HasColumnName("KZM_KntID");
            entity.Property(e => e.KzmMies).HasColumnName("KZM_Mies");
            entity.Property(e => e.KzmRok).HasColumnName("KZM_Rok");
            entity.Property(e => e.KzmStatus).HasColumnName("KZM_Status");
            entity.Property(e => e.KzmWyslano).HasColumnName("KZM_Wyslano");

            entity.HasOne(d => d.KzmKnt).WithMany(p => p.KntZamknMies)
                .HasForeignKey(d => d.KzmKntId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KZMKnt");
        });

        modelBuilder.Entity<KodyCn>(entity =>
        {
            entity.HasKey(e => e.KcnKcnid)
                .HasName("KCN_Primary")
                .HasFillFactor(100);

            entity.ToTable("KodyCN", "CDN", tb =>
                {
                    tb.HasTrigger("KodyCN_Delete_Trigger");
                    tb.HasTrigger("KodyCN_Update_Trigger");
                });

            entity.HasIndex(e => e.KcnKod, "KCNKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KcnKcnid).HasColumnName("KCN_KCNId");
            entity.Property(e => e.KcnFlaga).HasColumnName("KCN_Flaga");
            entity.Property(e => e.KcnJmsent)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("KCN_JMSent");
            entity.Property(e => e.KcnKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("KCN_Kod");
            entity.Property(e => e.KcnKodSent)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCN_KodSent");
            entity.Property(e => e.KcnMasa).HasColumnName("KCN_Masa");
            entity.Property(e => e.KcnOpeModId).HasColumnName("KCN_OpeModId");
            entity.Property(e => e.KcnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCN_OpeModKod");
            entity.Property(e => e.KcnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KCN_OpeModNazwisko");
            entity.Property(e => e.KcnOpeZalId).HasColumnName("KCN_OpeZalId");
            entity.Property(e => e.KcnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCN_OpeZalKod");
            entity.Property(e => e.KcnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KCN_OpeZalNazwisko");
            entity.Property(e => e.KcnOpis)
                .HasMaxLength(1024)
                .HasColumnName("KCN_Opis");
            entity.Property(e => e.KcnSent).HasColumnName("KCN_Sent");
            entity.Property(e => e.KcnStaModId).HasColumnName("KCN_StaModId");
            entity.Property(e => e.KcnStaZalId).HasColumnName("KCN_StaZalId");
            entity.Property(e => e.KcnStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KCN_Stawka");
            entity.Property(e => e.KcnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KCN_TS_Mod");
            entity.Property(e => e.KcnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KCN_TS_Zal");
            entity.Property(e => e.KcnUzupJm)
                .HasMaxLength(20)
                .HasColumnName("KCN_UzupJM");
            entity.Property(e => e.KcnZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KCN_Zrodlowa");
        });

        modelBuilder.Entity<KodyJpkv7>(entity =>
        {
            entity.HasKey(e => e.Kv7Kv7id)
                .HasName("KV7_Primary")
                .HasFillFactor(100);

            entity.ToTable("KodyJPKV7", "CDN");

            entity.HasIndex(e => new { e.Kv7Kv7id, e.Kv7Rodzaj, e.Kv7Typ, e.Kv7Kod }, "KV7KodRodzajTyp").HasFillFactor(100);

            entity.HasIndex(e => e.Kv7ZjeId, "KV7ZjeLink").HasFillFactor(100);

            entity.Property(e => e.Kv7Kv7id).HasColumnName("KV7_KV7ID");
            entity.Property(e => e.Kv7Kod)
                .HasMaxLength(15)
                .HasColumnName("KV7_Kod");
            entity.Property(e => e.Kv7OkresDo)
                .HasDefaultValueSql("(CONVERT([datetime],'2999-12-31',(120)))")
                .HasColumnType("datetime")
                .HasColumnName("KV7_OkresDo");
            entity.Property(e => e.Kv7OkresOd)
                .HasDefaultValueSql("(CONVERT([datetime],'1899-12-31',(120)))")
                .HasColumnType("datetime")
                .HasColumnName("KV7_OkresOd");
            entity.Property(e => e.Kv7Opis).HasColumnName("KV7_Opis");
            entity.Property(e => e.Kv7Rodzaj).HasColumnName("KV7_Rodzaj");
            entity.Property(e => e.Kv7Typ).HasColumnName("KV7_Typ");
            entity.Property(e => e.Kv7ZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("KV7_ZjeID");
        });

        modelBuilder.Entity<KompensatyElem>(entity =>
        {
            entity.HasKey(e => e.KpeKpeid)
                .HasName("KPE_Primary")
                .HasFillFactor(100);

            entity.ToTable("KompensatyElem", "CDN");

            entity.HasIndex(e => new { e.KpeKpnid, e.KpeKpeid }, "KPENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KpeBrkid, "KPERozliczenie")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KpeKpeid).HasColumnName("KPE_KPEID");
            entity.Property(e => e.KpeBrkid).HasColumnName("KPE_BRKID");
            entity.Property(e => e.KpeKpnid).HasColumnName("KPE_KPNID");

            entity.HasOne(d => d.KpeBrk).WithOne(p => p.KompensatyElem)
                .HasForeignKey<KompensatyElem>(d => d.KpeBrkid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPERozliczenie");

            entity.HasOne(d => d.KpeKpn).WithMany(p => p.KompensatyElems)
                .HasForeignKey(d => d.KpeKpnid)
                .HasConstraintName("FK_KPENaglowek");
        });

        modelBuilder.Entity<KompensatyNag>(entity =>
        {
            entity.HasKey(e => e.KpnKpnid)
                .HasName("KPN_Primary")
                .HasFillFactor(100);

            entity.ToTable("KompensatyNag", "CDN", tb =>
                {
                    tb.HasTrigger("KompensatyNag_Delete_Trigger");
                    tb.HasTrigger("KompensatyNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.KpnDekId, "KPNDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.KpnDdfId, "KPNDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => e.KpnImportRowId, "KPNGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KpnKatId, e.KpnDataDok, e.KpnKpnid }, "KPNKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KpnNumerString, e.KpnNumerNr }, "KPNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KpnNumerPelny, "KPNNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KpnPodmiotId, e.KpnPodmiotTyp, e.KpnDataDok, e.KpnKpnid }, "KPNPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KpnPreDekId, "KPNPreDekrety").HasFillFactor(100);

            entity.Property(e => e.KpnKpnid).HasColumnName("KPN_KPNID");
            entity.Property(e => e.KpnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("KPN_DataDok");
            entity.Property(e => e.KpnDdfId).HasColumnName("KPN_DDfID");
            entity.Property(e => e.KpnDekId).HasColumnName("KPN_DekID");
            entity.Property(e => e.KpnImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("KPN_ImportAppId");
            entity.Property(e => e.KpnImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("KPN_ImportRowId");
            entity.Property(e => e.KpnKatId).HasColumnName("KPN_KatID");
            entity.Property(e => e.KpnKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KPN_Kategoria");
            entity.Property(e => e.KpnKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KPN_KontoMa");
            entity.Property(e => e.KpnKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KPN_KontoWn");
            entity.Property(e => e.KpnNumer)
                .HasMaxLength(256)
                .HasComputedColumnSql("(case when [KPN_NUMEROBCY]<>'' then [KPN_NUMEROBCY] else [CDN].[FN_NUMERPELNY]([KPN_NUMERNR],[KPN_NUMERSTRING]) end)", false)
                .HasColumnName("KPN_Numer");
            entity.Property(e => e.KpnNumerNr).HasColumnName("KPN_NumerNr");
            entity.Property(e => e.KpnNumerObcy)
                .HasMaxLength(256)
                .HasColumnName("KPN_NumerObcy");
            entity.Property(e => e.KpnNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([KPN_NUMERNR],[KPN_NUMERSTRING]))", false)
                .HasColumnName("KPN_NumerPelny");
            entity.Property(e => e.KpnNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("KPN_NumerString");
            entity.Property(e => e.KpnOpeModId).HasColumnName("KPN_OpeModID");
            entity.Property(e => e.KpnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPN_OpeModKod");
            entity.Property(e => e.KpnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KPN_OpeModNazwisko");
            entity.Property(e => e.KpnOpeZalId).HasColumnName("KPN_OpeZalID");
            entity.Property(e => e.KpnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPN_OpeZalKod");
            entity.Property(e => e.KpnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KPN_OpeZalNazwisko");
            entity.Property(e => e.KpnOpis)
                .HasMaxLength(256)
                .HasColumnName("KPN_Opis");
            entity.Property(e => e.KpnPodmiotId).HasColumnName("KPN_PodmiotID");
            entity.Property(e => e.KpnPodmiotTyp).HasColumnName("KPN_PodmiotTyp");
            entity.Property(e => e.KpnPreDekId).HasColumnName("KPN_PreDekID");
            entity.Property(e => e.KpnRazemKwotaRoz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPN_RazemKwotaRoz");
            entity.Property(e => e.KpnStaModId).HasColumnName("KPN_StaModID");
            entity.Property(e => e.KpnStaZalId).HasColumnName("KPN_StaZalID");
            entity.Property(e => e.KpnTsExport)
                .HasColumnType("datetime")
                .HasColumnName("KPN_TS_Export");
            entity.Property(e => e.KpnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KPN_TS_Mod");
            entity.Property(e => e.KpnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KPN_TS_Zal");
            entity.Property(e => e.KpnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("KPN_Waluta");

            entity.HasOne(d => d.KpnDdf).WithMany(p => p.KompensatyNags)
                .HasForeignKey(d => d.KpnDdfId)
                .HasConstraintName("FK_KPNDokDefinicja");

            entity.HasOne(d => d.KpnKat).WithMany(p => p.KompensatyNags)
                .HasForeignKey(d => d.KpnKatId)
                .HasConstraintName("FK_KPNKategoria");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.KompensatyNags)
                .HasForeignKey(d => new { d.KpnPodmiotId, d.KpnPodmiotTyp })
                .HasConstraintName("FK_KPNPodmiot");
        });

        modelBuilder.Entity<Konfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Konfig", "CDN");

            entity.Property(e => e.KonKomentarz)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Kon_Komentarz");
            entity.Property(e => e.KonLp).HasColumnName("Kon_Lp");
            entity.Property(e => e.KonNumer).HasColumnName("Kon_Numer");
            entity.Property(e => e.KonStatus).HasColumnName("Kon_Status");
            entity.Property(e => e.KonSystem).HasColumnName("Kon_System");
            entity.Property(e => e.KonWartosc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Kon_Wartosc");
        });

        modelBuilder.Entity<KonfigText>(entity =>
        {
            entity.HasKey(e => e.KtxKey)
                .HasName("KTx_Primary")
                .HasFillFactor(100);

            entity.ToTable("KonfigText", "CDN");

            entity.Property(e => e.KtxKey)
                .HasMaxLength(49)
                .HasColumnName("KTx_Key");
            entity.Property(e => e.KtxValue).HasColumnName("KTx_Value");
        });

        modelBuilder.Entity<KontaAnView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KontaAnView", "CDN");

            entity.Property(e => e.AccAccId).HasColumnName("Acc_AccId");
            entity.Property(e => e.AccOobId).HasColumnName("Acc_OObId");
            entity.Property(e => e.AccParId).HasColumnName("Acc_ParId");
            entity.Property(e => e.AccPoziom).HasColumnName("Acc_Poziom");
        });

        modelBuilder.Entity<KontaZakazy>(entity =>
        {
            entity.HasKey(e => e.AcZAcZid)
                .HasName("AcZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("KontaZakazy", "CDN", tb =>
                {
                    tb.HasTrigger("KontaZakazy_Delete_Trigger");
                    tb.HasTrigger("KontaZakazy_Insert_Trigger");
                });

            entity.HasIndex(e => new { e.AcZAccId, e.AcZOpeId }, "AcZKonto")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AcZAcZid).HasColumnName("AcZ_AcZId");
            entity.Property(e => e.AcZAccId).HasColumnName("AcZ_AccId");
            entity.Property(e => e.AcZOpeId).HasColumnName("AcZ_OpeId");

            entity.HasOne(d => d.AcZAcc).WithMany(p => p.KontaZakazies)
                .HasForeignKey(d => d.AcZAccId)
                .HasConstraintName("FK_AcZKonto");
        });

        modelBuilder.Entity<Kontrahenci>(entity =>
        {
            entity.HasKey(e => e.KntKntId)
                .HasName("Knt_Primary")
                .HasFillFactor(100);

            entity.ToTable("Kontrahenci", "CDN", tb =>
                {
                    tb.HasTrigger("Kontrahenci_DeleteHandler");
                    tb.HasTrigger("Kontrahenci_Delete_Trigger");
                    tb.HasTrigger("Kontrahenci_InsertUpdateHandler");
                    tb.HasTrigger("Kontrahenci_InsertUpdate_Trigger");
                    tb.HasTrigger("Kontrahenci_InsteadOfDelete_Trigger");
                    tb.HasTrigger("Kontrahenci_Update_Limity_Trigger");
                });

            entity.HasIndex(e => e.KntBazaBrGuid, "KntBRGUID").HasFillFactor(100);

            entity.HasIndex(e => e.KntBnaId, "KntBnkNazwy").HasFillFactor(100);

            entity.HasIndex(e => e.KntEan, "KntEAN").HasFillFactor(100);

            entity.HasIndex(e => e.KntFplId, "KntFormaPlatnosci").HasFillFactor(100);

            entity.HasIndex(e => new { e.KntGidtyp, e.KntGidfirma, e.KntGidnumer }, "KntGID").HasFillFactor(100);

            entity.HasIndex(e => e.KntImportRowId, "KntGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KntGlId, "KntGlID").HasFillFactor(100);

            entity.HasIndex(e => new { e.KntKod, e.KntKntId }, "KntGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KntGrupa, e.KntKod }, "KntGrupKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KntGrupa, e.KntNazwa1, e.KntKntId }, "KntGrupNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KntKatId, "KntKategoria").HasFillFactor(100);

            entity.HasIndex(e => e.KntKatZakId, "KntKategoriaZak").HasFillFactor(100);

            entity.HasIndex(e => e.KntKod, "KntKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KntNip, e.KntKntId }, "KntNIP")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KntNadId, "KntNadID").HasFillFactor(100);

            entity.HasIndex(e => new { e.KntNazwa1, e.KntKntId }, "KntNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KntNieaktywny, "KntNieaktywny").HasFillFactor(100);

            entity.HasIndex(e => e.KntOdbiorcaId, "KntOdbiorca").HasFillFactor(100);

            entity.HasIndex(e => new { e.KntOpiekunId, e.KntOpiekunTyp }, "KntOpiekun").HasFillFactor(100);

            entity.HasIndex(e => e.KntRachunekNr0, "KntRachunekNr0").HasFillFactor(100);

            entity.Property(e => e.KntKntId).HasColumnName("Knt_KntId");
            entity.Property(e => e.KntAdres2)
                .HasMaxLength(40)
                .HasColumnName("Knt_Adres2");
            entity.Property(e => e.KntAlgorytm).HasColumnName("Knt_Algorytm");
            entity.Property(e => e.KntApfinoStatSync).HasColumnName("Knt_ApfinoStatSync");
            entity.Property(e => e.KntApfinoVerifDate)
                .HasColumnType("datetime")
                .HasColumnName("Knt_ApfinoVerifDate");
            entity.Property(e => e.KntAutoWindBlokadaSprzed).HasColumnName("Knt_AutoWindBlokadaSprzed");
            entity.Property(e => e.KntAwfMonit).HasColumnName("Knt_AwfMonit");
            entity.Property(e => e.KntAwfZgoda).HasColumnName("Knt_AwfZgoda");
            entity.Property(e => e.KntBazaBrGuid).HasColumnName("Knt_BazaBR_GUID");
            entity.Property(e => e.KntBlokadaDok).HasColumnName("Knt_BlokadaDok");
            entity.Property(e => e.KntBnaId).HasColumnName("Knt_BNaID");
            entity.Property(e => e.KntCeny).HasColumnName("Knt_Ceny");
            entity.Property(e => e.KntChroniony).HasColumnName("Knt_Chroniony");
            entity.Property(e => e.KntCjbid).HasColumnName("Knt_CJBId");
            entity.Property(e => e.KntCjbtyp).HasColumnName("Knt_CJBTyp");
            entity.Property(e => e.KntDataAnonimizacji)
                .HasColumnType("datetime")
                .HasColumnName("Knt_DataAnonimizacji");
            entity.Property(e => e.KntDokumentTozsamosci)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Knt_DokumentTozsamosci");
            entity.Property(e => e.KntDomena)
                .HasMaxLength(127)
                .HasDefaultValue("")
                .HasColumnName("Knt_Domena");
            entity.Property(e => e.KntESklepId).HasColumnName("Knt_eSklepID");
            entity.Property(e => e.KntESklepZrodlo)
                .HasDefaultValue((short)7)
                .HasColumnName("Knt_eSklepZrodlo");
            entity.Property(e => e.KntEan)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("Knt_EAN");
            entity.Property(e => e.KntEmail)
                .HasMaxLength(127)
                .HasColumnName("Knt_Email");
            entity.Property(e => e.KntEsklep).HasColumnName("Knt_ESklep");
            entity.Property(e => e.KntExport).HasColumnName("Knt_Export");
            entity.Property(e => e.KntFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Fax");
            entity.Property(e => e.KntFczesci).HasColumnName("Knt_FCzesci");
            entity.Property(e => e.KntFczynnosci)
                .HasDefaultValue((byte)1)
                .HasColumnName("Knt_FCzynnosci");
            entity.Property(e => e.KntFinalny).HasColumnName("Knt_Finalny");
            entity.Property(e => e.KntFinalnyWegiel).HasColumnName("Knt_FinalnyWegiel");
            entity.Property(e => e.KntFplId).HasColumnName("Knt_FplID");
            entity.Property(e => e.KntGidfirma).HasColumnName("Knt_GIDFirma");
            entity.Property(e => e.KntGidlp).HasColumnName("Knt_GIDLp");
            entity.Property(e => e.KntGidnumer).HasColumnName("Knt_GIDNumer");
            entity.Property(e => e.KntGidtyp).HasColumnName("Knt_GIDTyp");
            entity.Property(e => e.KntGlId).HasColumnName("Knt_GlID");
            entity.Property(e => e.KntGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Knt_GLN");
            entity.Property(e => e.KntGmina)
                .HasMaxLength(40)
                .HasColumnName("Knt_Gmina");
            entity.Property(e => e.KntGrupa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Grupa");
            entity.Property(e => e.KntIban).HasColumnName("Knt_IBAN");
            entity.Property(e => e.KntIdSisc)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_IdSisc");
            entity.Property(e => e.KntImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Knt_ImportAppId");
            entity.Property(e => e.KntImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("Knt_ImportRowId");
            entity.Property(e => e.KntInformacje).HasColumnName("Knt_Informacje");
            entity.Property(e => e.KntKatId).HasColumnName("Knt_KatID");
            entity.Property(e => e.KntKatZakId).HasColumnName("Knt_KatZakID");
            entity.Property(e => e.KntKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Kod");
            entity.Property(e => e.KntKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Knt_KodPocztowy");
            entity.Property(e => e.KntKodTransakcji)
                .HasMaxLength(2)
                .HasColumnName("Knt_KodTransakcji");
            entity.Property(e => e.KntKomornik).HasColumnName("Knt_Komornik");
            entity.Property(e => e.KntKomornikMiasto)
                .HasMaxLength(40)
                .HasColumnName("Knt_KomornikMiasto");
            entity.Property(e => e.KntKomornikOkreg)
                .HasMaxLength(256)
                .HasColumnName("Knt_KomornikOkreg");
            entity.Property(e => e.KntKomornikRewir)
                .HasMaxLength(256)
                .HasColumnName("Knt_KomornikRewir");
            entity.Property(e => e.KntKontoDost)
                .HasMaxLength(50)
                .HasColumnName("Knt_KontoDost");
            entity.Property(e => e.KntKontoOdb)
                .HasMaxLength(50)
                .HasColumnName("Knt_KontoOdb");
            entity.Property(e => e.KntKorKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Knt_KorKodPocztowy");
            entity.Property(e => e.KntKorKraj)
                .HasMaxLength(40)
                .HasColumnName("Knt_KorKraj");
            entity.Property(e => e.KntKorMiasto)
                .HasMaxLength(40)
                .HasColumnName("Knt_KorMiasto");
            entity.Property(e => e.KntKorNrDomu)
                .HasMaxLength(10)
                .HasColumnName("Knt_KorNrDomu");
            entity.Property(e => e.KntKorNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Knt_KorNrLokalu");
            entity.Property(e => e.KntKorPoczta)
                .HasMaxLength(40)
                .HasColumnName("Knt_KorPoczta");
            entity.Property(e => e.KntKorUlica)
                .HasMaxLength(40)
                .HasColumnName("Knt_KorUlica");
            entity.Property(e => e.KntKraj)
                .HasMaxLength(40)
                .HasColumnName("Knt_Kraj");
            entity.Property(e => e.KntKrajIso)
                .HasMaxLength(9)
                .HasColumnName("Knt_KrajISO");
            entity.Property(e => e.KntLimitFlag).HasColumnName("Knt_LimitFlag");
            entity.Property(e => e.KntLimitKredytu)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Knt_LimitKredytu");
            entity.Property(e => e.KntLimitKredytuWal)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Knt_LimitKredytuWal");
            entity.Property(e => e.KntLimitKredytuWykorzystany)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Knt_LimitKredytuWykorzystany");
            entity.Property(e => e.KntLimitPrzeterKredytFlag).HasColumnName("Knt_LimitPrzeterKredytFlag");
            entity.Property(e => e.KntLimitPrzeterKredytWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Knt_LimitPrzeterKredytWartosc");
            entity.Property(e => e.KntLoginComarchCloud)
                .HasMaxLength(256)
                .HasColumnName("Knt_LoginComarchCloud");
            entity.Property(e => e.KntLpAnonimizacji).HasColumnName("Knt_LpAnonimizacji");
            entity.Property(e => e.KntMalyPod).HasColumnName("Knt_MalyPod");
            entity.Property(e => e.KntMaxZwloka).HasColumnName("Knt_MaxZwloka");
            entity.Property(e => e.KntMedialny).HasColumnName("Knt_Medialny");
            entity.Property(e => e.KntMetodaKasowa).HasColumnName("Knt_MetodaKasowa");
            entity.Property(e => e.KntMiasto)
                .HasMaxLength(40)
                .HasColumnName("Knt_Miasto");
            entity.Property(e => e.KntNadId).HasColumnName("Knt_NadID");
            entity.Property(e => e.KntNaliczajPlatnosc).HasColumnName("Knt_NaliczajPlatnosc");
            entity.Property(e => e.KntNazwa1)
                .HasMaxLength(50)
                .HasColumnName("Knt_Nazwa1");
            entity.Property(e => e.KntNazwa2)
                .HasMaxLength(50)
                .HasColumnName("Knt_Nazwa2");
            entity.Property(e => e.KntNazwa3)
                .HasMaxLength(250)
                .HasColumnName("Knt_Nazwa3");
            entity.Property(e => e.KntNieNaliczajOdsetek).HasColumnName("Knt_NieNaliczajOdsetek");
            entity.Property(e => e.KntNieNaliczajOplataCukrowa).HasColumnName("Knt_NieNaliczajOplataCukrowa");
            entity.Property(e => e.KntNieRozliczac).HasColumnName("Knt_NieRozliczac");
            entity.Property(e => e.KntNieUwzglVatzd).HasColumnName("Knt_NieUwzglVATZD");
            entity.Property(e => e.KntNieUwzglwedniajWewidencjiWegiel).HasColumnName("Knt_NieUwzglwedniajWEwidencjiWegiel");
            entity.Property(e => e.KntNieWysylajDokumentuDoKseF).HasColumnName("Knt_NieWysylajDokumentuDoKSeF");
            entity.Property(e => e.KntNieaktywny).HasColumnName("Knt_Nieaktywny");
            entity.Property(e => e.KntNip)
                .HasMaxLength(20)
                .HasColumnName("Knt_Nip");
            entity.Property(e => e.KntNipE)
                .HasMaxLength(20)
                .HasColumnName("Knt_NipE");
            entity.Property(e => e.KntNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Knt_NipKraj");
            entity.Property(e => e.KntNipPelny)
                .HasMaxLength(22)
                .HasComputedColumnSql("([Knt_NipKraj]+[Knt_Nip])", true)
                .HasColumnName("Knt_NipPelny");
            entity.Property(e => e.KntNrDomu)
                .HasMaxLength(10)
                .HasColumnName("Knt_NrDomu");
            entity.Property(e => e.KntNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Knt_NrLokalu");
            entity.Property(e => e.KntOdbiorcaId).HasColumnName("Knt_OdbiorcaId");
            entity.Property(e => e.KntOpeModId).HasColumnName("Knt_OpeModID");
            entity.Property(e => e.KntOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_OpeModKod");
            entity.Property(e => e.KntOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Knt_OpeModNazwisko");
            entity.Property(e => e.KntOpeZalId).HasColumnName("Knt_OpeZalID");
            entity.Property(e => e.KntOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_OpeZalKod");
            entity.Property(e => e.KntOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Knt_OpeZalNazwisko");
            entity.Property(e => e.KntOpiekunDomyslny).HasColumnName("Knt_OpiekunDomyslny");
            entity.Property(e => e.KntOpiekunId).HasColumnName("Knt_OpiekunId");
            entity.Property(e => e.KntOpiekunKsiegDomyslny).HasColumnName("Knt_OpiekunKsiegDomyslny");
            entity.Property(e => e.KntOpiekunKsiegId).HasColumnName("Knt_OpiekunKsiegID");
            entity.Property(e => e.KntOpiekunKsiegTyp).HasColumnName("Knt_OpiekunKsiegTyp");
            entity.Property(e => e.KntOpiekunPiKdomyslny).HasColumnName("Knt_OpiekunPiKDomyslny");
            entity.Property(e => e.KntOpiekunPiKid).HasColumnName("Knt_OpiekunPiKID");
            entity.Property(e => e.KntOpiekunPiKtyp).HasColumnName("Knt_OpiekunPiKTyp");
            entity.Property(e => e.KntOpiekunTyp).HasColumnName("Knt_OpiekunTyp");
            entity.Property(e => e.KntOpis).HasColumnName("Knt_Opis");
            entity.Property(e => e.KntOsAdres2)
                .HasMaxLength(256)
                .HasColumnName("Knt_OsAdres2");
            entity.Property(e => e.KntOsEmail)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsEmail");
            entity.Property(e => e.KntOsGmina)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsGmina");
            entity.Property(e => e.KntOsGsm)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_OsGSM");
            entity.Property(e => e.KntOsKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Knt_OsKodPocztowy");
            entity.Property(e => e.KntOsKraj)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsKraj");
            entity.Property(e => e.KntOsMiasto)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsMiasto");
            entity.Property(e => e.KntOsNazwisko)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsNazwisko");
            entity.Property(e => e.KntOsNrDomu)
                .HasMaxLength(10)
                .HasColumnName("Knt_OsNrDomu");
            entity.Property(e => e.KntOsNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Knt_OsNrLokalu");
            entity.Property(e => e.KntOsPlec).HasColumnName("Knt_OsPlec");
            entity.Property(e => e.KntOsPoczta)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsPoczta");
            entity.Property(e => e.KntOsPowiat)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsPowiat");
            entity.Property(e => e.KntOsTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_OsTelefon");
            entity.Property(e => e.KntOsTytul)
                .HasMaxLength(20)
                .HasColumnName("Knt_OsTytul");
            entity.Property(e => e.KntOsUlica)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsUlica");
            entity.Property(e => e.KntOsWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("Knt_OsWojewodztwo");
            entity.Property(e => e.KntPesel)
                .HasMaxLength(11)
                .HasColumnName("Knt_Pesel");
            entity.Property(e => e.KntPoczta)
                .HasMaxLength(40)
                .HasColumnName("Knt_Poczta");
            entity.Property(e => e.KntPodatekVat).HasColumnName("Knt_PodatekVat");
            entity.Property(e => e.KntPodmiotTyp)
                .HasDefaultValue((short)1)
                .HasColumnName("Knt_PodmiotTyp");
            entity.Property(e => e.KntPowiat)
                .HasMaxLength(40)
                .HasColumnName("Knt_Powiat");
            entity.Property(e => e.KntPowiazanyUoV).HasColumnName("Knt_PowiazanyUoV");
            entity.Property(e => e.KntRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("Knt_RachunekNr");
            entity.Property(e => e.KntRachunekNr0)
                .HasMaxLength(51)
                .HasComputedColumnSql("(CONVERT([nvarchar](51),replace(replace([KNT_RACHUNEKNR],'-',''),' ',''),(0)))", false)
                .HasColumnName("Knt_RachunekNr0");
            entity.Property(e => e.KntRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Regon");
            entity.Property(e => e.KntRodzaj).HasColumnName("Knt_Rodzaj");
            entity.Property(e => e.KntRodzajDostawca).HasColumnName("Knt_Rodzaj_Dostawca");
            entity.Property(e => e.KntRodzajKonkurencja).HasColumnName("Knt_Rodzaj_Konkurencja");
            entity.Property(e => e.KntRodzajOdbiorca).HasColumnName("Knt_Rodzaj_Odbiorca");
            entity.Property(e => e.KntRodzajPartner).HasColumnName("Knt_Rodzaj_Partner");
            entity.Property(e => e.KntRodzajPotencjalny).HasColumnName("Knt_Rodzaj_Potencjalny");
            entity.Property(e => e.KntRolnik).HasColumnName("Knt_Rolnik");
            entity.Property(e => e.KntSplitPay).HasColumnName("Knt_SplitPay");
            entity.Property(e => e.KntStaModId).HasColumnName("Knt_StaModId");
            entity.Property(e => e.KntStaZalId).HasColumnName("Knt_StaZalId");
            entity.Property(e => e.KntTelefon1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Telefon1");
            entity.Property(e => e.KntTelefon2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Knt_Telefon2");
            entity.Property(e => e.KntTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_TelefonSms");
            entity.Property(e => e.KntTermin).HasColumnName("Knt_Termin");
            entity.Property(e => e.KntTerminPlat).HasColumnName("Knt_TerminPlat");
            entity.Property(e => e.KntTerminZwrotuKaucji).HasColumnName("Knt_TerminZwrotuKaucji");
            entity.Property(e => e.KntTsExport)
                .HasColumnType("datetime")
                .HasColumnName("Knt_TS_Export");
            entity.Property(e => e.KntTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Knt_TS_Mod");
            entity.Property(e => e.KntTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Knt_TS_Zal");
            entity.Property(e => e.KntTypWymiany).HasColumnName("Knt_TypWymiany");
            entity.Property(e => e.KntUlica)
                .HasMaxLength(40)
                .HasColumnName("Knt_Ulica");
            entity.Property(e => e.KntUmowaWegiel).HasColumnName("Knt_UmowaWegiel");
            entity.Property(e => e.KntUpust)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Knt_Upust");
            entity.Property(e => e.KntUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("Knt_URL");
            entity.Property(e => e.KntUwdemail)
                .HasMaxLength(30)
                .HasColumnName("Knt_UWDEmail");
            entity.Property(e => e.KntUwdid).HasColumnName("Knt_UWDId");
            entity.Property(e => e.KntUwdoddzial)
                .HasMaxLength(10)
                .HasColumnName("Knt_UWDOddzial");
            entity.Property(e => e.KntWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Waluta");
            entity.Property(e => e.KntWindykacjaEmail)
                .HasMaxLength(127)
                .HasDefaultValue("")
                .HasColumnName("Knt_WindykacjaEMail");
            entity.Property(e => e.KntWindykacjaOsobaId).HasColumnName("Knt_WindykacjaOsobaId");
            entity.Property(e => e.KntWindykacjaSchematId).HasColumnName("Knt_WindykacjaSchematId");
            entity.Property(e => e.KntWindykacjaTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_WindykacjaTelefonSms");
            entity.Property(e => e.KntWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("Knt_Wojewodztwo");
            entity.Property(e => e.KntZakazDokumentowHaMag).HasColumnName("Knt_ZakazDokumentowHaMag");
            entity.Property(e => e.KntZamknMiesDzien).HasColumnName("Knt_ZamknMiesDzien");
            entity.Property(e => e.KntZamknMiesTyp)
                .HasDefaultValue((byte)1)
                .HasColumnName("Knt_ZamknMiesTyp");
            entity.Property(e => e.KntZezwolenie)
                .HasMaxLength(40)
                .HasColumnName("Knt_Zezwolenie");
            entity.Property(e => e.KntZgodaNaEfaktury).HasColumnName("Knt_ZgodaNaEFaktury");
            entity.Property(e => e.KntZwolnionyZakcyzy).HasColumnName("Knt_ZwolnionyZAkcyzy");

            entity.HasOne(d => d.KntBna).WithMany(p => p.Kontrahencis)
                .HasForeignKey(d => d.KntBnaId)
                .HasConstraintName("FK_KntBnkNazwy");

            entity.HasOne(d => d.KntCjb).WithMany(p => p.InverseKntCjb)
                .HasForeignKey(d => d.KntCjbid)
                .HasConstraintName("FK_KntCJB");

            entity.HasOne(d => d.KntFpl).WithMany(p => p.Kontrahencis)
                .HasForeignKey(d => d.KntFplId)
                .HasConstraintName("FK_KntFormaPlatnosci");

            entity.HasOne(d => d.KntKat).WithMany(p => p.KontrahenciKntKats)
                .HasForeignKey(d => d.KntKatId)
                .HasConstraintName("FK_KntKategoria");

            entity.HasOne(d => d.KntKatZak).WithMany(p => p.KontrahenciKntKatZaks)
                .HasForeignKey(d => d.KntKatZakId)
                .HasConstraintName("FK_KntKategoriaZak");

            entity.HasOne(d => d.KntNad).WithMany(p => p.InverseKntNad)
                .HasForeignKey(d => d.KntNadId)
                .HasConstraintName("FK_KntParent");

            entity.HasOne(d => d.KntOdbiorca).WithMany(p => p.InverseKntOdbiorca)
                .HasForeignKey(d => d.KntOdbiorcaId)
                .HasConstraintName("FK_KntOdbiorca");
        });

        modelBuilder.Entity<Kontum>(entity =>
        {
            entity.HasKey(e => e.AccAccId)
                .HasName("Acc_Primary")
                .HasFillFactor(100);

            entity.ToTable("Konta", "CDN", tb =>
                {
                    tb.HasTrigger("Konta_After_Insert_Trigger");
                    tb.HasTrigger("Konta_Delete_Trigger");
                    tb.HasTrigger("Konta_InsertUpdateHandler");
                    tb.HasTrigger("Konta_InsertUpdate_Trigger");
                    tb.HasTrigger("Konta_Insert_Trigger");
                });

            entity.HasIndex(e => e.AccKontrolaBudzetu, "AccBudzet").HasFillFactor(100);

            entity.HasIndex(e => new { e.AccNumer, e.AccAccId }, "AccGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AccKorektaKosztow, e.AccAccId }, "AccKorektaKosztow")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AccOobId, e.AccNazwa, e.AccAccId }, "AccNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.AccNextAccId, "AccNextOkres").HasFillFactor(100);

            entity.HasIndex(e => new { e.AccOobId, e.AccNumerIdx }, "AccNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AccOobId, e.AccAccId, e.AccNieAktywne }, "AccOObId").HasFillFactor(100);

            entity.HasIndex(e => new { e.AccParId, e.AccSegment, e.AccAccId }, "AccParrent")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.AccSlownikId, e.AccSlownikTyp, e.AccParId }, "AccPodmiot").HasFillFactor(100);

            entity.Property(e => e.AccAccId).HasColumnName("Acc_AccId");
            entity.Property(e => e.AccAnalityka).HasColumnName("Acc_Analityka");
            entity.Property(e => e.AccBezRozliczenia).HasColumnName("Acc_BezRozliczenia");
            entity.Property(e => e.AccKontrolaBudzetu).HasColumnName("Acc_KontrolaBudzetu");
            entity.Property(e => e.AccKontrolaSalda).HasColumnName("Acc_KontrolaSalda");
            entity.Property(e => e.AccKorektaKosztow).HasColumnName("Acc_KorektaKosztow");
            entity.Property(e => e.AccNazwa)
                .HasMaxLength(50)
                .HasColumnName("Acc_Nazwa");
            entity.Property(e => e.AccNazwa2)
                .HasMaxLength(50)
                .HasColumnName("Acc_Nazwa2");
            entity.Property(e => e.AccNextAccId).HasColumnName("Acc_NextAccId");
            entity.Property(e => e.AccNieAktywne).HasColumnName("Acc_NieAktywne");
            entity.Property(e => e.AccNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Acc_Numer");
            entity.Property(e => e.AccNumerIdx)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Acc_NumerIdx");
            entity.Property(e => e.AccOobId).HasColumnName("Acc_OObId");
            entity.Property(e => e.AccOpeModId).HasColumnName("Acc_OpeModID");
            entity.Property(e => e.AccOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Acc_OpeModKod");
            entity.Property(e => e.AccOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Acc_OpeModNazwisko");
            entity.Property(e => e.AccOpeZalId).HasColumnName("Acc_OpeZalID");
            entity.Property(e => e.AccOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Acc_OpeZalKod");
            entity.Property(e => e.AccOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Acc_OpeZalNazwisko");
            entity.Property(e => e.AccParId).HasColumnName("Acc_ParId");
            entity.Property(e => e.AccPoziom).HasColumnName("Acc_Poziom");
            entity.Property(e => e.AccPrevAccId).HasColumnName("Acc_PrevAccId");
            entity.Property(e => e.AccRozrachunkowe).HasColumnName("Acc_Rozrachunkowe");
            entity.Property(e => e.AccSegment)
                .HasMaxLength(20)
                .HasColumnName("Acc_Segment");
            entity.Property(e => e.AccSlownik).HasColumnName("Acc_Slownik");
            entity.Property(e => e.AccSlownikGrupa).HasColumnName("Acc_SlownikGrupa");
            entity.Property(e => e.AccSlownikId).HasColumnName("Acc_SlownikId");
            entity.Property(e => e.AccSlownikTyp).HasColumnName("Acc_SlownikTyp");
            entity.Property(e => e.AccStaModId).HasColumnName("Acc_StaModId");
            entity.Property(e => e.AccStaZalId).HasColumnName("Acc_StaZalId");
            entity.Property(e => e.AccTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Acc_TS_Mod");
            entity.Property(e => e.AccTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Acc_TS_Zal");
            entity.Property(e => e.AccTypKonta).HasColumnName("Acc_TypKonta");
            entity.Property(e => e.AccWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Acc_Waluta");

            entity.HasOne(d => d.AccOob).WithMany(p => p.Konta)
                .HasForeignKey(d => d.AccOobId)
                .HasConstraintName("FK_AccNumer");

            entity.HasOne(d => d.AccPar).WithMany(p => p.InverseAccPar)
                .HasForeignKey(d => d.AccParId)
                .HasConstraintName("FK_AccParrent");
        });

        modelBuilder.Entity<KorektaPodatkuDochodowego>(entity =>
        {
            entity.HasKey(e => e.KpdKpdid)
                .HasName("KPD_Primary")
                .HasFillFactor(100);

            entity.ToTable("KorektaPodatkuDochodowego", "CDN", tb => tb.HasTrigger("KorektaPodatkuDochodowego_InsertDelete_Trigger"));

            entity.Property(e => e.KpdKpdid).HasColumnName("KPD_KPDID");
            entity.Property(e => e.KpdBufor).HasColumnName("KPD_Bufor");
            entity.Property(e => e.KpdData)
                .HasColumnType("datetime")
                .HasColumnName("KPD_Data");
            entity.Property(e => e.KpdKoszty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPD_Koszty");
            entity.Property(e => e.KpdKprid).HasColumnName("KPD_KPRID");
            entity.Property(e => e.KpdNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("KPD_Numer");
            entity.Property(e => e.KpdPrzychody)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPD_Przychody");
            entity.Property(e => e.KpdReNid).HasColumnName("KPD_ReNID");

            entity.HasOne(d => d.KpdReN).WithMany(p => p.KorektaPodatkuDochodowegos)
                .HasForeignKey(d => d.KpdReNid)
                .HasConstraintName("FK_KPDLp");
        });

        modelBuilder.Entity<KorektaPodatkuDochodowegoZd>(entity =>
        {
            entity.HasKey(e => e.KzdKzdid)
                .HasName("KZD_Primary")
                .HasFillFactor(100);

            entity.ToTable("KorektaPodatkuDochodowegoZD", "CDN");

            entity.Property(e => e.KzdKzdid).HasColumnName("KZD_KZDID");
            entity.Property(e => e.KzdBzdId).HasColumnName("KZD_BZdID");
            entity.Property(e => e.KzdDataWystawienia)
                .HasColumnType("datetime")
                .HasColumnName("KZD_DataWystawienia");
            entity.Property(e => e.KzdDataZaplaty)
                .HasColumnType("datetime")
                .HasColumnName("KZD_DataZaplaty");
            entity.Property(e => e.KzdDkNid).HasColumnName("KZD_DkNID");
            entity.Property(e => e.KzdDokumentId).HasColumnName("KZD_DokumentID");
            entity.Property(e => e.KzdDokumentTyp).HasColumnName("KZD_DokumentTyp");
            entity.Property(e => e.KzdGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("KZD_GUID");
            entity.Property(e => e.KzdInfoDodatkowe).HasColumnName("KZD_InfoDodatkowe");
            entity.Property(e => e.KzdKierunek).HasColumnName("KZD_Kierunek");
            entity.Property(e => e.KzdKontrahent)
                .HasMaxLength(352)
                .HasColumnName("KZD_Kontrahent");
            entity.Property(e => e.KzdKontrahentId).HasColumnName("KZD_KontrahentID");
            entity.Property(e => e.KzdKwotaDoKorekty)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("KZD_KwotaDoKorekty");
            entity.Property(e => e.KzdKwotaPlatnosci)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("KZD_KwotaPlatnosci");
            entity.Property(e => e.KzdNip)
                .HasMaxLength(20)
                .HasColumnName("KZD_NIP");
            entity.Property(e => e.KzdNumerDokumentu)
                .HasMaxLength(256)
                .HasColumnName("KZD_NumerDokumentu");
            entity.Property(e => e.KzdPierwszy).HasColumnName("KZD_Pierwszy");
            entity.Property(e => e.KzdPraId).HasColumnName("KZD_PraID");
            entity.Property(e => e.KzdReczny).HasColumnName("KZD_Reczny");
            entity.Property(e => e.KzdRodzaj).HasColumnName("KZD_Rodzaj");
            entity.Property(e => e.KzdRodzajDzial).HasColumnName("KZD_RodzajDzial");
            entity.Property(e => e.KzdRozliczonaKwota)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("KZD_RozliczonaKwota");
            entity.Property(e => e.KzdSkorygowano)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("KZD_Skorygowano");
            entity.Property(e => e.KzdSkorygowanoMc)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("KZD_SkorygowanoMc");
            entity.Property(e => e.KzdTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("KZD_TerminPlatnosci");
            entity.Property(e => e.KzdUregulowane).HasColumnName("KZD_Uregulowane");

            entity.HasOne(d => d.KzdDkN).WithMany(p => p.KorektaPodatkuDochodowegoZds)
                .HasForeignKey(d => d.KzdDkNid)
                .HasConstraintName("FK_KZDDeklNag");
        });

        modelBuilder.Entity<KorektaPodatkuDochodowegoZdzakazy>(entity =>
        {
            entity.HasKey(e => e.KzaKzaId)
                .HasName("KZa_Primary")
                .HasFillFactor(100);

            entity.ToTable("KorektaPodatkuDochodowegoZDZakazy", "CDN");

            entity.Property(e => e.KzaKzaId).HasColumnName("KZa_KZaID");
            entity.Property(e => e.KzaBzdId).HasColumnName("KZa_BZdID");
            entity.Property(e => e.KzaPraId).HasColumnName("KZa_PraID");
            entity.Property(e => e.KzaRodzaj).HasColumnName("KZa_Rodzaj");
        });

        modelBuilder.Entity<KragKosztElem>(entity =>
        {
            entity.HasKey(e => e.KkeKkeid)
                .HasName("KKE_Primary")
                .HasFillFactor(100);

            entity.ToTable("KragKosztElem", "CDN", tb => tb.HasTrigger("KragKosztElem_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.KkeKknid, e.KkeStrona, e.KkeKonto }, "KKENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KkeKkeid).HasColumnName("KKE_KKEId");
            entity.Property(e => e.KkeKknid).HasColumnName("KKE_KKNId");
            entity.Property(e => e.KkeKonto)
                .HasMaxLength(50)
                .HasColumnName("KKE_Konto");
            entity.Property(e => e.KkeStrona).HasColumnName("KKE_Strona");

            entity.HasOne(d => d.KkeKkn).WithMany(p => p.KragKosztElems)
                .HasForeignKey(d => d.KkeKknid)
                .HasConstraintName("FK_KKENaglowek");
        });

        modelBuilder.Entity<KragKosztNag>(entity =>
        {
            entity.HasKey(e => e.KknKknid)
                .HasName("KKN_Primary")
                .HasFillFactor(100);

            entity.ToTable("KragKosztNag", "CDN", tb => tb.HasTrigger("KragKosztNag_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.KknAccId, e.KknNieAktywny }, "KKNKonto").HasFillFactor(100);

            entity.HasIndex(e => new { e.KknOobId, e.KknSymbol }, "KKNSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KknKknid).HasColumnName("KKN_KKNId");
            entity.Property(e => e.KknAccId).HasColumnName("KKN_AccId");
            entity.Property(e => e.KknNieAktywny).HasColumnName("KKN_NieAktywny");
            entity.Property(e => e.KknOobId).HasColumnName("KKN_OObId");
            entity.Property(e => e.KknOpeModId).HasColumnName("KKN_OpeModID");
            entity.Property(e => e.KknOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKN_OpeModKod");
            entity.Property(e => e.KknOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KKN_OpeModNazwisko");
            entity.Property(e => e.KknOpeZalId).HasColumnName("KKN_OpeZalID");
            entity.Property(e => e.KknOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKN_OpeZalKod");
            entity.Property(e => e.KknOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KKN_OpeZalNazwisko");
            entity.Property(e => e.KknStaModId).HasColumnName("KKN_StaModId");
            entity.Property(e => e.KknStaZalId).HasColumnName("KKN_StaZalId");
            entity.Property(e => e.KknSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KKN_Symbol");
            entity.Property(e => e.KknTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KKN_TS_Mod");
            entity.Property(e => e.KknTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KKN_TS_Zal");

            entity.HasOne(d => d.KknAcc).WithMany(p => p.KragKosztNags)
                .HasForeignKey(d => d.KknAccId)
                .HasConstraintName("FK_KKNKonto");

            entity.HasOne(d => d.KknOob).WithMany(p => p.KragKosztNags)
                .HasForeignKey(d => d.KknOobId)
                .HasConstraintName("FK_KKNSymbol");
        });

        modelBuilder.Entity<Krd>(entity =>
        {
            entity.HasKey(e => e.KrdKrdId)
                .HasName("KRD_Primary")
                .HasFillFactor(100);

            entity.ToTable("Krd", "CDN");

            entity.HasIndex(e => e.KrdKntId, "KrdKntId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KrdKrdId).HasColumnName("KRD_KrdId");
            entity.Property(e => e.KrdDataOdczytuStatusu)
                .HasColumnType("datetime")
                .HasColumnName("KRD_DataOdczytuStatusu");
            entity.Property(e => e.KrdKntId).HasColumnName("KRD_KntId");
            entity.Property(e => e.KrdMonitoring).HasColumnName("KRD_Monitoring");
            entity.Property(e => e.KrdMonitoringConditionId).HasColumnName("KRD_MonitoringConditionId");
            entity.Property(e => e.KrdRaportId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("KRD_RaportId");
            entity.Property(e => e.KrdRegulamin)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("KRD_Regulamin");
            entity.Property(e => e.KrdStatus).HasColumnName("KRD_Status");

            entity.HasOne(d => d.KrdKnt).WithOne(p => p.Krd)
                .HasForeignKey<Krd>(d => d.KrdKntId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Krd2Knt");
        });

        modelBuilder.Entity<KsefCode>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK__KsefCodes")
                .HasFillFactor(100);

            entity.ToTable("KsefCodes", "CDN");

            entity.HasIndex(e => e.License, "IDX_KsefCodes_License").HasFillFactor(100);

            entity.Property(e => e.License).HasMaxLength(50);
        });

        modelBuilder.Entity<KsiDokElem>(entity =>
        {
            entity.HasKey(e => e.KdeKdeid)
                .HasName("KDE_Primary")
                .HasFillFactor(100);

            entity.ToTable("KsiDokElem", "CDN");

            entity.HasIndex(e => new { e.KdeDeEid, e.KdeBoeid }, "KDEDekret").HasFillFactor(100);

            entity.HasIndex(e => e.KdeKdnid, "KDENaglowek").HasFillFactor(100);

            entity.HasIndex(e => e.KdeKroId, "KDERozrachunek").HasFillFactor(100);

            entity.Property(e => e.KdeKdeid).HasColumnName("KDE_KDEId");
            entity.Property(e => e.KdeBoeid).HasColumnName("KDE_BOEID");
            entity.Property(e => e.KdeDataDo)
                .HasColumnType("datetime")
                .HasColumnName("KDE_DataDo");
            entity.Property(e => e.KdeDataOd)
                .HasColumnType("datetime")
                .HasColumnName("KDE_DataOd");
            entity.Property(e => e.KdeDataWys)
                .HasColumnType("datetime")
                .HasColumnName("KDE_DataWys");
            entity.Property(e => e.KdeDeEid).HasColumnName("KDE_DeEID");
            entity.Property(e => e.KdeKdnid).HasColumnName("KDE_KDNId");
            entity.Property(e => e.KdeKroId).HasColumnName("KDE_KRoID");
            entity.Property(e => e.KdeKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDE_Kwota");
            entity.Property(e => e.KdeKwota1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDE_Kwota1");
            entity.Property(e => e.KdeKwota2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDE_Kwota2");
            entity.Property(e => e.KdeKwota3)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDE_Kwota3");
            entity.Property(e => e.KdeLp).HasColumnName("KDE_LP");
            entity.Property(e => e.KdeNumer)
                .HasMaxLength(256)
                .HasColumnName("KDE_Numer");
            entity.Property(e => e.KdeOpis)
                .HasMaxLength(50)
                .HasColumnName("KDE_Opis");
            entity.Property(e => e.KdeTermin)
                .HasColumnType("datetime")
                .HasColumnName("KDE_Termin");

            entity.HasOne(d => d.KdeKdn).WithMany(p => p.KsiDokElems)
                .HasForeignKey(d => d.KdeKdnid)
                .HasConstraintName("FK_KDENaglowek");
        });

        modelBuilder.Entity<KsiDokNag>(entity =>
        {
            entity.HasKey(e => e.KdnKdnid)
                .HasName("KDN_Primary")
                .HasFillFactor(100);

            entity.ToTable("KsiDokNag", "CDN");

            entity.HasIndex(e => e.KdnDekId, "KDNDekret").HasFillFactor(100);

            entity.HasIndex(e => e.KdnDdfId, "KDNDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.KdnKatId, e.KdnTyp, e.KdnDataDok, e.KdnKdnid }, "KDNKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KdnNumerString, e.KdnNumerNr }, "KDNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KdnTyp, e.KdnNumerPelny }, "KDNNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KdnKontoNumer, e.KdnTyp, e.KdnDataDok, e.KdnKdnid }, "KDNPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KdnPreDekId, "KDNPreDekret").HasFillFactor(100);

            entity.HasIndex(e => new { e.KdnDataDok, e.KdnNumerPelny }, "KDNViewOrder").HasFillFactor(100);

            entity.Property(e => e.KdnKdnid).HasColumnName("KDN_KDNId");
            entity.Property(e => e.KdnAccId).HasColumnName("KDN_AccID");
            entity.Property(e => e.KdnBufor).HasColumnName("KDN_Bufor");
            entity.Property(e => e.KdnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("KDN_DataDok");
            entity.Property(e => e.KdnDataKur)
                .HasColumnType("datetime")
                .HasColumnName("KDN_DataKur");
            entity.Property(e => e.KdnDdfId).HasColumnName("KDN_DDfId");
            entity.Property(e => e.KdnDekId).HasColumnName("KDN_DekID");
            entity.Property(e => e.KdnFplId).HasColumnName("KDN_FPlID");
            entity.Property(e => e.KdnKatId).HasColumnName("KDN_KatID");
            entity.Property(e => e.KdnKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KDN_Kategoria");
            entity.Property(e => e.KdnKontoNazwa)
                .HasMaxLength(255)
                .HasColumnName("KDN_KontoNazwa");
            entity.Property(e => e.KdnKontoNumer)
                .HasMaxLength(255)
                .HasColumnName("KDN_KontoNumer");
            entity.Property(e => e.KdnKontoNumerIdx)
                .HasMaxLength(255)
                .HasColumnName("KDN_KontoNumerIdx");
            entity.Property(e => e.KdnKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KDN_KursL");
            entity.Property(e => e.KdnKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("KDN_KursM");
            entity.Property(e => e.KdnKursNumer).HasColumnName("KDN_KursNumer");
            entity.Property(e => e.KdnNumerNr).HasColumnName("KDN_NumerNr");
            entity.Property(e => e.KdnNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([KDN_NUMERNR],[KDN_NUMERSTRING]))", false)
                .HasColumnName("KDN_NumerPelny");
            entity.Property(e => e.KdnNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("KDN_NumerString");
            entity.Property(e => e.KdnOdsetkiStopa)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("KDN_OdsetkiStopa");
            entity.Property(e => e.KdnOdsetkiTyp).HasColumnName("KDN_OdsetkiTyp");
            entity.Property(e => e.KdnOobId).HasColumnName("KDN_OObID");
            entity.Property(e => e.KdnOpeModId).HasColumnName("KDN_OpeModID");
            entity.Property(e => e.KdnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KDN_OpeModKod");
            entity.Property(e => e.KdnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KDN_OpeModNazwisko");
            entity.Property(e => e.KdnOpeZalId).HasColumnName("KDN_OpeZalID");
            entity.Property(e => e.KdnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KDN_OpeZalKod");
            entity.Property(e => e.KdnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KDN_OpeZalNazwisko");
            entity.Property(e => e.KdnOpis)
                .HasMaxLength(254)
                .HasColumnName("KDN_Opis");
            entity.Property(e => e.KdnPreDekId).HasColumnName("KDN_PreDekID");
            entity.Property(e => e.KdnRazemKwota1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDN_RazemKwota1");
            entity.Property(e => e.KdnRazemKwota2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDN_RazemKwota2");
            entity.Property(e => e.KdnRazemKwotaSys1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDN_RazemKwotaSys1");
            entity.Property(e => e.KdnRazemKwotaSys2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDN_RazemKwotaSys2");
            entity.Property(e => e.KdnStaModId).HasColumnName("KDN_StaModId");
            entity.Property(e => e.KdnStaZalId).HasColumnName("KDN_StaZalId");
            entity.Property(e => e.KdnTermin)
                .HasColumnType("datetime")
                .HasColumnName("KDN_Termin");
            entity.Property(e => e.KdnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KDN_TS_Mod");
            entity.Property(e => e.KdnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KDN_TS_Zal");
            entity.Property(e => e.KdnTyp).HasColumnName("KDN_Typ");
            entity.Property(e => e.KdnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("KDN_Waluta");

            entity.HasOne(d => d.KdnDdf).WithMany(p => p.KsiDokNags)
                .HasForeignKey(d => d.KdnDdfId)
                .HasConstraintName("FK_KDNDokDefinicja");
        });

        modelBuilder.Entity<KsiRozrachunki>(entity =>
        {
            entity.HasKey(e => e.KroKroId)
                .HasName("KRo_Primary")
                .HasFillFactor(100);

            entity.ToTable("KsiRozrachunki", "CDN");

            entity.HasIndex(e => new { e.KroTyp, e.KroBoeid, e.KroStrona }, "KRoBOElem").HasFillFactor(100);

            entity.HasIndex(e => e.KroBrkid, "KRoBRKID").HasFillFactor(100);

            entity.HasIndex(e => e.KroBoeid, "KRoBoEId").HasFillFactor(100);

            entity.HasIndex(e => e.KroBufor, "KRoBufor").HasFillFactor(100);

            entity.HasIndex(e => e.KroDataDokumentu, "KRoDataDokumentu").HasFillFactor(100);

            entity.HasIndex(e => e.KroDataRozliczenia, "KRoDataRozliczenia").HasFillFactor(100);

            entity.HasIndex(e => e.KroDeEid, "KRoDeEId").HasFillFactor(100);

            entity.HasIndex(e => new { e.KroDokument, e.KroIdentKsieg, e.KroOpis }, "KRoDokument").HasFillFactor(100);

            entity.HasIndex(e => new { e.KroKonto, e.KroKontoIdx }, "KRoKonto").HasFillFactor(100);

            entity.HasIndex(e => e.KroRozliczenieId, "KRoRozliczenie").HasFillFactor(100);

            entity.HasIndex(e => e.KroTerminPlatnosci, "KRoTerminPlatnosci").HasFillFactor(100);

            entity.HasIndex(e => new { e.KroRozliczenieId, e.KroTyp, e.KroDeEid, e.KroKroId }, "KRo_DETA").HasFillFactor(100);

            entity.HasIndex(e => new { e.KroTyp, e.KroDeEid, e.KroStrona }, "KroDekretyElem").HasFillFactor(100);

            entity.HasIndex(e => e.KroKwota, "KroKwota").HasFillFactor(100);

            entity.Property(e => e.KroKroId).HasColumnName("KRo_KRoId");
            entity.Property(e => e.KroBoeid).HasColumnName("KRo_BOEId");
            entity.Property(e => e.KroBrkid).HasColumnName("KRo_BRKID");
            entity.Property(e => e.KroBufor).HasColumnName("KRo_Bufor");
            entity.Property(e => e.KroDataDokumentu)
                .HasColumnType("datetime")
                .HasColumnName("KRo_DataDokumentu");
            entity.Property(e => e.KroDataOperacji)
                .HasColumnType("datetime")
                .HasColumnName("KRo_DataOperacji");
            entity.Property(e => e.KroDataRoz)
                .HasColumnType("datetime")
                .HasColumnName("KRo_DataRoz");
            entity.Property(e => e.KroDataRozliczenia)
                .HasColumnType("datetime")
                .HasColumnName("KRo_DataRozliczenia");
            entity.Property(e => e.KroDeEid).HasColumnName("KRo_DeEId");
            entity.Property(e => e.KroDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("KRo_Dokument");
            entity.Property(e => e.KroDziennik)
                .HasMaxLength(30)
                .HasColumnName("KRo_Dziennik");
            entity.Property(e => e.KroIdentKsieg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KRo_IdentKsieg");
            entity.Property(e => e.KroKonto)
                .HasMaxLength(50)
                .HasColumnName("KRo_Konto");
            entity.Property(e => e.KroKontoIdx)
                .HasMaxLength(50)
                .HasColumnName("KRo_KontoIdx");
            entity.Property(e => e.KroKontoPrzeciw)
                .HasMaxLength(50)
                .HasColumnName("KRo_KontoPrzeciw");
            entity.Property(e => e.KroKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRo_Kwota");
            entity.Property(e => e.KroKwotaDok)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRo_KwotaDok");
            entity.Property(e => e.KroKwotaDokWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRo_KwotaDokWal");
            entity.Property(e => e.KroKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRo_KwotaWal");
            entity.Property(e => e.KroNrDziennika)
                .HasMaxLength(30)
                .HasColumnName("KRo_NrDziennika");
            entity.Property(e => e.KroNrKsiegi)
                .HasMaxLength(30)
                .HasColumnName("KRo_NrKsiegi");
            entity.Property(e => e.KroNumerDziennika).HasColumnName("KRo_NumerDziennika");
            entity.Property(e => e.KroOobId).HasColumnName("KRo_OObId");
            entity.Property(e => e.KroOpis)
                .HasMaxLength(50)
                .HasColumnName("KRo_Opis");
            entity.Property(e => e.KroParentId).HasColumnName("KRo_ParentId");
            entity.Property(e => e.KroRozliczenieId).HasColumnName("KRo_RozliczenieId");
            entity.Property(e => e.KroStorno).HasColumnName("KRo_Storno");
            entity.Property(e => e.KroStrona).HasColumnName("KRo_Strona");
            entity.Property(e => e.KroSumRozliczen)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRo_SumRozliczen");
            entity.Property(e => e.KroSumRozliczenWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRo_SumRozliczenWal");
            entity.Property(e => e.KroTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("KRo_TerminPlatnosci");
            entity.Property(e => e.KroTyp).HasColumnName("KRo_Typ");
            entity.Property(e => e.KroWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("KRo_Waluta");
        });

        modelBuilder.Entity<KwotyCelne>(entity =>
        {
            entity.HasKey(e => e.KceKceId)
                .HasName("KCe_Primary")
                .HasFillFactor(100);

            entity.ToTable("KwotyCelne", "CDN", tb => tb.HasTrigger("KwotyCelne_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => e.KceNazwa, "KCeNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.KceKceId).HasColumnName("KCe_KCeId");
            entity.Property(e => e.KceImport).HasColumnName("KCe_Import");
            entity.Property(e => e.KceNazwa)
                .HasMaxLength(100)
                .HasColumnName("KCe_Nazwa");
            entity.Property(e => e.KceWnt).HasColumnName("KCe_WNT");
            entity.Property(e => e.KceWplywNaPlatnosc).HasColumnName("KCe_WplywNaPlatnosc");
            entity.Property(e => e.KceWplywNaWartoscVat).HasColumnName("KCe_WplywNaWartoscVAT");
        });

        modelBuilder.Entity<KwotyDodatkowe>(entity =>
        {
            entity.HasKey(e => e.KddKddId)
                .HasName("Kdd_Primary")
                .HasFillFactor(100);

            entity.ToTable("KwotyDodatkowe", "CDN", tb => tb.HasTrigger("KwotyDodatkowe_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KddDokumentId, e.KddDokumentTyp }, "KddDokument").HasFillFactor(100);

            entity.HasIndex(e => new { e.KddKatId, e.KddDokumentTyp, e.KddDokumentId }, "KddKategoria").HasFillFactor(100);

            entity.Property(e => e.KddKddId).HasColumnName("Kdd_KddID");
            entity.Property(e => e.KddDataKur)
                .HasColumnType("datetime")
                .HasColumnName("Kdd_DataKur");
            entity.Property(e => e.KddDokumentId).HasColumnName("Kdd_DokumentID");
            entity.Property(e => e.KddDokumentTyp).HasColumnName("Kdd_DokumentTyp");
            entity.Property(e => e.KddKat2Id).HasColumnName("Kdd_Kat2ID");
            entity.Property(e => e.KddKatId).HasColumnName("Kdd_KatID");
            entity.Property(e => e.KddKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Kdd_KursL");
            entity.Property(e => e.KddKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("Kdd_KursM");
            entity.Property(e => e.KddKursNumer).HasColumnName("Kdd_KursNumer");
            entity.Property(e => e.KddKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Kdd_Kwota");
            entity.Property(e => e.KddKwotaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Kdd_KwotaWal");
            entity.Property(e => e.KddLp).HasColumnName("Kdd_Lp");
            entity.Property(e => e.KddOpis)
                .HasMaxLength(50)
                .HasColumnName("Kdd_Opis");
            entity.Property(e => e.KddOpis2)
                .HasMaxLength(50)
                .HasColumnName("Kdd_Opis2");
            entity.Property(e => e.KddPrzekrojTyp).HasColumnName("Kdd_PrzekrojTyp");
            entity.Property(e => e.KddRozrachunki).HasColumnName("Kdd_Rozrachunki");
            entity.Property(e => e.KddSegment1)
                .HasMaxLength(50)
                .HasColumnName("Kdd_Segment1");
            entity.Property(e => e.KddSegment2)
                .HasMaxLength(50)
                .HasColumnName("Kdd_Segment2");
            entity.Property(e => e.KddWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Kdd_Waluta");
            entity.Property(e => e.KddWartosc1).HasColumnName("Kdd_Wartosc1");
            entity.Property(e => e.KddWartosc2).HasColumnName("Kdd_Wartosc2");

            entity.HasOne(d => d.KddKat2).WithMany(p => p.KwotyDodatkoweKddKat2s)
                .HasForeignKey(d => d.KddKat2Id)
                .HasConstraintName("FK_KddKategoria2");

            entity.HasOne(d => d.KddKat).WithMany(p => p.KwotyDodatkoweKddKats)
                .HasForeignKey(d => d.KddKatId)
                .HasConstraintName("FK_KddKategoria");
        });

        modelBuilder.Entity<LimitNieobec>(entity =>
        {
            entity.HasKey(e => e.LnbLnbId)
                .HasName("LNB_Primary")
                .HasFillFactor(100);

            entity.ToTable("LimitNieobec", "CDN", tb =>
                {
                    tb.HasTrigger("LimitNieobec_Delete_Trigger");
                    tb.HasTrigger("LimitNieobec_InsertUpdate_Trigger");
                    tb.HasTrigger("LimitNieobec_Update_Trigger");
                });

            entity.HasIndex(e => e.LnbNazwa, "LNBNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.LnbSkrot, "LNBSkrot").HasFillFactor(100);

            entity.Property(e => e.LnbLnbId).HasColumnName("LNB_LnbId");
            entity.Property(e => e.LnbGodzinowy).HasColumnName("LNB_Godzinowy");
            entity.Property(e => e.LnbImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("LNB_ImportRowId");
            entity.Property(e => e.LnbKumNieWykorz).HasColumnName("LNB_KumNieWykorz");
            entity.Property(e => e.LnbLiczPropDoEtatu).HasColumnName("LNB_LiczPropDoEtatu");
            entity.Property(e => e.LnbLiczPropDoZatr).HasColumnName("LNB_LiczPropDoZatr");
            entity.Property(e => e.LnbLiczbaDni).HasColumnName("LNB_LiczbaDni");
            entity.Property(e => e.LnbLiczbaDniDod).HasColumnName("LNB_LiczbaDniDod");
            entity.Property(e => e.LnbNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LNB_Nazwa");
            entity.Property(e => e.LnbNieaktywny).HasColumnName("LNB_Nieaktywny");
            entity.Property(e => e.LnbOpeModId).HasColumnName("LNB_OpeModId");
            entity.Property(e => e.LnbOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LNB_OpeModKod");
            entity.Property(e => e.LnbOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("LNB_OpeModNazwisko");
            entity.Property(e => e.LnbOpeZalId).HasColumnName("LNB_OpeZalId");
            entity.Property(e => e.LnbOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LNB_OpeZalKod");
            entity.Property(e => e.LnbOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("LNB_OpeZalNazwisko");
            entity.Property(e => e.LnbPoMiesiacach).HasColumnName("LNB_PoMiesiacach");
            entity.Property(e => e.LnbPodstawa).HasColumnName("LNB_Podstawa");
            entity.Property(e => e.LnbSkrot)
                .HasMaxLength(40)
                .HasColumnName("LNB_Skrot");
            entity.Property(e => e.LnbStaModId).HasColumnName("LNB_StaModId");
            entity.Property(e => e.LnbStaZalId).HasColumnName("LNB_StaZalId");
            entity.Property(e => e.LnbStandardowy).HasColumnName("LNB_Standardowy");
            entity.Property(e => e.LnbStaz).HasColumnName("LNB_Staz");
            entity.Property(e => e.LnbTsMod)
                .HasColumnType("datetime")
                .HasColumnName("LNB_TS_Mod");
            entity.Property(e => e.LnbTsZal)
                .HasColumnType("datetime")
                .HasColumnName("LNB_TS_Zal");
            entity.Property(e => e.LnbZalezyOdStaz).HasColumnName("LNB_ZalezyOdStaz");
        });

        modelBuilder.Entity<ListyPlac>(entity =>
        {
            entity.HasKey(e => e.LplLplId)
                .HasName("LPL_Primary")
                .HasFillFactor(100);

            entity.ToTable("ListyPlac", "CDN", tb =>
                {
                    tb.HasTrigger("ListyPlac_DeleteHandler");
                    tb.HasTrigger("ListyPlac_Delete_Trigger");
                    tb.HasTrigger("ListyPlac_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.LplDdfId, "LPLDdfLink").HasFillFactor(100);

            entity.HasIndex(e => e.LplDzlId, "LPLDzlLink").HasFillFactor(100);

            entity.HasIndex(e => e.LplParentId, "LPLInclude").HasFillFactor(100);

            entity.HasIndex(e => e.LplNumerPelny, "LPLNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.LplZakId, "LPLZakLink").HasFillFactor(100);

            entity.HasIndex(e => e.LplDekId, "LPlDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.LplPreDekId, "LPlPreDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.LplKprid, "LPlZapisyKPR").HasFillFactor(100);

            entity.HasIndex(e => new { e.LplRok, e.LplMiesiac }, "LplRokMiesiac").HasFillFactor(100);

            entity.Property(e => e.LplLplId).HasColumnName("LPL_LplId");
            entity.Property(e => e.LplDataDanych)
                .HasColumnType("datetime")
                .HasColumnName("LPL_DataDanych");
            entity.Property(e => e.LplDataDo)
                .HasColumnType("datetime")
                .HasColumnName("LPL_DataDo");
            entity.Property(e => e.LplDataDok)
                .HasColumnType("datetime")
                .HasColumnName("LPL_DataDok");
            entity.Property(e => e.LplDataKur)
                .HasColumnType("datetime")
                .HasColumnName("LPL_DataKur");
            entity.Property(e => e.LplDataKurDieta)
                .HasColumnType("datetime")
                .HasColumnName("LPL_DataKurDieta");
            entity.Property(e => e.LplDataOd)
                .HasColumnType("datetime")
                .HasColumnName("LPL_DataOd");
            entity.Property(e => e.LplDdfId).HasColumnName("LPL_DdfId");
            entity.Property(e => e.LplDekId).HasColumnName("LPL_DekId");
            entity.Property(e => e.LplDzlId).HasColumnName("LPL_DzlId");
            entity.Property(e => e.LplImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("LPL_ImportAppId");
            entity.Property(e => e.LplImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("LPL_ImportRowId");
            entity.Property(e => e.LplKategoria).HasColumnName("LPL_Kategoria");
            entity.Property(e => e.LplKprid).HasColumnName("LPL_KPRId");
            entity.Property(e => e.LplKursL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("LPL_KursL");
            entity.Property(e => e.LplKursLdieta)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("LPL_KursLDieta");
            entity.Property(e => e.LplKursM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("LPL_KursM");
            entity.Property(e => e.LplKursMdieta)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("LPL_KursMDieta");
            entity.Property(e => e.LplKursNumer)
                .HasDefaultValue(3)
                .HasColumnName("LPL_KursNumer");
            entity.Property(e => e.LplKursNumerDieta)
                .HasDefaultValue(3)
                .HasColumnName("LPL_KursNumerDieta");
            entity.Property(e => e.LplMiesiac).HasColumnName("LPL_Miesiac");
            entity.Property(e => e.LplMiesiecyWstecz).HasColumnName("LPL_MiesiecyWstecz");
            entity.Property(e => e.LplNazwa)
                .HasMaxLength(128)
                .HasColumnName("LPL_Nazwa");
            entity.Property(e => e.LplNumerNr).HasColumnName("LPL_NumerNr");
            entity.Property(e => e.LplNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([LPL_NUMERNR],[LPL_NUMERSTRING]))", false)
                .HasColumnName("LPL_NumerPelny");
            entity.Property(e => e.LplNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("LPL_NumerString");
            entity.Property(e => e.LplOddelegowani).HasColumnName("LPL_Oddelegowani");
            entity.Property(e => e.LplOddelegowaniKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("LPL_OddelegowaniKraj");
            entity.Property(e => e.LplOddelegowaniUmowa).HasColumnName("LPL_OddelegowaniUmowa");
            entity.Property(e => e.LplOpeModId).HasColumnName("LPL_OpeModId");
            entity.Property(e => e.LplOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_OpeModKod");
            entity.Property(e => e.LplOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("LPL_OpeModNazwisko");
            entity.Property(e => e.LplOpeZalId).HasColumnName("LPL_OpeZalId");
            entity.Property(e => e.LplOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_OpeZalKod");
            entity.Property(e => e.LplOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("LPL_OpeZalNazwisko");
            entity.Property(e => e.LplParentId).HasColumnName("LPL_ParentId");
            entity.Property(e => e.LplPreDekId).HasColumnName("LPL_PreDekId");
            entity.Property(e => e.LplRok).HasColumnName("LPL_Rok");
            entity.Property(e => e.LplStaModId).HasColumnName("LPL_StaModId");
            entity.Property(e => e.LplStaZalId).HasColumnName("LPL_StaZalId");
            entity.Property(e => e.LplSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("LPL_Symbol");
            entity.Property(e => e.LplTryb).HasColumnName("LPL_Tryb");
            entity.Property(e => e.LplTsExport)
                .HasColumnType("datetime")
                .HasColumnName("LPL_TS_Export");
            entity.Property(e => e.LplTsImport)
                .HasColumnType("datetime")
                .HasColumnName("LPL_TS_Import");
            entity.Property(e => e.LplTsMod)
                .HasColumnType("datetime")
                .HasColumnName("LPL_TS_Mod");
            entity.Property(e => e.LplTsZal)
                .HasColumnType("datetime")
                .HasColumnName("LPL_TS_Zal");
            entity.Property(e => e.LplTymczasowi).HasColumnName("LPL_Tymczasowi");
            entity.Property(e => e.LplWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_Waluta");
            entity.Property(e => e.LplWalutaDieta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_WalutaDieta");
            entity.Property(e => e.LplZakId).HasColumnName("LPL_ZakId");
            entity.Property(e => e.LplZaksiegowana).HasColumnName("LPL_Zaksiegowana");
            entity.Property(e => e.LplZamknieta)
                .HasColumnType("datetime")
                .HasColumnName("LPL_Zamknieta");

            entity.HasOne(d => d.LplDdf).WithMany(p => p.ListyPlacs)
                .HasForeignKey(d => d.LplDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LPLDdfLink");

            entity.HasOne(d => d.LplDzl).WithMany(p => p.ListyPlacs)
                .HasForeignKey(d => d.LplDzlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LPLDzlLink");

            entity.HasOne(d => d.LplParent).WithMany(p => p.InverseLplParent)
                .HasForeignKey(d => d.LplParentId)
                .HasConstraintName("FK_LPLParent");

            entity.HasOne(d => d.LplZak).WithMany(p => p.ListyPlacs)
                .HasForeignKey(d => d.LplZakId)
                .HasConstraintName("FK_LPLZakLink");
        });

        modelBuilder.Entity<Lokalizacje>(entity =>
        {
            entity.HasKey(e => e.LokLokId)
                .HasName("Lok_Primary")
                .HasFillFactor(100);

            entity.ToTable("Lokalizacje", "CDN", tb =>
                {
                    tb.HasTrigger("Lokalizacje_Delete_Trigger");
                    tb.HasTrigger("Lokalizacje_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.LokKod, e.LokLokId }, "LokGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.LokKod, "LokKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.LokLokId).HasColumnName("Lok_LokId");
            entity.Property(e => e.LokImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("LOK_ImportAppId");
            entity.Property(e => e.LokImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("LOK_ImportRowId");
            entity.Property(e => e.LokKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Lok_Kod");
            entity.Property(e => e.LokKonto)
                .HasMaxLength(51)
                .HasColumnName("Lok_Konto");
            entity.Property(e => e.LokNazwa)
                .HasMaxLength(254)
                .HasColumnName("Lok_Nazwa");
            entity.Property(e => e.LokNieaktywny).HasColumnName("Lok_Nieaktywny");
            entity.Property(e => e.LokOpeModId).HasColumnName("Lok_OpeModId");
            entity.Property(e => e.LokOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Lok_OpeModKod");
            entity.Property(e => e.LokOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Lok_OpeModNazwisko");
            entity.Property(e => e.LokOpeZalId).HasColumnName("Lok_OpeZalId");
            entity.Property(e => e.LokOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Lok_OpeZalKod");
            entity.Property(e => e.LokOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Lok_OpeZalNazwisko");
            entity.Property(e => e.LokStaModId).HasColumnName("Lok_StaModId");
            entity.Property(e => e.LokStaZalId).HasColumnName("Lok_StaZalId");
            entity.Property(e => e.LokSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Lok_Symbol");
            entity.Property(e => e.LokTsExport)
                .HasColumnType("datetime")
                .HasColumnName("LOK_TS_Export");
            entity.Property(e => e.LokTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Lok_TS_Mod");
            entity.Property(e => e.LokTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Lok_TS_Zal");
        });

        modelBuilder.Entity<LokalizacjeView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LokalizacjeView", "CDN");

            entity.Property(e => e.LvLokid)
                .ValueGeneratedOnAdd()
                .HasColumnName("LV_LOKID");
            entity.Property(e => e.LvLokkod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LV_LOKKOD");
            entity.Property(e => e.LvLokkonto)
                .HasMaxLength(51)
                .HasColumnName("LV_LOKKONTO");
            entity.Property(e => e.LvLoknazwa)
                .HasMaxLength(254)
                .HasColumnName("LV_LOKNAZWA");
            entity.Property(e => e.LvLoknieaktywny).HasColumnName("LV_LOKNIEAKTYWNY");
        });

        modelBuilder.Entity<MagazynZakazy>(entity =>
        {
            entity.HasKey(e => e.MaZMaZid)
                .HasName("MaZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("MagazynZakazy", "CDN");

            entity.HasIndex(e => new { e.MaZMagId, e.MaZOpeId }, "MaZMagazyn")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.MaZMaZid).HasColumnName("MaZ_MaZId");
            entity.Property(e => e.MaZMagId).HasColumnName("MaZ_MagId");
            entity.Property(e => e.MaZOpeId).HasColumnName("MaZ_OpeId");

            entity.HasOne(d => d.MaZMag).WithMany(p => p.MagazynZakazies)
                .HasForeignKey(d => d.MaZMagId)
                .HasConstraintName("FK_MaZMagazyn");
        });

        modelBuilder.Entity<Magazyny>(entity =>
        {
            entity.HasKey(e => e.MagMagId)
                .HasName("Mag_Primary")
                .HasFillFactor(100);

            entity.ToTable("Magazyny", "CDN", tb =>
                {
                    tb.HasTrigger("Magazyny_Delete_Trigger");
                    tb.HasTrigger("Magazyny_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.MagSymbol, "MagSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.MagMagId).HasColumnName("Mag_MagId");
            entity.Property(e => e.MagAdres).HasColumnName("Mag_Adres");
            entity.Property(e => e.MagGidnumer).HasColumnName("Mag_GIDNumer");
            entity.Property(e => e.MagKodTransakcji)
                .HasMaxLength(2)
                .HasColumnName("Mag_KodTransakcji");
            entity.Property(e => e.MagKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Mag_Konto");
            entity.Property(e => e.MagMagIdXl).HasColumnName("Mag_MagIdXL");
            entity.Property(e => e.MagMagazynZwrotnyXl).HasColumnName("Mag_MagazynZwrotnyXL");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(50)
                .HasColumnName("Mag_Nazwa");
            entity.Property(e => e.MagNieAktywny).HasColumnName("Mag_NieAktywny");
            entity.Property(e => e.MagOpeModId).HasColumnName("Mag_OpeModId");
            entity.Property(e => e.MagOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Mag_OpeModKod");
            entity.Property(e => e.MagOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Mag_OpeModNazwisko");
            entity.Property(e => e.MagOpeZalId).HasColumnName("Mag_OpeZalId");
            entity.Property(e => e.MagOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Mag_OpeZalKod");
            entity.Property(e => e.MagOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Mag_OpeZalNazwisko");
            entity.Property(e => e.MagOpis)
                .HasMaxLength(254)
                .HasColumnName("Mag_Opis");
            entity.Property(e => e.MagRejestr)
                .HasMaxLength(5)
                .HasColumnName("Mag_Rejestr");
            entity.Property(e => e.MagStaModId).HasColumnName("Mag_StaModId");
            entity.Property(e => e.MagStaZalId).HasColumnName("Mag_StaZalId");
            entity.Property(e => e.MagSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Mag_Symbol");
            entity.Property(e => e.MagTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Mag_TS_Mod");
            entity.Property(e => e.MagTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Mag_TS_Zal");
            entity.Property(e => e.MagTwCnumer).HasColumnName("Mag_TwCNumer");
            entity.Property(e => e.MagTyp).HasColumnName("Mag_Typ");
            entity.Property(e => e.MagUekraj)
                .HasMaxLength(2)
                .HasColumnName("Mag_UEKraj");
            entity.Property(e => e.MagUnijny).HasColumnName("Mag_Unijny");
        });

        modelBuilder.Entity<Marki>(entity =>
        {
            entity.HasKey(e => e.MrkMrkId)
                .HasName("Mrk_Primary")
                .HasFillFactor(100);

            entity.ToTable("Marki", "CDN");

            entity.HasIndex(e => new { e.MrkNazwa, e.MrkMrkId }, "MrkNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.MrkMrkId).HasColumnName("Mrk_MrkId");
            entity.Property(e => e.MrkLogo).HasColumnName("Mrk_Logo");
            entity.Property(e => e.MrkNazwa)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Mrk_Nazwa");
            entity.Property(e => e.MrkOpeModId).HasColumnName("Mrk_OpeModId");
            entity.Property(e => e.MrkOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Mrk_OpeModKod");
            entity.Property(e => e.MrkOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Mrk_OpeModNazwisko");
            entity.Property(e => e.MrkOpeZalId).HasColumnName("Mrk_OpeZalId");
            entity.Property(e => e.MrkOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Mrk_OpeZalKod");
            entity.Property(e => e.MrkOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Mrk_OpeZalNazwisko");
            entity.Property(e => e.MrkPrdId).HasColumnName("Mrk_PrdId");
            entity.Property(e => e.MrkStaModId).HasColumnName("Mrk_StaModId");
            entity.Property(e => e.MrkStaZalId).HasColumnName("Mrk_StaZalId");
            entity.Property(e => e.MrkTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Mrk_TS_Mod");
            entity.Property(e => e.MrkTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Mrk_TS_Zal");

            entity.HasOne(d => d.MrkPrd).WithMany(p => p.Markis)
                .HasForeignKey(d => d.MrkPrdId)
                .HasConstraintName("FK_MrkProducenci");
        });

        modelBuilder.Entity<MarkiJezykObcy>(entity =>
        {
            entity.HasKey(e => new { e.MrkJMrkId, e.MrkJJezykId })
                .HasName("MrkJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("MarkiJezykObcy", "CDN", tb =>
                {
                    tb.HasTrigger("MarkiJezykObcy_Delete_Trigger");
                    tb.HasTrigger("MarkiJezykObcy_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.MrkJMrkJid, "MrkJOID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.MrkJMrkId).HasColumnName("MrkJ_MrkID");
            entity.Property(e => e.MrkJJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("MrkJ_JezykID");
            entity.Property(e => e.MrkJMetaOpis)
                .HasMaxLength(320)
                .HasColumnName("MrkJ_MetaOpis");
            entity.Property(e => e.MrkJMetaSlowaKluczowe)
                .HasMaxLength(500)
                .HasColumnName("MrkJ_MetaSlowaKluczowe");
            entity.Property(e => e.MrkJMetaTytul)
                .HasMaxLength(100)
                .HasColumnName("MrkJ_MetaTytul");
            entity.Property(e => e.MrkJMrkJid)
                .ValueGeneratedOnAdd()
                .HasColumnName("MrkJ_MrkJID");
            entity.Property(e => e.MrkJNazwaNag)
                .HasMaxLength(250)
                .HasColumnName("MrkJ_NazwaNag");
            entity.Property(e => e.MrkJOpisHtml).HasColumnName("MrkJ_OpisHTML");
            entity.Property(e => e.MrkJOpisKrotki)
                .HasMaxLength(500)
                .HasColumnName("MrkJ_OpisKrotki");

            entity.HasOne(d => d.MrkJMrk).WithMany(p => p.MarkiJezykObcies)
                .HasForeignKey(d => d.MrkJMrkId)
                .HasConstraintName("FK_MrkJOdoMarki");
        });

        modelBuilder.Entity<Miastum>(entity =>
        {
            entity.HasKey(e => e.MstMstId)
                .HasName("MST_Primary")
                .HasFillFactor(100);

            entity.ToTable("Miasta", "CDN");

            entity.HasIndex(e => e.MstNazwa, "MSTNazwa").HasFillFactor(100);

            entity.Property(e => e.MstMstId).HasColumnName("MST_MstId");
            entity.Property(e => e.MstNazwa)
                .HasMaxLength(127)
                .HasColumnName("MST_Nazwa");
        });

        modelBuilder.Entity<MiejscaUzytkowanium>(entity =>
        {
            entity.HasKey(e => e.MuzMuzId)
                .HasName("MUzPrimary")
                .HasFillFactor(100);

            entity.ToTable("MiejscaUzytkowania", "CDN");

            entity.HasIndex(e => e.MuzNazwa, "MUzNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.MuzMuzId).HasColumnName("MUz_MUzID");
            entity.Property(e => e.MuzNazwa)
                .HasMaxLength(255)
                .HasColumnName("MUz_Nazwa");
            entity.Property(e => e.MuzNieaktywne).HasColumnName("MUz_Nieaktywne");
        });

        modelBuilder.Entity<Nazwy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Nazwy", "CDN");

            entity.Property(e => e.NazGidfirma).HasColumnName("Naz_GIDFirma");
            entity.Property(e => e.NazGidlp).HasColumnName("Naz_GIDLp");
            entity.Property(e => e.NazGidnumer).HasColumnName("Naz_GIDNumer");
            entity.Property(e => e.NazGidtyp).HasColumnName("Naz_GIDTyp");
            entity.Property(e => e.NazNazwa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Naz_Nazwa");
            entity.Property(e => e.NazNazwa1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Naz_Nazwa1");
            entity.Property(e => e.NazOpis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Naz_Opis");
        });

        modelBuilder.Entity<NotyOdsElem>(entity =>
        {
            entity.HasKey(e => e.NoeNoeid)
                .HasName("NOE_Primary")
                .HasFillFactor(100);

            entity.ToTable("NotyOdsElem", "CDN");

            entity.HasIndex(e => new { e.NoeNonid, e.NoeNoeid }, "NOENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.NoeBrkid, "NOERozliczenie").HasFillFactor(100);

            entity.HasIndex(e => e.NoeBzdId, "NOEZdarzenie").HasFillFactor(100);

            entity.Property(e => e.NoeNoeid).HasColumnName("NOE_NOEId");
            entity.Property(e => e.NoeBrkid).HasColumnName("NOE_BRKId");
            entity.Property(e => e.NoeBzdId).HasColumnName("NOE_BZdId");
            entity.Property(e => e.NoeDataDo)
                .HasColumnType("datetime")
                .HasColumnName("NOE_DataDo");
            entity.Property(e => e.NoeDataDok)
                .HasColumnType("datetime")
                .HasColumnName("NOE_DataDok");
            entity.Property(e => e.NoeDataOd)
                .HasColumnType("datetime")
                .HasColumnName("NOE_DataOd");
            entity.Property(e => e.NoeNonid).HasColumnName("NOE_NONId");
            entity.Property(e => e.NoeNumer)
                .HasMaxLength(30)
                .HasColumnName("NOE_Numer");
            entity.Property(e => e.NoeOdsetkiKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NOE_OdsetkiKwota");
            entity.Property(e => e.NoeOdsetkiStopa)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("NOE_OdsetkiStopa");
            entity.Property(e => e.NoeOpis)
                .HasMaxLength(254)
                .HasColumnName("NOE_Opis");
            entity.Property(e => e.NoePodstawa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NOE_Podstawa");

            entity.HasOne(d => d.NoeBrk).WithMany(p => p.NotyOdsElems)
                .HasForeignKey(d => d.NoeBrkid)
                .HasConstraintName("FK_NOERozliczenie");

            entity.HasOne(d => d.NoeBzd).WithMany(p => p.NotyOdsElems)
                .HasForeignKey(d => d.NoeBzdId)
                .HasConstraintName("FK_NOEZdarzenie");

            entity.HasOne(d => d.NoeNon).WithMany(p => p.NotyOdsElems)
                .HasForeignKey(d => d.NoeNonid)
                .HasConstraintName("FK_NOENaglowek");
        });

        modelBuilder.Entity<NotyOdsNag>(entity =>
        {
            entity.HasKey(e => e.NonNonid)
                .HasName("NON_Primary")
                .HasFillFactor(100);

            entity.ToTable("NotyOdsNag", "CDN", tb =>
                {
                    tb.HasTrigger("NotyOdsNag_DeleteHandler");
                    tb.HasTrigger("NotyOdsNag_Delete_Trigger");
                    tb.HasTrigger("NotyOdsNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.NonDekId, "NONDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.NonDdfId, "NONDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.NonKatId, e.NonDataDok, e.NonNonid }, "NONKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.NonNumerString, e.NonNumerNr }, "NONNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.NonNumerPelny, "NONNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.NonFplId, "NONPlatnosc").HasFillFactor(100);

            entity.HasIndex(e => new { e.NonPodmiotId, e.NonPodmiotTyp, e.NonDataDok, e.NonNonid }, "NONPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.NonPreDekId, "NONPreDekrety").HasFillFactor(100);

            entity.Property(e => e.NonNonid).HasColumnName("NON_NONId");
            entity.Property(e => e.NonBufor).HasColumnName("NON_Bufor");
            entity.Property(e => e.NonDataDok)
                .HasColumnType("datetime")
                .HasColumnName("NON_DataDok");
            entity.Property(e => e.NonDdfId).HasColumnName("NON_DDfId");
            entity.Property(e => e.NonDekId).HasColumnName("NON_DekId");
            entity.Property(e => e.NonFplId).HasColumnName("NON_FPlId");
            entity.Property(e => e.NonKatId).HasColumnName("NON_KatID");
            entity.Property(e => e.NonKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NON_Kategoria");
            entity.Property(e => e.NonKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("NON_KursL");
            entity.Property(e => e.NonKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("NON_KursM");
            entity.Property(e => e.NonKursNumer).HasColumnName("NON_KursNumer");
            entity.Property(e => e.NonNumerNr).HasColumnName("NON_NumerNr");
            entity.Property(e => e.NonNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([NON_NUMERNR],[NON_NUMERSTRING]))", false)
                .HasColumnName("NON_NumerPelny");
            entity.Property(e => e.NonNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("NON_NumerString");
            entity.Property(e => e.NonOdsetkiStopa)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("NON_OdsetkiStopa");
            entity.Property(e => e.NonOdsetkiTyp).HasColumnName("NON_OdsetkiTyp");
            entity.Property(e => e.NonOpeModId).HasColumnName("NON_OpeModID");
            entity.Property(e => e.NonOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NON_OpeModKod");
            entity.Property(e => e.NonOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("NON_OpeModNazwisko");
            entity.Property(e => e.NonOpeZalId).HasColumnName("NON_OpeZalID");
            entity.Property(e => e.NonOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NON_OpeZalKod");
            entity.Property(e => e.NonOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("NON_OpeZalNazwisko");
            entity.Property(e => e.NonPodmiotId).HasColumnName("NON_PodmiotID");
            entity.Property(e => e.NonPodmiotTyp).HasColumnName("NON_PodmiotTyp");
            entity.Property(e => e.NonPreDekId).HasColumnName("NON_PreDekId");
            entity.Property(e => e.NonRazemKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NON_RazemKwota");
            entity.Property(e => e.NonRazemKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NON_RazemKwotaSys");
            entity.Property(e => e.NonRazemOdsetki)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NON_RazemOdsetki");
            entity.Property(e => e.NonRazemOdsetkiSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NON_RazemOdsetkiSys");
            entity.Property(e => e.NonStaModId).HasColumnName("NON_StaModId");
            entity.Property(e => e.NonStaZalId).HasColumnName("NON_StaZalId");
            entity.Property(e => e.NonTermin)
                .HasColumnType("datetime")
                .HasColumnName("NON_Termin");
            entity.Property(e => e.NonTsMod)
                .HasColumnType("datetime")
                .HasColumnName("NON_TS_Mod");
            entity.Property(e => e.NonTsZal)
                .HasColumnType("datetime")
                .HasColumnName("NON_TS_Zal");
            entity.Property(e => e.NonUwagi)
                .HasMaxLength(254)
                .HasColumnName("NON_Uwagi");
            entity.Property(e => e.NonWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("NON_Waluta");

            entity.HasOne(d => d.NonDdf).WithMany(p => p.NotyOdsNags)
                .HasForeignKey(d => d.NonDdfId)
                .HasConstraintName("FK_NONDokDefinicja");

            entity.HasOne(d => d.NonFpl).WithMany(p => p.NotyOdsNags)
                .HasForeignKey(d => d.NonFplId)
                .HasConstraintName("FK_NONPlatnosc");

            entity.HasOne(d => d.NonKat).WithMany(p => p.NotyOdsNags)
                .HasForeignKey(d => d.NonKatId)
                .HasConstraintName("FK_NONKategoria");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.NotyOdsNags)
                .HasForeignKey(d => new { d.NonPodmiotId, d.NonPodmiotTyp })
                .HasConstraintName("FK_NONPodmiot");
        });

        modelBuilder.Entity<Oatrybuty>(entity =>
        {
            entity.HasKey(e => e.OatOatId)
                .HasName("OAT_Primary")
                .HasFillFactor(100);

            entity.ToTable("OAtrybuty", "CDN", tb => tb.HasTrigger("OAtrybuty_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.OatAtkId, "OATAtkId").HasFillFactor(100);

            entity.HasIndex(e => e.OatPrcId, "OATPrcId").HasFillFactor(100);

            entity.HasIndex(e => new { e.OatPrcId, e.OatAtkId }, "OATPrcIdAtkId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.OatOatId).HasColumnName("OAT_OatId");
            entity.Property(e => e.OatAtkId).HasColumnName("OAT_AtkId");
            entity.Property(e => e.OatImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("OAT_ImportRowId");
            entity.Property(e => e.OatNazwaKlasy)
                .HasMaxLength(41)
                .HasColumnName("OAT_NazwaKlasy");
            entity.Property(e => e.OatOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("OAT_OkresDo");
            entity.Property(e => e.OatOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("OAT_OkresOd");
            entity.Property(e => e.OatOpeModId).HasColumnName("OAT_OpeModId");
            entity.Property(e => e.OatOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OAT_OpeModKod");
            entity.Property(e => e.OatOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OAT_OpeModNazwisko");
            entity.Property(e => e.OatOpeZalId).HasColumnName("OAT_OpeZalId");
            entity.Property(e => e.OatOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OAT_OpeZalKod");
            entity.Property(e => e.OatOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OAT_OpeZalNazwisko");
            entity.Property(e => e.OatPrcId).HasColumnName("OAT_PrcId");
            entity.Property(e => e.OatStaModId).HasColumnName("OAT_StaModId");
            entity.Property(e => e.OatStaZalId).HasColumnName("OAT_StaZalId");
            entity.Property(e => e.OatTsMod)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("OAT_TS_Mod");
            entity.Property(e => e.OatTsZal)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("OAT_TS_Zal");
            entity.Property(e => e.OatWartosc)
                .HasMaxLength(101)
                .HasColumnName("OAT_Wartosc");

            entity.HasOne(d => d.OatAtk).WithMany(p => p.Oatrybuties)
                .HasForeignKey(d => d.OatAtkId)
                .HasConstraintName("FK_OATAtkId");

            entity.HasOne(d => d.OatPrc).WithMany(p => p.Oatrybuties)
                .HasForeignKey(d => d.OatPrcId)
                .HasConstraintName("FK_OATPrcId");
        });

        modelBuilder.Entity<OatrybutyGrupy>(entity =>
        {
            entity.HasKey(e => e.AtgAtgId)
                .HasName("ATG_Primary")
                .HasFillFactor(100);

            entity.ToTable("OAtrybutyGrupy", "CDN");

            entity.HasIndex(e => e.AtgNazwa, "AtgNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AtgAtgId).HasColumnName("ATG_AtgId");
            entity.Property(e => e.AtgNazwa)
                .HasMaxLength(41)
                .HasColumnName("ATG_Nazwa");
        });

        modelBuilder.Entity<OatrybutyGrupyLinki>(entity =>
        {
            entity.HasKey(e => e.AglAglId)
                .HasName("AGL_Primary")
                .HasFillFactor(100);

            entity.ToTable("OAtrybutyGrupyLinki", "CDN");

            entity.HasIndex(e => e.AglAtgId, "AGLAtgId").HasFillFactor(100);

            entity.HasIndex(e => e.AglAtkId, "AGLAtkId").HasFillFactor(100);

            entity.HasIndex(e => new { e.AglAtgId, e.AglAtkId }, "AGLAtkIdAtgId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AglAglId).HasColumnName("AGL_AglId");
            entity.Property(e => e.AglAtgId).HasColumnName("AGL_AtgId");
            entity.Property(e => e.AglAtkId).HasColumnName("AGL_AtkId");
            entity.Property(e => e.AglLp).HasColumnName("AGL_Lp");
            entity.Property(e => e.AglNazwaKlasy)
                .HasMaxLength(41)
                .HasColumnName("AGL_NazwaKlasy");

            entity.HasOne(d => d.AglAtg).WithMany(p => p.OatrybutyGrupyLinkis)
                .HasForeignKey(d => d.AglAtgId)
                .HasConstraintName("FK_AGLAtgId");

            entity.HasOne(d => d.AglAtk).WithMany(p => p.OatrybutyGrupyLinkis)
                .HasForeignKey(d => d.AglAtkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGLAtkId");
        });

        modelBuilder.Entity<OatrybutyHist>(entity =>
        {
            entity.HasKey(e => e.AthAthId)
                .HasName("ATH_Primary")
                .HasFillFactor(100);

            entity.ToTable("OAtrybutyHist", "CDN", tb => tb.HasTrigger("OAtrybutyHist_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.AthOatId, "ATHOatId").HasFillFactor(100);

            entity.Property(e => e.AthAthId).HasColumnName("ATH_AthId");
            entity.Property(e => e.AthAtkId).HasColumnName("ATH_AtkId");
            entity.Property(e => e.AthDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ATH_DataDo");
            entity.Property(e => e.AthDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ATH_DataOd");
            entity.Property(e => e.AthImportRowId)
                .HasMaxLength(36)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATH_ImportRowId");
            entity.Property(e => e.AthOatId).HasColumnName("ATH_OatId");
            entity.Property(e => e.AthPrcId).HasColumnName("ATH_PrcId");
            entity.Property(e => e.AthWartosc)
                .HasMaxLength(101)
                .HasColumnName("ATH_Wartosc");

            entity.HasOne(d => d.AthOat).WithMany(p => p.OatrybutyHists)
                .HasForeignKey(d => d.AthOatId)
                .HasConstraintName("FK_ATHOatId");
        });

        modelBuilder.Entity<OatrybutyKlasy>(entity =>
        {
            entity.HasKey(e => e.AtkAtkId)
                .HasName("ATK_Primary")
                .HasFillFactor(100);

            entity.ToTable("OAtrybutyKlasy", "CDN", tb =>
                {
                    tb.HasTrigger("OAtrybutyKlasy_InsertUpdate_Trigger");
                    tb.HasTrigger("OAtrybutyKlasy_Update_Trigger");
                });

            entity.HasIndex(e => e.AtkNazwa, "AtkNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AtkAtkId).HasColumnName("ATK_AtkId");
            entity.Property(e => e.AtkAutomat).HasColumnName("ATK_Automat");
            entity.Property(e => e.AtkCharSet).HasColumnName("ATK_CharSet");
            entity.Property(e => e.AtkControlling).HasColumnName("ATK_Controlling");
            entity.Property(e => e.AtkDomyslna)
                .HasMaxLength(101)
                .HasColumnName("ATK_Domyslna");
            entity.Property(e => e.AtkDomyslnaApi)
                .HasMaxLength(101)
                .HasColumnName("ATK_DomyslnaApi");
            entity.Property(e => e.AtkDomyslnaApisql)
                .HasMaxLength(2049)
                .HasColumnName("ATK_DomyslnaAPISQL");
            entity.Property(e => e.AtkDomyslnaSql)
                .HasMaxLength(2049)
                .HasColumnName("ATK_DomyslnaSQL");
            entity.Property(e => e.AtkFormat)
                .HasMaxLength(21)
                .HasColumnName("ATK_Format");
            entity.Property(e => e.AtkHistoria).HasColumnName("ATK_Historia");
            entity.Property(e => e.AtkImportRowId)
                .HasMaxLength(36)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATK_ImportRowId");
            entity.Property(e => e.AtkMaska)
                .HasMaxLength(20)
                .HasColumnName("ATK_Maska");
            entity.Property(e => e.AtkNazwa)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("ATK_Nazwa");
            entity.Property(e => e.AtkNieaktywny).HasColumnName("ATK_Nieaktywny");
            entity.Property(e => e.AtkOpis)
                .HasMaxLength(256)
                .HasColumnName("ATK_Opis");
            entity.Property(e => e.AtkSql)
                .HasMaxLength(2049)
                .HasColumnName("ATK_SQL");
            entity.Property(e => e.AtkSynchronizowanyAltum).HasColumnName("ATK_SynchronizowanyAltum");
            entity.Property(e => e.AtkSynchronizowanyXl)
                .HasDefaultValue((byte)1)
                .HasColumnName("ATK_SynchronizowanyXL");
            entity.Property(e => e.AtkTyp).HasColumnName("ATK_Typ");
            entity.Property(e => e.AtkTypDom).HasColumnName("ATK_TypDom");
            entity.Property(e => e.AtkTypDomApi).HasColumnName("ATK_TypDomApi");
            entity.Property(e => e.AtkWymagany).HasColumnName("ATK_Wymagany");
            entity.Property(e => e.AtkZamknieta).HasColumnName("ATK_Zamknieta");
            entity.Property(e => e.AtkZlisty).HasColumnName("ATK_ZListy");
        });

        modelBuilder.Entity<OatrybutyKlasyElem>(entity =>
        {
            entity.HasKey(e => e.AkeAkeId)
                .HasName("AKE_Primary")
                .HasFillFactor(100);

            entity.ToTable("OAtrybutyKlasyElem", "CDN", tb => tb.HasTrigger("OAtrybutyKlasyElem_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.AkeAtkId, "AKEAtkId").HasFillFactor(100);

            entity.HasIndex(e => new { e.AkeAtkId, e.AkeWartosc }, "AKEWartosc")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.AkeAkeId).HasColumnName("AKE_AkeId");
            entity.Property(e => e.AkeAtkId).HasColumnName("AKE_AtkId");
            entity.Property(e => e.AkeImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("AKE_ImportRowId");
            entity.Property(e => e.AkeWartosc)
                .HasMaxLength(101)
                .HasColumnName("AKE_Wartosc");

            entity.HasOne(d => d.AkeAtk).WithMany(p => p.OatrybutyKlasyElems)
                .HasForeignKey(d => d.AkeAtkId)
                .HasConstraintName("FK_AKEAtkId");
        });

        modelBuilder.Entity<Obroty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Obroty", "CDN", tb => tb.HasTrigger("Obroty_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.ObrTyp, e.ObrRokMies, e.ObrAccId }, "ObrData")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.ObrAccId, e.ObrTyp, e.ObrRokMies }, "ObrKonto")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ObrAccId).HasColumnName("Obr_AccId");
            entity.Property(e => e.ObrObrotyMa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyMa");
            entity.Property(e => e.ObrObrotyMaBufor)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyMaBufor");
            entity.Property(e => e.ObrObrotyMaBuforWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyMaBuforWal");
            entity.Property(e => e.ObrObrotyMaWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyMaWal");
            entity.Property(e => e.ObrObrotyWn)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyWn");
            entity.Property(e => e.ObrObrotyWnBufor)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyWnBufor");
            entity.Property(e => e.ObrObrotyWnBuforWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyWnBuforWal");
            entity.Property(e => e.ObrObrotyWnWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Obr_ObrotyWnWal");
            entity.Property(e => e.ObrRokMies).HasColumnName("Obr_RokMies");
            entity.Property(e => e.ObrTyp).HasColumnName("Obr_Typ");

            entity.HasOne(d => d.ObrAcc).WithMany()
                .HasForeignKey(d => d.ObrAccId)
                .HasConstraintName("FK_ObrKonto");
        });

        modelBuilder.Entity<OfertyDok>(entity =>
        {
            entity.HasKey(e => e.OfDOfDid)
                .HasName("OfD_Primary")
                .HasFillFactor(100);

            entity.ToTable("OfertyDok", "CDN", tb =>
                {
                    tb.HasTrigger("Ofer_Delete_Trigger");
                    tb.HasTrigger("Ofer_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.OfDDataDok, e.OfDNumerPelny, e.OfDAnulowany }, "OfDData")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.OfDDdfId, "OfDDokDefinicje").HasFillFactor(100);

            entity.HasIndex(e => new { e.OfDKntId, e.OfDDataDok, e.OfDOfDid }, "OfDKontrahent")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.OfDNumerString, e.OfDNumerNr, e.OfDAnulowany }, "OfDNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.OfDOfDid).HasColumnName("OfD_OfDId");
            entity.Property(e => e.OfDAnulowany).HasColumnName("OfD_Anulowany");
            entity.Property(e => e.OfDBody).HasColumnName("OfD_Body");
            entity.Property(e => e.OfDBufor).HasColumnName("OfD_Bufor");
            entity.Property(e => e.OfDDataDo)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("OfD_DataDo");
            entity.Property(e => e.OfDDataDok)
                .HasColumnType("datetime")
                .HasColumnName("OfD_DataDok");
            entity.Property(e => e.OfDDataKur)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("OfD_DataKur");
            entity.Property(e => e.OfDDataOd)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("OfD_DataOd");
            entity.Property(e => e.OfDDdfId).HasColumnName("OfD_DDfId");
            entity.Property(e => e.OfDGrupaCenowa).HasColumnName("OfD_GrupaCenowa");
            entity.Property(e => e.OfDKntId).HasColumnName("OfD_KntId");
            entity.Property(e => e.OfDKopiaEl).HasColumnName("OfD_KopiaEl");
            entity.Property(e => e.OfDKursL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OfD_KursL");
            entity.Property(e => e.OfDKursM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("OfD_KursM");
            entity.Property(e => e.OfDKursNumer).HasColumnName("OfD_KursNumer");
            entity.Property(e => e.OfDNazwa)
                .HasMaxLength(255)
                .HasColumnName("OfD_Nazwa");
            entity.Property(e => e.OfDNazwaSzablonu)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OfD_NazwaSzablonu");
            entity.Property(e => e.OfDNumerNr).HasColumnName("OfD_NumerNr");
            entity.Property(e => e.OfDNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([OFD_NUMERNR],[OFD_NUMERSTRING]))", false)
                .HasColumnName("OfD_NumerPelny");
            entity.Property(e => e.OfDNumerString)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OfD_NumerString");
            entity.Property(e => e.OfDOpeModId).HasColumnName("OfD_OpeModId");
            entity.Property(e => e.OfDOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfD_OpeModKod");
            entity.Property(e => e.OfDOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OfD_OpeModNazwisko");
            entity.Property(e => e.OfDOpeZalId).HasColumnName("OfD_OpeZalId");
            entity.Property(e => e.OfDOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfD_OpeZalKod");
            entity.Property(e => e.OfDOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OfD_OpeZalNazwisko");
            entity.Property(e => e.OfDOpis)
                .HasMaxLength(1024)
                .HasColumnName("OfD_Opis");
            entity.Property(e => e.OfDPodpisCyfrowy).HasColumnName("OfD_PodpisCyfrowy");
            entity.Property(e => e.OfDRabat)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("OfD_Rabat");
            entity.Property(e => e.OfDRodzajCeny).HasColumnName("OfD_RodzajCeny");
            entity.Property(e => e.OfDStaModId).HasColumnName("OfD_StaModId");
            entity.Property(e => e.OfDStaZalId).HasColumnName("OfD_StaZalId");
            entity.Property(e => e.OfDStatusId).HasColumnName("OfD_StatusId");
            entity.Property(e => e.OfDStatusOpis)
                .HasMaxLength(254)
                .HasColumnName("OfD_StatusOpis");
            entity.Property(e => e.OfDTrNid).HasColumnName("OfD_TrNId");
            entity.Property(e => e.OfDTsMod)
                .HasColumnType("datetime")
                .HasColumnName("OfD_TS_Mod");
            entity.Property(e => e.OfDTsZal)
                .HasColumnType("datetime")
                .HasColumnName("OfD_TS_Zal");
            entity.Property(e => e.OfDTypDokumentu).HasColumnName("OfD_TypDokumentu");
            entity.Property(e => e.OfDTypNb).HasColumnName("OfD_TypNB");
            entity.Property(e => e.OfDWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfD_Waluta");

            entity.HasOne(d => d.OfDDdf).WithMany(p => p.OfertyDoks)
                .HasForeignKey(d => d.OfDDdfId)
                .HasConstraintName("FK_OfDDokDefinicje");

            entity.HasOne(d => d.OfDKnt).WithMany(p => p.OfertyDoks)
                .HasForeignKey(d => d.OfDKntId)
                .HasConstraintName("FK_OfDKontrahent");
        });

        modelBuilder.Entity<OfertyElem>(entity =>
        {
            entity.HasKey(e => e.OfLOfLid)
                .HasName("OfL_Primary")
                .HasFillFactor(100);

            entity.ToTable("OfertyElem", "CDN", tb =>
                {
                    tb.HasTrigger("OfertyElem_Delete_Trigger");
                    tb.HasTrigger("OfertyElem_Insert_Trigger");
                });

            entity.HasIndex(e => e.OfLOfDid, "OfertyElemOfDId").HasFillFactor(100);

            entity.Property(e => e.OfLOfLid).HasColumnName("OfL_OfLId");
            entity.Property(e => e.OfCCena0)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_Cena0");
            entity.Property(e => e.OfCCena0Wd)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_Cena0WD");
            entity.Property(e => e.OfCCenaT)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_CenaT");
            entity.Property(e => e.OfCCenaW)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_CenaW");
            entity.Property(e => e.OfCCenaWwd)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_CenaWWD");
            entity.Property(e => e.OfCFlaga).HasColumnName("OfC_Flaga");
            entity.Property(e => e.OfCIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OfC_Ilosc");
            entity.Property(e => e.OfCIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OfC_IloscJM");
            entity.Property(e => e.OfCJm)
                .HasMaxLength(20)
                .HasColumnName("OfC_Jm");
            entity.Property(e => e.OfCJmCalkowite).HasColumnName("OfC_JmCalkowite");
            entity.Property(e => e.OfCJmZ)
                .HasMaxLength(20)
                .HasColumnName("OfC_JmZ");
            entity.Property(e => e.OfCJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_JMPrzelicznikL");
            entity.Property(e => e.OfCJmprzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("OfC_JMPrzelicznikM");
            entity.Property(e => e.OfCKntId).HasColumnName("OfC_KntId");
            entity.Property(e => e.OfCKosztKgo)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_KosztKGO");
            entity.Property(e => e.OfCKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OfC_KursL");
            entity.Property(e => e.OfCKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("OfC_KursM");
            entity.Property(e => e.OfCKursNumer).HasColumnName("OfC_KursNumer");
            entity.Property(e => e.OfCRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OfC_Rabat");
            entity.Property(e => e.OfCStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OfC_Stawka");
            entity.Property(e => e.OfCTwrId).HasColumnName("OfC_TwrId");
            entity.Property(e => e.OfCTypNb).HasColumnName("OfC_TypNB");
            entity.Property(e => e.OfCWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("OfC_Waluta");
            entity.Property(e => e.OfCWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscBrutto");
            entity.Property(e => e.OfCWartoscBruttoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscBruttoWal");
            entity.Property(e => e.OfCWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscNetto");
            entity.Property(e => e.OfCWartoscNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscNettoWal");
            entity.Property(e => e.OfLAtr1DeAid).HasColumnName("OfL_Atr1_DeAId");
            entity.Property(e => e.OfLAtr1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr1_Kod");
            entity.Property(e => e.OfLAtr1Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr1_Wartosc");
            entity.Property(e => e.OfLAtr2DeAid).HasColumnName("OfL_Atr2_DeAId");
            entity.Property(e => e.OfLAtr2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr2_Kod");
            entity.Property(e => e.OfLAtr2Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr2_Wartosc");
            entity.Property(e => e.OfLAtr3DeAid).HasColumnName("OfL_Atr3_DeAId");
            entity.Property(e => e.OfLAtr3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr3_Kod");
            entity.Property(e => e.OfLAtr3Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr3_Wartosc");
            entity.Property(e => e.OfLAtr4DeAid).HasColumnName("OfL_Atr4_DeAId");
            entity.Property(e => e.OfLAtr4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr4_Kod");
            entity.Property(e => e.OfLAtr4Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr4_Wartosc");
            entity.Property(e => e.OfLAtr5DeAid).HasColumnName("OfL_Atr5_DeAId");
            entity.Property(e => e.OfLAtr5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr5_Kod");
            entity.Property(e => e.OfLAtr5Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("OfL_Atr5_Wartosc");
            entity.Property(e => e.OfLAtrUtworzony).HasColumnName("OfL_AtrUtworzony");
            entity.Property(e => e.OfLCenyKontrahenta).HasColumnName("OfL_CenyKontrahenta");
            entity.Property(e => e.OfLLp).HasColumnName("OfL_Lp");
            entity.Property(e => e.OfLOfDid).HasColumnName("OfL_OfDId");
            entity.Property(e => e.OfLTwrId).HasColumnName("OfL_TwrId");
            entity.Property(e => e.OfLTwrKod)
                .HasMaxLength(50)
                .HasColumnName("OfL_TwrKod");
            entity.Property(e => e.OfLTwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("OfL_TwrNazwa");
            entity.Property(e => e.OfLTwrOpis)
                .HasMaxLength(1024)
                .HasColumnName("OfL_TwrOpis");
            entity.Property(e => e.OfcCenaZczteremaMiejscami).HasColumnName("OFC_CenaZCzteremaMiejscami");

            entity.HasOne(d => d.OfLOfD).WithMany(p => p.OfertyElems)
                .HasForeignKey(d => d.OfLOfDid)
                .HasConstraintName("FK_OfLOfertyDok");
        });

        modelBuilder.Entity<OfertyElemCeny>(entity =>
        {
            entity.HasKey(e => e.OfCOfCid)
                .HasName("OfC_Primary")
                .HasFillFactor(100);

            entity.ToTable("OfertyElemCeny", "CDN");

            entity.Property(e => e.OfCOfCid).HasColumnName("OfC_OfCId");
            entity.Property(e => e.OfCCena0)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_Cena0");
            entity.Property(e => e.OfCCena0Wd)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_Cena0WD");
            entity.Property(e => e.OfCCenaT)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_CenaT");
            entity.Property(e => e.OfCCenaW)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_CenaW");
            entity.Property(e => e.OfCCenaWwd)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("OfC_CenaWWD");
            entity.Property(e => e.OfCFlaga).HasColumnName("OfC_Flaga");
            entity.Property(e => e.OfCIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OfC_Ilosc");
            entity.Property(e => e.OfCIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OfC_IloscJM");
            entity.Property(e => e.OfCJm)
                .HasMaxLength(20)
                .HasColumnName("OfC_Jm");
            entity.Property(e => e.OfCJmCalkowite).HasColumnName("OfC_JmCalkowite");
            entity.Property(e => e.OfCJmZ)
                .HasMaxLength(20)
                .HasColumnName("OfC_JmZ");
            entity.Property(e => e.OfCJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_JMPrzelicznikL");
            entity.Property(e => e.OfCJmprzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("OfC_JMPrzelicznikM");
            entity.Property(e => e.OfCKntId).HasColumnName("OfC_KntId");
            entity.Property(e => e.OfCKosztKgo)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_KosztKGO");
            entity.Property(e => e.OfCKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OfC_KursL");
            entity.Property(e => e.OfCKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("OfC_KursM");
            entity.Property(e => e.OfCKursNumer).HasColumnName("OfC_KursNumer");
            entity.Property(e => e.OfCOfLid).HasColumnName("OfC_OfLId");
            entity.Property(e => e.OfCRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OfC_Rabat");
            entity.Property(e => e.OfCStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OfC_Stawka");
            entity.Property(e => e.OfCTwrId).HasColumnName("OfC_TwrId");
            entity.Property(e => e.OfCTypNb).HasColumnName("OfC_TypNB");
            entity.Property(e => e.OfCWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("OfC_Waluta");
            entity.Property(e => e.OfCWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscBrutto");
            entity.Property(e => e.OfCWartoscBruttoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscBruttoWal");
            entity.Property(e => e.OfCWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscNetto");
            entity.Property(e => e.OfCWartoscNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OfC_WartoscNettoWal");
            entity.Property(e => e.OfcCenaZczteremaMiejscami).HasColumnName("OFC_CenaZCzteremaMiejscami");

            entity.HasOne(d => d.OfCOfL).WithMany(p => p.OfertyElemCenies)
                .HasForeignKey(d => d.OfCOfLid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OfCOfertyElem");
        });

        modelBuilder.Entity<OfertyKnt>(entity =>
        {
            entity.HasKey(e => e.OfKOfKid)
                .HasName("OfK_Primary")
                .HasFillFactor(100);

            entity.ToTable("OfertyKnt", "CDN", tb => tb.HasTrigger("OfertyKnt_Delete_Trigger"));

            entity.Property(e => e.OfKOfKid).HasColumnName("OfK_OfKId");
            entity.Property(e => e.OfKKnOKnOid).HasColumnName("OfK_KnO_KnOId");
            entity.Property(e => e.OfKKod)
                .HasMaxLength(20)
                .HasColumnName("OfK_Kod");
            entity.Property(e => e.OfKLp).HasColumnName("OfK_Lp");
            entity.Property(e => e.OfKOfDid).HasColumnName("OfK_OfDId");
            entity.Property(e => e.OfKPodAdres2)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodAdres2");
            entity.Property(e => e.OfKPodEmail)
                .HasMaxLength(127)
                .HasColumnName("OfK_PodEmail");
            entity.Property(e => e.OfKPodGmina)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodGmina");
            entity.Property(e => e.OfKPodId).HasColumnName("OfK_PodID");
            entity.Property(e => e.OfKPodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OfK_PodKodPocztowy");
            entity.Property(e => e.OfKPodKraj)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodKraj");
            entity.Property(e => e.OfKPodMiasto)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodMiasto");
            entity.Property(e => e.OfKPodNazwa1)
                .HasMaxLength(50)
                .HasColumnName("OfK_PodNazwa1");
            entity.Property(e => e.OfKPodNazwa2)
                .HasMaxLength(50)
                .HasColumnName("OfK_PodNazwa2");
            entity.Property(e => e.OfKPodNazwa3)
                .HasMaxLength(250)
                .HasColumnName("OfK_PodNazwa3");
            entity.Property(e => e.OfKPodNipE)
                .HasMaxLength(20)
                .HasColumnName("OfK_PodNipE");
            entity.Property(e => e.OfKPodNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("OfK_PodNipKraj");
            entity.Property(e => e.OfKPodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("OfK_PodNrDomu");
            entity.Property(e => e.OfKPodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("OfK_PodNrLokalu");
            entity.Property(e => e.OfKPodPoczta)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodPoczta");
            entity.Property(e => e.OfKPodPowiat)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodPowiat");
            entity.Property(e => e.OfKPodUlica)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodUlica");
            entity.Property(e => e.OfKPodWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("OfK_PodWojewodztwo");
            entity.Property(e => e.OfKPodmiotGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("OfK_PodmiotGLN");
            entity.Property(e => e.OfKPodmiotTyp).HasColumnName("OfK_PodmiotTyp");

            entity.HasOne(d => d.OfKOfD).WithMany(p => p.OfertyKnts)
                .HasForeignKey(d => d.OfKOfDid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OfKOfertyDok");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.OfertyKnts)
                .HasForeignKey(d => new { d.OfKPodId, d.OfKPodmiotTyp })
                .HasConstraintName("FK_OfKPodmiot");
        });

        modelBuilder.Entity<OkresoweElem>(entity =>
        {
            entity.HasKey(e => e.OkEOkEid)
                .HasName("OkE_Primary")
                .HasFillFactor(100);

            entity.ToTable("OkresoweElem", "CDN");

            entity.HasIndex(e => e.OkEKatId, "OkEKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.OkEOkNid, e.OkELp, e.OkEOkEid }, "OkENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.OkEOkEid).HasColumnName("OkE_OkEId");
            entity.Property(e => e.OkEDataDo)
                .HasColumnType("datetime")
                .HasColumnName("OkE_DataDo");
            entity.Property(e => e.OkEDataOd)
                .HasColumnType("datetime")
                .HasColumnName("OkE_DataOd");
            entity.Property(e => e.OkEDokument)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OkE_Dokument");
            entity.Property(e => e.OkEHarmonogram).HasColumnName("OkE_Harmonogram");
            entity.Property(e => e.OkEKatId).HasColumnName("OkE_KatId");
            entity.Property(e => e.OkEKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OkE_Kategoria");
            entity.Property(e => e.OkEKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OkE_KontoMa");
            entity.Property(e => e.OkEKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OkE_KontoWn");
            entity.Property(e => e.OkEKwota)
                .HasMaxLength(2000)
                .HasColumnName("OkE_Kwota");
            entity.Property(e => e.OkEKwotaWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OkE_KwotaWartosc");
            entity.Property(e => e.OkELp).HasColumnName("OkE_Lp");
            entity.Property(e => e.OkEOkNid).HasColumnName("OkE_OkNId");
            entity.Property(e => e.OkERozrachunki).HasColumnName("OkE_Rozrachunki");
            entity.Property(e => e.OkEUwagi)
                .HasMaxLength(1024)
                .HasColumnName("OkE_Uwagi");
            entity.Property(e => e.OkEWarunek)
                .HasMaxLength(1000)
                .HasColumnName("OkE_Warunek");
            entity.Property(e => e.OkEZakresDat).HasColumnName("OkE_ZakresDat");

            entity.HasOne(d => d.OkEKat).WithMany(p => p.OkresoweElems)
                .HasForeignKey(d => d.OkEKatId)
                .HasConstraintName("FK_OkEKategoria");

            entity.HasOne(d => d.OkEOkN).WithMany(p => p.OkresoweElems)
                .HasForeignKey(d => d.OkEOkNid)
                .HasConstraintName("FK_OkENaglowek");
        });

        modelBuilder.Entity<OkresoweHarmonogram>(entity =>
        {
            entity.HasKey(e => e.OkHOkHid)
                .HasName("OkH_Primary")
                .HasFillFactor(100);

            entity.ToTable("OkresoweHarmonogram", "CDN");

            entity.Property(e => e.OkHOkHid).HasColumnName("OkH_OkHId");
            entity.Property(e => e.OkHData)
                .HasColumnType("datetime")
                .HasColumnName("OkH_Data");
            entity.Property(e => e.OkHKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OkH_Kwota");
            entity.Property(e => e.OkHOkEid).HasColumnName("OkH_OkEId");

            entity.HasOne(d => d.OkHOkE).WithMany(p => p.OkresoweHarmonograms)
                .HasForeignKey(d => d.OkHOkEid)
                .HasConstraintName("FK_OkHElement");
        });

        modelBuilder.Entity<OkresoweNag>(entity =>
        {
            entity.HasKey(e => e.OkNOkNid)
                .HasName("OkN_Primary")
                .HasFillFactor(100);

            entity.ToTable("OkresoweNag", "CDN", tb => tb.HasTrigger("OkresoweNag_DeleteHandler"));

            entity.HasIndex(e => e.OkNKatId, "OkNKategoria").HasFillFactor(100);

            entity.HasIndex(e => e.OkNNieAktywny, "OkNNieAktywany").HasFillFactor(100);

            entity.HasIndex(e => e.OkNSymbol, "OkNSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.OkNOkNid).HasColumnName("OkN_OkNId");
            entity.Property(e => e.OkNBufor).HasColumnName("OkN_Bufor");
            entity.Property(e => e.OkNDataDo)
                .HasColumnType("datetime")
                .HasColumnName("OkN_DataDo");
            entity.Property(e => e.OkNDataOd)
                .HasColumnType("datetime")
                .HasColumnName("OkN_DataOd");
            entity.Property(e => e.OkNDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("OkN_Dokument");
            entity.Property(e => e.OkNDziennik)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OkN_Dziennik");
            entity.Property(e => e.OkNHarmonogram).HasColumnName("OkN_Harmonogram");
            entity.Property(e => e.OkNKatId).HasColumnName("OkN_KatId");
            entity.Property(e => e.OkNKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OkN_Kategoria");
            entity.Property(e => e.OkNNazwa)
                .HasMaxLength(50)
                .HasColumnName("OkN_Nazwa");
            entity.Property(e => e.OkNNieAktywny).HasColumnName("OkN_NieAktywny");
            entity.Property(e => e.OkNOpeModId).HasColumnName("OkN_OpeModID");
            entity.Property(e => e.OkNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OkN_OpeModKod");
            entity.Property(e => e.OkNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OkN_OpeModNazwisko");
            entity.Property(e => e.OkNOpeZalId).HasColumnName("OkN_OpeZalID");
            entity.Property(e => e.OkNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OkN_OpeZalKod");
            entity.Property(e => e.OkNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OkN_OpeZalNazwisko");
            entity.Property(e => e.OkNStaModId).HasColumnName("OkN_StaModId");
            entity.Property(e => e.OkNStaZalId).HasColumnName("OkN_StaZalId");
            entity.Property(e => e.OkNSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OkN_Symbol");
            entity.Property(e => e.OkNTsKsi)
                .HasColumnType("datetime")
                .HasColumnName("OkN_TS_Ksi");
            entity.Property(e => e.OkNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("OkN_TS_Mod");
            entity.Property(e => e.OkNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("OkN_TS_Zal");
            entity.Property(e => e.OkNUwagi)
                .HasMaxLength(255)
                .HasColumnName("OkN_Uwagi");
            entity.Property(e => e.OkNWarunek)
                .HasMaxLength(1000)
                .HasColumnName("OkN_Warunek");
            entity.Property(e => e.OkNZakresDat).HasColumnName("OkN_ZakresDat");

            entity.HasOne(d => d.OkNKat).WithMany(p => p.OkresoweNags)
                .HasForeignKey(d => d.OkNKatId)
                .HasConstraintName("FK_OkNKategoria");
        });

        modelBuilder.Entity<OkresyObrach>(entity =>
        {
            entity.HasKey(e => e.OobOobId)
                .HasName("OOb_Primary")
                .HasFillFactor(100);

            entity.ToTable("OkresyObrach", "CDN", tb =>
                {
                    tb.HasTrigger("OkresyObrach_Delete_Trigger");
                    tb.HasTrigger("OkresyObrach_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.OobDataOtw, "OObData")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.OobSymbol, "OObSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.OobOobId).HasColumnName("OOb_OObID");
            entity.Property(e => e.OobCiaglaNumeracjaDc).HasColumnName("OOb_CiaglaNumeracjaDC");
            entity.Property(e => e.OobDataKoncowa)
                .HasColumnType("datetime")
                .HasColumnName("OOb_DataKoncowa");
            entity.Property(e => e.OobDataKsiKomp)
                .HasDefaultValue((short)1)
                .HasColumnName("OOb_DataKsiKomp");
            entity.Property(e => e.OobDataKsiRk)
                .HasDefaultValue((short)1)
                .HasColumnName("OOb_DataKsiRk");
            entity.Property(e => e.OobDataOtw)
                .HasColumnType("datetime")
                .HasColumnName("OOb_DataOtw");
            entity.Property(e => e.OobDataZam)
                .HasColumnType("datetime")
                .HasColumnName("OOb_DataZam");
            entity.Property(e => e.OobDlugosc).HasColumnName("OOb_Dlugosc");
            entity.Property(e => e.OobDziIdKomp).HasColumnName("OOb_DziIdKomp");
            entity.Property(e => e.OobDziIdRk).HasColumnName("OOb_DziIdRK");
            entity.Property(e => e.OobOpeModId).HasColumnName("OOb_OpeModID");
            entity.Property(e => e.OobOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OOb_OpeModKod");
            entity.Property(e => e.OobOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OOb_OpeModNazwisko");
            entity.Property(e => e.OobOpeZalId).HasColumnName("OOb_OpeZalID");
            entity.Property(e => e.OobOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OOb_OpeZalKod");
            entity.Property(e => e.OobOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("OOb_OpeZalNazwisko");
            entity.Property(e => e.OobOpis)
                .HasMaxLength(254)
                .HasColumnName("OOb_Opis");
            entity.Property(e => e.OobStaModId).HasColumnName("OOb_StaModId");
            entity.Property(e => e.OobStaZalId).HasColumnName("OOb_StaZalId");
            entity.Property(e => e.OobStan).HasColumnName("OOb_Stan");
            entity.Property(e => e.OobSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OOb_Symbol");
            entity.Property(e => e.OobTsMod)
                .HasColumnType("datetime")
                .HasColumnName("OOb_TS_Mod");
            entity.Property(e => e.OobTsZal)
                .HasColumnType("datetime")
                .HasColumnName("OOb_TS_Zal");
            entity.Property(e => e.OobZaliczkiUproszczone).HasColumnName("OOb_ZaliczkiUproszczone");
        });

        modelBuilder.Entity<OperatorzyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("OperatorzyView", "CDN");

            entity.Property(e => e.OpeKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OPE_Kod");
            entity.Property(e => e.OpeNazwisko)
                .HasMaxLength(50)
                .HasColumnName("OPE_Nazwisko");
            entity.Property(e => e.OpeNieaktywny).HasColumnName("Ope_Nieaktywny");
            entity.Property(e => e.OpeOpeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("OPE_OpeID");
        });

        modelBuilder.Entity<OpisKadry>(entity =>
        {
            entity.HasKey(e => e.OpkOpkId)
                .HasName("OPK_Primary")
                .HasFillFactor(100);

            entity.ToTable("OpisKadry", "CDN");

            entity.HasIndex(e => e.OpkDzlId, "OPKDzlId").HasFillFactor(100);

            entity.HasIndex(e => e.OpkPraId, "OPKPraLink").HasFillFactor(100);

            entity.HasIndex(e => e.OpkPrjId, "OPKPrjLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.OpkRodzajZrodla, e.OpkZrodloId, e.OpkDzlId, e.OpkPrjId }, "OPKUnikalny")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.OpkOpkId).HasColumnName("OPK_OpkId");
            entity.Property(e => e.OpkDzlId).HasColumnName("OPK_DzlId");
            entity.Property(e => e.OpkPraId).HasColumnName("OPK_PraId");
            entity.Property(e => e.OpkPrjId).HasColumnName("OPK_PrjId");
            entity.Property(e => e.OpkProcent)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OPK_Procent");
            entity.Property(e => e.OpkRodzajZrodla).HasColumnName("OPK_RodzajZrodla");
            entity.Property(e => e.OpkZrodloId).HasColumnName("OPK_ZrodloId");

            entity.HasOne(d => d.OpkDzl).WithMany(p => p.OpisKadries)
                .HasForeignKey(d => d.OpkDzlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPKDzlId");

            entity.HasOne(d => d.OpkPra).WithMany(p => p.OpisKadries)
                .HasForeignKey(d => d.OpkPraId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OPKPraLink");
        });

        modelBuilder.Entity<OpisPlace>(entity =>
        {
            entity.HasKey(e => e.OppOppId)
                .HasName("OPP_Primary")
                .HasFillFactor(100);

            entity.ToTable("OpisPlace", "CDN");

            entity.HasIndex(e => e.OppDzlId, "OPPDzlId").HasFillFactor(100);

            entity.HasIndex(e => new { e.OppWpeId, e.OppDzlId, e.OppPrjId }, "OPPPozycja")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.OppPraId, "OPPPraLink").HasFillFactor(100);

            entity.HasIndex(e => e.OppPrjId, "OPPPrjLink").HasFillFactor(100);

            entity.HasIndex(e => e.OppWpeId, "OPPWpeId").HasFillFactor(100);

            entity.Property(e => e.OppOppId).HasColumnName("OPP_OppId");
            entity.Property(e => e.OppBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_Brutto");
            entity.Property(e => e.OppDzlId).HasColumnName("OPP_DzlId");
            entity.Property(e => e.OppPpkf)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_PPKF");
            entity.Property(e => e.OppPpkp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_PPKP");
            entity.Property(e => e.OppPraId).HasColumnName("OPP_PraId");
            entity.Property(e => e.OppPrjId).HasColumnName("OPP_PrjId");
            entity.Property(e => e.OppProcent)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OPP_Procent");
            entity.Property(e => e.OppSklChorFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklChorFirma");
            entity.Property(e => e.OppSklChorPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklChorPrac");
            entity.Property(e => e.OppSklEmerFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklEmerFirma");
            entity.Property(e => e.OppSklEmerPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklEmerPrac");
            entity.Property(e => e.OppSklFep)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklFEP");
            entity.Property(e => e.OppSklFgsp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklFGSP");
            entity.Property(e => e.OppSklFp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklFP");
            entity.Property(e => e.OppSklRentFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklRentFirma");
            entity.Property(e => e.OppSklRentPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklRentPrac");
            entity.Property(e => e.OppSklWypadFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklWypadFirma");
            entity.Property(e => e.OppSklWypadPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_SklWypadPrac");
            entity.Property(e => e.OppWpeId).HasColumnName("OPP_WpeId");
            entity.Property(e => e.OppZalFis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_ZalFIS");
            entity.Property(e => e.OppZdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_Zdrow");
            entity.Property(e => e.OppZusf)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_ZUSF");
            entity.Property(e => e.OppZusp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_ZUSP");

            entity.HasOne(d => d.OppDzl).WithMany(p => p.OpisPlaces)
                .HasForeignKey(d => d.OppDzlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPPDzlId");

            entity.HasOne(d => d.OppPra).WithMany(p => p.OpisPlaces)
                .HasForeignKey(d => d.OppPraId)
                .HasConstraintName("FK_OPPPraLink");

            entity.HasOne(d => d.OppWpe).WithMany(p => p.OpisPlaces)
                .HasForeignKey(d => d.OppWpeId)
                .HasConstraintName("FK_OPPWpeId");
        });

        modelBuilder.Entity<OpisyDniWolne>(entity =>
        {
            entity.HasKey(e => e.OdwOdwId)
                .HasName("ODW_Primary")
                .HasFillFactor(100);

            entity.ToTable("OpisyDniWolne", "CDN", tb =>
                {
                    tb.HasTrigger("OpisyDniWolne_Delete_Trigger");
                    tb.HasTrigger("OpisyDniWolne_InsertUpdate_Trigger");
                    tb.HasTrigger("OpisyDniWolne_Update_Trigger");
                });

            entity.HasIndex(e => e.OdwNazwa, "ODWNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.OdwSymbol, "ODWSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.OdwOdwId).HasColumnName("ODW_OdwId");
            entity.Property(e => e.OdwImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ODW_ImportRowId");
            entity.Property(e => e.OdwNazwa)
                .HasMaxLength(45)
                .HasDefaultValue("")
                .HasColumnName("ODW_Nazwa");
            entity.Property(e => e.OdwNieaktywny).HasColumnName("ODW_Nieaktywny");
            entity.Property(e => e.OdwOpeModId).HasColumnName("ODW_OpeModId");
            entity.Property(e => e.OdwOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ODW_OpeModKod");
            entity.Property(e => e.OdwOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ODW_OpeModNazwisko");
            entity.Property(e => e.OdwOpeZalId).HasColumnName("ODW_OpeZalId");
            entity.Property(e => e.OdwOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ODW_OpeZalKod");
            entity.Property(e => e.OdwOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ODW_OpeZalNazwisko");
            entity.Property(e => e.OdwStaModId).HasColumnName("ODW_StaModId");
            entity.Property(e => e.OdwStaZalId).HasColumnName("ODW_StaZalId");
            entity.Property(e => e.OdwStandardowy).HasColumnName("ODW_Standardowy");
            entity.Property(e => e.OdwSymbol)
                .HasMaxLength(2)
                .HasDefaultValue("")
                .HasColumnName("ODW_Symbol");
            entity.Property(e => e.OdwTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ODW_TS_Mod");
            entity.Property(e => e.OdwTsZal)
                .HasColumnType("datetime")
                .HasColumnName("ODW_TS_Zal");
        });

        modelBuilder.Entity<PaczkiPrzelewowAkceptacje>(entity =>
        {
            entity.HasKey(e => e.PcPaPcPaid)
                .HasName("PcPA_Primary")
                .HasFillFactor(100);

            entity.ToTable("PaczkiPrzelewowAkceptacje", "CDN");

            entity.HasIndex(e => new { e.PcPaPcPnid, e.PcPaData, e.PcPaOpeId }, "PcPAWgNagDataOpe")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PcPaPcPnid, e.PcPaOpeId }, "PcPAWgNagOpe")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PcPaPcPaid).HasColumnName("PcPA_PcPAID");
            entity.Property(e => e.PcPaData)
                .HasColumnType("datetime")
                .HasColumnName("PcPA_Data");
            entity.Property(e => e.PcPaDodatkowe)
                .HasMaxLength(256)
                .HasColumnName("PcPA_Dodatkowe");
            entity.Property(e => e.PcPaOpeId).HasColumnName("PcPA_OpeID");
            entity.Property(e => e.PcPaPcPnid).HasColumnName("PcPA_PcPNID");
            entity.Property(e => e.PcPaTypAkceptacji)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcPA_TypAkceptacji");

            entity.HasOne(d => d.PcPaPcPn).WithMany(p => p.PaczkiPrzelewowAkceptacjes)
                .HasForeignKey(d => d.PcPaPcPnid)
                .HasConstraintName("FK_PcPANaglowek");
        });

        modelBuilder.Entity<PaczkiPrzelewowElem>(entity =>
        {
            entity.HasKey(e => e.PcPePcPeid)
                .HasName("PcPE_Primary")
                .HasFillFactor(100);

            entity.ToTable("PaczkiPrzelewowElem", "CDN");

            entity.HasIndex(e => new { e.PcPePcPnid, e.PcPePcPeid }, "PcPEWgNaglowka")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PcPeBzdId, "PcPEWgZdarzeniaKB")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PcPePcPeid).HasColumnName("PcPE_PcPEID");
            entity.Property(e => e.PcPeBzdId).HasColumnName("PcPE_BZdID");
            entity.Property(e => e.PcPeCdckomunikat)
                .HasMaxLength(256)
                .HasColumnName("PcPE_CDCKomunikat");
            entity.Property(e => e.PcPeDataDok)
                .HasColumnType("datetime")
                .HasColumnName("PcPE_DataDok");
            entity.Property(e => e.PcPeDataReal)
                .HasColumnType("datetime")
                .HasColumnName("PcPE_DataReal");
            entity.Property(e => e.PcPeKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PcPE_Kwota");
            entity.Property(e => e.PcPeNumerOpis)
                .HasMaxLength(256)
                .HasColumnName("PcPE_NumerOpis");
            entity.Property(e => e.PcPePcPnid).HasColumnName("PcPE_PcPNID");
            entity.Property(e => e.PcPePodmiotKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PcPE_PodmiotKod");
            entity.Property(e => e.PcPeSymbolWaluty)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PcPE_SymbolWaluty");
            entity.Property(e => e.PcPeTermin)
                .HasColumnType("datetime")
                .HasColumnName("PcPE_Termin");

            entity.HasOne(d => d.PcPePcPn).WithMany(p => p.PaczkiPrzelewowElems)
                .HasForeignKey(d => d.PcPePcPnid)
                .HasConstraintName("FK_PcPENaglowek");
        });

        modelBuilder.Entity<PaczkiPrzelewowNag>(entity =>
        {
            entity.HasKey(e => e.PcPnPcPnid)
                .HasName("PcPN_Primary")
                .HasFillFactor(100);

            entity.ToTable("PaczkiPrzelewowNag", "CDN", tb => tb.HasTrigger("PaczkiPrzelewowNag_Delete_Trigger"));

            entity.HasIndex(e => e.PcPnBnkIdentyfikator, "PcPNWgIdentyfikatora")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PcPnBraId, e.PcPnNazwa, e.PcPnPcPnid }, "PcPNWgNazwy")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PcPnPcPnid).HasColumnName("PcPN_PcPNID");
            entity.Property(e => e.PcPnBnkIdentyfikator)
                .HasMaxLength(32)
                .HasColumnName("PcPN_BnkIdentyfikator");
            entity.Property(e => e.PcPnBraId).HasColumnName("PcPN_BRaID");
            entity.Property(e => e.PcPnNazwa)
                .HasMaxLength(40)
                .HasColumnName("PcPN_Nazwa");
            entity.Property(e => e.PcPnOpeModId).HasColumnName("PcPN_OpeModId");
            entity.Property(e => e.PcPnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcPN_OpeModKod");
            entity.Property(e => e.PcPnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PcPN_OpeModNazwisko");
            entity.Property(e => e.PcPnOpeZalId).HasColumnName("PcPN_OpeZalId");
            entity.Property(e => e.PcPnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcPN_OpeZalKod");
            entity.Property(e => e.PcPnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PcPN_OpeZalNazwisko");
            entity.Property(e => e.PcPnOpis)
                .HasMaxLength(1024)
                .HasColumnName("PcPN_Opis");
            entity.Property(e => e.PcPnPodpisy).HasColumnName("PcPN_Podpisy");
            entity.Property(e => e.PcPnStaModId).HasColumnName("PcPN_StaModId");
            entity.Property(e => e.PcPnStaZalId).HasColumnName("PcPN_StaZalId");
            entity.Property(e => e.PcPnStatus).HasColumnName("PcPN_Status");
            entity.Property(e => e.PcPnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PcPN_TS_Mod");
            entity.Property(e => e.PcPnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PcPN_TS_Zal");

            entity.HasOne(d => d.PcPnBra).WithMany(p => p.PaczkiPrzelewowNags)
                .HasForeignKey(d => d.PcPnBraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PcPNRachunek");
        });

        modelBuilder.Entity<PanstwaTrzecie>(entity =>
        {
            entity.HasKey(e => e.PaTPaTid)
                .HasName("PK_PaT_PaTID")
                .HasFillFactor(100);

            entity.ToTable("PanstwaTrzecie", "CDN");

            entity.Property(e => e.PaTPaTid).HasColumnName("PaT_PaTID");
            entity.Property(e => e.PaTKraj)
                .HasMaxLength(255)
                .HasColumnName("PaT_Kraj");
            entity.Property(e => e.PaTRucid).HasColumnName("PaT_RUCID");
            entity.Property(e => e.PaTSzczegoly).HasColumnName("PaT_Szczegoly");
            entity.Property(e => e.PaTUzasadnienie).HasColumnName("PaT_Uzasadnienie");

            entity.HasOne(d => d.PaTRuc).WithMany(p => p.PanstwaTrzecies)
                .HasForeignKey(d => d.PaTRucid)
                .HasConstraintName("FK_PaTRUC");
        });

        modelBuilder.Entity<Parametry>(entity =>
        {
            entity.HasKey(e => e.PrmPrmId)
                .HasName("PRM_Primary")
                .HasFillFactor(100);

            entity.ToTable("Parametry", "CDN");

            entity.HasIndex(e => e.PrmWzrId, "PTWWzorzec").HasFillFactor(100);

            entity.Property(e => e.PrmPrmId).HasColumnName("PRM_PrmId");
            entity.Property(e => e.PrmDodatkowe)
                .HasMaxLength(128)
                .HasColumnName("PRM_Dodatkowe");
            entity.Property(e => e.PrmNazwa)
                .HasMaxLength(50)
                .HasColumnName("PRM_Nazwa");
            entity.Property(e => e.PrmNumer).HasColumnName("PRM_Numer");
            entity.Property(e => e.PrmTyp).HasColumnName("PRM_Typ");
            entity.Property(e => e.PrmWartosc1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRM_Wartosc1");
            entity.Property(e => e.PrmWartosc2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRM_Wartosc2");
            entity.Property(e => e.PrmWartoscInt1).HasColumnName("PRM_WartoscInt1");
            entity.Property(e => e.PrmWartoscInt2).HasColumnName("PRM_WartoscInt2");
            entity.Property(e => e.PrmWzor)
                .HasMaxLength(256)
                .HasColumnName("PRM_Wzor");
            entity.Property(e => e.PrmWzrId).HasColumnName("PRM_WzrId");

            entity.HasOne(d => d.PrmWzr).WithMany(p => p.Parametries)
                .HasForeignKey(d => d.PrmWzrId)
                .HasConstraintName("FK_PTWWzorzec");
        });

        modelBuilder.Entity<Pieczatki>(entity =>
        {
            entity.HasKey(e => e.PcPcid)
                .HasName("PC_Primary")
                .HasFillFactor(100);

            entity.ToTable("Pieczatki", "CDN", tb =>
                {
                    tb.HasTrigger("Pieczatki_Delete_Trigger");
                    tb.HasTrigger("Pieczatki_Insert_Trigger");
                    tb.HasTrigger("Pieczatki_Update_Trigger");
                });

            entity.HasIndex(e => e.PcDataOd, "PCChron").HasFillFactor(100);

            entity.HasIndex(e => e.PcImportRowId, "PCGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PcPcid).HasColumnName("PC_PCID");
            entity.Property(e => e.PcAktDok).HasColumnName("PC_AktDok");
            entity.Property(e => e.PcAktualna)
                .HasComputedColumnSql("(case when [PC_DataDo]=CONVERT([datetime],'2999-12-31',(120)) then (1) else (0) end)", false)
                .HasColumnName("PC_Aktualna");
            entity.Property(e => e.PcBdo)
                .HasMaxLength(20)
                .HasColumnName("PC_BDO");
            entity.Property(e => e.PcDataDo)
                .HasColumnType("datetime")
                .HasColumnName("PC_DataDo");
            entity.Property(e => e.PcDataOd)
                .HasColumnType("datetime")
                .HasColumnName("PC_DataOd");
            entity.Property(e => e.PcEmail)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasColumnName("PC_Email");
            entity.Property(e => e.PcGmina)
                .HasMaxLength(40)
                .HasColumnName("PC_Gmina");
            entity.Property(e => e.PcIlnglncentrali)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PC_ILNGLNCentrali");
            entity.Property(e => e.PcIlnglnwlasny)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PC_ILNGLNWlasny");
            entity.Property(e => e.PcImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PC_ImportAppId");
            entity.Property(e => e.PcImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PC_ImportRowId");
            entity.Property(e => e.PcKodGminy)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PC_KodGminy");
            entity.Property(e => e.PcKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PC_KodP");
            entity.Property(e => e.PcKraj)
                .HasMaxLength(40)
                .HasColumnName("PC_Kraj");
            entity.Property(e => e.PcKrajIso)
                .HasMaxLength(2)
                .HasColumnName("PC_KrajISO");
            entity.Property(e => e.PcKrsKapitalWpl)
                .HasMaxLength(20)
                .HasColumnName("PC_KRS_KapitalWpl");
            entity.Property(e => e.PcKrsKapitalZak)
                .HasMaxLength(20)
                .HasColumnName("PC_KRS_KapitalZak");
            entity.Property(e => e.PcKrsNumer)
                .HasMaxLength(10)
                .HasColumnName("PC_KRS_Numer");
            entity.Property(e => e.PcKrsSad)
                .HasMaxLength(100)
                .HasColumnName("PC_KRS_Sad");
            entity.Property(e => e.PcMiasto)
                .HasMaxLength(40)
                .HasColumnName("PC_Miasto");
            entity.Property(e => e.PcNazwa1)
                .HasMaxLength(50)
                .HasColumnName("PC_Nazwa1");
            entity.Property(e => e.PcNazwa2)
                .HasMaxLength(50)
                .HasColumnName("PC_Nazwa2");
            entity.Property(e => e.PcNazwa3)
                .HasMaxLength(512)
                .HasColumnName("PC_Nazwa3");
            entity.Property(e => e.PcNipE)
                .HasMaxLength(20)
                .HasColumnName("PC_NipE");
            entity.Property(e => e.PcNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PC_NipKraj");
            entity.Property(e => e.PcNrDomu)
                .HasMaxLength(10)
                .HasColumnName("PC_NrDomu");
            entity.Property(e => e.PcNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("PC_NrLokalu");
            entity.Property(e => e.PcOpeModId).HasColumnName("PC_OpeModId");
            entity.Property(e => e.PcOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PC_OpeModKod");
            entity.Property(e => e.PcOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PC_OpeModNazwisko");
            entity.Property(e => e.PcOpeZalId).HasColumnName("PC_OpeZalId");
            entity.Property(e => e.PcOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PC_OpeZalKod");
            entity.Property(e => e.PcOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PC_OpeZalNazwisko");
            entity.Property(e => e.PcOpis)
                .HasMaxLength(50)
                .HasColumnName("PC_Opis");
            entity.Property(e => e.PcPoczta)
                .HasMaxLength(40)
                .HasColumnName("PC_Poczta");
            entity.Property(e => e.PcPowiat)
                .HasMaxLength(40)
                .HasColumnName("PC_Powiat");
            entity.Property(e => e.PcPuesc)
                .HasMaxLength(50)
                .HasColumnName("PC_PUESC");
            entity.Property(e => e.PcRegon)
                .HasMaxLength(20)
                .HasColumnName("PC_Regon");
            entity.Property(e => e.PcStaModId).HasColumnName("PC_StaModId");
            entity.Property(e => e.PcStaZalId).HasColumnName("PC_StaZalId");
            entity.Property(e => e.PcTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PC_Telefon");
            entity.Property(e => e.PcTsExport)
                .HasColumnType("datetime")
                .HasColumnName("PC_TS_Export");
            entity.Property(e => e.PcTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PC_TS_Mod");
            entity.Property(e => e.PcTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PC_TS_Zal");
            entity.Property(e => e.PcUlica)
                .HasMaxLength(40)
                .HasColumnName("PC_Ulica");
            entity.Property(e => e.PcUlicaNrDomLok)
                .HasMaxLength(62)
                .HasComputedColumnSql("(case when isnull([PC_Ulica],'')<>'' then case when isnull([PC_NrLokalu],'')<>'' then ((([PC_Ulica]+' ')+isnull([PC_NrDomu],''))+'/')+[PC_NrLokalu] else ([PC_Ulica]+' ')+isnull([PC_NrDomu],'') end else case when isnull([PC_NrLokalu],'')<>'' then (isnull([PC_NrDomu],'')+'/')+[PC_NrLokalu] else isnull([PC_NrDomu],'') end end)", false)
                .HasColumnName("PC_UlicaNrDomLok");
            entity.Property(e => e.PcUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("PC_URL");
            entity.Property(e => e.PcWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("PC_Wojewodztwo");
        });

        modelBuilder.Entity<PieczatkiJ>(entity =>
        {
            entity.HasKey(e => e.PcjsPcjsid)
                .HasName("PCJS_Primary")
                .HasFillFactor(100);

            entity.ToTable("PieczatkiJS", "CDN", tb =>
                {
                    tb.HasTrigger("PieczatkiJS_Delete_Trigger");
                    tb.HasTrigger("PieczatkiJS_Insert_Trigger");
                    tb.HasTrigger("PieczatkiJS_Update_Trigger");
                });

            entity.HasIndex(e => e.PcjsDataOd, "PCJSChron").HasFillFactor(100);

            entity.HasIndex(e => e.PcjsImportRowId, "PCJSGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PcjsPcjsid).HasColumnName("PCJS_PCJSID");
            entity.Property(e => e.PcjsAktDok).HasColumnName("PCJS_AktDok");
            entity.Property(e => e.PcjsAktualna)
                .HasComputedColumnSql("(case when [PCJS_DataDo]=CONVERT([datetime],'2999-12-31',(120)) then (1) else (0) end)", false)
                .HasColumnName("PCJS_Aktualna");
            entity.Property(e => e.PcjsDataDo)
                .HasColumnType("datetime")
                .HasColumnName("PCJS_DataDo");
            entity.Property(e => e.PcjsDataOd)
                .HasColumnType("datetime")
                .HasColumnName("PCJS_DataOd");
            entity.Property(e => e.PcjsEmail)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasColumnName("PCJS_Email");
            entity.Property(e => e.PcjsGmina)
                .HasMaxLength(40)
                .HasColumnName("PCJS_Gmina");
            entity.Property(e => e.PcjsImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PCJS_ImportAppId");
            entity.Property(e => e.PcjsImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PCJS_ImportRowId");
            entity.Property(e => e.PcjsKodGminy)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PCJS_KodGminy");
            entity.Property(e => e.PcjsKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PCJS_KodP");
            entity.Property(e => e.PcjsKraj)
                .HasMaxLength(40)
                .HasColumnName("PCJS_Kraj");
            entity.Property(e => e.PcjsKrajIso)
                .HasMaxLength(2)
                .HasColumnName("PCJS_KrajISO");
            entity.Property(e => e.PcjsMiasto)
                .HasMaxLength(40)
                .HasColumnName("PCJS_Miasto");
            entity.Property(e => e.PcjsNazwa1)
                .HasMaxLength(50)
                .HasColumnName("PCJS_Nazwa1");
            entity.Property(e => e.PcjsNazwa2)
                .HasMaxLength(50)
                .HasColumnName("PCJS_Nazwa2");
            entity.Property(e => e.PcjsNazwa3)
                .HasMaxLength(512)
                .HasColumnName("PCJS_Nazwa3");
            entity.Property(e => e.PcjsNipE)
                .HasMaxLength(20)
                .HasColumnName("PCJS_NipE");
            entity.Property(e => e.PcjsNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PCJS_NipKraj");
            entity.Property(e => e.PcjsNrDomu)
                .HasMaxLength(10)
                .HasColumnName("PCJS_NrDomu");
            entity.Property(e => e.PcjsNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("PCJS_NrLokalu");
            entity.Property(e => e.PcjsOpeModId).HasColumnName("PCJS_OpeModId");
            entity.Property(e => e.PcjsOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCJS_OpeModKod");
            entity.Property(e => e.PcjsOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PCJS_OpeModNazwisko");
            entity.Property(e => e.PcjsOpeZalId).HasColumnName("PCJS_OpeZalId");
            entity.Property(e => e.PcjsOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCJS_OpeZalKod");
            entity.Property(e => e.PcjsOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PCJS_OpeZalNazwisko");
            entity.Property(e => e.PcjsPoczta)
                .HasMaxLength(40)
                .HasColumnName("PCJS_Poczta");
            entity.Property(e => e.PcjsPowiat)
                .HasMaxLength(40)
                .HasColumnName("PCJS_Powiat");
            entity.Property(e => e.PcjsRegon)
                .HasMaxLength(20)
                .HasColumnName("PCJS_Regon");
            entity.Property(e => e.PcjsStaModId).HasColumnName("PCJS_StaModId");
            entity.Property(e => e.PcjsStaZalId).HasColumnName("PCJS_StaZalId");
            entity.Property(e => e.PcjsTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PCJS_Telefon");
            entity.Property(e => e.PcjsTsExport)
                .HasColumnType("datetime")
                .HasColumnName("PCJS_TS_Export");
            entity.Property(e => e.PcjsTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PCJS_TS_Mod");
            entity.Property(e => e.PcjsTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PCJS_TS_Zal");
            entity.Property(e => e.PcjsUlica)
                .HasMaxLength(40)
                .HasColumnName("PCJS_Ulica");
            entity.Property(e => e.PcjsUlicaNrDomLok)
                .HasMaxLength(62)
                .HasComputedColumnSql("(case when isnull([PCJS_Ulica],'')<>'' then case when isnull([PCJS_NrLokalu],'')<>'' then ((([PCJS_Ulica]+' ')+isnull([PCJS_NrDomu],''))+'/')+[PCJS_NrLokalu] else ([PCJS_Ulica]+' ')+isnull([PCJS_NrDomu],'') end else case when isnull([PCJS_NrLokalu],'')<>'' then (isnull([PCJS_NrDomu],'')+'/')+[PCJS_NrLokalu] else isnull([PCJS_NrDomu],'') end end)", false)
                .HasColumnName("PCJS_UlicaNrDomLok");
            entity.Property(e => e.PcjsUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("PCJS_URL");
            entity.Property(e => e.PcjsWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("PCJS_Wojewodztwo");
        });

        modelBuilder.Entity<Pkzp>(entity =>
        {
            entity.HasKey(e => e.KzpKzpId)
                .HasName("KZP_Primary")
                .HasFillFactor(100);

            entity.ToTable("PKZP", "CDN");

            entity.HasIndex(e => e.KzpPraId, "KZPPraLink").HasFillFactor(100);

            entity.Property(e => e.KzpKzpId).HasColumnName("KZP_KzpId");
            entity.Property(e => e.KzpOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("KZP_OkresDo");
            entity.Property(e => e.KzpOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("KZP_OkresOd");
            entity.Property(e => e.KzpOpeModId).HasColumnName("KZP_OpeModId");
            entity.Property(e => e.KzpOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KZP_OpeModKod");
            entity.Property(e => e.KzpOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KZP_OpeModNazwisko");
            entity.Property(e => e.KzpOpeZalId).HasColumnName("KZP_OpeZalId");
            entity.Property(e => e.KzpOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KZP_OpeZalKod");
            entity.Property(e => e.KzpOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KZP_OpeZalNazwisko");
            entity.Property(e => e.KzpOpis)
                .HasMaxLength(512)
                .HasColumnName("KZP_Opis");
            entity.Property(e => e.KzpPraId).HasColumnName("KZP_PraId");
            entity.Property(e => e.KzpStaModId).HasColumnName("KZP_StaModId");
            entity.Property(e => e.KzpStaZalId).HasColumnName("KZP_StaZalId");
            entity.Property(e => e.KzpTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KZP_TS_Mod");
            entity.Property(e => e.KzpTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KZP_TS_Zal");

            entity.HasOne(d => d.KzpPra).WithMany(p => p.Pkzps)
                .HasForeignKey(d => d.KzpPraId)
                .HasConstraintName("FK_KZPPraLink");
        });

        modelBuilder.Entity<PlikiJpk>(entity =>
        {
            entity.HasKey(e => e.JpkJpkid)
                .HasName("JPK_Primary")
                .HasFillFactor(100);

            entity.ToTable("PlikiJPK", "CDN", tb =>
                {
                    tb.HasTrigger("PlikiJPK_Delete_Trigger");
                    tb.HasTrigger("RO_PlikiJPK_InsertUpdateDelete_Trigger");
                });

            entity.HasIndex(e => e.JpkPath, "JPKPath")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.JpkJpkid).HasColumnName("JPK_JPKID");
            entity.Property(e => e.JpkCelZlozenia).HasColumnName("JPK_CelZlozenia");
            entity.Property(e => e.JpkDataOdebrania)
                .HasMaxLength(254)
                .HasColumnName("JPK_DataOdebrania");
            entity.Property(e => e.JpkDataUtworzenia)
                .HasColumnType("datetime")
                .HasColumnName("JPK_DataUtworzenia");
            entity.Property(e => e.JpkDataWplyniecia)
                .HasMaxLength(254)
                .HasColumnName("JPK_DataWplyniecia");
            entity.Property(e => e.JpkDataWyslania)
                .HasMaxLength(254)
                .HasColumnName("JPK_DataWyslania");
            entity.Property(e => e.JpkDeklaracja).HasColumnName("Jpk_Deklaracja");
            entity.Property(e => e.JpkDkNid).HasColumnName("JPK_DkNID");
            entity.Property(e => e.JpkEwidencja).HasColumnName("Jpk_Ewidencja");
            entity.Property(e => e.JpkJpkNagId).HasColumnName("JPK_JpkNagId");
            entity.Property(e => e.JpkJpkscaId).HasColumnName("JPK_JPKScaID");
            entity.Property(e => e.JpkKodFormularza)
                .HasMaxLength(50)
                .HasColumnName("Jpk_KodFormularza");
            entity.Property(e => e.JpkKodFormularzaDekl)
                .HasMaxLength(50)
                .HasColumnName("Jpk_KodFormularzaDekl");
            entity.Property(e => e.JpkKodOsoby)
                .HasMaxLength(254)
                .HasColumnName("JPK_KodOsoby");
            entity.Property(e => e.JpkKodOsobyOdbierajacej)
                .HasMaxLength(254)
                .HasColumnName("JPK_KodOsobyOdbierajacej");
            entity.Property(e => e.JpkKodSystemowy)
                .HasMaxLength(50)
                .HasColumnName("Jpk_kodSystemowy");
            entity.Property(e => e.JpkKodSystemowyDekl)
                .HasMaxLength(50)
                .HasColumnName("Jpk_kodSystemowyDekl");
            entity.Property(e => e.JpkKodUrzedu)
                .HasMaxLength(254)
                .HasColumnName("JPK_KodUrzedu");
            entity.Property(e => e.JpkKwartalna).HasColumnName("Jpk_Kwartalna");
            entity.Property(e => e.JpkMiesiac).HasColumnName("Jpk_Miesiac");
            entity.Property(e => e.JpkMode).HasColumnName("JPK_Mode");
            entity.Property(e => e.JpkNazwa)
                .HasMaxLength(254)
                .HasColumnName("JPK_Nazwa");
            entity.Property(e => e.JpkNazwaPodmiotu)
                .HasMaxLength(254)
                .HasColumnName("JPK_NazwaPodmiotu");
            entity.Property(e => e.JpkNip1)
                .HasMaxLength(20)
                .HasColumnName("JPK_NIP1");
            entity.Property(e => e.JpkOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("JPK_OkresDo");
            entity.Property(e => e.JpkOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("JPK_OkresOd");
            entity.Property(e => e.JpkPath)
                .HasMaxLength(254)
                .HasColumnName("JPK_Path");
            entity.Property(e => e.JpkPodpisanyXml).HasColumnName("JPK_PodpisanyXML");
            entity.Property(e => e.JpkProcessState).HasColumnName("Jpk_ProcessState");
            entity.Property(e => e.JpkRefNr)
                .HasMaxLength(254)
                .HasColumnName("JPK_RefNr");
            entity.Property(e => e.JpkRodzajWysylki)
                .HasDefaultValue(2)
                .HasColumnName("JPK_RodzajWysylki");
            entity.Property(e => e.JpkRok).HasColumnName("Jpk_Rok");
            entity.Property(e => e.JpkSciezkaPodpisanegoPliku)
                .HasMaxLength(254)
                .HasColumnName("JPK_SciezkaPodpisanegoPliku");
            entity.Property(e => e.JpkSigningTime)
                .HasMaxLength(50)
                .HasColumnName("JPK_SigningTime");
            entity.Property(e => e.JpkSkrotDokumentu)
                .HasMaxLength(240)
                .HasColumnName("JPK_SkrotDokumentu");
            entity.Property(e => e.JpkSkrotStruktury)
                .HasMaxLength(240)
                .HasColumnName("JPK_SkrotStruktury");
            entity.Property(e => e.JpkSourceJpkId).HasColumnName("JPK_SourceJpkId");
            entity.Property(e => e.JpkSprzedaz).HasColumnName("Jpk_Sprzedaz");
            entity.Property(e => e.JpkStatus).HasColumnName("JPK_Status");
            entity.Property(e => e.JpkStatusCode).HasColumnName("JPK_StatusCode");
            entity.Property(e => e.JpkStatusOpis)
                .HasMaxLength(1000)
                .HasColumnName("JPK_StatusOpis");
            entity.Property(e => e.JpkStempelCzasu)
                .HasMaxLength(240)
                .HasColumnName("JPK_StempelCzasu");
            entity.Property(e => e.JpkStrukturaLogiczna)
                .HasMaxLength(240)
                .HasColumnName("JPK_StrukturaLogiczna");
            entity.Property(e => e.JpkTyp)
                .HasMaxLength(254)
                .HasColumnName("JPK_Typ");
            entity.Property(e => e.JpkTypWysylki)
                .HasDefaultValue(-1)
                .HasColumnName("JPK_TypWysylki");
            entity.Property(e => e.JpkWariantFormularza)
                .HasDefaultValue(1)
                .HasColumnName("JPK_WariantFormularza");
            entity.Property(e => e.JpkWersjaSchemy)
                .HasMaxLength(50)
                .HasColumnName("Jpk_wersjaSchemy");
            entity.Property(e => e.JpkWersjaSchemyDekl)
                .HasMaxLength(50)
                .HasColumnName("Jpk_wersjaSchemyDekl");
            entity.Property(e => e.JpkXml).HasColumnName("JPK_XML");
            entity.Property(e => e.JpkZakup).HasColumnName("Jpk_Zakup");
        });

        modelBuilder.Entity<PltPromocje>(entity =>
        {
            entity.HasKey(e => e.PprId).HasName("XL_PPr_Primary");

            entity.ToTable("PltPromocje", "CDN");

            entity.HasIndex(e => new { e.PprPrmId, e.PprPltId }, "PprPlatnosc").IsUnique();

            entity.HasIndex(e => e.PprPrmId, "PprPrmId");

            entity.Property(e => e.PprId).HasColumnName("PPr_ID");
            entity.Property(e => e.PprPltId).HasColumnName("PPr_PltID");
            entity.Property(e => e.PprPrmId).HasColumnName("PPr_PrmID");
            entity.Property(e => e.PprWartosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPr_Wartosc");

            entity.HasOne(d => d.PprPrm).WithMany(p => p.PltPromocjes)
                .HasForeignKey(d => d.PprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PprPrmId");
        });

        modelBuilder.Entity<PodArkuszInwenElem>(entity =>
        {
            entity.HasKey(e => e.PaePaeid)
                .HasName("PAE_Primary")
                .HasFillFactor(100);

            entity.ToTable("PodArkuszInwenElem", "CDN");

            entity.HasIndex(e => new { e.PaePaiid, e.PaePaeid }, "ElemPodArkInw")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PaeTwrId, e.PaePaeid }, "PAETowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PaePaeid).HasColumnName("PAE_PAEId");
            entity.Property(e => e.PaeIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PAE_Ilosc");
            entity.Property(e => e.PaeJm)
                .HasMaxLength(20)
                .HasColumnName("PAE_Jm");
            entity.Property(e => e.PaeJmz)
                .HasMaxLength(20)
                .HasColumnName("PAE_JMZ");
            entity.Property(e => e.PaeLp).HasColumnName("PAE_Lp");
            entity.Property(e => e.PaePaiid).HasColumnName("PAE_PAIId");
            entity.Property(e => e.PaeTrEid).HasColumnName("PAE_TrEId");
            entity.Property(e => e.PaeTwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAE_TwrEAN");
            entity.Property(e => e.PaeTwrId).HasColumnName("PAE_TwrId");
            entity.Property(e => e.PaeTwrKod)
                .HasMaxLength(50)
                .HasColumnName("PAE_TwrKod");
            entity.Property(e => e.PaeTwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("PAE_TwrNazwa");

            entity.HasOne(d => d.PaePai).WithMany(p => p.PodArkuszInwenElems)
                .HasForeignKey(d => d.PaePaiid)
                .HasConstraintName("FK_ElemPodArkInw");

            entity.HasOne(d => d.PaeTwr).WithMany(p => p.PodArkuszInwenElems)
                .HasForeignKey(d => d.PaeTwrId)
                .HasConstraintName("FK_PAETowar");
        });

        modelBuilder.Entity<PodArkuszInwenNag>(entity =>
        {
            entity.HasKey(e => e.PaiPaiid)
                .HasName("PAI_Primary")
                .HasFillFactor(100);

            entity.ToTable("PodArkuszInwenNag", "CDN", tb => tb.HasTrigger("PodArkuszInwenNag_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.PaiTrNid, e.PaiNumerNr }, "PAITraNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PaiPaiid).HasColumnName("PAI_PAIId");
            entity.Property(e => e.PaiAinumerPelny)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("PAI_AINumerPelny");
            entity.Property(e => e.PaiNumerNr).HasColumnName("PAI_NumerNr");
            entity.Property(e => e.PaiOpeModId).HasColumnName("PAI_OpeModId");
            entity.Property(e => e.PaiOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PAI_OpeModKod");
            entity.Property(e => e.PaiOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PAI_OpeModNazwisko");
            entity.Property(e => e.PaiOpeZalId).HasColumnName("PAI_OpeZalId");
            entity.Property(e => e.PaiOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PAI_OpeZalKod");
            entity.Property(e => e.PaiOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PAI_OpeZalNazwisko");
            entity.Property(e => e.PaiOpis)
                .HasDefaultValue("")
                .HasColumnName("PAI_Opis");
            entity.Property(e => e.PaiStaModId).HasColumnName("PAI_StaModId");
            entity.Property(e => e.PaiStaZalId).HasColumnName("PAI_StaZalId");
            entity.Property(e => e.PaiStatus).HasColumnName("PAI_Status");
            entity.Property(e => e.PaiTrNid).HasColumnName("PAI_TrNId");
            entity.Property(e => e.PaiTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PAI_TS_Mod");
            entity.Property(e => e.PaiTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PAI_TS_Zal");

            entity.HasOne(d => d.PaiTrN).WithMany(p => p.PodArkuszInwenNags)
                .HasForeignKey(d => d.PaiTrNid)
                .HasConstraintName("FK_PAITraNag");
        });

        modelBuilder.Entity<PodmiotRejestracjaZgod>(entity =>
        {
            entity.HasKey(e => e.PrzPrzid)
                .HasName("PRZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("PodmiotRejestracjaZgod", "CDN", tb => tb.HasTrigger("PodmiotRejestracjaZgodUpdate_CzasModyfikacji"));

            entity.Property(e => e.PrzPrzid).HasColumnName("PRZ_PRZId");
            entity.Property(e => e.PrzAkronim)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRZ_Akronim");
            entity.Property(e => e.PrzDataWycofania)
                .HasColumnType("datetime")
                .HasColumnName("PRZ_DataWycofania");
            entity.Property(e => e.PrzDataWyrazenia)
                .HasColumnType("datetime")
                .HasColumnName("PRZ_DataWyrazenia");
            entity.Property(e => e.PrzEmail).HasColumnName("PRZ_EMAIL");
            entity.Property(e => e.PrzImieNazwisko)
                .HasMaxLength(150)
                .HasDefaultValue("")
                .HasColumnName("PRZ_ImieNazwisko");
            entity.Property(e => e.PrzIpwycofania)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("PRZ_IPWycofania");
            entity.Property(e => e.PrzIpwyrazenia)
                .HasMaxLength(254)
                .HasColumnName("PRZ_IPWyrazenia");
            entity.Property(e => e.PrzJezykId)
                .HasDefaultValue(1)
                .HasColumnName("PRZ_JezykId");
            entity.Property(e => e.PrzList).HasColumnName("PRZ_List");
            entity.Property(e => e.PrzPodmiotId).HasColumnName("PRZ_PodmiotID");
            entity.Property(e => e.PrzPodmiotTyp).HasColumnName("PRZ_PodmiotTyp");
            entity.Property(e => e.PrzPowodWycofania)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("PRZ_PowodWycofania");
            entity.Property(e => e.PrzPrzedstawicielId).HasColumnName("PRZ_PrzedstawicielId");
            entity.Property(e => e.PrzSms).HasColumnName("PRZ_SMS");
            entity.Property(e => e.PrzTelefon).HasColumnName("PRZ_Telefon");
            entity.Property(e => e.PrzTrNid).HasColumnName("PRZ_TrNId");
            entity.Property(e => e.PrzTrescZgodyId).HasColumnName("PRZ_TrescZgodyId");
            entity.Property(e => e.PrzTsMod)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("PRZ_TS_Mod");
            entity.Property(e => e.PrzWycofanieEsklepId).HasColumnName("PRZ_WycofanieESklepId");
            entity.Property(e => e.PrzWycofanieMobileId).HasColumnName("PRZ_WycofanieMobileId");
            entity.Property(e => e.PrzWyrazenieEsklepId).HasColumnName("PRZ_WyrazenieESklepId");
            entity.Property(e => e.PrzWyrazenieMobileId).HasColumnName("PRZ_WyrazenieMobileId");
            entity.Property(e => e.PrzZrodloPozyskaniaId).HasColumnName("PRZ_ZrodloPozyskaniaId");
            entity.Property(e => e.PrzZrodloWycofaniaId).HasColumnName("PRZ_ZrodloWycofaniaId");
        });

        modelBuilder.Entity<PodmiotyView>(entity =>
        {
            entity.HasKey(e => new { e.PodPodId, e.PodPodmiotTyp })
                .HasName("Pod_Primary")
                .HasFillFactor(100);

            entity.ToTable("PodmiotyView", "CDN", tb =>
                {
                    tb.HasTrigger("PodmiotyView_DeleteHandler");
                    tb.HasTrigger("PodmiotyView_Update_Trigger");
                });

            entity.HasIndex(e => new { e.PodKod, e.PodPodmiotTyp, e.PodPodId }, "PodGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PodKod, e.PodPodmiotTyp }, "PodKod").HasFillFactor(100);

            entity.Property(e => e.PodPodId).HasColumnName("Pod_PodId");
            entity.Property(e => e.PodPodmiotTyp).HasColumnName("Pod_PodmiotTyp");
            entity.Property(e => e.PodAdres2)
                .HasMaxLength(40)
                .HasColumnName("Pod_Adres2");
            entity.Property(e => e.PodEmail)
                .HasMaxLength(127)
                .HasDefaultValue("")
                .HasColumnName("Pod_Email");
            entity.Property(e => e.PodGlId).HasColumnName("Pod_GlID");
            entity.Property(e => e.PodGlKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Pod_GlKod");
            entity.Property(e => e.PodGlNazwa12)
                .HasMaxLength(101)
                .HasColumnName("Pod_GlNazwa12");
            entity.Property(e => e.PodGmina)
                .HasMaxLength(40)
                .HasColumnName("Pod_Gmina");
            entity.Property(e => e.PodGrupa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Pod_Grupa");
            entity.Property(e => e.PodImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("Pod_ImportRowId");
            entity.Property(e => e.PodKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Pod_Kod");
            entity.Property(e => e.PodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Pod_KodPocztowy");
            entity.Property(e => e.PodKontoDost)
                .HasMaxLength(50)
                .HasColumnName("Pod_KontoDost");
            entity.Property(e => e.PodKontoOdb)
                .HasMaxLength(50)
                .HasColumnName("Pod_KontoOdb");
            entity.Property(e => e.PodKraj)
                .HasMaxLength(40)
                .HasColumnName("Pod_Kraj");
            entity.Property(e => e.PodLimitKredytu)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Pod_LimitKredytu");
            entity.Property(e => e.PodMiasto)
                .HasMaxLength(40)
                .HasColumnName("Pod_Miasto");
            entity.Property(e => e.PodNadId).HasColumnName("Pod_NadID");
            entity.Property(e => e.PodNazwa1)
                .HasMaxLength(50)
                .HasColumnName("Pod_Nazwa1");
            entity.Property(e => e.PodNazwa2)
                .HasMaxLength(50)
                .HasColumnName("Pod_Nazwa2");
            entity.Property(e => e.PodNazwa3)
                .HasMaxLength(250)
                .HasColumnName("Pod_Nazwa3");
            entity.Property(e => e.PodNieaktywny).HasColumnName("Pod_Nieaktywny");
            entity.Property(e => e.PodNip)
                .HasMaxLength(20)
                .HasColumnName("Pod_NIP");
            entity.Property(e => e.PodNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Pod_NipKraj");
            entity.Property(e => e.PodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("Pod_NrDomu");
            entity.Property(e => e.PodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Pod_NrLokalu");
            entity.Property(e => e.PodPesel)
                .HasMaxLength(11)
                .HasColumnName("Pod_Pesel");
            entity.Property(e => e.PodPoczta)
                .HasMaxLength(40)
                .HasColumnName("Pod_Poczta");
            entity.Property(e => e.PodPowiat)
                .HasMaxLength(40)
                .HasColumnName("Pod_Powiat");
            entity.Property(e => e.PodRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Pod_Regon");
            entity.Property(e => e.PodRodzaj).HasColumnName("Pod_Rodzaj");
            entity.Property(e => e.PodRodzajOpis)
                .HasMaxLength(20)
                .HasColumnName("Pod_RodzajOpis");
            entity.Property(e => e.PodTelefon1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Pod_Telefon1");
            entity.Property(e => e.PodTelefon2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Pod_Telefon2");
            entity.Property(e => e.PodTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Pod_TelefonSms");
            entity.Property(e => e.PodUlica)
                .HasMaxLength(40)
                .HasColumnName("Pod_Ulica");
            entity.Property(e => e.PodWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("Pod_Wojewodztwo");
        });

        modelBuilder.Entity<PodtypWyplatum>(entity =>
        {
            entity.HasKey(e => e.PtwPtwId)
                .HasName("PTW_Primary")
                .HasFillFactor(100);

            entity.ToTable("PodtypWyplata", "CDN");

            entity.HasIndex(e => e.PtwTwpId, "PTWTwpLink").HasFillFactor(100);

            entity.Property(e => e.PtwPtwId).HasColumnName("PTW_PtwId");
            entity.Property(e => e.PtwParentId).HasColumnName("PTW_ParentId");
            entity.Property(e => e.PtwParentNazwa)
                .HasMaxLength(40)
                .HasColumnName("PTW_ParentNazwa");
            entity.Property(e => e.PtwParentSts).HasColumnName("PTW_ParentSTS");
            entity.Property(e => e.PtwTwpId).HasColumnName("PTW_TwpId");

            entity.HasOne(d => d.PtwTwp).WithMany(p => p.PodtypWyplata)
                .HasForeignKey(d => d.PtwTwpId)
                .HasConstraintName("FK_PTWTwpLink");
        });

        modelBuilder.Entity<Poreczyciele>(entity =>
        {
            entity.HasKey(e => e.PorPorId)
                .HasName("POR_Primary")
                .HasFillFactor(100);

            entity.ToTable("Poreczyciele", "CDN");

            entity.HasIndex(e => e.PorDodId, "PORDodLink").HasFillFactor(100);

            entity.Property(e => e.PorPorId).HasColumnName("POR_PorId");
            entity.Property(e => e.PorDodId).HasColumnName("POR_DodId");
            entity.Property(e => e.PorOpeModId).HasColumnName("POR_OpeModId");
            entity.Property(e => e.PorOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POR_OpeModKod");
            entity.Property(e => e.PorOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("POR_OpeModNazwisko");
            entity.Property(e => e.PorOpeZalId).HasColumnName("POR_OpeZalId");
            entity.Property(e => e.PorOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POR_OpeZalKod");
            entity.Property(e => e.PorOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("POR_OpeZalNazwisko");
            entity.Property(e => e.PorOpis)
                .HasMaxLength(512)
                .HasColumnName("POR_Opis");
            entity.Property(e => e.PorOsoba)
                .HasMaxLength(129)
                .HasColumnName("POR_Osoba");
            entity.Property(e => e.PorPoreczycielLista).HasColumnName("POR_PoreczycielLista");
            entity.Property(e => e.PorPraId).HasColumnName("POR_PraId");
            entity.Property(e => e.PorStaModId).HasColumnName("POR_StaModId");
            entity.Property(e => e.PorStaZalId).HasColumnName("POR_StaZalId");
            entity.Property(e => e.PorTsMod)
                .HasColumnType("datetime")
                .HasColumnName("POR_TS_Mod");
            entity.Property(e => e.PorTsZal)
                .HasColumnType("datetime")
                .HasColumnName("POR_TS_Zal");

            entity.HasOne(d => d.PorDod).WithMany(p => p.Poreczycieles)
                .HasForeignKey(d => d.PorDodId)
                .HasConstraintName("FK_PORDodLink");
        });

        modelBuilder.Entity<PozDeklPit>(entity =>
        {
            entity.HasKey(e => e.PdpPdpId)
                .HasName("PDP_Primary")
                .HasFillFactor(100);

            entity.ToTable("PozDeklPIT", "CDN");

            entity.HasIndex(e => e.PdpZjeId, "PDPZjeLink").HasFillFactor(100);

            entity.Property(e => e.PdpPdpId).HasColumnName("PDP_PdpId");
            entity.Property(e => e.PdpFiltr).HasColumnName("PDP_Filtr");
            entity.Property(e => e.PdpIft1).HasColumnName("PDP_IFT1");
            entity.Property(e => e.PdpKod)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("PDP_Kod");
            entity.Property(e => e.PdpOpis)
                .HasMaxLength(254)
                .HasColumnName("PDP_Opis");
            entity.Property(e => e.PdpPit11).HasColumnName("PDP_PIT11");
            entity.Property(e => e.PdpPit4).HasColumnName("PDP_PIT4");
            entity.Property(e => e.PdpPit40).HasColumnName("PDP_PIT40");
            entity.Property(e => e.PdpPit8a).HasColumnName("PDP_PIT8A");
            entity.Property(e => e.PdpPit8b).HasColumnName("PDP_PIT8B");
            entity.Property(e => e.PdpPit8c).HasColumnName("PDP_PIT8C");
            entity.Property(e => e.PdpPitr).HasColumnName("PDP_PITR");
            entity.Property(e => e.PdpPoziom).HasColumnName("PDP_Poziom");
            entity.Property(e => e.PdpRodzaj).HasColumnName("PDP_Rodzaj");
            entity.Property(e => e.PdpWybieralny).HasColumnName("PDP_Wybieralny");
            entity.Property(e => e.PdpZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("PDP_ZjeId");
        });

        modelBuilder.Entity<PozDeklZu>(entity =>
        {
            entity.HasKey(e => e.PdzPdzId)
                .HasName("PDZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("PozDeklZUS", "CDN");

            entity.HasIndex(e => e.PdzZjeId, "PDZZjeLink").HasFillFactor(100);

            entity.Property(e => e.PdzPdzId).HasColumnName("PDZ_PdzId");
            entity.Property(e => e.PdzKategoriaZus).HasColumnName("PDZ_KategoriaZUS");
            entity.Property(e => e.PdzKod)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("PDZ_Kod");
            entity.Property(e => e.PdzKodNieobecnosci).HasColumnName("PDZ_KodNieobecnosci");
            entity.Property(e => e.PdzOpis)
                .HasMaxLength(254)
                .HasColumnName("PDZ_Opis");
            entity.Property(e => e.PdzPoziom).HasColumnName("PDZ_Poziom");
            entity.Property(e => e.PdzRodzaj).HasColumnName("PDZ_Rodzaj");
            entity.Property(e => e.PdzRsawedlugOkresDo).HasColumnName("PDZ_RSAWedlugOkresDo");
            entity.Property(e => e.PdzTypRsa).HasColumnName("PDZ_TypRSA");
            entity.Property(e => e.PdzUbezpChor).HasColumnName("PDZ_UbezpChor");
            entity.Property(e => e.PdzUbezpWypad).HasColumnName("PDZ_UbezpWypad");
            entity.Property(e => e.PdzWybieralny).HasColumnName("PDZ_Wybieralny");
            entity.Property(e => e.PdzZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("PDZ_ZjeId");
            entity.Property(e => e.PdzZwolnienie).HasColumnName("PDZ_Zwolnienie");
        });

        modelBuilder.Entity<PracDiety>(entity =>
        {
            entity.HasKey(e => e.PdiPdiId)
                .HasName("PDI_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracDiety", "CDN", tb => tb.HasTrigger("PracDiety_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PdiOkresDo, "PDIOkresDo").HasFillFactor(100);

            entity.HasIndex(e => e.PdiPraId, "PDIPraId").HasFillFactor(100);

            entity.Property(e => e.PdiPdiId).HasColumnName("PDI_PdiId");
            entity.Property(e => e.PdiImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PDI_ImportRowId");
            entity.Property(e => e.PdiKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("PDI_Kraj");
            entity.Property(e => e.PdiKwotaDiety)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PDI_KwotaDiety");
            entity.Property(e => e.PdiOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("PDI_OkresDo");
            entity.Property(e => e.PdiOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("PDI_OkresOd");
            entity.Property(e => e.PdiPraId).HasColumnName("PDI_PraId");

            entity.HasOne(d => d.PdiPra).WithMany(p => p.PracDieties)
                .HasForeignKey(d => d.PdiPraId)
                .HasConstraintName("FK_PDI_PraId");
        });

        modelBuilder.Entity<PracEtaty>(entity =>
        {
            entity.HasKey(e => e.PrePreId)
                .HasName("PRE_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracEtaty", "CDN", tb =>
                {
                    tb.HasTrigger("PracEtaty2WypSkladniki_Delete_Trigger");
                    tb.HasTrigger("PracEtaty_Delete_Trigger");
                    tb.HasTrigger("PracEtaty_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.PreTypPracownika, e.PreDataOd, e.PreDataDo }, "HRM_PracEtatyKalendarzePodsumowanie").HasFillFactor(100);

            entity.HasIndex(e => e.PreBnaId, "PREBnaLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreBnaIdMikro, "PREBnaMikroLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreCntId, "PRECntLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreDzlId, "PREDzlLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreFplId, "PREFplLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreImportRowId, "PREGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PreKalId, "PREKalLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreKatId, "PREKategoria").HasFillFactor(100);

            entity.HasIndex(e => e.PreMalzonekId, "PREMalzonekLink").HasFillFactor(100);

            entity.HasIndex(e => e.PrePrmkalId, "PREPRMKalLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.PrePraId, e.PreDataOd }, "PREPraLink")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PreUbztyuId, "PRETyuLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreWlascicielId, "PREWlascicielLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreZakId, "PREZakLink").HasFillFactor(100);

            entity.HasIndex(e => e.PreZrgId, "PREZrgId").HasFillFactor(100);

            entity.HasIndex(e => new { e.PreTypPracownika, e.PreDataOd, e.PreDataDo, e.PreZatrudnionyOd, e.PreZatrudnionyDo }, "PRE_EP_DataZatrudnienia_Idx").HasFillFactor(100);

            entity.HasIndex(e => new { e.PreDataOd, e.PreDataDo }, "PRE_EP_Data_Idx").HasFillFactor(100);

            entity.HasIndex(e => new { e.PrePraId, e.PreDataOd, e.PreNazwisko, e.PreTypPracownika, e.PrePreId }, "PRE_EP_Idx").HasFillFactor(100);

            entity.Property(e => e.PrePreId).HasColumnName("PRE_PreId");
            entity.Property(e => e.PreAbschor35).HasColumnName("PRE_ABSChor35");
            entity.Property(e => e.PreAbschor6M).HasColumnName("PRE_ABSChor6M");
            entity.Property(e => e.PreAbschor90).HasColumnName("PRE_ABSChor90");
            entity.Property(e => e.PreAbschorMiesKorekta).HasColumnName("PRE_ABSChorMiesKorekta");
            entity.Property(e => e.PreAbsdata)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ABSData");
            entity.Property(e => e.PreAbsfinansowanePracodawca).HasColumnName("PRE_ABSFinansowanePracodawca");
            entity.Property(e => e.PreAbsfinansowanePracodawcaDni).HasColumnName("PRE_ABSFinansowanePracodawcaDni");
            entity.Property(e => e.PreAbsfinansowanePracodawcaOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ABSFinansowanePracodawcaOd");
            entity.Property(e => e.PreAbslimitLiczbaDni).HasColumnName("PRE_ABSLimitLiczbaDni");
            entity.Property(e => e.PreAbsop14).HasColumnName("PRE_ABSOP14");
            entity.Property(e => e.PreAbsop30).HasColumnName("PRE_ABSOP30");
            entity.Property(e => e.PreAbsop60).HasColumnName("PRE_ABSOP60");
            entity.Property(e => e.PreAbspierwszyLimit).HasColumnName("PRE_ABSPierwszyLimit");
            entity.Property(e => e.PreAbsprawoZasChorOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ABSPrawoZasChorOd");
            entity.Property(e => e.PreAbsprocWynChor)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_ABSProcWynChor");
            entity.Property(e => e.PreAbsprocWynChorFlaga).HasColumnName("PRE_ABSProcWynChorFlaga");
            entity.Property(e => e.PreAbsurlMies).HasColumnName("PRE_ABSUrlMies");
            entity.Property(e => e.PreAbsurlMiesKorekta).HasColumnName("PRE_ABSUrlMiesKorekta");
            entity.Property(e => e.PreAdresCentrum)
                .HasMaxLength(512)
                .HasDefaultValue("")
                .HasColumnName("PRE_AdresCentrum");
            entity.Property(e => e.PreAdresDzialu)
                .HasMaxLength(512)
                .HasColumnName("PRE_AdresDzialu");
            entity.Property(e => e.PreBnaId).HasColumnName("PRE_BnaId");
            entity.Property(e => e.PreBnaIdMikro).HasColumnName("PRE_BnaIdMikro");
            entity.Property(e => e.PreCntId)
                .HasDefaultValue(3)
                .HasColumnName("PRE_CntId");
            entity.Property(e => e.PreDabId).HasColumnName("PRE_DabId");
            entity.Property(e => e.PreDataDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_DataDo");
            entity.Property(e => e.PreDataOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_DataOd");
            entity.Property(e => e.PreDataUr)
                .HasColumnType("datetime")
                .HasColumnName("PRE_DataUr");
            entity.Property(e => e.PreDkmIdKodZawodu).HasColumnName("PRE_DkmIdKodZawodu");
            entity.Property(e => e.PreDkmIdPracodawca).HasColumnName("PRE_DkmIdPracodawca");
            entity.Property(e => e.PreDowGdzie)
                .HasMaxLength(30)
                .HasColumnName("PRE_DowGdzie");
            entity.Property(e => e.PreDowKiedy)
                .HasColumnType("datetime")
                .HasColumnName("PRE_DowKiedy");
            entity.Property(e => e.PreDowKto)
                .HasMaxLength(40)
                .HasColumnName("PRE_DowKto");
            entity.Property(e => e.PreDowOsobisty)
                .HasMaxLength(12)
                .HasColumnName("PRE_DowOsobisty");
            entity.Property(e => e.PreDowWaznyDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_DowWaznyDo");
            entity.Property(e => e.PreDzlId)
                .HasDefaultValue(3)
                .HasColumnName("PRE_DzlId");
            entity.Property(e => e.PreEtadataRozpocz)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ETADataRozpocz");
            entity.Property(e => e.PreEtadataZawarcia)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ETADataZawarcia");
            entity.Property(e => e.PreEtadkmIdFunkcja).HasColumnName("PRE_ETADkmIdFunkcja");
            entity.Property(e => e.PreEtadkmIdStanowisko).HasColumnName("PRE_ETADkmIdStanowisko");
            entity.Property(e => e.PreEtadkmIdWypowPowod).HasColumnName("PRE_ETADkmIdWypowPowod");
            entity.Property(e => e.PreEtaetatL).HasColumnName("PRE_ETAEtatL");
            entity.Property(e => e.PreEtaetatM).HasColumnName("PRE_ETAEtatM");
            entity.Property(e => e.PreEtagwarantProcMin)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_ETAGwarantProcMin");
            entity.Property(e => e.PreEtaindywProcWypad).HasColumnName("PRE_ETAIndywProcWypad");
            entity.Property(e => e.PreEtaindywProcWypadProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_ETAIndywProcWypadProcent");
            entity.Property(e => e.PreEtamiejsce)
                .HasMaxLength(30)
                .HasColumnName("PRE_ETAMiejsce");
            entity.Property(e => e.PreEtaminimalna).HasColumnName("PRE_ETAMinimalna");
            entity.Property(e => e.PreEtanormaDobowa)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ETANormaDobowa");
            entity.Property(e => e.PreEtapodstZdrowMnoznik)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_ETAPodstZdrowMnoznik");
            entity.Property(e => e.PreEtarodzajUmowy)
                .HasMaxLength(40)
                .HasColumnName("PRE_ETARodzajUmowy");
            entity.Property(e => e.PreEtarodzajZatrudnienia).HasColumnName("PRE_ETARodzajZatrudnienia");
            entity.Property(e => e.PreEtarozwiazUmowy).HasColumnName("PRE_ETARozwiazUmowy");
            entity.Property(e => e.PreEtastandard).HasColumnName("PRE_ETAStandard");
            entity.Property(e => e.PreEtastawka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_ETAStawka");
            entity.Property(e => e.PreEtastawkaGodz).HasColumnName("PRE_ETAStawkaGodz");
            entity.Property(e => e.PreEtastawkaL).HasColumnName("PRE_ETAStawkaL");
            entity.Property(e => e.PreEtastawkaM).HasColumnName("PRE_ETAStawkaM");
            entity.Property(e => e.PreEtastosunekPracy).HasColumnName("PRE_ETAStosunekPracy");
            entity.Property(e => e.PreEtatwpId).HasColumnName("PRE_ETATwpId");
            entity.Property(e => e.PreEtawymiar).HasColumnName("PRE_ETAWymiar");
            entity.Property(e => e.PreFepdo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_FEPDo");
            entity.Property(e => e.PreFepod)
                .HasColumnType("datetime")
                .HasColumnName("PRE_FEPOd");
            entity.Property(e => e.PreFgspdo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_FGSPDo");
            entity.Property(e => e.PreFgspod)
                .HasColumnType("datetime")
                .HasColumnName("PRE_FGSPOd");
            entity.Property(e => e.PreFiltr).HasColumnName("PRE_Filtr");
            entity.Property(e => e.PreFlotaOperator).HasColumnName("PRE_FlotaOperator");
            entity.Property(e => e.PreFlotaPrawa).HasColumnName("PRE_FlotaPrawa");
            entity.Property(e => e.PreFpdo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_FPDo");
            entity.Property(e => e.PreFplId).HasColumnName("PRE_FplId");
            entity.Property(e => e.PreFpod)
                .HasColumnType("datetime")
                .HasColumnName("PRE_FPOd");
            entity.Property(e => e.PreGorniczeDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_GorniczeDo");
            entity.Property(e => e.PreGorniczeOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_GorniczeOd");
            entity.Property(e => e.PreHdkemail)
                .HasMaxLength(127)
                .HasColumnName("PRE_HDKEmail");
            entity.Property(e => e.PreHdkfax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRE_HDKFax");
            entity.Property(e => e.PreHdkgusglowneMiejscePracy).HasColumnName("PRE_HDKGUSGlowneMiejscePracy");
            entity.Property(e => e.PreHdkguspierwszaPraca).HasColumnName("PRE_HDKGUSPierwszaPraca");
            entity.Property(e => e.PreHdkgusporaNocna).HasColumnName("PRE_HDKGUSPoraNocna");
            entity.Property(e => e.PreHdkguspracSezonowy).HasColumnName("PRE_HDKGUSPracSezonowy");
            entity.Property(e => e.PreHdkgussymbolSystemuCzP)
                .HasDefaultValue(10)
                .HasColumnName("PRE_HDKGUSSymbolSystemuCzP");
            entity.Property(e => e.PreHdkgussymbolWykszt).HasColumnName("PRE_HDKGUSSymbolWykszt");
            entity.Property(e => e.PreHdkprawoJazdy).HasColumnName("PRE_HDKPrawoJazdy");
            entity.Property(e => e.PreHdkprawoJazdyKat)
                .HasMaxLength(30)
                .HasColumnName("PRE_HDKPrawoJazdyKat");
            entity.Property(e => e.PreHdkrodzajMiejsc).HasColumnName("PRE_HDKRodzajMiejsc");
            entity.Property(e => e.PreHdkskrytkaPoczt)
                .HasMaxLength(20)
                .HasColumnName("PRE_HDKSkrytkaPoczt");
            entity.Property(e => e.PreHdktelefon1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRE_HDKTelefon1");
            entity.Property(e => e.PreHdktelefon2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRE_HDKTelefon2");
            entity.Property(e => e.PreHdkteleks)
                .HasMaxLength(20)
                .HasColumnName("PRE_HDKTeleks");
            entity.Property(e => e.PreHdkurl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PRE_HDKURL");
            entity.Property(e => e.PreHdkuwagi)
                .HasMaxLength(1024)
                .HasColumnName("PRE_HDKUwagi");
            entity.Property(e => e.PreHdkwiekEmerData)
                .HasColumnType("datetime")
                .HasColumnName("PRE_HDKWiekEmerData");
            entity.Property(e => e.PreHdkwojNrKsiaz)
                .HasMaxLength(20)
                .HasColumnName("PRE_HDKWojNrKsiaz");
            entity.Property(e => e.PreHdkwojPrzydzial)
                .HasMaxLength(20)
                .HasColumnName("PRE_HDKWojPrzydzial");
            entity.Property(e => e.PreHdkwojSpecjal)
                .HasMaxLength(20)
                .HasColumnName("PRE_HDKWojSpecjal");
            entity.Property(e => e.PreHdkwojStopien)
                .HasMaxLength(60)
                .HasColumnName("PRE_HDKWojStopien");
            entity.Property(e => e.PreHdkwojStosunek)
                .HasMaxLength(20)
                .HasColumnName("PRE_HDKWojStosunek");
            entity.Property(e => e.PreHdkwojWku)
                .HasMaxLength(20)
                .HasColumnName("PRE_HDKWojWKU");
            entity.Property(e => e.PreHdkwypAdres)
                .HasMaxLength(60)
                .HasColumnName("PRE_HDKWypAdres");
            entity.Property(e => e.PreHdkwypOsoba)
                .HasMaxLength(50)
                .HasColumnName("PRE_HDKWypOsoba");
            entity.Property(e => e.PreHdkwypTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRE_HDKWypTelefon");
            entity.Property(e => e.PreIban).HasColumnName("PRE_IBAN");
            entity.Property(e => e.PreIbanmikro)
                .HasDefaultValue((short)1)
                .HasColumnName("PRE_IBANMikro");
            entity.Property(e => e.PreImie1)
                .HasMaxLength(30)
                .HasColumnName("PRE_Imie1");
            entity.Property(e => e.PreImie2)
                .HasMaxLength(30)
                .HasColumnName("PRE_Imie2");
            entity.Property(e => e.PreImieMatki)
                .HasMaxLength(30)
                .HasColumnName("PRE_ImieMatki");
            entity.Property(e => e.PreImieOjca)
                .HasMaxLength(30)
                .HasColumnName("PRE_ImieOjca");
            entity.Property(e => e.PreImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PRE_ImportRowId");
            entity.Property(e => e.PreIndywDra).HasColumnName("PRE_IndywDRA");
            entity.Property(e => e.PreIndywLimitNadgodzin).HasColumnName("PRE_IndywLimitNadgodzin");
            entity.Property(e => e.PreKalId).HasColumnName("PRE_KalId");
            entity.Property(e => e.PreKartaPobytu)
                .HasMaxLength(1)
                .HasColumnName("PRE_KartaPobytu");
            entity.Property(e => e.PreKasaChData)
                .HasColumnType("datetime")
                .HasColumnName("PRE_KasaChData");
            entity.Property(e => e.PreKatId).HasColumnName("PRE_KatId");
            entity.Property(e => e.PreKategoriaOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRE_KategoriaOpis");
            entity.Property(e => e.PreKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRE_Kod");
            entity.Property(e => e.PreKodFep).HasColumnName("PRE_KodFEP");
            entity.Property(e => e.PreKodKasyChorych)
                .HasMaxLength(3)
                .HasColumnName("PRE_KodKasyChorych");
            entity.Property(e => e.PreKodNiezdol)
                .HasDefaultValue(1)
                .HasColumnName("PRE_KodNiezdol");
            entity.Property(e => e.PreKodPodstPrawRozw)
                .HasMaxLength(32)
                .HasDefaultValue("")
                .HasColumnName("PRE_KodPodstPrawRozw");
            entity.Property(e => e.PreKodPokrew).HasColumnName("PRE_KodPokrew");
            entity.Property(e => e.PreKodStGorniczego).HasColumnName("PRE_KodStGorniczego");
            entity.Property(e => e.PreKodWygasniecia)
                .HasMaxLength(32)
                .HasDefaultValue("")
                .HasColumnName("PRE_KodWygasniecia");
            entity.Property(e => e.PreKodWyksztPfron).HasColumnName("PRE_KodWyksztPFRON");
            entity.Property(e => e.PreKodWyksztal).HasColumnName("PRE_KodWyksztal");
            entity.Property(e => e.PreKodZawoduSymbol)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PRE_KodZawoduSymbol");
            entity.Property(e => e.PreKontoKsiegowe)
                .HasMaxLength(50)
                .HasColumnName("PRE_KontoKsiegowe");
            entity.Property(e => e.PreKontoKsiegowe2)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRE_KontoKsiegowe2");
            entity.Property(e => e.PreKoradres2)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORAdres2");
            entity.Property(e => e.PreKorgmina)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORGmina");
            entity.Property(e => e.PreKorkodKraju)
                .HasMaxLength(2)
                .HasDefaultValue("")
                .HasColumnName("PRE_KORKodKraju");
            entity.Property(e => e.PreKorkodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRE_KORKodPocztowy");
            entity.Property(e => e.PreKorkraj)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORKraj");
            entity.Property(e => e.PreKormiasto)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORMiasto");
            entity.Property(e => e.PreKornrDomu)
                .HasMaxLength(10)
                .HasColumnName("PRE_KORNrDomu");
            entity.Property(e => e.PreKornrLokalu)
                .HasMaxLength(10)
                .HasColumnName("PRE_KORNrLokalu");
            entity.Property(e => e.PreKorpoczta)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORPoczta");
            entity.Property(e => e.PreKorpowiat)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORPowiat");
            entity.Property(e => e.PreKorulica)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORUlica");
            entity.Property(e => e.PreKorwojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("PRE_KORWojewodztwo");
            entity.Property(e => e.PreLimitNadgodzin)
                .HasColumnType("datetime")
                .HasColumnName("PRE_LimitNadgodzin");
            entity.Property(e => e.PreLogowanieTna)
                .HasDefaultValue((byte)1)
                .HasColumnName("PRE_LogowanieTNA");
            entity.Property(e => e.PreMalzonekId).HasColumnName("PRE_MalzonekId");
            entity.Property(e => e.PreMiejsceUr)
                .HasMaxLength(40)
                .HasColumnName("PRE_MiejsceUr");
            entity.Property(e => e.PreMldadres2)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDAdres2");
            entity.Property(e => e.PreMldgmina)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDGmina");
            entity.Property(e => e.PreMldgminaKod).HasColumnName("PRE_MLDGminaKod");
            entity.Property(e => e.PreMldkodKraju)
                .HasMaxLength(2)
                .HasDefaultValue("")
                .HasColumnName("PRE_MLDKodKraju");
            entity.Property(e => e.PreMldkodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRE_MLDKodPocztowy");
            entity.Property(e => e.PreMldkraj)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDKraj");
            entity.Property(e => e.PreMldmiasto)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDMiasto");
            entity.Property(e => e.PreMldnrDomu)
                .HasMaxLength(10)
                .HasColumnName("PRE_MLDNrDomu");
            entity.Property(e => e.PreMldnrLokalu)
                .HasMaxLength(10)
                .HasColumnName("PRE_MLDNrLokalu");
            entity.Property(e => e.PreMldpoczta)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDPoczta");
            entity.Property(e => e.PreMldpowiat)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDPowiat");
            entity.Property(e => e.PreMldulica)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDUlica");
            entity.Property(e => e.PreMldwojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("PRE_MLDWojewodztwo");
            entity.Property(e => e.PreMstIdKor).HasColumnName("PRE_MstIdKOR");
            entity.Property(e => e.PreMstIdMld).HasColumnName("PRE_MstIdMLD");
            entity.Property(e => e.PreMstIdZam).HasColumnName("PRE_MstIdZAM");
            entity.Property(e => e.PreMstMiejsceUr).HasColumnName("PRE_MstMiejsceUr");
            entity.Property(e => e.PreMstPocztaKor).HasColumnName("PRE_MstPocztaKOR");
            entity.Property(e => e.PreMstPocztaMld).HasColumnName("PRE_MstPocztaMLD");
            entity.Property(e => e.PreMstPocztaZam).HasColumnName("PRE_MstPocztaZAM");
            entity.Property(e => e.PreNauczyciel).HasColumnName("PRE_Nauczyciel");
            entity.Property(e => e.PreNazwRodowe)
                .HasMaxLength(40)
                .HasColumnName("PRE_NazwRodowe");
            entity.Property(e => e.PreNazwRodoweM)
                .HasMaxLength(40)
                .HasColumnName("PRE_NazwRodoweM");
            entity.Property(e => e.PreNazwisko)
                .HasMaxLength(40)
                .HasColumnName("PRE_Nazwisko");
            entity.Property(e => e.PreNieGenPodwZasMacierz).HasColumnName("PRE_NieGenPodwZasMacierz");
            entity.Property(e => e.PreNieNaliczacFgsp).HasColumnName("PRE_NieNaliczacFGSP");
            entity.Property(e => e.PreNieNaliczacFp).HasColumnName("PRE_NieNaliczacFP");
            entity.Property(e => e.PreNieRozliczac).HasColumnName("PRE_NieRozliczac");
            entity.Property(e => e.PreNiepelnospDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_NiepelnospDo");
            entity.Property(e => e.PreNiepelnospOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_NiepelnospOd");
            entity.Property(e => e.PreNiezdolDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_NiezdolDo");
            entity.Property(e => e.PreNiezdolOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_NiezdolOd");
            entity.Property(e => e.PreNipE)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PRE_NipE");
            entity.Property(e => e.PreNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PRE_NipKraj");
            entity.Property(e => e.PreNrwAktach)
                .HasMaxLength(19)
                .HasColumnName("PRE_NrwAktach");
            entity.Property(e => e.PreObowPrzechDokDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ObowPrzechDokDo");
            entity.Property(e => e.PreObywatelKodKraju)
                .HasMaxLength(2)
                .HasDefaultValue("")
                .HasColumnName("PRE_ObywatelKodKraju");
            entity.Property(e => e.PreObywatelstwo)
                .HasMaxLength(30)
                .HasColumnName("PRE_Obywatelstwo");
            entity.Property(e => e.PreOddelegowany).HasColumnName("PRE_Oddelegowany");
            entity.Property(e => e.PreOddelegowanyDieta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_OddelegowanyDieta");
            entity.Property(e => e.PreOddelegowanyFis).HasColumnName("PRE_OddelegowanyFIS");
            entity.Property(e => e.PreOddelegowanyKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("PRE_OddelegowanyKraj");
            entity.Property(e => e.PreOddelegowanyPropOdl).HasColumnName("PRE_OddelegowanyPropOdl");
            entity.Property(e => e.PreOddelegowanyWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_OddelegowanyWaluta");
            entity.Property(e => e.PreOddelegowanyWalutaDieta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_OddelegowanyWalutaDieta");
            entity.Property(e => e.PreOddelegowanyZus).HasColumnName("PRE_OddelegowanyZUS");
            entity.Property(e => e.PreOpeModId).HasColumnName("PRE_OpeModId");
            entity.Property(e => e.PreOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_OpeModKod");
            entity.Property(e => e.PreOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRE_OpeModNazwisko");
            entity.Property(e => e.PreOpeZalId).HasColumnName("PRE_OpeZalId");
            entity.Property(e => e.PreOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_OpeZalKod");
            entity.Property(e => e.PreOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRE_OpeZalNazwisko");
            entity.Property(e => e.PreOpis)
                .HasMaxLength(128)
                .HasColumnName("PRE_Opis");
            entity.Property(e => e.PrePaszport)
                .HasMaxLength(9)
                .HasColumnName("PRE_Paszport");
            entity.Property(e => e.PrePelneDaneAdresowePfron).HasColumnName("PRE_PelneDaneAdresowePFRON");
            entity.Property(e => e.PrePesel)
                .HasMaxLength(11)
                .HasColumnName("PRE_Pesel");
            entity.Property(e => e.PrePlec)
                .HasMaxLength(2)
                .HasColumnName("PRE_Plec");
            entity.Property(e => e.PrePodkartaPodDochod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODKartaPodDochod");
            entity.Property(e => e.PrePodkartaPodPrzychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODKartaPodPrzychod");
            entity.Property(e => e.PrePodkosztyTytul).HasColumnName("PRE_PODKosztyTytul");
            entity.Property(e => e.PrePodmiotTyp)
                .HasDefaultValue((short)3)
                .HasColumnName("PRE_PodmiotTyp");
            entity.Property(e => e.PrePodmnoznikKoszty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODMnoznikKoszty");
            entity.Property(e => e.PrePodmnoznikUlga)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODMnoznikUlga");
            entity.Property(e => e.PrePodnieLiczKoszty50).HasColumnName("PRE_PODNieLiczKoszty50");
            entity.Property(e => e.PrePodniePobierZalFis).HasColumnName("PRE_PODNiePobierZalFIS");
            entity.Property(e => e.PrePodniePomnDochUlga).HasColumnName("PRE_PODNiePomnDochUlga");
            entity.Property(e => e.PrePodnieStosPrzedlZalFis).HasColumnName("PRE_PODNieStosPrzedlZalFIS");
            entity.Property(e => e.PrePodnierezydent).HasColumnName("PRE_PODNierezydent");
            entity.Property(e => e.PrePodnipZagraniczny)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRE_PODNipZagraniczny");
            entity.Property(e => e.PrePodnipZagranicznyRodzaj).HasColumnName("PRE_PODNipZagranicznyRodzaj");
            entity.Property(e => e.PrePodprocKosztyUzysk)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODProcKosztyUzysk");
            entity.Property(e => e.PrePodprogiPodatkowe).HasColumnName("PRE_PODProgiPodatkowe");
            entity.Property(e => e.PrePodryczaltDochod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODRyczaltDochod");
            entity.Property(e => e.PrePodryczaltPrzychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODRyczaltPrzychod");
            entity.Property(e => e.PrePodstPrawRozw)
                .HasMaxLength(72)
                .HasDefaultValue("")
                .HasColumnName("PRE_PodstPrawRozw");
            entity.Property(e => e.PrePodulgaDodatkowa).HasColumnName("PRE_PODUlgaDodatkowa");
            entity.Property(e => e.PrePodulgaMnoznikL)
                .HasDefaultValue((short)1)
                .HasColumnName("PRE_PODUlgaMnoznikL");
            entity.Property(e => e.PrePodulgaMnoznikM)
                .HasDefaultValue((short)1)
                .HasColumnName("PRE_PODUlgaMnoznikM");
            entity.Property(e => e.PrePodurzSkarbId).HasColumnName("PRE_PODUrzSkarbId");
            entity.Property(e => e.PrePodzaniechPodat).HasColumnName("PRE_PODZaniechPodat");
            entity.Property(e => e.PrePodzasOgolneDochod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODZasOgolneDochod");
            entity.Property(e => e.PrePodzasOgolnePrzychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PODZasOgolnePrzychod");
            entity.Property(e => e.PrePodzwolPit).HasColumnName("PRE_PODZwolPIT");
            entity.Property(e => e.PrePodzwolPit26).HasColumnName("PRE_PODZwolPIT26");
            entity.Property(e => e.PrePodzwolPitrok).HasColumnName("PRE_PODZwolPITRok");
            entity.Property(e => e.PrePomocPublicznaPfron).HasColumnName("PRE_PomocPublicznaPFRON");
            entity.Property(e => e.PrePpkdataObnizenia)
                .HasColumnType("datetime")
                .HasColumnName("PRE_PPKDataObnizenia");
            entity.Property(e => e.PrePpkdataSkladkiDodatkowej)
                .HasColumnType("datetime")
                .HasColumnName("PRE_PPKDataSkladkiDodatkowej");
            entity.Property(e => e.PrePpkindywSklDodatFirma).HasColumnName("PRE_PPKIndywSklDodatFirma");
            entity.Property(e => e.PrePpkobnizenieSkladki).HasColumnName("PRE_PPKObnizenieSkladki");
            entity.Property(e => e.PrePpkokresDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_PPKOkresDo");
            entity.Property(e => e.PrePpkokresOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_PPKOkresOd");
            entity.Property(e => e.PrePpkprzekazDaneKontaktowe).HasColumnName("PRE_PPKPrzekazDaneKontaktowe");
            entity.Property(e => e.PrePpksklDodatFirma)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PRE_PPKSklDodatFirma");
            entity.Property(e => e.PrePpksklDodatPrac)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PRE_PPKSklDodatPrac");
            entity.Property(e => e.PrePpksklPodstPrac)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PRE_PPKSklPodstPrac");
            entity.Property(e => e.PrePraId).HasColumnName("PRE_PraId");
            entity.Property(e => e.PrePrawoEr).HasColumnName("PRE_PrawoER");
            entity.Property(e => e.PrePrmetatL)
                .HasDefaultValue((short)1)
                .HasColumnName("PRE_PRMEtatL");
            entity.Property(e => e.PrePrmetatM)
                .HasDefaultValue((short)2)
                .HasColumnName("PRE_PRMEtatM");
            entity.Property(e => e.PrePrmkalId).HasColumnName("PRE_PRMKalId");
            entity.Property(e => e.PrePrmminimalna).HasColumnName("PRE_PRMMinimalna");
            entity.Property(e => e.PrePrmpracaRodzic).HasColumnName("PRE_PRMPracaRodzic");
            entity.Property(e => e.PrePrmstawka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PRMStawka");
            entity.Property(e => e.PrePrmwymiar)
                .HasDefaultValue((byte)1)
                .HasColumnName("PRE_PRMWymiar");
            entity.Property(e => e.PrePrzekroczInformacja).HasColumnName("PRE_PrzekroczInformacja");
            entity.Property(e => e.PrePrzekroczKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PrzekroczKwota");
            entity.Property(e => e.PrePrzekroczMiesiac).HasColumnName("PRE_PrzekroczMiesiac");
            entity.Property(e => e.PrePrzekroczRok).HasColumnName("PRE_PrzekroczRok");
            entity.Property(e => e.PrePrzekroczenie).HasColumnName("PRE_Przekroczenie");
            entity.Property(e => e.PrePrzelozony)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("PRE_Przelozony");
            entity.Property(e => e.PrePrzychPoprzRok)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_PrzychPoprzRok");
            entity.Property(e => e.PreRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("PRE_RachunekNr");
            entity.Property(e => e.PreRachunekNrMikro)
                .HasMaxLength(51)
                .HasDefaultValue("")
                .HasColumnName("PRE_RachunekNrMikro");
            entity.Property(e => e.PreRefundDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_RefundDo");
            entity.Property(e => e.PreRefundOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_RefundOd");
            entity.Property(e => e.PreRefundacjaKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_RefundacjaKwota");
            entity.Property(e => e.PreRodzajDokumentu).HasColumnName("PRE_RodzajDokumentu");
            entity.Property(e => e.PreStNiepelnosp).HasColumnName("PRE_StNiepelnosp");
            entity.Property(e => e.PreStaModId).HasColumnName("PRE_StaModId");
            entity.Property(e => e.PreStaZalId).HasColumnName("PRE_StaZalId");
            entity.Property(e => e.PreStanCywilny)
                .HasMaxLength(30)
                .HasColumnName("PRE_StanCywilny");
            entity.Property(e => e.PreStronaInicjujaca).HasColumnName("PRE_StronaInicjujaca");
            entity.Property(e => e.PreSynchronizacjaTna)
                .HasDefaultValue((byte)1)
                .HasColumnName("PRE_SynchronizacjaTNA");
            entity.Property(e => e.PreTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_TelefonSms");
            entity.Property(e => e.PreTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PRE_TS_Mod");
            entity.Property(e => e.PreTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PRE_TS_Zal");
            entity.Property(e => e.PreTymczasowy).HasColumnName("PRE_Tymczasowy");
            entity.Property(e => e.PreTypPracownika).HasColumnName("PRE_TypPracownika");
            entity.Property(e => e.PreUbzchorDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZChorDo");
            entity.Property(e => e.PreUbzchorKod).HasColumnName("PRE_UBZChorKod");
            entity.Property(e => e.PreUbzchorOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZChorOd");
            entity.Property(e => e.PreUbzdochodUbMies)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_UBZDochodUbMies");
            entity.Property(e => e.PreUbzemerDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZEmerDo");
            entity.Property(e => e.PreUbzemerKod).HasColumnName("PRE_UBZEmerKod");
            entity.Property(e => e.PreUbzemerOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZEmerOd");
            entity.Property(e => e.PreUbzformaOpodat).HasColumnName("PRE_UBZFormaOpodat");
            entity.Property(e => e.PreUbzjestChorobowe).HasColumnName("PRE_UBZJestChorobowe");
            entity.Property(e => e.PreUbzjestDobrChorobowe).HasColumnName("PRE_UBZJestDobrChorobowe");
            entity.Property(e => e.PreUbzjestDobrEmerytal).HasColumnName("PRE_UBZJestDobrEmerytal");
            entity.Property(e => e.PreUbzjestDobrRentowe).HasColumnName("PRE_UBZJestDobrRentowe");
            entity.Property(e => e.PreUbzjestDobrZdrow).HasColumnName("PRE_UBZJestDobrZdrow");
            entity.Property(e => e.PreUbzjestEmerytal).HasColumnName("PRE_UBZJestEmerytal");
            entity.Property(e => e.PreUbzjestRentowe).HasColumnName("PRE_UBZJestRentowe");
            entity.Property(e => e.PreUbzjestWypad).HasColumnName("PRE_UBZJestWypad");
            entity.Property(e => e.PreUbzograniczSklZdrow).HasColumnName("PRE_UBZOgraniczSklZdrow");
            entity.Property(e => e.PreUbzoplacZdrowPrzychUbRok).HasColumnName("PRE_UBZOplacZdrowPrzychUbRok");
            entity.Property(e => e.PreUbzprzychWlascDekl)
                .HasDefaultValue((byte)1)
                .HasColumnName("PRE_UBZPrzychWlascDekl");
            entity.Property(e => e.PreUbzprzychodBiezRok)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_UBZPrzychodBiezRok");
            entity.Property(e => e.PreUbzprzychodUbRok)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_UBZPrzychodUbRok");
            entity.Property(e => e.PreUbzrentDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZRentDo");
            entity.Property(e => e.PreUbzrentKod).HasColumnName("PRE_UBZRentKod");
            entity.Property(e => e.PreUbzrentOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZRentOd");
            entity.Property(e => e.PreUbztyuId).HasColumnName("PRE_UBZTyuId");
            entity.Property(e => e.PreUbzwlascFormaOpodatBrak).HasColumnName("PRE_UBZWlascFormaOpodatBrak");
            entity.Property(e => e.PreUbzwlascFormaOpodatBrakIlosc).HasColumnName("PRE_UBZWlascFormaOpodatBrakIlosc");
            entity.Property(e => e.PreUbzwlascFormaOpodatKarta).HasColumnName("PRE_UBZWlascFormaOpodatKarta");
            entity.Property(e => e.PreUbzwlascFormaOpodatKartaIlosc).HasColumnName("PRE_UBZWlascFormaOpodatKartaIlosc");
            entity.Property(e => e.PreUbzwlascFormaOpodatLiniowy).HasColumnName("PRE_UBZWlascFormaOpodatLiniowy");
            entity.Property(e => e.PreUbzwlascFormaOpodatLiniowyBazId).HasColumnName("PRE_UBZWlascFormaOpodatLiniowyBazId");
            entity.Property(e => e.PreUbzwlascFormaOpodatLiniowyDane).HasColumnName("PRE_UBZWlascFormaOpodatLiniowyDane");
            entity.Property(e => e.PreUbzwlascFormaOpodatLiniowySklZdrow).HasColumnName("PRE_UBZWlascFormaOpodatLiniowySklZdrow");
            entity.Property(e => e.PreUbzwlascFormaOpodatRyczalt).HasColumnName("PRE_UBZWlascFormaOpodatRyczalt");
            entity.Property(e => e.PreUbzwlascFormaOpodatRyczaltBazId).HasColumnName("PRE_UBZWlascFormaOpodatRyczaltBazId");
            entity.Property(e => e.PreUbzwlascFormaOpodatRyczaltDane).HasColumnName("PRE_UBZWlascFormaOpodatRyczaltDane");
            entity.Property(e => e.PreUbzwlascFormaOpodatRyczaltSklZdrow).HasColumnName("PRE_UBZWlascFormaOpodatRyczaltSklZdrow");
            entity.Property(e => e.PreUbzwlascFormaOpodatRyczaltUbRok).HasColumnName("PRE_UBZWlascFormaOpodatRyczaltUbRok");
            entity.Property(e => e.PreUbzwlascFormaOpodatSkala).HasColumnName("PRE_UBZWlascFormaOpodatSkala");
            entity.Property(e => e.PreUbzwlascFormaOpodatSkalaBazId).HasColumnName("PRE_UBZWlascFormaOpodatSkalaBazId");
            entity.Property(e => e.PreUbzwlascFormaOpodatSkalaDane).HasColumnName("PRE_UBZWlascFormaOpodatSkalaDane");
            entity.Property(e => e.PreUbzwlascFormaOpodatSkalaSklZdrow).HasColumnName("PRE_UBZWlascFormaOpodatSkalaSklZdrow");
            entity.Property(e => e.PreUbzwypadDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZWypadDo");
            entity.Property(e => e.PreUbzwypadKod).HasColumnName("PRE_UBZWypadKod");
            entity.Property(e => e.PreUbzzdrowDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZZdrowDo");
            entity.Property(e => e.PreUbzzdrowDobrOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZZdrowDobrOd");
            entity.Property(e => e.PreUbzzdrowKod).HasColumnName("PRE_UBZZdrowKod");
            entity.Property(e => e.PreUbzzdrowKwotaPierwSkl)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_UBZZdrowKwotaPierwSkl");
            entity.Property(e => e.PreUbzzdrowOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZZdrowOd");
            entity.Property(e => e.PreUbzzusOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_UBZZusOd");
            entity.Property(e => e.PreWarSzczegolne)
                .HasMaxLength(9)
                .HasColumnName("PRE_WarSzczegolne");
            entity.Property(e => e.PreWarSzczegolneDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_WarSzczegolneDo");
            entity.Property(e => e.PreWarSzczegolneOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_WarSzczegolneOd");
            entity.Property(e => e.PreWaznoscBadanOkres)
                .HasColumnType("datetime")
                .HasColumnName("PRE_WaznoscBadanOkres");
            entity.Property(e => e.PreWlascicielId).HasColumnName("PRE_WlascicielId");
            entity.Property(e => e.PreWspolGosp).HasColumnName("PRE_WspolGosp");
            entity.Property(e => e.PreWychPodstEmerRentMax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRE_WychPodstEmerRentMax");
            entity.Property(e => e.PreWychPodstEmerRentOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_WychPodstEmerRentOd");
            entity.Property(e => e.PreWypNaKonto).HasColumnName("PRE_WypNaKonto");
            entity.Property(e => e.PreWzrostZatrudnieniaPfron).HasColumnName("PRE_WzrostZatrudnieniaPFRON");
            entity.Property(e => e.PreZakId).HasColumnName("PRE_ZakId");
            entity.Property(e => e.PreZamZamiastMld).HasColumnName("PRE_ZamZamiastMld");
            entity.Property(e => e.PreZamadres2)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMAdres2");
            entity.Property(e => e.PreZamgmina)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMGmina");
            entity.Property(e => e.PreZamkodKraju)
                .HasMaxLength(2)
                .HasDefaultValue("")
                .HasColumnName("PRE_ZAMKodKraju");
            entity.Property(e => e.PreZamkodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRE_ZAMKodPocztowy");
            entity.Property(e => e.PreZamkraj)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMKraj");
            entity.Property(e => e.PreZammiasto)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMMiasto");
            entity.Property(e => e.PreZamnrDomu)
                .HasMaxLength(10)
                .HasColumnName("PRE_ZAMNrDomu");
            entity.Property(e => e.PreZamnrLokalu)
                .HasMaxLength(10)
                .HasColumnName("PRE_ZAMNrLokalu");
            entity.Property(e => e.PreZampoczta)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMPoczta");
            entity.Property(e => e.PreZampowiat)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMPowiat");
            entity.Property(e => e.PreZamulica)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMUlica");
            entity.Property(e => e.PreZamwojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("PRE_ZAMWojewodztwo");
            entity.Property(e => e.PreZastepowany)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("PRE_Zastepowany");
            entity.Property(e => e.PreZastepowanyId).HasColumnName("PRE_ZastepowanyId");
            entity.Property(e => e.PreZastepowanyLista).HasColumnName("PRE_ZastepowanyLista");
            entity.Property(e => e.PreZatrudRozwUmowyPfron).HasColumnName("PRE_ZatrudRozwUmowyPFRON");
            entity.Property(e => e.PreZatrudnionyDo)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ZatrudnionyDo");
            entity.Property(e => e.PreZatrudnionyOd)
                .HasColumnType("datetime")
                .HasColumnName("PRE_ZatrudnionyOd");
            entity.Property(e => e.PreZestCzasuPracy).HasColumnName("PRE_ZestCzasuPracy");
            entity.Property(e => e.PreZrgId).HasColumnName("PRE_ZrgId");

            entity.HasOne(d => d.PreBna).WithMany(p => p.PracEtatyPreBnas)
                .HasForeignKey(d => d.PreBnaId)
                .HasConstraintName("FK_PREBnaLink");

            entity.HasOne(d => d.PreBnaIdMikroNavigation).WithMany(p => p.PracEtatyPreBnaIdMikroNavigations)
                .HasForeignKey(d => d.PreBnaIdMikro)
                .HasConstraintName("FK_PREBnaMikroLink");

            entity.HasOne(d => d.PreCnt).WithMany(p => p.PracEtaties)
                .HasForeignKey(d => d.PreCntId)
                .HasConstraintName("FK_PRECntLink");

            entity.HasOne(d => d.PreDkmIdKodZawoduNavigation).WithMany(p => p.PracEtatyPreDkmIdKodZawoduNavigations)
                .HasForeignKey(d => d.PreDkmIdKodZawodu)
                .HasConstraintName("FK_PRE_DkmIdKodZawodu");

            entity.HasOne(d => d.PreDkmIdPracodawcaNavigation).WithMany(p => p.PracEtatyPreDkmIdPracodawcaNavigations)
                .HasForeignKey(d => d.PreDkmIdPracodawca)
                .HasConstraintName("FK_PRE_DkmIdPracodawca");

            entity.HasOne(d => d.PreDzl).WithMany(p => p.PracEtaties)
                .HasForeignKey(d => d.PreDzlId)
                .HasConstraintName("FK_PREDzlLink");

            entity.HasOne(d => d.PreEtadkmIdFunkcjaNavigation).WithMany(p => p.PracEtatyPreEtadkmIdFunkcjaNavigations)
                .HasForeignKey(d => d.PreEtadkmIdFunkcja)
                .HasConstraintName("FK_PRE_ETADkmIdFunkcja");

            entity.HasOne(d => d.PreEtadkmIdStanowiskoNavigation).WithMany(p => p.PracEtatyPreEtadkmIdStanowiskoNavigations)
                .HasForeignKey(d => d.PreEtadkmIdStanowisko)
                .HasConstraintName("FK_PRE_ETADkmIdStanowisko");

            entity.HasOne(d => d.PreEtadkmIdWypowPowodNavigation).WithMany(p => p.PracEtatyPreEtadkmIdWypowPowodNavigations)
                .HasForeignKey(d => d.PreEtadkmIdWypowPowod)
                .HasConstraintName("FK_PRE_ETADkmIdWypowPowod");

            entity.HasOne(d => d.PreFpl).WithMany(p => p.PracEtaties)
                .HasForeignKey(d => d.PreFplId)
                .HasConstraintName("FK_PREFplLink");

            entity.HasOne(d => d.PreKal).WithMany(p => p.PracEtatyPreKals)
                .HasForeignKey(d => d.PreKalId)
                .HasConstraintName("FK_PREKalLink");

            entity.HasOne(d => d.PreKat).WithMany(p => p.PracEtaties)
                .HasForeignKey(d => d.PreKatId)
                .HasConstraintName("FK_PREKategoria");

            entity.HasOne(d => d.PrePra).WithMany(p => p.PracEtatyPrePras)
                .HasForeignKey(d => d.PrePraId)
                .HasConstraintName("FK_PREPraLink");

            entity.HasOne(d => d.PrePrmkal).WithMany(p => p.PracEtatyPrePrmkals)
                .HasForeignKey(d => d.PrePrmkalId)
                .HasConstraintName("FK_PREPRMKalLink");

            entity.HasOne(d => d.PreUbztyu).WithMany(p => p.PracEtaties)
                .HasForeignKey(d => d.PreUbztyuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRETyuLink");

            entity.HasOne(d => d.PreWlasciciel).WithMany(p => p.PracEtatyPreWlasciciels)
                .HasForeignKey(d => d.PreWlascicielId)
                .HasConstraintName("FK_PREWlascicielLink");

            entity.HasOne(d => d.PreZak).WithMany(p => p.PracEtaties)
                .HasForeignKey(d => d.PreZakId)
                .HasConstraintName("FK_PREZakLink");

            entity.HasOne(d => d.PreZastepowanyNavigation).WithMany(p => p.PracEtatyPreZastepowanyNavigations)
                .HasForeignKey(d => d.PreZastepowanyId)
                .HasConstraintName("FK_PREZastepowanyLink");

            entity.HasOne(d => d.PreZrg).WithMany(p => p.PracEtaties)
                .HasForeignKey(d => d.PreZrgId)
                .HasConstraintName("FK_PREZrgId");
        });

        modelBuilder.Entity<PracKartyRcp>(entity =>
        {
            entity.HasKey(e => e.PkrPkrId)
                .HasName("PKR_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracKartyRcp", "CDN");

            entity.HasIndex(e => new { e.PkrPrcId, e.PkrNumer, e.PkrOkresOd }, "PKRNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PkrPrcId, "PKRPrcId").HasFillFactor(100);

            entity.Property(e => e.PkrPkrId).HasColumnName("PKR_PkrId");
            entity.Property(e => e.PkrNumer)
                .HasMaxLength(20)
                .HasColumnName("PKR_Numer");
            entity.Property(e => e.PkrOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("PKR_OkresDo");
            entity.Property(e => e.PkrOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("PKR_OkresOd");
            entity.Property(e => e.PkrPrcId).HasColumnName("PKR_PrcId");

            entity.HasOne(d => d.PkrPrc).WithMany(p => p.PracKartyRcps)
                .HasForeignKey(d => d.PkrPrcId)
                .HasConstraintName("FK_PKRPrcId");
        });

        modelBuilder.Entity<PracKod>(entity =>
        {
            entity.HasKey(e => e.PraPraId)
                .HasName("PRA_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracKod", "CDN", tb =>
                {
                    tb.HasTrigger("PracKod2WypSkladniki_Delete_Trigger");
                    tb.HasTrigger("PracKod_DeleteHandler");
                    tb.HasTrigger("PracKod_Delete_Trigger");
                    tb.HasTrigger("PracKod_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.PraImportRowId, "PRAGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PraKod, "PRAKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PraEpdostep, e.PraEpdostepOkresOd, e.PraEpdostepOkresDo }, "PracKodOkresOdOkresDo").HasFillFactor(100);

            entity.Property(e => e.PraPraId).HasColumnName("PRA_PraId");
            entity.Property(e => e.PraArchiwalny).HasColumnName("PRA_Archiwalny");
            entity.Property(e => e.PraEpdostep).HasColumnName("PRA_EPDostep");
            entity.Property(e => e.PraEpdostepOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("PRA_EPDostepOkresDo");
            entity.Property(e => e.PraEpdostepOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("PRA_EPDostepOkresOd");
            entity.Property(e => e.PraEpemail)
                .HasMaxLength(127)
                .HasDefaultValue("")
                .HasColumnName("PRA_EPEmail");
            entity.Property(e => e.PraEpnrPokoju)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRA_EPNrPokoju");
            entity.Property(e => e.PraEptelefon)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRA_EPTelefon");
            entity.Property(e => e.PraHasloDoWydrukow)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("PRA_HasloDoWydrukow");
            entity.Property(e => e.PraImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PRA_ImportAppId");
            entity.Property(e => e.PraImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PRA_ImportRowId");
            entity.Property(e => e.PraKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRA_Kod");
            entity.Property(e => e.PraNadrzedny).HasColumnName("PRA_Nadrzedny");
            entity.Property(e => e.PraParentId).HasColumnName("PRA_ParentId");
            entity.Property(e => e.PraTsExport)
                .HasColumnType("datetime")
                .HasColumnName("PRA_TS_Export");
        });

        modelBuilder.Entity<PracKwotyWlasc>(entity =>
        {
            entity.HasKey(e => e.PkwPkwId)
                .HasName("PKW_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracKwotyWlasc", "CDN");

            entity.HasIndex(e => e.PkwMiesiac, "PKWMiesiac").HasFillFactor(100);

            entity.HasIndex(e => e.PkwPraId, "PKWPraId").HasFillFactor(100);

            entity.HasIndex(e => e.PkwRok, "PKWRok").HasFillFactor(100);

            entity.HasIndex(e => e.PkwTyp, "PKWTyp").HasFillFactor(100);

            entity.Property(e => e.PkwPkwId).HasColumnName("PKW_PkwId");
            entity.Property(e => e.PkwMiesiac).HasColumnName("PKW_Miesiac");
            entity.Property(e => e.PkwPraId).HasColumnName("PKW_PraId");
            entity.Property(e => e.PkwRok).HasColumnName("PKW_Rok");
            entity.Property(e => e.PkwTyp).HasColumnName("PKW_Typ");
            entity.Property(e => e.PkwWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PKW_Wartosc");

            entity.HasOne(d => d.PkwPra).WithMany(p => p.PracKwotyWlascs)
                .HasForeignKey(d => d.PkwPraId)
                .HasConstraintName("FK_PraId");
        });

        modelBuilder.Entity<PracLimit>(entity =>
        {
            entity.HasKey(e => e.PlnPlnId)
                .HasName("PLN_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracLimit", "CDN", tb => tb.HasTrigger("PracLimit_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PlnLnbId, "PLNLnbLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.PlnNazwa, e.PlnOkresOd, e.PlnWaznyOd }, "PLNLnbOkrNazwa").HasFillFactor(100);

            entity.HasIndex(e => e.PlnPraId, "PLNPraLink").HasFillFactor(100);

            entity.Property(e => e.PlnPlnId).HasColumnName("PLN_PlnId");
            entity.Property(e => e.PlnEkwiwalentCzas)
                .HasDefaultValueSql("((-2))")
                .HasColumnType("datetime")
                .HasColumnName("PLN_EkwiwalentCzas");
            entity.Property(e => e.PlnEkwiwalentDodatkowyCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_EkwiwalentDodatkowyCzas");
            entity.Property(e => e.PlnEkwiwalentF)
                .HasDefaultValueSql("((0.0000))")
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_EkwiwalentF");
            entity.Property(e => e.PlnImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PLN_ImportRowId");
            entity.Property(e => e.PlnKorektaOkres).HasColumnName("PLN_KorektaOkres");
            entity.Property(e => e.PlnKorektaPomniejszajaca).HasColumnName("PLN_KorektaPomniejszajaca");
            entity.Property(e => e.PlnKorektaRecznaCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_KorektaRecznaCzas");
            entity.Property(e => e.PlnKorektaRecznaF)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_KorektaRecznaF");
            entity.Property(e => e.PlnLicznikMies).HasColumnName("PLN_LicznikMies");
            entity.Property(e => e.PlnLimitDodatkowy).HasColumnName("PLN_LimitDodatkowy");
            entity.Property(e => e.PlnLimitDodatkowyDni).HasColumnName("PLN_LimitDodatkowyDni");
            entity.Property(e => e.PlnLnbId).HasColumnName("PLN_LnbId");
            entity.Property(e => e.PlnMiesiac30).HasColumnName("PLN_Miesiac30");
            entity.Property(e => e.PlnNaZadanie).HasColumnName("PLN_NaZadanie");
            entity.Property(e => e.PlnNaZadaniePoprzedni).HasColumnName("PLN_NaZadaniePoprzedni");
            entity.Property(e => e.PlnNalezneCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_NalezneCzas");
            entity.Property(e => e.PlnNalezneF)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_NalezneF");
            entity.Property(e => e.PlnNalezneLacznieCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_NalezneLacznieCzas");
            entity.Property(e => e.PlnNalezneLacznieF)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_NalezneLacznieF");
            entity.Property(e => e.PlnNazwa)
                .HasMaxLength(50)
                .HasColumnName("PLN_Nazwa");
            entity.Property(e => e.PlnOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("PLN_OkresDo");
            entity.Property(e => e.PlnOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("PLN_OkresOd");
            entity.Property(e => e.PlnOpeModId).HasColumnName("PLN_OpeModId");
            entity.Property(e => e.PlnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PLN_OpeModKod");
            entity.Property(e => e.PlnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PLN_OpeModNazwisko");
            entity.Property(e => e.PlnOpeZalId).HasColumnName("PLN_OpeZalId");
            entity.Property(e => e.PlnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PLN_OpeZalKod");
            entity.Property(e => e.PlnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PLN_OpeZalNazwisko");
            entity.Property(e => e.PlnOpis)
                .HasMaxLength(200)
                .HasColumnName("PLN_Opis");
            entity.Property(e => e.PlnParentId).HasColumnName("PLN_ParentId");
            entity.Property(e => e.PlnPierwszaPraca).HasColumnName("PLN_PierwszaPraca");
            entity.Property(e => e.PlnPlanowanyCzas)
                .HasDefaultValueSql("((-2))")
                .HasColumnType("datetime")
                .HasColumnName("PLN_PlanowanyCzas");
            entity.Property(e => e.PlnPlanowanyF)
                .HasDefaultValueSql("((0.0000))")
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_PlanowanyF");
            entity.Property(e => e.PlnPozostaloCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_PozostaloCzas");
            entity.Property(e => e.PlnPozostaloF)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_PozostaloF");
            entity.Property(e => e.PlnPraId).HasColumnName("PLN_PraId");
            entity.Property(e => e.PlnProporcjonalnyCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_ProporcjonalnyCzas");
            entity.Property(e => e.PlnProporcjonalnyF)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_ProporcjonalnyF");
            entity.Property(e => e.PlnPrzeniesienieCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_PrzeniesienieCzas");
            entity.Property(e => e.PlnPrzeniesienieF)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_PrzeniesienieF");
            entity.Property(e => e.PlnRok).HasColumnName("PLN_Rok");
            entity.Property(e => e.PlnStaModId).HasColumnName("PLN_StaModId");
            entity.Property(e => e.PlnStaZalId).HasColumnName("PLN_StaZalId");
            entity.Property(e => e.PlnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PLN_TS_Mod");
            entity.Property(e => e.PlnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PLN_TS_Zal");
            entity.Property(e => e.PlnWaznyOd)
                .HasColumnType("datetime")
                .HasColumnName("PLN_WaznyOd");
            entity.Property(e => e.PlnWykorzystaneCzas)
                .HasColumnType("datetime")
                .HasColumnName("PLN_WykorzystaneCzas");
            entity.Property(e => e.PlnWykorzystaneF)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PLN_WykorzystaneF");
            entity.Property(e => e.PlnZakonczony).HasColumnName("PLN_Zakonczony");

            entity.HasOne(d => d.PlnLnb).WithMany(p => p.PracLimits)
                .HasForeignKey(d => d.PlnLnbId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLNLnbLink");

            entity.HasOne(d => d.PlnPra).WithMany(p => p.PracLimits)
                .HasForeignKey(d => d.PlnPraId)
                .HasConstraintName("FK_PLNPraLink");
        });

        modelBuilder.Entity<PracNieobec>(entity =>
        {
            entity.HasKey(e => e.PnbPnbId)
                .HasName("PNB_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracNieobec", "CDN", tb =>
                {
                    tb.HasTrigger("PracNieobec2WypSkladniki_Delete_Trigger");
                    tb.HasTrigger("PracNieobec_InsertUpdateTrigger");
                    tb.HasTrigger("PracNieobec_UpdateTrigger");
                });

            entity.HasIndex(e => e.PnbParentId, "PNBParentId").HasFillFactor(100);

            entity.HasIndex(e => e.PnbPraId, "PNBPraLink").HasFillFactor(100);

            entity.HasIndex(e => e.PnbTnbId, "PNBTnbLink").HasFillFactor(100);

            entity.HasIndex(e => e.PnbTyuId, "PNBTyuLink").HasFillFactor(100);

            entity.Property(e => e.PnbPnbId).HasColumnName("PNB_PnbId");
            entity.Property(e => e.PnbCalodzienna).HasColumnName("PNB_Calodzienna");
            entity.Property(e => e.PnbDniKalend).HasColumnName("PNB_DniKalend");
            entity.Property(e => e.PnbDniPracy).HasColumnName("PNB_DniPracy");
            entity.Property(e => e.PnbDziecko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PNB_Dziecko");
            entity.Property(e => e.PnbGodz)
                .HasColumnType("datetime")
                .HasColumnName("PNB_Godz");
            entity.Property(e => e.PnbImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PNB_ImportRowId");
            entity.Property(e => e.PnbKodNieobecnosci)
                .HasMaxLength(4)
                .HasColumnName("PNB_KodNieobecnosci");
            entity.Property(e => e.PnbKontynuacjaOz).HasColumnName("PNB_KontynuacjaOZ");
            entity.Property(e => e.PnbNaPodstPoprzNb).HasColumnName("PNB_NaPodstPoprzNB");
            entity.Property(e => e.PnbNumer)
                .HasMaxLength(20)
                .HasColumnName("PNB_Numer");
            entity.Property(e => e.PnbOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("PNB_OkresDo");
            entity.Property(e => e.PnbOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("PNB_OkresOd");
            entity.Property(e => e.PnbOpeModId).HasColumnName("PNB_OpeModId");
            entity.Property(e => e.PnbOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PNB_OpeModKod");
            entity.Property(e => e.PnbOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PNB_OpeModNazwisko");
            entity.Property(e => e.PnbOpeZalId).HasColumnName("PNB_OpeZalId");
            entity.Property(e => e.PnbOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PNB_OpeZalKod");
            entity.Property(e => e.PnbOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PNB_OpeZalNazwisko");
            entity.Property(e => e.PnbOpis)
                .HasMaxLength(253)
                .HasColumnName("PNB_Opis");
            entity.Property(e => e.PnbParentId).HasColumnName("PNB_ParentId");
            entity.Property(e => e.PnbPierwszyDzienChor).HasColumnName("PNB_PierwszyDzienChor");
            entity.Property(e => e.PnbPomnZasilek).HasColumnName("PNB_PomnZasilek");
            entity.Property(e => e.PnbPraId).HasColumnName("PNB_PraId");
            entity.Property(e => e.PnbPracaRodzic).HasColumnName("PNB_PracaRodzic");
            entity.Property(e => e.PnbPrzedluzenieOz).HasColumnName("PNB_PrzedluzenieOZ");
            entity.Property(e => e.PnbPrzyczyna).HasColumnName("PNB_Przyczyna");
            entity.Property(e => e.PnbRdzId).HasColumnName("PNB_RdzId");
            entity.Property(e => e.PnbRozliczData)
                .HasColumnType("datetime")
                .HasColumnName("PNB_RozliczData");
            entity.Property(e => e.PnbRozliczWdniu).HasColumnName("PNB_RozliczWDniu");
            entity.Property(e => e.PnbRozliczona).HasColumnName("PNB_Rozliczona");
            entity.Property(e => e.PnbSeria)
                .HasMaxLength(10)
                .HasColumnName("PNB_Seria");
            entity.Property(e => e.PnbStaModId).HasColumnName("PNB_StaModId");
            entity.Property(e => e.PnbStaZalId).HasColumnName("PNB_StaZalId");
            entity.Property(e => e.PnbTnbId).HasColumnName("PNB_TnbId");
            entity.Property(e => e.PnbTryb).HasColumnName("PNB_Tryb");
            entity.Property(e => e.PnbTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PNB_TS_Mod");
            entity.Property(e => e.PnbTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PNB_TS_Zal");
            entity.Property(e => e.PnbTyuId).HasColumnName("PNB_TyuId");
            entity.Property(e => e.PnbUrlopNaZadanie).HasColumnName("PNB_UrlopNaZadanie");
            entity.Property(e => e.PnbWymiarL).HasColumnName("PNB_WymiarL");
            entity.Property(e => e.PnbWymiarM).HasColumnName("PNB_WymiarM");
            entity.Property(e => e.PnbZastepca).HasColumnName("PNB_Zastepca");
            entity.Property(e => e.PnbZlecZasilekPit).HasColumnName("PNB_ZlecZasilekPIT");
            entity.Property(e => e.PnbZrodlo).HasColumnName("PNB_Zrodlo");
            entity.Property(e => e.PnbZwolFpfgsp).HasColumnName("PNB_ZwolFPFGSP");
            entity.Property(e => e.PnbZwolnDostarczone)
                .HasColumnType("datetime")
                .HasColumnName("PNB_ZwolnDostarczone");
            entity.Property(e => e.PnbZwolnWystawione)
                .HasColumnType("datetime")
                .HasColumnName("PNB_ZwolnWystawione");

            entity.HasOne(d => d.PnbPra).WithMany(p => p.PracNieobecPnbPras)
                .HasForeignKey(d => d.PnbPraId)
                .HasConstraintName("FK_PNBPraLink");

            entity.HasOne(d => d.PnbRdz).WithMany(p => p.PracNieobecs)
                .HasForeignKey(d => d.PnbRdzId)
                .HasConstraintName("FK_PNBRdzLink");

            entity.HasOne(d => d.PnbTnb).WithMany(p => p.PracNieobecs)
                .HasForeignKey(d => d.PnbTnbId)
                .HasConstraintName("FK_PNBTnbLink");

            entity.HasOne(d => d.PnbTyu).WithMany(p => p.PracNieobecs)
                .HasForeignKey(d => d.PnbTyuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNBTyuLink");

            entity.HasOne(d => d.PnbZastepcaNavigation).WithMany(p => p.PracNieobecPnbZastepcaNavigations)
                .HasForeignKey(d => d.PnbZastepca)
                .HasConstraintName("FK_PNBZastepcaPraLink");
        });

        modelBuilder.Entity<PracPitDzialalnosci>(entity =>
        {
            entity.HasKey(e => e.PpdPpdid)
                .HasName("PPD_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPitDzialalnosci", "CDN");

            entity.HasIndex(e => new { e.PpdPpdid, e.PpdGlowna }, "PPDGlowna").HasFillFactor(100);

            entity.Property(e => e.PpdPpdid).HasColumnName("PPD_PPDId");
            entity.Property(e => e.PpdBazaId)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_BazaID");
            entity.Property(e => e.PpdDataRozpocz)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_DataRozpocz");
            entity.Property(e => e.PpdDataRozpoczOld)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_DataRozpoczOLD");
            entity.Property(e => e.PpdDkNid).HasColumnName("PPD_DkNID");
            entity.Property(e => e.PpdDochod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Dochod");
            entity.Property(e => e.PpdDochodZwolniony)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_DochodZwolniony");
            entity.Property(e => e.PpdDodatkoweKoszty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_DodatkoweKoszty");
            entity.Property(e => e.PpdDodatkowePrzychody)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_DodatkowePrzychody");
            entity.Property(e => e.PpdGlowna).HasColumnName("PPD_Glowna");
            entity.Property(e => e.PpdKoszty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Koszty");
            entity.Property(e => e.PpdLp).HasColumnName("PPD_Lp");
            entity.Property(e => e.PpdMalzonek).HasColumnName("PPD_Malzonek");
            entity.Property(e => e.PpdMiejsce)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_Miejsce");
            entity.Property(e => e.PpdNazwa)
                .HasMaxLength(256)
                .HasDefaultValue("")
                .HasColumnName("PPD_Nazwa");
            entity.Property(e => e.PpdNip)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("PPD_NIP");
            entity.Property(e => e.PpdNumer).HasColumnName("PPD_Numer");
            entity.Property(e => e.PpdOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("PPD_OkresDo");
            entity.Property(e => e.PpdOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("PPD_OkresOd");
            entity.Property(e => e.PpdPpmid).HasColumnName("PPD_PPMID");
            entity.Property(e => e.PpdPrzychody)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Przychody");
            entity.Property(e => e.PpdRegon)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("PPD_REGON");
            entity.Property(e => e.PpdRodzaj)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_Rodzaj");
            entity.Property(e => e.PpdStawka10Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka10Przychod");
            entity.Property(e => e.PpdStawka10PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka10PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka11Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka11Przychod");
            entity.Property(e => e.PpdStawka11PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka11PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka1Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka1Przychod");
            entity.Property(e => e.PpdStawka1PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka1PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka2Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka2Przychod");
            entity.Property(e => e.PpdStawka2PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka2PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka3Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka3Przychod");
            entity.Property(e => e.PpdStawka3PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka3PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka4Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka4Przychod");
            entity.Property(e => e.PpdStawka4PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka4PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka5Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka5Przychod");
            entity.Property(e => e.PpdStawka5PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka5PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka6Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka6Przychod");
            entity.Property(e => e.PpdStawka6PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka6PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka7Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka7Przychod");
            entity.Property(e => e.PpdStawka7PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka7PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka8Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka8Przychod");
            entity.Property(e => e.PpdStawka8PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka8PrzychodDodatkowy");
            entity.Property(e => e.PpdStawka9Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka9Przychod");
            entity.Property(e => e.PpdStawka9PrzychodDodatkowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Stawka9PrzychodDodatkowy");
            entity.Property(e => e.PpdStrata)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_Strata");
            entity.Property(e => e.PpdTyp).HasColumnName("PPD_Typ");
            entity.Property(e => e.PpdUdzialL)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("PPD_UdzialL");
            entity.Property(e => e.PpdUdzialM)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_UdzialM");
            entity.Property(e => e.PpdWygenerowana).HasColumnName("PPD_Wygenerowana");
            entity.Property(e => e.PpdZasady).HasColumnName("PPD_Zasady");
            entity.Property(e => e.PpdZbazy).HasColumnName("PPD_ZBazy");
            entity.Property(e => e.PpdZezwData)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_ZezwData");
            entity.Property(e => e.PpdZezwDataOld)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_ZezwDataOLD");
            entity.Property(e => e.PpdZezwNr)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPD_ZezwNr");
            entity.Property(e => e.PpdZwiekszenieDochodu)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPD_ZwiekszenieDochodu");

            entity.HasOne(d => d.PpdDkN).WithMany(p => p.PracPitDzialalnoscis)
                .HasForeignKey(d => d.PpdDkNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPDDkNID");

            entity.HasOne(d => d.PpdPpm).WithMany(p => p.PracPitDzialalnoscis)
                .HasForeignKey(d => d.PpdPpmid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPDPPMID");
        });

        modelBuilder.Entity<PracPitKwoty>(entity =>
        {
            entity.HasKey(e => e.PpkPpkid)
                .HasName("PPK_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPitKwoty", "CDN");

            entity.HasIndex(e => new { e.PpkPpmid, e.PpkNumer }, "PPKPitKwoty")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PpkPpkid).HasColumnName("PPK_PPKId");
            entity.Property(e => e.PpkNumer).HasColumnName("PPK_Numer");
            entity.Property(e => e.PpkPpmid).HasColumnName("PPK_PPMId");
            entity.Property(e => e.PpkWartosc)
                .HasMaxLength(254)
                .HasColumnName("PPK_Wartosc");

            entity.HasOne(d => d.PpkPpm).WithMany(p => p.PracPitKwoties)
                .HasForeignKey(d => d.PpkPpmid)
                .HasConstraintName("FK_PPKPitKwoty");
        });

        modelBuilder.Entity<PracPitMy>(entity =>
        {
            entity.HasKey(e => e.PpmPpmid)
                .HasName("PPM_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPitMies", "CDN");

            entity.HasIndex(e => new { e.PpmPraId, e.PpmRok, e.PpmMiesiac }, "PPMPraId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PpmPpmid).HasColumnName("PPM_PPMId");
            entity.Property(e => e.PpmMiesiac).HasColumnName("PPM_Miesiac");
            entity.Property(e => e.PpmPraId).HasColumnName("PPM_PraId");
            entity.Property(e => e.PpmRok).HasColumnName("PPM_Rok");
            entity.Property(e => e.PpmZablokowane).HasColumnName("PPM_Zablokowane");

            entity.HasOne(d => d.PpmPra).WithMany(p => p.PracPitMies)
                .HasForeignKey(d => d.PpmPraId)
                .HasConstraintName("FK_PPMPraId");
        });

        modelBuilder.Entity<PracPitUdzialy>(entity =>
        {
            entity.HasKey(e => e.PpuPpuid)
                .HasName("PPU_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPitUdzialy", "CDN");

            entity.Property(e => e.PpuPpuid).HasColumnName("PPU_PPUID");
            entity.Property(e => e.PpuDataDo)
                .HasColumnType("datetime")
                .HasColumnName("PPU_DataDo");
            entity.Property(e => e.PpuDataOd)
                .HasColumnType("datetime")
                .HasColumnName("PPU_DataOd");
            entity.Property(e => e.PpuKoszty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Koszty");
            entity.Property(e => e.PpuPpdid).HasColumnName("PPU_PPDID");
            entity.Property(e => e.PpuPrzychody)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Przychody");
            entity.Property(e => e.PpuStawka10Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka10Przychod");
            entity.Property(e => e.PpuStawka11Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka11Przychod");
            entity.Property(e => e.PpuStawka1Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka1Przychod");
            entity.Property(e => e.PpuStawka2Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka2Przychod");
            entity.Property(e => e.PpuStawka3Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka3Przychod");
            entity.Property(e => e.PpuStawka4Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka4Przychod");
            entity.Property(e => e.PpuStawka5Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka5Przychod");
            entity.Property(e => e.PpuStawka6Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka6Przychod");
            entity.Property(e => e.PpuStawka7Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka7Przychod");
            entity.Property(e => e.PpuStawka8Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka8Przychod");
            entity.Property(e => e.PpuStawka9Przychod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_Stawka9Przychod");
            entity.Property(e => e.PpuUdzialL)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("PPU_UdzialL");
            entity.Property(e => e.PpuUdzialM)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PPU_UdzialM");

            entity.HasOne(d => d.PpuPpd).WithMany(p => p.PracPitUdzialies)
                .HasForeignKey(d => d.PpuPpdid)
                .HasConstraintName("FK_PPUPPDID");
        });

        modelBuilder.Entity<PracPlanDni>(entity =>
        {
            entity.HasKey(e => e.PplPplId)
                .HasName("PPL_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPlanDni", "CDN", tb => tb.HasTrigger("PracPlanDni_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.PplPraId, e.PplData }, "PPLData")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PplPplId).HasColumnName("PPL_PplId");
            entity.Property(e => e.PplData)
                .HasColumnType("datetime")
                .HasColumnName("PPL_Data");
            entity.Property(e => e.PplImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PPL_ImportRowId");
            entity.Property(e => e.PplOdwId).HasColumnName("PPL_OdwId");
            entity.Property(e => e.PplOpeModId).HasColumnName("PPL_OpeModId");
            entity.Property(e => e.PplOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPL_OpeModKod");
            entity.Property(e => e.PplOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPL_OpeModNazwisko");
            entity.Property(e => e.PplOpeZalId).HasColumnName("PPL_OpeZalId");
            entity.Property(e => e.PplOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPL_OpeZalKod");
            entity.Property(e => e.PplOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPL_OpeZalNazwisko");
            entity.Property(e => e.PplPraId).HasColumnName("PPL_PraId");
            entity.Property(e => e.PplStaModId).HasColumnName("PPL_StaModId");
            entity.Property(e => e.PplStaZalId).HasColumnName("PPL_StaZalId");
            entity.Property(e => e.PplTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PPL_TS_Mod");
            entity.Property(e => e.PplTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PPL_TS_Zal");
            entity.Property(e => e.PplTypDnia).HasColumnName("PPL_TypDnia");
            entity.Property(e => e.PplZrodlo).HasColumnName("PPL_Zrodlo");

            entity.HasOne(d => d.PplOdw).WithMany(p => p.PracPlanDnis)
                .HasForeignKey(d => d.PplOdwId)
                .HasConstraintName("FK_PPLOdwLink");

            entity.HasOne(d => d.PplPra).WithMany(p => p.PracPlanDnis)
                .HasForeignKey(d => d.PplPraId)
                .HasConstraintName("FK_PPLData");
        });

        modelBuilder.Entity<PracPlanDniGodz>(entity =>
        {
            entity.HasKey(e => e.PglPglId)
                .HasName("PGL_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPlanDniGodz", "CDN", tb => tb.HasTrigger("PracPlanDniGodz_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PglLp, "PGLLp").HasFillFactor(100);

            entity.HasIndex(e => e.PglPplId, "PGLPplLink").HasFillFactor(100);

            entity.Property(e => e.PglPglId).HasColumnName("PGL_PglId");
            entity.Property(e => e.PglDoGodziny)
                .HasColumnType("datetime")
                .HasColumnName("PGL_DoGodziny");
            entity.Property(e => e.PglDzlId).HasColumnName("PGL_DzlId");
            entity.Property(e => e.PglImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PGL_ImportRowId");
            entity.Property(e => e.PglLp).HasColumnName("PGL_Lp");
            entity.Property(e => e.PglOdGodziny)
                .HasColumnType("datetime")
                .HasColumnName("PGL_OdGodziny");
            entity.Property(e => e.PglPplId).HasColumnName("PGL_PplId");
            entity.Property(e => e.PglPrjId).HasColumnName("PGL_PrjId");
            entity.Property(e => e.PglStrefa).HasColumnName("PGL_Strefa");
            entity.Property(e => e.PglUwagiPlanu)
                .HasMaxLength(1024)
                .HasDefaultValue("")
                .HasColumnName("PGL_UwagiPlanu");

            entity.HasOne(d => d.PglPpl).WithMany(p => p.PracPlanDniGodzs)
                .HasForeignKey(d => d.PglPplId)
                .HasConstraintName("FK_PGLPplLink");
        });

        modelBuilder.Entity<PracPracaDni>(entity =>
        {
            entity.HasKey(e => e.PprPprId)
                .HasName("PPR_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPracaDni", "CDN", tb => tb.HasTrigger("PracPracaDni_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.PprPraId, e.PprData }, "PPRData")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PprPprId).HasColumnName("PPR_PprId");
            entity.Property(e => e.PprData)
                .HasColumnType("datetime")
                .HasColumnName("PPR_Data");
            entity.Property(e => e.PprImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PPR_ImportRowId");
            entity.Property(e => e.PprOpeModId).HasColumnName("PPR_OpeModId");
            entity.Property(e => e.PprOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPR_OpeModKod");
            entity.Property(e => e.PprOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPR_OpeModNazwisko");
            entity.Property(e => e.PprOpeZalId).HasColumnName("PPR_OpeZalId");
            entity.Property(e => e.PprOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPR_OpeZalKod");
            entity.Property(e => e.PprOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PPR_OpeZalNazwisko");
            entity.Property(e => e.PprPraId).HasColumnName("PPR_PraId");
            entity.Property(e => e.PprStaModId).HasColumnName("PPR_StaModId");
            entity.Property(e => e.PprStaZalId).HasColumnName("PPR_StaZalId");
            entity.Property(e => e.PprTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PPR_TS_Mod");
            entity.Property(e => e.PprTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PPR_TS_Zal");
            entity.Property(e => e.PprZrodlo).HasColumnName("PPR_Zrodlo");

            entity.HasOne(d => d.PprPra).WithMany(p => p.PracPracaDnis)
                .HasForeignKey(d => d.PprPraId)
                .HasConstraintName("FK_PPRData");
        });

        modelBuilder.Entity<PracPracaDniGodz>(entity =>
        {
            entity.HasKey(e => e.PgrPgrId)
                .HasName("PGR_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracPracaDniGodz", "CDN", tb => tb.HasTrigger("PracPracaDniGodz_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PgrLp, "PGRLp").HasFillFactor(100);

            entity.HasIndex(e => e.PgrPprId, "PGRPprLink").HasFillFactor(100);

            entity.Property(e => e.PgrPgrId).HasColumnName("PGR_PgrId");
            entity.Property(e => e.PgrDoGodziny)
                .HasColumnType("datetime")
                .HasColumnName("PGR_DoGodziny");
            entity.Property(e => e.PgrDzlId).HasColumnName("PGR_DzlId");
            entity.Property(e => e.PgrImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PGR_ImportRowId");
            entity.Property(e => e.PgrLp).HasColumnName("PGR_Lp");
            entity.Property(e => e.PgrOdGodziny)
                .HasColumnType("datetime")
                .HasColumnName("PGR_OdGodziny");
            entity.Property(e => e.PgrOdbNadg).HasColumnName("PGR_OdbNadg");
            entity.Property(e => e.PgrPprId).HasColumnName("PGR_PprId");
            entity.Property(e => e.PgrPrjId).HasColumnName("PGR_PrjId");
            entity.Property(e => e.PgrStrefa).HasColumnName("PGR_Strefa");
            entity.Property(e => e.PgrUwagi)
                .HasMaxLength(1024)
                .HasColumnName("PGR_Uwagi");

            entity.HasOne(d => d.PgrPpr).WithMany(p => p.PracPracaDniGodzs)
                .HasForeignKey(d => d.PgrPprId)
                .HasConstraintName("FK_PGRPprLink");
        });

        modelBuilder.Entity<PracSchorzenium>(entity =>
        {
            entity.HasKey(e => e.PrsPrsId)
                .HasName("PRS_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracSchorzenia", "CDN", tb => tb.HasTrigger("PracSchorzenia_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.PrsDkmId, e.PrsPraId }, "PRSDkmId")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PrsPraId, "PRSPraLink").HasFillFactor(100);

            entity.Property(e => e.PrsPrsId).HasColumnName("PRS_PrsId");
            entity.Property(e => e.PrsDataDo)
                .HasColumnType("datetime")
                .HasColumnName("PRS_DataDo");
            entity.Property(e => e.PrsDataOd)
                .HasColumnType("datetime")
                .HasColumnName("PRS_DataOd");
            entity.Property(e => e.PrsDkmId).HasColumnName("PRS_DkmId");
            entity.Property(e => e.PrsImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PRS_ImportRowId");
            entity.Property(e => e.PrsOpeModId).HasColumnName("PRS_OpeModId");
            entity.Property(e => e.PrsOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRS_OpeModKod");
            entity.Property(e => e.PrsOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRS_OpeModNazwisko");
            entity.Property(e => e.PrsOpeZalId).HasColumnName("PRS_OpeZalId");
            entity.Property(e => e.PrsOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRS_OpeZalKod");
            entity.Property(e => e.PrsOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRS_OpeZalNazwisko");
            entity.Property(e => e.PrsPraId).HasColumnName("PRS_PraId");
            entity.Property(e => e.PrsStaModId).HasColumnName("PRS_StaModId");
            entity.Property(e => e.PrsStaZalId).HasColumnName("PRS_StaZalId");
            entity.Property(e => e.PrsTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PRS_TS_Mod");
            entity.Property(e => e.PrsTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PRS_TS_Zal");

            entity.HasOne(d => d.PrsDkm).WithMany(p => p.PracSchorzenia)
                .HasForeignKey(d => d.PrsDkmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRSDkmId");

            entity.HasOne(d => d.PrsPra).WithMany(p => p.PracSchorzenia)
                .HasForeignKey(d => d.PrsPraId)
                .HasConstraintName("FK_PRSPraLink");
        });

        modelBuilder.Entity<PracTeczki>(entity =>
        {
            entity.HasKey(e => e.PrtPrtId)
                .HasName("PK_PRT_PrtId")
                .HasFillFactor(100);

            entity.ToTable("PracTeczki", "CDN");

            entity.HasIndex(e => e.PrtDdfId, "PRTDdfLink").HasFillFactor(100);

            entity.HasIndex(e => e.PrtEteId, "PRTEteLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.PrtPraId, e.PrtNumerPelny }, "PRTPraLink")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PrtNumerPelny, "PrtNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PrtPrtId).HasColumnName("PRT_PrtId");
            entity.Property(e => e.PrtDabId).HasColumnName("PRT_DabId");
            entity.Property(e => e.PrtDataDok)
                .HasColumnType("datetime")
                .HasColumnName("PRT_DataDok");
            entity.Property(e => e.PrtDdfId).HasColumnName("PRT_DdfId");
            entity.Property(e => e.PrtDkmId).HasColumnName("PRT_DkmId");
            entity.Property(e => e.PrtEteId).HasColumnName("PRT_EteId");
            entity.Property(e => e.PrtEteNazwa)
                .HasMaxLength(256)
                .HasColumnName("PRT_EteNazwa");
            entity.Property(e => e.PrtHrmPraId).HasColumnName("PRT_HrmPraId");
            entity.Property(e => e.PrtNumerNr).HasColumnName("PRT_NumerNr");
            entity.Property(e => e.PrtNumerObcy)
                .HasMaxLength(80)
                .HasColumnName("PRT_NumerObcy");
            entity.Property(e => e.PrtNumerPelny)
                .HasMaxLength(80)
                .HasComputedColumnSql("([CDN].[NUMERPELNYET]([PRT_NUMERNR],[PRT_NUMERSTRING]))", false)
                .HasColumnName("PRT_NumerPelny");
            entity.Property(e => e.PrtNumerString)
                .HasMaxLength(80)
                .HasColumnName("PRT_NumerString");
            entity.Property(e => e.PrtOpeModId).HasColumnName("PRT_OpeModId");
            entity.Property(e => e.PrtOpeModKod)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("PRT_OpeModKod");
            entity.Property(e => e.PrtOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRT_OpeModNazwisko");
            entity.Property(e => e.PrtOpeZalId).HasColumnName("PRT_OpeZalId");
            entity.Property(e => e.PrtOpeZalKod)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("PRT_OpeZalKod");
            entity.Property(e => e.PrtOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PRT_OpeZalNazwisko");
            entity.Property(e => e.PrtOpis)
                .HasMaxLength(256)
                .HasColumnName("PRT_Opis");
            entity.Property(e => e.PrtPraId).HasColumnName("PRT_PraId");
            entity.Property(e => e.PrtPraKod)
                .HasMaxLength(20)
                .HasColumnName("PRT_PraKod");
            entity.Property(e => e.PrtStaModId).HasColumnName("PRT_StaModId");
            entity.Property(e => e.PrtStaZalId).HasColumnName("PRT_StaZalId");
            entity.Property(e => e.PrtTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PRT_TS_Mod");
            entity.Property(e => e.PrtTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PRT_TS_Zal");
            entity.Property(e => e.PrtTytul)
                .HasMaxLength(256)
                .HasColumnName("PRT_Tytul");
            entity.Property(e => e.PrtTytulId).HasColumnName("PRT_TytulId");

            entity.HasOne(d => d.PrtDdf).WithMany(p => p.PracTeczkis)
                .HasForeignKey(d => d.PrtDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRTDdfLink");

            entity.HasOne(d => d.PrtDkm).WithMany(p => p.PracTeczkis)
                .HasForeignKey(d => d.PrtDkmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRTDkmId");

            entity.HasOne(d => d.PrtPra).WithMany(p => p.PracTeczkis)
                .HasForeignKey(d => d.PrtPraId)
                .HasConstraintName("FK_PRTPraLink");
        });

        modelBuilder.Entity<PracTeczkiDokumenty>(entity =>
        {
            entity.HasKey(e => e.PtdPtdId)
                .HasName("PK_PTD_PtdId")
                .HasFillFactor(100);

            entity.ToTable("PracTeczkiDokumenty", "CDN", tb => tb.HasTrigger("PracTeczkiDokumenty_Delete_Trigger"));

            entity.HasIndex(e => new { e.PtdPrtId, e.PtdPtdId }, "PTDPrtLink")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PtdPtdId).HasColumnName("PTD_PtdId");
            entity.Property(e => e.PtdArchiwalny).HasColumnName("PTD_Archiwalny");
            entity.Property(e => e.PtdDabId).HasColumnName("PTD_DabId");
            entity.Property(e => e.PtdDataEksportu)
                .HasColumnType("datetime")
                .HasColumnName("PTD_DataEksportu");
            entity.Property(e => e.PtdDataPodpisu)
                .HasColumnType("datetime")
                .HasColumnName("PTD_DataPodpisu");
            entity.Property(e => e.PtdFileMode).HasColumnName("PTD_FileMode");
            entity.Property(e => e.PtdNazwa)
                .HasMaxLength(256)
                .HasColumnName("PTD_Nazwa");
            entity.Property(e => e.PtdNazwaPliku)
                .HasMaxLength(255)
                .HasColumnName("PTD_NazwaPliku");
            entity.Property(e => e.PtdOpeEditId).HasColumnName("PTD_OpeEditId");
            entity.Property(e => e.PtdOpeModId).HasColumnName("PTD_OpeModID");
            entity.Property(e => e.PtdOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTD_OpeModKod");
            entity.Property(e => e.PtdOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PTD_OpeModNazwisko");
            entity.Property(e => e.PtdOpeZalId).HasColumnName("PTD_OpeZalID");
            entity.Property(e => e.PtdOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTD_OpeZalKod");
            entity.Property(e => e.PtdOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PTD_OpeZalNazwisko");
            entity.Property(e => e.PtdPodpis).HasColumnName("PTD_Podpis");
            entity.Property(e => e.PtdPrtId).HasColumnName("PTD_PrtId");
            entity.Property(e => e.PtdRodzajLokalizacji).HasColumnName("PTD_RodzajLokalizacji");
            entity.Property(e => e.PtdSciezka)
                .HasMaxLength(256)
                .HasColumnName("PTD_Sciezka");
            entity.Property(e => e.PtdStaEditId).HasColumnName("PTD_StaEditId");
            entity.Property(e => e.PtdStaModId).HasColumnName("PTD_StaModId");
            entity.Property(e => e.PtdStaZalId).HasColumnName("PTD_StaZalId");
            entity.Property(e => e.PtdTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PTD_TS_Mod");
            entity.Property(e => e.PtdTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PTD_TS_Zal");
            entity.Property(e => e.PtdWbazie).HasColumnName("PTD_WBazie");
            entity.Property(e => e.PtdWersja).HasColumnName("PTD_Wersja");

            entity.HasOne(d => d.PtdPrt).WithMany(p => p.PracTeczkiDokumenties)
                .HasForeignKey(d => d.PtdPrtId)
                .HasConstraintName("FK_PTDPrtLink");
        });

        modelBuilder.Entity<PracZestaw>(entity =>
        {
            entity.HasKey(e => e.PzePzeId)
                .HasName("PZE_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracZestaw", "CDN", tb => tb.HasTrigger("PracZestaw_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PzeParentId, "KeyParentId").HasFillFactor(100);

            entity.HasIndex(e => new { e.PzePraId, e.PzeOkresOd }, "PZEPraLink").HasFillFactor(100);

            entity.Property(e => e.PzePzeId).HasColumnName("PZE_PzeId");
            entity.Property(e => e.PzeCzas)
                .HasColumnType("datetime")
                .HasColumnName("PZE_Czas");
            entity.Property(e => e.PzeCzasNoc)
                .HasColumnType("datetime")
                .HasColumnName("PZE_CzasNoc");
            entity.Property(e => e.PzeCzasSw)
                .HasColumnType("datetime")
                .HasColumnName("PZE_CzasSW");
            entity.Property(e => e.PzeCzasWolne)
                .HasColumnType("datetime")
                .HasColumnName("PZE_CzasWolne");
            entity.Property(e => e.PzeIlosc).HasColumnName("PZE_Ilosc");
            entity.Property(e => e.PzeImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PZE_ImportRowId");
            entity.Property(e => e.PzeNadgodziny100)
                .HasColumnType("datetime")
                .HasColumnName("PZE_Nadgodziny100");
            entity.Property(e => e.PzeNadgodziny50)
                .HasColumnType("datetime")
                .HasColumnName("PZE_Nadgodziny50");
            entity.Property(e => e.PzeNadgodzinySw)
                .HasColumnType("datetime")
                .HasColumnName("PZE_NadgodzinySW");
            entity.Property(e => e.PzeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("PZE_OkresDo");
            entity.Property(e => e.PzeOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("PZE_OkresOd");
            entity.Property(e => e.PzeOpeModId).HasColumnName("PZE_OpeModId");
            entity.Property(e => e.PzeOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZE_OpeModKod");
            entity.Property(e => e.PzeOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PZE_OpeModNazwisko");
            entity.Property(e => e.PzeOpeZalId).HasColumnName("PZE_OpeZalId");
            entity.Property(e => e.PzeOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZE_OpeZalKod");
            entity.Property(e => e.PzeOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PZE_OpeZalNazwisko");
            entity.Property(e => e.PzeParentId).HasColumnName("PZE_ParentId");
            entity.Property(e => e.PzePraId).HasColumnName("PZE_PraId");
            entity.Property(e => e.PzeStaModId).HasColumnName("PZE_StaModId");
            entity.Property(e => e.PzeStaZalId).HasColumnName("PZE_StaZalId");
            entity.Property(e => e.PzeTryb).HasColumnName("PZE_Tryb");
            entity.Property(e => e.PzeTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PZE_TS_Mod");
            entity.Property(e => e.PzeTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PZE_TS_Zal");
            entity.Property(e => e.PzeZrodlo).HasColumnName("PZE_Zrodlo");

            entity.HasOne(d => d.PzePra).WithMany(p => p.PracZestaws)
                .HasForeignKey(d => d.PzePraId)
                .HasConstraintName("FK_PZEPraLink");
        });

        modelBuilder.Entity<PracZestawElem>(entity =>
        {
            entity.HasKey(e => e.PzdPzdId)
                .HasName("PZD_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracZestawElem", "CDN", tb => tb.HasTrigger("PracZestawElem_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PzdPzeId, "PZDPzeLink").HasFillFactor(100);

            entity.Property(e => e.PzdPzdId).HasColumnName("PZD_PzdId");
            entity.Property(e => e.PzdCzas)
                .HasColumnType("datetime")
                .HasColumnName("PZD_Czas");
            entity.Property(e => e.PzdCzasNoc)
                .HasColumnType("datetime")
                .HasColumnName("PZD_CzasNoc");
            entity.Property(e => e.PzdCzasSw)
                .HasColumnType("datetime")
                .HasColumnName("PZD_CzasSW");
            entity.Property(e => e.PzdCzasWolne)
                .HasColumnType("datetime")
                .HasColumnName("PZD_CzasWolne");
            entity.Property(e => e.PzdDstId).HasColumnName("PZD_DstId");
            entity.Property(e => e.PzdDzlId).HasColumnName("PZD_DzlId");
            entity.Property(e => e.PzdIlosc).HasColumnName("PZD_Ilosc");
            entity.Property(e => e.PzdImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PZD_ImportRowId");
            entity.Property(e => e.PzdNadgodziny100)
                .HasColumnType("datetime")
                .HasColumnName("PZD_Nadgodziny100");
            entity.Property(e => e.PzdNadgodziny50)
                .HasColumnType("datetime")
                .HasColumnName("PZD_Nadgodziny50");
            entity.Property(e => e.PzdNadgodzinySw)
                .HasColumnType("datetime")
                .HasColumnName("PZD_NadgodzinySW");
            entity.Property(e => e.PzdPrjId).HasColumnName("PZD_PrjId");
            entity.Property(e => e.PzdPzeId).HasColumnName("PZD_PzeId");

            entity.HasOne(d => d.PzdPze).WithMany(p => p.PracZestawElems)
                .HasForeignKey(d => d.PzdPzeId)
                .HasConstraintName("FK_PZDPzeLink");
        });

        modelBuilder.Entity<PracaSzczeg>(entity =>
        {
            entity.HasKey(e => e.SzpSzpid)
                .HasName("SZP_Primary")
                .HasFillFactor(100);

            entity.ToTable("PracaSzczeg", "CDN");

            entity.HasIndex(e => e.SzpZjeId, "SZPZjeLink").HasFillFactor(100);

            entity.Property(e => e.SzpSzpid).HasColumnName("SZP_SZPId");
            entity.Property(e => e.SzpOpis)
                .HasMaxLength(510)
                .HasColumnName("SZP_Opis");
            entity.Property(e => e.SzpPoziom).HasColumnName("SZP_Poziom");
            entity.Property(e => e.SzpSzczeg2).HasColumnName("SZP_Szczeg2");
            entity.Property(e => e.SzpWybieralny).HasColumnName("SZP_Wybieralny");
            entity.Property(e => e.SzpZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("SZP_ZjeId");
        });

        modelBuilder.Entity<Pracidx>(entity =>
        {
            entity.HasKey(e => e.PriPriId)
                .HasName("PRI_Primary")
                .HasFillFactor(100);

            entity.ToTable("Pracidx", "CDN", tb => tb.HasTrigger("PracIdx_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PriDzlId, "PRIDzlLink").HasFillFactor(100);

            entity.HasIndex(e => e.PriImportRowId, "PRIGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PriKod, e.PriPriId }, "PRIKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PriNazwisko, e.PriImie1, e.PriPriId }, "PRINazwisko")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PriArchiwalny, e.PriTyp, e.PriPraId, e.PriPriId }, "PRI_EP_Idx").HasFillFactor(100);

            entity.HasIndex(e => e.PriPraId, "PriPraId").HasFillFactor(100);

            entity.Property(e => e.PriPriId)
                .ValueGeneratedNever()
                .HasColumnName("PRI_PriId");
            entity.Property(e => e.PriAdresCentrum)
                .HasMaxLength(512)
                .HasDefaultValue("")
                .HasColumnName("PRI_AdresCentrum");
            entity.Property(e => e.PriAdresDzialu)
                .HasMaxLength(512)
                .HasColumnName("PRI_AdresDzialu");
            entity.Property(e => e.PriArchiwalny).HasColumnName("PRI_Archiwalny");
            entity.Property(e => e.PriCntId)
                .HasDefaultValue(3)
                .HasColumnName("PRI_CntId");
            entity.Property(e => e.PriDataDo)
                .HasColumnType("datetime")
                .HasColumnName("PRI_DataDo");
            entity.Property(e => e.PriDataOd)
                .HasColumnType("datetime")
                .HasColumnName("PRI_DataOd");
            entity.Property(e => e.PriDzlId)
                .HasDefaultValue(3)
                .HasColumnName("PRI_DzlId");
            entity.Property(e => e.PriImie1)
                .HasMaxLength(30)
                .HasColumnName("PRI_Imie1");
            entity.Property(e => e.PriImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PRI_ImportRowId");
            entity.Property(e => e.PriKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRI_Kod");
            entity.Property(e => e.PriNadrzedny).HasColumnName("PRI_Nadrzedny");
            entity.Property(e => e.PriNazwisko)
                .HasMaxLength(40)
                .HasColumnName("PRI_Nazwisko");
            entity.Property(e => e.PriOpis)
                .HasMaxLength(128)
                .HasColumnName("PRI_Opis");
            entity.Property(e => e.PriParentId).HasColumnName("PRI_ParentId");
            entity.Property(e => e.PriPesel)
                .HasMaxLength(11)
                .HasColumnName("PRI_Pesel");
            entity.Property(e => e.PriPraId).HasColumnName("PRI_PraId");
            entity.Property(e => e.PriTyp).HasColumnName("PRI_Typ");

            entity.HasOne(d => d.PriDzl).WithMany(p => p.Pracidxes)
                .HasForeignKey(d => d.PriDzlId)
                .HasConstraintName("FK_PRIDzlLink");

            entity.HasOne(d => d.PriPra).WithMany(p => p.Pracidxes)
                .HasForeignKey(d => d.PriPraId)
                .HasConstraintName("FK_PriPraId");
        });

        modelBuilder.Entity<PracownicyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PracownicyView", "CDN");

            entity.Property(e => e.Email)
                .HasMaxLength(127)
                .HasColumnName("EMail");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Imie).HasMaxLength(30);
            entity.Property(e => e.Kod)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.KorGmina).HasMaxLength(40);
            entity.Property(e => e.KorKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.KorKraj).HasMaxLength(40);
            entity.Property(e => e.KorMiasto).HasMaxLength(40);
            entity.Property(e => e.KorNrDomu).HasMaxLength(10);
            entity.Property(e => e.KorNrLokalu).HasMaxLength(10);
            entity.Property(e => e.KorPoczta).HasMaxLength(40);
            entity.Property(e => e.KorPowiat).HasMaxLength(40);
            entity.Property(e => e.KorUlica).HasMaxLength(40);
            entity.Property(e => e.KorWojewodztwo).HasMaxLength(40);
            entity.Property(e => e.MldGmina).HasMaxLength(40);
            entity.Property(e => e.MldKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MldKraj).HasMaxLength(40);
            entity.Property(e => e.MldMiasto).HasMaxLength(40);
            entity.Property(e => e.MldNrDomu).HasMaxLength(10);
            entity.Property(e => e.MldNrLokalu).HasMaxLength(10);
            entity.Property(e => e.MldPoczta).HasMaxLength(40);
            entity.Property(e => e.MldPowiat).HasMaxLength(40);
            entity.Property(e => e.MldUlica).HasMaxLength(40);
            entity.Property(e => e.MldWojewodztwo).HasMaxLength(40);
            entity.Property(e => e.Nazwisko).HasMaxLength(40);
            entity.Property(e => e.Nip)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NIP");
            entity.Property(e => e.Opis).HasMaxLength(1024);
            entity.Property(e => e.Pesel).HasMaxLength(11);
            entity.Property(e => e.PracSynchId)
                .HasMaxLength(36)
                .IsUnicode(false);
            entity.Property(e => e.Telefon1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Telefon2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Telefon3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("URL");
            entity.Property(e => e.ZamGmina).HasMaxLength(40);
            entity.Property(e => e.ZamKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ZamKraj).HasMaxLength(40);
            entity.Property(e => e.ZamMiasto).HasMaxLength(40);
            entity.Property(e => e.ZamNrDomu).HasMaxLength(10);
            entity.Property(e => e.ZamNrLokalu).HasMaxLength(10);
            entity.Property(e => e.ZamPoczta).HasMaxLength(40);
            entity.Property(e => e.ZamPowiat).HasMaxLength(40);
            entity.Property(e => e.ZamUlica).HasMaxLength(40);
            entity.Property(e => e.ZamWojewodztwo).HasMaxLength(40);
        });

        modelBuilder.Entity<PrmHistorium>(entity =>
        {
            entity.HasKey(e => new { e.PrHTrEid, e.PrHGidtyp, e.PrHGidnumer, e.PrHGidlp, e.PrHIdprm }).HasName("PrH_Primary");

            entity.ToTable("PrmHistoria", "CDN");

            entity.HasIndex(e => e.PrHIdprm, "PrHPrm");

            entity.Property(e => e.PrHTrEid).HasColumnName("PrH_TrEId");
            entity.Property(e => e.PrHGidtyp).HasColumnName("PrH_GIDTyp");
            entity.Property(e => e.PrHGidnumer).HasColumnName("PrH_GIDNumer");
            entity.Property(e => e.PrHGidlp).HasColumnName("PrH_GIDLp");
            entity.Property(e => e.PrHIdprm).HasColumnName("PrH_IDPrm");
            entity.Property(e => e.PrHGidfirma).HasColumnName("PrH_GIDFirma");
            entity.Property(e => e.PrHId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrH_ID");
            entity.Property(e => e.PrHRabatEfektywny)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("PrH_RabatEfektywny");
            entity.Property(e => e.PrHRabatKwota)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("PrH_RabatKwota");
            entity.Property(e => e.PrHRabatKwotaDokl)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("PrH_RabatKwotaDokl");
            entity.Property(e => e.PrHRabatProcent)
                .HasColumnType("decimal(12, 6)")
                .HasColumnName("PrH_RabatProcent");
            entity.Property(e => e.PrHRodzajRabatu).HasColumnName("PrH_RodzajRabatu");

            entity.HasOne(d => d.PrHTrE).WithMany(p => p.PrmHistoria)
                .HasForeignKey(d => d.PrHTrEid)
                .HasConstraintName("FK_PrHPrimary");
        });

        modelBuilder.Entity<PrmKarty>(entity =>
        {
            entity.HasKey(e => e.PrmId).HasName("XL_PRM_Primary");

            entity.ToTable("PrmKarty", "CDN");

            entity.HasIndex(e => e.PrmAkronim, "PrmAkronim").IsUnique();

            entity.HasIndex(e => new { e.PrmDataOd, e.PrmDataDo }, "PrmDataOd");

            entity.HasIndex(e => e.PrmPriorytet, "PrmPriorytet");

            entity.Property(e => e.PrmId).HasColumnName("PRM_Id");
            entity.Property(e => e.PrmAkronim)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PRM_Akronim");
            entity.Property(e => e.PrmAktywna).HasColumnName("PRM_Aktywna");
            entity.Property(e => e.PrmCykliczna)
                .HasDefaultValue(0)
                .HasColumnName("PRM_Cykliczna");
            entity.Property(e => e.PrmDataDo).HasColumnName("PRM_DataDo");
            entity.Property(e => e.PrmDataOd).HasColumnName("PRM_DataOd");
            entity.Property(e => e.PrmDokument).HasColumnName("PRM_Dokument");
            entity.Property(e => e.PrmLastMod).HasColumnName("PRM_LastMod");
            entity.Property(e => e.PrmPominPozostale).HasColumnName("PRM_PominPozostale");
            entity.Property(e => e.PrmPriorytet).HasColumnName("PRM_Priorytet");
            entity.Property(e => e.PrmPriorytetLp).HasColumnName("PRM_PriorytetLp");
            entity.Property(e => e.PrmSposobStosowania).HasColumnName("PRM_SposobStosowania");
            entity.Property(e => e.PrmStan).HasColumnName("PRM_Stan");
            entity.Property(e => e.PrmTyp).HasColumnName("PRM_Typ");
            entity.Property(e => e.PrmUwagi)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("PRM_Uwagi");
        });

        modelBuilder.Entity<ProdElem>(entity =>
        {
            entity.HasKey(e => e.PdEPdEid)
                .HasName("PdE_Primary")
                .HasFillFactor(100);

            entity.ToTable("ProdElem", "CDN", tb => tb.HasTrigger("ProdElem_Update_Trigger"));

            entity.HasIndex(e => e.PdEMagId, "PdEMagazyn").HasFillFactor(100);

            entity.HasIndex(e => e.PdETrEidRws, "PdERWS").HasFillFactor(100);

            entity.HasIndex(e => e.PdETwrId, "PdETowar").HasFillFactor(100);

            entity.HasIndex(e => new { e.PdETrEid, e.PdELp, e.PdEPdEid }, "PdETraElem")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PdEZwrId, "PdEZwrot").HasFillFactor(100);

            entity.Property(e => e.PdEPdEid).HasColumnName("PdE_PdEId");
            entity.Property(e => e.PdEDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("PdE_DataOpe");
            entity.Property(e => e.PdEDataWys)
                .HasColumnType("datetime")
                .HasColumnName("PdE_DataWys");
            entity.Property(e => e.PdEIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PdE_Ilosc");
            entity.Property(e => e.PdEIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PdE_IloscJM");
            entity.Property(e => e.PdEJm)
                .HasMaxLength(20)
                .HasColumnName("PdE_Jm");
            entity.Property(e => e.PdEJmCalkowite).HasColumnName("PdE_JmCalkowite");
            entity.Property(e => e.PdEJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PdE_JMPrzelicznikL");
            entity.Property(e => e.PdEJmprzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("PdE_JMPrzelicznikM");
            entity.Property(e => e.PdELp).HasColumnName("PdE_Lp");
            entity.Property(e => e.PdEMagId).HasColumnName("PdE_MagId");
            entity.Property(e => e.PdETrEid).HasColumnName("PdE_TrEId");
            entity.Property(e => e.PdETrEidRws).HasColumnName("PdE_TrEIdRWS");
            entity.Property(e => e.PdETwrId).HasColumnName("PdE_TwrId");
            entity.Property(e => e.PdETwrTyp).HasColumnName("PdE_TwrTyp");
            entity.Property(e => e.PdEWartoscZakupu)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PdE_WartoscZakupu");
            entity.Property(e => e.PdEWyborDostaw)
                .HasDefaultValue((byte)0)
                .HasColumnName("PdE_WyborDostaw");
            entity.Property(e => e.PdEZwrId).HasColumnName("PdE_ZwrId");

            entity.HasOne(d => d.PdEMag).WithMany(p => p.ProdElems)
                .HasForeignKey(d => d.PdEMagId)
                .HasConstraintName("FK_PdEMagazyn");

            entity.HasOne(d => d.PdETrE).WithMany(p => p.ProdElems)
                .HasForeignKey(d => d.PdETrEid)
                .HasConstraintName("FK_PdETraElem");

            entity.HasOne(d => d.PdETwr).WithMany(p => p.ProdElems)
                .HasForeignKey(d => d.PdETwrId)
                .HasConstraintName("FK_PdETowar");
        });

        modelBuilder.Entity<ProdReceptury>(entity =>
        {
            entity.HasKey(e => e.PdRPdRid)
                .HasName("PdR_Primary")
                .HasFillFactor(100);

            entity.ToTable("ProdReceptury", "CDN", tb => tb.HasTrigger("ProdReceptury_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.PdRTwrId, e.PdRKod }, "PdRTwrKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PdRPdRid).HasColumnName("PdR_PdRId");
            entity.Property(e => e.PdRDomyslna).HasColumnName("PdR_Domyslna");
            entity.Property(e => e.PdRIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PdR_Ilosc");
            entity.Property(e => e.PdRJm)
                .HasMaxLength(20)
                .HasColumnName("PdR_JM");
            entity.Property(e => e.PdRKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PdR_Kod");
            entity.Property(e => e.PdRNazwa)
                .HasMaxLength(50)
                .HasColumnName("PdR_Nazwa");
            entity.Property(e => e.PdROpeModId).HasColumnName("PdR_OpeModID");
            entity.Property(e => e.PdROpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PdR_OpeModKod");
            entity.Property(e => e.PdROpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PdR_OpeModNazwisko");
            entity.Property(e => e.PdROpeZalId).HasColumnName("PdR_OpeZalID");
            entity.Property(e => e.PdROpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PdR_OpeZalKod");
            entity.Property(e => e.PdROpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PdR_OpeZalNazwisko");
            entity.Property(e => e.PdROpis)
                .HasMaxLength(254)
                .HasColumnName("PdR_Opis");
            entity.Property(e => e.PdRStaModId).HasColumnName("PdR_StaModId");
            entity.Property(e => e.PdRStaZalId).HasColumnName("PdR_StaZalId");
            entity.Property(e => e.PdRTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PdR_TS_Mod");
            entity.Property(e => e.PdRTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PdR_TS_Zal");
            entity.Property(e => e.PdRTwrId).HasColumnName("PdR_TwrId");

            entity.HasOne(d => d.PdRTwr).WithMany(p => p.ProdRecepturies)
                .HasForeignKey(d => d.PdRTwrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PdRTwrKod");
        });

        modelBuilder.Entity<ProdSkladniki>(entity =>
        {
            entity.HasKey(e => e.PdSPdSid)
                .HasName("PdS_Primary")
                .HasFillFactor(100);

            entity.ToTable("ProdSkladniki", "CDN", tb => tb.HasTrigger("ProdSkladniki_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PdSMagId, "PdSMagazyn").HasFillFactor(100);

            entity.HasIndex(e => e.PdSProdId, "PdSProdukt").HasFillFactor(100);

            entity.HasIndex(e => new { e.PdSPdRid, e.PdSPdSid }, "PdSReceptura")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.PdSTwrId, "PdSTowar").HasFillFactor(100);

            entity.Property(e => e.PdSPdSid).HasColumnName("PdS_PdSId");
            entity.Property(e => e.PdSIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PdS_Ilosc");
            entity.Property(e => e.PdSIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PdS_IloscJM");
            entity.Property(e => e.PdSJm)
                .HasMaxLength(20)
                .HasColumnName("PdS_Jm");
            entity.Property(e => e.PdSJmcalkowite).HasColumnName("PdS_JMCalkowite");
            entity.Property(e => e.PdSJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PdS_JMPrzelicznikL");
            entity.Property(e => e.PdSJmprzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("PdS_JMPrzelicznikM");
            entity.Property(e => e.PdSLp).HasColumnName("PdS_Lp");
            entity.Property(e => e.PdSMagId).HasColumnName("PdS_MagId");
            entity.Property(e => e.PdSPdRid).HasColumnName("PdS_PdRId");
            entity.Property(e => e.PdSProdId).HasColumnName("PdS_ProdId");
            entity.Property(e => e.PdSTwrId).HasColumnName("PdS_TwrId");

            entity.HasOne(d => d.PdSMag).WithMany(p => p.ProdSkladnikis)
                .HasForeignKey(d => d.PdSMagId)
                .HasConstraintName("FK_PdSMagazyn");

            entity.HasOne(d => d.PdSPdR).WithMany(p => p.ProdSkladnikis)
                .HasForeignKey(d => d.PdSPdRid)
                .HasConstraintName("FK_PdSReceptura");

            entity.HasOne(d => d.PdSTwr).WithMany(p => p.ProdSkladnikis)
                .HasForeignKey(d => d.PdSTwrId)
                .HasConstraintName("FK_PdSTowar");
        });

        modelBuilder.Entity<Producenci>(entity =>
        {
            entity.HasKey(e => e.PrdPrdId)
                .HasName("Prd_Primary")
                .HasFillFactor(100);

            entity.ToTable("Producenci", "CDN");

            entity.HasIndex(e => e.PrdKod, "PrdKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.PrdNazwa, e.PrdPrdId }, "PrdNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PrdPrdId).HasColumnName("Prd_PrdId");
            entity.Property(e => e.PrdKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Prd_Kod");
            entity.Property(e => e.PrdLogo).HasColumnName("Prd_Logo");
            entity.Property(e => e.PrdNazwa)
                .HasMaxLength(250)
                .HasColumnName("Prd_Nazwa");
            entity.Property(e => e.PrdOpeModId).HasColumnName("Prd_OpeModId");
            entity.Property(e => e.PrdOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prd_OpeModKod");
            entity.Property(e => e.PrdOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Prd_OpeModNazwisko");
            entity.Property(e => e.PrdOpeZalId).HasColumnName("Prd_OpeZalId");
            entity.Property(e => e.PrdOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prd_OpeZalKod");
            entity.Property(e => e.PrdOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Prd_OpeZalNazwisko");
            entity.Property(e => e.PrdStaModId).HasColumnName("Prd_StaModId");
            entity.Property(e => e.PrdStaZalId).HasColumnName("Prd_StaZalId");
            entity.Property(e => e.PrdTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Prd_TS_Mod");
            entity.Property(e => e.PrdTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Prd_TS_Zal");
            entity.Property(e => e.PrdUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Prd_URL");
        });

        modelBuilder.Entity<ProducenciJezykObcy>(entity =>
        {
            entity.HasKey(e => new { e.PrdJPrdId, e.PrdJJezykId })
                .HasName("PrdJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("ProducenciJezykObcy", "CDN", tb =>
                {
                    tb.HasTrigger("ProducenciJezykObcy_Delete_Trigger");
                    tb.HasTrigger("ProducenciJezykObcy_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.PrdJPrdJid, "PrdJOID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.PrdJPrdId).HasColumnName("PrdJ_PrdID");
            entity.Property(e => e.PrdJJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("PrdJ_JezykID");
            entity.Property(e => e.PrdJMetaOpis)
                .HasMaxLength(320)
                .HasColumnName("PrdJ_MetaOpis");
            entity.Property(e => e.PrdJMetaSlowaKluczowe)
                .HasMaxLength(500)
                .HasColumnName("PrdJ_MetaSlowaKluczowe");
            entity.Property(e => e.PrdJMetaTytul)
                .HasMaxLength(100)
                .HasColumnName("PrdJ_MetaTytul");
            entity.Property(e => e.PrdJNazwaNag)
                .HasMaxLength(250)
                .HasColumnName("PrdJ_NazwaNag");
            entity.Property(e => e.PrdJOpisHtml).HasColumnName("PrdJ_OpisHTML");
            entity.Property(e => e.PrdJOpisKrotki)
                .HasMaxLength(500)
                .HasColumnName("PrdJ_OpisKrotki");
            entity.Property(e => e.PrdJPrdJid)
                .ValueGeneratedOnAdd()
                .HasColumnName("PrdJ_PrdJID");

            entity.HasOne(d => d.PrdJPrd).WithMany(p => p.ProducenciJezykObcies)
                .HasForeignKey(d => d.PrdJPrdId)
                .HasConstraintName("FK_PrdJOdoProducenci");
        });

        modelBuilder.Entity<Progi>(entity =>
        {
            entity.HasKey(e => new { e.PrgPrgId, e.PrgKwota })
                .HasName("PRG_Primary")
                .HasFillFactor(100);

            entity.ToTable("Progi", "CDN", tb => tb.HasTrigger("Progi_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.PrgPreId, "PRGPreLink").HasFillFactor(100);

            entity.Property(e => e.PrgPrgId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PRG_PrgId");
            entity.Property(e => e.PrgKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRG_Kwota");
            entity.Property(e => e.PrgImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("PRG_ImportRowId");
            entity.Property(e => e.PrgPreId).HasColumnName("PRG_PreId");
            entity.Property(e => e.PrgProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRG_Procent");

            entity.HasOne(d => d.PrgPre).WithMany(p => p.Progis)
                .HasForeignKey(d => d.PrgPreId)
                .HasConstraintName("FK_PRGPreLink");
        });

        modelBuilder.Entity<PrzWyrej>(entity =>
        {
            entity.HasKey(e => e.PwrPwrId)
                .HasName("PWR_Primary")
                .HasFillFactor(100);

            entity.ToTable("PrzWyrej", "CDN");

            entity.HasIndex(e => e.PwrZjeId, "PWRZjeLink").HasFillFactor(100);

            entity.Property(e => e.PwrPwrId).HasColumnName("PWR_PwrId");
            entity.Property(e => e.PwrOpis)
                .HasMaxLength(510)
                .HasColumnName("PWR_Opis");
            entity.Property(e => e.PwrPoziom).HasColumnName("PWR_Poziom");
            entity.Property(e => e.PwrPrzWyrej3).HasColumnName("PWR_PrzWyrej3");
            entity.Property(e => e.PwrWybieralny).HasColumnName("PWR_Wybieralny");
            entity.Property(e => e.PwrZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("PWR_ZjeId");
        });

        modelBuilder.Entity<PrzeszacWalutElem>(entity =>
        {
            entity.HasKey(e => e.PwePweid)
                .HasName("PWE_Primary")
                .HasFillFactor(100);

            entity.ToTable("PrzeszacWalutElem", "CDN");

            entity.HasIndex(e => new { e.PweAccWnId, e.PweKontoWn, e.PweAccMaId, e.PweKontoMa }, "PWEKonto").HasFillFactor(100);

            entity.HasIndex(e => new { e.PweKwota, e.PweSaldoWal, e.PweSaldoSys }, "PWEKwota").HasFillFactor(100);

            entity.HasIndex(e => e.PwePwnid, "PWEPWNID").HasFillFactor(100);

            entity.Property(e => e.PwePweid).HasColumnName("PWE_PWEId");
            entity.Property(e => e.PweAccMaId).HasColumnName("PWE_AccMaId");
            entity.Property(e => e.PweAccWnId).HasColumnName("PWE_AccWnId");
            entity.Property(e => e.PweKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PWE_KontoMa");
            entity.Property(e => e.PweKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PWE_KontoWn");
            entity.Property(e => e.PweKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PWE_Kwota");
            entity.Property(e => e.PwePwnid).HasColumnName("PWE_PWNId");
            entity.Property(e => e.PweSaldoSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PWE_SaldoSys");
            entity.Property(e => e.PweSaldoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PWE_SaldoWal");

            entity.HasOne(d => d.PweAccMa).WithMany(p => p.PrzeszacWalutElemPweAccMas)
                .HasForeignKey(d => d.PweAccMaId)
                .HasConstraintName("FK_PWEKontoMa");

            entity.HasOne(d => d.PweAccWn).WithMany(p => p.PrzeszacWalutElemPweAccWns)
                .HasForeignKey(d => d.PweAccWnId)
                .HasConstraintName("FK_PWEKontoWn");

            entity.HasOne(d => d.PwePwn).WithMany(p => p.PrzeszacWalutElems)
                .HasForeignKey(d => d.PwePwnid)
                .HasConstraintName("FK_PWEPWNID");
        });

        modelBuilder.Entity<PrzeszacWalutNag>(entity =>
        {
            entity.HasKey(e => e.PwnPwnid)
                .HasName("PWN_Primary")
                .HasFillFactor(100);

            entity.ToTable("PrzeszacWalutNag", "CDN", tb => tb.HasTrigger("PrzeszacWalutNag_Delete_Trigger"));

            entity.HasIndex(e => new { e.PwnBufor, e.PwnPrzezBufor }, "PWNBufor").HasFillFactor(100);

            entity.HasIndex(e => new { e.PwnDekId, e.PwnNextDekId }, "PWNDekret").HasFillFactor(100);

            entity.HasIndex(e => new { e.PwnDataDok, e.PwnNumer, e.PwnDziennik, e.PwnDziId, e.PwnNextDziennik, e.PwnNextDziId }, "PWNDokument").HasFillFactor(100);

            entity.HasIndex(e => new { e.PwnKatId, e.PwnKategoria }, "PWNKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.PwnAccWnId, e.PwnKontoWn, e.PwnAccMaId, e.PwnKontoMa }, "PWNKonto").HasFillFactor(100);

            entity.HasIndex(e => new { e.PwnOobId, e.PwnNextOobId }, "PWNOkres").HasFillFactor(100);

            entity.HasIndex(e => new { e.PwnDataDok, e.PwnPwnid }, "PWNView").HasFillFactor(100);

            entity.HasIndex(e => new { e.PwnWaluta, e.PwnKursNumer, e.PwnKursL, e.PwnKursM }, "PWNWaluta").HasFillFactor(100);

            entity.Property(e => e.PwnPwnid).HasColumnName("PWN_PWNID");
            entity.Property(e => e.PwnAccMaId).HasColumnName("PWN_AccMaId");
            entity.Property(e => e.PwnAccWnId).HasColumnName("PWN_AccWnId");
            entity.Property(e => e.PwnBufor).HasColumnName("PWN_Bufor");
            entity.Property(e => e.PwnDataDo)
                .HasColumnType("datetime")
                .HasColumnName("PWN_DataDo");
            entity.Property(e => e.PwnDataDok)
                .HasColumnType("datetime")
                .HasColumnName("PWN_DataDok");
            entity.Property(e => e.PwnDataOd)
                .HasColumnType("datetime")
                .HasColumnName("PWN_DataOd");
            entity.Property(e => e.PwnDekId).HasColumnName("PWN_DekID");
            entity.Property(e => e.PwnDziId).HasColumnName("PWN_DziID");
            entity.Property(e => e.PwnDziennik)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PWN_Dziennik");
            entity.Property(e => e.PwnKatId).HasColumnName("PWN_KatID");
            entity.Property(e => e.PwnKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PWN_Kategoria");
            entity.Property(e => e.PwnKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PWN_KontoMa");
            entity.Property(e => e.PwnKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PWN_KontoWn");
            entity.Property(e => e.PwnKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PWN_KursL");
            entity.Property(e => e.PwnKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PWN_KursM");
            entity.Property(e => e.PwnKursNumer).HasColumnName("PWN_KursNumer");
            entity.Property(e => e.PwnNextDekId).HasColumnName("PWN_NextDekID");
            entity.Property(e => e.PwnNextDziId).HasColumnName("PWN_NextDziID");
            entity.Property(e => e.PwnNextDziennik)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PWN_NextDziennik");
            entity.Property(e => e.PwnNextOobId).HasColumnName("PWN_NextOObId");
            entity.Property(e => e.PwnNumer)
                .HasMaxLength(256)
                .HasColumnName("PWN_Numer");
            entity.Property(e => e.PwnOkres).HasColumnName("PWN_Okres");
            entity.Property(e => e.PwnOobId).HasColumnName("PWN_OObId");
            entity.Property(e => e.PwnOpeModId).HasColumnName("PWN_OpeModID");
            entity.Property(e => e.PwnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWN_OpeModKod");
            entity.Property(e => e.PwnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PWN_OpeModNazwisko");
            entity.Property(e => e.PwnOpeZalId).HasColumnName("PWN_OpeZalID");
            entity.Property(e => e.PwnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWN_OpeZalKod");
            entity.Property(e => e.PwnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("PWN_OpeZalNazwisko");
            entity.Property(e => e.PwnPrzezBufor).HasColumnName("PWN_PrzezBufor");
            entity.Property(e => e.PwnRodzajStorna).HasColumnName("PWN_RodzajStorna");
            entity.Property(e => e.PwnStaModId).HasColumnName("PWN_StaModId");
            entity.Property(e => e.PwnStaZalId).HasColumnName("PWN_StaZalId");
            entity.Property(e => e.PwnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("PWN_TS_Mod");
            entity.Property(e => e.PwnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("PWN_TS_Zal");
            entity.Property(e => e.PwnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PWN_Waluta");

            entity.HasOne(d => d.PwnAccMa).WithMany(p => p.PrzeszacWalutNagPwnAccMas)
                .HasForeignKey(d => d.PwnAccMaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PWNKontoMa");

            entity.HasOne(d => d.PwnAccWn).WithMany(p => p.PrzeszacWalutNagPwnAccWns)
                .HasForeignKey(d => d.PwnAccWnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PWNKontoWn");
        });

        modelBuilder.Entity<Rabaty>(entity =>
        {
            entity.HasKey(e => e.RabRabId)
                .HasName("Rab_Primary")
                .HasFillFactor(100);

            entity.ToTable("Rabaty", "CDN", tb =>
                {
                    tb.HasTrigger("RO_Rabaty_InsertUpdateDelete_Trigger");
                    tb.HasTrigger("Rabaty_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.RabPodmiotId, e.RabPodmiotTyp, e.RabTyp, e.RabTwrId, e.RabDataOd, e.RabDataDo }, "RabPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.RabTwrId, e.RabTyp, e.RabPodmiotTyp, e.RabPodmiotId, e.RabDataOd, e.RabDataDo }, "RabTowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.RabRabId).HasColumnName("Rab_RabId");
            entity.Property(e => e.RabCena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("Rab_Cena");
            entity.Property(e => e.RabDataDo)
                .HasDefaultValueSql("(CONVERT([datetime],'2999-12-31 00:00:00.000',(120)))")
                .HasColumnType("datetime")
                .HasColumnName("Rab_DataDo");
            entity.Property(e => e.RabDataOd)
                .HasDefaultValueSql("(CONVERT([datetime],'1900-01-01 00:00:00.000',(120)))")
                .HasColumnType("datetime")
                .HasColumnName("Rab_DataOd");
            entity.Property(e => e.RabOpis)
                .HasMaxLength(254)
                .HasColumnName("Rab_Opis");
            entity.Property(e => e.RabPodmiotId).HasColumnName("Rab_PodmiotId");
            entity.Property(e => e.RabPodmiotTyp).HasColumnName("Rab_PodmiotTyp");
            entity.Property(e => e.RabRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Rab_Rabat");
            entity.Property(e => e.RabRabatIsklep)
                .HasDefaultValueSql("((0.00))")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Rab_RabatISklep");
            entity.Property(e => e.RabTwrId).HasColumnName("Rab_TwrId");
            entity.Property(e => e.RabTyp).HasColumnName("Rab_Typ");
            entity.Property(e => e.RabTypCenyNb).HasColumnName("Rab_TypCenyNB");
            entity.Property(e => e.RabWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Rab_Waluta");
        });

        modelBuilder.Entity<RegulyRcp>(entity =>
        {
            entity.HasKey(e => e.RrgRrgId)
                .HasName("RRG_Primary")
                .HasFillFactor(100);

            entity.ToTable("RegulyRcp", "CDN");

            entity.HasIndex(e => e.RrgZjeId, "RRGZjeLink").HasFillFactor(100);

            entity.Property(e => e.RrgRrgId).HasColumnName("RRG_RrgId");
            entity.Property(e => e.RrgAkcja).HasColumnName("RRG_Akcja");
            entity.Property(e => e.RrgIloscMinCel).HasColumnName("RRG_IloscMinCel");
            entity.Property(e => e.RrgIloscMinZrodlo).HasColumnName("RRG_IloscMinZrodlo");
            entity.Property(e => e.RrgMetodaModyf).HasColumnName("RRG_MetodaModyf");
            entity.Property(e => e.RrgOpis)
                .HasMaxLength(200)
                .HasColumnName("RRG_Opis");
            entity.Property(e => e.RrgZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("RRG_ZjeId");
        });

        modelBuilder.Entity<RejestrCzynnosci>(entity =>
        {
            entity.HasKey(e => e.RucRucid)
                .HasName("PK_RUC_RUCID")
                .HasFillFactor(100);

            entity.ToTable("RejestrCzynnosci", "CDN");

            entity.Property(e => e.RucRucid).HasColumnName("RUC_RUCID");
            entity.Property(e => e.RucCelPrzetwarzania)
                .HasDefaultValue("")
                .HasColumnName("RUC_CelPrzetwarzania");
            entity.Property(e => e.RucInformacjeDodatkowe)
                .HasDefaultValue("")
                .HasColumnName("RUC_InformacjeDodatkowe");
            entity.Property(e => e.RucKategorieDanychOs).HasColumnName("RUC_KategorieDanychOs");
            entity.Property(e => e.RucKategorieOdbiorcow).HasColumnName("RUC_KategorieOdbiorcow");
            entity.Property(e => e.RucKategorieOsob).HasColumnName("RUC_KategorieOsob");
            entity.Property(e => e.RucNazwa)
                .HasMaxLength(500)
                .HasDefaultValue("")
                .HasColumnName("RUC_Nazwa");
            entity.Property(e => e.RucOpeModId).HasColumnName("RUC_OpeModID");
            entity.Property(e => e.RucOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_OpeModKod");
            entity.Property(e => e.RucOpeModNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUC_OpeModNazwisko");
            entity.Property(e => e.RucOpeZalId).HasColumnName("RUC_OpeZalID");
            entity.Property(e => e.RucOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_OpeZalKod");
            entity.Property(e => e.RucOpeZalNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUC_OpeZalNazwisko");
            entity.Property(e => e.RucPlanowanyTermin).HasColumnName("RUC_PlanowanyTermin");
            entity.Property(e => e.RucStaModId).HasColumnName("RUC_StaModID");
            entity.Property(e => e.RucStaZalId).HasColumnName("RUC_StaZalID");
            entity.Property(e => e.RucTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RUC_TS_Mod");
            entity.Property(e => e.RucTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RUC_TS_Zal");
        });

        modelBuilder.Entity<RejestrNaruszen>(entity =>
        {
            entity.HasKey(e => e.RunRunid)
                .HasName("PK_RUN_RUNID")
                .HasFillFactor(100);

            entity.ToTable("RejestrNaruszen", "CDN");

            entity.HasIndex(e => e.RunImieNazwisko, "RUN_ImieNazwisko").HasFillFactor(100);

            entity.Property(e => e.RunRunid).HasColumnName("RUN_RUNID");
            entity.Property(e => e.RunAkronim)
                .HasMaxLength(50)
                .HasColumnName("RUN_Akronim");
            entity.Property(e => e.RunCharakterNaruszenia).HasColumnName("RUN_CharakterNaruszenia");
            entity.Property(e => e.RunDataNaruszenia)
                .HasColumnType("datetime")
                .HasColumnName("RUN_DataNaruszenia");
            entity.Property(e => e.RunDataZgloszenia)
                .HasColumnType("datetime")
                .HasColumnName("RUN_DataZgloszenia");
            entity.Property(e => e.RunImieNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUN_ImieNazwisko");
            entity.Property(e => e.RunKategoriaDanych).HasColumnName("RUN_KategoriaDanych");
            entity.Property(e => e.RunKonsekwencje).HasColumnName("RUN_Konsekwencje");
            entity.Property(e => e.RunLiczbaRekordow).HasColumnName("RUN_LiczbaRekordow");
            entity.Property(e => e.RunLp)
                .HasComputedColumnSql("([CDN].[RejestrNaruszenLp]([RUN_RUNID]))", false)
                .HasColumnName("RUN_Lp");
            entity.Property(e => e.RunMiejsceNaruszenia)
                .HasMaxLength(200)
                .HasColumnName("RUN_MiejsceNaruszenia");
            entity.Property(e => e.RunMiejsceZgloszenia)
                .HasMaxLength(200)
                .HasColumnName("RUN_MiejsceZgloszenia");
            entity.Property(e => e.RunOpeModId).HasColumnName("RUN_OpeModID");
            entity.Property(e => e.RunOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUN_OpeModKod");
            entity.Property(e => e.RunOpeModNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUN_OpeModNazwisko");
            entity.Property(e => e.RunOpeZalId).HasColumnName("RUN_OpeZalID");
            entity.Property(e => e.RunOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUN_OpeZalKod");
            entity.Property(e => e.RunOpeZalNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUN_OpeZalNazwisko");
            entity.Property(e => e.RunOsobaId).HasColumnName("RUN_OsobaID");
            entity.Property(e => e.RunPodId).HasColumnName("RUN_PodID");
            entity.Property(e => e.RunPodjeteSrodki).HasColumnName("RUN_PodjeteSrodki");
            entity.Property(e => e.RunPodmiotTyp).HasColumnName("RUN_PodmiotTyp");
            entity.Property(e => e.RunPrzyczynaOpoznienia).HasColumnName("RUN_PrzyczynaOpoznienia");
            entity.Property(e => e.RunStaModId).HasColumnName("RUN_StaModID");
            entity.Property(e => e.RunStaZalId).HasColumnName("RUN_StaZalID");
            entity.Property(e => e.RunTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RUN_TS_Mod");
            entity.Property(e => e.RunTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RUN_TS_Zal");
            entity.Property(e => e.RunZgloszone).HasColumnName("RUN_Zgloszone");

            entity.HasOne(d => d.RunOsoba).WithMany(p => p.RejestrNaruszens)
                .HasForeignKey(d => d.RunOsobaId)
                .HasConstraintName("FK_RUNPrzedstawiciel");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.RejestrNaruszens)
                .HasForeignKey(d => new { d.RunPodId, d.RunPodmiotTyp })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RUNPodmiot");
        });

        modelBuilder.Entity<RejestrOperacji>(entity =>
        {
            entity.HasKey(e => e.RopRopid)
                .HasName("ROP_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestrOperacji", "CDN");

            entity.HasIndex(e => new { e.RopObiektId, e.RopObiektTyp }, "ROP_IdTypObiektu").HasFillFactor(100);

            entity.Property(e => e.RopRopid).HasColumnName("ROP_ROPID");
            entity.Property(e => e.RopData)
                .HasColumnType("datetime")
                .HasColumnName("ROP_Data");
            entity.Property(e => e.RopObiektId).HasColumnName("ROP_ObiektID");
            entity.Property(e => e.RopObiektNazwa)
                .HasMaxLength(300)
                .HasColumnName("ROP_ObiektNazwa");
            entity.Property(e => e.RopObiektSubTyp).HasColumnName("ROP_ObiektSubTyp");
            entity.Property(e => e.RopObiektTyp).HasColumnName("ROP_ObiektTyp");
            entity.Property(e => e.RopOperacjaTyp).HasColumnName("ROP_OperacjaTyp");
            entity.Property(e => e.RopOperator)
                .HasMaxLength(50)
                .HasColumnName("ROP_Operator");
            entity.Property(e => e.RopOpis)
                .HasMaxLength(1000)
                .HasColumnName("ROP_Opis");
        });

        modelBuilder.Entity<RejestrOperacjiTypyObiektow>(entity =>
        {
            entity.HasKey(e => new { e.RoptobTyp, e.RoptobSubTyp, e.RoptobJezyk })
                .HasName("ROPTOb_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestrOperacjiTypyObiektow", "CDN");

            entity.Property(e => e.RoptobTyp).HasColumnName("ROPTOb_Typ");
            entity.Property(e => e.RoptobSubTyp).HasColumnName("ROPTOb_SubTyp");
            entity.Property(e => e.RoptobJezyk)
                .HasDefaultValue(1045)
                .HasColumnName("ROPTOb_Jezyk");
            entity.Property(e => e.RoptobNazwa)
                .HasMaxLength(100)
                .HasColumnName("ROPTOb_Nazwa");
        });

        modelBuilder.Entity<RejestrOperacjiTypyOperacji>(entity =>
        {
            entity.HasKey(e => new { e.RoptopTyp, e.RoptopJezyk })
                .HasName("ROPTOp_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestrOperacjiTypyOperacji", "CDN");

            entity.Property(e => e.RoptopTyp).HasColumnName("ROPTOp_Typ");
            entity.Property(e => e.RoptopJezyk)
                .HasDefaultValue(1045)
                .HasColumnName("ROPTOp_Jezyk");
            entity.Property(e => e.RoptopNazwa)
                .HasMaxLength(100)
                .HasColumnName("ROPTOp_Nazwa");
        });

        modelBuilder.Entity<RejestrUpowaznien>(entity =>
        {
            entity.HasKey(e => e.RupRupid)
                .HasName("PK_RUP_RUPID")
                .HasFillFactor(100);

            entity.ToTable("RejestrUpowaznien", "CDN");

            entity.HasIndex(e => e.RupImieNazwisko, "RUP_ImieNazwisko").HasFillFactor(100);

            entity.Property(e => e.RupRupid).HasColumnName("RUP_RUPID");
            entity.Property(e => e.RupDataNadania)
                .HasColumnType("datetime")
                .HasColumnName("RUP_DataNadania");
            entity.Property(e => e.RupDataUstania)
                .HasColumnType("datetime")
                .HasColumnName("RUP_DataUstania");
            entity.Property(e => e.RupImieNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUP_ImieNazwisko");
            entity.Property(e => e.RupLp)
                .HasComputedColumnSql("([CDN].[RejestrUpowaznienLp]([RUP_RUPID]))", false)
                .HasColumnName("RUP_Lp");
            entity.Property(e => e.RupOpeModId).HasColumnName("RUP_OpeModID");
            entity.Property(e => e.RupOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUP_OpeModKod");
            entity.Property(e => e.RupOpeModNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUP_OpeModNazwisko");
            entity.Property(e => e.RupOpeZalId).HasColumnName("RUP_OpeZalID");
            entity.Property(e => e.RupOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUP_OpeZalKod");
            entity.Property(e => e.RupOpeZalNazwisko)
                .HasMaxLength(50)
                .HasColumnName("RUP_OpeZalNazwisko");
            entity.Property(e => e.RupOpis).HasColumnName("RUP_Opis");
            entity.Property(e => e.RupOsobaId).HasColumnName("RUP_OsobaID");
            entity.Property(e => e.RupPodId).HasColumnName("RUP_PodID");
            entity.Property(e => e.RupPodmiotTyp).HasColumnName("RUP_PodmiotTyp");
            entity.Property(e => e.RupStaModId).HasColumnName("RUP_StaModID");
            entity.Property(e => e.RupStaZalId).HasColumnName("RUP_StaZalID");
            entity.Property(e => e.RupTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RUP_TS_Mod");
            entity.Property(e => e.RupTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RUP_TS_Zal");

            entity.HasOne(d => d.RupOsoba).WithMany(p => p.RejestrUpowazniens)
                .HasForeignKey(d => d.RupOsobaId)
                .HasConstraintName("FK_RUPPrzedstawiciel");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.RejestrUpowazniens)
                .HasForeignKey(d => new { d.RupPodId, d.RupPodmiotTyp })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RUPPodmiot");
        });

        modelBuilder.Entity<RejestracjaZgodFormyKontaktu>(entity =>
        {
            entity.HasKey(e => e.RzfkRzfkid)
                .HasName("RZFK_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestracjaZgodFormyKontaktu", "CDN");

            entity.Property(e => e.RzfkRzfkid).HasColumnName("RZFK_RZFKId");
            entity.Property(e => e.RzfkGuid).HasColumnName("RZFK_GUID");
            entity.Property(e => e.RzfkNazwa)
                .HasMaxLength(255)
                .HasColumnName("RZFK_Nazwa");
            entity.Property(e => e.RzfkOpeModId).HasColumnName("RZFK_OpeModId");
            entity.Property(e => e.RzfkOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RZFK_OpeModKod");
            entity.Property(e => e.RzfkOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RZFK_OpeModNazwisko");
            entity.Property(e => e.RzfkOpeZalId).HasColumnName("RZFK_OpeZalId");
            entity.Property(e => e.RzfkOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RZFK_OpeZalKod");
            entity.Property(e => e.RzfkOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RZFK_OpeZalNazwisko");
            entity.Property(e => e.RzfkStaModId).HasColumnName("RZFK_StaModId");
            entity.Property(e => e.RzfkStaZalId).HasColumnName("RZFK_StaZalId");
            entity.Property(e => e.RzfkTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RZFK_TS_Mod");
            entity.Property(e => e.RzfkTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RZFK_TS_Zal");
        });

        modelBuilder.Entity<RejestracjaZgodFormyKontaktuJezykObcy>(entity =>
        {
            entity.HasKey(e => new { e.RzfkjRzfkid, e.RzfkjJezykId })
                .HasName("RZFKJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestracjaZgodFormyKontaktuJezykObcy", "CDN");

            entity.HasIndex(e => e.RzfkjRzfkjid, "RZFKJOID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.RzfkjRzfkid).HasColumnName("RZFKJ_RZFKId");
            entity.Property(e => e.RzfkjJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("RZFKJ_JezykID");
            entity.Property(e => e.RzfkjNazwa)
                .HasMaxLength(255)
                .HasColumnName("RZFKJ_Nazwa");
            entity.Property(e => e.RzfkjRzfkjid)
                .ValueGeneratedOnAdd()
                .HasColumnName("RZFKJ_RZFKJID");

            entity.HasOne(d => d.RzfkjRzfk).WithMany(p => p.RejestracjaZgodFormyKontaktuJezykObcies)
                .HasForeignKey(d => d.RzfkjRzfkid)
                .HasConstraintName("FK_RZFKJdoRejestracjaZgodFormyKontaktu");
        });

        modelBuilder.Entity<RejestracjaZgodKategorie>(entity =>
        {
            entity.HasKey(e => e.RzkRzkid)
                .HasName("RZK_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestracjaZgodKategorie", "CDN");

            entity.Property(e => e.RzkRzkid).HasColumnName("RZK_RZKID");
            entity.Property(e => e.RzkNazwa)
                .HasMaxLength(255)
                .HasColumnName("RZK_Nazwa");
        });

        modelBuilder.Entity<RejestracjaZgodTresc>(entity =>
        {
            entity.HasKey(e => e.RztRztid)
                .HasName("RZT_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestracjaZgodTresc", "CDN");

            entity.Property(e => e.RztRztid).HasColumnName("RZT_RZTId");
            entity.Property(e => e.RztEmail).HasColumnName("RZT_EMAIL");
            entity.Property(e => e.RztGuidGlowny).HasColumnName("RZT_GuidGlowny");
            entity.Property(e => e.RztGuidVer).HasColumnName("RZT_GuidVer");
            entity.Property(e => e.RztList).HasColumnName("RZT_List");
            entity.Property(e => e.RztNieaktywny).HasColumnName("RZT_Nieaktywny");
            entity.Property(e => e.RztObowiazujeOd)
                .HasColumnType("datetime")
                .HasColumnName("RZT_ObowiazujeOd");
            entity.Property(e => e.RztOpeModId).HasColumnName("RZT_OpeModId");
            entity.Property(e => e.RztOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RZT_OpeModKod");
            entity.Property(e => e.RztOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RZT_OpeModNazwisko");
            entity.Property(e => e.RztOpeZalId).HasColumnName("RZT_OpeZalId");
            entity.Property(e => e.RztOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RZT_OpeZalKod");
            entity.Property(e => e.RztOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RZT_OpeZalNazwisko");
            entity.Property(e => e.RztParentId).HasColumnName("RZT_ParentId");
            entity.Property(e => e.RztRzkid).HasColumnName("RZT_RZKID");
            entity.Property(e => e.RztSms).HasColumnName("RZT_SMS");
            entity.Property(e => e.RztStaModId).HasColumnName("RZT_StaModId");
            entity.Property(e => e.RztStaZalId).HasColumnName("RZT_StaZalId");
            entity.Property(e => e.RztTelefon).HasColumnName("RZT_Telefon");
            entity.Property(e => e.RztTresc).HasColumnName("RZT_Tresc");
            entity.Property(e => e.RztTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RZT_TS_Mod");
            entity.Property(e => e.RztTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RZT_TS_Zal");
            entity.Property(e => e.RztTytul)
                .HasMaxLength(255)
                .HasColumnName("RZT_Tytul");
            entity.Property(e => e.RztWersja).HasColumnName("RZT_Wersja");

            entity.HasOne(d => d.RztRzk).WithMany(p => p.RejestracjaZgodTrescs)
                .HasForeignKey(d => d.RztRzkid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RZTRZKID");
        });

        modelBuilder.Entity<RejestracjaZgodTrescEsklepy>(entity =>
        {
            entity.HasKey(e => e.RztesRztesid)
                .HasName("RZTES_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestracjaZgodTrescESklepy", "CDN");

            entity.HasIndex(e => new { e.RztesRztid, e.RztesESklepId }, "RZTESRZTESS")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.RztesRztesid).HasColumnName("RZTES_RZTESID");
            entity.Property(e => e.RztesESklepId).HasColumnName("RZTES_eSklepID");
            entity.Property(e => e.RztesESklepWyslana).HasColumnName("RZTES_eSklepWyslana");
            entity.Property(e => e.RztesPrzyszlaZeSklep).HasColumnName("RZTES_PrzyszlaZeSklep");
            entity.Property(e => e.RztesRztid).HasColumnName("RZTES_RZTID");

            entity.HasOne(d => d.RztesESklep).WithMany(p => p.RejestracjaZgodTrescEsklepies)
                .HasForeignKey(d => d.RztesESklepId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RZTESS");

            entity.HasOne(d => d.RztesRzt).WithMany(p => p.RejestracjaZgodTrescEsklepies)
                .HasForeignKey(d => d.RztesRztid)
                .HasConstraintName("FK_RZTESRZT");
        });

        modelBuilder.Entity<RejestracjaZgodTrescJezykObcy>(entity =>
        {
            entity.HasKey(e => new { e.RztjRztid, e.RztjJezykId })
                .HasName("RZTJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestracjaZgodTrescJezykObcy", "CDN");

            entity.HasIndex(e => e.RztjRztjid, "RZTJOID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.RztjRztid).HasColumnName("RZTJ_RZTID");
            entity.Property(e => e.RztjJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("RZTJ_JezykID");
            entity.Property(e => e.RztjRztjid)
                .ValueGeneratedOnAdd()
                .HasColumnName("RZTJ_RZTJID");
            entity.Property(e => e.RztjTresc).HasColumnName("RZTJ_Tresc");

            entity.HasOne(d => d.RztjRzt).WithMany(p => p.RejestracjaZgodTrescJezykObcies)
                .HasForeignKey(d => d.RztjRztid)
                .HasConstraintName("FK_RZTJdoRejestracjaZgodTresc");
        });

        modelBuilder.Entity<RejestracjaZgodZrodlo>(entity =>
        {
            entity.HasKey(e => e.RzzRzzid)
                .HasName("RZZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("RejestracjaZgodZrodlo", "CDN");

            entity.Property(e => e.RzzRzzid).HasColumnName("RZZ_RZZId");
            entity.Property(e => e.RzzNazwa)
                .HasMaxLength(255)
                .HasColumnName("RZZ_Nazwa");
            entity.Property(e => e.RzzNieaktywny).HasColumnName("RZZ_Nieaktywny");
            entity.Property(e => e.RzzOpeModId).HasColumnName("RZZ_OpeModId");
            entity.Property(e => e.RzzOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RZZ_OpeModKod");
            entity.Property(e => e.RzzOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RZZ_OpeModNazwisko");
            entity.Property(e => e.RzzOpeZalId).HasColumnName("RZZ_OpeZalId");
            entity.Property(e => e.RzzOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RZZ_OpeZalKod");
            entity.Property(e => e.RzzOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RZZ_OpeZalNazwisko");
            entity.Property(e => e.RzzStaModId).HasColumnName("RZZ_StaModId");
            entity.Property(e => e.RzzStaZalId).HasColumnName("RZZ_StaZalId");
            entity.Property(e => e.RzzTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RZZ_TS_Mod");
            entity.Property(e => e.RzzTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RZZ_TS_Zal");
        });

        modelBuilder.Entity<RemanentElem>(entity =>
        {
            entity.HasKey(e => e.ReEReEid)
                .HasName("ReE_Primary")
                .HasFillFactor(100);

            entity.ToTable("RemanentElem", "CDN", tb => tb.HasTrigger("RemanentElem_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.ReEReNid, e.ReELp, e.ReEReEid }, "ReELp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.ReETwrId, "ReETowar").HasFillFactor(100);

            entity.HasIndex(e => new { e.ReEReNid, e.ReENazwa, e.ReEReEid }, "ReNNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ReEReEid).HasColumnName("ReE_ReEID");
            entity.Property(e => e.ReECena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("ReE_Cena");
            entity.Property(e => e.ReECenaNabycia)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("ReE_CenaNabycia");
            entity.Property(e => e.ReECenaZczteremaMiejscami).HasColumnName("ReE_CenaZCzteremaMiejscami");
            entity.Property(e => e.ReEIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ReE_Ilosc");
            entity.Property(e => e.ReEJm)
                .HasMaxLength(20)
                .HasColumnName("ReE_Jm");
            entity.Property(e => e.ReELp).HasColumnName("ReE_Lp");
            entity.Property(e => e.ReEMetodaOblicz).HasColumnName("ReE_MetodaOblicz");
            entity.Property(e => e.ReENazwa)
                .HasMaxLength(255)
                .HasColumnName("ReE_Nazwa");
            entity.Property(e => e.ReEOpeModId).HasColumnName("ReE_OpeModID");
            entity.Property(e => e.ReEOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReE_OpeModKod");
            entity.Property(e => e.ReEOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ReE_OpeModNazwisko");
            entity.Property(e => e.ReEOpeZalId).HasColumnName("ReE_OpeZalID");
            entity.Property(e => e.ReEOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReE_OpeZalKod");
            entity.Property(e => e.ReEOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ReE_OpeZalNazwisko");
            entity.Property(e => e.ReEOpis)
                .HasMaxLength(254)
                .HasColumnName("ReE_Opis");
            entity.Property(e => e.ReEReNid).HasColumnName("ReE_ReNID");
            entity.Property(e => e.ReEStaModId).HasColumnName("ReE_StaModId");
            entity.Property(e => e.ReEStaZalId).HasColumnName("ReE_StaZalId");
            entity.Property(e => e.ReETsMod)
                .HasColumnType("datetime")
                .HasColumnName("ReE_TS_Mod");
            entity.Property(e => e.ReETsZal)
                .HasColumnType("datetime")
                .HasColumnName("ReE_TS_Zal");
            entity.Property(e => e.ReETwrId).HasColumnName("ReE_TwrId");
            entity.Property(e => e.ReEWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ReE_Wartosc");

            entity.HasOne(d => d.ReEReN).WithMany(p => p.RemanentElems)
                .HasForeignKey(d => d.ReEReNid)
                .HasConstraintName("FK_ReELp");

            entity.HasOne(d => d.ReETwr).WithMany(p => p.RemanentElems)
                .HasForeignKey(d => d.ReETwrId)
                .HasConstraintName("FK_ReETowar");
        });

        modelBuilder.Entity<RemanentNag>(entity =>
        {
            entity.HasKey(e => e.ReNReNid)
                .HasName("ReN_Primary")
                .HasFillFactor(100);

            entity.ToTable("RemanentNag", "CDN", tb =>
                {
                    tb.HasTrigger("RemanentNag_DeleteHandler");
                    tb.HasTrigger("RemanentNag_Delete_Trigger");
                    tb.HasTrigger("RemanentNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.ReNKprid, e.ReNReNid }, "ReNKPR")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.ReNKatId, "ReNKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.ReNRok, e.ReNNumer }, "ReNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ReNReNid).HasColumnName("ReN_ReNID");
            entity.Property(e => e.ReNDataSpi)
                .HasColumnType("datetime")
                .HasColumnName("ReN_DataSpi");
            entity.Property(e => e.ReNKatId).HasColumnName("ReN_KatId");
            entity.Property(e => e.ReNKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ReN_Kategoria");
            entity.Property(e => e.ReNKorekta).HasColumnName("ReN_Korekta");
            entity.Property(e => e.ReNKprid).HasColumnName("ReN_KPRId");
            entity.Property(e => e.ReNNumer).HasColumnName("ReN_Numer");
            entity.Property(e => e.ReNOpeModId).HasColumnName("ReN_OpeModID");
            entity.Property(e => e.ReNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_OpeModKod");
            entity.Property(e => e.ReNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ReN_OpeModNazwisko");
            entity.Property(e => e.ReNOpeZalId).HasColumnName("ReN_OpeZalID");
            entity.Property(e => e.ReNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_OpeZalKod");
            entity.Property(e => e.ReNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ReN_OpeZalNazwisko");
            entity.Property(e => e.ReNOpis)
                .HasMaxLength(254)
                .HasColumnName("ReN_Opis");
            entity.Property(e => e.ReNRok).HasColumnName("ReN_Rok");
            entity.Property(e => e.ReNStaModId).HasColumnName("ReN_StaModId");
            entity.Property(e => e.ReNStaZalId).HasColumnName("ReN_StaZalId");
            entity.Property(e => e.ReNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ReN_TS_Mod");
            entity.Property(e => e.ReNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("ReN_TS_Zal");
            entity.Property(e => e.ReNWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ReN_Wartosc");
            entity.Property(e => e.ReNWartoscKorekta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ReN_WartoscKorekta");
            entity.Property(e => e.ReNWartoscZbiorcza).HasColumnName("ReN_WartoscZbiorcza");
            entity.Property(e => e.ReNZakId).HasColumnName("ReN_ZakID");

            entity.HasOne(d => d.ReNKat).WithMany(p => p.RemanentNags)
                .HasForeignKey(d => d.ReNKatId)
                .HasConstraintName("FK_ReNKategoria");
        });

        modelBuilder.Entity<Rodzina>(entity =>
        {
            entity.HasKey(e => e.RdzRdzId)
                .HasName("RDZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("Rodzina", "CDN", tb =>
                {
                    tb.HasTrigger("Rodzina_DeleteHandler");
                    tb.HasTrigger("Rodzina_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.RdzPraId, e.RdzNazwisko }, "RDZPraLink").HasFillFactor(100);

            entity.Property(e => e.RdzRdzId).HasColumnName("RDZ_RdzId");
            entity.Property(e => e.RdzAdradres2)
                .HasMaxLength(40)
                .HasColumnName("RDZ_ADRAdres2");
            entity.Property(e => e.RdzAdrgmina)
                .HasMaxLength(41)
                .HasColumnName("RDZ_ADRGmina");
            entity.Property(e => e.RdzAdrkodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RDZ_ADRKodPocztowy");
            entity.Property(e => e.RdzAdrkraj)
                .HasMaxLength(40)
                .HasColumnName("RDZ_ADRKraj");
            entity.Property(e => e.RdzAdrmiasto)
                .HasMaxLength(40)
                .HasColumnName("RDZ_ADRMiasto");
            entity.Property(e => e.RdzAdrnrDomu)
                .HasMaxLength(10)
                .HasColumnName("RDZ_ADRNrDomu");
            entity.Property(e => e.RdzAdrnrLokalu)
                .HasMaxLength(11)
                .HasColumnName("RDZ_ADRNrLokalu");
            entity.Property(e => e.RdzAdrpoczta)
                .HasMaxLength(40)
                .HasColumnName("RDZ_ADRPoczta");
            entity.Property(e => e.RdzAdrpowiat)
                .HasMaxLength(40)
                .HasColumnName("RDZ_ADRPowiat");
            entity.Property(e => e.RdzAdrulica)
                .HasMaxLength(40)
                .HasColumnName("RDZ_ADRUlica");
            entity.Property(e => e.RdzAdrwojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("RDZ_ADRWojewodztwo");
            entity.Property(e => e.RdzDataUpraw)
                .HasColumnType("datetime")
                .HasColumnName("RDZ_DataUpraw");
            entity.Property(e => e.RdzDataUprawDo)
                .HasColumnType("datetime")
                .HasColumnName("RDZ_DataUprawDo");
            entity.Property(e => e.RdzDataUr)
                .HasColumnType("datetime")
                .HasColumnName("RDZ_DataUr");
            entity.Property(e => e.RdzDowodOsob)
                .HasMaxLength(9)
                .HasColumnName("RDZ_DowodOsob");
            entity.Property(e => e.RdzImie)
                .HasMaxLength(30)
                .HasColumnName("RDZ_Imie");
            entity.Property(e => e.RdzImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("RDZ_ImportRowId");
            entity.Property(e => e.RdzKodNiepelnosp).HasColumnName("RDZ_KodNiepelnosp");
            entity.Property(e => e.RdzKodPokrew).HasColumnName("RDZ_KodPokrew");
            entity.Property(e => e.RdzMstIdAdr).HasColumnName("RDZ_MstIdADR");
            entity.Property(e => e.RdzMstPocztaAdr).HasColumnName("RDZ_MstPocztaADR");
            entity.Property(e => e.RdzNazwisko)
                .HasMaxLength(40)
                .HasColumnName("RDZ_Nazwisko");
            entity.Property(e => e.RdzNipE)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("RDZ_NipE");
            entity.Property(e => e.RdzNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("RDZ_NipKraj");
            entity.Property(e => e.RdzOpeModId).HasColumnName("RDZ_OpeModId");
            entity.Property(e => e.RdzOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RDZ_OpeModKod");
            entity.Property(e => e.RdzOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RDZ_OpeModNazwisko");
            entity.Property(e => e.RdzOpeZalId).HasColumnName("RDZ_OpeZalId");
            entity.Property(e => e.RdzOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RDZ_OpeZalKod");
            entity.Property(e => e.RdzOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RDZ_OpeZalNazwisko");
            entity.Property(e => e.RdzPaszport)
                .HasMaxLength(9)
                .HasColumnName("RDZ_Paszport");
            entity.Property(e => e.RdzPesel)
                .HasMaxLength(11)
                .HasColumnName("RDZ_Pesel");
            entity.Property(e => e.RdzPozostajeGosp).HasColumnName("RDZ_PozostajeGosp");
            entity.Property(e => e.RdzPozostajeUtrz).HasColumnName("RDZ_PozostajeUtrz");
            entity.Property(e => e.RdzPraId).HasColumnName("RDZ_PraId");
            entity.Property(e => e.RdzStaModId).HasColumnName("RDZ_StaModId");
            entity.Property(e => e.RdzStaZalId).HasColumnName("RDZ_StaZalId");
            entity.Property(e => e.RdzTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RDZ_TS_Mod");
            entity.Property(e => e.RdzTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RDZ_TS_Zal");

            entity.HasOne(d => d.RdzPra).WithMany(p => p.Rodzinas)
                .HasForeignKey(d => d.RdzPraId)
                .HasConstraintName("FK_RDZPraLink");
        });

        modelBuilder.Entity<RodzinaZwolOkresy>(entity =>
        {
            entity.HasKey(e => e.RzoRzoId)
                .HasName("RZO_Primary")
                .HasFillFactor(100);

            entity.ToTable("RodzinaZwolOkresy", "CDN", tb => tb.HasTrigger("RodzinaZwolOkresy_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.RzoRdzId, "RZORdzId").HasFillFactor(100);

            entity.Property(e => e.RzoRzoId).HasColumnName("RZO_RzoId");
            entity.Property(e => e.RzoImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("RZO_ImportRowId");
            entity.Property(e => e.RzoOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("RZO_OkresDo");
            entity.Property(e => e.RzoOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("RZO_OkresOd");
            entity.Property(e => e.RzoPnbId).HasColumnName("RZO_PnbId");
            entity.Property(e => e.RzoRdzId).HasColumnName("RZO_RdzId");

            entity.HasOne(d => d.RzoRdz).WithMany(p => p.RodzinaZwolOkresies)
                .HasForeignKey(d => d.RzoRdzId)
                .HasConstraintName("FK_RZORdzLink");
        });

        modelBuilder.Entity<RptKolejka2>(entity =>
        {
            entity.HasKey(e => new { e.RpQ2Guid, e.RpQ2RekordLp, e.RpQ2KopiaLp })
                .HasName("RpQ2_Primary")
                .HasFillFactor(100);

            entity.ToTable("RptKolejka2", "CDN");

            entity.Property(e => e.RpQ2Guid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RpQ2_GUID");
            entity.Property(e => e.RpQ2RekordLp).HasColumnName("RpQ2_RekordLp");
            entity.Property(e => e.RpQ2KopiaLp).HasColumnName("RpQ2_KopiaLp");
            entity.Property(e => e.RpQ2Pole1)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole1");
            entity.Property(e => e.RpQ2Pole10)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole10");
            entity.Property(e => e.RpQ2Pole100).HasColumnName("RpQ2_Pole100");
            entity.Property(e => e.RpQ2Pole11)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole11");
            entity.Property(e => e.RpQ2Pole12)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole12");
            entity.Property(e => e.RpQ2Pole13)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole13");
            entity.Property(e => e.RpQ2Pole14)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole14");
            entity.Property(e => e.RpQ2Pole15)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole15");
            entity.Property(e => e.RpQ2Pole16)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole16");
            entity.Property(e => e.RpQ2Pole17)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole17");
            entity.Property(e => e.RpQ2Pole18)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole18");
            entity.Property(e => e.RpQ2Pole19)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole19");
            entity.Property(e => e.RpQ2Pole2)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole2");
            entity.Property(e => e.RpQ2Pole20)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole20");
            entity.Property(e => e.RpQ2Pole21)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole21");
            entity.Property(e => e.RpQ2Pole22)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole22");
            entity.Property(e => e.RpQ2Pole23)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole23");
            entity.Property(e => e.RpQ2Pole24)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole24");
            entity.Property(e => e.RpQ2Pole25)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole25");
            entity.Property(e => e.RpQ2Pole26)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole26");
            entity.Property(e => e.RpQ2Pole27).HasColumnName("RpQ2_Pole27");
            entity.Property(e => e.RpQ2Pole28).HasColumnName("RpQ2_Pole28");
            entity.Property(e => e.RpQ2Pole29).HasColumnName("RpQ2_Pole29");
            entity.Property(e => e.RpQ2Pole3)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole3");
            entity.Property(e => e.RpQ2Pole30).HasColumnName("RpQ2_Pole30");
            entity.Property(e => e.RpQ2Pole31).HasColumnName("RpQ2_Pole31");
            entity.Property(e => e.RpQ2Pole32).HasColumnName("RpQ2_Pole32");
            entity.Property(e => e.RpQ2Pole33).HasColumnName("RpQ2_Pole33");
            entity.Property(e => e.RpQ2Pole34).HasColumnName("RpQ2_Pole34");
            entity.Property(e => e.RpQ2Pole35).HasColumnName("RpQ2_Pole35");
            entity.Property(e => e.RpQ2Pole36).HasColumnName("RpQ2_Pole36");
            entity.Property(e => e.RpQ2Pole37).HasColumnName("RpQ2_Pole37");
            entity.Property(e => e.RpQ2Pole38).HasColumnName("RpQ2_Pole38");
            entity.Property(e => e.RpQ2Pole39).HasColumnName("RpQ2_Pole39");
            entity.Property(e => e.RpQ2Pole4)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole4");
            entity.Property(e => e.RpQ2Pole40).HasColumnName("RpQ2_Pole40");
            entity.Property(e => e.RpQ2Pole41).HasColumnName("RpQ2_Pole41");
            entity.Property(e => e.RpQ2Pole42).HasColumnName("RpQ2_Pole42");
            entity.Property(e => e.RpQ2Pole43).HasColumnName("RpQ2_Pole43");
            entity.Property(e => e.RpQ2Pole44).HasColumnName("RpQ2_Pole44");
            entity.Property(e => e.RpQ2Pole45).HasColumnName("RpQ2_Pole45");
            entity.Property(e => e.RpQ2Pole46).HasColumnName("RpQ2_Pole46");
            entity.Property(e => e.RpQ2Pole47).HasColumnName("RpQ2_Pole47");
            entity.Property(e => e.RpQ2Pole48).HasColumnName("RpQ2_Pole48");
            entity.Property(e => e.RpQ2Pole49).HasColumnName("RpQ2_Pole49");
            entity.Property(e => e.RpQ2Pole5)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole5");
            entity.Property(e => e.RpQ2Pole50).HasColumnName("RpQ2_Pole50");
            entity.Property(e => e.RpQ2Pole51).HasColumnName("RpQ2_Pole51");
            entity.Property(e => e.RpQ2Pole52).HasColumnName("RpQ2_Pole52");
            entity.Property(e => e.RpQ2Pole53).HasColumnName("RpQ2_Pole53");
            entity.Property(e => e.RpQ2Pole54).HasColumnName("RpQ2_Pole54");
            entity.Property(e => e.RpQ2Pole55).HasColumnName("RpQ2_Pole55");
            entity.Property(e => e.RpQ2Pole56).HasColumnName("RpQ2_Pole56");
            entity.Property(e => e.RpQ2Pole57).HasColumnName("RpQ2_Pole57");
            entity.Property(e => e.RpQ2Pole58).HasColumnName("RpQ2_Pole58");
            entity.Property(e => e.RpQ2Pole59).HasColumnName("RpQ2_Pole59");
            entity.Property(e => e.RpQ2Pole6)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole6");
            entity.Property(e => e.RpQ2Pole60).HasColumnName("RpQ2_Pole60");
            entity.Property(e => e.RpQ2Pole61).HasColumnName("RpQ2_Pole61");
            entity.Property(e => e.RpQ2Pole62).HasColumnName("RpQ2_Pole62");
            entity.Property(e => e.RpQ2Pole63).HasColumnName("RpQ2_Pole63");
            entity.Property(e => e.RpQ2Pole64).HasColumnName("RpQ2_Pole64");
            entity.Property(e => e.RpQ2Pole65).HasColumnName("RpQ2_Pole65");
            entity.Property(e => e.RpQ2Pole66).HasColumnName("RpQ2_Pole66");
            entity.Property(e => e.RpQ2Pole67).HasColumnName("RpQ2_Pole67");
            entity.Property(e => e.RpQ2Pole68).HasColumnName("RpQ2_Pole68");
            entity.Property(e => e.RpQ2Pole69).HasColumnName("RpQ2_Pole69");
            entity.Property(e => e.RpQ2Pole7)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole7");
            entity.Property(e => e.RpQ2Pole70).HasColumnName("RpQ2_Pole70");
            entity.Property(e => e.RpQ2Pole71).HasColumnName("RpQ2_Pole71");
            entity.Property(e => e.RpQ2Pole72).HasColumnName("RpQ2_Pole72");
            entity.Property(e => e.RpQ2Pole73).HasColumnName("RpQ2_Pole73");
            entity.Property(e => e.RpQ2Pole74).HasColumnName("RpQ2_Pole74");
            entity.Property(e => e.RpQ2Pole75).HasColumnName("RpQ2_Pole75");
            entity.Property(e => e.RpQ2Pole76).HasColumnName("RpQ2_Pole76");
            entity.Property(e => e.RpQ2Pole77).HasColumnName("RpQ2_Pole77");
            entity.Property(e => e.RpQ2Pole78).HasColumnName("RpQ2_Pole78");
            entity.Property(e => e.RpQ2Pole79).HasColumnName("RpQ2_Pole79");
            entity.Property(e => e.RpQ2Pole8)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole8");
            entity.Property(e => e.RpQ2Pole80).HasColumnName("RpQ2_Pole80");
            entity.Property(e => e.RpQ2Pole81).HasColumnName("RpQ2_Pole81");
            entity.Property(e => e.RpQ2Pole82).HasColumnName("RpQ2_Pole82");
            entity.Property(e => e.RpQ2Pole83).HasColumnName("RpQ2_Pole83");
            entity.Property(e => e.RpQ2Pole84).HasColumnName("RpQ2_Pole84");
            entity.Property(e => e.RpQ2Pole85).HasColumnName("RpQ2_Pole85");
            entity.Property(e => e.RpQ2Pole86).HasColumnName("RpQ2_Pole86");
            entity.Property(e => e.RpQ2Pole87).HasColumnName("RpQ2_Pole87");
            entity.Property(e => e.RpQ2Pole88).HasColumnName("RpQ2_Pole88");
            entity.Property(e => e.RpQ2Pole89).HasColumnName("RpQ2_Pole89");
            entity.Property(e => e.RpQ2Pole9)
                .HasMaxLength(255)
                .HasColumnName("RpQ2_Pole9");
            entity.Property(e => e.RpQ2Pole90).HasColumnName("RpQ2_Pole90");
            entity.Property(e => e.RpQ2Pole91).HasColumnName("RpQ2_Pole91");
            entity.Property(e => e.RpQ2Pole92).HasColumnName("RpQ2_Pole92");
            entity.Property(e => e.RpQ2Pole93).HasColumnName("RpQ2_Pole93");
            entity.Property(e => e.RpQ2Pole94).HasColumnName("RpQ2_Pole94");
            entity.Property(e => e.RpQ2Pole95).HasColumnName("RpQ2_Pole95");
            entity.Property(e => e.RpQ2Pole96).HasColumnName("RpQ2_Pole96");
            entity.Property(e => e.RpQ2Pole97).HasColumnName("RpQ2_Pole97");
            entity.Property(e => e.RpQ2Pole98).HasColumnName("RpQ2_Pole98");
            entity.Property(e => e.RpQ2Pole99).HasColumnName("RpQ2_Pole99");
        });

        modelBuilder.Entity<RptObrazy2>(entity =>
        {
            entity.HasKey(e => e.Rpo2Rpo2id)
                .HasName("RPO2_Primary")
                .HasFillFactor(100);

            entity.ToTable("RptObrazy2", "CDN", tb => tb.HasTrigger("RptObrazy2_Delete_Trigger"));

            entity.HasIndex(e => new { e.Rpo2DokumentTyp, e.Rpo2DokumentId, e.Rpo2ZrodloId, e.Rpo2RpWid, e.Rpo2RpFid, e.Rpo2Rpo2id }, "RPO2Dokument")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.Rpo2Rpo2id).HasColumnName("RPO2_RPO2ID");
            entity.Property(e => e.Rpo2DokumentId).HasColumnName("RPO2_DokumentID");
            entity.Property(e => e.Rpo2DokumentTyp).HasColumnName("RPO2_DokumentTyp");
            entity.Property(e => e.Rpo2Rozmiar).HasColumnName("RPO2_Rozmiar");
            entity.Property(e => e.Rpo2RpFid).HasColumnName("RPO2_RpFID");
            entity.Property(e => e.Rpo2RpWid).HasColumnName("RPO2_RpWID");
            entity.Property(e => e.Rpo2Wartosc)
                .HasColumnType("image")
                .HasColumnName("RPO2_Wartosc");
            entity.Property(e => e.Rpo2ZrodloId).HasColumnName("RPO2_ZrodloID");
        });

        modelBuilder.Entity<RptTemp2>(entity =>
        {
            entity.HasKey(e => e.RpT2RpT2id)
                .HasName("RpT2_Primary")
                .HasFillFactor(100);

            entity.ToTable("RptTemp2", "CDN");

            entity.Property(e => e.RpT2RpT2id).HasColumnName("RpT2_RpT2Id");
            entity.Property(e => e.RpT2Data)
                .HasColumnType("datetime")
                .HasColumnName("RpT2_Data");
            entity.Property(e => e.RpT2TmpId).HasColumnName("RpT2_TmpId");
        });

        modelBuilder.Entity<RptZaznaczenia2>(entity =>
        {
            entity.HasKey(e => new { e.RpZ2Guid, e.RpZ2RekordLp, e.RpZ2KopiaLp })
                .HasName("RpZ2_Primary")
                .HasFillFactor(100);

            entity.ToTable("RptZaznaczenia2", "CDN");

            entity.Property(e => e.RpZ2Guid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RpZ2_GUID");
            entity.Property(e => e.RpZ2RekordLp).HasColumnName("RpZ2_RekordLp");
            entity.Property(e => e.RpZ2KopiaLp).HasColumnName("RpZ2_KopiaLp");
            entity.Property(e => e.RpZ2Gidfirma).HasColumnName("RpZ2_GIDFirma");
            entity.Property(e => e.RpZ2Gidlp).HasColumnName("RpZ2_GIDLp");
            entity.Property(e => e.RpZ2Gidnumer).HasColumnName("RpZ2_GIDNumer");
            entity.Property(e => e.RpZ2Gidtyp).HasColumnName("RpZ2_GIDTyp");
        });

        modelBuilder.Entity<Ryczalt>(entity =>
        {
            entity.HasKey(e => e.RycRycId)
                .HasName("RYC_Primary")
                .HasFillFactor(100);

            entity.ToTable("Ryczalt", "CDN", tb =>
                {
                    tb.HasTrigger("Ryczalt_Delete_Trigger");
                    tb.HasTrigger("Ryczalt_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.RycKatId, e.RycDataPrz, e.RycRycId }, "KeyKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.RycDataPrz, e.RycRycId }, "RycChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.RycBufor, e.RycDataPrz, e.RycRycId }, "RycChronoBuf")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.RycBufor, e.RycRokMies, e.RycLp, e.RycRycId }, "RycLP")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.RycRycId).HasColumnName("RYC_RycID");
            entity.Property(e => e.RycBufor).HasColumnName("RYC_Bufor");
            entity.Property(e => e.RycDataPrz)
                .HasColumnType("datetime")
                .HasColumnName("RYC_DataPrz");
            entity.Property(e => e.RycDataWpi)
                .HasColumnType("datetime")
                .HasColumnName("RYC_DataWpi");
            entity.Property(e => e.RycDokTyp).HasColumnName("RYC_DokTyp");
            entity.Property(e => e.RycDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("RYC_Dokument");
            entity.Property(e => e.RycKatId).HasColumnName("RYC_KatID");
            entity.Property(e => e.RycKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RYC_Kategoria");
            entity.Property(e => e.RycLp).HasColumnName("RYC_Lp");
            entity.Property(e => e.RycOpeModId).HasColumnName("RYC_OpeModID");
            entity.Property(e => e.RycOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RYC_OpeModKod");
            entity.Property(e => e.RycOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RYC_OpeModNazwisko");
            entity.Property(e => e.RycOpeZalId).HasColumnName("RYC_OpeZalID");
            entity.Property(e => e.RycOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RYC_OpeZalKod");
            entity.Property(e => e.RycOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("RYC_OpeZalNazwisko");
            entity.Property(e => e.RycPrzychod1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod1");
            entity.Property(e => e.RycPrzychod10)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod10");
            entity.Property(e => e.RycPrzychod11)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod11");
            entity.Property(e => e.RycPrzychod2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod2");
            entity.Property(e => e.RycPrzychod3)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod3");
            entity.Property(e => e.RycPrzychod4)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod4");
            entity.Property(e => e.RycPrzychod5)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod5");
            entity.Property(e => e.RycPrzychod6)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod6");
            entity.Property(e => e.RycPrzychod7)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod7");
            entity.Property(e => e.RycPrzychod8)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod8");
            entity.Property(e => e.RycPrzychod9)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RYC_Przychod9");
            entity.Property(e => e.RycRokMies).HasColumnName("RYC_RokMies");
            entity.Property(e => e.RycSkreslony).HasColumnName("RYC_Skreslony");
            entity.Property(e => e.RycStaModId).HasColumnName("RYC_StaModId");
            entity.Property(e => e.RycStaZalId).HasColumnName("RYC_StaZalId");
            entity.Property(e => e.RycTsMod)
                .HasColumnType("datetime")
                .HasColumnName("RYC_TS_Mod");
            entity.Property(e => e.RycTsZal)
                .HasColumnType("datetime")
                .HasColumnName("RYC_TS_Zal");
            entity.Property(e => e.RycZrodlo).HasColumnName("RYC_Zrodlo");

            entity.HasOne(d => d.RycKat).WithMany(p => p.Ryczalts)
                .HasForeignKey(d => d.RycKatId)
                .HasConstraintName("FK_KeyKategoria");
        });

        modelBuilder.Entity<SchKsiElem>(entity =>
        {
            entity.HasKey(e => e.SkeSkeid)
                .HasName("SKE_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchKsiElem", "CDN");

            entity.HasIndex(e => new { e.SkeSknid, e.SkeLp }, "SKESchemat").HasFillFactor(100);

            entity.Property(e => e.SkeSkeid).HasColumnName("SKE_SKEId");
            entity.Property(e => e.SkeDataOpe)
                .HasMaxLength(1000)
                .HasColumnName("SKE_DataOpe");
            entity.Property(e => e.SkeDataWys)
                .HasMaxLength(1000)
                .HasColumnName("SKE_DataWys");
            entity.Property(e => e.SkeDokument)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("SKE_Dokument");
            entity.Property(e => e.SkeKategoria).HasColumnName("SKE_Kategoria");
            entity.Property(e => e.SkeKontoMa)
                .HasMaxLength(2000)
                .HasColumnName("SKE_KontoMa");
            entity.Property(e => e.SkeKontoWn)
                .HasMaxLength(2000)
                .HasColumnName("SKE_KontoWn");
            entity.Property(e => e.SkeKsiegowanieWalutowe).HasColumnName("SKE_KsiegowanieWalutowe");
            entity.Property(e => e.SkeKwota)
                .HasMaxLength(1000)
                .HasColumnName("SKE_Kwota");
            entity.Property(e => e.SkeLp).HasColumnName("SKE_Lp");
            entity.Property(e => e.SkeOpis)
                .HasMaxLength(1000)
                .HasColumnName("SKE_Opis");
            entity.Property(e => e.SkeRozrachunki).HasColumnName("SKE_Rozrachunki");
            entity.Property(e => e.SkeSknid).HasColumnName("SKE_SKNId");
            entity.Property(e => e.SkeSlownikKsi).HasColumnName("SKE_SlownikKSI");
            entity.Property(e => e.SkeWarunek)
                .HasMaxLength(2000)
                .HasColumnName("SKE_Warunek");

            entity.HasOne(d => d.SkeSkn).WithMany(p => p.SchKsiElems)
                .HasForeignKey(d => d.SkeSknid)
                .HasConstraintName("FK_SKESchemat");
        });

        modelBuilder.Entity<SchKsiNag>(entity =>
        {
            entity.HasKey(e => e.SknSknid)
                .HasName("SKN_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchKsiNag", "CDN", tb => tb.HasTrigger("SchKsiNag_DeleteHandler"));

            entity.HasIndex(e => new { e.SknTyp, e.SknPodTyp, e.SknSymbol }, "SKNSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SknSknid).HasColumnName("SKN_SKNId");
            entity.Property(e => e.SknBrakKontroli).HasColumnName("SKN_BrakKontroli");
            entity.Property(e => e.SknBufor).HasColumnName("SKN_Bufor");
            entity.Property(e => e.SknDataDok)
                .HasMaxLength(1000)
                .HasColumnName("SKN_DataDok");
            entity.Property(e => e.SknDataKonfig).HasColumnName("SKN_DataKonfig");
            entity.Property(e => e.SknDataKsi)
                .HasMaxLength(50)
                .HasColumnName("SKN_DataKsi");
            entity.Property(e => e.SknDataOpe)
                .HasMaxLength(1000)
                .HasColumnName("SKN_DataOpe");
            entity.Property(e => e.SknDataWys)
                .HasMaxLength(1000)
                .HasColumnName("SKN_DataWys");
            entity.Property(e => e.SknDokument)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("SKN_Dokument");
            entity.Property(e => e.SknDziennik)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SKN_Dziennik");
            entity.Property(e => e.SknNazwa)
                .HasMaxLength(50)
                .HasColumnName("SKN_Nazwa");
            entity.Property(e => e.SknNieAktywny).HasColumnName("SKN_NieAktywny");
            entity.Property(e => e.SknOpeModId).HasColumnName("SKN_OpeModID");
            entity.Property(e => e.SknOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKN_OpeModKod");
            entity.Property(e => e.SknOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SKN_OpeModNazwisko");
            entity.Property(e => e.SknOpeZalId).HasColumnName("SKN_OpeZalID");
            entity.Property(e => e.SknOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKN_OpeZalKod");
            entity.Property(e => e.SknOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SKN_OpeZalNazwisko");
            entity.Property(e => e.SknOpis)
                .HasMaxLength(1000)
                .HasColumnName("SKN_Opis");
            entity.Property(e => e.SknPodTyp).HasColumnName("SKN_PodTyp");
            entity.Property(e => e.SknStaModId).HasColumnName("SKN_StaModId");
            entity.Property(e => e.SknStaZalId).HasColumnName("SKN_StaZalId");
            entity.Property(e => e.SknSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SKN_Symbol");
            entity.Property(e => e.SknTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SKN_TS_Mod");
            entity.Property(e => e.SknTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SKN_TS_Zal");
            entity.Property(e => e.SknTyp).HasColumnName("SKN_Typ");
            entity.Property(e => e.SknUwagi)
                .HasMaxLength(255)
                .HasColumnName("SKN_Uwagi");
            entity.Property(e => e.SknWarunek)
                .HasMaxLength(2000)
                .HasColumnName("SKN_Warunek");
        });

        modelBuilder.Entity<SchKsiRelac>(entity =>
        {
            entity.HasKey(e => e.SkrSkrid)
                .HasName("SKR_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchKsiRelac", "CDN");

            entity.HasIndex(e => e.SkrSknid, "SKRSchemat").HasFillFactor(100);

            entity.HasIndex(e => new { e.SkrSknrelId, e.SkrLp }, "SKRZalezny").HasFillFactor(100);

            entity.Property(e => e.SkrSkrid).HasColumnName("SKR_SKRId");
            entity.Property(e => e.SkrLp).HasColumnName("SKR_Lp");
            entity.Property(e => e.SkrSknid).HasColumnName("SKR_SKNId");
            entity.Property(e => e.SkrSknrelId).HasColumnName("SKR_SKNRelId");

            entity.HasOne(d => d.SkrSkn).WithMany(p => p.SchKsiRelacSkrSkns)
                .HasForeignKey(d => d.SkrSknid)
                .HasConstraintName("FK_SKRSchemat");

            entity.HasOne(d => d.SkrSknrel).WithMany(p => p.SchKsiRelacSkrSknrels)
                .HasForeignKey(d => d.SkrSknrelId)
                .HasConstraintName("FK_SKRZwiazane");
        });

        modelBuilder.Entity<SchematPlatnosci>(entity =>
        {
            entity.HasKey(e => e.SplSplId)
                .HasName("SPL_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchematPlatnosci", "CDN", tb =>
                {
                    tb.HasTrigger("SchematPlatnosci_Delete_Trigger");
                    tb.HasTrigger("SchematPlatnosci_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.SplBnaId, "SPLBnaLink").HasFillFactor(100);

            entity.HasIndex(e => e.SplFplId, "SPLFplLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.SplLiczbaPorz, e.SplPodmiotTyp, e.SplPodmiotId }, "SPLLiczbaPorz").HasFillFactor(100);

            entity.HasIndex(e => e.SplRachunekNr0, "SplRachunekNr0").HasFillFactor(100);

            entity.Property(e => e.SplSplId).HasColumnName("SPL_SplId");
            entity.Property(e => e.SplBnaId).HasColumnName("SPL_BnaId");
            entity.Property(e => e.SplFplId).HasColumnName("SPL_FplId");
            entity.Property(e => e.SplIban).HasColumnName("SPL_IBAN");
            entity.Property(e => e.SplImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("SPL_ImportRowId");
            entity.Property(e => e.SplKwota)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("SPL_Kwota");
            entity.Property(e => e.SplLiczbaPorz).HasColumnName("SPL_LiczbaPorz");
            entity.Property(e => e.SplOdbPodmiotId).HasColumnName("SPL_OdbPodmiotID");
            entity.Property(e => e.SplOdbPodmiotTyp).HasColumnName("SPL_OdbPodmiotTyp");
            entity.Property(e => e.SplOpeModId).HasColumnName("SPL_OpeModID");
            entity.Property(e => e.SplOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPL_OpeModKod");
            entity.Property(e => e.SplOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SPL_OpeModNazwisko");
            entity.Property(e => e.SplOpeZalId).HasColumnName("SPL_OpeZalID");
            entity.Property(e => e.SplOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPL_OpeZalKod");
            entity.Property(e => e.SplOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SPL_OpeZalNazwisko");
            entity.Property(e => e.SplOpis)
                .HasMaxLength(50)
                .HasColumnName("SPL_Opis");
            entity.Property(e => e.SplPodmiotId).HasColumnName("SPL_PodmiotID");
            entity.Property(e => e.SplPodmiotTyp).HasColumnName("SPL_PodmiotTyp");
            entity.Property(e => e.SplPpk).HasColumnName("SPL_PPK");
            entity.Property(e => e.SplProcent)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("SPL_Procent");
            entity.Property(e => e.SplRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("SPL_RachunekNr");
            entity.Property(e => e.SplRachunekNr0)
                .HasMaxLength(51)
                .HasComputedColumnSql("(CONVERT([nvarchar](51),replace(replace([SPL_RACHUNEKNR],'-',''),' ',''),(0)))", false)
                .HasColumnName("SPL_RachunekNr0");
            entity.Property(e => e.SplReszta).HasColumnName("SPL_Reszta");
            entity.Property(e => e.SplRodzaj).HasColumnName("SPL_Rodzaj");
            entity.Property(e => e.SplStaModId).HasColumnName("SPL_StaModId");
            entity.Property(e => e.SplStaZalId).HasColumnName("SPL_StaZalId");
            entity.Property(e => e.SplTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SPL_TS_Mod");
            entity.Property(e => e.SplTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SPL_TS_Zal");
            entity.Property(e => e.SplWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPl_Waluta");

            entity.HasOne(d => d.SplBna).WithMany(p => p.SchematPlatnoscis)
                .HasForeignKey(d => d.SplBnaId)
                .HasConstraintName("FK_SPLBnaLink");

            entity.HasOne(d => d.SplFpl).WithMany(p => p.SchematPlatnoscis)
                .HasForeignKey(d => d.SplFplId)
                .HasConstraintName("FK_SPLFplLink");
        });

        modelBuilder.Entity<SchematWindykacjiEtapy>(entity =>
        {
            entity.HasKey(e => e.SwESwEid)
                .HasName("SwE_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchematWindykacjiEtapy", "CDN");

            entity.Property(e => e.SwESwEid).HasColumnName("SwE_SwEId");
            entity.Property(e => e.SwECrmTemat)
                .HasMaxLength(255)
                .HasColumnName("SwE_CrmTemat");
            entity.Property(e => e.SwECrmZadanie).HasColumnName("SwE_CrmZadanie");
            entity.Property(e => e.SwEDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SwE_DataDok");
            entity.Property(e => e.SwEDdfId).HasColumnName("SwE_DdfId");
            entity.Property(e => e.SwEEmailSzablonId).HasColumnName("SwE_EmailSzablonId");
            entity.Property(e => e.SwEJedenEmailDlaWszystkichPlatnosci).HasColumnName("SwE_JedenEmailDlaWszystkichPlatnosci");
            entity.Property(e => e.SwEKod)
                .HasMaxLength(20)
                .HasColumnName("SwE_Kod");
            entity.Property(e => e.SwENazwa)
                .HasMaxLength(250)
                .HasColumnName("SwE_Nazwa");
            entity.Property(e => e.SwENumerNr).HasColumnName("SwE_NumerNr");
            entity.Property(e => e.SwENumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("SwE_NumerString");
            entity.Property(e => e.SwEPonZapEmail).HasColumnName("SwE_PonZapEmail");
            entity.Property(e => e.SwEPonZapFormaPlatnosciId).HasColumnName("SwE_PonZapFormaPlatnosciId");
            entity.Property(e => e.SwEPonZapGenerujPlatnosc).HasColumnName("SwE_PonZapGenerujPlatnosc");
            entity.Property(e => e.SwEPonZapKosztyDod)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SwE_PonZapKosztyDod");
            entity.Property(e => e.SwEPonZapTerminPlatDni).HasColumnName("SwE_PonZapTerminPlatDni");
            entity.Property(e => e.SwEPonZapTytulWydruku).HasColumnName("SwE_PonZapTytulWydruku");
            entity.Property(e => e.SwEPonZapWydrukId)
                .HasDefaultValue(1815)
                .HasColumnName("SwE_PonZapWydrukId");
            entity.Property(e => e.SwEPonZapWydrukStandardowy)
                .HasDefaultValue((byte)1)
                .HasColumnName("SwE_PonZapWydrukStandardowy");
            entity.Property(e => e.SwESwNid).HasColumnName("SwE_SwNId");
            entity.Property(e => e.SwETermin).HasColumnName("SwE_Termin");
            entity.Property(e => e.SwETyp).HasColumnName("SwE_Typ");
            entity.Property(e => e.SwETypDokumentu).HasColumnName("SwE_TypDokumentu");

            entity.HasOne(d => d.SwESwN).WithMany(p => p.SchematWindykacjiEtapies)
                .HasForeignKey(d => d.SwESwNid)
                .HasConstraintName("FK_SwE_SwN");
        });

        modelBuilder.Entity<SchematyOpakElem>(entity =>
        {
            entity.HasKey(e => e.SoeSoeid)
                .HasName("SOE_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchematyOpakElem", "CDN", tb => tb.HasTrigger("SchematyOpakElem_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.SoeSonid, e.SoeSoeid }, "SOENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SoeTwrId, e.SoeSoeid }, "SOETowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SoeSoeid).HasColumnName("SOE_SOEId");
            entity.Property(e => e.SoeIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SOE_Ilosc");
            entity.Property(e => e.SoeLp).HasColumnName("SOE_Lp");
            entity.Property(e => e.SoeSonid).HasColumnName("SOE_SONId");
            entity.Property(e => e.SoeTwrId).HasColumnName("SOE_TwrId");

            entity.HasOne(d => d.SoeSon).WithMany(p => p.SchematyOpakElems)
                .HasForeignKey(d => d.SoeSonid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SOENaglowek");

            entity.HasOne(d => d.SoeTwr).WithMany(p => p.SchematyOpakElems)
                .HasForeignKey(d => d.SoeTwrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOETowar");
        });

        modelBuilder.Entity<SchematyOpakNag>(entity =>
        {
            entity.HasKey(e => e.SonSonid)
                .HasName("SON_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchematyOpakNag", "CDN");

            entity.HasIndex(e => e.SonKod, "SONKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SonSonid).HasColumnName("SON_SONId");
            entity.Property(e => e.SonKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SON_Kod");
            entity.Property(e => e.SonNazwa)
                .HasMaxLength(50)
                .HasColumnName("SON_Nazwa");
            entity.Property(e => e.SonNieaktywny).HasColumnName("SON_Nieaktywny");
            entity.Property(e => e.SonOpeModId).HasColumnName("SON_OpeModID");
            entity.Property(e => e.SonOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SON_OpeModKod");
            entity.Property(e => e.SonOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SON_OpeModNazwisko");
            entity.Property(e => e.SonOpeZalId).HasColumnName("SON_OpeZalID");
            entity.Property(e => e.SonOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SON_OpeZalKod");
            entity.Property(e => e.SonOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SON_OpeZalNazwisko");
            entity.Property(e => e.SonStaModId).HasColumnName("SON_StaModID");
            entity.Property(e => e.SonStaZalId).HasColumnName("SON_StaZalId");
            entity.Property(e => e.SonTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SON_TS_Mod");
            entity.Property(e => e.SonTsXl)
                .HasColumnType("datetime")
                .HasColumnName("SON_TS_XL");
            entity.Property(e => e.SonTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SON_TS_Zal");
        });

        modelBuilder.Entity<SchematyWindykacji>(entity =>
        {
            entity.HasKey(e => e.SwNSwNid)
                .HasName("SwN_Primary")
                .HasFillFactor(100);

            entity.ToTable("SchematyWindykacji", "CDN", tb => tb.HasTrigger("SchematyWindykacji_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.SwNKod, "SwN_KodUniqueIndex")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SwNSwNid).HasColumnName("SwN_SwNId");
            entity.Property(e => e.SwNDomyslny).HasColumnName("SwN_Domyslny");
            entity.Property(e => e.SwNKod)
                .HasMaxLength(20)
                .HasColumnName("SwN_Kod");
            entity.Property(e => e.SwNNazwa)
                .HasMaxLength(250)
                .HasColumnName("SwN_Nazwa");
            entity.Property(e => e.SwNNieaktywny).HasColumnName("SwN_Nieaktywny");
            entity.Property(e => e.SwNOpeModId).HasColumnName("SwN_OpeModId");
            entity.Property(e => e.SwNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SwN_OpeModKod");
            entity.Property(e => e.SwNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SwN_OpeModNazwisko");
            entity.Property(e => e.SwNOpeZalId).HasColumnName("SwN_OpeZalId");
            entity.Property(e => e.SwNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SwN_OpeZalKod");
            entity.Property(e => e.SwNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SwN_OpeZalNazwisko");
            entity.Property(e => e.SwNStaModId).HasColumnName("SwN_StaModId");
            entity.Property(e => e.SwNStaZalId).HasColumnName("SwN_StaZalId");
            entity.Property(e => e.SwNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SwN_TS_Mod");
            entity.Property(e => e.SwNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SwN_TS_Zal");
        });

        modelBuilder.Entity<SenditAdresyNadawcze>(entity =>
        {
            entity.HasKey(e => e.SanSanid)
                .HasName("SAN_Primary")
                .HasFillFactor(100);

            entity.ToTable("SenditAdresyNadawcze", "CDN", tb => tb.HasTrigger("SenditAdresyNadawcze_Delete_Trigger"));

            entity.Property(e => e.SanSanid).HasColumnName("SAN_SANID");
            entity.Property(e => e.SanDlugoscGeograficzna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("SAN_DlugoscGeograficzna");
            entity.Property(e => e.SanDomyslny).HasColumnName("SAN_Domyslny");
            entity.Property(e => e.SanIdMiejscaDostawy)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SAN_IdMiejscaDostawy");
            entity.Property(e => e.SanIdUrzadzenGrzewczych)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SAN_IdUrzadzenGrzewczych");
            entity.Property(e => e.SanKod)
                .HasMaxLength(20)
                .HasColumnName("SAN_Kod");
            entity.Property(e => e.SanKodPocztowy)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("SAN_KodPocztowy");
            entity.Property(e => e.SanKorespondencyjny).HasColumnName("SAN_Korespondencyjny");
            entity.Property(e => e.SanKrajIso)
                .HasMaxLength(2)
                .HasDefaultValue("")
                .HasColumnName("SAN_KrajISO");
            entity.Property(e => e.SanMagId).HasColumnName("SAN_MagId");
            entity.Property(e => e.SanMiasto)
                .HasMaxLength(254)
                .HasColumnName("SAN_Miasto");
            entity.Property(e => e.SanNazwa)
                .HasMaxLength(254)
                .HasColumnName("SAN_Nazwa");
            entity.Property(e => e.SanNazwa2)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("SAN_Nazwa2");
            entity.Property(e => e.SanNrDomu)
                .HasMaxLength(254)
                .HasColumnName("SAN_NrDomu");
            entity.Property(e => e.SanNrMieszkania)
                .HasMaxLength(254)
                .HasColumnName("SAN_NrMieszkania");
            entity.Property(e => e.SanOsobaEmail)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SAN_OsobaEmail");
            entity.Property(e => e.SanOsobaImie)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SAN_OsobaImie");
            entity.Property(e => e.SanOsobaTelefon)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SAN_OsobaTelefon");
            entity.Property(e => e.SanPaczkomatAdres)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SAN_PaczkomatAdres");
            entity.Property(e => e.SanPaczkomatKod)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SAN_PaczkomatKod");
            entity.Property(e => e.SanPunktOdbioruOsobistego).HasColumnName("SAN_PunktOdbioruOsobistego");
            entity.Property(e => e.SanSzerokoscGeograficzna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("SAN_SzerokoscGeograficzna");
            entity.Property(e => e.SanTelefon)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("SAN_Telefon");
            entity.Property(e => e.SanTelefonGsm)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("SAN_TelefonGSM");
            entity.Property(e => e.SanUlica)
                .HasMaxLength(254)
                .HasColumnName("SAN_Ulica");
            entity.Property(e => e.SanUrzadNadaniaAdres)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SAN_UrzadNadaniaAdres");
            entity.Property(e => e.SanUrzadNadaniaKod)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SAN_UrzadNadaniaKod");
            entity.Property(e => e.SanUrzadSkarbowyWlasciwy)
                .HasMaxLength(8)
                .HasColumnName("SAN_UrzadSkarbowyWlasciwy");
            entity.Property(e => e.SanWojewodztwo)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SAN_Wojewodztwo");
        });

        modelBuilder.Entity<SenditPaczki>(entity =>
        {
            entity.HasKey(e => e.SpaSpaid)
                .HasName("SPA_Primary")
                .HasFillFactor(100);

            entity.ToTable("SenditPaczki", "CDN");

            entity.Property(e => e.SpaSpaid).HasColumnName("SPA_SPAID");
            entity.Property(e => e.SpaDeklarowanaWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SPA_DeklarowanaWartosc");
            entity.Property(e => e.SpaDlugosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SPA_Dlugosc");
            entity.Property(e => e.SpaGabaryt).HasColumnName("SPA_Gabaryt");
            entity.Property(e => e.SpaIdentyfikatorUkuriera)
                .HasMaxLength(64)
                .HasDefaultValue("")
                .HasColumnName("SPA_IdentyfikatorUKuriera");
            entity.Property(e => e.SpaKwotaUbezpieczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SPA_KwotaUbezpieczenia");
            entity.Property(e => e.SpaLp).HasColumnName("SPA_LP");
            entity.Property(e => e.SpaNiestandardowa).HasColumnName("SPA_Niestandardowa");
            entity.Property(e => e.SpaNumerListu)
                .HasMaxLength(254)
                .HasColumnName("SPA_NumerListu");
            entity.Property(e => e.SpaOstroznie).HasColumnName("SPA_Ostroznie");
            entity.Property(e => e.SpaSposobPakowania)
                .HasMaxLength(254)
                .HasColumnName("SPA_SposobPakowania");
            entity.Property(e => e.SpaSposobPakowaniaKey)
                .HasMaxLength(254)
                .HasColumnName("SPA_SposobPakowaniaKey");
            entity.Property(e => e.SpaSzerokosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SPA_Szerokosc");
            entity.Property(e => e.SpaSzlid).HasColumnName("SPA_SZLID");
            entity.Property(e => e.SpaUrl)
                .HasMaxLength(254)
                .HasColumnName("SPA_URL");
            entity.Property(e => e.SpaWaga)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SPA_Waga");
            entity.Property(e => e.SpaWysokosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SPA_Wysokosc");
            entity.Property(e => e.SpaZawartosc)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("SPA_Zawartosc");

            entity.HasOne(d => d.SpaSzl).WithMany(p => p.SenditPaczkis)
                .HasForeignKey(d => d.SpaSzlid)
                .HasConstraintName("FK_SPASenditZleceniePrzesylki");
        });

        modelBuilder.Entity<SenditTypyPaczek>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SenditTypyPaczek", "CDN");

            entity.Property(e => e.StpData)
                .HasColumnType("datetime")
                .HasColumnName("STP_Data");
            entity.Property(e => e.StpSposobPakowania)
                .HasMaxLength(254)
                .HasColumnName("STP_SposobPakowania");
            entity.Property(e => e.StpSposobPakowaniaKey)
                .HasMaxLength(254)
                .HasColumnName("STP_SposobPakowaniaKey");
        });

        modelBuilder.Entity<SenditZleceniePrzesylki>(entity =>
        {
            entity.HasKey(e => e.SzlSzlid)
                .HasName("SZL_Primary")
                .HasFillFactor(100);

            entity.ToTable("SenditZleceniePrzesylki", "CDN", tb =>
                {
                    tb.HasTrigger("SenditZleceniePrzesylki_Delete_Trigger");
                    tb.HasTrigger("SenditZleceniePrzesylki_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.SzlNumerString, e.SzlNumerNr }, "SZLNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SzlSzlid).HasColumnName("SZL_SZLID");
            entity.Property(e => e.SzlAllegroTransactionId)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_AllegroTransactionId");
            entity.Property(e => e.SzlAllegroUserId)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_AllegroUserId");
            entity.Property(e => e.SzlBladWalidacji)
                .HasDefaultValue("")
                .HasColumnName("SZL_BladWalidacji");
            entity.Property(e => e.SzlBufor).HasColumnName("SZL_Bufor");
            entity.Property(e => e.SzlDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SZL_DataDok");
            entity.Property(e => e.SzlDataKurierDo)
                .HasColumnType("datetime")
                .HasColumnName("SZL_DataKurierDo");
            entity.Property(e => e.SzlDataKurierOd)
                .HasColumnType("datetime")
                .HasColumnName("SZL_DataKurierOD");
            entity.Property(e => e.SzlDataStatusu)
                .HasColumnType("datetime")
                .HasColumnName("SZL_DataStatusu");
            entity.Property(e => e.SzlDataWyslania)
                .HasColumnType("datetime")
                .HasColumnName("SZL_DataWyslania");
            entity.Property(e => e.SzlDdfId).HasColumnName("SZL_DDfId");
            entity.Property(e => e.SzlDokZrodlowe)
                .HasDefaultValue("")
                .HasColumnName("SZL_DokZrodlowe");
            entity.Property(e => e.SzlDokZrodloweTyp).HasColumnName("SZL_DokZrodloweTyp");
            entity.Property(e => e.SzlDokumentyZwrotne).HasColumnName("SZL_DokumentyZwrotne");
            entity.Property(e => e.SzlDokumentyZwrotneTekst)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("SZL_DokumentyZwrotneTekst");
            entity.Property(e => e.SzlDokumentyZwrotneTyp).HasColumnName("SZL_DokumentyZwrotneTyp");
            entity.Property(e => e.SzlDostawaWweekend).HasColumnName("SZL_DostawaWWeekend");
            entity.Property(e => e.SzlEpo).HasColumnName("SZL_EPO");
            entity.Property(e => e.SzlFaId).HasColumnName("SZL_FaId");
            entity.Property(e => e.SzlFirmaKurierskaId).HasColumnName("SZL_FirmaKurierskaID");
            entity.Property(e => e.SzlKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZL_Koszt");
            entity.Property(e => e.SzlKurierKod)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_KurierKod");
            entity.Property(e => e.SzlKurierNazwa)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_KurierNazwa");
            entity.Property(e => e.SzlKurierSzablon)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_KurierSzablon");
            entity.Property(e => e.SzlKurierSzablonId).HasColumnName("SZL_KurierSzablonId");
            entity.Property(e => e.SzlNrListuPrzewozowego)
                .HasDefaultValue("")
                .HasColumnName("SZL_NrListuPrzewozowego");
            entity.Property(e => e.SzlNrTransakcjiOdbioru)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_NrTransakcjiOdbioru");
            entity.Property(e => e.SzlNumerNr).HasColumnName("SZL_NumerNr");
            entity.Property(e => e.SzlNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([SZL_NUMERNR],[SZL_NUMERSTRING]))", false)
                .HasColumnName("SZL_NumerPelny");
            entity.Property(e => e.SzlNumerPlatnika)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("SZL_NumerPlatnika");
            entity.Property(e => e.SzlNumerProtokoluOdbioru)
                .HasMaxLength(254)
                .HasColumnName("SZL_NumerProtokoluOdbioru");
            entity.Property(e => e.SzlNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("SZL_NumerString");
            entity.Property(e => e.SzlNumerZleceniaOdbioru)
                .HasMaxLength(254)
                .HasColumnName("SZL_NumerZleceniaOdbioru");
            entity.Property(e => e.SzlNumerZleceniaSendit)
                .HasMaxLength(254)
                .HasColumnName("SZL_NumerZleceniaSendit");
            entity.Property(e => e.SzlOdbAdresKorespondencyjny).HasColumnName("SZL_OdbAdresKorespondencyjny");
            entity.Property(e => e.SzlOdbEmail)
                .HasMaxLength(127)
                .HasColumnName("SZL_OdbEmail");
            entity.Property(e => e.SzlOdbId).HasColumnName("SZL_OdbID");
            entity.Property(e => e.SzlOdbKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SZL_OdbKodPocztowy");
            entity.Property(e => e.SzlOdbKrajIso)
                .HasMaxLength(3)
                .HasDefaultValue("")
                .HasColumnName("SZL_OdbKrajISO");
            entity.Property(e => e.SzlOdbMiasto)
                .HasMaxLength(40)
                .HasColumnName("SZL_OdbMiasto");
            entity.Property(e => e.SzlOdbNazwa)
                .HasMaxLength(250)
                .HasColumnName("SZL_OdbNazwa");
            entity.Property(e => e.SzlOdbNrDomu)
                .HasMaxLength(10)
                .HasColumnName("SZL_OdbNrDomu");
            entity.Property(e => e.SzlOdbNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("SZL_OdbNrLokalu");
            entity.Property(e => e.SzlOdbSanid).HasColumnName("SZL_OdbSANID");
            entity.Property(e => e.SzlOdbTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SZL_OdbTelefon");
            entity.Property(e => e.SzlOdbUlica)
                .HasMaxLength(40)
                .HasColumnName("SZL_OdbUlica");
            entity.Property(e => e.SzlOdbiorWpunkcie).HasColumnName("SZL_OdbiorWPunkcie");
            entity.Property(e => e.SzlOdbiorWpunkcieAdres)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_OdbiorWPunkcieAdres");
            entity.Property(e => e.SzlOdbiorWpunkcieId)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SZL_OdbiorWPunkcieId");
            entity.Property(e => e.SzlOdbiorWpunkcieNazwa)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_OdbiorWPunkcieNazwa");
            entity.Property(e => e.SzlOdbiorcaTyp).HasColumnName("SZL_OdbiorcaTyp");
            entity.Property(e => e.SzlOdebral)
                .HasMaxLength(40)
                .HasColumnName("SZL_Odebral");
            entity.Property(e => e.SzlOpcjeDeklarowanaWartosc).HasColumnName("SZL_OpcjeDeklarowanaWartosc");
            entity.Property(e => e.SzlOpcjeDeklarowanaWartoscKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZL_OpcjeDeklarowanaWartoscKwota");
            entity.Property(e => e.SzlOpcjeKwotaPobrania)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZL_OpcjeKwotaPobrania");
            entity.Property(e => e.SzlOpcjeKwotaUbezpieczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZL_OpcjeKwotaUbezpieczenia");
            entity.Property(e => e.SzlOpcjePobranie).HasColumnName("SZL_OpcjePobranie");
            entity.Property(e => e.SzlOpcjeUbezpieczenie).HasColumnName("SZL_OpcjeUbezpieczenie");
            entity.Property(e => e.SzlOpcjeZwrotPotwierdzenia).HasColumnName("SZL_OpcjeZwrotPotwierdzenia");
            entity.Property(e => e.SzlOpeModId).HasColumnName("SZL_OpeModID");
            entity.Property(e => e.SzlOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZL_OpeModKod");
            entity.Property(e => e.SzlOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SZL_OpeModNazwisko");
            entity.Property(e => e.SzlOpeZalId).HasColumnName("SZL_OpeZalID");
            entity.Property(e => e.SzlOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZL_OpeZalKod");
            entity.Property(e => e.SzlOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SZL_OpeZalNazwisko");
            entity.Property(e => e.SzlOpiekunId).HasColumnName("SZL_OpiekunId");
            entity.Property(e => e.SzlOpiekunNazwa)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SZL_OpiekunNazwa");
            entity.Property(e => e.SzlOpiekunTyp).HasColumnName("SZL_OpiekunTyp");
            entity.Property(e => e.SzlPlatnik).HasColumnName("SZL_Platnik");
            entity.Property(e => e.SzlPlikZlecenia)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_PlikZlecenia");
            entity.Property(e => e.SzlPotwierdzenieDoreczenia).HasColumnName("SZL_PotwierdzenieDoreczenia");
            entity.Property(e => e.SzlPotwierdzenieDoreczeniaTyp).HasColumnName("SZL_PotwierdzenieDoreczeniaTyp");
            entity.Property(e => e.SzlPotwierdzenieOdbioru).HasColumnName("SZL_PotwierdzenieOdbioru");
            entity.Property(e => e.SzlPotwierdzenieOdbioruIlosc).HasColumnName("SZL_PotwierdzenieOdbioruIlosc");
            entity.Property(e => e.SzlPotwierdzenieOdbioruTyp).HasColumnName("SZL_PotwierdzenieOdbioruTyp");
            entity.Property(e => e.SzlPreawizacja).HasColumnName("SZL_Preawizacja");
            entity.Property(e => e.SzlPrzesylkaDoOddzialu).HasColumnName("SZL_PrzesylkaDoOddzialu");
            entity.Property(e => e.SzlPrzesylkaZwrotna).HasColumnName("SZL_PrzesylkaZwrotna");
            entity.Property(e => e.SzlReferencje).HasColumnName("SZL_Referencje");
            entity.Property(e => e.SzlReferencjeTekst)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("SZL_ReferencjeTekst");
            entity.Property(e => e.SzlSanemail)
                .HasMaxLength(127)
                .HasColumnName("SZL_SANEmail");
            entity.Property(e => e.SzlSanid).HasColumnName("SZL_SANID");
            entity.Property(e => e.SzlSankodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SZL_SANKodPocztowy");
            entity.Property(e => e.SzlSanmiasto)
                .HasMaxLength(40)
                .HasColumnName("SZL_SANMiasto");
            entity.Property(e => e.SzlSannazwa)
                .HasMaxLength(250)
                .HasDefaultValue("")
                .HasColumnName("SZL_SANNazwa");
            entity.Property(e => e.SzlSannrDomu)
                .HasMaxLength(10)
                .HasColumnName("SZL_SANNrDomu");
            entity.Property(e => e.SzlSannrLokalu)
                .HasMaxLength(10)
                .HasColumnName("SZL_SANNrLokalu");
            entity.Property(e => e.SzlSantelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SZL_SANTelefon");
            entity.Property(e => e.SzlSanulica)
                .HasMaxLength(40)
                .HasColumnName("SZL_SANUlica");
            entity.Property(e => e.SzlSerwis).HasColumnName("SZL_Serwis");
            entity.Property(e => e.SzlSerwisNazwa)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_SerwisNazwa");
            entity.Property(e => e.SzlShippingPickupOrder).HasColumnName("SZL_ShippingPickupOrder");
            entity.Property(e => e.SzlShippingStan)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SZL_ShippingStan");
            entity.Property(e => e.SzlShippingStatus)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SZL_ShippingStatus");
            entity.Property(e => e.SzlSposobNadania).HasColumnName("SZL_SposobNadania");
            entity.Property(e => e.SzlSposobPobrania).HasColumnName("SZL_SposobPobrania");
            entity.Property(e => e.SzlStaModId).HasColumnName("SZL_StaModId");
            entity.Property(e => e.SzlStaZalId).HasColumnName("SZL_StaZalId");
            entity.Property(e => e.SzlStatus)
                .HasMaxLength(254)
                .HasColumnName("SZL_Status");
            entity.Property(e => e.SzlStatusKey)
                .HasMaxLength(254)
                .HasColumnName("SZL_StatusKey");
            entity.Property(e => e.SzlTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SZL_TS_Mod");
            entity.Property(e => e.SzlTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SZL_TS_Zal");
            entity.Property(e => e.SzlTypKuriera)
                .HasDefaultValue(1)
                .HasColumnName("SZL_TypKuriera");
            entity.Property(e => e.SzlTypPaczkiDpd).HasColumnName("SZL_TypPaczkiDPD");
            entity.Property(e => e.SzlTytulPrzelewu)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_TytulPrzelewu");
            entity.Property(e => e.SzlUrzadNadaniaAdres)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_UrzadNadaniaAdres");
            entity.Property(e => e.SzlUrzadNadaniaKod)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("SZL_UrzadNadaniaKod");
            entity.Property(e => e.SzlUwagi)
                .HasMaxLength(1024)
                .HasColumnName("SZL_Uwagi");
            entity.Property(e => e.SzlZawartosc).HasColumnName("SZL_Zawartosc");
            entity.Property(e => e.SzlZawartoscTekst)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("SZL_ZawartoscTekst");

            entity.HasOne(d => d.SzlDdf).WithMany(p => p.SenditZleceniePrzesylkis)
                .HasForeignKey(d => d.SzlDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SZLDokDef");
        });

        modelBuilder.Entity<SentElement>(entity =>
        {
            entity.HasKey(e => e.SnelSnelid)
                .HasName("SNEL_Primary")
                .HasFillFactor(100);

            entity.ToTable("SentElement", "CDN");

            entity.Property(e => e.SnelSnelid).HasColumnName("SNEL_SNELID");
            entity.Property(e => e.SnelFlaga).HasColumnName("SNEL_Flaga");
            entity.Property(e => e.SnelIlosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SNEL_Ilosc");
            entity.Property(e => e.SnelJm)
                .HasMaxLength(20)
                .HasColumnName("SNEL_JM");
            entity.Property(e => e.SnelKodCn)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("SNEL_KodCN");
            entity.Property(e => e.SnelKodOdpadu)
                .HasMaxLength(6)
                .HasDefaultValue("")
                .HasColumnName("SNEL_KodOdpadu");
            entity.Property(e => e.SnelLp).HasColumnName("SNEL_Lp");
            entity.Property(e => e.SnelMasa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SNEL_Masa");
            entity.Property(e => e.SnelOpis)
                .HasMaxLength(2000)
                .HasColumnName("SNEL_Opis");
            entity.Property(e => e.SnelSentId).HasColumnName("SNEL_SentID");
            entity.Property(e => e.SnelStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SNEL_Stawka");
            entity.Property(e => e.SnelTwrId).HasColumnName("SNEL_TwrId");
            entity.Property(e => e.SnelZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SNEL_Zrodlowa");

            entity.HasOne(d => d.SnelSent).WithMany(p => p.SentElements)
                .HasForeignKey(d => d.SnelSentId)
                .HasConstraintName("FK_SentElementSent");
        });

        modelBuilder.Entity<SentHistorium>(entity =>
        {
            entity.HasKey(e => e.SentHSentHid)
                .HasName("SentHistoria_Primary")
                .HasFillFactor(100);

            entity.ToTable("SentHistoria", "CDN");

            entity.HasIndex(e => e.SentHDataOperacji, "SentHDataOperacji").HasFillFactor(100);

            entity.Property(e => e.SentHSentHid).HasColumnName("SentH_SentHID");
            entity.Property(e => e.SentHCheckSum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SentH_CheckSum");
            entity.Property(e => e.SentHDataOperacji)
                .HasColumnType("datetime")
                .HasColumnName("SentH_DataOperacji");
            entity.Property(e => e.SentHKorelacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SentH_Korelacja");
            entity.Property(e => e.SentHModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("SentH_ModificationDate");
            entity.Property(e => e.SentHOpeId).HasColumnName("SentH_OpeID");
            entity.Property(e => e.SentHOpeKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SentH_OpeKod");
            entity.Property(e => e.SentHOpeNazwisko)
                .HasMaxLength(50)
                .HasColumnName("SentH_OpeNazwisko");
            entity.Property(e => e.SentHOpis)
                .HasMaxLength(1000)
                .HasColumnName("SentH_Opis");
            entity.Property(e => e.SentHPlik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SentH_Plik");
            entity.Property(e => e.SentHRodzaj).HasColumnName("SentH_Rodzaj");
            entity.Property(e => e.SentHSentId).HasColumnName("SentH_SentID");
            entity.Property(e => e.SentHSentTyp).HasColumnName("SentH_SentTyp");
            entity.Property(e => e.SentHStatus).HasColumnName("SentH_Status");

            entity.HasOne(d => d.SentHSent).WithMany(p => p.SentHistoria)
                .HasForeignKey(d => d.SentHSentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SentHistoriaSentZgloszenia");
        });

        modelBuilder.Entity<SentZgloszenium>(entity =>
        {
            entity.HasKey(e => e.SentSentId)
                .HasName("Sent_Primary")
                .HasFillFactor(100);

            entity.ToTable("SentZgloszenia", "CDN");

            entity.HasIndex(e => e.SentDdfId, "SentDokDef").HasFillFactor(100);

            entity.HasIndex(e => new { e.SentNumerString, e.SentNumerNr }, "SentNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SentSentId).HasColumnName("Sent_SentID");
            entity.Property(e => e.SentCarrierKey)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("Sent_CarrierKey");
            entity.Property(e => e.SentDataDok)
                .HasColumnType("datetime")
                .HasColumnName("Sent_DataDok");
            entity.Property(e => e.SentDataPrzewozu)
                .HasColumnType("datetime")
                .HasColumnName("Sent_DataPrzewozu");
            entity.Property(e => e.SentDataWyslaniaPuesc)
                .HasColumnType("datetime")
                .HasColumnName("Sent_DataWyslaniaPuesc");
            entity.Property(e => e.SentDdfId).HasColumnName("Sent_DDfId");
            entity.Property(e => e.SentDokumentPuescChecksum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Sent_DokumentPuescChecksum");
            entity.Property(e => e.SentDokumentPuescModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("Sent_DokumentPuescModificationDate");
            entity.Property(e => e.SentDokumentPuescTyp).HasColumnName("Sent_DokumentPuescTyp");
            entity.Property(e => e.SentDokumentZrodlowyTyp).HasColumnName("Sent_DokumentZrodlowyTyp");
            entity.Property(e => e.SentIdMiejscaDostawy)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Sent_IdMiejscaDostawy");
            entity.Property(e => e.SentIdSisc)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Sent_IdSisc");
            entity.Property(e => e.SentIdUrzadzenGrzewczych)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("Sent_IdUrzadzenGrzewczych");
            entity.Property(e => e.SentIlosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Sent_Ilosc");
            entity.Property(e => e.SentImiePuesc)
                .HasMaxLength(50)
                .HasColumnName("Sent_ImiePuesc");
            entity.Property(e => e.SentJm)
                .HasMaxLength(20)
                .HasColumnName("Sent_JM");
            entity.Property(e => e.SentKodCn)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Sent_KodCN");
            entity.Property(e => e.SentMasa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Sent_Masa");
            entity.Property(e => e.SentNazwiskoPuesc)
                .HasMaxLength(50)
                .HasColumnName("Sent_NazwiskoPuesc");
            entity.Property(e => e.SentNrUmowyOlej)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("Sent_NrUmowyOlej");
            entity.Property(e => e.SentNumerNr).HasColumnName("Sent_NumerNr");
            entity.Property(e => e.SentNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([Sent_NUMERNR],[Sent_NUMERSTRING]))", false)
                .HasColumnName("Sent_NumerPelny");
            entity.Property(e => e.SentNumerSentPuesc)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Sent_NumerSentPuesc");
            entity.Property(e => e.SentNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Sent_NumerString");
            entity.Property(e => e.SentOpeModId).HasColumnName("Sent_OpeModID");
            entity.Property(e => e.SentOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Sent_OpeModKod");
            entity.Property(e => e.SentOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Sent_OpeModNazwisko");
            entity.Property(e => e.SentOpeZalId).HasColumnName("Sent_OpeZalID");
            entity.Property(e => e.SentOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Sent_OpeZalKod");
            entity.Property(e => e.SentOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Sent_OpeZalNazwisko");
            entity.Property(e => e.SentOpis)
                .HasMaxLength(2000)
                .HasColumnName("Sent_Opis");
            entity.Property(e => e.SentOswiadczeniePosrednikOlej).HasColumnName("Sent_OswiadczeniePosrednikOlej");
            entity.Property(e => e.SentOswiadczenieUmowaOlej).HasColumnName("Sent_OswiadczenieUmowaOlej");
            entity.Property(e => e.SentPlaceOfControl).HasColumnName("Sent_PlaceOfControl");
            entity.Property(e => e.SentPodId).HasColumnName("Sent_PodID");
            entity.Property(e => e.SentPodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Sent_PodKodPocztowy");
            entity.Property(e => e.SentPodKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("Sent_PodKraj");
            entity.Property(e => e.SentPodMiasto)
                .HasMaxLength(40)
                .HasColumnName("Sent_PodMiasto");
            entity.Property(e => e.SentPodNazwa)
                .HasMaxLength(250)
                .HasColumnName("Sent_PodNazwa");
            entity.Property(e => e.SentPodNipE)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("Sent_PodNipE");
            entity.Property(e => e.SentPodNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Sent_PodNipKraj");
            entity.Property(e => e.SentPodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("Sent_PodNrDomu");
            entity.Property(e => e.SentPodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Sent_PodNrLokalu");
            entity.Property(e => e.SentPodUlica)
                .HasMaxLength(40)
                .HasColumnName("Sent_PodUlica");
            entity.Property(e => e.SentPodmiotTyp).HasColumnName("Sent_PodmiotTyp");
            entity.Property(e => e.SentRecipientKey)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("Sent_RecipientKey");
            entity.Property(e => e.SentRecommendationsForControl)
                .HasDefaultValue("")
                .HasColumnName("Sent_RecommendationsForControl");
            entity.Property(e => e.SentRodzaj).HasColumnName("Sent_Rodzaj");
            entity.Property(e => e.SentRodzajIdentyfikatoraPodatkowego).HasColumnName("Sent_RodzajIdentyfikatoraPodatkowego");
            entity.Property(e => e.SentSandlugoscGeograficzna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Sent_SANDlugoscGeograficzna");
            entity.Property(e => e.SentSanemail)
                .HasMaxLength(40)
                .HasColumnName("Sent_SANEmail");
            entity.Property(e => e.SentSanid).HasColumnName("Sent_SANID");
            entity.Property(e => e.SentSankodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Sent_SANKodPocztowy");
            entity.Property(e => e.SentSanmiasto)
                .HasMaxLength(40)
                .HasColumnName("Sent_SANMiasto");
            entity.Property(e => e.SentSannrDomu)
                .HasMaxLength(10)
                .HasColumnName("Sent_SANNrDomu");
            entity.Property(e => e.SentSannrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Sent_SANNrLokalu");
            entity.Property(e => e.SentSanszerokoscGeograficzna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Sent_SANSzerokoscGeograficzna");
            entity.Property(e => e.SentSantelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Sent_SANTelefon");
            entity.Property(e => e.SentSanulica)
                .HasMaxLength(40)
                .HasColumnName("Sent_SANUlica");
            entity.Property(e => e.SentSanwojewodztwo)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Sent_SANWojewodztwo");
            entity.Property(e => e.SentSenderKey)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("Sent_SenderKey");
            entity.Property(e => e.SentStaModId).HasColumnName("Sent_StaModId");
            entity.Property(e => e.SentStaZalId).HasColumnName("Sent_StaZalId");
            entity.Property(e => e.SentStatus).HasColumnName("Sent_Status");
            entity.Property(e => e.SentStatusPuesc)
                .HasMaxLength(1000)
                .HasColumnName("Sent_StatusPuesc");
            entity.Property(e => e.SentTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Sent_TS_Mod");
            entity.Property(e => e.SentTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Sent_TS_Zal");
            entity.Property(e => e.SentTwrId).HasColumnName("Sent_TwrId");
            entity.Property(e => e.SentTypZgloszenia).HasColumnName("Sent_TypZgloszenia");
            entity.Property(e => e.SentTypeOfTransport)
                .HasDefaultValue(1)
                .HasColumnName("Sent_TypeOfTransport");
            entity.Property(e => e.SentUwagi)
                .HasMaxLength(2000)
                .HasColumnName("Sent_Uwagi");

            entity.HasOne(d => d.SentDdf).WithMany(p => p.SentZgloszenia)
                .HasForeignKey(d => d.SentDdfId)
                .HasConstraintName("FK_SentDokDef");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.SentZgloszenia)
                .HasForeignKey(d => new { d.SentPodId, d.SentPodmiotTyp })
                .HasConstraintName("FK_SentPodmiot");
        });

        modelBuilder.Entity<SerieKalNag>(entity =>
        {
            entity.HasKey(e => e.SlnSlnId)
                .HasName("SLN_Primary")
                .HasFillFactor(100);

            entity.ToTable("SerieKalNag", "CDN");

            entity.HasIndex(e => e.SlnNazwa, "SlNNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SlnSymbol, "SlNSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SlnSlnId).HasColumnName("SLN_SlnId");
            entity.Property(e => e.SlnImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("SLN_ImportRowId");
            entity.Property(e => e.SlnNazwa)
                .HasMaxLength(50)
                .HasColumnName("SLN_Nazwa");
            entity.Property(e => e.SlnOpeModId).HasColumnName("SLN_OpeModId");
            entity.Property(e => e.SlnOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLN_OpeModKod");
            entity.Property(e => e.SlnOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SLN_OpeModNazwisko");
            entity.Property(e => e.SlnOpeZalId).HasColumnName("SLN_OpeZalId");
            entity.Property(e => e.SlnOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLN_OpeZalKod");
            entity.Property(e => e.SlnOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SLN_OpeZalNazwisko");
            entity.Property(e => e.SlnOpis)
                .HasMaxLength(254)
                .HasColumnName("SLN_Opis");
            entity.Property(e => e.SlnStaModId).HasColumnName("SLN_StaModId");
            entity.Property(e => e.SlnStaZalId).HasColumnName("SLN_StaZalId");
            entity.Property(e => e.SlnSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SLN_Symbol");
            entity.Property(e => e.SlnTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SLN_TS_Mod");
            entity.Property(e => e.SlnTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SLN_TS_Zal");
        });

        modelBuilder.Entity<SerieKalPoz>(entity =>
        {
            entity.HasKey(e => e.SlpSlpId)
                .HasName("SLP_Primary")
                .HasFillFactor(100);

            entity.ToTable("SerieKalPoz", "CDN", tb => tb.HasTrigger("SerieKalPoz_Delete_Trigger"));

            entity.HasIndex(e => new { e.SlpSlnId, e.SlpSlpId }, "SlpNaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SlpSlpId).HasColumnName("SLP_SlpId");
            entity.Property(e => e.SlpLp).HasColumnName("SLP_Lp");
            entity.Property(e => e.SlpOdwId).HasColumnName("SLP_OdwId");
            entity.Property(e => e.SlpSlnId).HasColumnName("SLP_SlnId");
            entity.Property(e => e.SlpTypDnia).HasColumnName("SLP_TypDnia");

            entity.HasOne(d => d.SlpOdw).WithMany(p => p.SerieKalPozs)
                .HasForeignKey(d => d.SlpOdwId)
                .HasConstraintName("FK_SLPOdwLink");

            entity.HasOne(d => d.SlpSln).WithMany(p => p.SerieKalPozs)
                .HasForeignKey(d => d.SlpSlnId)
                .HasConstraintName("FK_SlpNaglowek");
        });

        modelBuilder.Entity<SerieKalPozGodz>(entity =>
        {
            entity.HasKey(e => e.SkpSkpId)
                .HasName("SKP_Primary")
                .HasFillFactor(100);

            entity.ToTable("SerieKalPozGodz", "CDN");

            entity.HasIndex(e => e.SkpLp, "SKPLp").HasFillFactor(100);

            entity.HasIndex(e => e.SkpSlpId, "SKPSlpLink").HasFillFactor(100);

            entity.Property(e => e.SkpSkpId).HasColumnName("SKP_SkpId");
            entity.Property(e => e.SkpDoGodziny)
                .HasColumnType("datetime")
                .HasColumnName("SKP_DoGodziny");
            entity.Property(e => e.SkpLp).HasColumnName("SKP_Lp");
            entity.Property(e => e.SkpOdGodziny)
                .HasColumnType("datetime")
                .HasColumnName("SKP_OdGodziny");
            entity.Property(e => e.SkpSlpId).HasColumnName("SKP_SlpId");
            entity.Property(e => e.SkpStrefa).HasColumnName("SKP_Strefa");

            entity.HasOne(d => d.SkpSlp).WithMany(p => p.SerieKalPozGodzs)
                .HasForeignKey(d => d.SkpSlpId)
                .HasConstraintName("FK_SKPSlpLink");
        });

        modelBuilder.Entity<SerwisanciView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SerwisanciView", "CDN");

            entity.Property(e => e.SrWId).HasColumnName("SrW_Id");
            entity.Property(e => e.SrWImie)
                .HasMaxLength(50)
                .HasColumnName("SrW_Imie");
            entity.Property(e => e.SrWKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrW_Kod");
            entity.Property(e => e.SrWNazwisko)
                .HasMaxLength(50)
                .HasColumnName("SrW_Nazwisko");
            entity.Property(e => e.SrWTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrW_Telefon");
            entity.Property(e => e.SrWTelefon2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrW_Telefon2");
            entity.Property(e => e.SrWTyp).HasColumnName("SrW_Typ");
        });

        modelBuilder.Entity<SprawozdaniaFinansowe>(entity =>
        {
            entity.HasKey(e => e.SfsSfsid)
                .HasName("SFS_Primary")
                .HasFillFactor(100);

            entity.ToTable("SprawozdaniaFinansowe", "CDN");

            entity.HasIndex(e => e.SfsConfigDabid, "SFSConfigDABId")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SfsDabid, "SFSDABId")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SfsUpodabid, "SFSUPODABId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SfsSfsid).HasColumnName("SFS_SFSId");
            entity.Property(e => e.SfsActive)
                .HasDefaultValue(1)
                .HasColumnName("SFS_Active");
            entity.Property(e => e.SfsCompanyName).HasColumnName("SFS_CompanyName");
            entity.Property(e => e.SfsConfigDabid).HasColumnName("SFS_ConfigDABId");
            entity.Property(e => e.SfsDabid).HasColumnName("SFS_DABId");
            entity.Property(e => e.SfsDateTo)
                .HasColumnType("datetime")
                .HasColumnName("SFS_DateTo");
            entity.Property(e => e.SfsOpeModId).HasColumnName("SFS_OpeModID");
            entity.Property(e => e.SfsOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFS_OpeModKod");
            entity.Property(e => e.SfsOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SFS_OpeModNazwisko");
            entity.Property(e => e.SfsOpeZalId).HasColumnName("SFS_OpeZalID");
            entity.Property(e => e.SfsOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFS_OpeZalKod");
            entity.Property(e => e.SfsOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SFS_OpeZalNazwisko");
            entity.Property(e => e.SfsPreparationDate)
                .HasColumnType("datetime")
                .HasColumnName("SFS_PreparationDate");
            entity.Property(e => e.SfsReferenceNumber)
                .HasMaxLength(41)
                .HasColumnName("SFS_ReferenceNumber");
            entity.Property(e => e.SfsSchemaVersion)
                .HasMaxLength(11)
                .HasColumnName("SFS_SchemaVersion");
            entity.Property(e => e.SfsStaModId).HasColumnName("SFS_StaModId");
            entity.Property(e => e.SfsStaZalId).HasColumnName("SFS_StaZalId");
            entity.Property(e => e.SfsStatus).HasColumnName("SFS_Status");
            entity.Property(e => e.SfsTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SFS_TS_Mod");
            entity.Property(e => e.SfsTsOblicz)
                .HasColumnType("datetime")
                .HasColumnName("SFS_TS_Oblicz");
            entity.Property(e => e.SfsTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SFS_TS_Zal");
            entity.Property(e => e.SfsType).HasColumnName("SFS_Type");
            entity.Property(e => e.SfsUpocode)
                .HasMaxLength(4)
                .HasColumnName("SFS_UPOCode");
            entity.Property(e => e.SfsUpodabid).HasColumnName("SFS_UPODABId");
            entity.Property(e => e.SfsUpodescription).HasColumnName("SFS_UPODescription");
        });

        modelBuilder.Entity<SprawozdaniaFinansowePodpisy>(entity =>
        {
            entity.HasKey(e => e.SfpSfpid)
                .HasName("SFP_Primary")
                .HasFillFactor(100);

            entity.ToTable("SprawozdaniaFinansowePodpisy", "CDN");

            entity.HasIndex(e => e.SfpSfnid, "SFPSFNId").HasFillFactor(100);

            entity.Property(e => e.SfpSfpid).HasColumnName("SFP_SFPId");
            entity.Property(e => e.SfpNazwa)
                .HasMaxLength(255)
                .HasColumnName("SFP_Nazwa");
            entity.Property(e => e.SfpOdcisk)
                .HasMaxLength(255)
                .HasColumnName("SFP_Odcisk");
            entity.Property(e => e.SfpOdmowa).HasColumnName("SFP_Odmowa");
            entity.Property(e => e.SfpOpeModId).HasColumnName("SFP_OpeModID");
            entity.Property(e => e.SfpOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFP_OpeModKod");
            entity.Property(e => e.SfpOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SFP_OpeModNazwisko");
            entity.Property(e => e.SfpOpeZalId).HasColumnName("SFP_OpeZalID");
            entity.Property(e => e.SfpOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFP_OpeZalKod");
            entity.Property(e => e.SfpOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SFP_OpeZalNazwisko");
            entity.Property(e => e.SfpPodpis).HasColumnName("SFP_Podpis");
            entity.Property(e => e.SfpSfnid).HasColumnName("SFP_SFNId");
            entity.Property(e => e.SfpStaModId).HasColumnName("SFP_StaModId");
            entity.Property(e => e.SfpStaZalId).HasColumnName("SFP_StaZalId");
            entity.Property(e => e.SfpTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SFP_TS_Mod");
            entity.Property(e => e.SfpTsOblicz)
                .HasColumnType("datetime")
                .HasColumnName("SFP_TS_Oblicz");
            entity.Property(e => e.SfpTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SFP_TS_Zal");
        });

        modelBuilder.Entity<SprawozdaniaFinansoweZalaczniki>(entity =>
        {
            entity.HasKey(e => e.SfzSfzid)
                .HasName("SFZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("SprawozdaniaFinansoweZalaczniki", "CDN");

            entity.HasIndex(e => e.SfzDabid, "SFZDABId")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SfzSfnid, "SFZSFNId").HasFillFactor(100);

            entity.Property(e => e.SfzSfzid).HasColumnName("SFZ_SFZId");
            entity.Property(e => e.SfzDabid).HasColumnName("SFZ_DABId");
            entity.Property(e => e.SfzNazwa)
                .HasMaxLength(260)
                .HasColumnName("SFZ_Nazwa");
            entity.Property(e => e.SfzOpeModId).HasColumnName("SFZ_OpeModID");
            entity.Property(e => e.SfzOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFZ_OpeModKod");
            entity.Property(e => e.SfzOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SFZ_OpeModNazwisko");
            entity.Property(e => e.SfzOpeZalId).HasColumnName("SFZ_OpeZalID");
            entity.Property(e => e.SfzOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFZ_OpeZalKod");
            entity.Property(e => e.SfzOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SFZ_OpeZalNazwisko");
            entity.Property(e => e.SfzSfnid).HasColumnName("SFZ_SFNId");
            entity.Property(e => e.SfzStaModId).HasColumnName("SFZ_StaModId");
            entity.Property(e => e.SfzStaZalId).HasColumnName("SFZ_StaZalId");
            entity.Property(e => e.SfzTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SFZ_TS_Mod");
            entity.Property(e => e.SfzTsOblicz)
                .HasColumnType("datetime")
                .HasColumnName("SFZ_TS_Oblicz");
            entity.Property(e => e.SfzTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SFZ_TS_Zal");
            entity.Property(e => e.SfzTyp).HasColumnName("SFZ_Typ");
            entity.Property(e => e.SfzWlasny).HasColumnName("SFZ_Wlasny");
        });

        modelBuilder.Entity<SrsCyklElem>(entity =>
        {
            entity.HasKey(e => e.SrESrEid)
                .HasName("SrE_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsCyklElem", "CDN", tb => tb.HasTrigger("SrsCyklElem_Delete_Trigger"));

            entity.HasIndex(e => new { e.SrEKatId, e.SrESrEid }, "SrEKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrESrWid, e.SrETwrKod }, "SrETwrKod").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrETwrId, e.SrESrEid }, "SrEUsluga")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrESrWid, e.SrETyp, e.SrELp, e.SrESrEid }, "SrEZlecenia")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrESrEid).HasColumnName("SrE_SrEId");
            entity.Property(e => e.SrEAtr1DeAid).HasColumnName("SrE_Atr1_DeAId");
            entity.Property(e => e.SrEAtr1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr1_Kod");
            entity.Property(e => e.SrEAtr1Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr1_Wartosc");
            entity.Property(e => e.SrEAtr2DeAid).HasColumnName("SrE_Atr2_DeAId");
            entity.Property(e => e.SrEAtr2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr2_Kod");
            entity.Property(e => e.SrEAtr2Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr2_Wartosc");
            entity.Property(e => e.SrEAtr3DeAid).HasColumnName("SrE_Atr3_DeAId");
            entity.Property(e => e.SrEAtr3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr3_Kod");
            entity.Property(e => e.SrEAtr3Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr3_Wartosc");
            entity.Property(e => e.SrEAtr4DeAid).HasColumnName("SrE_Atr4_DeAId");
            entity.Property(e => e.SrEAtr4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr4_Kod");
            entity.Property(e => e.SrEAtr4Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr4_Wartosc");
            entity.Property(e => e.SrEAtr5DeAid).HasColumnName("SrE_Atr5_DeAId");
            entity.Property(e => e.SrEAtr5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr5_Kod");
            entity.Property(e => e.SrEAtr5Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrE_Atr5_Wartosc");
            entity.Property(e => e.SrECenaBrutto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrE_CenaBrutto");
            entity.Property(e => e.SrECenaNetto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrE_CenaNetto");
            entity.Property(e => e.SrECenaZczteremaMiejscami).HasColumnName("SrE_CenaZCzteremaMiejscami");
            entity.Property(e => e.SrEFakturowac).HasColumnName("SrE_Fakturowac");
            entity.Property(e => e.SrEIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrE_Ilosc");
            entity.Property(e => e.SrEIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrE_IloscJM");
            entity.Property(e => e.SrEJm)
                .HasMaxLength(20)
                .HasColumnName("SrE_JM");
            entity.Property(e => e.SrEJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrE_JMPrzelicznikL");
            entity.Property(e => e.SrEJmprzelicznikM).HasColumnName("SrE_JMPrzelicznikM");
            entity.Property(e => e.SrEJmz)
                .HasMaxLength(20)
                .HasColumnName("SrE_JMZ");
            entity.Property(e => e.SrEKatId).HasColumnName("SrE_KatID");
            entity.Property(e => e.SrELp).HasColumnName("SrE_Lp");
            entity.Property(e => e.SrEMagId).HasColumnName("SrE_MagId");
            entity.Property(e => e.SrEOpis)
                .HasMaxLength(1024)
                .HasColumnName("SrE_Opis");
            entity.Property(e => e.SrESerwisantId).HasColumnName("SrE_SerwisantId");
            entity.Property(e => e.SrESerwisantTyp).HasColumnName("SrE_SerwisantTyp");
            entity.Property(e => e.SrESrWid).HasColumnName("SrE_SrWId");
            entity.Property(e => e.SrETwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrE_TwrEAN");
            entity.Property(e => e.SrETwrId).HasColumnName("SrE_TwrId");
            entity.Property(e => e.SrETwrKod)
                .HasMaxLength(50)
                .HasColumnName("SrE_TwrKod");
            entity.Property(e => e.SrETwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("SrE_TwrNazwa");
            entity.Property(e => e.SrETyp).HasColumnName("SrE_Typ");
            entity.Property(e => e.SrETypCeny).HasColumnName("SrE_TypCeny");
            entity.Property(e => e.SrEUstawAtrSql)
                .HasDefaultValue(-1)
                .HasColumnName("SrE_UstawAtrSQL");
            entity.Property(e => e.SrEWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrE_WartoscBrutto");
            entity.Property(e => e.SrEWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrE_WartoscNetto");

            entity.HasOne(d => d.SrEKat).WithMany(p => p.SrsCyklElems)
                .HasForeignKey(d => d.SrEKatId)
                .HasConstraintName("FK_SrEKategoria");

            entity.HasOne(d => d.SrESrW).WithMany(p => p.SrsCyklElems)
                .HasForeignKey(d => d.SrESrWid)
                .HasConstraintName("FK_SrEZlecenia");
        });

        modelBuilder.Entity<SrsCyklNag>(entity =>
        {
            entity.HasKey(e => e.SrWSrWid)
                .HasName("SrW_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsCyklNag", "CDN", tb => tb.HasTrigger("SrsCyklNag_Delete_Trigger"));

            entity.HasIndex(e => e.SrWKod, "SrWKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrWSrWid).HasColumnName("SrW_SrWId");
            entity.Property(e => e.SrWAutomat).HasColumnName("SrW_Automat");
            entity.Property(e => e.SrWAutomatEmail).HasColumnName("SrW_AutomatEmail");
            entity.Property(e => e.SrWAutomatEmailAdres)
                .HasMaxLength(127)
                .HasColumnName("SrW_AutomatEmailAdres");
            entity.Property(e => e.SrWAutomatEmailSzablonId).HasColumnName("SrW_AutomatEmailSzablonId");
            entity.Property(e => e.SrWAutomatSms).HasColumnName("SrW_AutomatSms");
            entity.Property(e => e.SrWAutomatSmsNumerTelefonu)
                .HasMaxLength(127)
                .HasColumnName("SrW_AutomatSmsNumerTelefonu");
            entity.Property(e => e.SrWAutomatSmsSzablonId).HasColumnName("SrW_AutomatSmsSzablonId");
            entity.Property(e => e.SrWCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("SrW_CzasPrzypomnienia");
            entity.Property(e => e.SrWDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SrW_DataDok");
            entity.Property(e => e.SrWDataKolejnego)
                .HasColumnType("datetime")
                .HasColumnName("SrW_DataKolejnego");
            entity.Property(e => e.SrWDataOstatniej)
                .HasColumnType("datetime")
                .HasColumnName("SrW_DataOstatniej");
            entity.Property(e => e.SrWDdfId).HasColumnName("SrW_DDfId");
            entity.Property(e => e.SrWEmail)
                .HasMaxLength(127)
                .HasColumnName("SrW_Email");
            entity.Property(e => e.SrWKatId).HasColumnName("SrW_KatID");
            entity.Property(e => e.SrWKod)
                .HasMaxLength(20)
                .HasColumnName("SrW_Kod");
            entity.Property(e => e.SrWMagId).HasColumnName("SrW_MagId");
            entity.Property(e => e.SrWNazwa)
                .HasMaxLength(50)
                .HasColumnName("SrW_Nazwa");
            entity.Property(e => e.SrWNieaktywny).HasColumnName("SrW_Nieaktywny");
            entity.Property(e => e.SrWNumerNr).HasColumnName("SrW_NumerNr");
            entity.Property(e => e.SrWNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("SrW_NumerString");
            entity.Property(e => e.SrWOdbAdres2)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbAdres2");
            entity.Property(e => e.SrWOdbEmail)
                .HasMaxLength(127)
                .HasColumnName("SrW_OdbEmail");
            entity.Property(e => e.SrWOdbGmina)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbGmina");
            entity.Property(e => e.SrWOdbId).HasColumnName("SrW_OdbID");
            entity.Property(e => e.SrWOdbKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SrW_OdbKodPocztowy");
            entity.Property(e => e.SrWOdbKraj)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbKraj");
            entity.Property(e => e.SrWOdbMiasto)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbMiasto");
            entity.Property(e => e.SrWOdbNazwa1)
                .HasMaxLength(50)
                .HasColumnName("SrW_OdbNazwa1");
            entity.Property(e => e.SrWOdbNazwa2)
                .HasMaxLength(50)
                .HasColumnName("SrW_OdbNazwa2");
            entity.Property(e => e.SrWOdbNazwa3)
                .HasMaxLength(250)
                .HasColumnName("SrW_OdbNazwa3");
            entity.Property(e => e.SrWOdbNrDomu)
                .HasMaxLength(10)
                .HasColumnName("SrW_OdbNrDomu");
            entity.Property(e => e.SrWOdbNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("SrW_OdbNrLokalu");
            entity.Property(e => e.SrWOdbPoczta)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbPoczta");
            entity.Property(e => e.SrWOdbPowiat)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbPowiat");
            entity.Property(e => e.SrWOdbTelefon)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SrW_OdbTelefon");
            entity.Property(e => e.SrWOdbUlica)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbUlica");
            entity.Property(e => e.SrWOdbWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("SrW_OdbWojewodztwo");
            entity.Property(e => e.SrWOdbiorcaTyp).HasColumnName("SrW_OdbiorcaTyp");
            entity.Property(e => e.SrWOpeModId).HasColumnName("SrW_OpeModId");
            entity.Property(e => e.SrWOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_OpeModKod");
            entity.Property(e => e.SrWOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrW_OpeModNazwisko");
            entity.Property(e => e.SrWOpeZalId).HasColumnName("SrW_OpeZalId");
            entity.Property(e => e.SrWOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_OpeZalKod");
            entity.Property(e => e.SrWOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrW_OpeZalNazwisko");
            entity.Property(e => e.SrWOpis).HasColumnName("SrW_Opis");
            entity.Property(e => e.SrWPodAdres2)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodAdres2");
            entity.Property(e => e.SrWPodGmina)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodGmina");
            entity.Property(e => e.SrWPodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SrW_PodKodPocztowy");
            entity.Property(e => e.SrWPodKraj)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodKraj");
            entity.Property(e => e.SrWPodMiasto)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodMiasto");
            entity.Property(e => e.SrWPodNazwa1)
                .HasMaxLength(50)
                .HasColumnName("SrW_PodNazwa1");
            entity.Property(e => e.SrWPodNazwa2)
                .HasMaxLength(50)
                .HasColumnName("SrW_PodNazwa2");
            entity.Property(e => e.SrWPodNazwa3)
                .HasMaxLength(250)
                .HasColumnName("SrW_PodNazwa3");
            entity.Property(e => e.SrWPodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("SrW_PodNrDomu");
            entity.Property(e => e.SrWPodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("SrW_PodNrLokalu");
            entity.Property(e => e.SrWPodPoczta)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodPoczta");
            entity.Property(e => e.SrWPodPowiat)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodPowiat");
            entity.Property(e => e.SrWPodUlica)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodUlica");
            entity.Property(e => e.SrWPodWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("SrW_PodWojewodztwo");
            entity.Property(e => e.SrWPodmiotId).HasColumnName("SrW_PodmiotId");
            entity.Property(e => e.SrWPodmiotTyp).HasColumnName("SrW_PodmiotTyp");
            entity.Property(e => e.SrWPowtarzajCo).HasColumnName("SrW_PowtarzajCo");
            entity.Property(e => e.SrWPowtarzajCoData)
                .HasColumnType("datetime")
                .HasColumnName("SrW_PowtarzajCoData");
            entity.Property(e => e.SrWProwadzacyId).HasColumnName("SrW_ProwadzacyId");
            entity.Property(e => e.SrWProwadzacyTyp).HasColumnName("SrW_ProwadzacyTyp");
            entity.Property(e => e.SrWPrzedstawicielId).HasColumnName("SrW_PrzedstawicielId");
            entity.Property(e => e.SrWPrzedstawicielNazwisko)
                .HasMaxLength(40)
                .HasColumnName("SrW_PrzedstawicielNazwisko");
            entity.Property(e => e.SrWPrzedstawicielTelefon)
                .HasMaxLength(40)
                .HasColumnName("SrW_PrzedstawicielTelefon");
            entity.Property(e => e.SrWPrzypomnienie).HasColumnName("SrW_Przypomnienie");
            entity.Property(e => e.SrWSrUid).HasColumnName("SrW_SrUId");
            entity.Property(e => e.SrWStaModId).HasColumnName("SrW_StaModId");
            entity.Property(e => e.SrWStaZalId).HasColumnName("SrW_StaZalId");
            entity.Property(e => e.SrWTelefon)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SrW_Telefon");
            entity.Property(e => e.SrWTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SrW_TS_Mod");
            entity.Property(e => e.SrWTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SrW_TS_Zal");
            entity.Property(e => e.SrWTypNb).HasColumnName("SrW_TypNB");
            entity.Property(e => e.SrWWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_Waluta");
            entity.Property(e => e.SrWZbiorczeFaCzesci).HasColumnName("SrW_ZbiorczeFaCzesci");
            entity.Property(e => e.SrWZbiorczeFaCzynnosci).HasColumnName("SrW_ZbiorczeFaCzynnosci");
            entity.Property(e => e.SrWZbiorczeTwrIdCzesci).HasColumnName("SrW_ZbiorczeTwrIdCzesci");
            entity.Property(e => e.SrWZbiorczeTwrIdCzynnosci).HasColumnName("SrW_ZbiorczeTwrIdCzynnosci");
            entity.Property(e => e.SrWZlecajacyId).HasColumnName("SrW_ZlecajacyId");
            entity.Property(e => e.SrWZlecajacyNazwisko)
                .HasMaxLength(40)
                .HasColumnName("SrW_ZlecajacyNazwisko");
            entity.Property(e => e.SrWZlecajacyTelefon)
                .HasMaxLength(40)
                .HasColumnName("SrW_ZlecajacyTelefon");

            entity.HasOne(d => d.SrWKat).WithMany(p => p.SrsCyklNags)
                .HasForeignKey(d => d.SrWKatId)
                .HasConstraintName("FK_SrWKategoria");

            entity.HasOne(d => d.SrWZlecajacy).WithMany(p => p.SrsCyklNags)
                .HasForeignKey(d => d.SrWZlecajacyId)
                .HasConstraintName("FK_SrWZlecajacy");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.SrsCyklNagPodmiotyViews)
                .HasForeignKey(d => new { d.SrWOdbId, d.SrWOdbiorcaTyp })
                .HasConstraintName("FK_SrWOdbiorca");

            entity.HasOne(d => d.PodmiotyViewNavigation).WithMany(p => p.SrsCyklNagPodmiotyViewNavigations)
                .HasForeignKey(d => new { d.SrWPodmiotId, d.SrWPodmiotTyp })
                .HasConstraintName("FK_SrWPodmiot");
        });

        modelBuilder.Entity<SrsCzesci>(entity =>
        {
            entity.HasKey(e => e.SrCSrCid)
                .HasName("SrC_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsCzesci", "CDN", tb => tb.HasTrigger("SrsCzesci_Delete_Trigger"));

            entity.HasIndex(e => new { e.SrCSrZid, e.SrCTwrKod }, "SrCTwrKod").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrCTwrId, e.SrCSrCid }, "SrCUsluga")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrCSrZid, e.SrCLp, e.SrCSrCid }, "SrCZlecenia")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrCKatId, e.SrCSrCid }, "SrcKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrCSrCid).HasColumnName("SrC_SrCId");
            entity.Property(e => e.SrCAtr1DeAid).HasColumnName("SrC_Atr1_DeAId");
            entity.Property(e => e.SrCAtr1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr1_Kod");
            entity.Property(e => e.SrCAtr1Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr1_Wartosc");
            entity.Property(e => e.SrCAtr2DeAid).HasColumnName("SrC_Atr2_DeAId");
            entity.Property(e => e.SrCAtr2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr2_Kod");
            entity.Property(e => e.SrCAtr2Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr2_Wartosc");
            entity.Property(e => e.SrCAtr3DeAid).HasColumnName("SrC_Atr3_DeAId");
            entity.Property(e => e.SrCAtr3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr3_Kod");
            entity.Property(e => e.SrCAtr3Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr3_Wartosc");
            entity.Property(e => e.SrCAtr4DeAid).HasColumnName("SrC_Atr4_DeAId");
            entity.Property(e => e.SrCAtr4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr4_Kod");
            entity.Property(e => e.SrCAtr4Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr4_Wartosc");
            entity.Property(e => e.SrCAtr5DeAid).HasColumnName("SrC_Atr5_DeAId");
            entity.Property(e => e.SrCAtr5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr5_Kod");
            entity.Property(e => e.SrCAtr5Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrC_Atr5_Wartosc");
            entity.Property(e => e.SrCCena0)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrC_Cena0");
            entity.Property(e => e.SrCCena0Pln)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrC_Cena0PLN");
            entity.Property(e => e.SrCCenaBrutto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrC_CenaBrutto");
            entity.Property(e => e.SrCCenaBruttoPln)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrC_CenaBruttoPLN");
            entity.Property(e => e.SrCCenaNetto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrC_CenaNetto");
            entity.Property(e => e.SrCCenaNettoPln)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrC_CenaNettoPLN");
            entity.Property(e => e.SrCCenaZczteremaMiejscami).HasColumnName("SrC_CenaZCzteremaMiejscami");
            entity.Property(e => e.SrCCzySaCechyWymagane)
                .HasDefaultValue(-1)
                .HasColumnName("SrC_CzySaCechyWymagane");
            entity.Property(e => e.SrCDokument).HasColumnName("SrC_Dokument");
            entity.Property(e => e.SrCFakturowac).HasColumnName("SrC_Fakturowac");
            entity.Property(e => e.SrCFlagaVat)
                .HasDefaultValue((short)2)
                .HasColumnName("SrC_FlagaVat");
            entity.Property(e => e.SrCIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_Ilosc");
            entity.Property(e => e.SrCIloscDoPobraniaDisp)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_IloscDoPobraniaDisp");
            entity.Property(e => e.SrCIloscDoWydaniaDisp)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_IloscDoWydaniaDisp");
            entity.Property(e => e.SrCIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_IloscJM");
            entity.Property(e => e.SrCIloscPobierana)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_IloscPobierana");
            entity.Property(e => e.SrCIloscPobieranaDisp)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_IloscPobieranaDisp");
            entity.Property(e => e.SrCIloscPobieranaJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_IloscPobieranaJM");
            entity.Property(e => e.SrCIloscWydanaDisp)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_IloscWydanaDisp");
            entity.Property(e => e.SrCJm)
                .HasMaxLength(20)
                .HasColumnName("SrC_JM");
            entity.Property(e => e.SrCJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrC_JMPrzelicznikL");
            entity.Property(e => e.SrCJmprzelicznikM).HasColumnName("SrC_JMPrzelicznikM");
            entity.Property(e => e.SrCJmz)
                .HasMaxLength(20)
                .HasColumnName("SrC_JMZ");
            entity.Property(e => e.SrCKatId).HasColumnName("SrC_KatID");
            entity.Property(e => e.SrCLp).HasColumnName("SrC_Lp");
            entity.Property(e => e.SrCMagId).HasColumnName("SrC_MagId");
            entity.Property(e => e.SrCMmTreId).HasColumnName("SrC_MmTreID");
            entity.Property(e => e.SrCMmZwrot).HasColumnName("SrC_MmZwrot");
            entity.Property(e => e.SrCMmZwrotDisp)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrC_MmZwrotDisp");
            entity.Property(e => e.SrCOpis)
                .HasMaxLength(1024)
                .HasColumnName("SrC_Opis");
            entity.Property(e => e.SrCRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrC_Rabat");
            entity.Property(e => e.SrCSerwisantId).HasColumnName("SrC_SerwisantId");
            entity.Property(e => e.SrCSerwisantTyp).HasColumnName("SrC_SerwisantTyp");
            entity.Property(e => e.SrCSrZid).HasColumnName("SrC_SrZId");
            entity.Property(e => e.SrCStatus).HasColumnName("SrC_Status");
            entity.Property(e => e.SrCStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrC_Stawka");
            entity.Property(e => e.SrCStawkaOss).HasColumnName("SrC_StawkaOSS");
            entity.Property(e => e.SrCTwCnumer).HasColumnName("SrC_TwCNumer");
            entity.Property(e => e.SrCTwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrC_TwrEAN");
            entity.Property(e => e.SrCTwrId).HasColumnName("SrC_TwrId");
            entity.Property(e => e.SrCTwrKod)
                .HasMaxLength(50)
                .HasColumnName("SrC_TwrKod");
            entity.Property(e => e.SrCTwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("SrC_TwrNazwa");
            entity.Property(e => e.SrCUstawAtrSql)
                .HasDefaultValue(-1)
                .HasColumnName("SrC_UstawAtrSQL");
            entity.Property(e => e.SrCWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrC_Waluta");
            entity.Property(e => e.SrCWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrC_WartoscBrutto");
            entity.Property(e => e.SrCWartoscBruttoPln)
                .HasColumnType("decimal(23, 10)")
                .HasColumnName("SrC_WartoscBruttoPLN");
            entity.Property(e => e.SrCWartoscBruttoWylicz)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrC_WartoscBruttoWylicz");
            entity.Property(e => e.SrCWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrC_WartoscNetto");
            entity.Property(e => e.SrCWartoscNettoPln)
                .HasColumnType("decimal(23, 10)")
                .HasColumnName("SrC_WartoscNettoPLN");
            entity.Property(e => e.SrCWartoscNettoWylicz)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrC_WartoscNettoWylicz");
            entity.Property(e => e.SrCWartoscZakupu)
                .HasComputedColumnSql("([CDN].[FNSRC_WARTOSCZAKUPU]([SRC_SRCID]))", false)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrC_WartoscZakupu");
            entity.Property(e => e.SrCWartoscZakupuWylicz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrC_WartoscZakupuWylicz");
            entity.Property(e => e.SrCWyborDostaw)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrC_WyborDostaw");
            entity.Property(e => e.SrCZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrC_Zrodlowa");

            entity.HasOne(d => d.SrCKat).WithMany(p => p.SrsCzescis)
                .HasForeignKey(d => d.SrCKatId)
                .HasConstraintName("FK_SrcKategoria");

            entity.HasOne(d => d.SrCSrZ).WithMany(p => p.SrsCzescis)
                .HasForeignKey(d => d.SrCSrZid)
                .HasConstraintName("FK_SrCZlecenia");
        });

        modelBuilder.Entity<SrsCzesciDost>(entity =>
        {
            entity.HasKey(e => e.SrCdSrCdid)
                .HasName("SrCD_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsCzesciDost", "CDN", tb => tb.HasTrigger("SrsCzesciDost_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => e.SrCdTrSidDost, "SrCDTrSDostawa").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrCdSrCid, e.SrCdTrSid, e.SrCdSrCdid }, "TrSCzescDost")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrCdSrCdid).HasColumnName("SrCD_SrCDID");
            entity.Property(e => e.SrCdCecha10DeAid).HasColumnName("SrCD_Cecha10_DeAId");
            entity.Property(e => e.SrCdCecha10Format).HasColumnName("SrCD_Cecha10_Format");
            entity.Property(e => e.SrCdCecha10Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha10_Kod");
            entity.Property(e => e.SrCdCecha10Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha10_Wartosc");
            entity.Property(e => e.SrCdCecha1DeAid).HasColumnName("SrCD_Cecha1_DeAId");
            entity.Property(e => e.SrCdCecha1Format).HasColumnName("SrCD_Cecha1_Format");
            entity.Property(e => e.SrCdCecha1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha1_Kod");
            entity.Property(e => e.SrCdCecha1Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha1_Wartosc");
            entity.Property(e => e.SrCdCecha2DeAid).HasColumnName("SrCD_Cecha2_DeAId");
            entity.Property(e => e.SrCdCecha2Format).HasColumnName("SrCD_Cecha2_Format");
            entity.Property(e => e.SrCdCecha2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha2_Kod");
            entity.Property(e => e.SrCdCecha2Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha2_Wartosc");
            entity.Property(e => e.SrCdCecha3DeAid).HasColumnName("SrCD_Cecha3_DeAId");
            entity.Property(e => e.SrCdCecha3Format).HasColumnName("SrCD_Cecha3_Format");
            entity.Property(e => e.SrCdCecha3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha3_Kod");
            entity.Property(e => e.SrCdCecha3Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha3_Wartosc");
            entity.Property(e => e.SrCdCecha4DeAid).HasColumnName("SrCD_Cecha4_DeAId");
            entity.Property(e => e.SrCdCecha4Format).HasColumnName("SrCD_Cecha4_Format");
            entity.Property(e => e.SrCdCecha4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha4_Kod");
            entity.Property(e => e.SrCdCecha4Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha4_Wartosc");
            entity.Property(e => e.SrCdCecha5DeAid).HasColumnName("SrCD_Cecha5_DeAId");
            entity.Property(e => e.SrCdCecha5Format).HasColumnName("SrCD_Cecha5_Format");
            entity.Property(e => e.SrCdCecha5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha5_Kod");
            entity.Property(e => e.SrCdCecha5Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha5_Wartosc");
            entity.Property(e => e.SrCdCecha6DeAid).HasColumnName("SrCD_Cecha6_DeAId");
            entity.Property(e => e.SrCdCecha6Format).HasColumnName("SrCD_Cecha6_Format");
            entity.Property(e => e.SrCdCecha6Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha6_Kod");
            entity.Property(e => e.SrCdCecha6Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha6_Wartosc");
            entity.Property(e => e.SrCdCecha7DeAid).HasColumnName("SrCD_Cecha7_DeAId");
            entity.Property(e => e.SrCdCecha7Format).HasColumnName("SrCD_Cecha7_Format");
            entity.Property(e => e.SrCdCecha7Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha7_Kod");
            entity.Property(e => e.SrCdCecha7Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha7_Wartosc");
            entity.Property(e => e.SrCdCecha8DeAid).HasColumnName("SrCD_Cecha8_DeAId");
            entity.Property(e => e.SrCdCecha8Format).HasColumnName("SrCD_Cecha8_Format");
            entity.Property(e => e.SrCdCecha8Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha8_Kod");
            entity.Property(e => e.SrCdCecha8Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha8_Wartosc");
            entity.Property(e => e.SrCdCecha9DeAid).HasColumnName("SrCD_Cecha9_DeAId");
            entity.Property(e => e.SrCdCecha9Format).HasColumnName("SrCD_Cecha9_Format");
            entity.Property(e => e.SrCdCecha9Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrCD_Cecha9_Kod");
            entity.Property(e => e.SrCdCecha9Wartosc)
                .HasMaxLength(255)
                .HasColumnName("SrCD_Cecha9_Wartosc");
            entity.Property(e => e.SrCdDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("SrCD_DataOpe");
            entity.Property(e => e.SrCdDostawca)
                .HasMaxLength(50)
                .HasColumnName("SrCD_Dostawca");
            entity.Property(e => e.SrCdIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrCD_Ilosc");
            entity.Property(e => e.SrCdIloscDostepna)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrCD_IloscDostepna");
            entity.Property(e => e.SrCdIloscWykorzystana)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrCD_IloscWykorzystana");
            entity.Property(e => e.SrCdNumerObcy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("SrCD_NumerObcy");
            entity.Property(e => e.SrCdNumerPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SrCD_NumerPelny");
            entity.Property(e => e.SrCdSrCid).HasColumnName("SrCD_SrCId");
            entity.Property(e => e.SrCdTrSid).HasColumnName("SrCD_TrSID");
            entity.Property(e => e.SrCdTrSidDost).HasColumnName("SrCD_TrSIdDost");
            entity.Property(e => e.SrCdWartosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrCD_Wartosc");
            entity.Property(e => e.SrCdZwrId).HasColumnName("SrCD_ZwrId");

            entity.HasOne(d => d.SrCdSrC).WithMany(p => p.SrsCzesciDosts)
                .HasForeignKey(d => d.SrCdSrCid)
                .HasConstraintName("FK_SrsCzesciDost");
        });

        modelBuilder.Entity<SrsCzynnosci>(entity =>
        {
            entity.HasKey(e => e.SrYSrYid)
                .HasName("SrY_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsCzynnosci", "CDN", tb => tb.HasTrigger("SrsCzynnosci_Delete_Trigger"));

            entity.HasIndex(e => new { e.SrYKatId, e.SrYSrYid }, "SrYKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrYSrZid, e.SrYTwrKod }, "SrYTwrKod").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrYTwrId, e.SrYSrYid }, "SrYUsluga")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrYSrZid, e.SrYLp, e.SrYSrYid }, "SrYZlecenia")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrYSrYid).HasColumnName("SrY_SrYId");
            entity.Property(e => e.SrYAtr1DeAid).HasColumnName("SrY_Atr1_DeAId");
            entity.Property(e => e.SrYAtr1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr1_Kod");
            entity.Property(e => e.SrYAtr1Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr1_Wartosc");
            entity.Property(e => e.SrYAtr2DeAid).HasColumnName("SrY_Atr2_DeAId");
            entity.Property(e => e.SrYAtr2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr2_Kod");
            entity.Property(e => e.SrYAtr2Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr2_Wartosc");
            entity.Property(e => e.SrYAtr3DeAid).HasColumnName("SrY_Atr3_DeAId");
            entity.Property(e => e.SrYAtr3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr3_Kod");
            entity.Property(e => e.SrYAtr3Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr3_Wartosc");
            entity.Property(e => e.SrYAtr4DeAid).HasColumnName("SrY_Atr4_DeAId");
            entity.Property(e => e.SrYAtr4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr4_Kod");
            entity.Property(e => e.SrYAtr4Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr4_Wartosc");
            entity.Property(e => e.SrYAtr5DeAid).HasColumnName("SrY_Atr5_DeAId");
            entity.Property(e => e.SrYAtr5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr5_Kod");
            entity.Property(e => e.SrYAtr5Wartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("SrY_Atr5_Wartosc");
            entity.Property(e => e.SrYCena0)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrY_Cena0");
            entity.Property(e => e.SrYCena0Pln)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrY_Cena0PLN");
            entity.Property(e => e.SrYCenaBrutto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrY_CenaBrutto");
            entity.Property(e => e.SrYCenaBruttoPln)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrY_CenaBruttoPLN");
            entity.Property(e => e.SrYCenaNetto)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("SrY_CenaNetto");
            entity.Property(e => e.SrYCenaNettoPln)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrY_CenaNettoPLN");
            entity.Property(e => e.SrYCenaZczteremaMiejscami).HasColumnName("SrY_CenaZCzteremaMiejscami");
            entity.Property(e => e.SrYCzasPrzypomnienia)
                .HasColumnType("datetime")
                .HasColumnName("SrY_CzasPrzypomnienia");
            entity.Property(e => e.SrYCzasTrwania)
                .HasColumnType("datetime")
                .HasColumnName("SrY_CzasTrwania");
            entity.Property(e => e.SrYCzasTrwaniaInt).HasColumnName("SrY_CzasTrwaniaInt");
            entity.Property(e => e.SrYDataWykonania)
                .HasColumnType("datetime")
                .HasColumnName("SrY_DataWykonania");
            entity.Property(e => e.SrYDokument).HasColumnName("SrY_Dokument");
            entity.Property(e => e.SrYFakturowac).HasColumnName("SrY_Fakturowac");
            entity.Property(e => e.SrYFlagaVat)
                .HasDefaultValue((short)2)
                .HasColumnName("SrY_FlagaVat");
            entity.Property(e => e.SrYIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrY_Ilosc");
            entity.Property(e => e.SrYIloscDisp)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrY_IloscDisp");
            entity.Property(e => e.SrYIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrY_IloscJM");
            entity.Property(e => e.SrYJm)
                .HasMaxLength(20)
                .HasColumnName("SrY_JM");
            entity.Property(e => e.SrYJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrY_JMPrzelicznikL");
            entity.Property(e => e.SrYJmprzelicznikM).HasColumnName("SrY_JMPrzelicznikM");
            entity.Property(e => e.SrYJmz)
                .HasMaxLength(20)
                .HasColumnName("SrY_JMZ");
            entity.Property(e => e.SrYKatId).HasColumnName("SrY_KatID");
            entity.Property(e => e.SrYKosztUslugi)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrY_KosztUslugi");
            entity.Property(e => e.SrYLp).HasColumnName("SrY_Lp");
            entity.Property(e => e.SrYOpis)
                .HasMaxLength(1024)
                .HasDefaultValue("")
                .HasColumnName("SrY_Opis");
            entity.Property(e => e.SrYPoprzedniaOk).HasColumnName("SrY_PoprzedniaOk");
            entity.Property(e => e.SrYPrzypomnienie).HasColumnName("SrY_Przypomnienie");
            entity.Property(e => e.SrYRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrY_Rabat");
            entity.Property(e => e.SrYRealizacja).HasColumnName("SrY_Realizacja");
            entity.Property(e => e.SrYRezerwujCzas).HasColumnName("SrY_RezerwujCzas");
            entity.Property(e => e.SrYSerwisantId).HasColumnName("SrY_SerwisantId");
            entity.Property(e => e.SrYSerwisantTyp).HasColumnName("SrY_SerwisantTyp");
            entity.Property(e => e.SrYSrZid).HasColumnName("SrY_SrZId");
            entity.Property(e => e.SrYStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrY_Stawka");
            entity.Property(e => e.SrYStawkaOss).HasColumnName("SrY_StawkaOSS");
            entity.Property(e => e.SrYTerminDo)
                .HasColumnType("datetime")
                .HasColumnName("SrY_TerminDo");
            entity.Property(e => e.SrYTerminOd)
                .HasColumnType("datetime")
                .HasColumnName("SrY_TerminOd");
            entity.Property(e => e.SrYTwCnumer).HasColumnName("SrY_TwCNumer");
            entity.Property(e => e.SrYTwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SrY_TwrEAN");
            entity.Property(e => e.SrYTwrId).HasColumnName("SrY_TwrId");
            entity.Property(e => e.SrYTwrKod)
                .HasMaxLength(50)
                .HasColumnName("SrY_TwrKod");
            entity.Property(e => e.SrYTwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("SrY_TwrNazwa");
            entity.Property(e => e.SrYUstawAtrSql)
                .HasDefaultValue(-1)
                .HasColumnName("SrY_UstawAtrSQL");
            entity.Property(e => e.SrYWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrY_Waluta");
            entity.Property(e => e.SrYWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrY_WartoscBrutto");
            entity.Property(e => e.SrYWartoscBruttoPln)
                .HasColumnType("decimal(23, 10)")
                .HasColumnName("SrY_WartoscBruttoPLN");
            entity.Property(e => e.SrYWartoscBruttoWylicz)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrY_WartoscBruttoWylicz");
            entity.Property(e => e.SrYWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrY_WartoscNetto");
            entity.Property(e => e.SrYWartoscNettoPln)
                .HasColumnType("decimal(23, 10)")
                .HasColumnName("SrY_WartoscNettoPLN");
            entity.Property(e => e.SrYWartoscNettoWylicz)
                .HasColumnType("decimal(19, 6)")
                .HasColumnName("SrY_WartoscNettoWylicz");
            entity.Property(e => e.SrYZakonczona).HasColumnName("SrY_Zakonczona");
            entity.Property(e => e.SrYZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrY_Zrodlowa");

            entity.HasOne(d => d.SrYKat).WithMany(p => p.SrsCzynnoscis)
                .HasForeignKey(d => d.SrYKatId)
                .HasConstraintName("FK_SrYKategoria");

            entity.HasOne(d => d.SrYSrZ).WithMany(p => p.SrsCzynnoscis)
                .HasForeignKey(d => d.SrYSrZid)
                .HasConstraintName("FK_SrYZlecenia");
        });

        modelBuilder.Entity<SrsNotatki>(entity =>
        {
            entity.HasKey(e => e.SrNSrNid)
                .HasName("SrN_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsNotatki", "CDN");

            entity.HasIndex(e => new { e.SrNSrZid, e.SrNLp, e.SrNSrNid }, "SrNZlecenia")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrNSrNid).HasColumnName("SrN_SrNId");
            entity.Property(e => e.SrNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SrN_DataDok");
            entity.Property(e => e.SrNLp).HasColumnName("SrN_Lp");
            entity.Property(e => e.SrNSerwisantId).HasColumnName("SrN_SerwisantId");
            entity.Property(e => e.SrNSerwisantTyp).HasColumnName("SrN_SerwisantTyp");
            entity.Property(e => e.SrNSrZid).HasColumnName("SrN_SrZId");
            entity.Property(e => e.SrNTresc)
                .HasMaxLength(1024)
                .HasColumnName("SrN_Tresc");

            entity.HasOne(d => d.SrNSrZ).WithMany(p => p.SrsNotatkis)
                .HasForeignKey(d => d.SrNSrZid)
                .HasConstraintName("FK_SrNZlecenia");
        });

        modelBuilder.Entity<SrsRodzajeU>(entity =>
        {
            entity.HasKey(e => e.SrRSrRid)
                .HasName("SrR_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsRodzajeU", "CDN");

            entity.HasIndex(e => e.SrRKod, "SrUKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrRSrRid).HasColumnName("SrR_SrRId");
            entity.Property(e => e.SrRKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrR_Kod");
            entity.Property(e => e.SrRNazwa)
                .HasMaxLength(50)
                .HasColumnName("SrR_Nazwa");
            entity.Property(e => e.SrRNieaktywny).HasColumnName("SrR_Nieaktywny");
            entity.Property(e => e.SrROpeModId).HasColumnName("SrR_OpeModId");
            entity.Property(e => e.SrROpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrR_OpeModKod");
            entity.Property(e => e.SrROpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrR_OpeModNazwisko");
            entity.Property(e => e.SrROpeZalId).HasColumnName("SrR_OpeZalId");
            entity.Property(e => e.SrROpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrR_OpeZalKod");
            entity.Property(e => e.SrROpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrR_OpeZalNazwisko");
            entity.Property(e => e.SrRStaModId).HasColumnName("SrR_StaModId");
            entity.Property(e => e.SrRStaZalId).HasColumnName("SrR_StaZalId");
            entity.Property(e => e.SrRTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SrR_TS_Mod");
            entity.Property(e => e.SrRTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SrR_TS_Zal");
        });

        modelBuilder.Entity<SrsUrzadzenium>(entity =>
        {
            entity.HasKey(e => e.SrUSrUid)
                .HasName("SrU_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsUrzadzenia", "CDN", tb => tb.HasTrigger("SrsUrzadzenia_Delete_Trigger"));

            entity.HasIndex(e => new { e.SrUEan, e.SrUSrUid }, "SrUEAN")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrUKod, "SrUKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrUNazwa, e.SrUKod }, "SrUNazwa").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrUOdbId, e.SrUOdbiorcaTyp }, "SrUOdbiorca").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrUPodmiotId, e.SrUPodmiotTyp }, "SrUPodmiot").HasFillFactor(100);

            entity.HasIndex(e => e.SrUSrRid, "SrURodzaj").HasFillFactor(100);

            entity.HasIndex(e => e.SrUTwRid, "SrUTwrId").HasFillFactor(100);

            entity.Property(e => e.SrUSrUid).HasColumnName("SrU_SrUId");
            entity.Property(e => e.SrUEan)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("SrU_EAN");
            entity.Property(e => e.SrUFczesci).HasColumnName("SrU_FCzesci");
            entity.Property(e => e.SrUFczynnosci)
                .HasDefaultValue((byte)1)
                .HasColumnName("SrU_FCzynnosci");
            entity.Property(e => e.SrUKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SrU_Kod");
            entity.Property(e => e.SrUNazwa)
                .HasMaxLength(251)
                .HasColumnName("SrU_Nazwa");
            entity.Property(e => e.SrUOdbId).HasColumnName("SrU_OdbID");
            entity.Property(e => e.SrUOdbiorcaTyp).HasColumnName("SrU_OdbiorcaTyp");
            entity.Property(e => e.SrUOpeModId).HasColumnName("SrU_OpeModId");
            entity.Property(e => e.SrUOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrU_OpeModKod");
            entity.Property(e => e.SrUOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrU_OpeModNazwisko");
            entity.Property(e => e.SrUOpeZalId).HasColumnName("SrU_OpeZalId");
            entity.Property(e => e.SrUOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrU_OpeZalKod");
            entity.Property(e => e.SrUOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrU_OpeZalNazwisko");
            entity.Property(e => e.SrUOpis).HasColumnName("SrU_Opis");
            entity.Property(e => e.SrUPodmiotId).HasColumnName("SrU_PodmiotId");
            entity.Property(e => e.SrUPodmiotTyp).HasColumnName("SrU_PodmiotTyp");
            entity.Property(e => e.SrUSrRid).HasColumnName("SrU_SrRId");
            entity.Property(e => e.SrUStaModId).HasColumnName("SrU_StaModId");
            entity.Property(e => e.SrUStaZalId).HasColumnName("SrU_StaZalId");
            entity.Property(e => e.SrUTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SrU_TS_Mod");
            entity.Property(e => e.SrUTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SrU_TS_Zal");
            entity.Property(e => e.SrUTwRid).HasColumnName("SrU_TwRId");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.SrsUrzadzeniumPodmiotyViews)
                .HasForeignKey(d => new { d.SrUOdbId, d.SrUOdbiorcaTyp })
                .HasConstraintName("FK_SrUOdbiorca");

            entity.HasOne(d => d.PodmiotyViewNavigation).WithMany(p => p.SrsUrzadzeniumPodmiotyViewNavigations)
                .HasForeignKey(d => new { d.SrUPodmiotId, d.SrUPodmiotTyp })
                .HasConstraintName("FK_SrUPodmiot");
        });

        modelBuilder.Entity<SrsZlecenium>(entity =>
        {
            entity.HasKey(e => e.SrZSrZid)
                .HasName("SrZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("SrsZlecenia", "CDN", tb =>
                {
                    tb.HasTrigger("SrsZlecenia_Delete_Trigger");
                    tb.HasTrigger("SrsZlecenia_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.SrZDdfId, "SrZDokDef").HasFillFactor(100);

            entity.HasIndex(e => e.SrZEtapId, "SrZEtap").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrZKatId, e.SrZSrZid }, "SrZKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrZMagId, "SrZMagId").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrZNumerString, e.SrZNumerNr }, "SrZNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrZNumerPelny, "SrZNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrZOdbId, e.SrZOdbiorcaTyp }, "SrZOdbiorca").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrZPodmiotId, e.SrZPodmiotTyp }, "SrZPodmiot").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrZProwadzacyId, e.SrZProwadzacyTyp }, "SrZProwadzacy").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrZSrUid, e.SrZSrZid }, "SrZUrzadzenia").HasFillFactor(100);

            entity.HasIndex(e => e.SrZZlecajacyId, "SrZZlecajacy").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrZDataDok, e.SrZNumerString, e.SrZNumerNr, e.SrZSrZid }, "SsZDataDok").HasFillFactor(100);

            entity.Property(e => e.SrZSrZid).HasColumnName("SrZ_SrZId");
            entity.Property(e => e.SrZBufor).HasColumnName("SrZ_Bufor");
            entity.Property(e => e.SrZCzasRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_CzasRealizacji");
            entity.Property(e => e.SrZCzasRealizacjiCzynnosci).HasColumnName("SrZ_CzasRealizacjiCzynnosci");
            entity.Property(e => e.SrZDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_DataDok");
            entity.Property(e => e.SrZDataKur)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("SrZ_DataKur");
            entity.Property(e => e.SrZDataPrzyjecia)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_DataPrzyjecia");
            entity.Property(e => e.SrZDataRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_DataRealizacji");
            entity.Property(e => e.SrZDataZamkniecia)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_DataZamkniecia");
            entity.Property(e => e.SrZDdfId).HasColumnName("SrZ_DDfId");
            entity.Property(e => e.SrZDokStatus)
                .HasMaxLength(32)
                .HasColumnName("SrZ_DokStatus");
            entity.Property(e => e.SrZEmail)
                .HasMaxLength(127)
                .HasColumnName("SrZ_Email");
            entity.Property(e => e.SrZEtapData)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_EtapData");
            entity.Property(e => e.SrZEtapId).HasColumnName("SrZ_EtapId");
            entity.Property(e => e.SrZEtapOpis)
                .HasMaxLength(255)
                .HasColumnName("SrZ_EtapOpis");
            entity.Property(e => e.SrZFplId).HasColumnName("SrZ_FplId");
            entity.Property(e => e.SrZFplTyp).HasColumnName("SrZ_FplTyp");
            entity.Property(e => e.SrZKatId).HasColumnName("SrZ_KatID");
            entity.Property(e => e.SrZKursL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrZ_KursL");
            entity.Property(e => e.SrZKursM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("SrZ_KursM");
            entity.Property(e => e.SrZKursNumer)
                .HasDefaultValue(-1)
                .HasColumnName("SrZ_KursNumer");
            entity.Property(e => e.SrZMagId).HasColumnName("SrZ_MagId");
            entity.Property(e => e.SrZNumerNr).HasColumnName("SrZ_NumerNr");
            entity.Property(e => e.SrZNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([SRZ_NUMERNR],[SRZ_NUMERSTRING]))", false)
                .HasColumnName("SrZ_NumerPelny");
            entity.Property(e => e.SrZNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("SrZ_NumerString");
            entity.Property(e => e.SrZOdbAdres2)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbAdres2");
            entity.Property(e => e.SrZOdbEmail)
                .HasMaxLength(127)
                .HasColumnName("SrZ_OdbEmail");
            entity.Property(e => e.SrZOdbGmina)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbGmina");
            entity.Property(e => e.SrZOdbId).HasColumnName("SrZ_OdbID");
            entity.Property(e => e.SrZOdbKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SrZ_OdbKodPocztowy");
            entity.Property(e => e.SrZOdbKraj)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbKraj");
            entity.Property(e => e.SrZOdbMiasto)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbMiasto");
            entity.Property(e => e.SrZOdbNazwa1)
                .HasMaxLength(50)
                .HasColumnName("SrZ_OdbNazwa1");
            entity.Property(e => e.SrZOdbNazwa2)
                .HasMaxLength(50)
                .HasColumnName("SrZ_OdbNazwa2");
            entity.Property(e => e.SrZOdbNazwa3)
                .HasMaxLength(250)
                .HasColumnName("SrZ_OdbNazwa3");
            entity.Property(e => e.SrZOdbNrDomu)
                .HasMaxLength(10)
                .HasColumnName("SrZ_OdbNrDomu");
            entity.Property(e => e.SrZOdbNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("SrZ_OdbNrLokalu");
            entity.Property(e => e.SrZOdbPoczta)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbPoczta");
            entity.Property(e => e.SrZOdbPowiat)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbPowiat");
            entity.Property(e => e.SrZOdbTelefon)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SrZ_OdbTelefon");
            entity.Property(e => e.SrZOdbUlica)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbUlica");
            entity.Property(e => e.SrZOdbWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("SrZ_OdbWojewodztwo");
            entity.Property(e => e.SrZOdbiorcaTyp).HasColumnName("SrZ_OdbiorcaTyp");
            entity.Property(e => e.SrZOpeModId).HasColumnName("SrZ_OpeModId");
            entity.Property(e => e.SrZOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrZ_OpeModKod");
            entity.Property(e => e.SrZOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrZ_OpeModNazwisko");
            entity.Property(e => e.SrZOpeZalId).HasColumnName("SrZ_OpeZalId");
            entity.Property(e => e.SrZOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrZ_OpeZalKod");
            entity.Property(e => e.SrZOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrZ_OpeZalNazwisko");
            entity.Property(e => e.SrZOpis).HasColumnName("SrZ_Opis");
            entity.Property(e => e.SrZPodAdres2)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodAdres2");
            entity.Property(e => e.SrZPodGmina)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodGmina");
            entity.Property(e => e.SrZPodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SrZ_PodKodPocztowy");
            entity.Property(e => e.SrZPodKraj)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodKraj");
            entity.Property(e => e.SrZPodMiasto)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodMiasto");
            entity.Property(e => e.SrZPodNazwa1)
                .HasMaxLength(50)
                .HasColumnName("SrZ_PodNazwa1");
            entity.Property(e => e.SrZPodNazwa2)
                .HasMaxLength(50)
                .HasColumnName("SrZ_PodNazwa2");
            entity.Property(e => e.SrZPodNazwa3)
                .HasMaxLength(250)
                .HasColumnName("SrZ_PodNazwa3");
            entity.Property(e => e.SrZPodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("SrZ_PodNrDomu");
            entity.Property(e => e.SrZPodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("SrZ_PodNrLokalu");
            entity.Property(e => e.SrZPodPoczta)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodPoczta");
            entity.Property(e => e.SrZPodPowiat)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodPowiat");
            entity.Property(e => e.SrZPodUlica)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodUlica");
            entity.Property(e => e.SrZPodWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PodWojewodztwo");
            entity.Property(e => e.SrZPodmiotId).HasColumnName("SrZ_PodmiotId");
            entity.Property(e => e.SrZPodmiotTyp).HasColumnName("SrZ_PodmiotTyp");
            entity.Property(e => e.SrZPriorytet).HasColumnName("SrZ_Priorytet");
            entity.Property(e => e.SrZProwadzacyId).HasColumnName("SrZ_ProwadzacyId");
            entity.Property(e => e.SrZProwadzacyTyp).HasColumnName("SrZ_ProwadzacyTyp");
            entity.Property(e => e.SrZPrzedstawicielId).HasColumnName("SrZ_PrzedstawicielId");
            entity.Property(e => e.SrZPrzedstawicielNazwisko)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PrzedstawicielNazwisko");
            entity.Property(e => e.SrZPrzedstawicielTelefon)
                .HasMaxLength(40)
                .HasColumnName("SrZ_PrzedstawicielTelefon");
            entity.Property(e => e.SrZSrUid).HasColumnName("SrZ_SrUId");
            entity.Property(e => e.SrZStaModId).HasColumnName("SrZ_StaModId");
            entity.Property(e => e.SrZStaZalId).HasColumnName("SrZ_StaZalId");
            entity.Property(e => e.SrZStan).HasColumnName("SrZ_Stan");
            entity.Property(e => e.SrZTelefon)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SrZ_Telefon");
            entity.Property(e => e.SrZTerminPlatData)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_TerminPlatData");
            entity.Property(e => e.SrZTerminPlatTyp).HasColumnName("SrZ_TerminPlatTyp");
            entity.Property(e => e.SrZTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_TS_Mod");
            entity.Property(e => e.SrZTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SrZ_TS_Zal");
            entity.Property(e => e.SrZTypNb).HasColumnName("SrZ_TypNB");
            entity.Property(e => e.SrZWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrZ_Waluta");
            entity.Property(e => e.SrZWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscBrutto");
            entity.Property(e => e.SrZWartoscBruttoDoFa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscBruttoDoFA");
            entity.Property(e => e.SrZWartoscBruttoDoFapln)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscBruttoDoFAPLN");
            entity.Property(e => e.SrZWartoscBruttoPln)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscBruttoPLN");
            entity.Property(e => e.SrZWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscNetto");
            entity.Property(e => e.SrZWartoscNettoDoFa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscNettoDoFA");
            entity.Property(e => e.SrZWartoscNettoDoFapln)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscNettoDoFAPLN");
            entity.Property(e => e.SrZWartoscNettoPln)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrZ_WartoscNettoPLN");
            entity.Property(e => e.SrZWykonano)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrZ_Wykonano");
            entity.Property(e => e.SrZZbiorczeFaCzesci).HasColumnName("SrZ_ZbiorczeFaCzesci");
            entity.Property(e => e.SrZZbiorczeFaCzynnosci).HasColumnName("SrZ_ZbiorczeFaCzynnosci");
            entity.Property(e => e.SrZZbiorczeTwrIdCzesci).HasColumnName("SrZ_ZbiorczeTwrIdCzesci");
            entity.Property(e => e.SrZZbiorczeTwrIdCzynnosci).HasColumnName("SrZ_ZbiorczeTwrIdCzynnosci");
            entity.Property(e => e.SrZZlecajacyId).HasColumnName("SrZ_ZlecajacyId");
            entity.Property(e => e.SrZZlecajacyNazwisko)
                .HasMaxLength(40)
                .HasColumnName("SrZ_ZlecajacyNazwisko");
            entity.Property(e => e.SrZZlecajacyTelefon)
                .HasMaxLength(40)
                .HasColumnName("SrZ_ZlecajacyTelefon");

            entity.HasOne(d => d.SrZKat).WithMany(p => p.SrsZlecenia)
                .HasForeignKey(d => d.SrZKatId)
                .HasConstraintName("FK_SrZKategoria");

            entity.HasOne(d => d.SrZMag).WithMany(p => p.SrsZlecenia)
                .HasForeignKey(d => d.SrZMagId)
                .HasConstraintName("FK_SrZMagId");

            entity.HasOne(d => d.SrZZlecajacy).WithMany(p => p.SrsZlecenia)
                .HasForeignKey(d => d.SrZZlecajacyId)
                .HasConstraintName("FK_SrZZlecajacy");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.SrsZleceniumPodmiotyViews)
                .HasForeignKey(d => new { d.SrZOdbId, d.SrZOdbiorcaTyp })
                .HasConstraintName("FK_SrZOdbiorca");

            entity.HasOne(d => d.PodmiotyViewNavigation).WithMany(p => p.SrsZleceniumPodmiotyViewNavigations)
                .HasForeignKey(d => new { d.SrZPodmiotId, d.SrZPodmiotTyp })
                .HasConstraintName("FK_SrZPodmiot");
        });

        modelBuilder.Entity<StatElem>(entity =>
        {
            entity.HasKey(e => e.StEStEid)
                .HasName("StE_Primary")
                .HasFillFactor(100);

            entity.ToTable("StatElem", "CDN");

            entity.Property(e => e.StEStEid).HasColumnName("StE_StEId");
            entity.Property(e => e.StELiczbaElemEksp).HasColumnName("StE_LiczbaElemEksp");
            entity.Property(e => e.StELiczbaElemImp).HasColumnName("StE_LiczbaElemImp");
            entity.Property(e => e.StEStNid).HasColumnName("StE_StNId");
            entity.Property(e => e.StETypElem).HasColumnName("StE_TypElem");
        });

        modelBuilder.Entity<StatNag>(entity =>
        {
            entity.HasKey(e => e.StNStNid)
                .HasName("StN_Primary")
                .HasFillFactor(100);

            entity.ToTable("StatNag", "CDN");

            entity.Property(e => e.StNStNid).HasColumnName("StN_StNID");
            entity.Property(e => e.StNDataEksport)
                .HasColumnType("datetime")
                .HasColumnName("StN_DataEksport");
            entity.Property(e => e.StNDataImport)
                .HasColumnType("datetime")
                .HasColumnName("StN_DataImport");
            entity.Property(e => e.StNLiczbaDokEksp).HasColumnName("StN_LiczbaDokEksp");
            entity.Property(e => e.StNLiczbaDokImp).HasColumnName("StN_LiczbaDokImp");
            entity.Property(e => e.StNLiczbaSlowEksp).HasColumnName("StN_LiczbaSlowEksp");
            entity.Property(e => e.StNLiczbaSlowImp).HasColumnName("StN_LiczbaSlowImp");
            entity.Property(e => e.StNLog)
                .HasMaxLength(100)
                .HasColumnName("StN_Log");
            entity.Property(e => e.StNOperator).HasColumnName("StN_Operator");
            entity.Property(e => e.StNZrodlo)
                .HasMaxLength(100)
                .HasColumnName("StN_Zrodlo");
        });

        modelBuilder.Entity<SwietaRuchome>(entity =>
        {
            entity.HasKey(e => e.SwRData)
                .HasName("SwR_Primary")
                .HasFillFactor(100);

            entity.ToTable("SwietaRuchome", "CDN");

            entity.Property(e => e.SwRData)
                .HasColumnType("datetime")
                .HasColumnName("SwR_Data");
        });

        modelBuilder.Entity<SystemCdn>(entity =>
        {
            entity.HasKey(e => e.SysId)
                .HasName("SYS_Primary")
                .HasFillFactor(100);

            entity.ToTable("SystemCDN", "CDN");

            entity.Property(e => e.SysId)
                .ValueGeneratedNever()
                .HasColumnName("SYS_ID");
            entity.Property(e => e.SysWartosc)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("SYS_Wartosc");
        });

        modelBuilder.Entity<SzDekElem>(entity =>
        {
            entity.HasKey(e => e.SdeSdeid)
                .HasName("SDE_Primary")
                .HasFillFactor(100);

            entity.ToTable("SzDekElem", "CDN");

            entity.HasIndex(e => new { e.SdeSzDid, e.SdeLp }, "SDESzablonDekretacji").HasFillFactor(100);

            entity.Property(e => e.SdeSdeid).HasColumnName("SDE_SDEId");
            entity.Property(e => e.SdeKat2Id).HasColumnName("SDE_Kat2ID");
            entity.Property(e => e.SdeKatId).HasColumnName("SDE_KatID");
            entity.Property(e => e.SdeKategoria).HasColumnName("SDE_Kategoria");
            entity.Property(e => e.SdeKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SDE_KontoMa");
            entity.Property(e => e.SdeKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SDE_KontoWn");
            entity.Property(e => e.SdeLp).HasColumnName("SDE_Lp");
            entity.Property(e => e.SdeOpis)
                .HasMaxLength(1000)
                .HasColumnName("SDE_Opis");
            entity.Property(e => e.SdeOpis2)
                .HasMaxLength(50)
                .HasColumnName("SDE_Opis2");
            entity.Property(e => e.SdeRozrachunki).HasColumnName("SDE_Rozrachunki");
            entity.Property(e => e.SdeSzDid).HasColumnName("SDE_SzDId");

            entity.HasOne(d => d.SdeSzD).WithMany(p => p.SzDekElems)
                .HasForeignKey(d => d.SdeSzDid)
                .HasConstraintName("FK_SDESzablonDekretacji");
        });

        modelBuilder.Entity<SzDekNag>(entity =>
        {
            entity.HasKey(e => e.SzDSzDid)
                .HasName("SzD_Primary")
                .HasFillFactor(100);

            entity.ToTable("SzDekNag", "CDN");

            entity.HasIndex(e => new { e.SzDTyp, e.SzDSymbol }, "SzDSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SzDSzDid).HasColumnName("SzD_SzDId");
            entity.Property(e => e.SzDNazwa)
                .HasMaxLength(50)
                .HasColumnName("SzD_Nazwa");
            entity.Property(e => e.SzDNieAktywny).HasColumnName("SzD_NieAktywny");
            entity.Property(e => e.SzDOpeModId).HasColumnName("SzD_OpeModID");
            entity.Property(e => e.SzDOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SzD_OpeModKod");
            entity.Property(e => e.SzDOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SzD_OpeModNazwisko");
            entity.Property(e => e.SzDOpeZalId).HasColumnName("SzD_OpeZalID");
            entity.Property(e => e.SzDOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SzD_OpeZalKod");
            entity.Property(e => e.SzDOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SzD_OpeZalNazwisko");
            entity.Property(e => e.SzDPodTyp).HasColumnName("SzD_PodTyp");
            entity.Property(e => e.SzDStaModId).HasColumnName("SzD_StaModId");
            entity.Property(e => e.SzDStaZalId).HasColumnName("SzD_StaZalId");
            entity.Property(e => e.SzDSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SzD_Symbol");
            entity.Property(e => e.SzDTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SzD_TS_Mod");
            entity.Property(e => e.SzDTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SzD_TS_Zal");
            entity.Property(e => e.SzDTyp).HasColumnName("SzD_Typ");
        });

        modelBuilder.Entity<Towary>(entity =>
        {
            entity.HasKey(e => e.TwrTwrId)
                .HasName("Twr_Primary")
                .HasFillFactor(100);

            entity.ToTable("Towary", "CDN", tb =>
                {
                    tb.HasTrigger("Towary_After_Insert_Trigger");
                    tb.HasTrigger("Towary_DeleteHandler");
                    tb.HasTrigger("Towary_Delete_Trigger");
                    tb.HasTrigger("Towary_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.TwrAutoKodSeria, e.TwrAutoKodNumer }, "TwrAutoKodNr").HasFillFactor(100);

            entity.HasIndex(e => e.TwrKntId, "TwrDostawca").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrEan, e.TwrTwrId }, "TwrEAN")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TwrEsklepFantomId, "TwrESklepFantomID").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrGidtyp, e.TwrGidnumer }, "TwrGID").HasFillFactor(100);

            entity.HasIndex(e => e.TwrGidnumer, "TwrGIDNumer").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrKod, e.TwrTwrId }, "TwrGridLookupFilter")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrTwGgidnumer, e.TwrKod }, "TwrGrupKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TwrTwGgidnumer, "TwrGrupaDomyslna").HasFillFactor(100);

            entity.HasIndex(e => e.TwrKatZakId, "TwrKategoriaZak").HasFillFactor(100);

            entity.HasIndex(e => e.TwrKod, "TwrKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TwrKcnid, "TwrKodCN").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrKodDostawcy, e.TwrTwrId }, "TwrKodDostawcy")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TwrMrkId, "TwrMarka").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrNazwa, e.TwrTwrId }, "TwrNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TwrNieAktywny, "TwrNieaktywne").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrNumerKat, e.TwrTwrId }, "TwrNrKat")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TwrPrdId, "TwrProducent").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwrProdukt, e.TwrTyp }, "TwrProduktTyp").HasFillFactor(100);

            entity.HasIndex(e => e.TwrSonid, "TwrSON").HasFillFactor(100);

            entity.HasIndex(e => e.TwrKatId, "Twrkategoria").HasFillFactor(100);

            entity.Property(e => e.TwrTwrId).HasColumnName("Twr_TwrId");
            entity.Property(e => e.TwRKosztUslugiOld)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TwR_KosztUslugiOld");
            entity.Property(e => e.TwRKursLzakOld)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwR_KursLZakOld");
            entity.Property(e => e.TwRKursMzakOld)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TwR_KursMZakOld");
            entity.Property(e => e.TwRMiejsceDodania).HasColumnName("TwR_MiejsceDodania");
            entity.Property(e => e.TwRWalutaZakOld)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwR_WalutaZakOld");
            entity.Property(e => e.TwrAkcyza).HasColumnName("Twr_Akcyza");
            entity.Property(e => e.TwrAkcyzaJmpomPrzelicznikL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_AkcyzaJMPomPrzelicznikL");
            entity.Property(e => e.TwrAkcyzaJmpomPrzelicznikM)
                .HasDefaultValue(1)
                .HasColumnName("Twr_AkcyzaJMPomPrzelicznikM");
            entity.Property(e => e.TwrAkcyzaOpal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_AkcyzaOpal");
            entity.Property(e => e.TwrAkcyzaStawka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_AkcyzaStawka");
            entity.Property(e => e.TwrAutoKodGrupaTowarowa).HasColumnName("Twr_AutoKodGrupaTowarowa");
            entity.Property(e => e.TwrAutoKodNumer).HasColumnName("Twr_AutoKodNumer");
            entity.Property(e => e.TwrAutoKodSeria)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_AutoKodSeria");
            entity.Property(e => e.TwrAutoKodWartosc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_AutoKodWartosc");
            entity.Property(e => e.TwrBezRabatu).HasColumnName("Twr_BezRabatu");
            entity.Property(e => e.TwrCenaZczteremaMiejscami).HasColumnName("Twr_CenaZCzteremaMiejscami");
            entity.Property(e => e.TwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Twr_EAN");
            entity.Property(e => e.TwrEdycjaNazwy).HasColumnName("Twr_EdycjaNazwy");
            entity.Property(e => e.TwrEdycjaOpisu).HasColumnName("Twr_EdycjaOpisu");
            entity.Property(e => e.TwrEsklep).HasColumnName("Twr_ESklep");
            entity.Property(e => e.TwrEsklepBezRabatu).HasColumnName("Twr_ESklepBezRabatu");
            entity.Property(e => e.TwrEsklepDostepnosc).HasColumnName("Twr_ESklepDostepnosc");
            entity.Property(e => e.TwrEsklepFantomId).HasColumnName("Twr_ESklepFantomID");
            entity.Property(e => e.TwrEsklepFlagaNajlepiejOceniany).HasColumnName("Twr_ESklepFlaga_NajlepiejOceniany");
            entity.Property(e => e.TwrEsklepFlagaNowosc).HasColumnName("Twr_ESklepFlaga_Nowosc");
            entity.Property(e => e.TwrEsklepFlagaProduktPolecany).HasColumnName("Twr_ESklepFlaga_ProduktPolecany");
            entity.Property(e => e.TwrEsklepFlagaProduktzGazetki).HasColumnName("Twr_ESklepFlaga_ProduktzGazetki");
            entity.Property(e => e.TwrEsklepFlagaPromocja).HasColumnName("Twr_ESklepFlaga_Promocja");
            entity.Property(e => e.TwrEsklepFlagaRekomendacjaSprzedawcy).HasColumnName("Twr_ESklepFlaga_RekomendacjaSprzedawcy");
            entity.Property(e => e.TwrEsklepFlagaSuperCena).HasColumnName("Twr_ESklepFlaga_SuperCena");
            entity.Property(e => e.TwrEsklepFlagaSuperJakosc).HasColumnName("Twr_ESklepFlaga_SuperJakosc");
            entity.Property(e => e.TwrEsklepFlagaWyprzedaz).HasColumnName("Twr_ESklepFlaga_Wyprzedaz");
            entity.Property(e => e.TwrEsklepKalkulacjaDostaw).HasColumnName("Twr_ESklepKalkulacjaDostaw");
            entity.Property(e => e.TwrEsklepKalkulacjaDostawWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_ESklepKalkulacjaDostawWartosc");
            entity.Property(e => e.TwrEsklepStatus)
                .HasDefaultValue((short)1)
                .HasColumnName("Twr_ESklepStatus");
            entity.Property(e => e.TwrFlaga).HasColumnName("Twr_Flaga");
            entity.Property(e => e.TwrFlagaExport).HasColumnName("Twr_FlagaExport");
            entity.Property(e => e.TwrFlagaZak).HasColumnName("Twr_FlagaZak");
            entity.Property(e => e.TwrGidfirma).HasColumnName("Twr_GIDFirma");
            entity.Property(e => e.TwrGidlp).HasColumnName("Twr_GIDLp");
            entity.Property(e => e.TwrGidnumer).HasColumnName("Twr_GIDNumer");
            entity.Property(e => e.TwrGidtyp).HasColumnName("Twr_GIDTyp");
            entity.Property(e => e.TwrIloscMax)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_IloscMax");
            entity.Property(e => e.TwrIloscMaxJm)
                .HasMaxLength(20)
                .HasColumnName("Twr_IloscMaxJM");
            entity.Property(e => e.TwrIloscMin)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_IloscMin");
            entity.Property(e => e.TwrIloscMinJm)
                .HasMaxLength(20)
                .HasColumnName("Twr_IloscMinJM");
            entity.Property(e => e.TwrIloscZam)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_IloscZam");
            entity.Property(e => e.TwrIloscZamJm)
                .HasMaxLength(20)
                .HasColumnName("Twr_IloscZamJM");
            entity.Property(e => e.TwrJm)
                .HasMaxLength(20)
                .HasColumnName("Twr_JM");
            entity.Property(e => e.TwrJmPomPrzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_JmPomPrzelicznikL");
            entity.Property(e => e.TwrJmPomPrzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("Twr_JmPomPrzelicznikM");
            entity.Property(e => e.TwrJmcalkowite).HasColumnName("Twr_JMCalkowite");
            entity.Property(e => e.TwrJmdlugCm).HasColumnName("Twr_JMDlugCm");
            entity.Property(e => e.TwrJmprzelicznikL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_JMPrzelicznikL");
            entity.Property(e => e.TwrJmprzelicznikM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("Twr_JMPrzelicznikM");
            entity.Property(e => e.TwrJmsentPrzelicznikL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_JMSentPrzelicznikL");
            entity.Property(e => e.TwrJmsentPrzelicznikM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("Twr_JMSentPrzelicznikM");
            entity.Property(e => e.TwrJmszerCm).HasColumnName("Twr_JMSzerCm");
            entity.Property(e => e.TwrJmwysCm).HasColumnName("Twr_JMWysCm");
            entity.Property(e => e.TwrJmz)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("Twr_JMZ");
            entity.Property(e => e.TwrKatId).HasColumnName("Twr_KatId");
            entity.Property(e => e.TwrKatZakId).HasColumnName("Twr_KatZakId");
            entity.Property(e => e.TwrKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Twr_Kategoria");
            entity.Property(e => e.TwrKategoriaZak)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Twr_KategoriaZak");
            entity.Property(e => e.TwrKaucja).HasColumnName("Twr_Kaucja");
            entity.Property(e => e.TwrKcnid).HasColumnName("Twr_KCNId");
            entity.Property(e => e.TwrKntId).HasColumnName("Twr_KntId");
            entity.Property(e => e.TwrKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Twr_Kod");
            entity.Property(e => e.TwrKodDostawcy)
                .HasMaxLength(50)
                .HasColumnName("Twr_KodDostawcy");
            entity.Property(e => e.TwrKopiujOpis).HasColumnName("Twr_KopiujOpis");
            entity.Property(e => e.TwrKosztKgo)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_KosztKGO");
            entity.Property(e => e.TwrKosztUslugi)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("Twr_KosztUslugi");
            entity.Property(e => e.TwrKosztUslugiTyp).HasColumnName("Twr_KosztUslugiTyp");
            entity.Property(e => e.TwrKosztUslugiWal)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("Twr_KosztUslugiWal");
            entity.Property(e => e.TwrKrajPochodzenia)
                .HasMaxLength(2)
                .HasColumnName("Twr_KrajPochodzenia");
            entity.Property(e => e.TwrKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_KursL");
            entity.Property(e => e.TwrKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("Twr_KursM");
            entity.Property(e => e.TwrKursNumer).HasColumnName("Twr_KursNumer");
            entity.Property(e => e.TwrKv7id).HasColumnName("Twr_KV7ID");
            entity.Property(e => e.TwrMarzaMin)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_MarzaMin");
            entity.Property(e => e.TwrMasa)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("Twr_Masa");
            entity.Property(e => e.TwrMinCenaMarza)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("Twr_MinCenaMarza");
            entity.Property(e => e.TwrMobile)
                .HasDefaultValue((byte)1)
                .HasColumnName("Twr_Mobile");
            entity.Property(e => e.TwrMrkId).HasColumnName("Twr_MrkID");
            entity.Property(e => e.TwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("Twr_Nazwa");
            entity.Property(e => e.TwrNazwaFiskalna)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("Twr_NazwaFiskalna");
            entity.Property(e => e.TwrNieAktywny).HasColumnName("Twr_NieAktywny");
            entity.Property(e => e.TwrNumerKat)
                .HasMaxLength(40)
                .HasColumnName("Twr_NumerKat");
            entity.Property(e => e.TwrOdwrotneObciazenie).HasColumnName("Twr_OdwrotneObciazenie");
            entity.Property(e => e.TwrOpeModId).HasColumnName("Twr_OpeModID");
            entity.Property(e => e.TwrOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_OpeModKod");
            entity.Property(e => e.TwrOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Twr_OpeModNazwisko");
            entity.Property(e => e.TwrOpeZalId).HasColumnName("Twr_OpeZalID");
            entity.Property(e => e.TwrOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_OpeZalKod");
            entity.Property(e => e.TwrOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Twr_OpeZalNazwisko");
            entity.Property(e => e.TwrOpiekunId).HasColumnName("Twr_OpiekunId");
            entity.Property(e => e.TwrOpiekunTyp).HasColumnName("Twr_OpiekunTyp");
            entity.Property(e => e.TwrOpis).HasColumnName("Twr_Opis");
            entity.Property(e => e.TwrOplataCukrowa).HasColumnName("Twr_OplataCukrowa");
            entity.Property(e => e.TwrOplataCukrowaOdCukrowStala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_OplataCukrowaOdCukrowStala");
            entity.Property(e => e.TwrOplataCukrowaOdCukrowZawartoscGram)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("Twr_OplataCukrowaOdCukrowZawartoscGram");
            entity.Property(e => e.TwrOplataCukrowaOdCukrowZawartoscRoztwor).HasColumnName("Twr_OplataCukrowaOdCukrowZawartoscRoztwor");
            entity.Property(e => e.TwrOplataCukrowaOdCukrowZawartoscSokow20).HasColumnName("Twr_OplataCukrowaOdCukrowZawartoscSokow20");
            entity.Property(e => e.TwrOplataCukrowaOdCukrowZmienna)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_OplataCukrowaOdCukrowZmienna");
            entity.Property(e => e.TwrOplataCukrowaOdKofeinyTauryny).HasColumnName("Twr_OplataCukrowaOdKofeinyTauryny");
            entity.Property(e => e.TwrOplataCukrowaOdKofeinyTaurynyStala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_OplataCukrowaOdKofeinyTaurynyStala");
            entity.Property(e => e.TwrOplataCukrowaOdSubstancjiSlodzacych).HasColumnName("Twr_OplataCukrowaOdSubstancjiSlodzacych");
            entity.Property(e => e.TwrOplataCukrowaPrzelicznikMl)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_OplataCukrowaPrzelicznikML");
            entity.Property(e => e.TwrOplataCukrowaSuma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_OplataCukrowaSuma");
            entity.Property(e => e.TwrPlu)
                .HasMaxLength(18)
                .HasDefaultValue("")
                .HasColumnName("Twr_PLU");
            entity.Property(e => e.TwrPobieranieSkladnikowFsuslugaZlozona).HasColumnName("Twr_PobieranieSkladnikowFSUslugaZlozona");
            entity.Property(e => e.TwrPrdId).HasColumnName("Twr_PrdID");
            entity.Property(e => e.TwrProducentKod)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Twr_ProducentKod");
            entity.Property(e => e.TwrProdukt).HasColumnName("Twr_Produkt");
            entity.Property(e => e.TwrProg).HasColumnName("Twr_Prog");
            entity.Property(e => e.TwrSent).HasColumnName("Twr_Sent");
            entity.Property(e => e.TwrSentKodOdpadu)
                .HasMaxLength(6)
                .HasDefaultValue("")
                .HasColumnName("Twr_SentKodOdpadu");
            entity.Property(e => e.TwrSentMasaBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_SentMasaBrutto");
            entity.Property(e => e.TwrSjczesciLotne)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJCzesciLotne");
            entity.Property(e => e.TwrSjczesciLotneMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJCzesciLotneMax");
            entity.Property(e => e.TwrSjczesciLotneMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJCzesciLotneMin");
            entity.Property(e => e.TwrSjpopiol)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJPopiol");
            entity.Property(e => e.TwrSjpopiolMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJPopiolMax");
            entity.Property(e => e.TwrSjpopiolMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJPopiolMin");
            entity.Property(e => e.TwrSjrodzajPaliwa)
                .HasMaxLength(500)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJRodzajPaliwa");
            entity.Property(e => e.TwrSjsiarka)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJSiarka");
            entity.Property(e => e.TwrSjsiarkaMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJSiarkaMax");
            entity.Property(e => e.TwrSjsiarkaMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJSiarkaMin");
            entity.Property(e => e.TwrSjsystemCertyfikacji)
                .HasMaxLength(500)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJSystemCertyfikacji");
            entity.Property(e => e.TwrSjwartoscOpalowa)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJWartoscOpalowa");
            entity.Property(e => e.TwrSjwartoscOpalowaMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJWartoscOpalowaMax");
            entity.Property(e => e.TwrSjwartoscOpalowaMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJWartoscOpalowaMin");
            entity.Property(e => e.TwrSjwymiarZiarna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJWymiarZiarna");
            entity.Property(e => e.TwrSjwymiarZiarnaMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJWymiarZiarnaMax");
            entity.Property(e => e.TwrSjwymiarZiarnaMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJWymiarZiarnaMin");
            entity.Property(e => e.TwrSjzawartoscNadziarna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscNadziarna");
            entity.Property(e => e.TwrSjzawartoscNadziarnaMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscNadziarnaMax");
            entity.Property(e => e.TwrSjzawartoscNadziarnaMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscNadziarnaMin");
            entity.Property(e => e.TwrSjzawartoscPodziarna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscPodziarna");
            entity.Property(e => e.TwrSjzawartoscPodziarnaMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscPodziarnaMax");
            entity.Property(e => e.TwrSjzawartoscPodziarnaMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscPodziarnaMin");
            entity.Property(e => e.TwrSjzawartoscWilgoci)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscWilgoci");
            entity.Property(e => e.TwrSjzawartoscWilgociMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscWilgociMax");
            entity.Property(e => e.TwrSjzawartoscWilgociMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZawartoscWilgociMin");
            entity.Property(e => e.TwrSjzdolnoscSpiekania)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZdolnoscSpiekania");
            entity.Property(e => e.TwrSjzdolnoscSpiekaniaMax)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZdolnoscSpiekaniaMax");
            entity.Property(e => e.TwrSjzdolnoscSpiekaniaMin)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("Twr_SJZdolnoscSpiekaniaMin");
            entity.Property(e => e.TwrSonid).HasColumnName("Twr_SONId");
            entity.Property(e => e.TwrSplitPay).HasColumnName("Twr_SplitPay");
            entity.Property(e => e.TwrStaModId).HasColumnName("Twr_StaModId");
            entity.Property(e => e.TwrStaZalId).HasColumnName("Twr_StaZalId");
            entity.Property(e => e.TwrStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_Stawka");
            entity.Property(e => e.TwrStawkaExport)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_StawkaExport");
            entity.Property(e => e.TwrStawkaZak)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_StawkaZak");
            entity.Property(e => e.TwrSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Twr_SWW");
            entity.Property(e => e.TwrTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Twr_TS_Mod");
            entity.Property(e => e.TwrTsXl)
                .HasColumnType("datetime")
                .HasColumnName("Twr_TS_XL");
            entity.Property(e => e.TwrTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Twr_TS_Zal");
            entity.Property(e => e.TwrTwCnumer).HasColumnName("Twr_TwCNumer");
            entity.Property(e => e.TwrTwGgidnumer).HasColumnName("Twr_TwGGIDNumer");
            entity.Property(e => e.TwrTyp).HasColumnName("Twr_Typ");
            entity.Property(e => e.TwrTypMinimum).HasColumnName("Twr_TypMinimum");
            entity.Property(e => e.TwrUdostepniajWcenniku).HasColumnName("Twr_UdostepniajWCenniku");
            entity.Property(e => e.TwrUpust).HasColumnName("Twr_Upust");
            entity.Property(e => e.TwrUpustData).HasColumnName("Twr_UpustData");
            entity.Property(e => e.TwrUpustDataDo).HasColumnName("Twr_UpustDataDo");
            entity.Property(e => e.TwrUpustDataOd).HasColumnName("Twr_UpustDataOd");
            entity.Property(e => e.TwrUpustGodz).HasColumnName("Twr_UpustGodz");
            entity.Property(e => e.TwrUpustGodzDo).HasColumnName("Twr_UpustGodzDo");
            entity.Property(e => e.TwrUpustGodzOd).HasColumnName("Twr_UpustGodzOd");
            entity.Property(e => e.TwrUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("Twr_URL");
            entity.Property(e => e.TwrWagaKg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_WagaKG");
            entity.Property(e => e.TwrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Twr_Waluta");
            entity.Property(e => e.TwrZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_Zrodlowa");
            entity.Property(e => e.TwrZrodlowaExport)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_ZrodlowaExport");
            entity.Property(e => e.TwrZrodlowaZak)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_ZrodlowaZak");

            entity.HasOne(d => d.TwrKat).WithMany(p => p.TowaryTwrKats)
                .HasForeignKey(d => d.TwrKatId)
                .HasConstraintName("FK_Twrkategoria");

            entity.HasOne(d => d.TwrKatZak).WithMany(p => p.TowaryTwrKatZaks)
                .HasForeignKey(d => d.TwrKatZakId)
                .HasConstraintName("FK_TwrKategoriaZak");

            entity.HasOne(d => d.TwrKcn).WithMany(p => p.Towaries)
                .HasForeignKey(d => d.TwrKcnid)
                .HasConstraintName("FK_TwrKodCN");

            entity.HasOne(d => d.TwrKnt).WithMany(p => p.Towaries)
                .HasForeignKey(d => d.TwrKntId)
                .HasConstraintName("FK_TwrDostawca");
        });

        modelBuilder.Entity<TrEatrybutyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TrEAtrybutyView", "CDN");

            entity.Property(e => e.TrAWartoscDecimal)
                .HasColumnType("decimal(37, 4)")
                .HasColumnName("TrA_WartoscDecimal");
            entity.Property(e => e.TrEDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("TrE_DataOpe");
            entity.Property(e => e.TraDeAid).HasColumnName("Tra_DeAId");
            entity.Property(e => e.TraKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Tra_Kod");
            entity.Property(e => e.TraTreId).HasColumnName("Tra_TreId");
            entity.Property(e => e.TraWartosc)
                .HasMaxLength(100)
                .HasColumnName("Tra_Wartosc");
            entity.Property(e => e.TreCenaT)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("Tre_CenaT");
            entity.Property(e => e.TreIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Tre_IloscJm");
            entity.Property(e => e.TreJm)
                .HasMaxLength(20)
                .HasColumnName("Tre_Jm");
            entity.Property(e => e.TreLp).HasColumnName("Tre_Lp");
            entity.Property(e => e.TreTrnId).HasColumnName("Tre_TrnId");
            entity.Property(e => e.TreTwrId).HasColumnName("Tre_TwrId");
            entity.Property(e => e.TreTwrKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Tre_TwrKod");
            entity.Property(e => e.TreTwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("Tre_TwrNazwa");
            entity.Property(e => e.TreWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Tre_WartoscNetto");
        });

        modelBuilder.Entity<TrSblad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrSBlad", "CDN");

            entity.Property(e => e.TrSbladIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrSBlad_Ilosc");
            entity.Property(e => e.TrSbladKod)
                .HasMaxLength(40)
                .HasColumnName("TrSBlad_Kod");
            entity.Property(e => e.TrSbladTwrId).HasColumnName("TrSBlad_TwrID");
        });

        modelBuilder.Entity<TrSbladOper>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrSBladOper", "CDN");

            entity.Property(e => e.TrSbladOperOpeId).HasColumnName("TrSBladOper_OpeId");
        });

        modelBuilder.Entity<TraCyklPropKntWzorce>(entity =>
        {
            entity.HasKey(e => new { e.TrCGrupa, e.TrCWzrId, e.TrCPodId })
                .HasName("TrCProp_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraCyklPropKntWzorce", "CDN");

            entity.Property(e => e.TrCGrupa).HasColumnName("TrC_Grupa");
            entity.Property(e => e.TrCWzrId).HasColumnName("TrC_WzrId");
            entity.Property(e => e.TrCPodId).HasColumnName("TrC_PodId");
            entity.Property(e => e.TrCAktywna)
                .HasDefaultValue(1)
                .HasColumnName("TrC_Aktywna");
            entity.Property(e => e.TrCDataMod)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TrC_DataMod");
            entity.Property(e => e.TrCDataUtw)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TrC_DataUtw");
            entity.Property(e => e.TrCPropStatus)
                .HasDefaultValue(1)
                .HasColumnName("TrC_PropStatus");
        });

        modelBuilder.Entity<TraCykliczne>(entity =>
        {
            entity.HasKey(e => e.TrCGidnumer)
                .HasName("TrC_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraCykliczne", "CDN", tb => tb.HasTrigger("TraCykliczne_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.TrCGrupa, "TraCykliczneGrupa").HasFillFactor(100);

            entity.Property(e => e.TrCGidnumer)
                .ValueGeneratedNever()
                .HasColumnName("TrC_GIDNumer");
            entity.Property(e => e.TrCDataMod)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TrC_DataMod");
            entity.Property(e => e.TrCDataUtw)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TrC_DataUtw");
            entity.Property(e => e.TrCGrupa).HasColumnName("TrC_Grupa");
            entity.Property(e => e.TrCJestCykliczna).HasColumnName("TrC_JestCykliczna");
        });

        modelBuilder.Entity<TraCykliczneGrupy>(entity =>
        {
            entity.HasKey(e => e.TcgGrupa)
                .HasName("TCG_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraCykliczneGrupy", "CDN");

            entity.HasIndex(e => e.TcgJestCykliczna, "TCGJestCykliczna").HasFillFactor(100);

            entity.HasIndex(e => e.TcgUkryj, "TCGUkryj").HasFillFactor(100);

            entity.Property(e => e.TcgGrupa)
                .ValueGeneratedNever()
                .HasColumnName("TCG_Grupa");
            entity.Property(e => e.TcgDataMod)
                .HasColumnType("datetime")
                .HasColumnName("TCG_DataMod");
            entity.Property(e => e.TcgJestCykliczna).HasColumnName("TCG_JestCykliczna");
            entity.Property(e => e.TcgKontrahenci)
                .HasMaxLength(250)
                .HasColumnName("TCG_Kontrahenci");
            entity.Property(e => e.TcgTowary).HasColumnName("TCG_Towary");
            entity.Property(e => e.TcgTrnId).HasColumnName("TCG_TrnId");
            entity.Property(e => e.TcgUkryj).HasColumnName("TCG_Ukryj");
        });

        modelBuilder.Entity<TraElem>(entity =>
        {
            entity.HasKey(e => e.TrETrEid)
                .HasName("TrE_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraElem", "CDN", tb =>
                {
                    tb.HasTrigger("TraElem_Delete_Trigger");
                    tb.HasTrigger("TraElem_InsertUpdateDelete_Trigger");
                });

            entity.HasIndex(e => new { e.TrEKatId, e.TrEDataOpe, e.TrETrEid }, "TrEKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrEMagId, "TrEMagazyn").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrEPodId, e.TrEPodmiotTyp, e.TrEDataOpe, e.TrETrEid }, "TrEPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrETrEidProd, "TrEProdukt").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrETwrId, e.TrEDataOpe, e.TrETrEid }, "TrETowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TrETrNid, e.TrELp, e.TrETrEid }, "TrETraNag")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TrETrNid, e.TrETwrKod }, "TrETwrKod").HasFillFactor(100);

            entity.HasIndex(e => e.TrEUslugaZlozonaId, "TrEUslugaZlozona").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrEZwrId, e.TrETrEid }, "TrEZwrot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrEAktywny, "TraElemAktywny").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrETrNid, e.TrEKaucja }, "TraElemKaucja").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrETrEid, e.TrETrNid }, "TraElemTrNId").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrEUslugaZlozonaId, e.TrEAktywny }, "TraElemUslugaZlozonaId").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrEZwrId, e.TrEAktywny }, "TraElemZwrId").HasFillFactor(100);

            entity.Property(e => e.TrETrEid).HasColumnName("TrE_TrEID");
            entity.Property(e => e.TrEAkcyzaDeAid).HasColumnName("TrE_Akcyza_DeAId");
            entity.Property(e => e.TrEAkcyzaKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_Akcyza_Kod");
            entity.Property(e => e.TrEAkcyzaOpal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_AkcyzaOpal");
            entity.Property(e => e.TrEAkcyzaStawka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_AkcyzaStawka");
            entity.Property(e => e.TrEAkcyzaWartosc)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("TrE_Akcyza_Wartosc");
            entity.Property(e => e.TrEAktywny).HasColumnName("TrE_Aktywny");
            entity.Property(e => e.TrEAtr1DeAid).HasColumnName("TrE_Atr1_DeAId");
            entity.Property(e => e.TrEAtr1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrE_Atr1_Kod");
            entity.Property(e => e.TrEAtr1Wartosc)
                .HasMaxLength(100)
                .HasColumnName("TrE_Atr1_Wartosc");
            entity.Property(e => e.TrEAtr2DeAid).HasColumnName("TrE_Atr2_DeAId");
            entity.Property(e => e.TrEAtr2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrE_Atr2_Kod");
            entity.Property(e => e.TrEAtr2Wartosc)
                .HasMaxLength(100)
                .HasColumnName("TrE_Atr2_Wartosc");
            entity.Property(e => e.TrEAtr3DeAid).HasColumnName("TrE_Atr3_DeAId");
            entity.Property(e => e.TrEAtr3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrE_Atr3_Kod");
            entity.Property(e => e.TrEAtr3Wartosc)
                .HasMaxLength(100)
                .HasColumnName("TrE_Atr3_Wartosc");
            entity.Property(e => e.TrEAtr4DeAid).HasColumnName("TrE_Atr4_DeAId");
            entity.Property(e => e.TrEAtr4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrE_Atr4_Kod");
            entity.Property(e => e.TrEAtr4Wartosc)
                .HasMaxLength(100)
                .HasColumnName("TrE_Atr4_Wartosc");
            entity.Property(e => e.TrEAtr5DeAid).HasColumnName("TrE_Atr5_DeAId");
            entity.Property(e => e.TrEAtr5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrE_Atr5_Kod");
            entity.Property(e => e.TrEAtr5Wartosc)
                .HasMaxLength(100)
                .HasColumnName("TrE_Atr5_Wartosc");
            entity.Property(e => e.TrECena0)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TrE_Cena0");
            entity.Property(e => e.TrECena0Wd)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TrE_Cena0WD");
            entity.Property(e => e.TrECenaT)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TrE_CenaT");
            entity.Property(e => e.TrECenaW)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TrE_CenaW");
            entity.Property(e => e.TrECenaWwd)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TrE_CenaWWD");
            entity.Property(e => e.TrECzySaCechyWymagane)
                .HasDefaultValue(-1)
                .HasColumnName("TrE_CzySaCechyWymagane");
            entity.Property(e => e.TrEDataDok)
                .HasColumnType("datetime")
                .HasColumnName("TrE_DataDok");
            entity.Property(e => e.TrEDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("TrE_DataOpe");
            entity.Property(e => e.TrEDoZwrotu)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_DoZwrotu");
            entity.Property(e => e.TrEFakZalKwotaMax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_FakZalKwotaMax");
            entity.Property(e => e.TrEFlaga).HasColumnName("TrE_Flaga");
            entity.Property(e => e.TrEIfa24).HasColumnName("TrE_IFA24");
            entity.Property(e => e.TrEIfa24mag).HasColumnName("TrE_IFA24Mag");
            entity.Property(e => e.TrEIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_Ilosc");
            entity.Property(e => e.TrEIloscJm)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_IloscJM");
            entity.Property(e => e.TrEIloscJmkw)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_IloscJMKW");
            entity.Property(e => e.TrEIloscKw)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_IloscKW");
            entity.Property(e => e.TrEJm)
                .HasMaxLength(20)
                .HasColumnName("TrE_Jm");
            entity.Property(e => e.TrEJmCalkowite).HasColumnName("TrE_JmCalkowite");
            entity.Property(e => e.TrEJmZ)
                .HasMaxLength(20)
                .HasColumnName("TrE_JmZ");
            entity.Property(e => e.TrEJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_JMPrzelicznikL");
            entity.Property(e => e.TrEJmprzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("TrE_JMPrzelicznikM");
            entity.Property(e => e.TrEKatId).HasColumnName("TrE_KatID");
            entity.Property(e => e.TrEKategoria)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrE_Kategoria");
            entity.Property(e => e.TrEKaucja).HasColumnName("TrE_Kaucja");
            entity.Property(e => e.TrEKodCn)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_KodCN");
            entity.Property(e => e.TrEKosztKgo)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KosztKGO");
            entity.Property(e => e.TrEKosztUslugi)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KosztUslugi");
            entity.Property(e => e.TrEKrajPochodzenia)
                .HasMaxLength(2)
                .HasDefaultValue("")
                .HasColumnName("TrE_KrajPochodzenia");
            entity.Property(e => e.TrEKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_KursL");
            entity.Property(e => e.TrEKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TrE_KursM");
            entity.Property(e => e.TrEKursNumer).HasColumnName("TrE_KursNumer");
            entity.Property(e => e.TrEKv7id).HasColumnName("TrE_KV7ID");
            entity.Property(e => e.TrEKwroznicaKursowa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KWRoznicaKursowa");
            entity.Property(e => e.TrELp).HasColumnName("TrE_Lp");
            entity.Property(e => e.TrELpPow).HasColumnName("TrE_LpPow");
            entity.Property(e => e.TrELpPowRel).HasColumnName("TrE_LpPowRel");
            entity.Property(e => e.TrEMagId).HasColumnName("TrE_MagId");
            entity.Property(e => e.TrEOplataCukrowaDoliczDoCeny)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_OplataCukrowaDoliczDoCeny");
            entity.Property(e => e.TrEOplataCukrowaNumerPartiiTowaru)
                .HasMaxLength(512)
                .HasDefaultValue("")
                .HasColumnName("TrE_OplataCukrowaNumerPartiiTowaru");
            entity.Property(e => e.TrEOplataCukrowaOdCukrowStala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_OplataCukrowaOdCukrowStala");
            entity.Property(e => e.TrEOplataCukrowaOdCukrowZawartoscGram)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("TrE_OplataCukrowaOdCukrowZawartoscGram");
            entity.Property(e => e.TrEOplataCukrowaOdCukrowZawartoscRoztwor).HasColumnName("TrE_OplataCukrowaOdCukrowZawartoscRoztwor");
            entity.Property(e => e.TrEOplataCukrowaOdCukrowZawartoscSokow20).HasColumnName("TrE_OplataCukrowaOdCukrowZawartoscSokow20");
            entity.Property(e => e.TrEOplataCukrowaOdCukrowZmienna)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_OplataCukrowaOdCukrowZmienna");
            entity.Property(e => e.TrEOplataCukrowaOdKofeinyTauryny).HasColumnName("TrE_OplataCukrowaOdKofeinyTauryny");
            entity.Property(e => e.TrEOplataCukrowaOdKofeinyTaurynyStala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_OplataCukrowaOdKofeinyTaurynyStala");
            entity.Property(e => e.TrEOplataCukrowaOdSubstancjiSlodzacych).HasColumnName("TrE_OplataCukrowaOdSubstancjiSlodzacych");
            entity.Property(e => e.TrEOplataCukrowaPrzelicznikMl)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_OplataCukrowaPrzelicznikML");
            entity.Property(e => e.TrEPatrEid).HasColumnName("TrE_PATrEId");
            entity.Property(e => e.TrEPdRid).HasColumnName("TrE_PdRId");
            entity.Property(e => e.TrEPodId).HasColumnName("TrE_PodID");
            entity.Property(e => e.TrEPodmiotTyp).HasColumnName("TrE_PodmiotTyp");
            entity.Property(e => e.TrEProg)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_Prog");
            entity.Property(e => e.TrEPromocje).HasColumnName("TrE_Promocje");
            entity.Property(e => e.TrERabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_Rabat");
            entity.Property(e => e.TrERabatKorekta)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_RabatKorekta");
            entity.Property(e => e.TrERabatPromocyjny)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_RabatPromocyjny");
            entity.Property(e => e.TrESjczesciLotne)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJCzesciLotne");
            entity.Property(e => e.TrESjpopiol)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJPopiol");
            entity.Property(e => e.TrESjrodzajPaliwa)
                .HasMaxLength(500)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJRodzajPaliwa");
            entity.Property(e => e.TrESjsiarka)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJSiarka");
            entity.Property(e => e.TrESjsystemCertyfikacji)
                .HasMaxLength(500)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJSystemCertyfikacji");
            entity.Property(e => e.TrESjwartoscOpalowa)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJWartoscOpalowa");
            entity.Property(e => e.TrESjwymiarZiarna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJWymiarZiarna");
            entity.Property(e => e.TrESjzawartoscNadziarna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJZawartoscNadziarna");
            entity.Property(e => e.TrESjzawartoscPodziarna)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJZawartoscPodziarna");
            entity.Property(e => e.TrESjzawartoscWilgoci)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJZawartoscWilgoci");
            entity.Property(e => e.TrESjzdolnoscSpiekania)
                .HasMaxLength(15)
                .HasDefaultValue("")
                .HasColumnName("TrE_SJZdolnoscSpiekania");
            entity.Property(e => e.TrESplitPay).HasColumnName("TrE_SplitPay");
            entity.Property(e => e.TrEStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_Stawka");
            entity.Property(e => e.TrEStawkaOss).HasColumnName("TrE_StawkaOSS");
            entity.Property(e => e.TrETrEidProd).HasColumnName("TrE_TrEIdProd");
            entity.Property(e => e.TrETrNid).HasColumnName("TrE_TrNId");
            entity.Property(e => e.TrETwCnumer).HasColumnName("TrE_TwCNumer");
            entity.Property(e => e.TrETwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TrE_TwrEAN");
            entity.Property(e => e.TrETwrId).HasColumnName("TrE_TwrId");
            entity.Property(e => e.TrETwrKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TrE_TwrKod");
            entity.Property(e => e.TrETwrKodDostawcy)
                .HasMaxLength(50)
                .HasColumnName("TrE_TwrKodDostawcy");
            entity.Property(e => e.TrETwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("TrE_TwrNazwa");
            entity.Property(e => e.TrETwrNumerKat)
                .HasMaxLength(40)
                .HasColumnName("TrE_TwrNumerKat");
            entity.Property(e => e.TrETwrOpis)
                .HasMaxLength(1024)
                .HasColumnName("TrE_TwrOpis");
            entity.Property(e => e.TrETwrSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrE_TwrSWW");
            entity.Property(e => e.TrETwrTyp).HasColumnName("TrE_TwrTyp");
            entity.Property(e => e.TrETypDokumentu).HasColumnName("TrE_TypDokumentu");
            entity.Property(e => e.TrETypNb).HasColumnName("TrE_TypNB");
            entity.Property(e => e.TrEUpust)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_Upust");
            entity.Property(e => e.TrEUpustKnt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_UpustKnt");
            entity.Property(e => e.TrEUpustKntTyp).HasColumnName("TrE_UpustKntTyp");
            entity.Property(e => e.TrEUpustTyp).HasColumnName("TrE_UpustTyp");
            entity.Property(e => e.TrEUslugaZlozona).HasColumnName("TrE_UslugaZlozona");
            entity.Property(e => e.TrEUslugaZlozonaId).HasColumnName("TrE_UslugaZlozonaId");
            entity.Property(e => e.TrEWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TrE_Waluta");
            entity.Property(e => e.TrEWartoscBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscBrutto");
            entity.Property(e => e.TrEWartoscBruttoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscBruttoWal");
            entity.Property(e => e.TrEWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscNetto");
            entity.Property(e => e.TrEWartoscNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscNettoWal");
            entity.Property(e => e.TrEWartoscTymczasowa).HasColumnName("TrE_WartoscTymczasowa");
            entity.Property(e => e.TrEWartoscZakupu)
                .HasComputedColumnSql("([CDN].[FNTRE_WARTOSCZAKUPU]([TRE_TREID],[TRE_TRNID],[TRE_LPPOW],[TRE_TWRID])+[TRE_KOSZTUSLUGI])", false)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("TrE_WartoscZakupu");
            entity.Property(e => e.TrEWartoscZakupuWylicz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscZakupuWylicz");
            entity.Property(e => e.TrEWyborDostaw)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_WyborDostaw");
            entity.Property(e => e.TrEZestawWiazanie).HasColumnName("TrE_ZestawWiazanie");
            entity.Property(e => e.TrEZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_Zrodlowa");
            entity.Property(e => e.TrEZtwGlowny).HasColumnName("TrE_ZTwGlowny");
            entity.Property(e => e.TrEZtwId).HasColumnName("TrE_ZTwID");
            entity.Property(e => e.TrEZtwIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_ZTwIlosc");
            entity.Property(e => e.TrEZtwKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_ZTwKod");
            entity.Property(e => e.TrEZwrId).HasColumnName("TrE_ZwrId");
            entity.Property(e => e.TreAkcyzaJmpomPrzelicznikL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Tre_AkcyzaJMPomPrzelicznikL");
            entity.Property(e => e.TreAkcyzaJmpomPrzelicznikM)
                .HasDefaultValue(1)
                .HasColumnName("Tre_AkcyzaJMPomPrzelicznikM");
            entity.Property(e => e.TreCenaZczteremaMiejscami).HasColumnName("Tre_CenaZCzteremaMiejscami");
            entity.Property(e => e.TreOdwrotneObciazenie).HasColumnName("Tre_OdwrotneObciazenie");
            entity.Property(e => e.TreUstawAtrSql)
                .HasDefaultValue(-1)
                .HasColumnName("Tre_UstawAtrSQL");
            entity.Property(e => e.TreUstawAtrSqldokTyp)
                .HasDefaultValue(1)
                .HasColumnName("Tre_UstawAtrSQLDokTyp");

            entity.HasOne(d => d.TrEKat).WithMany(p => p.TraElems)
                .HasForeignKey(d => d.TrEKatId)
                .HasConstraintName("FK_TrEKategoria");

            entity.HasOne(d => d.TrETrN).WithMany(p => p.TraElems)
                .HasForeignKey(d => d.TrETrNid)
                .HasConstraintName("FK_TrETraNag");

            entity.HasOne(d => d.TrETwr).WithMany(p => p.TraElems)
                .HasForeignKey(d => d.TrETwrId)
                .HasConstraintName("FK_TrETowar");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.TraElems)
                .HasForeignKey(d => new { d.TrEPodId, d.TrEPodmiotTyp })
                .HasConstraintName("FK_TrEPodmiot");
        });

        modelBuilder.Entity<TraElemAtr>(entity =>
        {
            entity.HasKey(e => e.TrATrAid)
                .HasName("TrA_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraElemAtr", "CDN");

            entity.HasIndex(e => new { e.TrATrEid, e.TrALp }, "TrATraElemAtr").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrADokTyp, e.TrADokId, e.TrALp }, "TrA_Dok_Index").HasFillFactor(100);

            entity.Property(e => e.TrATrAid).HasColumnName("TrA_TrAID");
            entity.Property(e => e.TrADeAid).HasColumnName("TrA_DeAId");
            entity.Property(e => e.TrADokId).HasColumnName("TrA_DokId");
            entity.Property(e => e.TrADokTyp).HasColumnName("TrA_DokTyp");
            entity.Property(e => e.TrAEsklep).HasColumnName("TrA_ESklep");
            entity.Property(e => e.TrAKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrA_Kod");
            entity.Property(e => e.TrALp).HasColumnName("TrA_Lp");
            entity.Property(e => e.TrATrEid).HasColumnName("TrA_TrEId");
            entity.Property(e => e.TrATwrId).HasColumnName("TrA_TwrId");
            entity.Property(e => e.TrAWartosc)
                .HasMaxLength(100)
                .HasColumnName("TrA_Wartosc");
        });

        modelBuilder.Entity<TraElemKorZbiorcza>(entity =>
        {
            entity.HasKey(e => e.TreZTreZid)
                .HasName("TreZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraElemKorZbiorcza", "CDN");

            entity.HasIndex(e => e.TreZTrNid, "TreZTraNag").HasFillFactor(100);

            entity.Property(e => e.TreZTreZid).HasColumnName("TreZ_TreZID");
            entity.Property(e => e.TreZFlaga).HasColumnName("TreZ_Flaga");
            entity.Property(e => e.TreZRabat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TreZ_Rabat");
            entity.Property(e => e.TreZStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TreZ_Stawka");
            entity.Property(e => e.TreZTrNid).HasColumnName("TreZ_TrNID");
            entity.Property(e => e.TreZWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TreZ_Waluta");
            entity.Property(e => e.TreZWartoscFaktur)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TreZ_WartoscFaktur");
            entity.Property(e => e.TreZZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TreZ_Zrodlowa");

            entity.HasOne(d => d.TreZTrN).WithMany(p => p.TraElemKorZbiorczas)
                .HasForeignKey(d => d.TreZTrNid)
                .HasConstraintName("FK_TreZTraNag");
        });

        modelBuilder.Entity<TraElemKwotyCelne>(entity =>
        {
            entity.HasKey(e => e.TkcTkcid)
                .HasName("TKC_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraElemKwotyCelne", "CDN");

            entity.Property(e => e.TkcTkcid).HasColumnName("TKC_TKCId");
            entity.Property(e => e.TkcKceId).HasColumnName("TKC_KCeId");
            entity.Property(e => e.TkcNazwa)
                .HasMaxLength(100)
                .HasColumnName("TKC_Nazwa");
            entity.Property(e => e.TkcTrEid).HasColumnName("TKC_TrEId");
            entity.Property(e => e.TkcWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKC_Wartosc");
            entity.Property(e => e.TkcWartoscPln)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKC_WartoscPLN");
            entity.Property(e => e.TkcWplywNaPlatnosc).HasColumnName("TKC_WplywNaPlatnosc");
            entity.Property(e => e.TkcWplywNaWartoscVat).HasColumnName("TKC_WplywNaWartoscVAT");

            entity.HasOne(d => d.TkcTrE).WithMany(p => p.TraElemKwotyCelnes)
                .HasForeignKey(d => d.TkcTrEid)
                .HasConstraintName("FK_TKCTraElem");
        });

        modelBuilder.Entity<TraElemRelacje>(entity =>
        {
            entity.HasKey(e => e.TeRTeRid)
                .HasName("TeR_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraElemRelacje", "CDN", tb =>
                {
                    tb.HasTrigger("TraElemRelacje_Delete_Trigger");
                    tb.HasTrigger("TraElemRelacje_Insert_Trigger");
                });

            entity.HasIndex(e => new { e.TeRChildTyp, e.TeRChildId }, "TeR_Child").HasFillFactor(100);

            entity.HasIndex(e => new { e.TeRParentTyp, e.TeRParentId }, "TeR_Parent").HasFillFactor(100);

            entity.HasIndex(e => new { e.TeRChildId, e.TeRParentId }, "TeR_ParentIdChildId").HasFillFactor(100);

            entity.Property(e => e.TeRTeRid).HasColumnName("TeR_TeRId");
            entity.Property(e => e.TeRChildId).HasColumnName("TeR_ChildId");
            entity.Property(e => e.TeRChildTyp).HasColumnName("TeR_ChildTyp");
            entity.Property(e => e.TeRFlaga).HasColumnName("TeR_Flaga");
            entity.Property(e => e.TeRInfo)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TeR_Info");
            entity.Property(e => e.TeRInfo2)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TeR_Info2");
            entity.Property(e => e.TeRParentId).HasColumnName("TeR_ParentId");
            entity.Property(e => e.TeRParentTyp).HasColumnName("TeR_ParentTyp");
        });

        modelBuilder.Entity<TraFakZaliczkowe>(entity =>
        {
            entity.HasKey(e => e.TrZTrZid)
                .HasName("TrZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraFakZaliczkowe", "CDN");

            entity.HasIndex(e => e.TrZTrNid, "FakZalTraNag").HasFillFactor(100);

            entity.Property(e => e.TrZTrZid).HasColumnName("TrZ_TrZID");
            entity.Property(e => e.TrZFlaga).HasColumnName("TrZ_Flaga");
            entity.Property(e => e.TrZFzid).HasColumnName("TrZ_FZID");
            entity.Property(e => e.TrZKwotaBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaBrutto");
            entity.Property(e => e.TrZKwotaBruttoMax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaBruttoMax");
            entity.Property(e => e.TrZKwotaBruttoSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaBruttoSys");
            entity.Property(e => e.TrZKwotaBruttoSysMax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaBruttoSysMax");
            entity.Property(e => e.TrZKwotaNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaNetto");
            entity.Property(e => e.TrZKwotaNettoMax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaNettoMax");
            entity.Property(e => e.TrZKwotaNettoSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaNettoSys");
            entity.Property(e => e.TrZKwotaNettoSysMax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaNettoSysMax");
            entity.Property(e => e.TrZKwotaVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaVAT");
            entity.Property(e => e.TrZKwotaVatmax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaVATMax");
            entity.Property(e => e.TrZKwotaVatsys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaVATSys");
            entity.Property(e => e.TrZKwotaVatsysMax)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrZ_KwotaVATSysMax");
            entity.Property(e => e.TrZNumerPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TrZ_NumerPelny");
            entity.Property(e => e.TrZStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrZ_Stawka");
            entity.Property(e => e.TrZTrNid).HasColumnName("TrZ_TrNID");
            entity.Property(e => e.TrZTyp).HasColumnName("TrZ_Typ");
            entity.Property(e => e.TrZUwzgledniac).HasColumnName("TrZ_Uwzgledniac");
            entity.Property(e => e.TrZWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TrZ_Waluta");
            entity.Property(e => e.TrZZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrZ_Zrodlowa");

            entity.HasOne(d => d.TrZTrN).WithMany(p => p.TraFakZaliczkowes)
                .HasForeignKey(d => d.TrZTrNid)
                .HasConstraintName("FK_FakZalTraNag");
        });

        modelBuilder.Entity<TraNag>(entity =>
        {
            entity.HasKey(e => e.TrNTrNid)
                .HasName("TrN_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraNag", "CDN", tb =>
                {
                    tb.HasTrigger("TraNag_DeleteHandler");
                    tb.HasTrigger("TraNag_Delete_Trigger");
                    tb.HasTrigger("TraNag_InsertUpdate_Trigger");
                    tb.HasTrigger("TraNag_Update_Trigger");
                });

            entity.HasIndex(e => new { e.TrNTypDokumentu, e.TrNDataDok, e.TrNNumerString, e.TrNNumerNr, e.TrNAnulowany, e.TrNBufor, e.TrNTrNid }, "TrNDataDok")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrNDekId, "TrNDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.TrNDdfId, "TrNDokDef").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNFaId, e.TrNRelTrNid, e.TrNZwroconoCalaIlosc }, "TrNFaktura").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNGidtyp, e.TrNGidfirma, e.TrNGidnumer }, "TrNGID").HasFillFactor(100);

            entity.HasIndex(e => e.TrNImportRowId, "TrNGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrNIsNid, "TrNIntrastad").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNKatId, e.TrNDataDok, e.TrNTrNid }, "TrNKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrNMagDocId, "TrNMagazynDoc").HasFillFactor(100);

            entity.HasIndex(e => e.TrNMagZrdId, "TrNMagazynZrd").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNNumerString, e.TrNNumerNr, e.TrNAnulowany }, "TrNNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNNumerPelny, e.TrNAnulowany }, "TrNNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNOdbId, e.TrNOdbiorcaTyp }, "TrNOdbiorca").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNOdbDocId, e.TrNOdbiorcaDocTyp }, "TrNOdbiorcaDoc").HasFillFactor(100);

            entity.HasIndex(e => e.TrNFplId, "TrNPlatnosc").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNPodZalId, e.TrNPodmiotZalTyp }, "TrNPodZaliczka").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNPodId, e.TrNPodmiotTyp, e.TrNDataDok, e.TrNNumerString, e.TrNNumerNr, e.TrNTrNid }, "TrNPodmiot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrNPreDekId, "TrNPreDekrety").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNTypDokumentu, e.TrNNumerString, e.TrNNumerNr, e.TrNAnulowany }, "TrNTypNUmer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrNVaNid, "TrNVatNag").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNZwrId, e.TrNTrNid }, "TrNZwrot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrNBufor, "TrN_Bufor").HasFillFactor(100);

            entity.HasIndex(e => e.TrNDataOpe, "TrN_DataOpe").HasFillFactor(100);

            entity.HasIndex(e => e.TrNDataWys, "TrN_DataWys").HasFillFactor(100);

            entity.HasIndex(e => e.TrNKorekta, "TrN_Korekta").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNOpeZalId, e.TrNPodmiotTyp, e.TrNPodId }, "TrN_OpeZalPodmiot").HasFillFactor(100);

            entity.HasIndex(e => e.TrNRazemNetto, "TrN_RazemNetto").HasFillFactor(100);

            entity.HasIndex(e => e.TrNRodzaj, "TrN_Rodzaj").HasFillFactor(100);

            entity.HasIndex(e => e.TrNZwrIdWzkk, "TrN_ZwrIdWZKK").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNDokMosmmid, e.TrNBufor }, "TraNagDokMOSMMId").HasFillFactor(100);

            entity.HasIndex(e => e.TrNTypDokumentu, "TraNagTypDokumentu").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNTypDokumentu, e.TrNAnulowany }, "TraNagTypDokumentuAnulowany").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNTypDokumentu, e.TrNDataWys }, "TraNagTypDokumentuDataWys").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNZwrId, e.TrNBufor }, "TraNagZwrIdBufor").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrNESklepId, e.TrNTsMod, e.TrNGidnumer }, "TraNageSklepID").HasFillFactor(100);

            entity.Property(e => e.TrNTrNid).HasColumnName("TrN_TrNID");
            entity.Property(e => e.TrNAkcyzaDataOdbioruDo)
                .HasColumnType("datetime")
                .HasColumnName("TrN_AkcyzaDataOdbioruDo");
            entity.Property(e => e.TrNAkcyzaDataOdbioruOd)
                .HasColumnType("datetime")
                .HasColumnName("TrN_AkcyzaDataOdbioruOd");
            entity.Property(e => e.TrNAkcyzaDataRozpoczeciaPrzem)
                .HasColumnType("datetime")
                .HasColumnName("TrN_AkcyzaDataRozpoczeciaPrzem");
            entity.Property(e => e.TrNAkcyzaMiejsceOdbioru)
                .HasMaxLength(200)
                .HasColumnName("TrN_AkcyzaMiejsceOdbioru");
            entity.Property(e => e.TrNAkcyzaMiejsceWydania)
                .HasMaxLength(200)
                .HasColumnName("TrN_AkcyzaMiejsceWydania");
            entity.Property(e => e.TrNAktualizacjaCenyZakKor).HasColumnName("TrN_AktualizacjaCenyZakKor");
            entity.Property(e => e.TrNAnulowany).HasColumnName("TrN_Anulowany");
            entity.Property(e => e.TrNApfinoStatFakt).HasColumnName("TrN_ApfinoStatFakt");
            entity.Property(e => e.TrNApfinoStatSync).HasColumnName("TrN_ApfinoStatSync");
            entity.Property(e => e.TrNApfinoStatWind).HasColumnName("TrN_ApfinoStatWind");
            entity.Property(e => e.TrNAwfWyslano)
                .HasColumnType("datetime")
                .HasColumnName("TrN_AwfWyslano");
            entity.Property(e => e.TrNAwizoId).HasColumnName("TrN_AwizoId");
            entity.Property(e => e.TrNBlokadaPlatnosci).HasColumnName("TrN_BlokadaPlatnosci");
            entity.Property(e => e.TrNBufor).HasColumnName("TrN_Bufor");
            entity.Property(e => e.TrNBzpId).HasColumnName("TrN_BzpId");
            entity.Property(e => e.TrNCentrala).HasColumnName("TrN_Centrala");
            entity.Property(e => e.TrNDabId).HasColumnName("TrN_DabId");
            entity.Property(e => e.TrNDataDok)
                .HasColumnType("datetime")
                .HasColumnName("TrN_DataDok");
            entity.Property(e => e.TrNDataEfaktura)
                .HasColumnType("datetime")
                .HasColumnName("TrN_DataEFaktura");
            entity.Property(e => e.TrNDataKur)
                .HasColumnType("datetime")
                .HasColumnName("TrN_DataKur");
            entity.Property(e => e.TrNDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("TrN_DataOpe");
            entity.Property(e => e.TrNDataPtwTaxFree)
                .HasColumnType("datetime")
                .HasColumnName("TrN_DataPtwTaxFree");
            entity.Property(e => e.TrNDataTransportu)
                .HasColumnType("datetime")
                .HasColumnName("TrN_DataTransportu");
            entity.Property(e => e.TrNDataWys)
                .HasColumnType("datetime")
                .HasColumnName("TrN_DataWys");
            entity.Property(e => e.TrNDdfId).HasColumnName("TrN_DDfId");
            entity.Property(e => e.TrNDekId).HasColumnName("TrN_DekId");
            entity.Property(e => e.TrNDetal).HasColumnName("TrN_Detal");
            entity.Property(e => e.TrNDnpId).HasColumnName("TrN_DnpID");
            entity.Property(e => e.TrNDokMosmmid).HasColumnName("TrN_DokMOSMMId");
            entity.Property(e => e.TrNDokumentTozsamosci)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrN_DokumentTozsamosci");
            entity.Property(e => e.TrNESklepDataDost)
                .HasColumnType("datetime")
                .HasColumnName("TrN_eSklepDataDost");
            entity.Property(e => e.TrNESklepFormaPlatnosci)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepFormaPlatnosci");
            entity.Property(e => e.TrNESklepId).HasColumnName("TrN_eSklepID");
            entity.Property(e => e.TrNESklepKodPaczkomatuPodst)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepKodPaczkomatuPodst");
            entity.Property(e => e.TrNESklepKodPaczkomatuRezerw)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepKodPaczkomatuRezerw");
            entity.Property(e => e.TrNESklepPaczkomatKodPaczki)
                .HasMaxLength(30)
                .HasColumnName("TrN_eSklepPaczkomatKodPaczki");
            entity.Property(e => e.TrNESklepPaczkomatPodstKodPocztowy)
                .HasMaxLength(10)
                .HasColumnName("TrN_eSklepPaczkomatPodstKodPocztowy");
            entity.Property(e => e.TrNESklepPaczkomatPodstMiasto)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPaczkomatPodstMiasto");
            entity.Property(e => e.TrNESklepPaczkomatPodstUlica)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPaczkomatPodstUlica");
            entity.Property(e => e.TrNESklepPaczkomatPodstUlicaNr)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPaczkomatPodstUlicaNR");
            entity.Property(e => e.TrNESklepPaczkomatRezerwKodPocztowy)
                .HasMaxLength(10)
                .HasColumnName("TrN_eSklepPaczkomatRezerwKodPocztowy");
            entity.Property(e => e.TrNESklepPaczkomatRezerwMiasto)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPaczkomatRezerwMiasto");
            entity.Property(e => e.TrNESklepPaczkomatRezerwUlica)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPaczkomatRezerwUlica");
            entity.Property(e => e.TrNESklepPaczkomatRezerwUlicaNr)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPaczkomatRezerwUlicaNR");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoApi).HasColumnName("TrN_eSklepPunktOdbioruOsobistegoAPI");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoDlugosc)
                .HasMaxLength(12)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoDlugosc");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoEmail)
                .HasMaxLength(200)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoEmail");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoGsm)
                .HasMaxLength(20)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoGSM");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoId).HasColumnName("TrN_eSklepPunktOdbioruOsobistegoID");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoIdeSklep).HasColumnName("TrN_eSklepPunktOdbioruOsobistegoIDeSklep");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoKodPocztowy)
                .HasMaxLength(10)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoKodPocztowy");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoKrajIso)
                .HasMaxLength(2)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoKrajISO");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoMiasto)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoMiasto");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoNazwa1)
                .HasMaxLength(250)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoNazwa1");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoNazwa2)
                .HasMaxLength(250)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoNazwa2");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoNrBudynku)
                .HasMaxLength(10)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoNrBudynku");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoNrLokalu");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoSzerokosc)
                .HasMaxLength(12)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoSzerokosc");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoTelefon)
                .HasMaxLength(20)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoTelefon");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoUlica)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoUlica");
            entity.Property(e => e.TrNESklepPunktOdbioruOsobistegoWojewodztwo)
                .HasMaxLength(50)
                .HasColumnName("TrN_eSklepPunktOdbioruOsobistegoWojewodztwo");
            entity.Property(e => e.TrNESklepRodzajDokumentu).HasColumnName("TrN_eSklepRodzajDokumentu");
            entity.Property(e => e.TrNESklepSposobDostawyNazwa)
                .HasMaxLength(100)
                .HasColumnName("TrN_eSklepSposobDostawyNazwa");
            entity.Property(e => e.TrNESklepSposobDostawyTyp).HasColumnName("TrN_eSklepSposobDostawyTyp");
            entity.Property(e => e.TrNESklepStatusDostawy)
                .HasDefaultValue((short)-1)
                .HasColumnName("TrN_eSklepStatusDostawy");
            entity.Property(e => e.TrNESklepStatusPlatnosci).HasColumnName("TrN_eSklepStatusPlatnosci");
            entity.Property(e => e.TrNESklepUwagiKlienta)
                .HasMaxLength(2048)
                .HasColumnName("TrN_eSklepUwagiKlienta");
            entity.Property(e => e.TrNESklepZrodlo).HasColumnName("TrN_eSklepZrodlo");
            entity.Property(e => e.TrNEdycjaTabelkiVat).HasColumnName("TrN_EdycjaTabelkiVAT");
            entity.Property(e => e.TrNEfakturaGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TrN_EFakturaGUID");
            entity.Property(e => e.TrNExport).HasColumnName("TrN_Export");
            entity.Property(e => e.TrNFaId).HasColumnName("TrN_FaId");
            entity.Property(e => e.TrNFadokumentDostawy).HasColumnName("TrN_FADokumentDostawy");
            entity.Property(e => e.TrNFinalny).HasColumnName("TrN_Finalny");
            entity.Property(e => e.TrNFinalnyWegiel).HasColumnName("TrN_FinalnyWegiel");
            entity.Property(e => e.TrNFiskalna).HasColumnName("TrN_Fiskalna");
            entity.Property(e => e.TrNFiskalnaErr).HasColumnName("TrN_FiskalnaErr");
            entity.Property(e => e.TrNFplId).HasColumnName("TrN_FPlId");
            entity.Property(e => e.TrNFvmarza).HasColumnName("TrN_FVMarza");
            entity.Property(e => e.TrNFvmarzaRodzaj).HasColumnName("TrN_FVMarzaRodzaj");
            entity.Property(e => e.TrNGidfirma).HasColumnName("TrN_GIDFirma");
            entity.Property(e => e.TrNGidlp).HasColumnName("TrN_GIDLp");
            entity.Property(e => e.TrNGidnumer).HasColumnName("TrN_GIDNumer");
            entity.Property(e => e.TrNGidtyp).HasColumnName("TrN_GIDTyp");
            entity.Property(e => e.TrNImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TrN_ImportAppId");
            entity.Property(e => e.TrNImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TrN_ImportRowId");
            entity.Property(e => e.TrNIsNid).HasColumnName("TrN_IsNId");
            entity.Property(e => e.TrNKatId).HasColumnName("TrN_KatID");
            entity.Property(e => e.TrNKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TrN_Kategoria");
            entity.Property(e => e.TrNKodKraju)
                .HasMaxLength(2)
                .HasColumnName("TrN_KodKraju");
            entity.Property(e => e.TrNKodTransakcji)
                .HasMaxLength(2)
                .HasColumnName("TrN_KodTransakcji");
            entity.Property(e => e.TrNKorekta).HasColumnName("TrN_Korekta");
            entity.Property(e => e.TrNKorektaZtytulu)
                .HasMaxLength(1024)
                .HasDefaultValue("")
                .HasColumnName("TrN_KorektaZTytulu");
            entity.Property(e => e.TrNKprid).HasColumnName("TrN_KPRID");
            entity.Property(e => e.TrNKseFdataOdebraniaUpo)
                .HasColumnType("datetime")
                .HasColumnName("TrN_KSeFDataOdebraniaUpo");
            entity.Property(e => e.TrNKseFdataPrzyjecia)
                .HasColumnType("datetime")
                .HasColumnName("TrN_KSeFDataPrzyjecia");
            entity.Property(e => e.TrNKseFdataWyslania)
                .HasColumnType("datetime")
                .HasColumnName("TrN_KSeFDataWyslania");
            entity.Property(e => e.TrNKseFfplid).HasColumnName("TrN_KSeFFPLId");
            entity.Property(e => e.TrNKseFopeId).HasColumnName("TrN_KSeFOpeID");
            entity.Property(e => e.TrNKseFopeKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrN_KSeFOpeKod");
            entity.Property(e => e.TrNKseFopeNazwisko)
                .HasMaxLength(50)
                .HasColumnName("TrN_KSeFOpeNazwisko");
            entity.Property(e => e.TrNKseFreferenceNumber)
                .HasMaxLength(50)
                .HasColumnName("TrN_KSeFReferenceNumber");
            entity.Property(e => e.TrNKseFstatus)
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasColumnName("TrN_KSeFStatus");
            entity.Property(e => e.TrNKseFstatusId).HasColumnName("TrN_KSeFStatusId");
            entity.Property(e => e.TrNKseFtrybAwaryjny).HasColumnName("TrN_KSeFTrybAwaryjny");
            entity.Property(e => e.TrNKseFtypSrodowiska)
                .HasDefaultValue((short)-1)
                .HasColumnName("TrN_KSeFTypSrodowiska");
            entity.Property(e => e.TrNKseFupoopeId).HasColumnName("TrN_KSeFUPOOpeID");
            entity.Property(e => e.TrNKseFupoopeKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrN_KSeFUPOOpeKod");
            entity.Property(e => e.TrNKseFupoopeNazwisko)
                .HasMaxLength(50)
                .HasColumnName("TrN_KSeFUPOOpeNazwisko");
            entity.Property(e => e.TrNKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrN_KursL");
            entity.Property(e => e.TrNKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TrN_KursM");
            entity.Property(e => e.TrNKursNumer).HasColumnName("TrN_KursNumer");
            entity.Property(e => e.TrNMagDocId).HasColumnName("TrN_MagDocId");
            entity.Property(e => e.TrNMagZrdId).HasColumnName("TrN_MagZrdId");
            entity.Property(e => e.TrNMetodaKasowa).HasColumnName("TrN_MetodaKasowa");
            entity.Property(e => e.TrNNieNaliczajOplataCukrowa).HasColumnName("TrN_NieNaliczajOplataCukrowa");
            entity.Property(e => e.TrNNieOkreslonaWartoscKor).HasColumnName("TrN_NieOkreslonaWartoscKor");
            entity.Property(e => e.TrNNieUwzglwedniajWewidencjiWegiel).HasColumnName("TrN_NieUwzglwedniajWEwidencjiWegiel");
            entity.Property(e => e.TrNNieWysylajDokumentuDoKseF).HasColumnName("TrN_NieWysylajDokumentuDoKSeF");
            entity.Property(e => e.TrNNotaKorPo)
                .HasMaxLength(254)
                .HasColumnName("TrN_NotaKorPo");
            entity.Property(e => e.TrNNotaKorPrzed)
                .HasMaxLength(254)
                .HasColumnName("TrN_NotaKorPrzed");
            entity.Property(e => e.TrNNrKseF)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("TrN_NrKSeF");
            entity.Property(e => e.TrNNrListuPrzewozowego)
                .HasMaxLength(150)
                .HasDefaultValue("")
                .HasColumnName("TrN_NrListuPrzewozowego");
            entity.Property(e => e.TrNNrListuPrzewozowegoTypKuriera).HasColumnName("TrN_NrListuPrzewozowegoTypKuriera");
            entity.Property(e => e.TrNNumerNr).HasColumnName("TrN_NumerNr");
            entity.Property(e => e.TrNNumerObcy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("TrN_NumerObcy");
            entity.Property(e => e.TrNNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([TRN_NUMERNR],[TRN_NUMERSTRING]))", false)
                .HasColumnName("TrN_NumerPelny");
            entity.Property(e => e.TrNNumerPelnyPrw)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("TrN_NumerPelnyPrw");
            entity.Property(e => e.TrNNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("TrN_NumerString");
            entity.Property(e => e.TrNOdbAdres2)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbAdres2");
            entity.Property(e => e.TrNOdbDocId).HasColumnName("TrN_OdbDocID");
            entity.Property(e => e.TrNOdbEmail)
                .HasMaxLength(127)
                .HasColumnName("TrN_OdbEmail");
            entity.Property(e => e.TrNOdbGmina)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbGmina");
            entity.Property(e => e.TrNOdbId).HasColumnName("TrN_OdbID");
            entity.Property(e => e.TrNOdbKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TrN_OdbKodPocztowy");
            entity.Property(e => e.TrNOdbKraj)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbKraj");
            entity.Property(e => e.TrNOdbMiasto)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbMiasto");
            entity.Property(e => e.TrNOdbNazwa1)
                .HasMaxLength(50)
                .HasColumnName("TrN_OdbNazwa1");
            entity.Property(e => e.TrNOdbNazwa2)
                .HasMaxLength(50)
                .HasColumnName("TrN_OdbNazwa2");
            entity.Property(e => e.TrNOdbNazwa3)
                .HasMaxLength(250)
                .HasColumnName("TrN_OdbNazwa3");
            entity.Property(e => e.TrNOdbNipE)
                .HasMaxLength(20)
                .HasColumnName("TrN_OdbNipE");
            entity.Property(e => e.TrNOdbNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TrN_OdbNipKraj");
            entity.Property(e => e.TrNOdbNrDomu)
                .HasMaxLength(10)
                .HasColumnName("TrN_OdbNrDomu");
            entity.Property(e => e.TrNOdbNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("TrN_OdbNrLokalu");
            entity.Property(e => e.TrNOdbPoczta)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbPoczta");
            entity.Property(e => e.TrNOdbPowiat)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbPowiat");
            entity.Property(e => e.TrNOdbTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TrN_OdbTelefon");
            entity.Property(e => e.TrNOdbUlica)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbUlica");
            entity.Property(e => e.TrNOdbWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("TrN_OdbWojewodztwo");
            entity.Property(e => e.TrNOdbiorcaDocTyp).HasColumnName("TrN_OdbiorcaDocTyp");
            entity.Property(e => e.TrNOdbiorcaGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("TrN_OdbiorcaGLN");
            entity.Property(e => e.TrNOdbiorcaTyp).HasColumnName("TrN_OdbiorcaTyp");
            entity.Property(e => e.TrNOdebral)
                .HasMaxLength(40)
                .HasColumnName("TrN_Odebral");
            entity.Property(e => e.TrNOffexportMag).HasColumnName("TrN_OFFExportMag");
            entity.Property(e => e.TrNOffprawoDoAnulowania).HasColumnName("TrN_OFFPrawoDoAnulowania");
            entity.Property(e => e.TrNOffprawoDoFapa).HasColumnName("TrN_OFFPrawoDoFAPA");
            entity.Property(e => e.TrNOpeEmailId).HasColumnName("TrN_OpeEMailID");
            entity.Property(e => e.TrNOpeEmailKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeEMailKod");
            entity.Property(e => e.TrNOpeEmailNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeEMailNazwisko");
            entity.Property(e => e.TrNOpeModId).HasColumnName("TrN_OpeModID");
            entity.Property(e => e.TrNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeModKod");
            entity.Property(e => e.TrNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeModNazwisko");
            entity.Property(e => e.TrNOpeWydrId).HasColumnName("TrN_OpeWydrID");
            entity.Property(e => e.TrNOpeWydrKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeWydrKod");
            entity.Property(e => e.TrNOpeWydrNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeWydrNazwisko");
            entity.Property(e => e.TrNOpeWysylajacy)
                .HasMaxLength(60)
                .HasColumnName("TrN_OpeWysylajacy");
            entity.Property(e => e.TrNOpeZalId).HasColumnName("TrN_OpeZalID");
            entity.Property(e => e.TrNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeZalKod");
            entity.Property(e => e.TrNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeZalNazwisko");
            entity.Property(e => e.TrNOpeZatwId).HasColumnName("TrN_OpeZatwID");
            entity.Property(e => e.TrNOpeZatwKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeZatwKod");
            entity.Property(e => e.TrNOpeZatwNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrN_OpeZatwNazwisko");
            entity.Property(e => e.TrNOpis)
                .HasMaxLength(1024)
                .HasColumnName("TrN_Opis");
            entity.Property(e => e.TrNPafaczesciowe).HasColumnName("TrN_PAFACzesciowe");
            entity.Property(e => e.TrNParodzajKor).HasColumnName("TrN_PARodzajKor");
            entity.Property(e => e.TrNPcid).HasColumnName("TrN_PCID");
            entity.Property(e => e.TrNPcjsid).HasColumnName("TrN_PCJSID");
            entity.Property(e => e.TrNPesel)
                .HasMaxLength(11)
                .HasDefaultValue("")
                .HasColumnName("TrN_Pesel");
            entity.Property(e => e.TrNPlatElemWalSys).HasColumnName("TrN_PlatElemWalSys");
            entity.Property(e => e.TrNPlatKaucje).HasColumnName("TrN_PlatKaucje");
            entity.Property(e => e.TrNPlatnikId).HasColumnName("TrN_PlatnikID");
            entity.Property(e => e.TrNPlatnikRachunekLp).HasColumnName("TrN_PlatnikRachunekLp");
            entity.Property(e => e.TrNPlatnikRachunekNr)
                .HasMaxLength(51)
                .HasDefaultValue("")
                .HasColumnName("TrN_PlatnikRachunekNr");
            entity.Property(e => e.TrNPlatnikTyp).HasColumnName("TrN_PlatnikTyp");
            entity.Property(e => e.TrNPlatnoscNaWz).HasColumnName("TrN_PlatnoscNaWZ");
            entity.Property(e => e.TrNPodAdres2)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodAdres2");
            entity.Property(e => e.TrNPodGmina)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodGmina");
            entity.Property(e => e.TrNPodId).HasColumnName("TrN_PodID");
            entity.Property(e => e.TrNPodKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TrN_PodKodPocztowy");
            entity.Property(e => e.TrNPodKraj)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodKraj");
            entity.Property(e => e.TrNPodMiasto)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodMiasto");
            entity.Property(e => e.TrNPodNazwa1)
                .HasMaxLength(50)
                .HasColumnName("TrN_PodNazwa1");
            entity.Property(e => e.TrNPodNazwa2)
                .HasMaxLength(50)
                .HasColumnName("TrN_PodNazwa2");
            entity.Property(e => e.TrNPodNazwa3)
                .HasMaxLength(250)
                .HasColumnName("TrN_PodNazwa3");
            entity.Property(e => e.TrNPodNipE)
                .HasMaxLength(20)
                .HasColumnName("TrN_PodNipE");
            entity.Property(e => e.TrNPodNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TrN_PodNipKraj");
            entity.Property(e => e.TrNPodNrDomu)
                .HasMaxLength(10)
                .HasColumnName("TrN_PodNrDomu");
            entity.Property(e => e.TrNPodNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("TrN_PodNrLokalu");
            entity.Property(e => e.TrNPodPoczta)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodPoczta");
            entity.Property(e => e.TrNPodPowiat)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodPowiat");
            entity.Property(e => e.TrNPodUlica)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodUlica");
            entity.Property(e => e.TrNPodWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("TrN_PodWojewodztwo");
            entity.Property(e => e.TrNPodZalId).HasColumnName("TrN_PodZalId");
            entity.Property(e => e.TrNPodatekVat).HasColumnName("TrN_PodatekVat");
            entity.Property(e => e.TrNPodmiotGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("TrN_PodmiotGLN");
            entity.Property(e => e.TrNPodmiotTyp).HasColumnName("TrN_PodmiotTyp");
            entity.Property(e => e.TrNPodmiotZalTyp).HasColumnName("TrN_PodmiotZalTyp");
            entity.Property(e => e.TrNPreDekId).HasColumnName("TrN_PreDekID");
            entity.Property(e => e.TrNPunktyZam).HasColumnName("TrN_PunktyZam");
            entity.Property(e => e.TrNPunktyZap).HasColumnName("TrN_PunktyZap");
            entity.Property(e => e.TrNRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrN_Rabat");
            entity.Property(e => e.TrNRabatKorekta)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrN_RabatKorekta");
            entity.Property(e => e.TrNRabatPromocyjny)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrN_RabatPromocyjny");
            entity.Property(e => e.TrNRabatWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RabatWartosc");
            entity.Property(e => e.TrNRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RazemBrutto");
            entity.Property(e => e.TrNRazemBruttoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RazemBruttoWal");
            entity.Property(e => e.TrNRazemNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RazemNetto");
            entity.Property(e => e.TrNRazemNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RazemNettoWal");
            entity.Property(e => e.TrNRazemVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RazemVAT");
            entity.Property(e => e.TrNRazemVatwal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RazemVATWal");
            entity.Property(e => e.TrNRelTrNid).HasColumnName("TrN_RelTrNId");
            entity.Property(e => e.TrNRezerwacjaWew).HasColumnName("TrN_RezerwacjaWew");
            entity.Property(e => e.TrNRodzaj).HasColumnName("TrN_Rodzaj");
            entity.Property(e => e.TrNRozliczamPodatekWoss).HasColumnName("TrN_RozliczamPodatekWOSS");
            entity.Property(e => e.TrNRycId).HasColumnName("TrN_RycID");
            entity.Property(e => e.TrNSplitPay).HasColumnName("TrN_SplitPay");
            entity.Property(e => e.TrNSrw).HasColumnName("TrN_Srw");
            entity.Property(e => e.TrNStaModId).HasColumnName("TrN_StaModId");
            entity.Property(e => e.TrNStaZalId).HasColumnName("TrN_StaZalId");
            entity.Property(e => e.TrNStatusInt).HasColumnName("TrN_StatusInt");
            entity.Property(e => e.TrNStatusString)
                .HasMaxLength(10)
                .HasComputedColumnSql("([CDN].[FNTRNSTATUSSTRING]([TRN_TYPDOKUMENTU],[TRN_STATUSINT]))", false)
                .HasColumnName("TrN_StatusString");
            entity.Property(e => e.TrNStawkaNpoo).HasColumnName("TrN_StawkaNPOO");
            entity.Property(e => e.TrNTaxFreePotwierdzony).HasColumnName("TrN_TaxFreePotwierdzony");
            entity.Property(e => e.TrNTermin)
                .HasColumnType("datetime")
                .HasColumnName("TrN_Termin");
            entity.Property(e => e.TrNTerminZwrotuKaucji)
                .HasColumnType("datetime")
                .HasColumnName("TrN_TerminZwrotuKaucji");
            entity.Property(e => e.TrNTrStyp).HasColumnName("TrN_TrSTyp");
            entity.Property(e => e.TrNTrybNettoVat).HasColumnName("TrN_TrybNettoVAT");
            entity.Property(e => e.TrNTsEmail)
                .HasColumnType("datetime")
                .HasColumnName("TrN_TS_EMail");
            entity.Property(e => e.TrNTsExport)
                .HasColumnType("datetime")
                .HasColumnName("TrN_TS_Export");
            entity.Property(e => e.TrNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("TrN_TS_Mod");
            entity.Property(e => e.TrNTsWydr)
                .HasColumnType("datetime")
                .HasColumnName("TrN_TS_Wydr");
            entity.Property(e => e.TrNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("TrN_TS_Zal");
            entity.Property(e => e.TrNTsZatw)
                .HasColumnType("datetime")
                .HasColumnName("TrN_TS_Zatw");
            entity.Property(e => e.TrNTypDokumentu).HasColumnName("TrN_TypDokumentu");
            entity.Property(e => e.TrNTypNb).HasColumnName("TrN_TypNB");
            entity.Property(e => e.TrNUmowaWegiel).HasColumnName("TrN_UmowaWegiel");
            entity.Property(e => e.TrNVaNid).HasColumnName("TrN_VaNId");
            entity.Property(e => e.TrNVatDlaDokWal).HasColumnName("TrN_VatDlaDokWal");
            entity.Property(e => e.TrNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TrN_Waluta");
            entity.Property(e => e.TrNWartoscOo)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_WartoscOO");
            entity.Property(e => e.TrNWartoscSp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_WartoscSP");
            entity.Property(e => e.TrNWartoscZakupu)
                .HasComputedColumnSql("([CDN].[FNTRN_WARTOSCZAKUPU]([TRN_TRNID]))", false)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_WartoscZakupu");
            entity.Property(e => e.TrNWeryfikacjaVatczynnyData)
                .HasColumnType("datetime")
                .HasColumnName("TrN_WeryfikacjaVATCzynnyData");
            entity.Property(e => e.TrNWeryfikacjaVatczynnyWartosc).HasColumnName("TrN_WeryfikacjaVATCzynnyWartosc");
            entity.Property(e => e.TrNZakId).HasColumnName("TrN_ZakID");
            entity.Property(e => e.TrNZwolnionyZakcyzy).HasColumnName("TrN_ZwolnionyZAkcyzy");
            entity.Property(e => e.TrNZwrId).HasColumnName("TrN_ZwrId");
            entity.Property(e => e.TrNZwrIdWzkk).HasColumnName("TrN_ZwrIdWZKK");
            entity.Property(e => e.TrNZwroconoCalaIlosc).HasColumnName("TrN_ZwroconoCalaIlosc");
            entity.Property(e => e.TrnDokumentDostawy).HasColumnName("Trn_DokumentDostawy");
            entity.Property(e => e.TrnSent).HasColumnName("Trn_Sent");
            entity.Property(e => e.TrnWszystkoPlIdZamowienia)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Trn_WszystkoPlIdZamowienia");
            entity.Property(e => e.TrnWszystkoPlSyncho).HasColumnName("Trn_WszystkoPlSyncho");

            entity.HasOne(d => d.TrNDdf).WithMany(p => p.TraNags)
                .HasForeignKey(d => d.TrNDdfId)
                .HasConstraintName("FK_TrNDokDef");

            entity.HasOne(d => d.TrNFpl).WithMany(p => p.TraNags)
                .HasForeignKey(d => d.TrNFplId)
                .HasConstraintName("FK_TrNPlatnosc");

            entity.HasOne(d => d.TrNKat).WithMany(p => p.TraNags)
                .HasForeignKey(d => d.TrNKatId)
                .HasConstraintName("FK_TrNKategoria");

            entity.HasOne(d => d.TrNMagDoc).WithMany(p => p.TraNagTrNMagDocs)
                .HasForeignKey(d => d.TrNMagDocId)
                .HasConstraintName("FK_TrNMagazynDoc");

            entity.HasOne(d => d.TrNMagZrd).WithMany(p => p.TraNagTrNMagZrds)
                .HasForeignKey(d => d.TrNMagZrdId)
                .HasConstraintName("FK_TrNMagazynZrd");

            entity.HasOne(d => d.TrNPc).WithMany(p => p.TraNags)
                .HasForeignKey(d => d.TrNPcid)
                .HasConstraintName("FK_TrNPieczatka");

            entity.HasOne(d => d.TrNPcjs).WithMany(p => p.TraNags)
                .HasForeignKey(d => d.TrNPcjsid)
                .HasConstraintName("FK_TrNPieczatkaJS");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.TraNagPodmiotyViews)
                .HasForeignKey(d => new { d.TrNPlatnikId, d.TrNPlatnikTyp })
                .HasConstraintName("FK_TrNPlatnik");

            entity.HasOne(d => d.PodmiotyViewNavigation).WithMany(p => p.TraNagPodmiotyViewNavigations)
                .HasForeignKey(d => new { d.TrNPodId, d.TrNPodmiotTyp })
                .HasConstraintName("FK_TrNPodmiot");
        });

        modelBuilder.Entity<TraNagRelacje>(entity =>
        {
            entity.HasKey(e => e.TrRTrRid)
                .HasName("TrR_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraNagRelacje", "CDN", tb =>
                {
                    tb.HasTrigger("TraNagRelacje_Delete_Trigger");
                    tb.HasTrigger("TraNagRelacje_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.TrRTrNid, e.TrRFaTyp, e.TrRFlaga }, "KeyTraNagRelId").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrRFaId, e.TrRFaTyp }, "TraNagRelFaId").HasFillFactor(100);

            entity.HasIndex(e => e.TrRFaTyp, "TraNagRelFaTyp").HasFillFactor(100);

            entity.HasIndex(e => e.TrRFlaga, "TraNagRelFlaga").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrRTrNid, e.TrRTrNtyp }, "TraNagRelTrNId").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrRTrNtyp, e.TrRFaTyp }, "TraNagRelTrNTypFaTyp").HasFillFactor(100);

            entity.Property(e => e.TrRTrRid).HasColumnName("TrR_TrRId");
            entity.Property(e => e.TrRFaId).HasColumnName("TrR_FaId");
            entity.Property(e => e.TrRFaTyp).HasColumnName("TrR_FaTyp");
            entity.Property(e => e.TrRFlaga).HasColumnName("TrR_Flaga");
            entity.Property(e => e.TrRTrNid).HasColumnName("TrR_TrNId");
            entity.Property(e => e.TrRTrNtyp).HasColumnName("TrR_TrNTyp");
        });

        modelBuilder.Entity<TraNagTsmodEsklep>(entity =>
        {
            entity.HasKey(e => e.TrNtsTrNid)
                .HasName("TrNTS_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraNagTSModEsklep", "CDN");

            entity.Property(e => e.TrNtsTrNid)
                .ValueGeneratedNever()
                .HasColumnName("TrNTS_TrNId");
            entity.Property(e => e.TrNtsDataPlanowanaDostawy)
                .HasColumnType("datetime")
                .HasColumnName("TrNTS_DataPlanowanaDostawy");
            entity.Property(e => e.TrNtsDataPotwierdzenia)
                .HasColumnType("datetime")
                .HasColumnName("TrNTS_DataPotwierdzenia");
            entity.Property(e => e.TrNtsDataPrzyjecia)
                .HasColumnType("datetime")
                .HasColumnName("TrNTS_DataPrzyjecia");
            entity.Property(e => e.TrNtsDataRealizacji)
                .HasColumnType("datetime")
                .HasColumnName("TrNTS_DataRealizacji");
            entity.Property(e => e.TrNtsStatus).HasColumnName("TrNTS_Status");
            entity.Property(e => e.TrNtsStatusDost).HasColumnName("TrNTS_StatusDost");
            entity.Property(e => e.TrNtsStatusPlat).HasColumnName("TrNTS_StatusPlat");
            entity.Property(e => e.TrNtsTsModEsklep)
                .HasColumnType("datetime")
                .HasColumnName("TrNTS_TS_ModESklep");
            entity.Property(e => e.TrNtsTsModList)
                .HasColumnType("datetime")
                .HasColumnName("TrNTS_TS_ModList");

            entity.HasOne(d => d.TrNtsTrN).WithOne(p => p.TraNagTsmodEsklep)
                .HasForeignKey<TraNagTsmodEsklep>(d => d.TrNtsTrNid)
                .HasConstraintName("FK_TrNTSTrNId");
        });

        modelBuilder.Entity<TraSelem>(entity =>
        {
            entity.HasKey(e => e.TrSTrSid)
                .HasName("TrS_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraSElem", "CDN", tb => tb.HasTrigger("TraSElem_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => e.TrSTrSidDost, "TrSDostawa").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrSTwrId, e.TrSMagId, e.TrSDataOpe }, "TrSTowar").HasFillFactor(100);

            entity.HasIndex(e => e.TrSTrEidWydania, "TrSTrEIdWydania").HasFillFactor(100);

            entity.HasIndex(e => new { e.TrSTrEid, e.TrSTrSid }, "TrSTraElem")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TrSZwrId, e.TrSTrSid }, "TrSZwrot")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TrSTrEid, e.TrSTrSid, e.TrSWartosc }, "TraSElemTrEIdWartosc")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TrSTrSid, "TraSElemTrSIdWartosc").HasFillFactor(100);

            entity.Property(e => e.TrSTrSid).HasColumnName("TrS_TrSID");
            entity.Property(e => e.TrSCena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TrS_Cena");
            entity.Property(e => e.TrSDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("TrS_DataOpe");
            entity.Property(e => e.TrSIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrS_Ilosc");
            entity.Property(e => e.TrSMagId).HasColumnName("TrS_MagId");
            entity.Property(e => e.TrSMetoda).HasColumnName("TrS_Metoda");
            entity.Property(e => e.TrSRodzaj).HasColumnName("TrS_Rodzaj");
            entity.Property(e => e.TrSSrCid).HasColumnName("TrS_SrCId");
            entity.Property(e => e.TrSTrEid).HasColumnName("TrS_TrEId");
            entity.Property(e => e.TrSTrEidWydania)
                .HasDefaultValue(0)
                .HasColumnName("TrS_TrEIdWydania");
            entity.Property(e => e.TrSTrSidDost).HasColumnName("TrS_TrSIdDost");
            entity.Property(e => e.TrSTwrId).HasColumnName("TrS_TwrId");
            entity.Property(e => e.TrSTyp).HasColumnName("TrS_Typ");
            entity.Property(e => e.TrSWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_Wartosc");
            entity.Property(e => e.TrSWyborDostaw)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrS_WyborDostaw");
            entity.Property(e => e.TrSZwrId).HasColumnName("TrS_ZwrId");

            entity.HasOne(d => d.TrSTrSidDostNavigation).WithMany(p => p.InverseTrSTrSidDostNavigation)
                .HasForeignKey(d => d.TrSTrSidDost)
                .HasConstraintName("FK_TrSDostawa");

            entity.HasOne(d => d.TrSTwr).WithMany(p => p.TraSelems)
                .HasForeignKey(d => d.TrSTwrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrSTowar");
        });

        modelBuilder.Entity<TraSelemCechy>(entity =>
        {
            entity.HasKey(e => e.TsCTsCid)
                .HasName("TsC_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraSElemCechy", "CDN");

            entity.HasIndex(e => new { e.TsCTrSid, e.TsCTsCid }, "TrSTraElemC")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TsCTsCid).HasColumnName("TsC_TsCID");
            entity.Property(e => e.TsCCecha10DeAid).HasColumnName("TsC_Cecha10_DeAId");
            entity.Property(e => e.TsCCecha10Format).HasColumnName("TsC_Cecha10_Format");
            entity.Property(e => e.TsCCecha10Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha10_Kod");
            entity.Property(e => e.TsCCecha10Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha10_Wartosc");
            entity.Property(e => e.TsCCecha1DeAid).HasColumnName("TsC_Cecha1_DeAId");
            entity.Property(e => e.TsCCecha1Format).HasColumnName("TsC_Cecha1_Format");
            entity.Property(e => e.TsCCecha1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha1_Kod");
            entity.Property(e => e.TsCCecha1Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha1_Wartosc");
            entity.Property(e => e.TsCCecha2DeAid).HasColumnName("TsC_Cecha2_DeAId");
            entity.Property(e => e.TsCCecha2Format).HasColumnName("TsC_Cecha2_Format");
            entity.Property(e => e.TsCCecha2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha2_Kod");
            entity.Property(e => e.TsCCecha2Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha2_Wartosc");
            entity.Property(e => e.TsCCecha3DeAid).HasColumnName("TsC_Cecha3_DeAId");
            entity.Property(e => e.TsCCecha3Format).HasColumnName("TsC_Cecha3_Format");
            entity.Property(e => e.TsCCecha3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha3_Kod");
            entity.Property(e => e.TsCCecha3Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha3_Wartosc");
            entity.Property(e => e.TsCCecha4DeAid).HasColumnName("TsC_Cecha4_DeAId");
            entity.Property(e => e.TsCCecha4Format).HasColumnName("TsC_Cecha4_Format");
            entity.Property(e => e.TsCCecha4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha4_Kod");
            entity.Property(e => e.TsCCecha4Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha4_Wartosc");
            entity.Property(e => e.TsCCecha5DeAid).HasColumnName("TsC_Cecha5_DeAId");
            entity.Property(e => e.TsCCecha5Format).HasColumnName("TsC_Cecha5_Format");
            entity.Property(e => e.TsCCecha5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha5_Kod");
            entity.Property(e => e.TsCCecha5Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha5_Wartosc");
            entity.Property(e => e.TsCCecha6DeAid).HasColumnName("TsC_Cecha6_DeAId");
            entity.Property(e => e.TsCCecha6Format).HasColumnName("TsC_Cecha6_Format");
            entity.Property(e => e.TsCCecha6Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha6_Kod");
            entity.Property(e => e.TsCCecha6Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha6_Wartosc");
            entity.Property(e => e.TsCCecha7DeAid).HasColumnName("TsC_Cecha7_DeAId");
            entity.Property(e => e.TsCCecha7Format).HasColumnName("TsC_Cecha7_Format");
            entity.Property(e => e.TsCCecha7Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha7_Kod");
            entity.Property(e => e.TsCCecha7Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha7_Wartosc");
            entity.Property(e => e.TsCCecha8DeAid).HasColumnName("TsC_Cecha8_DeAId");
            entity.Property(e => e.TsCCecha8Format).HasColumnName("TsC_Cecha8_Format");
            entity.Property(e => e.TsCCecha8Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha8_Kod");
            entity.Property(e => e.TsCCecha8Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha8_Wartosc");
            entity.Property(e => e.TsCCecha9DeAid).HasColumnName("TsC_Cecha9_DeAId");
            entity.Property(e => e.TsCCecha9Format).HasColumnName("TsC_Cecha9_Format");
            entity.Property(e => e.TsCCecha9Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsC_Cecha9_Kod");
            entity.Property(e => e.TsCCecha9Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsC_Cecha9_Wartosc");
            entity.Property(e => e.TsCTrSid).HasColumnName("TsC_TrSID");

            entity.HasOne(d => d.TsCTrS).WithMany(p => p.TraSelemCechies)
                .HasForeignKey(d => d.TsCTrSid)
                .HasConstraintName("FK_TrSTraElemC");
        });

        modelBuilder.Entity<TraSelemDost>(entity =>
        {
            entity.HasKey(e => e.TsDTsDid)
                .HasName("TsD_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraSElemDost", "CDN", tb => tb.HasTrigger("TrasElemDost_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.TsDTrSidDost, "TrSDostawa").HasFillFactor(100);

            entity.HasIndex(e => e.TsDPdEid, "TrSDostawaProdElem").HasFillFactor(100);

            entity.HasIndex(e => new { e.TsDTrEid, e.TsDTrSid, e.TsDTsDid }, "TrSTraElemD")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TsDTsDid).HasColumnName("TsD_TsDID");
            entity.Property(e => e.TsDCecha10DeAid).HasColumnName("TsD_Cecha10_DeAId");
            entity.Property(e => e.TsDCecha10Format).HasColumnName("TsD_Cecha10_Format");
            entity.Property(e => e.TsDCecha10Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha10_Kod");
            entity.Property(e => e.TsDCecha10Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha10_Wartosc");
            entity.Property(e => e.TsDCecha1DeAid).HasColumnName("TsD_Cecha1_DeAId");
            entity.Property(e => e.TsDCecha1Format).HasColumnName("TsD_Cecha1_Format");
            entity.Property(e => e.TsDCecha1Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha1_Kod");
            entity.Property(e => e.TsDCecha1Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha1_Wartosc");
            entity.Property(e => e.TsDCecha2DeAid).HasColumnName("TsD_Cecha2_DeAId");
            entity.Property(e => e.TsDCecha2Format).HasColumnName("TsD_Cecha2_Format");
            entity.Property(e => e.TsDCecha2Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha2_Kod");
            entity.Property(e => e.TsDCecha2Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha2_Wartosc");
            entity.Property(e => e.TsDCecha3DeAid).HasColumnName("TsD_Cecha3_DeAId");
            entity.Property(e => e.TsDCecha3Format).HasColumnName("TsD_Cecha3_Format");
            entity.Property(e => e.TsDCecha3Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha3_Kod");
            entity.Property(e => e.TsDCecha3Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha3_Wartosc");
            entity.Property(e => e.TsDCecha4DeAid).HasColumnName("TsD_Cecha4_DeAId");
            entity.Property(e => e.TsDCecha4Format).HasColumnName("TsD_Cecha4_Format");
            entity.Property(e => e.TsDCecha4Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha4_Kod");
            entity.Property(e => e.TsDCecha4Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha4_Wartosc");
            entity.Property(e => e.TsDCecha5DeAid).HasColumnName("TsD_Cecha5_DeAId");
            entity.Property(e => e.TsDCecha5Format).HasColumnName("TsD_Cecha5_Format");
            entity.Property(e => e.TsDCecha5Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha5_Kod");
            entity.Property(e => e.TsDCecha5Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha5_Wartosc");
            entity.Property(e => e.TsDCecha6DeAid).HasColumnName("TsD_Cecha6_DeAId");
            entity.Property(e => e.TsDCecha6Format).HasColumnName("TsD_Cecha6_Format");
            entity.Property(e => e.TsDCecha6Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha6_Kod");
            entity.Property(e => e.TsDCecha6Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha6_Wartosc");
            entity.Property(e => e.TsDCecha7DeAid).HasColumnName("TsD_Cecha7_DeAId");
            entity.Property(e => e.TsDCecha7Format).HasColumnName("TsD_Cecha7_Format");
            entity.Property(e => e.TsDCecha7Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha7_Kod");
            entity.Property(e => e.TsDCecha7Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha7_Wartosc");
            entity.Property(e => e.TsDCecha8DeAid).HasColumnName("TsD_Cecha8_DeAId");
            entity.Property(e => e.TsDCecha8Format).HasColumnName("TsD_Cecha8_Format");
            entity.Property(e => e.TsDCecha8Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha8_Kod");
            entity.Property(e => e.TsDCecha8Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha8_Wartosc");
            entity.Property(e => e.TsDCecha9DeAid).HasColumnName("TsD_Cecha9_DeAId");
            entity.Property(e => e.TsDCecha9Format).HasColumnName("TsD_Cecha9_Format");
            entity.Property(e => e.TsDCecha9Kod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TsD_Cecha9_Kod");
            entity.Property(e => e.TsDCecha9Wartosc)
                .HasMaxLength(255)
                .HasColumnName("TsD_Cecha9_Wartosc");
            entity.Property(e => e.TsDDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("TsD_DataOpe");
            entity.Property(e => e.TsDDostawca)
                .HasMaxLength(50)
                .HasColumnName("TsD_Dostawca");
            entity.Property(e => e.TsDIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TsD_Ilosc");
            entity.Property(e => e.TsDIloscDostepna)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TsD_IloscDostepna");
            entity.Property(e => e.TsDNumerObcy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("TsD_NumerObcy");
            entity.Property(e => e.TsDNumerPelny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TsD_NumerPelny");
            entity.Property(e => e.TsDPdEid).HasColumnName("TsD_PdEId");
            entity.Property(e => e.TsDSrCdid).HasColumnName("TsD_SrCDId");
            entity.Property(e => e.TsDTrEid).HasColumnName("TsD_TrEId");
            entity.Property(e => e.TsDTrSid).HasColumnName("TsD_TrSID");
            entity.Property(e => e.TsDTrSidDost).HasColumnName("TsD_TrSIdDost");
            entity.Property(e => e.TsDWartosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TsD_Wartosc");
            entity.Property(e => e.TsDZwrId).HasColumnName("TsD_ZwrId");

            entity.HasOne(d => d.TsDTrE).WithMany(p => p.TraSelemDosts)
                .HasForeignKey(d => d.TsDTrEid)
                .HasConstraintName("FK_TrSTraElemD");
        });

        modelBuilder.Entity<TraVat>(entity =>
        {
            entity.HasKey(e => e.TrVTrVid)
                .HasName("TrV_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraVat", "CDN");

            entity.HasIndex(e => e.TrVTrNid, "VaTTraNag").HasFillFactor(100);

            entity.Property(e => e.TrVTrVid).HasColumnName("TrV_TrVID");
            entity.Property(e => e.TrVFlaga).HasColumnName("TrV_Flaga");
            entity.Property(e => e.TrVNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_Netto");
            entity.Property(e => e.TrVNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_NettoWal");
            entity.Property(e => e.TrVStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrV_Stawka");
            entity.Property(e => e.TrVTrNid).HasColumnName("TrV_TrNID");
            entity.Property(e => e.TrVTrNidFinalna).HasColumnName("TrV_TrNidFinalna");
            entity.Property(e => e.TrVTyp).HasColumnName("TrV_Typ");
            entity.Property(e => e.TrVVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_VAT");
            entity.Property(e => e.TrVVatwal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_VATWal");
            entity.Property(e => e.TrVZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrV_Zrodlowa");

            entity.HasOne(d => d.TrVTrN).WithMany(p => p.TraVats)
                .HasForeignKey(d => d.TrVTrNid)
                .HasConstraintName("FK_VaTTraNag");
        });

        modelBuilder.Entity<TraeSklepAukcje>(entity =>
        {
            entity.HasKey(e => e.TrEaTrEaid)
                .HasName("TrEA_Primary")
                .HasFillFactor(100);

            entity.ToTable("TraeSklepAukcje", "CDN");

            entity.Property(e => e.TrEaTrEaid).HasColumnName("TrEA_TrEAId");
            entity.Property(e => e.TrEaAukcjaDostawaId)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrEA_AukcjaDostawaID");
            entity.Property(e => e.TrEaAukcjaLogin)
                .HasMaxLength(200)
                .HasColumnName("TrEA_AukcjaLogin");
            entity.Property(e => e.TrEaAukcjaLoginId)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrEA_AukcjaLoginID");
            entity.Property(e => e.TrEaAukcjaLoginSell)
                .HasMaxLength(200)
                .HasDefaultValue("")
                .HasColumnName("TrEA_AukcjaLoginSell");
            entity.Property(e => e.TrEaAukcjaLoginSellId)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TrEA_AukcjaLoginSellID");
            entity.Property(e => e.TrEaAukcjaSmart).HasColumnName("TrEA_AukcjaSmart");
            entity.Property(e => e.TrEaAukcjaTranId)
                .HasMaxLength(50)
                .HasColumnName("TrEA_AukcjaTranID");
            entity.Property(e => e.TrEaAukcjaTyp)
                .HasMaxLength(50)
                .HasColumnName("TrEA_AukcjaTyp");
            entity.Property(e => e.TrEaAukcje)
                .HasMaxLength(1000)
                .HasColumnName("TrEA_Aukcje");
            entity.Property(e => e.TrEaTrNid).HasColumnName("TrEA_TrNId");

            entity.HasOne(d => d.TrEaTrN).WithMany(p => p.TraeSklepAukcjes)
                .HasForeignKey(d => d.TrEaTrNid)
                .HasConstraintName("FK_TrEATraNag");
        });

        modelBuilder.Entity<Trwale>(entity =>
        {
            entity.HasKey(e => e.SrTSrTid)
                .HasName("SrT_Primary")
                .HasFillFactor(100);

            entity.ToTable("Trwale", "CDN", tb =>
                {
                    tb.HasTrigger("Trwale_Delete_Trigger");
                    tb.HasTrigger("Trwale_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.SrTLikwDekId, e.SrTSrTid }, "SrTDekrety")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrTImportRowId, "SrTGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrTKatId, "SrTKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTKodKreskowy, e.SrTUniqueKodKreskowyBuster }, "SrTKodKreskowy")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTTyp, e.SrTGrupa, e.SrTLp }, "SrTLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTTyp, e.SrTNazwa, e.SrTSrTid }, "SrTNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTTyp, e.SrTGrupa, e.SrTNazwa, e.SrTLp }, "SrTNazwaGrupa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTNrInwent, e.SrTUniqueNrInwBuster }, "SrTNrInwent")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrTPrcId, "SrTPracownik").HasFillFactor(100);

            entity.Property(e => e.SrTSrTid).HasColumnName("SrT_SrTID");
            entity.Property(e => e.SrTBilansowa).HasColumnName("SrT_Bilansowa");
            entity.Property(e => e.SrTDataAmo)
                .HasColumnType("datetime")
                .HasColumnName("SrT_DataAmo");
            entity.Property(e => e.SrTDataLikw)
                .HasColumnType("datetime")
                .HasColumnName("SrT_DataLikw");
            entity.Property(e => e.SrTDataPrz)
                .HasColumnType("datetime")
                .HasColumnName("SrT_DataPrz");
            entity.Property(e => e.SrTDataUmo)
                .HasColumnType("datetime")
                .HasColumnName("SrT_DataUmo");
            entity.Property(e => e.SrTDataZak)
                .HasColumnType("datetime")
                .HasColumnName("SrT_DataZak");
            entity.Property(e => e.SrTDokument)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SrT_Dokument");
            entity.Property(e => e.SrTGrupa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SrT_Grupa");
            entity.Property(e => e.SrTImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SrT_ImportAppId");
            entity.Property(e => e.SrTImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("SrT_ImportRowId");
            entity.Property(e => e.SrTKatId).HasColumnName("SrT_KatID");
            entity.Property(e => e.SrTKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SrT_Kategoria");
            entity.Property(e => e.SrTKodKreskowy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrT_KodKreskowy");
            entity.Property(e => e.SrTKontoAmKoszt)
                .HasMaxLength(20)
                .HasColumnName("SrT_KontoAmKoszt");
            entity.Property(e => e.SrTKontoAmRozn)
                .HasMaxLength(20)
                .HasColumnName("SrT_KontoAmRozn");
            entity.Property(e => e.SrTKontoGl)
                .HasMaxLength(20)
                .HasColumnName("SrT_KontoGl");
            entity.Property(e => e.SrTKontoUm)
                .HasMaxLength(20)
                .HasColumnName("SrT_KontoUm");
            entity.Property(e => e.SrTKrst)
                .HasMaxLength(20)
                .HasColumnName("SrT_KRST");
            entity.Property(e => e.SrTLikwDekId).HasColumnName("SrT_LikwDekID");
            entity.Property(e => e.SrTLikwDokument)
                .HasMaxLength(256)
                .HasColumnName("SrT_LikwDokument");
            entity.Property(e => e.SrTLikwidacja)
                .HasMaxLength(50)
                .HasColumnName("SrT_Likwidacja");
            entity.Property(e => e.SrTLp).HasColumnName("SrT_Lp");
            entity.Property(e => e.SrTMetoda).HasColumnName("SrT_Metoda");
            entity.Property(e => e.SrTMetodaBil).HasColumnName("SrT_MetodaBil");
            entity.Property(e => e.SrTNazwa)
                .HasMaxLength(256)
                .HasColumnName("SrT_Nazwa");
            entity.Property(e => e.SrTNrInwent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrT_NrInwent");
            entity.Property(e => e.SrTOpeModId).HasColumnName("SrT_OpeModID");
            entity.Property(e => e.SrTOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrT_OpeModKod");
            entity.Property(e => e.SrTOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrT_OpeModNazwisko");
            entity.Property(e => e.SrTOpeZalId).HasColumnName("SrT_OpeZalID");
            entity.Property(e => e.SrTOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrT_OpeZalKod");
            entity.Property(e => e.SrTOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrT_OpeZalNazwisko");
            entity.Property(e => e.SrTOpis).HasColumnName("SrT_Opis");
            entity.Property(e => e.SrTPrcId).HasColumnName("SrT_PrcID");
            entity.Property(e => e.SrTPrcNazwisko)
                .HasMaxLength(100)
                .HasColumnName("SrT_PrcNazwisko");
            entity.Property(e => e.SrTRodzaj).HasColumnName("SrT_Rodzaj");
            entity.Property(e => e.SrTSezonowy).HasColumnName("SrT_Sezonowy");
            entity.Property(e => e.SrTSezonowyBil).HasColumnName("SrT_SezonowyBil");
            entity.Property(e => e.SrTStaModId).HasColumnName("SrT_StaModId");
            entity.Property(e => e.SrTStaZalId).HasColumnName("SrT_StaZalId");
            entity.Property(e => e.SrTStan).HasColumnName("SrT_Stan");
            entity.Property(e => e.SrTStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrT_Stawka");
            entity.Property(e => e.SrTStawkaBil)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrT_StawkaBil");
            entity.Property(e => e.SrTTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SrT_TS_Mod");
            entity.Property(e => e.SrTTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SrT_TS_Zal");
            entity.Property(e => e.SrTTyp).HasColumnName("SrT_Typ");
            entity.Property(e => e.SrTUlgaInwestyc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrT_UlgaInwestyc");
            entity.Property(e => e.SrTUniqueKodKreskowyBuster)
                .HasComputedColumnSql("(case when [SrT_KodKreskowy]='' then [SrT_SrTID] else (0) end)", false)
                .HasColumnName("SrT_UniqueKodKreskowyBuster");
            entity.Property(e => e.SrTUniqueNrInwBuster)
                .HasComputedColumnSql("(case when [SrT_WBudowie]<>(0) AND [SrT_NrInwent]='' then [SrT_SrTID] else (0) end)", false)
                .HasColumnName("SrT_UniqueNrInwBuster");
            entity.Property(e => e.SrTUwzglKsgBadRozw).HasColumnName("SrT_UwzglKsgBadRozw");
            entity.Property(e => e.SrTVaNid).HasColumnName("SrT_VaNID");
            entity.Property(e => e.SrTWartoscBilan)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrT_WartoscBilan");
            entity.Property(e => e.SrTWartoscKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrT_WartoscKoszt");
            entity.Property(e => e.SrTWbudowie).HasColumnName("SrT_WBudowie");
            entity.Property(e => e.SrTWspolczynnik)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrT_Wspolczynnik");
            entity.Property(e => e.SrTWspolczynnikBil)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrT_WspolczynnikBil");
            entity.Property(e => e.SrTWzestawie).HasColumnName("SrT_WZestawie");
            entity.Property(e => e.SrTZakId).HasColumnName("SrT_ZakID");
            entity.Property(e => e.SrTZawieszenieAmoBil).HasColumnName("SrT_ZawieszenieAmoBil");
            entity.Property(e => e.SrTZawieszenieAmoKst).HasColumnName("SrT_ZawieszenieAmoKst");

            entity.HasOne(d => d.SrTKat).WithMany(p => p.Trwales)
                .HasForeignKey(d => d.SrTKatId)
                .HasConstraintName("FK_SrTKategoria");

            entity.HasOne(d => d.SrTPrc).WithMany(p => p.Trwales)
                .HasForeignKey(d => d.SrTPrcId)
                .HasConstraintName("FK_SrTPracownik");
        });

        modelBuilder.Entity<TrwaleAielem>(entity =>
        {
            entity.HasKey(e => e.SrTaieSrTaieid)
                .HasName("SrTAIE_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleAIElem", "CDN");

            entity.HasIndex(e => new { e.SrTaieSrTainid, e.SrTaieKodKreskowy, e.SrTaieUniqueKodKreskowyBuster }, "SrTAIEKodKreskowy")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTaieSrTainid, e.SrTaieLp }, "SrTAIELp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTaieSrTainid, e.SrTaieSrTaieid }, "SrTAIENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTaieSrTainid, e.SrTaieNrInwent, e.SrTaieUniqueNrInwBuster }, "SrTAIENrInwent")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTaieSrTid, e.SrTaieSrTaieid }, "SrTAIETrwale")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrTaieSrTaieid).HasColumnName("SrTAIE_SrTAIEID");
            entity.Property(e => e.SrTaieGrupa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SrTAIE_Grupa");
            entity.Property(e => e.SrTaieIlosc).HasColumnName("SrTAIE_Ilosc");
            entity.Property(e => e.SrTaieKodKreskowy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("SrTAIE_KodKreskowy");
            entity.Property(e => e.SrTaieLp).HasColumnName("SrTAIE_Lp");
            entity.Property(e => e.SrTaieNazwa)
                .HasMaxLength(256)
                .HasColumnName("SrTAIE_Nazwa");
            entity.Property(e => e.SrTaieNrInwent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrTAIE_NrInwent");
            entity.Property(e => e.SrTaieRoznica)
                .HasComputedColumnSql("([SrTAIE_Ilosc]-[SrTAIE_StanBiez])", false)
                .HasColumnName("SrTAIE_Roznica");
            entity.Property(e => e.SrTaieSrTainid).HasColumnName("SrTAIE_SrTAINID");
            entity.Property(e => e.SrTaieSrTid).HasColumnName("SrTAIE_SrTID");
            entity.Property(e => e.SrTaieStanBiez).HasColumnName("SrTAIE_StanBiez");
            entity.Property(e => e.SrTaieUniqueKodKreskowyBuster)
                .HasComputedColumnSql("(case when [SrTAIE_KodKreskowy]='' then [SrTAIE_SrTAIEID] else (0) end)", false)
                .HasColumnName("SrTAIE_UniqueKodKreskowyBuster");
            entity.Property(e => e.SrTaieUniqueNrInwBuster)
                .HasComputedColumnSql("(case when [SrTAIE_NrInwent]='' then [SrTAIE_SrTAIEID] else (0) end)", false)
                .HasColumnName("SrTAIE_UniqueNrInwBuster");
            entity.Property(e => e.SrTaieWartoscPocz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrTAIE_WartoscPocz");

            entity.HasOne(d => d.SrTaieSrTain).WithMany(p => p.TrwaleAielems)
                .HasForeignKey(d => d.SrTaieSrTainid)
                .HasConstraintName("FK_SrTAIENaglowek");
        });

        modelBuilder.Entity<TrwaleAinag>(entity =>
        {
            entity.HasKey(e => e.SrTainSrTainid)
                .HasName("SrTAIN_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleAINag", "CDN");

            entity.HasIndex(e => e.SrTainDdfId, "SrTAINDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTainKatId, e.SrTainDataDok, e.SrTainSrTainid }, "SrTAINKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrTainNumerString, e.SrTainNumerNr }, "SrTAINNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrTainNumerPelny, "SrTAINNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrTainSrTainid).HasColumnName("SrTAIN_SrTAINID");
            entity.Property(e => e.SrTainBufor).HasColumnName("SrTAIN_Bufor");
            entity.Property(e => e.SrTainDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SrTAIN_DataDok");
            entity.Property(e => e.SrTainDdfId).HasColumnName("SrTAIN_DDfID");
            entity.Property(e => e.SrTainKatId).HasColumnName("SrTAIN_KatID");
            entity.Property(e => e.SrTainKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SrTAIN_Kategoria");
            entity.Property(e => e.SrTainNumerNr).HasColumnName("SrTAIN_NumerNr");
            entity.Property(e => e.SrTainNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([SrTAIN_NUMERNR],[SrTAIN_NUMERSTRING]))", false)
                .HasColumnName("SrTAIN_NumerPelny");
            entity.Property(e => e.SrTainNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("SrTAIN_NumerString");
            entity.Property(e => e.SrTainOpeModId).HasColumnName("SrTAIN_OpeModID");
            entity.Property(e => e.SrTainOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrTAIN_OpeModKod");
            entity.Property(e => e.SrTainOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrTAIN_OpeModNazwisko");
            entity.Property(e => e.SrTainOpeZalId).HasColumnName("SrTAIN_OpeZalID");
            entity.Property(e => e.SrTainOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrTAIN_OpeZalKod");
            entity.Property(e => e.SrTainOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrTAIN_OpeZalNazwisko");
            entity.Property(e => e.SrTainOpis)
                .HasMaxLength(1024)
                .HasColumnName("SrTAIN_Opis");
            entity.Property(e => e.SrTainStaModId).HasColumnName("SrTAIN_StaModID");
            entity.Property(e => e.SrTainStaZalId).HasColumnName("SrTAIN_StaZalID");
            entity.Property(e => e.SrTainTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SrTAIN_TS_Mod");
            entity.Property(e => e.SrTainTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SrTAIN_TS_Zal");

            entity.HasOne(d => d.SrTainDdf).WithMany(p => p.TrwaleAinags)
                .HasForeignKey(d => d.SrTainDdfId)
                .HasConstraintName("FK_SrTAINDokDefinicja");

            entity.HasOne(d => d.SrTainKat).WithMany(p => p.TrwaleAinags)
                .HasForeignKey(d => d.SrTainKatId)
                .HasConstraintName("FK_SrTAINKategoria");
        });

        modelBuilder.Entity<TrwaleAtrybuty>(entity =>
        {
            entity.HasKey(e => e.SrASrAid)
                .HasName("SrA_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleAtrybuty", "CDN", tb => tb.HasTrigger("TrwaleAtrybuty_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.SrADeAid, "DeAId").HasFillFactor(100);

            entity.HasIndex(e => e.SrASrTid, "SrTId").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrASrTid, e.SrADeAid, e.SrAWypId, e.SrATyp }, "UniqueDeAID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrAWypId, "WypID").HasFillFactor(100);

            entity.Property(e => e.SrASrAid).HasColumnName("SrA_SrAId");
            entity.Property(e => e.SrADeAid).HasColumnName("SrA_DeAId");
            entity.Property(e => e.SrASrTid).HasColumnName("SrA_SrTId");
            entity.Property(e => e.SrATyp).HasColumnName("SrA_Typ");
            entity.Property(e => e.SrAWartoscTxt)
                .HasMaxLength(255)
                .HasColumnName("SrA_WartoscTxt");
            entity.Property(e => e.SrAWypId).HasColumnName("SrA_WypID");

            entity.HasOne(d => d.SrADeA).WithMany(p => p.TrwaleAtrybuties)
                .HasForeignKey(d => d.SrADeAid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SrADeAId");

            entity.HasOne(d => d.SrASrT).WithMany(p => p.TrwaleAtrybuties)
                .HasForeignKey(d => d.SrASrTid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SrTId");
        });

        modelBuilder.Entity<TrwaleAtrybutyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TrwaleAtrybutyView", "CDN");

            entity.Property(e => e.SravAtrybutFormat).HasColumnName("SRAV_AtrybutFormat");
            entity.Property(e => e.SravAtrybutKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAV_AtrybutKod");
            entity.Property(e => e.SravAtrybutNazwa)
                .HasMaxLength(40)
                .HasColumnName("SRAV_AtrybutNazwa");
            entity.Property(e => e.SravAtrybutWartosc)
                .HasMaxLength(255)
                .HasColumnName("SRAV_AtrybutWartosc");
            entity.Property(e => e.SravBilansowa).HasColumnName("SRAV_Bilansowa");
            entity.Property(e => e.SravDataAmo)
                .HasColumnType("datetime")
                .HasColumnName("SRAV_DataAmo");
            entity.Property(e => e.SravDataLikw)
                .HasColumnType("datetime")
                .HasColumnName("SRAV_DataLikw");
            entity.Property(e => e.SravDataPrz)
                .HasColumnType("datetime")
                .HasColumnName("SRAV_DataPrz");
            entity.Property(e => e.SravDataUmo)
                .HasColumnType("datetime")
                .HasColumnName("SRAV_DataUmo");
            entity.Property(e => e.SravDataZak)
                .HasColumnType("datetime")
                .HasColumnName("SRAV_DataZak");
            entity.Property(e => e.SravDeAid).HasColumnName("SRAV_DeAId");
            entity.Property(e => e.SravDokument)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRAV_Dokument");
            entity.Property(e => e.SravGrupa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SRAV_Grupa");
            entity.Property(e => e.SravKatId).HasColumnName("SRAV_KatID");
            entity.Property(e => e.SravKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRAV_Kategoria");
            entity.Property(e => e.SravKontoAmKoszt)
                .HasMaxLength(20)
                .HasColumnName("SRAV_KontoAmKoszt");
            entity.Property(e => e.SravKontoAmRozn)
                .HasMaxLength(20)
                .HasColumnName("SRAV_KontoAmRozn");
            entity.Property(e => e.SravKontoGl)
                .HasMaxLength(20)
                .HasColumnName("SRAV_KontoGl");
            entity.Property(e => e.SravKontoUm)
                .HasMaxLength(20)
                .HasColumnName("SRAV_KontoUm");
            entity.Property(e => e.SravKrst)
                .HasMaxLength(20)
                .HasColumnName("SRAV_KRST");
            entity.Property(e => e.SravLikwDekId).HasColumnName("SRAV_LikwDekID");
            entity.Property(e => e.SravLikwDokument)
                .HasMaxLength(256)
                .HasColumnName("SRAV_LikwDokument");
            entity.Property(e => e.SravLikwidacja)
                .HasMaxLength(50)
                .HasColumnName("SRAV_Likwidacja");
            entity.Property(e => e.SravLp).HasColumnName("SRAV_Lp");
            entity.Property(e => e.SravMetoda).HasColumnName("SRAV_Metoda");
            entity.Property(e => e.SravMetodaBil).HasColumnName("SRAV_MetodaBil");
            entity.Property(e => e.SravNazwa)
                .HasMaxLength(256)
                .HasColumnName("SRAV_Nazwa");
            entity.Property(e => e.SravNrInwent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAV_NrInwent");
            entity.Property(e => e.SravOpeModId).HasColumnName("SRAV_OpeModID");
            entity.Property(e => e.SravOpeZalId).HasColumnName("SRAV_OpeZalID");
            entity.Property(e => e.SravOpis).HasColumnName("SRAV_Opis");
            entity.Property(e => e.SravPrcId).HasColumnName("SRAV_PrcID");
            entity.Property(e => e.SravPrcNazwisko)
                .HasMaxLength(100)
                .HasColumnName("SRAV_PrcNazwisko");
            entity.Property(e => e.SravSezonowy).HasColumnName("SRAV_Sezonowy");
            entity.Property(e => e.SravSezonowyBil).HasColumnName("SRAV_SezonowyBil");
            entity.Property(e => e.SravSrAid).HasColumnName("SRAV_SrAId");
            entity.Property(e => e.SravSrAvid)
                .HasMaxLength(4000)
                .HasColumnName("SRAV_SrAVID");
            entity.Property(e => e.SravSrTid).HasColumnName("SRAV_SrTId");
            entity.Property(e => e.SravStaModId).HasColumnName("SRAV_StaModId");
            entity.Property(e => e.SravStaZalId).HasColumnName("SRAV_StaZalId");
            entity.Property(e => e.SravStan).HasColumnName("SRAV_Stan");
            entity.Property(e => e.SravStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SRAV_Stawka");
            entity.Property(e => e.SravStawkaBil)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SRAV_StawkaBil");
            entity.Property(e => e.SravTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SRAV_TS_Mod");
            entity.Property(e => e.SravTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SRAV_TS_Zal");
            entity.Property(e => e.SravTyp).HasColumnName("SRAV_Typ");
            entity.Property(e => e.SravUlgaInwestyc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SRAV_UlgaInwestyc");
            entity.Property(e => e.SravVaNid).HasColumnName("SRAV_VaNID");
            entity.Property(e => e.SravWartoscBilan)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SRAV_WartoscBilan");
            entity.Property(e => e.SravWartoscKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SRAV_WartoscKoszt");
            entity.Property(e => e.SravWspolczynnik)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SRAV_Wspolczynnik");
            entity.Property(e => e.SravWspolczynnikBil)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SRAV_WspolczynnikBil");
            entity.Property(e => e.SravWypId).HasColumnName("SRAV_WypID");
            entity.Property(e => e.SravZakId).HasColumnName("SRAV_ZakID");
        });

        modelBuilder.Entity<TrwaleCzesci>(entity =>
        {
            entity.HasKey(e => e.SrTcSrtCid)
                .HasName("SrTC_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleCzesci", "CDN", tb => tb.HasTrigger("TrwaleCzesci_InsertUpdateDelete_Trigger"));

            entity.HasIndex(e => new { e.SrTcZestawId, e.SrTcCzescId }, "SrTCZestaw")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrTcSrtCid).HasColumnName("SrTC_SrtCID");
            entity.Property(e => e.SrTcCzescId).HasColumnName("SrTC_CzescID");
            entity.Property(e => e.SrTcZestawId).HasColumnName("SrTC_ZestawID");

            entity.HasOne(d => d.SrTcZestaw).WithMany(p => p.TrwaleCzescis)
                .HasForeignKey(d => d.SrTcZestawId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SrTCZestaw");
        });

        modelBuilder.Entity<TrwaleHist>(entity =>
        {
            entity.HasKey(e => e.SrHSrHid)
                .HasName("SrH_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleHist", "CDN", tb =>
                {
                    tb.HasTrigger("TrwaleHist_DeleteHandler");
                    tb.HasTrigger("TrwaleHist_Delete_Trigger");
                    tb.HasTrigger("TrwaleHist_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.SrHTyp, e.SrHTypDokumentu, e.SrHDataOpe, e.SrHSrTid, e.SrHSrHid }, "SrHChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrHTyp, e.SrHGrupa, e.SrHTypDokumentu, e.SrHDataOpe, e.SrHSrTid, e.SrHSrHid }, "SrHChronoGrupa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrHDekId, e.SrHSrHid }, "SrHDekrety")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrHDokumentTyp, e.SrHDokumentId }, "SrHDokument").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrHKprid, e.SrHSrHid }, "SrHKPR")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.SrHKatId, e.SrHDataOpe, e.SrHSrHid }, "SrHKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.SrHPreDekId, "SrHPreDekret").HasFillFactor(100);

            entity.HasIndex(e => new { e.SrHSrTid, e.SrHDataOpe, e.SrHSrHid }, "SrHTrwale")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrHSrHid).HasColumnName("SrH_SrHID");
            entity.Property(e => e.SrHDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("SrH_DataOpe");
            entity.Property(e => e.SrHDataPrzekazaniaDo)
                .HasColumnType("datetime")
                .HasColumnName("SrH_DataPrzekazaniaDo");
            entity.Property(e => e.SrHDataPrzekazaniaOd)
                .HasColumnType("datetime")
                .HasColumnName("SrH_DataPrzekazaniaOd");
            entity.Property(e => e.SrHDekId).HasColumnName("SrH_DekId");
            entity.Property(e => e.SrHDokumentId).HasColumnName("SrH_DokumentID");
            entity.Property(e => e.SrHDokumentTyp).HasColumnName("SrH_DokumentTyp");
            entity.Property(e => e.SrHGrupa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SrH_Grupa");
            entity.Property(e => e.SrHKatId).HasColumnName("SrH_KatID");
            entity.Property(e => e.SrHKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SrH_Kategoria");
            entity.Property(e => e.SrHKprid).HasColumnName("SrH_KPRId");
            entity.Property(e => e.SrHKwotaAm)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrH_KwotaAm");
            entity.Property(e => e.SrHKwotaBilan)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrH_KwotaBilan");
            entity.Property(e => e.SrHKwotaKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrH_KwotaKoszt");
            entity.Property(e => e.SrHKwotaUm)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrH_KwotaUm");
            entity.Property(e => e.SrHLtdataAmo)
                .HasColumnType("datetime")
                .HasColumnName("SrH_LTDataAmo");
            entity.Property(e => e.SrHLtdataAmoBil)
                .HasColumnType("datetime")
                .HasColumnName("SrH_LTDataAmoBil");
            entity.Property(e => e.SrHLtwyliczUm).HasColumnName("SrH_LTWyliczUm");
            entity.Property(e => e.SrHMetoda).HasColumnName("SrH_Metoda");
            entity.Property(e => e.SrHMetodaBil).HasColumnName("SrH_MetodaBil");
            entity.Property(e => e.SrHMiejsceUzytkowania1)
                .HasMaxLength(255)
                .HasColumnName("SrH_MiejsceUzytkowania1");
            entity.Property(e => e.SrHMiejsceUzytkowania2)
                .HasMaxLength(255)
                .HasColumnName("SrH_MiejsceUzytkowania2");
            entity.Property(e => e.SrHNumer)
                .HasMaxLength(256)
                .HasColumnName("SrH_Numer");
            entity.Property(e => e.SrHOpeModId).HasColumnName("SrH_OpeModID");
            entity.Property(e => e.SrHOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrH_OpeModKod");
            entity.Property(e => e.SrHOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrH_OpeModNazwisko");
            entity.Property(e => e.SrHOpeZalId).HasColumnName("SrH_OpeZalID");
            entity.Property(e => e.SrHOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrH_OpeZalKod");
            entity.Property(e => e.SrHOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("SrH_OpeZalNazwisko");
            entity.Property(e => e.SrHOpis).HasColumnName("SrH_Opis");
            entity.Property(e => e.SrHPrcId1).HasColumnName("SrH_PrcID1");
            entity.Property(e => e.SrHPrcId2).HasColumnName("SrH_PrcID2");
            entity.Property(e => e.SrHPrcImieNazwisko1)
                .HasMaxLength(255)
                .HasColumnName("SrH_PrcImieNazwisko1");
            entity.Property(e => e.SrHPrcImieNazwisko2)
                .HasMaxLength(255)
                .HasColumnName("SrH_PrcImieNazwisko2");
            entity.Property(e => e.SrHPreDekId).HasColumnName("SrH_PreDekId");
            entity.Property(e => e.SrHRodzaj).HasColumnName("SrH_Rodzaj");
            entity.Property(e => e.SrHSrTid).HasColumnName("SrH_SrTID");
            entity.Property(e => e.SrHStaModId).HasColumnName("SrH_StaModId");
            entity.Property(e => e.SrHStaZalId).HasColumnName("SrH_StaZalId");
            entity.Property(e => e.SrHStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrH_Stawka");
            entity.Property(e => e.SrHStawkaBil)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrH_StawkaBil");
            entity.Property(e => e.SrHTsMod)
                .HasColumnType("datetime")
                .HasColumnName("SrH_TS_Mod");
            entity.Property(e => e.SrHTsZal)
                .HasColumnType("datetime")
                .HasColumnName("SrH_TS_Zal");
            entity.Property(e => e.SrHTyp).HasColumnName("SrH_Typ");
            entity.Property(e => e.SrHTypDokumentu).HasColumnName("SrH_TypDokumentu");
            entity.Property(e => e.SrHUlga).HasColumnName("SrH_Ulga");
            entity.Property(e => e.SrHUwzglKsgBadRozw).HasColumnName("SrH_UwzglKsgBadRozw");
            entity.Property(e => e.SrHWspolczynnik)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrH_Wspolczynnik");
            entity.Property(e => e.SrHWspolczynnikBil)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrH_WspolczynnikBil");
            entity.Property(e => e.SrHZakId).HasColumnName("SrH_ZakID");

            entity.HasOne(d => d.SrHKat).WithMany(p => p.TrwaleHists)
                .HasForeignKey(d => d.SrHKatId)
                .HasConstraintName("FK_SrHKategoria");

            entity.HasOne(d => d.SrHSrT).WithMany(p => p.TrwaleHists)
                .HasForeignKey(d => d.SrHSrTid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SrHTrwale");
        });

        modelBuilder.Entity<TrwaleHistAtrybutyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TrwaleHistAtrybutyView", "CDN");

            entity.Property(e => e.SrHavAtrybutFormat).HasColumnName("SrHAV_AtrybutFormat");
            entity.Property(e => e.SrHavAtrybutKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrHAV_AtrybutKod");
            entity.Property(e => e.SrHavAtrybutNazwa)
                .HasMaxLength(40)
                .HasColumnName("SrHAV_AtrybutNazwa");
            entity.Property(e => e.SrHavAtrybutWartosc)
                .HasMaxLength(255)
                .HasColumnName("SrHAV_AtrybutWartosc");
            entity.Property(e => e.SrHavDeAid).HasColumnName("SrHAV_DeAId");
            entity.Property(e => e.SrHavSrAid).HasColumnName("SrHAV_SrAId");
            entity.Property(e => e.SrHavSrHDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("SrHAV_SrH_DataOpe");
            entity.Property(e => e.SrHavSrHDekId).HasColumnName("SrHAV_SrH_DekId");
            entity.Property(e => e.SrHavSrHGrupa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SrHAV_SrH_Grupa");
            entity.Property(e => e.SrHavSrHKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SrHAV_SrH_Kategoria");
            entity.Property(e => e.SrHavSrHKprid).HasColumnName("SrHAV_SrH_KPRId");
            entity.Property(e => e.SrHavSrHKwotaAm)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHAV_SrH_KwotaAm");
            entity.Property(e => e.SrHavSrHKwotaBilan)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHAV_SrH_KwotaBilan");
            entity.Property(e => e.SrHavSrHKwotaKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHAV_SrH_KwotaKoszt");
            entity.Property(e => e.SrHavSrHKwotaUm)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHAV_SrH_KwotaUm");
            entity.Property(e => e.SrHavSrHMetoda).HasColumnName("SrHAV_SrH_Metoda");
            entity.Property(e => e.SrHavSrHMetodaBil).HasColumnName("SrHAV_SrH_MetodaBil");
            entity.Property(e => e.SrHavSrHNumer)
                .HasMaxLength(256)
                .HasColumnName("SrHAV_SrH_Numer");
            entity.Property(e => e.SrHavSrHOpis).HasColumnName("SrHAV_SrH_Opis");
            entity.Property(e => e.SrHavSrHPreDekId).HasColumnName("SrHAV_SrH_PreDekId");
            entity.Property(e => e.SrHavSrHRodzaj).HasColumnName("SrHAV_SrH_Rodzaj");
            entity.Property(e => e.SrHavSrHStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrHAV_SrH_Stawka");
            entity.Property(e => e.SrHavSrHStawkaBil)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrHAV_SrH_StawkaBil");
            entity.Property(e => e.SrHavSrHTyp).HasColumnName("SrHAV_SrH_Typ");
            entity.Property(e => e.SrHavSrHTypDokumentu).HasColumnName("SrHAV_SrH_TypDokumentu");
            entity.Property(e => e.SrHavSrHUlga).HasColumnName("SrHAV_SrH_Ulga");
            entity.Property(e => e.SrHavSrHWspolczynnik)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrHAV_SrH_Wspolczynnik");
            entity.Property(e => e.SrHavSrHWspolczynnikBil)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrHAV_SrH_WspolczynnikBil");
            entity.Property(e => e.SrHavSrHZakId).HasColumnName("SrHAV_SrH_ZakID");
            entity.Property(e => e.SrHavSrHid).HasColumnName("SrHAV_SrHID");
            entity.Property(e => e.SrHavSrHvid)
                .HasMaxLength(4000)
                .HasColumnName("SrHAV_SrHVID");
            entity.Property(e => e.SrHavSrTBilansowa).HasColumnName("SrHAV_SrT_Bilansowa");
            entity.Property(e => e.SrHavSrTDataAmo)
                .HasColumnType("datetime")
                .HasColumnName("SrHAV_SrT_DataAmo");
            entity.Property(e => e.SrHavSrTDataLikw)
                .HasColumnType("datetime")
                .HasColumnName("SrHAV_SrT_DataLikw");
            entity.Property(e => e.SrHavSrTDataPrz)
                .HasColumnType("datetime")
                .HasColumnName("SrHAV_SrT_DataPrz");
            entity.Property(e => e.SrHavSrTDataUmo)
                .HasColumnType("datetime")
                .HasColumnName("SrHAV_SrT_DataUmo");
            entity.Property(e => e.SrHavSrTDataZak)
                .HasColumnType("datetime")
                .HasColumnName("SrHAV_SrT_DataZak");
            entity.Property(e => e.SrHavSrTDokument)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SrHAV_SrT_Dokument");
            entity.Property(e => e.SrHavSrTGrupa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SrHAV_SrT_Grupa");
            entity.Property(e => e.SrHavSrTKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SrHAV_SrT_Kategoria");
            entity.Property(e => e.SrHavSrTKontoAmKoszt)
                .HasMaxLength(20)
                .HasColumnName("SrHAV_SrT_KontoAmKoszt");
            entity.Property(e => e.SrHavSrTKontoAmRozn)
                .HasMaxLength(20)
                .HasColumnName("SrHAV_SrT_KontoAmRozn");
            entity.Property(e => e.SrHavSrTKontoGl)
                .HasMaxLength(20)
                .HasColumnName("SrHAV_SrT_KontoGl");
            entity.Property(e => e.SrHavSrTKontoUm)
                .HasMaxLength(20)
                .HasColumnName("SrHAV_SrT_KontoUm");
            entity.Property(e => e.SrHavSrTKrst)
                .HasMaxLength(20)
                .HasColumnName("SrHAV_SrT_KRST");
            entity.Property(e => e.SrHavSrTLikwDekId).HasColumnName("SrHAV_SrT_LikwDekID");
            entity.Property(e => e.SrHavSrTLikwDokument)
                .HasMaxLength(256)
                .HasColumnName("SrHAV_SrT_LikwDokument");
            entity.Property(e => e.SrHavSrTLikwidacja)
                .HasMaxLength(50)
                .HasColumnName("SrHAV_SrT_Likwidacja");
            entity.Property(e => e.SrHavSrTLp).HasColumnName("SrHAV_SrT_Lp");
            entity.Property(e => e.SrHavSrTMetoda).HasColumnName("SrHAV_SrT_Metoda");
            entity.Property(e => e.SrHavSrTMetodaBil).HasColumnName("SrHAV_SrT_MetodaBil");
            entity.Property(e => e.SrHavSrTNazwa)
                .HasMaxLength(256)
                .HasColumnName("SrHAV_SrT_Nazwa");
            entity.Property(e => e.SrHavSrTNrInwent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SrHAV_SrT_NrInwent");
            entity.Property(e => e.SrHavSrTOpis).HasColumnName("SrHAV_SrT_Opis");
            entity.Property(e => e.SrHavSrTPrcNazwisko)
                .HasMaxLength(100)
                .HasColumnName("SrHAV_SrT_PrcNazwisko");
            entity.Property(e => e.SrHavSrTSezonowy).HasColumnName("SrHAV_SrT_Sezonowy");
            entity.Property(e => e.SrHavSrTSezonowyBil).HasColumnName("SrHAV_SrT_SezonowyBil");
            entity.Property(e => e.SrHavSrTStan).HasColumnName("SrHAV_SrT_Stan");
            entity.Property(e => e.SrHavSrTStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrHAV_SrT_Stawka");
            entity.Property(e => e.SrHavSrTStawkaBil)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SrHAV_SrT_StawkaBil");
            entity.Property(e => e.SrHavSrTTyp).HasColumnName("SrHAV_SrT_Typ");
            entity.Property(e => e.SrHavSrTUlgaInwestyc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHAV_SrT_UlgaInwestyc");
            entity.Property(e => e.SrHavSrTWartoscBilan)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHAV_SrT_WartoscBilan");
            entity.Property(e => e.SrHavSrTWartoscKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHAV_SrT_WartoscKoszt");
            entity.Property(e => e.SrHavSrTWspolczynnik)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrHAV_SrT_Wspolczynnik");
            entity.Property(e => e.SrHavSrTWspolczynnikBil)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("SrHAV_SrT_WspolczynnikBil");
            entity.Property(e => e.SrHavSrTZakId).HasColumnName("SrHAV_SrT_ZakID");
            entity.Property(e => e.SrHavSrTid).HasColumnName("SrHAV_SrTId");
        });

        modelBuilder.Entity<TrwaleHistPowiazanium>(entity =>
        {
            entity.HasKey(e => e.SrHpSrHpid)
                .HasName("SrHP_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleHistPowiazania", "CDN", tb =>
                {
                    tb.HasTrigger("TrwaleHistPowiazania_Delete_Trigger");
                    tb.HasTrigger("TrwaleHistPowiazania_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.SrHpSrHid, e.SrHpDokumentId, e.SrHpDokumentTyp, e.SrHpNumer }, "SrHPDok")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrHpSrHpid).HasColumnName("SrHP_SrHPID");
            entity.Property(e => e.SrHpDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SrHP_DataDok");
            entity.Property(e => e.SrHpDokumentId).HasColumnName("SrHP_DokumentID");
            entity.Property(e => e.SrHpDokumentTyp).HasColumnName("SrHP_DokumentTyp");
            entity.Property(e => e.SrHpKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrHP_Kwota");
            entity.Property(e => e.SrHpNumer)
                .HasMaxLength(256)
                .HasColumnName("SrHP_Numer");
            entity.Property(e => e.SrHpOpis)
                .HasMaxLength(255)
                .HasColumnName("SrHP_Opis");
            entity.Property(e => e.SrHpSrHid).HasColumnName("SrHP_SrHID");

            entity.HasOne(d => d.SrHpSrH).WithMany(p => p.TrwaleHistPowiazania)
                .HasForeignKey(d => d.SrHpSrHid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SrHPDok");
        });

        modelBuilder.Entity<TrwaleMaska>(entity =>
        {
            entity.HasKey(e => e.SrMSrMid)
                .HasName("SrM_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleMaska", "CDN");

            entity.HasIndex(e => new { e.SrMSrTid, e.SrMRokMies, e.SrMTyp }, "SrMTrwale")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrMSrMid).HasColumnName("SrM_SrMID");
            entity.Property(e => e.SrMRokMies).HasColumnName("SrM_RokMies");
            entity.Property(e => e.SrMSrTid).HasColumnName("SrM_SrTID");
            entity.Property(e => e.SrMTyp).HasColumnName("SrM_Typ");

            entity.HasOne(d => d.SrMSrT).WithMany(p => p.TrwaleMaskas)
                .HasForeignKey(d => d.SrMSrTid)
                .HasConstraintName("FK_SrMTrwale");
        });

        modelBuilder.Entity<TrwaleMiejscaUzytkowanium>(entity =>
        {
            entity.HasKey(e => e.SrMuSrMuid)
                .HasName("SrMUPrimary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleMiejscaUzytkowania", "CDN");

            entity.HasIndex(e => new { e.SrMuSrTid, e.SrMuDataOd }, "SrMUSrT")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrMuSrMuid).HasColumnName("SrMU_SrMUID");
            entity.Property(e => e.SrMuDataDo)
                .HasColumnType("datetime")
                .HasColumnName("SrMU_DataDo");
            entity.Property(e => e.SrMuDataOd)
                .HasColumnType("datetime")
                .HasColumnName("SrMU_DataOd");
            entity.Property(e => e.SrMuNazwa)
                .HasMaxLength(255)
                .HasColumnName("SrMU_Nazwa");
            entity.Property(e => e.SrMuSrTid).HasColumnName("SrMU_SrTID");

            entity.HasOne(d => d.SrMuSrT).WithMany(p => p.TrwaleMiejscaUzytkowania)
                .HasForeignKey(d => d.SrMuSrTid)
                .HasConstraintName("FK_SrMUSrT");
        });

        modelBuilder.Entity<TrwaleOsobyOdpowiedzialne>(entity =>
        {
            entity.HasKey(e => e.SrOoSrOoid)
                .HasName("SrOOPrimary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleOsobyOdpowiedzialne", "CDN");

            entity.HasIndex(e => new { e.SrOoSrTid, e.SrOoDataOd }, "SrOOSrT")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrOoSrOoid).HasColumnName("SrOO_SrOOID");
            entity.Property(e => e.SrOoDataDo)
                .HasColumnType("datetime")
                .HasColumnName("SrOO_DataDo");
            entity.Property(e => e.SrOoDataOd)
                .HasColumnType("datetime")
                .HasColumnName("SrOO_DataOd");
            entity.Property(e => e.SrOoPrcId).HasColumnName("SrOO_PrcID");
            entity.Property(e => e.SrOoPrcImieNazwisko)
                .HasMaxLength(255)
                .HasColumnName("SrOO_PrcImieNazwisko");
            entity.Property(e => e.SrOoSrTid).HasColumnName("SrOO_SrTID");

            entity.HasOne(d => d.SrOoSrT).WithMany(p => p.TrwaleOsobyOdpowiedzialnes)
                .HasForeignKey(d => d.SrOoSrTid)
                .HasConstraintName("FK_SrOOSrT");
        });

        modelBuilder.Entity<TrwalePowiazanium>(entity =>
        {
            entity.HasKey(e => e.SrTpSrtPid)
                .HasName("SrTP_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwalePowiazania", "CDN", tb => tb.HasTrigger("TrwalePowiazania_DeleteHandler"));

            entity.HasIndex(e => new { e.SrTpSrTid, e.SrTpDokumentId, e.SrTpDokumentTyp, e.SrTpNumer }, "SrTPDok")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrTpSrtPid).HasColumnName("SrTP_SrtPID");
            entity.Property(e => e.SrTpDataDok)
                .HasColumnType("datetime")
                .HasColumnName("SrTP_DataDok");
            entity.Property(e => e.SrTpDokumentId).HasColumnName("SrTP_DokumentID");
            entity.Property(e => e.SrTpDokumentTyp).HasColumnName("SrTP_DokumentTyp");
            entity.Property(e => e.SrTpKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SrTP_Kwota");
            entity.Property(e => e.SrTpNumer)
                .HasMaxLength(256)
                .HasColumnName("SrTP_Numer");
            entity.Property(e => e.SrTpOpis)
                .HasMaxLength(255)
                .HasColumnName("SrTP_Opis");
            entity.Property(e => e.SrTpSrTid).HasColumnName("SrTP_SrTID");

            entity.HasOne(d => d.SrTpSrT).WithMany(p => p.TrwalePowiazania)
                .HasForeignKey(d => d.SrTpSrTid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SrTPDok");
        });

        modelBuilder.Entity<TrwaleZawieszeniaAmo>(entity =>
        {
            entity.HasKey(e => e.SrZaSrZaid)
                .HasName("SrZA_Primary")
                .HasFillFactor(100);

            entity.ToTable("TrwaleZawieszeniaAmo", "CDN");

            entity.HasIndex(e => new { e.SrZaSrTid, e.SrZaRokMies, e.SrZaTyp }, "SrZASrT")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.SrZaSrZaid).HasColumnName("SrZA_SrZAID");
            entity.Property(e => e.SrZaRokMies).HasColumnName("SrZA_RokMies");
            entity.Property(e => e.SrZaSrTid).HasColumnName("SrZA_SrTID");
            entity.Property(e => e.SrZaTyp).HasColumnName("SrZA_Typ");

            entity.HasOne(d => d.SrZaSrT).WithMany(p => p.TrwaleZawieszeniaAmos)
                .HasForeignKey(d => d.SrZaSrTid)
                .HasConstraintName("FK_SrZASrT");
        });

        modelBuilder.Entity<TwrAtrybuty>(entity =>
        {
            entity.HasKey(e => e.TwATwAid)
                .HasName("TwA_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrAtrybuty", "CDN", tb =>
                {
                    tb.HasTrigger("TwrAtrybuty_Delete_Trigger");
                    tb.HasTrigger("TwrAtrybuty_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.TwADeAid, "TwADefAtrybut").HasFillFactor(100);

            entity.HasIndex(e => e.TwADeAid, "TwADefAtrybutTwrWartosc").HasFillFactor(100);

            entity.HasIndex(e => e.TwASrRid, "TwARodzajU").HasFillFactor(100);

            entity.HasIndex(e => e.TwATwrId, "TwATowar").HasFillFactor(100);

            entity.HasIndex(e => e.TwASrUid, "TwAUrzadzenie").HasFillFactor(100);

            entity.HasIndex(e => e.TwASrZid, "TwAZlecenie").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwAEsklep, e.TwACzyPrzenosicNaDostawy }, "TwAtrybutyESklep").HasFillFactor(100);

            entity.Property(e => e.TwATwAid).HasColumnName("TwA_TwAId");
            entity.Property(e => e.TwAAtrybutGrupujacyFantom).HasColumnName("TwA_AtrybutGrupujacyFantom");
            entity.Property(e => e.TwACzyDrukowac).HasColumnName("TwA_CzyDrukowac");
            entity.Property(e => e.TwACzyKod).HasColumnName("TwA_CzyKod");
            entity.Property(e => e.TwACzyKopiowac).HasColumnName("TwA_CzyKopiowac");
            entity.Property(e => e.TwACzyObowiazkowyDostawy).HasColumnName("TwA_CzyObowiazkowyDostawy");
            entity.Property(e => e.TwACzyObowiazkowySerwis).HasColumnName("TwA_CzyObowiazkowySerwis");
            entity.Property(e => e.TwACzyPrzenosic).HasColumnName("TwA_CzyPrzenosic");
            entity.Property(e => e.TwACzyPrzenosicNaDostawy).HasColumnName("TwA_CzyPrzenosicNaDostawy");
            entity.Property(e => e.TwADabid).HasColumnName("TwA_DABID");
            entity.Property(e => e.TwADeAid).HasColumnName("TwA_DeAId");
            entity.Property(e => e.TwAEsklep).HasColumnName("TwA_ESklep");
            entity.Property(e => e.TwAJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("TwA_JezykId");
            entity.Property(e => e.TwALp).HasColumnName("TwA_Lp");
            entity.Property(e => e.TwARodzajId).HasColumnName("TwA_RodzajId");
            entity.Property(e => e.TwASourceId).HasColumnName("TwA_SourceId");
            entity.Property(e => e.TwASrRid).HasColumnName("TwA_SrRId");
            entity.Property(e => e.TwASrUid).HasColumnName("TwA_SrUId");
            entity.Property(e => e.TwASrZid).HasColumnName("TwA_SrZId");
            entity.Property(e => e.TwATwrId).HasColumnName("TwA_TwrId");
            entity.Property(e => e.TwAUrzId).HasColumnName("TwA_UrzId");
            entity.Property(e => e.TwAWartoscTxt)
                .HasMaxLength(100)
                .HasColumnName("TwA_WartoscTxt");
            entity.Property(e => e.TwAZalezny).HasColumnName("TwA_Zalezny");

            entity.HasOne(d => d.TwADeA).WithMany(p => p.TwrAtrybuties)
                .HasForeignKey(d => d.TwADeAid)
                .HasConstraintName("FK_TwADefAtrybut");

            entity.HasOne(d => d.TwASrR).WithMany(p => p.TwrAtrybuties)
                .HasForeignKey(d => d.TwASrRid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwARodzajU");

            entity.HasOne(d => d.TwASrU).WithMany(p => p.TwrAtrybuties)
                .HasForeignKey(d => d.TwASrUid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwAUrzadzenie");

            entity.HasOne(d => d.TwASrZ).WithMany(p => p.TwrAtrybuties)
                .HasForeignKey(d => d.TwASrZid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwAZlecenie");

            entity.HasOne(d => d.TwATwr).WithMany(p => p.TwrAtrybuties)
                .HasForeignKey(d => d.TwATwrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwATowar");
        });

        modelBuilder.Entity<TwrCeny>(entity =>
        {
            entity.HasKey(e => e.TwCTwCid)
                .HasName("TwC_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrCeny", "CDN", tb => tb.HasTrigger("TwrCeny_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.TwCTwrId, e.TwCTwCnumer }, "TwCTowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TwCTwrTyp, e.TwCTwrFirma, e.TwCTwrNumer, e.TwCTwrLp }, "TwCTwrGID").HasFillFactor(100);

            entity.HasIndex(e => e.TwCTwCnumer, "TwrCenyTwCNumer").HasFillFactor(100);

            entity.HasIndex(e => e.TwCWaluta, "TwrCenyWaluta").HasFillFactor(100);

            entity.Property(e => e.TwCTwCid).HasColumnName("TwC_TwCID");
            entity.Property(e => e.TwCAktualizacja).HasColumnName("TwC_Aktualizacja");
            entity.Property(e => e.TwCDokId).HasColumnName("TwC_DokID");
            entity.Property(e => e.TwCMarza)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwC_Marza");
            entity.Property(e => e.TwCMarzaWstu)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwC_MarzaWStu");
            entity.Property(e => e.TwCOffset)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("TwC_Offset");
            entity.Property(e => e.TwCPunkty).HasColumnName("TwC_Punkty");
            entity.Property(e => e.TwCTwCnumer).HasColumnName("TwC_TwCNumer");
            entity.Property(e => e.TwCTwrFirma).HasColumnName("TwC_TwrFirma");
            entity.Property(e => e.TwCTwrId).HasColumnName("TwC_TwrID");
            entity.Property(e => e.TwCTwrLp).HasColumnName("TwC_TwrLp");
            entity.Property(e => e.TwCTwrNumer).HasColumnName("TwC_TwrNumer");
            entity.Property(e => e.TwCTwrTyp).HasColumnName("TwC_TwrTyp");
            entity.Property(e => e.TwCTyp).HasColumnName("TwC_Typ");
            entity.Property(e => e.TwCWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TwC_Waluta");
            entity.Property(e => e.TwCWartosc)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TwC_Wartosc");
            entity.Property(e => e.TwCWartoscZakOld)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TwC_WartoscZakOld");
            entity.Property(e => e.TwCZaokraglenie)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("TwC_Zaokraglenie");

            entity.HasOne(d => d.TwCTwr).WithMany(p => p.TwrCenies)
                .HasForeignKey(d => d.TwCTwrId)
                .HasConstraintName("FK_TwCTowar");
        });

        modelBuilder.Entity<TwrCenyZakView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TwrCenyZakView", "CDN");

            entity.Property(e => e.TwCzvTwCnumer).HasColumnName("TwCZV_TwCNumer");
            entity.Property(e => e.TwCzvTwrId).HasColumnName("TwCZV_TwrId");
            entity.Property(e => e.TwCzvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TwCZV_Waluta");
            entity.Property(e => e.TwCzvWartosc)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TwCZV_Wartosc");
        });

        modelBuilder.Entity<TwrDost>(entity =>
        {
            entity.HasKey(e => new { e.TwdTwrTyp, e.TwdTwrFirma, e.TwdTwrNumer, e.TwdKlasaKnt, e.TwdTwrLp })
                .HasName("TWD_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrDost", "CDN", tb => tb.HasTrigger("TwrDost_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.TwdKntTyp, e.TwdKntFirma, e.TwdKntNumer, e.TwdKodOrgKnt, e.TwdKodTyp, e.TwdKodFirma, e.TwdKodNumer }, "TwDKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TwdKntTyp, e.TwdKntFirma, e.TwdKntNumer, e.TwdTwrTyp, e.TwdTwrFirma, e.TwdTwrNumer }, "TwDKontrah")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwdTwrTyp).HasColumnName("TWD_TwrTyp");
            entity.Property(e => e.TwdTwrFirma).HasColumnName("TWD_TwrFirma");
            entity.Property(e => e.TwdTwrNumer).HasColumnName("TWD_TwrNumer");
            entity.Property(e => e.TwdKlasaKnt).HasColumnName("TWD_KlasaKnt");
            entity.Property(e => e.TwdTwrLp).HasColumnName("TWD_TwrLp");
            entity.Property(e => e.TwdCena)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TWD_Cena");
            entity.Property(e => e.TwdCzas).HasColumnName("TWD_Czas");
            entity.Property(e => e.TwdDataAkt).HasColumnName("TWD_DataAkt");
            entity.Property(e => e.TwdKntFirma).HasColumnName("TWD_KntFirma");
            entity.Property(e => e.TwdKntLp).HasColumnName("TWD_KntLp");
            entity.Property(e => e.TwdKntNumer).HasColumnName("TWD_KntNumer");
            entity.Property(e => e.TwdKntTyp).HasColumnName("TWD_KntTyp");
            entity.Property(e => e.TwdKodFirma).HasColumnName("TWD_KodFirma");
            entity.Property(e => e.TwdKodLp).HasColumnName("TWD_KodLp");
            entity.Property(e => e.TwdKodNumer).HasColumnName("TWD_KodNumer");
            entity.Property(e => e.TwdKodOrgKnt)
                .HasMaxLength(40)
                .HasColumnName("TWD_KodOrgKnt");
            entity.Property(e => e.TwdKodTyp).HasColumnName("TWD_KodTyp");
            entity.Property(e => e.TwdNotatki)
                .HasMaxLength(200)
                .HasColumnName("TWD_Notatki");
            entity.Property(e => e.TwdNrKursu).HasColumnName("TWD_NrKursu");
            entity.Property(e => e.TwdWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TWD_Waluta");
        });

        modelBuilder.Entity<TwrEan>(entity =>
        {
            entity.HasKey(e => e.TwETwEid)
                .HasName("TwE_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrEan", "CDN", tb => tb.HasTrigger("TwrEAN_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.TwEEan, "TwEEan").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwETwrId, e.TwEEan }, "TwETowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwETwEid).HasColumnName("TwE_TwEId");
            entity.Property(e => e.TwEDomyslny).HasColumnName("TwE_Domyslny");
            entity.Property(e => e.TwEEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TwE_EAN");
            entity.Property(e => e.TwEJm)
                .HasMaxLength(20)
                .HasColumnName("TwE_JM");
            entity.Property(e => e.TwEOpis)
                .HasMaxLength(100)
                .HasColumnName("TwE_Opis");
            entity.Property(e => e.TwETwrId).HasColumnName("TwE_TwrID");

            entity.HasOne(d => d.TwETwr).WithMany(p => p.TwrEans)
                .HasForeignKey(d => d.TwETwrId)
                .HasConstraintName("FK_TwETowar");
        });

        modelBuilder.Entity<TwrEsklep>(entity =>
        {
            entity.HasKey(e => e.TwesTwesId)
                .HasName("Twes_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrESklep", "CDN", tb => tb.HasTrigger("TwrESklep_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.TwesTwrId, "TwesTowar").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwesEsklepId, e.TwesTwrId }, "TwrESklepTwrId")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TwesEsklepId, e.TwesUdostepnij, e.TwesTwrId }, "TwrESklepUdostepnijTowar").HasFillFactor(100);

            entity.Property(e => e.TwesTwesId).HasColumnName("Twes_TwesId");
            entity.Property(e => e.TwesEsklepBezRabatu).HasColumnName("Twes_ESklepBezRabatu");
            entity.Property(e => e.TwesEsklepDataDostepnosci)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Twes_ESklepDataDostepnosci");
            entity.Property(e => e.TwesEsklepDostepnosc).HasColumnName("Twes_ESklepDostepnosc");
            entity.Property(e => e.TwesEsklepDostepnyOd).HasColumnName("Twes_ESklepDostepnyOd");
            entity.Property(e => e.TwesEsklepFlagaNagroda).HasColumnName("Twes_ESklepFlaga_Nagroda");
            entity.Property(e => e.TwesEsklepFlagaNajlepiejOceniany).HasColumnName("Twes_ESklepFlaga_NajlepiejOceniany");
            entity.Property(e => e.TwesEsklepFlagaNowosc).HasColumnName("Twes_ESklepFlaga_Nowosc");
            entity.Property(e => e.TwesEsklepFlagaProduktPolecany).HasColumnName("Twes_ESklepFlaga_ProduktPolecany");
            entity.Property(e => e.TwesEsklepFlagaProduktzGazetki).HasColumnName("Twes_ESklepFlaga_ProduktzGazetki");
            entity.Property(e => e.TwesEsklepFlagaPromocja).HasColumnName("Twes_ESklepFlaga_Promocja");
            entity.Property(e => e.TwesEsklepFlagaRekomendacjaSprzedawcy).HasColumnName("Twes_ESklepFlaga_RekomendacjaSprzedawcy");
            entity.Property(e => e.TwesEsklepFlagaSuperCena).HasColumnName("Twes_ESklepFlaga_SuperCena");
            entity.Property(e => e.TwesEsklepFlagaSuperJakosc).HasColumnName("Twes_ESklepFlaga_SuperJakosc");
            entity.Property(e => e.TwesEsklepFlagaWyprzedaz).HasColumnName("Twes_ESklepFlaga_Wyprzedaz");
            entity.Property(e => e.TwesEsklepId).HasColumnName("Twes_ESklepId");
            entity.Property(e => e.TwesEsklepKalkulacjaDostaw).HasColumnName("Twes_ESklepKalkulacjaDostaw");
            entity.Property(e => e.TwesEsklepKalkulacjaDostawWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twes_ESklepKalkulacjaDostawWartosc");
            entity.Property(e => e.TwesEsklepNieKontrolujStanow).HasColumnName("Twes_ESklepNieKontrolujStanow");
            entity.Property(e => e.TwesEsklepStatus).HasColumnName("Twes_ESklepStatus");
            entity.Property(e => e.TwesEsklepZapytajOcene).HasColumnName("Twes_ESklepZapytajOCene");
            entity.Property(e => e.TwesSynchroUdostepnij).HasColumnName("Twes_SynchroUdostepnij");
            entity.Property(e => e.TwesTwGgidnumer).HasColumnName("Twes_TwGGIDNumer");
            entity.Property(e => e.TwesTwrId).HasColumnName("Twes_TwrID");
            entity.Property(e => e.TwesUdostepnij).HasColumnName("Twes_Udostepnij");

            entity.HasOne(d => d.TwesEsklep).WithMany(p => p.TwrEskleps)
                .HasForeignKey(d => d.TwesEsklepId)
                .HasConstraintName("FK_TwesESklepStanowiska");

            entity.HasOne(d => d.TwesTwr).WithMany(p => p.TwrEskleps)
                .HasForeignKey(d => d.TwesTwrId)
                .HasConstraintName("FK_TwesTowar");
        });

        modelBuilder.Entity<TwrGrupy>(entity =>
        {
            entity.HasKey(e => e.TwGTwGid)
                .HasName("TwG_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrGrupy", "CDN", tb =>
                {
                    tb.HasTrigger("RO_TwrGrupy_InsertUpdateDelete_Trigger");
                    tb.HasTrigger("TwrGrupyInsertUpdate_CzasModyfikacji");
                    tb.HasTrigger("TwrGrupy_After_Insert_Trigger");
                    tb.HasTrigger("TwrGrupy_Delete_Trigger");
                    tb.HasTrigger("TwrLinkiDelete");
                    tb.HasTrigger("TwrLinkiInsert");
                    tb.HasTrigger("TwrLinkiUpdate");
                });

            entity.HasIndex(e => new { e.TwGGidtyp, e.TwGGidnumer, e.TwGGrOtyp, e.TwGGrOnumer }, "TwGGID").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwGGidtyp, e.TwGKod }, "TwGGIDKod").HasFillFactor(100);

            entity.HasIndex(e => e.TwGGidtyp, "TwGGIDTyp").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwGGrOtyp, e.TwGGrOnumer, e.TwGGidtyp, e.TwGKod }, "TwGKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TwGGrOtyp, e.TwGGrOnumer, e.TwGGidtyp, e.TwGNazwa, e.TwGGidnumer }, "TwGNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwGTwGid).HasColumnName("TwG_TwGID");
            entity.Property(e => e.TwGCzasModyfikacji).HasColumnName("TwG_CzasModyfikacji");
            entity.Property(e => e.TwGESklepLp).HasColumnName("TwG_eSklepLp");
            entity.Property(e => e.TwGGidfirma).HasColumnName("TwG_GIDFirma");
            entity.Property(e => e.TwGGidlp).HasColumnName("TwG_GIDLp");
            entity.Property(e => e.TwGGidnumer).HasColumnName("TwG_GIDNumer");
            entity.Property(e => e.TwGGidtyp).HasColumnName("TwG_GIDTyp");
            entity.Property(e => e.TwGGrOfirma).HasColumnName("TwG_GrOFirma");
            entity.Property(e => e.TwGGrOlp).HasColumnName("TwG_GrOLp");
            entity.Property(e => e.TwGGrOnumer).HasColumnName("TwG_GrONumer");
            entity.Property(e => e.TwGGrOtyp).HasColumnName("TwG_GrOTyp");
            entity.Property(e => e.TwGKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TwG_Kod");
            entity.Property(e => e.TwGNazwa)
                .HasMaxLength(255)
                .HasColumnName("TwG_Nazwa");
        });

        modelBuilder.Entity<TwrGrupyAtrybuty>(entity =>
        {
            entity.HasKey(e => e.TwGaTwGaid)
                .HasName("TwGA_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrGrupyAtrybuty", "CDN", tb =>
                {
                    tb.HasTrigger("TwrGrupyAtrybuty_Delete_Trigger");
                    tb.HasTrigger("TwrGrupyAtrybuty_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.TwGaDeAid, "TwGADefAtrybut").HasFillFactor(100);

            entity.HasIndex(e => e.TwGaTwGid, "TwGAGrupa").HasFillFactor(100);

            entity.Property(e => e.TwGaTwGaid).HasColumnName("TwGA_TwGAId");
            entity.Property(e => e.TwGaDabid).HasColumnName("TwGA_DABID");
            entity.Property(e => e.TwGaDeAid).HasColumnName("TwGA_DeAId");
            entity.Property(e => e.TwGaJezykId).HasColumnName("TwGA_JezykId");
            entity.Property(e => e.TwGaSourceId).HasColumnName("TwGA_SourceId");
            entity.Property(e => e.TwGaTwGid).HasColumnName("TwGA_TwGId");
            entity.Property(e => e.TwGaWartoscTxt)
                .HasMaxLength(100)
                .HasColumnName("TwGA_WartoscTxt");
        });

        modelBuilder.Entity<TwrGrupyJezykObcy>(entity =>
        {
            entity.HasKey(e => new { e.TwGjTwGid, e.TwGjJezykId })
                .HasName("TwGJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrGrupyJezykObcy", "CDN", tb => tb.HasTrigger("TwrGrupyJezykObcy_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.TwGjTwGjid, "TwGJOID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwGjTwGid).HasColumnName("TwGJ_TwGID");
            entity.Property(e => e.TwGjJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("TwGJ_JezykID");
            entity.Property(e => e.TwGjLink)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TwGJ_Link");
            entity.Property(e => e.TwGjMetaOpis)
                .HasMaxLength(320)
                .HasColumnName("TwGJ_MetaOpis");
            entity.Property(e => e.TwGjMetaSlowaKluczowe)
                .HasMaxLength(500)
                .HasColumnName("TwGJ_MetaSlowaKluczowe");
            entity.Property(e => e.TwGjMetaTytul)
                .HasMaxLength(100)
                .HasColumnName("TwGJ_MetaTytul");
            entity.Property(e => e.TwGjNazwa)
                .HasMaxLength(255)
                .HasColumnName("TwGJ_Nazwa");
            entity.Property(e => e.TwGjNazwaNag)
                .HasMaxLength(250)
                .HasDefaultValue("")
                .HasColumnName("TwGJ_NazwaNag");
            entity.Property(e => e.TwGjOpisHtml).HasColumnName("TwGJ_OpisHTML");
            entity.Property(e => e.TwGjOpisKrotki)
                .HasMaxLength(500)
                .HasColumnName("TwGJ_OpisKrotki");
            entity.Property(e => e.TwGjSzukaj)
                .HasMaxLength(512)
                .HasDefaultValue("")
                .HasColumnName("TwGJ_Szukaj");
            entity.Property(e => e.TwGjTwGjid)
                .ValueGeneratedOnAdd()
                .HasColumnName("TwGJ_TwGJID");

            entity.HasOne(d => d.TwGjTwG).WithMany(p => p.TwrGrupyJezykObcies)
                .HasForeignKey(d => d.TwGjTwGid)
                .HasConstraintName("FK_TwGJOdoTwrGrup");
        });

        modelBuilder.Entity<TwrGrupyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TwrGrupyView", "CDN");

            entity.Property(e => e.Gidnumer).HasColumnName("GIDNumer");
            entity.Property(e => e.GrOnumer).HasColumnName("GrONumer");
            entity.Property(e => e.Kod).HasMaxLength(50);
            entity.Property(e => e.Nazwa).HasMaxLength(255);
            entity.Property(e => e.Sciezka).HasMaxLength(4000);
            entity.Property(e => e.TwGid).HasColumnName("TwGId");
        });

        modelBuilder.Entity<TwrIlosci>(entity =>
        {
            entity.HasKey(e => e.TwITwIid)
                .HasName("TwI_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrIlosci", "CDN");

            entity.HasIndex(e => e.TwIData, "TwIData").HasFillFactor(100);

            entity.HasIndex(e => e.TwIMagId, "TwIMagazyn").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwIMagId, e.TwIData }, "TwIMagazynData").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwIMagId, e.TwIIlosc }, "TwIMagazynIlosc").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwITwrId, e.TwIMagId, e.TwIData }, "TwITowar")
                .IsUnique()
                .IsDescending(false, false, true)
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TwITwrId, e.TwIData }, "TwITowarData").HasFillFactor(100);

            entity.Property(e => e.TwITwIid).HasColumnName("TwI_TwIId");
            entity.Property(e => e.TwIBraki)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwI_Braki");
            entity.Property(e => e.TwIData)
                .HasColumnType("datetime")
                .HasColumnName("TwI_Data");
            entity.Property(e => e.TwIIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwI_Ilosc");
            entity.Property(e => e.TwIMagId).HasColumnName("TwI_MagId");
            entity.Property(e => e.TwIRezerwacje)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwI_Rezerwacje");
            entity.Property(e => e.TwIRezerwacjeZlecenia)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwI_RezerwacjeZlecenia");
            entity.Property(e => e.TwITwrId).HasColumnName("TwI_TwrId");
            entity.Property(e => e.TwIWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwI_Wartosc");
            entity.Property(e => e.TwIZamowienia)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwI_Zamowienia");

            entity.HasOne(d => d.TwIMag).WithMany(p => p.TwrIloscis)
                .HasForeignKey(d => d.TwIMagId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwIMagazyn");

            entity.HasOne(d => d.TwITwr).WithMany(p => p.TwrIloscis)
                .HasForeignKey(d => d.TwITwrId)
                .HasConstraintName("FK_TwITowar");
        });

        modelBuilder.Entity<TwrJezykObcy>(entity =>
        {
            entity.HasKey(e => new { e.TwrJTwrId, e.TwrJJezykId, e.TwrJESklepId })
                .HasName("TwrJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrJezykObcy", "CDN");

            entity.HasIndex(e => e.TwrJTwrJid, "TwrJOID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwrJTwrId).HasColumnName("TwrJ_TwrID");
            entity.Property(e => e.TwrJJezykId)
                .HasDefaultValue((short)1)
                .HasColumnName("TwrJ_JezykID");
            entity.Property(e => e.TwrJESklepId).HasColumnName("TwrJ_eSklepID");
            entity.Property(e => e.TwrJLink)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("TwrJ_Link");
            entity.Property(e => e.TwrJMetaOpis)
                .HasMaxLength(320)
                .HasColumnName("TwrJ_MetaOpis");
            entity.Property(e => e.TwrJMetaSlowaKluczowe)
                .HasMaxLength(500)
                .HasColumnName("TwrJ_MetaSlowaKluczowe");
            entity.Property(e => e.TwrJMetaTytul)
                .HasMaxLength(100)
                .HasColumnName("TwrJ_MetaTytul");
            entity.Property(e => e.TwrJNazwa)
                .HasMaxLength(255)
                .HasColumnName("TwrJ_Nazwa");
            entity.Property(e => e.TwrJNazwaHtml)
                .HasMaxLength(255)
                .HasColumnName("TwrJ_NazwaHTML");
            entity.Property(e => e.TwrJOpis).HasColumnName("TwrJ_Opis");
            entity.Property(e => e.TwrJOpisHtml).HasColumnName("TwrJ_OpisHTML");
            entity.Property(e => e.TwrJOpisKrotki)
                .HasMaxLength(500)
                .HasColumnName("TwrJ_OpisKrotki");
            entity.Property(e => e.TwrJSzukaj)
                .HasMaxLength(512)
                .HasDefaultValue("")
                .HasColumnName("TwrJ_Szukaj");
            entity.Property(e => e.TwrJTwrJid)
                .ValueGeneratedOnAdd()
                .HasColumnName("TwrJ_TwrJID");

            entity.HasOne(d => d.TwrJTwr).WithMany(p => p.TwrJezykObcies)
                .HasForeignKey(d => d.TwrJTwrId)
                .HasConstraintName("FK_TwrJOdoTowary");
        });

        modelBuilder.Entity<TwrJm>(entity =>
        {
            entity.HasKey(e => new { e.TwJTwrTyp, e.TwJTwrFirma, e.TwJTwrNumer, e.TwJTwrLp })
                .HasName("TwJ_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrJm", "CDN", tb => tb.HasTrigger("TwrJm_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.TwJKcaTyp, e.TwJKcaFirma, e.TwJKcaNumer }, "TwJKaucja").HasFillFactor(100);

            entity.HasIndex(e => e.TwJEan, "TwjEAN").HasFillFactor(100);

            entity.Property(e => e.TwJTwrTyp).HasColumnName("TwJ_TwrTyp");
            entity.Property(e => e.TwJTwrFirma).HasColumnName("TwJ_TwrFirma");
            entity.Property(e => e.TwJTwrNumer).HasColumnName("TwJ_TwrNumer");
            entity.Property(e => e.TwJTwrLp).HasColumnName("TwJ_TwrLp");
            entity.Property(e => e.TwJCalkowita).HasColumnName("TwJ_Calkowita");
            entity.Property(e => e.TwJEan)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TwJ_EAN");
            entity.Property(e => e.TwJJmFormat).HasColumnName("TwJ_JmFormat");
            entity.Property(e => e.TwJJmZ)
                .HasMaxLength(8)
                .HasColumnName("TwJ_JmZ");
            entity.Property(e => e.TwJKcaFirma).HasColumnName("TwJ_KcaFirma");
            entity.Property(e => e.TwJKcaLp).HasColumnName("TwJ_KcaLp");
            entity.Property(e => e.TwJKcaNumer).HasColumnName("TwJ_KcaNumer");
            entity.Property(e => e.TwJKcaTyp).HasColumnName("TwJ_KcaTyp");
            entity.Property(e => e.TwJObjetoscL)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TwJ_ObjetoscL");
            entity.Property(e => e.TwJObjetoscM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TwJ_ObjetoscM");
            entity.Property(e => e.TwJObowiazek).HasColumnName("TwJ_Obowiazek");
            entity.Property(e => e.TwJProg)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TwJ_Prog");
            entity.Property(e => e.TwJPrzeliczL)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwJ_PrzeliczL");
            entity.Property(e => e.TwJPrzeliczM)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwJ_PrzeliczM");
            entity.Property(e => e.TwJTypJm).HasColumnName("TwJ_TypJm");
            entity.Property(e => e.TwJWaga)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("TwJ_Waga");
            entity.Property(e => e.TwJWagaBrutto)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("TwJ_WagaBrutto");
            entity.Property(e => e.TwJWjm)
                .HasMaxLength(5)
                .HasColumnName("TwJ_WJm");
            entity.Property(e => e.TwJWjmBrutto)
                .HasMaxLength(5)
                .HasColumnName("TwJ_WJmBrutto");
            entity.Property(e => e.TwJWyliczPrzySpr).HasColumnName("TwJ_WyliczPrzySpr");
        });

        modelBuilder.Entity<TwrJmz>(entity =>
        {
            entity.HasKey(e => e.TwJzTwJzid)
                .HasName("TwJZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrJMZ", "CDN", tb =>
                {
                    tb.HasTrigger("TwrJMZ_Delete_Trigger");
                    tb.HasTrigger("TwrJMZ_INSERTUPDATE_Trigger");
                });

            entity.HasIndex(e => new { e.TwJzTwrId, e.TwJzJm, e.TwJzESklepId }, "TwJZTowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwJzTwJzid).HasColumnName("TwJZ_TwJZId");
            entity.Property(e => e.TwJzCenaJednostkowa).HasColumnName("TwJZ_CenaJednostkowa");
            entity.Property(e => e.TwJzDlugCm).HasColumnName("TwJZ_DlugCm");
            entity.Property(e => e.TwJzESklepDomyslna).HasColumnName("TwJZ_eSklepDomyslna");
            entity.Property(e => e.TwJzESklepId).HasColumnName("TwJZ_eSklepID");
            entity.Property(e => e.TwJzJm)
                .HasMaxLength(20)
                .HasColumnName("TwJZ_JM");
            entity.Property(e => e.TwJzJmprzelicznikL)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwJZ_JMPrzelicznikL");
            entity.Property(e => e.TwJzJmprzelicznikM)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("TwJZ_JMPrzelicznikM");
            entity.Property(e => e.TwJzLp).HasColumnName("TwJZ_Lp");
            entity.Property(e => e.TwJzSzerCm).HasColumnName("TwJZ_SzerCm");
            entity.Property(e => e.TwJzTwrId).HasColumnName("TwJZ_TwrID");
            entity.Property(e => e.TwJzWysCm).HasColumnName("TwJZ_WysCm");

            entity.HasOne(d => d.TwJzTwr).WithMany(p => p.TwrJmzs)
                .HasForeignKey(d => d.TwJzTwrId)
                .HasConstraintName("FK_TwJZTowar");
        });

        modelBuilder.Entity<TwrKarty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TwrKarty", "CDN");

            entity.Property(e => e.TwrAkcyza).HasColumnName("Twr_Akcyza");
            entity.Property(e => e.TwrAktywna).HasColumnName("Twr_Aktywna");
            entity.Property(e => e.TwrAtrybut1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Atrybut1");
            entity.Property(e => e.TwrAtrybut2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Atrybut2");
            entity.Property(e => e.TwrAtrybut3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Atrybut3");
            entity.Property(e => e.TwrAutoZam).HasColumnName("Twr_AutoZam");
            entity.Property(e => e.TwrBezRabatu).HasColumnName("Twr_BezRabatu");
            entity.Property(e => e.TwrBlokada).HasColumnName("Twr_Blokada");
            entity.Property(e => e.TwrCckfirma).HasColumnName("Twr_CCKFirma");
            entity.Property(e => e.TwrCcklp).HasColumnName("Twr_CCKLp");
            entity.Property(e => e.TwrCcknumer).HasColumnName("Twr_CCKNumer");
            entity.Property(e => e.TwrCcktyp).HasColumnName("Twr_CCKTyp");
            entity.Property(e => e.TwrCel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Cel");
            entity.Property(e => e.TwrCenaSpr).HasColumnName("Twr_CenaSpr");
            entity.Property(e => e.TwrCertyfikat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Certyfikat");
            entity.Property(e => e.TwrClo).HasColumnName("Twr_Clo");
            entity.Property(e => e.TwrCzasDst).HasColumnName("Twr_CzasDst");
            entity.Property(e => e.TwrDstDomyslny).HasColumnName("Twr_DstDomyslny");
            entity.Property(e => e.TwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Twr_Ean");
            entity.Property(e => e.TwrEdycjaNazwy).HasColumnName("Twr_EdycjaNazwy");
            entity.Property(e => e.TwrFormat1).HasColumnName("Twr_Format1");
            entity.Property(e => e.TwrFormat2).HasColumnName("Twr_Format2");
            entity.Property(e => e.TwrFormat3).HasColumnName("Twr_Format3");
            entity.Property(e => e.TwrFppkod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_FPPKod");
            entity.Property(e => e.TwrGidfirma).HasColumnName("Twr_GIDFirma");
            entity.Property(e => e.TwrGidlp).HasColumnName("Twr_GIDLp");
            entity.Property(e => e.TwrGidnumer).HasColumnName("Twr_GIDNumer");
            entity.Property(e => e.TwrGidtyp).HasColumnName("Twr_GIDTyp");
            entity.Property(e => e.TwrGrupaPod)
                .HasMaxLength(1)
                .HasColumnName("Twr_GrupaPod");
            entity.Property(e => e.TwrGrupaPodSpr)
                .HasMaxLength(1)
                .HasColumnName("Twr_GrupaPodSpr");
            entity.Property(e => e.TwrIloscAzam).HasColumnName("Twr_IloscAZam");
            entity.Property(e => e.TwrIloscMax)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_IloscMax");
            entity.Property(e => e.TwrIloscMin)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_IloscMin");
            entity.Property(e => e.TwrIloscZam)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_IloscZam");
            entity.Property(e => e.TwrJm)
                .HasMaxLength(20)
                .HasColumnName("Twr_Jm");
            entity.Property(e => e.TwrJmDomyslna).HasColumnName("Twr_JmDomyslna");
            entity.Property(e => e.TwrJmFormat).HasColumnName("Twr_JmFormat");
            entity.Property(e => e.TwrJmdomyslnaZak).HasColumnName("TWR_JMDomyslnaZak");
            entity.Property(e => e.TwrKatalog)
                .HasMaxLength(40)
                .HasColumnName("Twr_Katalog");
            entity.Property(e => e.TwrKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Twr_Kod");
            entity.Property(e => e.TwrKodFormat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_KodFormat");
            entity.Property(e => e.TwrKoncesja).HasColumnName("Twr_Koncesja");
            entity.Property(e => e.TwrKontaktJc).HasColumnName("Twr_KontaktJC");
            entity.Property(e => e.TwrKontaktTyp).HasColumnName("Twr_KontaktTyp");
            entity.Property(e => e.TwrKontaktZa).HasColumnName("Twr_KontaktZa");
            entity.Property(e => e.TwrKonto1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Konto1");
            entity.Property(e => e.TwrKonto2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Konto2");
            entity.Property(e => e.TwrKonto3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Konto3");
            entity.Property(e => e.TwrKopiujOpis).HasColumnName("Twr_KopiujOpis");
            entity.Property(e => e.TwrKosztUslugi)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("Twr_KosztUslugi");
            entity.Property(e => e.TwrKosztUtyp).HasColumnName("Twr_KosztUTyp");
            entity.Property(e => e.TwrLastModC).HasColumnName("Twr_LastModC");
            entity.Property(e => e.TwrLastModL).HasColumnName("Twr_LastModL");
            entity.Property(e => e.TwrLastModO).HasColumnName("Twr_LastModO");
            entity.Property(e => e.TwrLicencja).HasColumnName("Twr_Licencja");
            entity.Property(e => e.TwrMagFirma).HasColumnName("Twr_MagFirma");
            entity.Property(e => e.TwrMagLp).HasColumnName("Twr_MagLp");
            entity.Property(e => e.TwrMagNumer).HasColumnName("Twr_MagNumer");
            entity.Property(e => e.TwrMagTyp).HasColumnName("Twr_MagTyp");
            entity.Property(e => e.TwrMarzaMin)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_MarzaMin");
            entity.Property(e => e.TwrNazwa)
                .HasMaxLength(255)
                .HasColumnName("Twr_Nazwa");
            entity.Property(e => e.TwrNazwa1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Nazwa1");
            entity.Property(e => e.TwrNotowania).HasColumnName("Twr_Notowania");
            entity.Property(e => e.TwrObjetoscL).HasColumnName("Twr_ObjetoscL");
            entity.Property(e => e.TwrObjetoscM).HasColumnName("Twr_ObjetoscM");
            entity.Property(e => e.TwrOkresowy).HasColumnName("Twr_Okresowy");
            entity.Property(e => e.TwrOpeFirma).HasColumnName("Twr_OpeFirma");
            entity.Property(e => e.TwrOpeFirmaM).HasColumnName("Twr_OpeFirmaM");
            entity.Property(e => e.TwrOpeLp).HasColumnName("Twr_OpeLp");
            entity.Property(e => e.TwrOpeLpM).HasColumnName("Twr_OpeLpM");
            entity.Property(e => e.TwrOpeNumer).HasColumnName("Twr_OpeNumer");
            entity.Property(e => e.TwrOpeNumerM).HasColumnName("Twr_OpeNumerM");
            entity.Property(e => e.TwrOpeTyp).HasColumnName("Twr_OpeTyp");
            entity.Property(e => e.TwrOpeTypM).HasColumnName("Twr_OpeTypM");
            entity.Property(e => e.TwrPcn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_PCN");
            entity.Property(e => e.TwrPodatekImp).HasColumnName("Twr_PodatekImp");
            entity.Property(e => e.TwrPolozenie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Polozenie");
            entity.Property(e => e.TwrPrcFirma).HasColumnName("Twr_PrcFirma");
            entity.Property(e => e.TwrPrcLp).HasColumnName("Twr_PrcLp");
            entity.Property(e => e.TwrPrcNumer).HasColumnName("Twr_PrcNumer");
            entity.Property(e => e.TwrPrcTyp).HasColumnName("Twr_PrcTyp");
            entity.Property(e => e.TwrPrdFirma).HasColumnName("Twr_PrdFirma");
            entity.Property(e => e.TwrPrdLp).HasColumnName("Twr_PrdLp");
            entity.Property(e => e.TwrPrdNumer).HasColumnName("Twr_PrdNumer");
            entity.Property(e => e.TwrPrdTyp).HasColumnName("Twr_PrdTyp");
            entity.Property(e => e.TwrProg).HasColumnName("Twr_Prog");
            entity.Property(e => e.TwrPunkty).HasColumnName("Twr_Punkty");
            entity.Property(e => e.TwrRozliczMag).HasColumnName("Twr_RozliczMag");
            entity.Property(e => e.TwrSprzedaz).HasColumnName("Twr_Sprzedaz");
            entity.Property(e => e.TwrStanInfoLimit).HasColumnName("Twr_StanInfoLimit");
            entity.Property(e => e.TwrStanInfoMax).HasColumnName("Twr_StanInfoMax");
            entity.Property(e => e.TwrStanInfoProcent).HasColumnName("Twr_StanInfoProcent");
            entity.Property(e => e.TwrSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Twr_Sww");
            entity.Property(e => e.TwrTerminZwrotu).HasColumnName("Twr_TerminZwrotu");
            entity.Property(e => e.TwrTyp).HasColumnName("Twr_Typ");
            entity.Property(e => e.TwrUbytek).HasColumnName("Twr_Ubytek");
            entity.Property(e => e.TwrUpust).HasColumnName("Twr_Upust");
            entity.Property(e => e.TwrUpustData).HasColumnName("Twr_UpustData");
            entity.Property(e => e.TwrUpustDataDo).HasColumnName("Twr_UpustDataDo");
            entity.Property(e => e.TwrUpustDataOd).HasColumnName("Twr_UpustDataOd");
            entity.Property(e => e.TwrUpustGodz).HasColumnName("Twr_UpustGodz");
            entity.Property(e => e.TwrUpustGodzDo).HasColumnName("Twr_UpustGodzDo");
            entity.Property(e => e.TwrUpustGodzOd).HasColumnName("Twr_UpustGodzOd");
            entity.Property(e => e.TwrUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("Twr_URL");
            entity.Property(e => e.TwrWaga).HasColumnName("Twr_Waga");
            entity.Property(e => e.TwrWagaBrutto).HasColumnName("Twr_WagaBrutto");
            entity.Property(e => e.TwrWartosc1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Wartosc1");
            entity.Property(e => e.TwrWartosc2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Wartosc2");
            entity.Property(e => e.TwrWartosc3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Wartosc3");
            entity.Property(e => e.TwrWarunek)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_Warunek");
            entity.Property(e => e.TwrWcenniku).HasColumnName("Twr_WCenniku");
            entity.Property(e => e.TwrWjm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_WJm");
            entity.Property(e => e.TwrWjmBrutto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Twr_WJmBrutto");
            entity.Property(e => e.TwrWsk).HasColumnName("Twr_Wsk");
            entity.Property(e => e.TwrZakup).HasColumnName("Twr_Zakup");
            entity.Property(e => e.TwrZakupAutoryz).HasColumnName("Twr_ZakupAutoryz");
        });

        modelBuilder.Entity<TwrKntAtrybuty>(entity =>
        {
            entity.HasKey(e => e.TkaTkaid)
                .HasName("TKA_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrKntAtrybuty", "CDN");

            entity.HasIndex(e => new { e.TkaPodmiotId, e.TkaPodmiotTyp }, "TKAPodmiot").HasFillFactor(100);

            entity.HasIndex(e => e.TkaTwAid, "TKATwrAtrybut").HasFillFactor(100);

            entity.Property(e => e.TkaTkaid).HasColumnName("TKA_TKAId");
            entity.Property(e => e.TkaPodmiotId).HasColumnName("TKA_PodmiotId");
            entity.Property(e => e.TkaPodmiotTyp).HasColumnName("TKA_PodmiotTyp");
            entity.Property(e => e.TkaTwAid).HasColumnName("TKA_TwAId");
            entity.Property(e => e.TkaWartoscTxt)
                .HasMaxLength(100)
                .HasColumnName("TKA_WartoscTxt");

            entity.HasOne(d => d.TkaTwA).WithMany(p => p.TwrKntAtrybuties)
                .HasForeignKey(d => d.TkaTwAid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TKATwrAtrybut");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.TwrKntAtrybuties)
                .HasForeignKey(d => new { d.TkaPodmiotId, d.TkaPodmiotTyp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TKAPodmiot");
        });

        modelBuilder.Entity<TwrLinki>(entity =>
        {
            entity.HasKey(e => new { e.TwLGidtyp, e.TwLGrOnumer, e.TwLGidnumer })
                .HasName("TwL_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrLinki", "CDN");

            entity.Property(e => e.TwLGidtyp).HasColumnName("TwL_GIDTyp");
            entity.Property(e => e.TwLGrOnumer).HasColumnName("TwL_GrONumer");
            entity.Property(e => e.TwLGidnumer).HasColumnName("TwL_GIDNumer");
            entity.Property(e => e.TwLGidfirma).HasColumnName("TwL_GIDFirma");
            entity.Property(e => e.TwLGidlp).HasColumnName("TwL_GIDLp");
            entity.Property(e => e.TwLGrOfirma).HasColumnName("TwL_GrOFirma");
            entity.Property(e => e.TwLGrOlp).HasColumnName("TwL_GrOLp");
            entity.Property(e => e.TwLGrOtyp).HasColumnName("TwL_GrOTyp");
            entity.Property(e => e.TwLLiczbaPowtorzen).HasColumnName("TwL_LiczbaPowtorzen");
            entity.Property(e => e.TwLLisc).HasColumnName("TwL_Lisc");
            entity.Property(e => e.TwLTstampDataMod).HasColumnName("TwL_TStampDataMod");
        });

        modelBuilder.Entity<TwrOcrmapowanie>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TwrOCRMapowanie", "CDN");

            entity.Property(e => e.TwOmTwrId).HasColumnName("TwOM_TwrId");
            entity.Property(e => e.TwOmTwrOcrnazwa)
                .HasMaxLength(256)
                .HasColumnName("TwOM_TwrOCRNazwa");

            entity.HasOne(d => d.TwOmTwr).WithMany()
                .HasForeignKey(d => d.TwOmTwrId)
                .HasConstraintName("FK_TwOMTwrId");
        });

        modelBuilder.Entity<TwrPromocje>(entity =>
        {
            entity.HasKey(e => e.TprId).HasName("TPR_Primary");

            entity.ToTable("TwrPromocje", "CDN");

            entity.HasIndex(e => new { e.TprPrmId, e.TprZstId, e.TprLp }, "TprPrm");

            entity.HasIndex(e => new { e.TprTwrTyp, e.TprTwrNumer, e.TprTwgTyp, e.TprTwgNumer, e.TprTyp, e.TprZstId, e.TprProg, e.TprPrmId }, "TprTowar").IsUnique();

            entity.Property(e => e.TprId).HasColumnName("TPR_Id");
            entity.Property(e => e.TprFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TPR_FlagaNB");
            entity.Property(e => e.TprLp).HasColumnName("TPR_LP");
            entity.Property(e => e.TprNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TPR_Notatki");
            entity.Property(e => e.TprPrmId).HasColumnName("TPR_PrmId");
            entity.Property(e => e.TprProg)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TPR_Prog");
            entity.Property(e => e.TprRodzajCeny).HasColumnName("TPR_RodzajCeny");
            entity.Property(e => e.TprTwgFirma).HasColumnName("TPR_TwgFirma");
            entity.Property(e => e.TprTwgLp).HasColumnName("TPR_TwgLp");
            entity.Property(e => e.TprTwgNumer).HasColumnName("TPR_TwgNumer");
            entity.Property(e => e.TprTwgTyp).HasColumnName("TPR_TwgTyp");
            entity.Property(e => e.TprTwrFirma).HasColumnName("TPR_TwrFirma");
            entity.Property(e => e.TprTwrLp).HasColumnName("TPR_TwrLp");
            entity.Property(e => e.TprTwrNumer).HasColumnName("TPR_TwrNumer");
            entity.Property(e => e.TprTwrTyp).HasColumnName("TPR_TwrTyp");
            entity.Property(e => e.TprTyp).HasColumnName("TPR_Typ");
            entity.Property(e => e.TprWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TPR_Waluta");
            entity.Property(e => e.TprWartosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TPR_Wartosc");
            entity.Property(e => e.TprZstId).HasColumnName("TPR_ZstID");

            entity.HasOne(d => d.TprPrm).WithMany(p => p.TwrPromocjes)
                .HasForeignKey(d => d.TprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TprPrm");
        });

        modelBuilder.Entity<TwrPrzeceny>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TwrPrzeceny", "CDN");

            entity.HasIndex(e => new { e.TpcTwrId, e.TpcTwCnumer, e.TpcData }, "TPCTowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TpcData)
                .HasColumnType("datetime")
                .HasColumnName("TPC_Data");
            entity.Property(e => e.TpcTwCnumer).HasColumnName("TPC_TwCNumer");
            entity.Property(e => e.TpcTwrId).HasColumnName("TPC_TwrID");
            entity.Property(e => e.TpcWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TPC_Waluta");
            entity.Property(e => e.TpcWartosc)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TPC_Wartosc");

            entity.HasOne(d => d.TpcTwr).WithMany()
                .HasForeignKey(d => d.TpcTwrId)
                .HasConstraintName("FK_TPCTowar");
        });

        modelBuilder.Entity<TwrStawkiVat>(entity =>
        {
            entity.HasKey(e => e.TwVTwVid)
                .HasName("TwV_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrStawkiVAT", "CDN");

            entity.HasIndex(e => new { e.TwVTwrId, e.TwVKodKraju }, "TwVTowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwVTwVid).HasColumnName("TwV_TwVId");
            entity.Property(e => e.TwVFlaga).HasColumnName("TwV_Flaga");
            entity.Property(e => e.TwVKodKraju)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TwV_KodKraju");
            entity.Property(e => e.TwVStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwV_Stawka");
            entity.Property(e => e.TwVTwrId).HasColumnName("TwV_TwrID");
            entity.Property(e => e.TwVZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwV_Zrodlowa");

            entity.HasOne(d => d.TwVTwr).WithMany(p => p.TwrStawkiVats)
                .HasForeignKey(d => d.TwVTwrId)
                .HasConstraintName("FK_TwVTowar");
        });

        modelBuilder.Entity<TwrTsmodEsklep>(entity =>
        {
            entity.HasKey(e => e.TwTsTwrId)
                .HasName("TwTS_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrTSModEsklep", "CDN");

            entity.Property(e => e.TwTsTwrId)
                .ValueGeneratedNever()
                .HasColumnName("TwTS_TwrId");
            entity.Property(e => e.TwTsTsModEsklep)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("TwTS_TS_ModESklep");

            entity.HasOne(d => d.TwTsTwr).WithOne(p => p.TwrTsmodEsklep)
                .HasForeignKey<TwrTsmodEsklep>(d => d.TwTsTwrId)
                .HasConstraintName("FK_TwTSTwrId");
        });

        modelBuilder.Entity<TwrUpusty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TwrUpusty", "CDN");

            entity.Property(e => e.TwUUpust)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwU_Upust");
            entity.Property(e => e.TwuProg)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twu_PRog");
            entity.Property(e => e.TwuTwrFirma).HasColumnName("Twu_TwrFirma");
            entity.Property(e => e.TwuTwrLp).HasColumnName("Twu_TwrLp");
            entity.Property(e => e.TwuTwrNumer).HasColumnName("Twu_TwrNumer");
            entity.Property(e => e.TwuTwrTyp).HasColumnName("Twu_TwrTyp");
        });

        modelBuilder.Entity<TwrZasoby>(entity =>
        {
            entity.HasKey(e => e.TwZTwZid)
                .HasName("TwZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("TwrZasoby", "CDN");

            entity.HasIndex(e => e.TwZMagId, "TwZMagazyn").HasFillFactor(100);

            entity.HasIndex(e => new { e.TwZTwrId, e.TwZMagId, e.TwZData, e.TwZTrSidDost }, "TwZTowar")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.TwZTrSidDost, e.TwZMagId, e.TwZTwrId }, "TwZTraSElem")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwZTwZid).HasColumnName("TwZ_TwZId");
            entity.Property(e => e.TwZCena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TwZ_Cena");
            entity.Property(e => e.TwZData)
                .HasColumnType("datetime")
                .HasColumnName("TwZ_Data");
            entity.Property(e => e.TwZIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZ_Ilosc");
            entity.Property(e => e.TwZMagId).HasColumnName("TwZ_MagId");
            entity.Property(e => e.TwZQuan)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZ_Quan");
            entity.Property(e => e.TwZTrSidDost).HasColumnName("TwZ_TrSIdDost");
            entity.Property(e => e.TwZTwrId).HasColumnName("TwZ_TwrId");
            entity.Property(e => e.TwZWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwZ_Wartosc");

            entity.HasOne(d => d.TwZMag).WithMany(p => p.TwrZasobies)
                .HasForeignKey(d => d.TwZMagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TwZMagazyn");

            entity.HasOne(d => d.TwZTwr).WithMany(p => p.TwrZasobies)
                .HasForeignKey(d => d.TwZTwrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TwZTowar");
        });

        modelBuilder.Entity<TypNieobec>(entity =>
        {
            entity.HasKey(e => e.TnbTnbId)
                .HasName("TNB_Primary")
                .HasFillFactor(100);

            entity.ToTable("TypNieobec", "CDN", tb =>
                {
                    tb.HasTrigger("TypNieobec_Delete_Trigger");
                    tb.HasTrigger("TypNieobec_InsertUpdate_Trigger");
                    tb.HasTrigger("TypNieobec_Update_Trigger");
                });

            entity.HasIndex(e => e.TnbLnbId, "TNBLnbId").HasFillFactor(100);

            entity.HasIndex(e => e.TnbNazwa, "TNBNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TnbPdzId, "TNBPdzLink").HasFillFactor(100);

            entity.HasIndex(e => e.TnbTnkId, "TNBTnkLink").HasFillFactor(100);

            entity.HasIndex(e => e.TnbTwpId, "TNBTwpId").HasFillFactor(100);

            entity.HasIndex(e => e.TnbTyuId, "TNBTyuLink").HasFillFactor(100);

            entity.Property(e => e.TnbTnbId).HasColumnName("TNB_TnbId");
            entity.Property(e => e.TnbAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TNB_Akronim");
            entity.Property(e => e.TnbImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TNB_ImportRowId");
            entity.Property(e => e.TnbLnbId).HasColumnName("TNB_LnbId");
            entity.Property(e => e.TnbNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TNB_Nazwa");
            entity.Property(e => e.TnbNieaktywny).HasColumnName("TNB_Nieaktywny");
            entity.Property(e => e.TnbOpeModId).HasColumnName("TNB_OpeModId");
            entity.Property(e => e.TnbOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TNB_OpeModKod");
            entity.Property(e => e.TnbOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TNB_OpeModNazwisko");
            entity.Property(e => e.TnbOpeZalId).HasColumnName("TNB_OpeZalId");
            entity.Property(e => e.TnbOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TNB_OpeZalKod");
            entity.Property(e => e.TnbOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TNB_OpeZalNazwisko");
            entity.Property(e => e.TnbPdzId).HasColumnName("TNB_PdzId");
            entity.Property(e => e.TnbPlanowany).HasColumnName("TNB_Planowany");
            entity.Property(e => e.TnbPoZatwierdzeniu).HasColumnName("TNB_PoZatwierdzeniu");
            entity.Property(e => e.TnbPomnCzasPracy).HasColumnName("TNB_PomnCzasPracy");
            entity.Property(e => e.TnbPomnCzasRna).HasColumnName("TNB_PomnCzasRNA");
            entity.Property(e => e.TnbPomnLimitUrlopu).HasColumnName("TNB_PomnLimitUrlopu");
            entity.Property(e => e.TnbPomnStazPracy).HasColumnName("TNB_PomnStazPracy");
            entity.Property(e => e.TnbPomniejszWynagr).HasColumnName("TNB_PomniejszWynagr");
            entity.Property(e => e.TnbPomniejszenie).HasColumnName("TNB_Pomniejszenie");
            entity.Property(e => e.TnbRozliczDni).HasColumnName("TNB_RozliczDni");
            entity.Property(e => e.TnbStaModId).HasColumnName("TNB_StaModId");
            entity.Property(e => e.TnbStaZalId).HasColumnName("TNB_StaZalId");
            entity.Property(e => e.TnbStandardowy).HasColumnName("TNB_Standardowy");
            entity.Property(e => e.TnbTnkId).HasColumnName("TNB_TnkId");
            entity.Property(e => e.TnbTsMod)
                .HasColumnType("datetime")
                .HasColumnName("TNB_TS_Mod");
            entity.Property(e => e.TnbTsZal)
                .HasColumnType("datetime")
                .HasColumnName("TNB_TS_Zal");
            entity.Property(e => e.TnbTwpId).HasColumnName("TNB_TwpId");
            entity.Property(e => e.TnbTyp).HasColumnName("TNB_Typ");
            entity.Property(e => e.TnbTypRozliczenia).HasColumnName("TNB_TypRozliczenia");
            entity.Property(e => e.TnbTyuId).HasColumnName("TNB_TyuId");
            entity.Property(e => e.TnbWliczOkresPracyNaucz).HasColumnName("TNB_WliczOkresPracyNaucz");
            entity.Property(e => e.TnbWycofany).HasColumnName("TNB_Wycofany");

            entity.HasOne(d => d.TnbLnb).WithMany(p => p.TypNieobecs)
                .HasForeignKey(d => d.TnbLnbId)
                .HasConstraintName("FK_TNBLnbId");

            entity.HasOne(d => d.TnbPdz).WithMany(p => p.TypNieobecs)
                .HasForeignKey(d => d.TnbPdzId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TNBPdzLink");

            entity.HasOne(d => d.TnbTnk).WithMany(p => p.TypNieobecs)
                .HasForeignKey(d => d.TnbTnkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TNBTnkLink");

            entity.HasOne(d => d.TnbTwp).WithMany(p => p.TypNieobecs)
                .HasForeignKey(d => d.TnbTwpId)
                .HasConstraintName("FK_TNBTwpId");

            entity.HasOne(d => d.TnbTyu).WithMany(p => p.TypNieobecs)
                .HasForeignKey(d => d.TnbTyuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TNBTyuLink");
        });

        modelBuilder.Entity<TypNieobecKartaPracy>(entity =>
        {
            entity.HasKey(e => e.TnkTnkId)
                .HasName("TNK_Primary")
                .HasFillFactor(100);

            entity.ToTable("TypNieobecKartaPracy", "CDN");

            entity.Property(e => e.TnkTnkId).HasColumnName("TNK_TnkId");
            entity.Property(e => e.TnkAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TNK_Akronim");
            entity.Property(e => e.TnkNazwa)
                .HasMaxLength(40)
                .HasColumnName("TNK_Nazwa");
            entity.Property(e => e.TnkSortOrder).HasColumnName("TNK_SortOrder");
        });

        modelBuilder.Entity<TypWyplataGrupa>(entity =>
        {
            entity.HasKey(e => e.TwyTwyId)
                .HasName("TWY_Primary")
                .HasFillFactor(100);

            entity.ToTable("TypWyplataGrupa", "CDN");

            entity.HasIndex(e => e.TwyNazwa, "TWYNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwyTwyId).HasColumnName("TWY_TwyId");
            entity.Property(e => e.TwyNazwa)
                .HasMaxLength(40)
                .HasColumnName("TWY_Nazwa");
            entity.Property(e => e.TwyNieaktywna).HasColumnName("TWY_Nieaktywna");
            entity.Property(e => e.TwyOpeModId).HasColumnName("TWY_OpeModId");
            entity.Property(e => e.TwyOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWY_OpeModKod");
            entity.Property(e => e.TwyOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TWY_OpeModNazwisko");
            entity.Property(e => e.TwyOpeZalId).HasColumnName("TWY_OpeZalId");
            entity.Property(e => e.TwyOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWY_OpeZalKod");
            entity.Property(e => e.TwyOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TWY_OpeZalNazwisko");
            entity.Property(e => e.TwyStaModId).HasColumnName("TWY_StaModId");
            entity.Property(e => e.TwyStaZalId).HasColumnName("TWY_StaZalId");
            entity.Property(e => e.TwyTsMod)
                .HasColumnType("datetime")
                .HasColumnName("TWY_TS_Mod");
            entity.Property(e => e.TwyTsZal)
                .HasColumnType("datetime")
                .HasColumnName("TWY_TS_Zal");
        });

        modelBuilder.Entity<TypWyplataGrupaSkladniki>(entity =>
        {
            entity.HasKey(e => e.TwkTwkId)
                .HasName("TWK_Primary")
                .HasFillFactor(100);

            entity.ToTable("TypWyplataGrupaSkladniki", "CDN");

            entity.HasIndex(e => e.TwkTwpId, "TWKTwpLink").HasFillFactor(100);

            entity.HasIndex(e => e.TwkTwyId, "TWKTwyLink").HasFillFactor(100);

            entity.Property(e => e.TwkTwkId).HasColumnName("TWK_TwkId");
            entity.Property(e => e.TwkTwpId).HasColumnName("TWK_TwpId");
            entity.Property(e => e.TwkTwyId).HasColumnName("TWK_TwyId");

            entity.HasOne(d => d.TwkTwp).WithMany(p => p.TypWyplataGrupaSkladnikis)
                .HasForeignKey(d => d.TwkTwpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TWKTwpLink");

            entity.HasOne(d => d.TwkTwy).WithMany(p => p.TypWyplataGrupaSkladnikis)
                .HasForeignKey(d => d.TwkTwyId)
                .HasConstraintName("FK_TWKTwyLink");
        });

        modelBuilder.Entity<TypWyplataStaz>(entity =>
        {
            entity.HasKey(e => e.TwsTwsId)
                .HasName("TWS_Primary")
                .HasFillFactor(100);

            entity.ToTable("TypWyplataStaz", "CDN");

            entity.HasIndex(e => e.TwsTwpId, "TWSTwpLink").HasFillFactor(100);

            entity.Property(e => e.TwsTwsId).HasColumnName("TWS_TwsId");
            entity.Property(e => e.TwsProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWS_Procent");
            entity.Property(e => e.TwsStaz).HasColumnName("TWS_Staz");
            entity.Property(e => e.TwsTwpId).HasColumnName("TWS_TwpId");

            entity.HasOne(d => d.TwsTwp).WithMany(p => p.TypWyplataStazs)
                .HasForeignKey(d => d.TwsTwpId)
                .HasConstraintName("FK_TWSTwpLink");
        });

        modelBuilder.Entity<TypWyplatum>(entity =>
        {
            entity.HasKey(e => e.TwpTwpId)
                .HasName("TWP_Primary")
                .HasFillFactor(100);

            entity.ToTable("TypWyplata", "CDN", tb =>
                {
                    tb.HasTrigger("TypWyplata_Delete_Trigger");
                    tb.HasTrigger("TypWyplata_InsertUpdate_Trigger");
                    tb.HasTrigger("TypWyplata_Update_Trigger");
                });

            entity.HasIndex(e => new { e.TwpPpkumowaId, e.TwpNazwa }, "TWPPPKUmowaLink")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.TwpPdpId, "TWPPdpLink").HasFillFactor(100);

            entity.HasIndex(e => e.TwpPdzId, "TWPPdzLink").HasFillFactor(100);

            entity.HasIndex(e => e.TwpStandardowy, "TWPStandardowy").HasFillFactor(100);

            entity.HasIndex(e => e.TwpWzrId, "TWPWzorzec").HasFillFactor(100);

            entity.HasIndex(e => e.TwpNazwa, "TWYNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.TwpTwpId).HasColumnName("TWP_TwpId");
            entity.Property(e => e.TwpAktPoWyp1).HasColumnName("TWP_AktPoWyp1");
            entity.Property(e => e.TwpAktPoWyp2).HasColumnName("TWP_AktPoWyp2");
            entity.Property(e => e.TwpAlgAlgorytm).HasColumnName("TWP_AlgAlgorytm");
            entity.Property(e => e.TwpAlgAutomat).HasColumnName("TWP_AlgAutomat");
            entity.Property(e => e.TwpAlgBrutto).HasColumnName("TWP_AlgBrutto");
            entity.Property(e => e.TwpAlgGodziny)
                .HasColumnType("datetime")
                .HasColumnName("TWP_AlgGodziny");
            entity.Property(e => e.TwpAlgGodzinyDni).HasColumnName("TWP_AlgGodzinyDni");
            entity.Property(e => e.TwpAlgIlosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_AlgIlosc");
            entity.Property(e => e.TwpAlgIloscMies).HasColumnName("TWP_AlgIloscMies");
            entity.Property(e => e.TwpAlgIloscMiesWszystkie).HasColumnName("TWP_AlgIloscMiesWszystkie");
            entity.Property(e => e.TwpAlgKnfWspolcz).HasColumnName("TWP_AlgKnfWspolcz");
            entity.Property(e => e.TwpAlgKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_AlgKwota");
            entity.Property(e => e.TwpAlgLiczbaDni).HasColumnName("TWP_AlgLiczbaDni");
            entity.Property(e => e.TwpAlgLiczbaGodz).HasColumnName("TWP_AlgLiczbaGodz");
            entity.Property(e => e.TwpAlgOdchylki).HasColumnName("TWP_AlgOdchylki");
            entity.Property(e => e.TwpAlgPodstDzielGodz).HasColumnName("TWP_AlgPodstDzielGodz");
            entity.Property(e => e.TwpAlgPotrNieobec).HasColumnName("TWP_AlgPotrNieobec");
            entity.Property(e => e.TwpAlgPotracenie).HasColumnName("TWP_AlgPotracenie");
            entity.Property(e => e.TwpAlgProcWynagr)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_AlgProcWynagr");
            entity.Property(e => e.TwpAlgProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_AlgProcent");
            entity.Property(e => e.TwpAlgRodzaj12).HasColumnName("TWP_AlgRodzaj12");
            entity.Property(e => e.TwpAlgSposobPomn).HasColumnName("TWP_AlgSposobPomn");
            entity.Property(e => e.TwpAlgSposobZaokr).HasColumnName("TWP_AlgSposobZaokr");
            entity.Property(e => e.TwpAlgStOkrPlusTyp).HasColumnName("TWP_AlgStOkrPlusTyp");
            entity.Property(e => e.TwpAlgStOkrPlusWartosc)
                .HasMaxLength(40)
                .HasColumnName("TWP_AlgStOkrPlusWartosc");
            entity.Property(e => e.TwpAlgStOkrTyp).HasColumnName("TWP_AlgStOkrTyp");
            entity.Property(e => e.TwpAlgStOkrWartosc)
                .HasMaxLength(41)
                .HasColumnName("TWP_AlgStOkrWartosc");
            entity.Property(e => e.TwpAlgStaz).HasColumnName("TWP_AlgStaz");
            entity.Property(e => e.TwpAlgStazSposob).HasColumnName("TWP_AlgStazSposob");
            entity.Property(e => e.TwpAlgStdIloscMies).HasColumnName("TWP_AlgStdIloscMies");
            entity.Property(e => e.TwpAlgStdWspolcz).HasColumnName("TWP_AlgStdWspolcz");
            entity.Property(e => e.TwpAlgUrlop).HasColumnName("TWP_AlgUrlop");
            entity.Property(e => e.TwpAlgUzyjKwota).HasColumnName("TWP_AlgUzyjKwota");
            entity.Property(e => e.TwpAlgWspolcz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_AlgWspolcz");
            entity.Property(e => e.TwpAlgWzorzec)
                .HasMaxLength(2048)
                .HasColumnName("TWP_AlgWzorzec");
            entity.Property(e => e.TwpAlgZaokraglenie)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_AlgZaokraglenie");
            entity.Property(e => e.TwpDoliczNaKoncu).HasColumnName("TWP_DoliczNaKoncu");
            entity.Property(e => e.TwpImPrzelZalPodat).HasColumnName("TWP_ImPrzelZalPodat");
            entity.Property(e => e.TwpImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TWP_ImportAppId");
            entity.Property(e => e.TwpImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TWP_ImportRowId");
            entity.Property(e => e.TwpImportRowId2)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TWP_ImportRowId2");
            entity.Property(e => e.TwpKategoria).HasColumnName("TWP_Kategoria");
            entity.Property(e => e.TwpKierowcaZwrotKosztow).HasColumnName("TWP_KierowcaZwrotKosztow");
            entity.Property(e => e.TwpKodRna).HasColumnName("TWP_KodRNA");
            entity.Property(e => e.TwpKopia).HasColumnName("TWP_Kopia");
            entity.Property(e => e.TwpKorygowana).HasColumnName("TWP_Korygowana");
            entity.Property(e => e.TwpKosztFirma).HasColumnName("TWP_KosztFirma");
            entity.Property(e => e.TwpKoszty).HasColumnName("TWP_Koszty");
            entity.Property(e => e.TwpKosztyProc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_KosztyProc");
            entity.Property(e => e.TwpNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TWP_Nazwa");
            entity.Property(e => e.TwpNazwa2)
                .HasMaxLength(50)
                .HasColumnName("TWP_Nazwa2");
            entity.Property(e => e.TwpNazwaPelna)
                .HasMaxLength(127)
                .HasColumnName("TWP_NazwaPelna");
            entity.Property(e => e.TwpNiePomniejszZdrow).HasColumnName("TWP_NiePomniejszZdrow");
            entity.Property(e => e.TwpNieZapisujZerowego).HasColumnName("TWP_NieZapisujZerowego");
            entity.Property(e => e.TwpNieZapisujZerowegoPkzp)
                .HasDefaultValue((byte)1)
                .HasColumnName("TWP_NieZapisujZerowegoPKZP");
            entity.Property(e => e.TwpNieaktywny).HasColumnName("TWP_Nieaktywny");
            entity.Property(e => e.TwpOkresWyplaty).HasColumnName("TWP_OkresWyplaty");
            entity.Property(e => e.TwpOpeModId).HasColumnName("TWP_OpeModId");
            entity.Property(e => e.TwpOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWP_OpeModKod");
            entity.Property(e => e.TwpOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TWP_OpeModNazwisko");
            entity.Property(e => e.TwpOpeZalId).HasColumnName("TWP_OpeZalId");
            entity.Property(e => e.TwpOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWP_OpeZalKod");
            entity.Property(e => e.TwpOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("TWP_OpeZalNazwisko");
            entity.Property(e => e.TwpOpisAnalitCzasPracy).HasColumnName("TWP_OpisAnalitCzasPracy");
            entity.Property(e => e.TwpParentId).HasColumnName("TWP_ParentId");
            entity.Property(e => e.TwpPdpId).HasColumnName("TWP_PdpId");
            entity.Property(e => e.TwpPdzId).HasColumnName("TWP_PdzId");
            entity.Property(e => e.TwpPkzp).HasColumnName("TWP_PKZP");
            entity.Property(e => e.TwpPodstawowe).HasColumnName("TWP_Podstawowe");
            entity.Property(e => e.TwpPozycjaRp7).HasColumnName("TWP_PozycjaRP7");
            entity.Property(e => e.TwpPpkumowaId).HasColumnName("TWP_PPKUmowaId");
            entity.Property(e => e.TwpPriorytet).HasColumnName("TWP_Priorytet");
            entity.Property(e => e.TwpPriorytetFis).HasColumnName("TWP_PriorytetFIS");
            entity.Property(e => e.TwpPriorytetKoszty).HasColumnName("TWP_PriorytetKoszty");
            entity.Property(e => e.TwpPriorytetZus).HasColumnName("TWP_PriorytetZUS");
            entity.Property(e => e.TwpPrzychodPpkumowa).HasColumnName("TWP_PrzychodPPKUmowa");
            entity.Property(e => e.TwpRodzajFis).HasColumnName("TWP_RodzajFIS");
            entity.Property(e => e.TwpRodzajPotracenia).HasColumnName("TWP_RodzajPotracenia");
            entity.Property(e => e.TwpRodzajZrodla).HasColumnName("TWP_RodzajZrodla");
            entity.Property(e => e.TwpSklZdrow).HasColumnName("TWP_SklZdrow");
            entity.Property(e => e.TwpSklZus).HasColumnName("TWP_SklZUS");
            entity.Property(e => e.TwpSkladkaCzlonkowskaZz).HasColumnName("TWP_SkladkaCzlonkowskaZZ");
            entity.Property(e => e.TwpSkrot)
                .HasMaxLength(40)
                .HasColumnName("TWP_Skrot");
            entity.Property(e => e.TwpSkrot2)
                .HasMaxLength(50)
                .HasColumnName("TWP_Skrot2");
            entity.Property(e => e.TwpStOkrTyp).HasColumnName("TWP_StOkrTyp");
            entity.Property(e => e.TwpStOkrWartosc)
                .HasMaxLength(41)
                .HasColumnName("TWP_StOkrWartosc");
            entity.Property(e => e.TwpStaModId).HasColumnName("TWP_StaModId");
            entity.Property(e => e.TwpStaZalId).HasColumnName("TWP_StaZalId");
            entity.Property(e => e.TwpStandardowy).HasColumnName("TWP_Standardowy");
            entity.Property(e => e.TwpSwiadczFs).HasColumnName("TWP_SwiadczFS");
            entity.Property(e => e.TwpTsExport)
                .HasColumnType("datetime")
                .HasColumnName("TWP_TS_Export");
            entity.Property(e => e.TwpTsMod)
                .HasColumnType("datetime")
                .HasColumnName("TWP_TS_Mod");
            entity.Property(e => e.TwpTsZal)
                .HasColumnType("datetime")
                .HasColumnName("TWP_TS_Zal");
            entity.Property(e => e.TwpTypWaluty).HasColumnName("TWP_TypWaluty");
            entity.Property(e => e.TwpUlga).HasColumnName("TWP_Ulga");
            entity.Property(e => e.TwpUmowa).HasColumnName("TWP_Umowa");
            entity.Property(e => e.TwpUwzglMin).HasColumnName("TWP_UwzglMin");
            entity.Property(e => e.TwpUwzglNadgodz).HasColumnName("TWP_UwzglNadgodz");
            entity.Property(e => e.TwpUwzglZasadPonNormy).HasColumnName("TWP_UwzglZasadPonNormy");
            entity.Property(e => e.TwpUwzglZasadPowNormy).HasColumnName("TWP_UwzglZasadPowNormy");
            entity.Property(e => e.TwpWchodziDoWyplaty).HasColumnName("TWP_WchodziDoWyplaty");
            entity.Property(e => e.TwpWliczChor).HasColumnName("TWP_WliczChor");
            entity.Property(e => e.TwpWliczChorPodwojnie).HasColumnName("TWP_WliczChorPodwojnie");
            entity.Property(e => e.TwpWliczChorPoprzedniOkres).HasColumnName("TWP_WliczChorPoprzedniOkres");
            entity.Property(e => e.TwpWliczEkwiwal).HasColumnName("TWP_WliczEkwiwal");
            entity.Property(e => e.TwpWliczLimitZwolZfss).HasColumnName("TWP_WliczLimitZwolZFSS");
            entity.Property(e => e.TwpWliczPfron).HasColumnName("TWP_WliczPFRON");
            entity.Property(e => e.TwpWliczUrlop).HasColumnName("TWP_WliczUrlop");
            entity.Property(e => e.TwpWliczanyDoGus).HasColumnName("TWP_WliczanyDoGUS");
            entity.Property(e => e.TwpWplywaZalPodat).HasColumnName("TWP_WplywaZalPodat");
            entity.Property(e => e.TwpWskaznik).HasColumnName("TWP_Wskaznik");
            entity.Property(e => e.TwpWycofany).HasColumnName("TWP_Wycofany");
            entity.Property(e => e.TwpWykazZusrpa).HasColumnName("TWP_WykazZUSRPA");
            entity.Property(e => e.TwpWzrId).HasColumnName("TWP_WzrId");
            entity.Property(e => e.TwpZaOkrZwolLek).HasColumnName("TWP_ZaOkrZwolLek");
            entity.Property(e => e.TwpZajecieWynagr).HasColumnName("TWP_ZajecieWynagr");
            entity.Property(e => e.TwpZalPodProc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TWP_ZalPodProc");
            entity.Property(e => e.TwpZalPodat).HasColumnName("TWP_ZalPodat");
            entity.Property(e => e.TwpZasadnicze).HasColumnName("TWP_Zasadnicze");
            entity.Property(e => e.TwpZmienna1)
                .HasMaxLength(128)
                .HasColumnName("TWP_Zmienna1");
            entity.Property(e => e.TwpZmienna2)
                .HasMaxLength(128)
                .HasColumnName("TWP_Zmienna2");

            entity.HasOne(d => d.TwpParent).WithMany(p => p.InverseTwpParent)
                .HasForeignKey(d => d.TwpParentId)
                .HasConstraintName("FK_TWPParent");

            entity.HasOne(d => d.TwpPdp).WithMany(p => p.TypWyplata)
                .HasForeignKey(d => d.TwpPdpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TWPPdpLink");

            entity.HasOne(d => d.TwpPdz).WithMany(p => p.TypWyplata)
                .HasForeignKey(d => d.TwpPdzId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TWPPdzLink");

            entity.HasOne(d => d.TwpPpkumowa).WithMany(p => p.InverseTwpPpkumowa)
                .HasForeignKey(d => d.TwpPpkumowaId)
                .HasConstraintName("FK_TWPPPKUmowa");
        });

        modelBuilder.Entity<TytUbezp>(entity =>
        {
            entity.HasKey(e => e.TyuTyuId)
                .HasName("TYU_Primary")
                .HasFillFactor(100);

            entity.ToTable("TytUbezp", "CDN", tb => tb.HasTrigger("TytUbezp_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.TyuZjeId, "TYUZjeLink").HasFillFactor(100);

            entity.Property(e => e.TyuTyuId).HasColumnName("TYU_TyuId");
            entity.Property(e => e.TyuCheckBox)
                .HasMaxLength(4)
                .HasColumnName("TYU_CheckBox");
            entity.Property(e => e.TyuImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TYU_ImportRowId");
            entity.Property(e => e.TyuOpis)
                .HasMaxLength(510)
                .HasColumnName("TYU_Opis");
            entity.Property(e => e.TyuPoziom).HasColumnName("TYU_Poziom");
            entity.Property(e => e.TyuPracownik).HasColumnName("TYU_Pracownik");
            entity.Property(e => e.TyuTyUb4).HasColumnName("TYU_TyUb4");
            entity.Property(e => e.TyuUczen).HasColumnName("TYU_Uczen");
            entity.Property(e => e.TyuUmowa).HasColumnName("TYU_Umowa");
            entity.Property(e => e.TyuWlasciciel).HasColumnName("TYU_Wlasciciel");
            entity.Property(e => e.TyuWspolpracownik).HasColumnName("TYU_Wspolpracownik");
            entity.Property(e => e.TyuWybieralny).HasColumnName("TYU_Wybieralny");
            entity.Property(e => e.TyuZjeId)
                .HasMaxLength(128)
                .HasDefaultValue("")
                .HasColumnName("TYU_ZjeId");
            entity.Property(e => e.TyuZleceniobiorca).HasColumnName("TYU_Zleceniobiorca");
        });

        modelBuilder.Entity<TytUmowy>(entity =>
        {
            entity.HasKey(e => e.TumTumId)
                .HasName("TUM_Primary")
                .HasFillFactor(100);

            entity.ToTable("TytUmowy", "CDN", tb => tb.HasTrigger("TytUmowy_InsertUpdate_Trigger"));

            entity.Property(e => e.TumTumId).HasColumnName("TUM_TumId");
            entity.Property(e => e.TumImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TUM_ImportRowId");
            entity.Property(e => e.TumNazwa)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("TUM_Nazwa");
        });

        modelBuilder.Entity<Umowy>(entity =>
        {
            entity.HasKey(e => e.UmwUmwId)
                .HasName("UMW_Primary")
                .HasFillFactor(100);

            entity.ToTable("Umowy", "CDN", tb =>
                {
                    tb.HasTrigger("Umowy2WypSkladniki_Delete_Trigger");
                    tb.HasTrigger("Umowy_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.UmwDataOd, e.UmwDataDo }, "UMWDataOdDataDo").HasFillFactor(100);

            entity.HasIndex(e => e.UmwDdfId, "UMWDdfLink").HasFillFactor(100);

            entity.HasIndex(e => e.UmwDzlId, "UMWDzlLink").HasFillFactor(100);

            entity.HasIndex(e => e.UmwListaPlacSymbol, "UMWLPLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.UmwPraId, e.UmwNumerPelny }, "UMWPraLink")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.UmwTwpId, "UMWTwpLink").HasFillFactor(100);

            entity.HasIndex(e => e.UmwTyuId, "UMWTyuLink").HasFillFactor(100);

            entity.HasIndex(e => e.UmwNumerPelny, "UmwNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.UmwUmwId).HasColumnName("UMW_UmwId");
            entity.Property(e => e.UmwBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_Brutto");
            entity.Property(e => e.UmwChorDo)
                .HasColumnType("datetime")
                .HasColumnName("UMW_ChorDo");
            entity.Property(e => e.UmwChorKod).HasColumnName("UMW_ChorKod");
            entity.Property(e => e.UmwChorOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_ChorOd");
            entity.Property(e => e.UmwCzasPracy).HasColumnName("UMW_CzasPracy");
            entity.Property(e => e.UmwDataDo)
                .HasColumnType("datetime")
                .HasColumnName("UMW_DataDo");
            entity.Property(e => e.UmwDataDok)
                .HasColumnType("datetime")
                .HasColumnName("UMW_DataDok");
            entity.Property(e => e.UmwDataOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_DataOd");
            entity.Property(e => e.UmwDataZawarcia)
                .HasColumnType("datetime")
                .HasColumnName("UMW_DataZawarcia");
            entity.Property(e => e.UmwDdfId).HasColumnName("UMW_DdfId");
            entity.Property(e => e.UmwDzlId)
                .HasDefaultValue(3)
                .HasColumnName("UMW_DzlId");
            entity.Property(e => e.UmwEmerDo)
                .HasColumnType("datetime")
                .HasColumnName("UMW_EmerDo");
            entity.Property(e => e.UmwEmerKod).HasColumnName("UMW_EmerKod");
            entity.Property(e => e.UmwEmerOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_EmerOd");
            entity.Property(e => e.UmwFis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_Fis");
            entity.Property(e => e.UmwImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UMW_ImportRowId");
            entity.Property(e => e.UmwJestChorobowe).HasColumnName("UMW_JestChorobowe");
            entity.Property(e => e.UmwJestDobrChorobowe).HasColumnName("UMW_JestDobrChorobowe");
            entity.Property(e => e.UmwJestDobrEmerytal).HasColumnName("UMW_JestDobrEmerytal");
            entity.Property(e => e.UmwJestDobrRentowe).HasColumnName("UMW_JestDobrRentowe");
            entity.Property(e => e.UmwJestDobrZdrow).HasColumnName("UMW_JestDobrZdrow");
            entity.Property(e => e.UmwJestEmerytal).HasColumnName("UMW_JestEmerytal");
            entity.Property(e => e.UmwJestRentowe).HasColumnName("UMW_JestRentowe");
            entity.Property(e => e.UmwJestWypad).HasColumnName("UMW_JestWypad");
            entity.Property(e => e.UmwJestZus).HasColumnName("UMW_JestZUS");
            entity.Property(e => e.UmwKodZawodu)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("UMW_KodZawodu");
            entity.Property(e => e.UmwKosztyKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_KosztyKwota");
            entity.Property(e => e.UmwKosztyProc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_KosztyProc");
            entity.Property(e => e.UmwKwotaNastWyp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_KwotaNastWyp");
            entity.Property(e => e.UmwListaPlacSymbol).HasColumnName("UMW_ListaPlacSymbol");
            entity.Property(e => e.UmwNaliczajFundusze).HasColumnName("UMW_NaliczajFundusze");
            entity.Property(e => e.UmwNiepobierajZaliczkiPodatku).HasColumnName("UMW_NiepobierajZaliczkiPodatku");
            entity.Property(e => e.UmwNumerNr).HasColumnName("UMW_NumerNr");
            entity.Property(e => e.UmwNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([UMW_NUMERNR],[UMW_NUMERSTRING]))", false)
                .HasColumnName("UMW_NumerPelny");
            entity.Property(e => e.UmwNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("UMW_NumerString");
            entity.Property(e => e.UmwOddelegowany).HasColumnName("UMW_Oddelegowany");
            entity.Property(e => e.UmwOddelegowanyDieta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_OddelegowanyDieta");
            entity.Property(e => e.UmwOddelegowanyFis).HasColumnName("UMW_OddelegowanyFIS");
            entity.Property(e => e.UmwOddelegowanyKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("UMW_OddelegowanyKraj");
            entity.Property(e => e.UmwOddelegowanyPropOdl).HasColumnName("UMW_OddelegowanyPropOdl");
            entity.Property(e => e.UmwOddelegowanyWaluta)
                .HasMaxLength(3)
                .HasDefaultValue("")
                .HasColumnName("UMW_OddelegowanyWaluta");
            entity.Property(e => e.UmwOddelegowanyWalutaDieta)
                .HasMaxLength(3)
                .HasDefaultValue("")
                .HasColumnName("UMW_OddelegowanyWalutaDieta");
            entity.Property(e => e.UmwOgraniczSklZdrow).HasColumnName("UMW_OgraniczSklZdrow");
            entity.Property(e => e.UmwOpeModId).HasColumnName("UMW_OpeModId");
            entity.Property(e => e.UmwOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UMW_OpeModKod");
            entity.Property(e => e.UmwOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("UMW_OpeModNazwisko");
            entity.Property(e => e.UmwOpeZalId).HasColumnName("UMW_OpeZalId");
            entity.Property(e => e.UmwOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UMW_OpeZalKod");
            entity.Property(e => e.UmwOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("UMW_OpeZalNazwisko");
            entity.Property(e => e.UmwOpis)
                .HasMaxLength(1024)
                .HasColumnName("UMW_Opis");
            entity.Property(e => e.UmwPomnZus).HasColumnName("UMW_PomnZUS");
            entity.Property(e => e.UmwPraId).HasColumnName("UMW_PraId");
            entity.Property(e => e.UmwPrzekroczInformacja)
                .HasMaxLength(40)
                .HasColumnName("UMW_PrzekroczInformacja");
            entity.Property(e => e.UmwPrzekroczKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_PrzekroczKwota");
            entity.Property(e => e.UmwPrzekroczMiesiac).HasColumnName("UMW_PrzekroczMiesiac");
            entity.Property(e => e.UmwPrzekroczRok).HasColumnName("UMW_PrzekroczRok");
            entity.Property(e => e.UmwPrzekroczenie).HasColumnName("UMW_Przekroczenie");
            entity.Property(e => e.UmwRentDo)
                .HasColumnType("datetime")
                .HasColumnName("UMW_RentDo");
            entity.Property(e => e.UmwRentKod).HasColumnName("UMW_RentKod");
            entity.Property(e => e.UmwRentOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_RentOd");
            entity.Property(e => e.UmwRodzaj)
                .HasMaxLength(127)
                .HasColumnName("UMW_Rodzaj");
            entity.Property(e => e.UmwSplacona).HasColumnName("UMW_Splacona");
            entity.Property(e => e.UmwSplacono)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_Splacono");
            entity.Property(e => e.UmwStaModId).HasColumnName("UMW_StaModId");
            entity.Property(e => e.UmwStaZalId).HasColumnName("UMW_StaZalId");
            entity.Property(e => e.UmwStawkaGodz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_StawkaGodz");
            entity.Property(e => e.UmwStawkaPodatku)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_StawkaPodatku");
            entity.Property(e => e.UmwSymbol)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UMW_Symbol");
            entity.Property(e => e.UmwTsMod)
                .HasColumnType("datetime")
                .HasColumnName("UMW_TS_Mod");
            entity.Property(e => e.UmwTsZal)
                .HasColumnType("datetime")
                .HasColumnName("UMW_TS_Zal");
            entity.Property(e => e.UmwTumId).HasColumnName("UMW_TumId");
            entity.Property(e => e.UmwTwpId).HasColumnName("UMW_TwpId");
            entity.Property(e => e.UmwTytKontZus).HasColumnName("UMW_TytKontZUS");
            entity.Property(e => e.UmwTytul)
                .HasMaxLength(127)
                .HasColumnName("UMW_Tytul");
            entity.Property(e => e.UmwTyuId).HasColumnName("UMW_TyuId");
            entity.Property(e => e.UmwUlgaMnoznikL).HasColumnName("UMW_UlgaMnoznikL");
            entity.Property(e => e.UmwUlgaMnoznikM)
                .HasDefaultValue((short)12)
                .HasColumnName("UMW_UlgaMnoznikM");
            entity.Property(e => e.UmwUwzglMin).HasColumnName("UMW_UwzglMin");
            entity.Property(e => e.UmwWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("UMW_Waluta");
            entity.Property(e => e.UmwWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_Wartosc");
            entity.Property(e => e.UmwWgBrutto).HasColumnName("UMW_WgBrutto");
            entity.Property(e => e.UmwWliczChorZakonczona).HasColumnName("UMW_WliczChorZakonczona");
            entity.Property(e => e.UmwWypadDo)
                .HasColumnType("datetime")
                .HasColumnName("UMW_WypadDo");
            entity.Property(e => e.UmwWypadKod).HasColumnName("UMW_WypadKod");
            entity.Property(e => e.UmwZdrowDo)
                .HasColumnType("datetime")
                .HasColumnName("UMW_ZdrowDo");
            entity.Property(e => e.UmwZdrowDobrOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_ZdrowDobrOd");
            entity.Property(e => e.UmwZdrowKod).HasColumnName("UMW_ZdrowKod");
            entity.Property(e => e.UmwZdrowKwotaPierwSkl)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_ZdrowKwotaPierwSkl");
            entity.Property(e => e.UmwZdrowOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_ZdrowOd");
            entity.Property(e => e.UmwZus)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMW_Zus");
            entity.Property(e => e.UmwZusKontoOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_ZusKontoOd");
            entity.Property(e => e.UmwZusOd)
                .HasColumnType("datetime")
                .HasColumnName("UMW_ZusOd");

            entity.HasOne(d => d.UmwDdf).WithMany(p => p.Umowies)
                .HasForeignKey(d => d.UmwDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UMWDdfLink");

            entity.HasOne(d => d.UmwDzl).WithMany(p => p.Umowies)
                .HasForeignKey(d => d.UmwDzlId)
                .HasConstraintName("FK_UMWDzlLink");

            entity.HasOne(d => d.UmwPra).WithMany(p => p.Umowies)
                .HasForeignKey(d => d.UmwPraId)
                .HasConstraintName("FK_UMWPraLink");

            entity.HasOne(d => d.UmwTyu).WithMany(p => p.Umowies)
                .HasForeignKey(d => d.UmwTyuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UMWTyuLink");
        });

        modelBuilder.Entity<UmowyB2b>(entity =>
        {
            entity.HasKey(e => e.UmbUmbId)
                .HasName("UMB_Primary")
                .HasFillFactor(100);

            entity.ToTable("UmowyB2B", "CDN", tb => tb.HasTrigger("UmowyB2B_InsertUpdate_Trigger"));

            entity.HasIndex(e => new { e.UmbDataOd, e.UmbDataDo }, "UMBDataOdDataDo").HasFillFactor(100);

            entity.HasIndex(e => e.UmbDdfId, "UMBDdfLink").HasFillFactor(100);

            entity.HasIndex(e => e.UmbNumerPelny, "UMBNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.UmbPraId, e.UmbNumerPelny }, "UMBPraLink")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.UmbUmbId).HasColumnName("UMB_UmbId");
            entity.Property(e => e.UmbDataDo)
                .HasColumnType("datetime")
                .HasColumnName("UMB_DataDo");
            entity.Property(e => e.UmbDataDok)
                .HasColumnType("datetime")
                .HasColumnName("UMB_DataDok");
            entity.Property(e => e.UmbDataOd)
                .HasColumnType("datetime")
                .HasColumnName("UMB_DataOd");
            entity.Property(e => e.UmbDataZawarcia)
                .HasColumnType("datetime")
                .HasColumnName("UMB_DataZawarcia");
            entity.Property(e => e.UmbDdfId).HasColumnName("UMB_DdfId");
            entity.Property(e => e.UmbDkmIdStanowisko).HasColumnName("UMB_DkmIdStanowisko");
            entity.Property(e => e.UmbImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UMB_ImportRowId");
            entity.Property(e => e.UmbKntId).HasColumnName("UMB_KntId");
            entity.Property(e => e.UmbLiczbaDniUrlopu).HasColumnName("UMB_LiczbaDniUrlopu");
            entity.Property(e => e.UmbNumerNr).HasColumnName("UMB_NumerNr");
            entity.Property(e => e.UmbNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([UMB_NUMERNR],[UMB_NUMERSTRING]))", false)
                .HasColumnName("UMB_NumerPelny");
            entity.Property(e => e.UmbNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("UMB_NumerString");
            entity.Property(e => e.UmbOpeModId).HasColumnName("UMB_OpeModId");
            entity.Property(e => e.UmbOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UMB_OpeModKod");
            entity.Property(e => e.UmbOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("UMB_OpeModNazwisko");
            entity.Property(e => e.UmbOpeZalId).HasColumnName("UMB_OpeZalId");
            entity.Property(e => e.UmbOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UMB_OpeZalKod");
            entity.Property(e => e.UmbOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("UMB_OpeZalNazwisko");
            entity.Property(e => e.UmbOpis)
                .HasMaxLength(1000)
                .HasColumnName("UMB_Opis");
            entity.Property(e => e.UmbPraId).HasColumnName("UMB_PraId");
            entity.Property(e => e.UmbStaModId).HasColumnName("UMB_StaModId");
            entity.Property(e => e.UmbStaZalId).HasColumnName("UMB_StaZalId");
            entity.Property(e => e.UmbTsMod)
                .HasColumnType("datetime")
                .HasColumnName("UMB_TS_Mod");
            entity.Property(e => e.UmbTsZal)
                .HasColumnType("datetime")
                .HasColumnName("UMB_TS_Zal");
            entity.Property(e => e.UmbWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UMB_Wartosc");

            entity.HasOne(d => d.UmbDdf).WithMany(p => p.UmowyB2bs)
                .HasForeignKey(d => d.UmbDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UMBDdfLink");

            entity.HasOne(d => d.UmbDkmIdStanowiskoNavigation).WithMany(p => p.UmowyB2bs)
                .HasForeignKey(d => d.UmbDkmIdStanowisko)
                .HasConstraintName("FK_UMB_DkmIdStanowisko");

            entity.HasOne(d => d.UmbKnt).WithMany(p => p.UmowyB2bs)
                .HasForeignKey(d => d.UmbKntId)
                .HasConstraintName("FK_UMB_KntId");

            entity.HasOne(d => d.UmbPra).WithMany(p => p.UmowyB2bs)
                .HasForeignKey(d => d.UmbPraId)
                .HasConstraintName("FK_UMBPraLink");
        });

        modelBuilder.Entity<UmowyZestCzasu>(entity =>
        {
            entity.HasKey(e => e.UmzUmzId)
                .HasName("UMZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("UmowyZestCzasu", "CDN", tb => tb.HasTrigger("UmowyZestCzasu_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.UmzUmwId, "UMZUmwLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.UmzUmwId, e.UmzMiesiac, e.UmzRok }, "UMZWartosci")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.UmzUmzId).HasColumnName("UMZ_UmzId");
            entity.Property(e => e.UmzCzas)
                .HasColumnType("datetime")
                .HasColumnName("UMZ_Czas");
            entity.Property(e => e.UmzImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UMZ_ImportRowId");
            entity.Property(e => e.UmzMiesiac).HasColumnName("UMZ_Miesiac");
            entity.Property(e => e.UmzRok).HasColumnName("UMZ_Rok");
            entity.Property(e => e.UmzUmwId).HasColumnName("UMZ_UmwId");

            entity.HasOne(d => d.UmzUmw).WithMany(p => p.UmowyZestCzasus)
                .HasForeignKey(d => d.UmzUmwId)
                .HasConstraintName("FK_UMWUmwLink");
        });

        modelBuilder.Entity<Uprawnienium>(entity =>
        {
            entity.HasKey(e => e.UprUprId)
                .HasName("UPR_Primary")
                .HasFillFactor(100);

            entity.ToTable("Uprawnienia", "CDN", tb => tb.HasTrigger("Uprawnienia_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.UprDkmId, "UPRDkmLink").HasFillFactor(100);

            entity.HasIndex(e => e.UprPraId, "UPRPraLink").HasFillFactor(100);

            entity.Property(e => e.UprUprId).HasColumnName("UPR_UprId");
            entity.Property(e => e.UprDkmId).HasColumnName("UPR_DkmId");
            entity.Property(e => e.UprImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UPR_ImportRowId");
            entity.Property(e => e.UprKursDo)
                .HasColumnType("datetime")
                .HasColumnName("UPR_KursDo");
            entity.Property(e => e.UprKursOd)
                .HasColumnType("datetime")
                .HasColumnName("UPR_KursOd");
            entity.Property(e => e.UprKursTermin)
                .HasColumnType("datetime")
                .HasColumnName("UPR_KursTermin");
            entity.Property(e => e.UprNazwa)
                .HasMaxLength(250)
                .HasColumnName("UPR_Nazwa");
            entity.Property(e => e.UprNieaktywne).HasColumnName("UPR_Nieaktywne");
            entity.Property(e => e.UprOpeModId).HasColumnName("UPR_OpeModId");
            entity.Property(e => e.UprOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPR_OpeModKod");
            entity.Property(e => e.UprOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("UPR_OpeModNazwisko");
            entity.Property(e => e.UprOpeZalId).HasColumnName("UPR_OpeZalId");
            entity.Property(e => e.UprOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPR_OpeZalKod");
            entity.Property(e => e.UprOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("UPR_OpeZalNazwisko");
            entity.Property(e => e.UprOpis)
                .HasMaxLength(512)
                .HasColumnName("UPR_Opis");
            entity.Property(e => e.UprPraId).HasColumnName("UPR_PraId");
            entity.Property(e => e.UprPrzypomnienie).HasColumnName("UPR_Przypomnienie");
            entity.Property(e => e.UprRodzaj).HasColumnName("UPR_Rodzaj");
            entity.Property(e => e.UprStMowa)
                .HasMaxLength(30)
                .HasColumnName("UPR_StMowa");
            entity.Property(e => e.UprStPismo)
                .HasMaxLength(30)
                .HasColumnName("UPR_StPismo");
            entity.Property(e => e.UprStaModId).HasColumnName("UPR_StaModId");
            entity.Property(e => e.UprStaZalId).HasColumnName("UPR_StaZalId");
            entity.Property(e => e.UprTsMod)
                .HasColumnType("datetime")
                .HasColumnName("UPR_TS_Mod");
            entity.Property(e => e.UprTsZal)
                .HasColumnType("datetime")
                .HasColumnName("UPR_TS_Zal");
            entity.Property(e => e.UprUkonLubPismo).HasColumnName("UPR_UkonLubPismo");
            entity.Property(e => e.UprWymagLubMowa).HasColumnName("UPR_WymagLubMowa");
            entity.Property(e => e.UprZrodlo).HasColumnName("UPR_Zrodlo");

            entity.HasOne(d => d.UprDkm).WithMany(p => p.Uprawnienia)
                .HasForeignKey(d => d.UprDkmId)
                .HasConstraintName("FK_UPRDkmLink");

            entity.HasOne(d => d.UprPra).WithMany(p => p.Uprawnienia)
                .HasForeignKey(d => d.UprPraId)
                .HasConstraintName("FK_UPRPraLink");
        });

        modelBuilder.Entity<UrzRachunki>(entity =>
        {
            entity.HasKey(e => e.UraUraId)
                .HasName("URa_Primary")
                .HasFillFactor(100);

            entity.ToTable("UrzRachunki", "CDN");

            entity.HasIndex(e => e.UraBnaId, "URaBank").HasFillFactor(100);

            entity.HasIndex(e => e.UraRachunekNr0, "URaRachunekNr0").HasFillFactor(100);

            entity.HasIndex(e => new { e.UraUrzId, e.UraLp, e.UraPraId }, "URaUrzad")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.UraUraId).HasColumnName("URa_URaId");
            entity.Property(e => e.UraBnaId).HasColumnName("URa_BNaId");
            entity.Property(e => e.UraIban).HasColumnName("URa_IBAN");
            entity.Property(e => e.UraLp).HasColumnName("URa_Lp");
            entity.Property(e => e.UraPraId).HasColumnName("URa_PraId");
            entity.Property(e => e.UraRachunekNr)
                .HasMaxLength(51)
                .HasColumnName("URa_RachunekNr");
            entity.Property(e => e.UraRachunekNr0)
                .HasMaxLength(51)
                .HasComputedColumnSql("(CONVERT([nvarchar](51),replace(replace([URA_RACHUNEKNR],'-',''),' ',''),(0)))", false)
                .HasColumnName("URa_RachunekNr0");
            entity.Property(e => e.UraUrzId).HasColumnName("URa_UrzId");

            entity.HasOne(d => d.UraBna).WithMany(p => p.UrzRachunkis)
                .HasForeignKey(d => d.UraBnaId)
                .HasConstraintName("FK_URaBank");

            entity.HasOne(d => d.UraPra).WithMany(p => p.UrzRachunkis)
                .HasForeignKey(d => d.UraPraId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_URaPracownik");

            entity.HasOne(d => d.UraUrz).WithMany(p => p.UrzRachunkis)
                .HasForeignKey(d => d.UraUrzId)
                .HasConstraintName("FK_URaUrzad");
        });

        modelBuilder.Entity<Urzedy>(entity =>
        {
            entity.HasKey(e => e.UrzUrzId)
                .HasName("Urz_Primary")
                .HasFillFactor(100);

            entity.ToTable("Urzedy", "CDN", tb =>
                {
                    tb.HasTrigger("Urzedy_Delete_Trigger");
                    tb.HasTrigger("Urzedy_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.UrzTypUrzedu, e.UrzNazwa1, e.UrzUrzId }, "KeyNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.UrzTypUrzedu, e.UrzAkronim }, "UrzAkronim")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.UrzImportRowId, "UrzGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.UrzKatId, "UrzKategoria").HasFillFactor(100);

            entity.Property(e => e.UrzUrzId).HasColumnName("Urz_UrzId");
            entity.Property(e => e.UrzAdres2)
                .HasMaxLength(40)
                .HasColumnName("Urz_Adres2");
            entity.Property(e => e.UrzAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Urz_Akronim");
            entity.Property(e => e.UrzEmail)
                .HasMaxLength(127)
                .HasColumnName("Urz_Email");
            entity.Property(e => e.UrzFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Urz_Fax");
            entity.Property(e => e.UrzGmina)
                .HasMaxLength(40)
                .HasColumnName("Urz_Gmina");
            entity.Property(e => e.UrzImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Urz_ImportAppId");
            entity.Property(e => e.UrzImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("Urz_ImportRowId");
            entity.Property(e => e.UrzKatId).HasColumnName("Urz_KatID");
            entity.Property(e => e.UrzKod)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Urz_Kod");
            entity.Property(e => e.UrzKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Urz_KodPocztowy");
            entity.Property(e => e.UrzKraj)
                .HasMaxLength(40)
                .HasColumnName("Urz_Kraj");
            entity.Property(e => e.UrzMiasto)
                .HasMaxLength(40)
                .HasColumnName("Urz_Miasto");
            entity.Property(e => e.UrzNazwa1)
                .HasMaxLength(50)
                .HasColumnName("Urz_Nazwa1");
            entity.Property(e => e.UrzNazwa2)
                .HasMaxLength(50)
                .HasColumnName("Urz_Nazwa2");
            entity.Property(e => e.UrzNieRozliczac).HasColumnName("Urz_NieRozliczac");
            entity.Property(e => e.UrzNieaktywny).HasColumnName("Urz_Nieaktywny");
            entity.Property(e => e.UrzNrDomu)
                .HasMaxLength(10)
                .HasColumnName("Urz_NrDomu");
            entity.Property(e => e.UrzNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Urz_NrLokalu");
            entity.Property(e => e.UrzOpeModId).HasColumnName("Urz_OpeModId");
            entity.Property(e => e.UrzOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Urz_OpeModKod");
            entity.Property(e => e.UrzOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Urz_OpeModNazwisko");
            entity.Property(e => e.UrzOpeZalId).HasColumnName("Urz_OpeZalId");
            entity.Property(e => e.UrzOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Urz_OpeZalKod");
            entity.Property(e => e.UrzOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Urz_OpeZalNazwisko");
            entity.Property(e => e.UrzPoczta)
                .HasMaxLength(40)
                .HasColumnName("Urz_Poczta");
            entity.Property(e => e.UrzPodmiotTyp)
                .HasDefaultValue((short)5)
                .HasColumnName("Urz_PodmiotTyp");
            entity.Property(e => e.UrzPowiat)
                .HasMaxLength(40)
                .HasColumnName("Urz_Powiat");
            entity.Property(e => e.UrzStaModId).HasColumnName("Urz_StaModId");
            entity.Property(e => e.UrzStaZalId).HasColumnName("Urz_StaZalId");
            entity.Property(e => e.UrzStandardowy).HasColumnName("Urz_Standardowy");
            entity.Property(e => e.UrzTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Urz_Telefon");
            entity.Property(e => e.UrzTelefonSms)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Urz_TelefonSms");
            entity.Property(e => e.UrzTsExport)
                .HasColumnType("datetime")
                .HasColumnName("Urz_TS_Export");
            entity.Property(e => e.UrzTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Urz_TS_Mod");
            entity.Property(e => e.UrzTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Urz_TS_Zal");
            entity.Property(e => e.UrzTypUrzedu).HasColumnName("Urz_TypUrzedu");
            entity.Property(e => e.UrzUlica)
                .HasMaxLength(40)
                .HasColumnName("Urz_Ulica");
            entity.Property(e => e.UrzUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("Urz_URL");
            entity.Property(e => e.UrzWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("Urz_Wojewodztwo");

            entity.HasOne(d => d.UrzKat).WithMany(p => p.Urzedies)
                .HasForeignKey(d => d.UrzKatId)
                .HasConstraintName("FK_UrzKategoria");
        });

        modelBuilder.Entity<UsunieteObiekty>(entity =>
        {
            entity.HasKey(e => e.UobUobId)
                .HasName("UOb_Primary")
                .HasFillFactor(100);

            entity.ToTable("UsunieteObiekty", "CDN");

            entity.HasIndex(e => new { e.UobTyp, e.UobImportRowId }, "UObTypIRID")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.UobUobId).HasColumnName("UOb_UObID");
            entity.Property(e => e.UobImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("UOb_ImportRowId");
            entity.Property(e => e.UobTyp).HasColumnName("UOb_Typ");
        });

        modelBuilder.Entity<VatMarzaView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VatMarzaView", "CDN");

            entity.Property(e => e.VmpFlagaInne).HasColumnName("VMP_FlagaInne");
            entity.Property(e => e.VmpFlagaMarza).HasColumnName("VMP_FlagaMarza");
            entity.Property(e => e.VmpMrzaGrupa).HasColumnName("VMP_MrzaGrupa");
            entity.Property(e => e.VmpNettoInne)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VMP_NettoInne");
            entity.Property(e => e.VmpNettoMarza)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VMP_NettoMarza");
            entity.Property(e => e.VmpStawkaInne)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VMP_StawkaInne");
            entity.Property(e => e.VmpStawkaMarza)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VMP_StawkaMarza");
            entity.Property(e => e.VmpVaNid).HasColumnName("VMP_VaNID");
            entity.Property(e => e.VmpVanOrgId).HasColumnName("VMP_VanOrgID");
            entity.Property(e => e.VmpVatId).HasColumnName("VMP_VatID");
            entity.Property(e => e.VmpVatInne)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VMP_VatInne");
            entity.Property(e => e.VmpVatMarza)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VMP_VatMarza");
        });

        modelBuilder.Entity<VatNag>(entity =>
        {
            entity.HasKey(e => e.VaNVaNid)
                .HasName("VaN_Primary")
                .HasFillFactor(100);

            entity.ToTable("VatNag", "CDN", tb =>
                {
                    tb.HasTrigger("VatNag_DeleteHandler");
                    tb.HasTrigger("VatNag_Delete_Trigger");
                    tb.HasTrigger("VatNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.VaNTyp, e.VaNDataZap }, "VaNChrono").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNTyp, e.VaNDeklRokMies, e.VaNRozliczacVatUe, e.VaNExport }, "VaNDeklarUE").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNTyp, e.VaNRozliczacVat7 }, "VaNDeklarac").HasFillFactor(100);

            entity.HasIndex(e => e.VaNDekId, "VaNDekrety").HasFillFactor(100);

            entity.HasIndex(e => e.VaNImportRowId, "VaNGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNIdentKsiegStr, e.VaNIdentKsiegNr }, "VaNIdentKsieg").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNIdentKsieg, e.VaNVaNid }, "VaNIdentKsieg2").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNKatId, e.VaNTyp, e.VaNDataZap }, "VaNKategorie").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNPodId, e.VaNPodmiotTyp, e.VaNTyp, e.VaNDataZap }, "VaNKontrah").HasFillFactor(100);

            entity.HasIndex(e => e.VaNVanOrgId, "VaNOrgId").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNPodZalId, e.VaNPodmiotZalTyp }, "VaNPodmiotZal").HasFillFactor(100);

            entity.HasIndex(e => e.VaNPreDekId, "VaNPreDekrety").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaNTyp, e.VaNRejestr, e.VaNDataZap }, "VaNRejestrChrono").HasFillFactor(100);

            entity.HasIndex(e => e.VaNRycId, "VaNRyczalt").HasFillFactor(100);

            entity.HasIndex(e => e.VaNDataWys, "VanDataWys").HasFillFactor(100);

            entity.HasIndex(e => e.VaNDnpId, "VanDokNagPliki").HasFillFactor(100);

            entity.HasIndex(e => e.VaNFplId, "VanFormaPlatnosci").HasFillFactor(100);

            entity.HasIndex(e => e.VaNKpRid, "VanKPR").HasFillFactor(100);

            entity.HasIndex(e => e.VaNTrnId, "VanTrnZrd").HasFillFactor(100);

            entity.Property(e => e.VaNVaNid).HasColumnName("VaN_VaNID");
            entity.Property(e => e.VaNAkcyzaProc)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VaN_AkcyzaProc");
            entity.Property(e => e.VaNAkcyzaWart)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_AkcyzaWart");
            entity.Property(e => e.VaNAkcyzaWegiel)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_AkcyzaWegiel");
            entity.Property(e => e.VaNAkcyzaWegielKolumnaKpr).HasColumnName("VaN_AkcyzaWegiel_KolumnaKPR");
            entity.Property(e => e.VaNAppId).HasColumnName("VaN_AppID");
            entity.Property(e => e.VaNAppRowId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VaN_AppRowID");
            entity.Property(e => e.VaNAutoVat7Kasa).HasColumnName("VaN_AutoVat7Kasa");
            entity.Property(e => e.VaNCloProc)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VaN_CloProc");
            entity.Property(e => e.VaNCloWart)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_CloWart");
            entity.Property(e => e.VaNDataKur)
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataKur");
            entity.Property(e => e.VaNDataKurDoVat)
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataKurDoVAT");
            entity.Property(e => e.VaNDataKurOss)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataKurOSS");
            entity.Property(e => e.VaNDataObowiazkuPodatkowego)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataObowiazkuPodatkowego");
            entity.Property(e => e.VaNDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataOpe");
            entity.Property(e => e.VaNDataPrawaOdliczenia)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataPrawaOdliczenia");
            entity.Property(e => e.VaNDataWys)
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataWys");
            entity.Property(e => e.VaNDataZap)
                .HasColumnType("datetime")
                .HasColumnName("VaN_DataZap");
            entity.Property(e => e.VaNDekId).HasColumnName("VaN_DekID");
            entity.Property(e => e.VaNDeklRokMies).HasColumnName("VaN_DeklRokMies");
            entity.Property(e => e.VaNDeklRokMiesKasa).HasColumnName("VaN_DeklRokMiesKasa");
            entity.Property(e => e.VaNDetal).HasColumnName("VaN_Detal");
            entity.Property(e => e.VaNDnpId).HasColumnName("VaN_DnpID");
            entity.Property(e => e.VaNDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("VaN_Dokument");
            entity.Property(e => e.VaNDokumentyNadrzedne)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("VaN_DokumentyNadrzedne");
            entity.Property(e => e.VaNExport).HasColumnName("VaN_Export");
            entity.Property(e => e.VaNFinalny).HasColumnName("VaN_Finalny");
            entity.Property(e => e.VaNFiskalna).HasColumnName("VaN_Fiskalna");
            entity.Property(e => e.VaNFplId).HasColumnName("VaN_FplID");
            entity.Property(e => e.VaNIdentKsieg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VaN_IdentKsieg");
            entity.Property(e => e.VaNIdentKsiegDdfId).HasColumnName("VaN_IdentKsiegDDfID");
            entity.Property(e => e.VaNIdentKsiegNr)
                .HasComputedColumnSql("([CDN].[IdentKsiNr]([VaN_IdentKsieg],[VaN_IdentKsiegNumeracja]))", false)
                .HasColumnName("VaN_IdentKsiegNr");
            entity.Property(e => e.VaNIdentKsiegNumeracja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VaN_IdentKsiegNumeracja");
            entity.Property(e => e.VaNIdentKsiegStr)
                .HasMaxLength(50)
                .HasComputedColumnSql("([CDN].[IdentKsiStr]([VaN_IdentKsieg],[VaN_IdentKsiegNumeracja]))", false)
                .HasColumnName("VaN_IdentKsiegStr");
            entity.Property(e => e.VaNImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("VaN_ImportAppId");
            entity.Property(e => e.VaNImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("VaN_ImportRowId");
            entity.Property(e => e.VaNJpkFa).HasColumnName("VaN_JPK_FA");
            entity.Property(e => e.VaNKatId).HasColumnName("VaN_KatID");
            entity.Property(e => e.VaNKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VaN_Kategoria");
            entity.Property(e => e.VaNKntAdres2)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntAdres2");
            entity.Property(e => e.VaNKntGmina)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntGmina");
            entity.Property(e => e.VaNKntKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VaN_KntKodPocztowy");
            entity.Property(e => e.VaNKntKonto)
                .HasMaxLength(20)
                .HasColumnName("VaN_KntKonto");
            entity.Property(e => e.VaNKntKraj)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntKraj");
            entity.Property(e => e.VaNKntMiasto)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntMiasto");
            entity.Property(e => e.VaNKntNazwa1)
                .HasMaxLength(50)
                .HasColumnName("VaN_KntNazwa1");
            entity.Property(e => e.VaNKntNazwa2)
                .HasMaxLength(50)
                .HasColumnName("VaN_KntNazwa2");
            entity.Property(e => e.VaNKntNazwa3)
                .HasMaxLength(250)
                .HasColumnName("VaN_KntNazwa3");
            entity.Property(e => e.VaNKntNipE)
                .HasMaxLength(20)
                .HasColumnName("VaN_KntNipE");
            entity.Property(e => e.VaNKntNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("VaN_KntNipKraj");
            entity.Property(e => e.VaNKntNrDomu)
                .HasMaxLength(10)
                .HasColumnName("VaN_KntNrDomu");
            entity.Property(e => e.VaNKntNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("VaN_KntNrLokalu");
            entity.Property(e => e.VaNKntPoczta)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntPoczta");
            entity.Property(e => e.VaNKntPowiat)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntPowiat");
            entity.Property(e => e.VaNKntUlica)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntUlica");
            entity.Property(e => e.VaNKntWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("VaN_KntWojewodztwo");
            entity.Property(e => e.VaNKodKrajuOss)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VaN_KodKrajuOSS");
            entity.Property(e => e.VaNKorekta).HasColumnName("VaN_Korekta");
            entity.Property(e => e.VaNKorektaDo)
                .HasMaxLength(256)
                .HasColumnName("VaN_KorektaDo");
            entity.Property(e => e.VaNKorektaVat).HasColumnName("VaN_KorektaVAT");
            entity.Property(e => e.VaNKpRid).HasColumnName("VaN_KpRID");
            entity.Property(e => e.VaNKseFdataPrzyjecia)
                .HasColumnType("datetime")
                .HasColumnName("VaN_KSeFDataPrzyjecia");
            entity.Property(e => e.VaNKursDoKsiegowania).HasColumnName("VaN_KursDoKsiegowania");
            entity.Property(e => e.VaNKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("VaN_KursL");
            entity.Property(e => e.VaNKursLdoVat)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("VaN_KursLDoVAT");
            entity.Property(e => e.VaNKursLoss)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("VaN_KursLOSS");
            entity.Property(e => e.VaNKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("VaN_KursM");
            entity.Property(e => e.VaNKursMdoVat)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("VaN_KursMDoVAT");
            entity.Property(e => e.VaNKursMoss)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("VaN_KursMOSS");
            entity.Property(e => e.VaNKursNumer).HasColumnName("VaN_KursNumer");
            entity.Property(e => e.VaNKursNumerDoVat).HasColumnName("VaN_KursNumerDoVAT");
            entity.Property(e => e.VaNKursNumerOss)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("VaN_KursNumerOSS");
            entity.Property(e => e.VaNKwartalOss).HasColumnName("VaN_KwartalOSS");
            entity.Property(e => e.VaNKwotaNkup)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_KwotaNKUP");
            entity.Property(e => e.VaNLp).HasColumnName("VaN_Lp");
            entity.Property(e => e.VaNMalyPod).HasColumnName("VaN_MalyPod");
            entity.Property(e => e.VaNMetodaKasowa).HasColumnName("VaN_MetodaKasowa");
            entity.Property(e => e.VaNNettoWal)
                .HasComputedColumnSql("([CDN].[SumVatTab_NettoWal]([VaN_VaNID]))", false)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_NettoWal");
            entity.Property(e => e.VaNNrKseF)
                .HasMaxLength(256)
                .HasDefaultValue("")
                .HasColumnName("VaN_NrKSeF");
            entity.Property(e => e.VaNOcr).HasColumnName("VaN_OCR");
            entity.Property(e => e.VaNOpeModId).HasColumnName("VaN_OpeModID");
            entity.Property(e => e.VaNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VaN_OpeModKod");
            entity.Property(e => e.VaNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("VaN_OpeModNazwisko");
            entity.Property(e => e.VaNOpeZalId).HasColumnName("VaN_OpeZalID");
            entity.Property(e => e.VaNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VaN_OpeZalKod");
            entity.Property(e => e.VaNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("VaN_OpeZalNazwisko");
            entity.Property(e => e.VaNOpis)
                .HasMaxLength(2048)
                .HasDefaultValue("")
                .HasColumnName("VaN_Opis");
            entity.Property(e => e.VaNPesel)
                .HasMaxLength(11)
                .HasDefaultValue("")
                .HasColumnName("VaN_Pesel");
            entity.Property(e => e.VaNPlatnikAdres2)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikAdres2");
            entity.Property(e => e.VaNPlatnikGmina)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikGmina");
            entity.Property(e => e.VaNPlatnikId).HasColumnName("VaN_PlatnikID");
            entity.Property(e => e.VaNPlatnikKodPocztowy)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikKodPocztowy");
            entity.Property(e => e.VaNPlatnikKraj)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikKraj");
            entity.Property(e => e.VaNPlatnikMiasto)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikMiasto");
            entity.Property(e => e.VaNPlatnikNazwa1)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikNazwa1");
            entity.Property(e => e.VaNPlatnikNazwa2)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikNazwa2");
            entity.Property(e => e.VaNPlatnikNazwa3)
                .HasMaxLength(250)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikNazwa3");
            entity.Property(e => e.VaNPlatnikNrDomu)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikNrDomu");
            entity.Property(e => e.VaNPlatnikNrLokalu)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikNrLokalu");
            entity.Property(e => e.VaNPlatnikPoczta)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikPoczta");
            entity.Property(e => e.VaNPlatnikPowiat)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikPowiat");
            entity.Property(e => e.VaNPlatnikRachunekLp).HasColumnName("VaN_PlatnikRachunekLp");
            entity.Property(e => e.VaNPlatnikTyp).HasColumnName("VaN_PlatnikTyp");
            entity.Property(e => e.VaNPlatnikUlica)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikUlica");
            entity.Property(e => e.VaNPlatnikWojewodztwo)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("VaN_PlatnikWojewodztwo");
            entity.Property(e => e.VaNPodId).HasColumnName("VaN_PodID");
            entity.Property(e => e.VaNPodImpProc)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VaN_PodImpProc");
            entity.Property(e => e.VaNPodImpWart)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_PodImpWart");
            entity.Property(e => e.VaNPodZalId).HasColumnName("VaN_PodZalId");
            entity.Property(e => e.VaNPodatekVat).HasColumnName("VaN_PodatekVat");
            entity.Property(e => e.VaNPodmiotTyp).HasColumnName("VaN_PodmiotTyp");
            entity.Property(e => e.VaNPodmiotZalTyp).HasColumnName("VaN_PodmiotZalTyp");
            entity.Property(e => e.VaNPreDekId).HasColumnName("VaN_PreDekID");
            entity.Property(e => e.VaNRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemBrutto");
            entity.Property(e => e.VaNRazemBruttoDoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemBruttoDoVAT");
            entity.Property(e => e.VaNRazemBruttoOss)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemBruttoOSS");
            entity.Property(e => e.VaNRazemBruttoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemBruttoWal");
            entity.Property(e => e.VaNRazemNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemNetto");
            entity.Property(e => e.VaNRazemNettoDoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemNettoDoVAT");
            entity.Property(e => e.VaNRazemNettoOss)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemNettoOSS");
            entity.Property(e => e.VaNRazemVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemVAT");
            entity.Property(e => e.VaNRazemVatdoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemVATDoVAT");
            entity.Property(e => e.VaNRazemVatoss)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_RazemVATOSS");
            entity.Property(e => e.VaNRejestr)
                .HasMaxLength(20)
                .HasColumnName("VaN_Rejestr");
            entity.Property(e => e.VaNRodzaj).HasColumnName("VaN_Rodzaj");
            entity.Property(e => e.VaNRokMies).HasColumnName("VaN_RokMies");
            entity.Property(e => e.VaNRokOss).HasColumnName("VaN_RokOSS");
            entity.Property(e => e.VaNRolnik).HasColumnName("VaN_Rolnik");
            entity.Property(e => e.VaNRozliczacOss).HasColumnName("VaN_RozliczacOSS");
            entity.Property(e => e.VaNRozliczacVat27).HasColumnName("VaN_RozliczacVat27");
            entity.Property(e => e.VaNRozliczacVat7).HasColumnName("VaN_RozliczacVat7");
            entity.Property(e => e.VaNRozliczacVatUe).HasColumnName("VaN_RozliczacVatUE");
            entity.Property(e => e.VaNRozliczono).HasColumnName("VaN_Rozliczono");
            entity.Property(e => e.VaNRycId).HasColumnName("VaN_RycID");
            entity.Property(e => e.VaNSplitPay).HasColumnName("VaN_SplitPay");
            entity.Property(e => e.VaNSrw).HasColumnName("VaN_Srw");
            entity.Property(e => e.VaNStaModId).HasColumnName("VaN_StaModId");
            entity.Property(e => e.VaNStaZalId).HasColumnName("VaN_StaZalId");
            entity.Property(e => e.VaNTermin)
                .HasColumnType("datetime")
                .HasColumnName("VaN_Termin");
            entity.Property(e => e.VaNTrnId).HasColumnName("VaN_TrnID");
            entity.Property(e => e.VaNTrybNettoVat).HasColumnName("VaN_TrybNettoVAT");
            entity.Property(e => e.VaNTsExport)
                .HasColumnType("datetime")
                .HasColumnName("VaN_TS_Export");
            entity.Property(e => e.VaNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("VaN_TS_Mod");
            entity.Property(e => e.VaNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("VaN_TS_Zal");
            entity.Property(e => e.VaNTyp).HasColumnName("VaN_Typ");
            entity.Property(e => e.VaNVanOrgId).HasColumnName("VaN_VanOrgId");
            entity.Property(e => e.VaNVatnkup)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_VATNKUP");
            entity.Property(e => e.VaNVatwal)
                .HasComputedColumnSql("([CDN].[SumVatTab_VATWal]([VaN_VaNID]))", false)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_VATWal");
            entity.Property(e => e.VaNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("VaN_Waluta");
            entity.Property(e => e.VaNWalutaDoVat)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("VaN_WalutaDoVAT");
            entity.Property(e => e.VaNWalutaOss)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("EUR")
                .HasColumnName("VaN_WalutaOSS");
            entity.Property(e => e.VaNWartoscZak)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_WartoscZak");
            entity.Property(e => e.VaNWewnetrzna).HasColumnName("VaN_Wewnetrzna");
            entity.Property(e => e.VaNWzId).HasColumnName("VaN_WzID");
            entity.Property(e => e.VaNZakId).HasColumnName("VaN_ZakID");
            entity.Property(e => e.VaNZaplacono).HasColumnName("VaN_Zaplacono");
            entity.Property(e => e.VaNZaplata)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaN_Zaplata");
            entity.Property(e => e.VaNZbVaNid).HasColumnName("VaN_ZbVaNID");
            entity.Property(e => e.VaNZbiorcza).HasColumnName("VaN_Zbiorcza");
            entity.Property(e => e.VanPlatnikRachunekNr)
                .HasMaxLength(51)
                .HasDefaultValue("")
                .HasColumnName("Van_PlatnikRachunekNr");

            entity.HasOne(d => d.VaNFpl).WithMany(p => p.VatNags)
                .HasForeignKey(d => d.VaNFplId)
                .HasConstraintName("FK_VanFormaPlatnosci");

            entity.HasOne(d => d.VaNKat).WithMany(p => p.VatNags)
                .HasForeignKey(d => d.VaNKatId)
                .HasConstraintName("FK_VaNKategorie");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.VatNags)
                .HasForeignKey(d => new { d.VaNPodId, d.VaNPodmiotTyp })
                .HasConstraintName("FK_VaNKontrah");
        });

        modelBuilder.Entity<VatTab>(entity =>
        {
            entity.HasKey(e => e.VaTVaTid)
                .HasName("VaT_Primary")
                .IsClustered(false)
                .HasFillFactor(100);

            entity.ToTable("VatTab", "CDN");

            entity.HasIndex(e => e.VaTKatId, "VaTKategorie").HasFillFactor(100);

            entity.HasIndex(e => new { e.VaTNetto, e.VaTStawkaSymbol }, "VaTNettoStawka").HasFillFactor(100);

            entity.HasIndex(e => e.VaTVaNid, "VaTVatNag")
                .IsClustered()
                .HasFillFactor(100);

            entity.Property(e => e.VaTVaTid).HasColumnName("VaT_VaTID");
            entity.Property(e => e.VaTFlaga).HasColumnName("VaT_Flaga");
            entity.Property(e => e.VaTKat2Id).HasColumnName("VaT_Kat2ID");
            entity.Property(e => e.VaTKat2Opis)
                .HasMaxLength(50)
                .HasColumnName("VaT_Kat2Opis");
            entity.Property(e => e.VaTKatId).HasColumnName("VaT_KatID");
            entity.Property(e => e.VaTKatOpis)
                .HasMaxLength(50)
                .HasColumnName("VaT_KatOpis");
            entity.Property(e => e.VaTKodKrajuOss)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VaT_KodKrajuOSS");
            entity.Property(e => e.VaTKolumnaKpr).HasColumnName("VaT_KolumnaKPR");
            entity.Property(e => e.VaTKolumnaRyc).HasColumnName("VaT_KolumnaRYC");
            entity.Property(e => e.VaTKwotaNkup)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_KwotaNKUP");
            entity.Property(e => e.VaTLp).HasColumnName("VaT_Lp");
            entity.Property(e => e.VaTNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_Netto");
            entity.Property(e => e.VaTNettoDoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_NettoDoVAT");
            entity.Property(e => e.VaTNettoOss)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_NettoOSS");
            entity.Property(e => e.VaTNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_NettoWal");
            entity.Property(e => e.VaTOdliczenia).HasColumnName("VaT_Odliczenia");
            entity.Property(e => e.VaTRodzajZakupu).HasColumnName("VaT_RodzajZakupu");
            entity.Property(e => e.VaTStawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VaT_Stawka");
            entity.Property(e => e.VaTStawkaSymbol)
                .HasMaxLength(10)
                .HasDefaultValue("")
                .HasColumnName("VaT_StawkaSymbol");
            entity.Property(e => e.VaTVaNid).HasColumnName("VaT_VaNID");
            entity.Property(e => e.VaTVaTorgId).HasColumnName("VaT_VaTOrgId");
            entity.Property(e => e.VaTVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_VAT");
            entity.Property(e => e.VaTVatdoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_VATDoVAT");
            entity.Property(e => e.VaTVatnkup)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_VATNKUP");
            entity.Property(e => e.VaTVatoss)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_VATOSS");
            entity.Property(e => e.VaTVatwal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaT_VATWal");
            entity.Property(e => e.VaTZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VaT_Zrodlowa");

            entity.HasOne(d => d.VaTKat2).WithMany(p => p.VatTabVaTKat2s)
                .HasForeignKey(d => d.VaTKat2Id)
                .HasConstraintName("FK_VaTKategorie2");

            entity.HasOne(d => d.VaTKat).WithMany(p => p.VatTabVaTKats)
                .HasForeignKey(d => d.VaTKatId)
                .HasConstraintName("FK_VaTKategorie");

            entity.HasOne(d => d.VaTVaN).WithMany(p => p.VatTabs)
                .HasForeignKey(d => d.VaTVaNid)
                .HasConstraintName("FK_VaTVatNag");
        });

        modelBuilder.Entity<VatTab7>(entity =>
        {
            entity.HasKey(e => e.Va7Va7Id)
                .HasName("Va7_Primary")
                .IsClustered(false)
                .HasFillFactor(100);

            entity.ToTable("VatTab7", "CDN");

            entity.HasIndex(e => e.Va7VaNid, "Va7Naglowek")
                .IsClustered()
                .HasFillFactor(100);

            entity.HasIndex(e => e.Va7RokMiesiac, "Va7RokMiesiac").HasFillFactor(100);

            entity.Property(e => e.Va7Va7Id).HasColumnName("Va7_Va7ID");
            entity.Property(e => e.Va7Flaga).HasColumnName("Va7_Flaga");
            entity.Property(e => e.Va7Netto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Va7_Netto");
            entity.Property(e => e.Va7Odliczenia).HasColumnName("Va7_Odliczenia");
            entity.Property(e => e.Va7RodzajZakupu).HasColumnName("Va7_RodzajZakupu");
            entity.Property(e => e.Va7RokMiesiac).HasColumnName("Va7_RokMiesiac");
            entity.Property(e => e.Va7Stawka)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Va7_Stawka");
            entity.Property(e => e.Va7VaNid).HasColumnName("Va7_VaNID");
            entity.Property(e => e.Va7Vat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Va7_VAT");
            entity.Property(e => e.Va7Zrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Va7_Zrodlowa");

            entity.HasOne(d => d.Va7VaN).WithMany(p => p.VatTab7s)
                .HasForeignKey(d => d.Va7VaNid)
                .HasConstraintName("FK_Va7Naglowek");
        });

        modelBuilder.Entity<VatZd>(entity =>
        {
            entity.HasKey(e => e.VaZVaZid)
                .HasName("VaZ_Primary")
                .HasFillFactor(100);

            entity.ToTable("VatZD", "CDN");

            entity.HasIndex(e => new { e.VaZBzdId, e.VaZTyp, e.VaZVaNid }, "VaZDokuments").HasFillFactor(100);

            entity.HasIndex(e => e.VaZBzdId, "VaZ_BZdId_Index").HasFillFactor(100);

            entity.HasIndex(e => e.VaZDkNid, "VaZ_DkNId_Index").HasFillFactor(100);

            entity.HasIndex(e => e.VaZTermin, "VaZ_Termin_Index").HasFillFactor(100);

            entity.HasIndex(e => e.VaZVaNid, "VaZ_VaNId_Index").HasFillFactor(100);

            entity.Property(e => e.VaZVaZid).HasColumnName("VaZ_VaZId");
            entity.Property(e => e.VaZBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_Brutto");
            entity.Property(e => e.VaZBufor).HasColumnName("VaZ_Bufor");
            entity.Property(e => e.VaZBzdId).HasColumnName("VaZ_BZdId");
            entity.Property(e => e.VaZDataWys)
                .HasColumnType("datetime")
                .HasColumnName("VaZ_DataWys");
            entity.Property(e => e.VaZDkNid).HasColumnName("VaZ_DkNId");
            entity.Property(e => e.VaZDoRoliczeniaNaDzienObliczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_DoRoliczeniaNaDzienObliczenia");
            entity.Property(e => e.VaZDokument)
                .HasMaxLength(256)
                .HasColumnName("VaZ_Dokument");
            entity.Property(e => e.VaZFlaga).HasColumnName("VaZ_Flaga");
            entity.Property(e => e.VaZKntNazwa1)
                .HasMaxLength(255)
                .HasColumnName("VaZ_KntNazwa1");
            entity.Property(e => e.VaZKntNazwa2)
                .HasMaxLength(255)
                .HasColumnName("VaZ_KntNazwa2");
            entity.Property(e => e.VaZKntNazwa3)
                .HasMaxLength(255)
                .HasColumnName("VaZ_KntNazwa3");
            entity.Property(e => e.VaZKntNipE)
                .HasMaxLength(20)
                .HasColumnName("VaZ_KntNipE");
            entity.Property(e => e.VaZKorektaNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_KorektaNetto");
            entity.Property(e => e.VaZKorektaVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_KorektaVat");
            entity.Property(e => e.VaZNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_Netto");
            entity.Property(e => e.VaZOdliczenia).HasColumnName("VaZ_Odliczenia");
            entity.Property(e => e.VaZPoprzednioDoRoliczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_PoprzednioDoRoliczenia");
            entity.Property(e => e.VaZPoprzednioRozliczono)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_PoprzednioRozliczono");
            entity.Property(e => e.VaZRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_RazemBrutto");
            entity.Property(e => e.VaZRazemNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_RazemNetto");
            entity.Property(e => e.VaZRazemVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_RazemVAT");
            entity.Property(e => e.VaZRodzajZakupu).HasColumnName("VaZ_RodzajZakupu");
            entity.Property(e => e.VaZRoliczonoNaDzienObliczenia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_RoliczonoNaDzienObliczenia");
            entity.Property(e => e.VaZStawka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_Stawka");
            entity.Property(e => e.VaZSumaKwotRozliczen)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_SumaKwotRozliczen");
            entity.Property(e => e.VaZSumaKwotZdarzen)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_SumaKwotZdarzen");
            entity.Property(e => e.VaZTermin)
                .HasColumnType("datetime")
                .HasColumnName("VaZ_Termin");
            entity.Property(e => e.VaZTerminPlatnosci)
                .HasColumnType("datetime")
                .HasColumnName("VaZ_TerminPlatnosci");
            entity.Property(e => e.VaZTrNid).HasColumnName("VaZ_TrNId");
            entity.Property(e => e.VaZTyp).HasColumnName("VaZ_Typ");
            entity.Property(e => e.VaZVaNid).HasColumnName("VaZ_VaNId");
            entity.Property(e => e.VaZVaNidZk).HasColumnName("VaZ_VaNId_ZK");
            entity.Property(e => e.VaZVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VaZ_VAT");

            entity.HasOne(d => d.VaZDkN).WithMany(p => p.VatZds)
                .HasForeignKey(d => d.VaZDkNid)
                .HasConstraintName("FK_VaZDeklNag");
        });

        modelBuilder.Entity<VatatrybutyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VATAtrybutyView", "CDN");

            entity.Property(e => e.VavAkcyzaProc)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VAV_AkcyzaProc");
            entity.Property(e => e.VavAkcyzaWart)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_AkcyzaWart");
            entity.Property(e => e.VavAppId).HasColumnName("VAV_AppID");
            entity.Property(e => e.VavAppRowId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VAV_AppRowID");
            entity.Property(e => e.VavAutoVat7Kasa).HasColumnName("VAV_AutoVat7Kasa");
            entity.Property(e => e.VavCloProc)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VAV_CloProc");
            entity.Property(e => e.VavCloWart)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_CloWart");
            entity.Property(e => e.VavDatId).HasColumnName("VAV_DAtId");
            entity.Property(e => e.VavDatWartoscTxt)
                .HasMaxLength(255)
                .HasColumnName("VAV_DAtWartoscTxt");
            entity.Property(e => e.VavDataKur)
                .HasColumnType("datetime")
                .HasColumnName("VAV_DataKur");
            entity.Property(e => e.VavDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("VAV_DataOpe");
            entity.Property(e => e.VavDataWys)
                .HasColumnType("datetime")
                .HasColumnName("VAV_DataWys");
            entity.Property(e => e.VavDataZap)
                .HasColumnType("datetime")
                .HasColumnName("VAV_DataZap");
            entity.Property(e => e.VavDeAczyDrukowac).HasColumnName("VAV_DeACzyDrukowac");
            entity.Property(e => e.VavDeAczyKod).HasColumnName("VAV_DeACzyKod");
            entity.Property(e => e.VavDeAczyKopiowacFa).HasColumnName("VAV_DeACzyKopiowacFA");
            entity.Property(e => e.VavDeAczyPrzenosic).HasColumnName("VAV_DeACzyPrzenosic");
            entity.Property(e => e.VavDeAformat).HasColumnName("VAV_DeAFormat");
            entity.Property(e => e.VavDeAid).HasColumnName("VAV_DeAId");
            entity.Property(e => e.VavDeAkod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VAV_DeAKod");
            entity.Property(e => e.VavDeAnazwa)
                .HasMaxLength(40)
                .HasColumnName("VAV_DeANazwa");
            entity.Property(e => e.VavDeAtyp).HasColumnName("VAV_DeATyp");
            entity.Property(e => e.VavDeAzalezny).HasColumnName("VAV_DeAZalezny");
            entity.Property(e => e.VavDekId).HasColumnName("VAV_DekID");
            entity.Property(e => e.VavDeklRokMies).HasColumnName("VAV_DeklRokMies");
            entity.Property(e => e.VavDeklRokMiesKasa).HasColumnName("VAV_DeklRokMiesKasa");
            entity.Property(e => e.VavDetal).HasColumnName("VAV_Detal");
            entity.Property(e => e.VavDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("VAV_Dokument");
            entity.Property(e => e.VavExport).HasColumnName("VAV_Export");
            entity.Property(e => e.VavFinalny).HasColumnName("VAV_Finalny");
            entity.Property(e => e.VavFiskalna).HasColumnName("VAV_Fiskalna");
            entity.Property(e => e.VavFplId).HasColumnName("VAV_FplID");
            entity.Property(e => e.VavIdentKsieg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VAV_IdentKsieg");
            entity.Property(e => e.VavIdentKsiegNr).HasColumnName("VAV_IdentKsiegNr");
            entity.Property(e => e.VavIdentKsiegStr)
                .HasMaxLength(50)
                .HasColumnName("VAV_IdentKsiegStr");
            entity.Property(e => e.VavImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("VAV_ImportAppId");
            entity.Property(e => e.VavImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("VAV_ImportRowId");
            entity.Property(e => e.VavKatId).HasColumnName("VAV_KatID");
            entity.Property(e => e.VavKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VAV_Kategoria");
            entity.Property(e => e.VavKntAdres2)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntAdres2");
            entity.Property(e => e.VavKntGmina)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntGmina");
            entity.Property(e => e.VavKntKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VAV_KntKodPocztowy");
            entity.Property(e => e.VavKntKonto)
                .HasMaxLength(20)
                .HasColumnName("VAV_KntKonto");
            entity.Property(e => e.VavKntKraj)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntKraj");
            entity.Property(e => e.VavKntMiasto)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntMiasto");
            entity.Property(e => e.VavKntNazwa1)
                .HasMaxLength(50)
                .HasColumnName("VAV_KntNazwa1");
            entity.Property(e => e.VavKntNazwa2)
                .HasMaxLength(50)
                .HasColumnName("VAV_KntNazwa2");
            entity.Property(e => e.VavKntNazwa3)
                .HasMaxLength(250)
                .HasColumnName("VAV_KntNazwa3");
            entity.Property(e => e.VavKntNipE)
                .HasMaxLength(20)
                .HasColumnName("VAV_KntNipE");
            entity.Property(e => e.VavKntNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("VAV_KntNipKraj");
            entity.Property(e => e.VavKntNrDomu)
                .HasMaxLength(10)
                .HasColumnName("VAV_KntNrDomu");
            entity.Property(e => e.VavKntNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("VAV_KntNrLokalu");
            entity.Property(e => e.VavKntPoczta)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntPoczta");
            entity.Property(e => e.VavKntPowiat)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntPowiat");
            entity.Property(e => e.VavKntUlica)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntUlica");
            entity.Property(e => e.VavKntWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("VAV_KntWojewodztwo");
            entity.Property(e => e.VavKorekta).HasColumnName("VAV_Korekta");
            entity.Property(e => e.VavKorektaDo)
                .HasMaxLength(256)
                .HasColumnName("VAV_KorektaDo");
            entity.Property(e => e.VavKorektaVat).HasColumnName("VAV_KorektaVAT");
            entity.Property(e => e.VavKpRid).HasColumnName("VAV_KpRID");
            entity.Property(e => e.VavKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("VAV_KursL");
            entity.Property(e => e.VavKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("VAV_KursM");
            entity.Property(e => e.VavKursNumer).HasColumnName("VAV_KursNumer");
            entity.Property(e => e.VavLp).HasColumnName("VAV_Lp");
            entity.Property(e => e.VavMalyPod).HasColumnName("VAV_MalyPod");
            entity.Property(e => e.VavOpeModId).HasColumnName("VAV_OpeModID");
            entity.Property(e => e.VavOpeZalId).HasColumnName("VAV_OpeZalID");
            entity.Property(e => e.VavPodId).HasColumnName("VAV_PodID");
            entity.Property(e => e.VavPodImpProc)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VAV_PodImpProc");
            entity.Property(e => e.VavPodImpWart)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_PodImpWart");
            entity.Property(e => e.VavPodZalId).HasColumnName("VAV_PodZalId");
            entity.Property(e => e.VavPodmiotTyp).HasColumnName("VAV_PodmiotTyp");
            entity.Property(e => e.VavPodmiotZalTyp).HasColumnName("VAV_PodmiotZalTyp");
            entity.Property(e => e.VavRazemBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_RazemBrutto");
            entity.Property(e => e.VavRazemBruttoDoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_RazemBruttoDoVAT");
            entity.Property(e => e.VavRazemBruttoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_RazemBruttoWal");
            entity.Property(e => e.VavRazemNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_RazemNetto");
            entity.Property(e => e.VavRazemNettoDoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_RazemNettoDoVAT");
            entity.Property(e => e.VavRazemVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_RazemVAT");
            entity.Property(e => e.VavRazemVatdoVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_RazemVATDoVAT");
            entity.Property(e => e.VavRejestr)
                .HasMaxLength(20)
                .HasColumnName("VAV_Rejestr");
            entity.Property(e => e.VavRodzaj).HasColumnName("VAV_Rodzaj");
            entity.Property(e => e.VavRokMies).HasColumnName("VAV_RokMies");
            entity.Property(e => e.VavRolnik).HasColumnName("VAV_Rolnik");
            entity.Property(e => e.VavRozliczacVat7).HasColumnName("VAV_RozliczacVat7");
            entity.Property(e => e.VavRozliczacVatUe).HasColumnName("VAV_RozliczacVatUE");
            entity.Property(e => e.VavRozliczono).HasColumnName("VAV_Rozliczono");
            entity.Property(e => e.VavRycId).HasColumnName("VAV_RycID");
            entity.Property(e => e.VavStaModId).HasColumnName("VAV_StaModId");
            entity.Property(e => e.VavStaZalId).HasColumnName("VAV_StaZalId");
            entity.Property(e => e.VavTermin)
                .HasColumnType("datetime")
                .HasColumnName("VAV_Termin");
            entity.Property(e => e.VavTrnId).HasColumnName("VAV_TrnID");
            entity.Property(e => e.VavTsExport)
                .HasColumnType("datetime")
                .HasColumnName("VAV_TS_Export");
            entity.Property(e => e.VavTsMod)
                .HasColumnType("datetime")
                .HasColumnName("VAV_TS_Mod");
            entity.Property(e => e.VavTsZal)
                .HasColumnType("datetime")
                .HasColumnName("VAV_TS_Zal");
            entity.Property(e => e.VavTyp).HasColumnName("VAV_Typ");
            entity.Property(e => e.VavVaNid).HasColumnName("VAV_VaNID");
            entity.Property(e => e.VavVanOrgId).HasColumnName("VAV_VanOrgId");
            entity.Property(e => e.VavVavid).HasColumnName("VAV_VAVID");
            entity.Property(e => e.VavWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("VAV_Waluta");
            entity.Property(e => e.VavWartoscZak)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_WartoscZak");
            entity.Property(e => e.VavWewnetrzna).HasColumnName("VAV_Wewnetrzna");
            entity.Property(e => e.VavWzId).HasColumnName("VAV_WzID");
            entity.Property(e => e.VavZaplata)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("VAV_Zaplata");
        });

        modelBuilder.Entity<WalElem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WalElem", "CDN");

            entity.Property(e => e.WaEKursL)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WaE_KursL");
            entity.Property(e => e.WaEKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("WaE_KursM");
            entity.Property(e => e.WaEKursTs).HasColumnName("WaE_KursTS");
            entity.Property(e => e.WaELp).HasColumnName("WaE_Lp");
            entity.Property(e => e.WaESymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WaE_Symbol");
        });

        modelBuilder.Entity<WalKontum>(entity =>
        {
            entity.HasKey(e => e.WaKWaKid)
                .HasName("WaK_Primary")
                .HasFillFactor(100);

            entity.ToTable("WalKonta", "CDN", tb => tb.HasTrigger("WalKonta_Update_Trigger"));

            entity.HasIndex(e => e.WaKSymbol, "WaKSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WaKWaKid).HasColumnName("WaK_WaKID");
            entity.Property(e => e.WaKKontoMa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WaK_KontoMa");
            entity.Property(e => e.WaKKontoWn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WaK_KontoWn");
            entity.Property(e => e.WaKSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WaK_Symbol");
        });

        modelBuilder.Entity<WalNag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WalNag", "CDN");

            entity.Property(e => e.WaNAktywna).HasColumnName("WaN_Aktywna");
            entity.Property(e => e.WaNKontoMinus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("WaN_KontoMinus");
            entity.Property(e => e.WaNKontoPlus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("WaN_KontoPlus");
            entity.Property(e => e.WaNNazwa)
                .HasMaxLength(40)
                .HasColumnName("WaN_Nazwa");
            entity.Property(e => e.WaNPanstwo)
                .HasMaxLength(40)
                .HasColumnName("WaN_Panstwo");
            entity.Property(e => e.WaNParytet)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("WaN_Parytet");
            entity.Property(e => e.WaNSlownie1)
                .HasMaxLength(40)
                .HasColumnName("WaN_Slownie1");
            entity.Property(e => e.WaNSlownie2)
                .HasMaxLength(40)
                .HasColumnName("WaN_Slownie2");
            entity.Property(e => e.WaNSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WaN_Symbol");
            entity.Property(e => e.WaNSymbolEmu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WaN_SymbolEMU");
            entity.Property(e => e.WaNWsk).HasColumnName("WaN_Wsk");
        });

        modelBuilder.Entity<WartoscZakupuFapaview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WartoscZakupuFAPAView", "CDN");

            entity.Property(e => e.Eid).HasColumnName("EId");
            entity.Property(e => e.WartoscZakupu).HasColumnType("decimal(38, 2)");
        });

        modelBuilder.Entity<WdrKopieElektroniczne>(entity =>
        {
            entity.HasKey(e => e.WdKeWdKeid)
                .HasName("WdKE_Primary")
                .HasFillFactor(100);

            entity.ToTable("WdrKopieElektroniczne", "CDN", tb =>
                {
                    tb.HasTrigger("WdrKopieElektroniczne_Delete_Trigger");
                    tb.HasTrigger("WdrKopieElektroniczne_Insert_Trigger");
                });

            entity.HasIndex(e => e.WdKeCallProcId, "WdKE_ByCallProcId").HasFillFactor(100);

            entity.HasIndex(e => new { e.WdKeObjType, e.WdKeObjSubType, e.WdKeObjId }, "WdKE_ByObj").HasFillFactor(100);

            entity.HasIndex(e => e.WdKeObjDate, "WdKE_ByObjDate").HasFillFactor(100);

            entity.HasIndex(e => e.WdKePrnDate, "WdKE_ByPrnDate").HasFillFactor(100);

            entity.HasIndex(e => e.WdKeProcId, "WdKE_ByProcId").HasFillFactor(100);

            entity.Property(e => e.WdKeWdKeid).HasColumnName("WdKE_WdKEId");
            entity.Property(e => e.WdKeBipoint).HasColumnName("WdKE_BIPoint");
            entity.Property(e => e.WdKeCallProcId).HasColumnName("WdKE_CallProcId");
            entity.Property(e => e.WdKeCallProcName)
                .HasMaxLength(255)
                .HasColumnName("WdKE_CallProcName");
            entity.Property(e => e.WdKeDostepnyDlaLoginSso)
                .HasMaxLength(128)
                .HasColumnName("WdKE_DostepnyDla_LoginSSO");
            entity.Property(e => e.WdKeEPracownik).HasColumnName("WdKE_ePracownik");
            entity.Property(e => e.WdKeEPracownikDate)
                .HasColumnType("datetime")
                .HasColumnName("WdKE_ePracownikDate");
            entity.Property(e => e.WdKeFlaga).HasColumnName("WdKE_Flaga");
            entity.Property(e => e.WdKeIBardLink).HasColumnName("WdKE_iBardLink");
            entity.Property(e => e.WdKeIBardSciezka).HasColumnName("WdKE_iBardSciezka");
            entity.Property(e => e.WdKeIbardId).HasColumnName("WdKE_IBardId");
            entity.Property(e => e.WdKeObjDate)
                .HasColumnType("datetime")
                .HasColumnName("WdKE_ObjDate");
            entity.Property(e => e.WdKeObjDescription)
                .HasMaxLength(1024)
                .HasColumnName("WdKE_ObjDescription");
            entity.Property(e => e.WdKeObjId).HasColumnName("WdKE_ObjId");
            entity.Property(e => e.WdKeObjModOpeId).HasColumnName("WdKE_ObjModOpeId");
            entity.Property(e => e.WdKeObjName)
                .HasMaxLength(512)
                .HasColumnName("WdKE_ObjName");
            entity.Property(e => e.WdKeObjSubType).HasColumnName("WdKE_ObjSubType");
            entity.Property(e => e.WdKeObjSubjectId).HasColumnName("WdKE_ObjSubjectId");
            entity.Property(e => e.WdKeObjSubjectType).HasColumnName("WdKE_ObjSubjectType");
            entity.Property(e => e.WdKeObjType).HasColumnName("WdKE_ObjType");
            entity.Property(e => e.WdKePrnContent)
                .HasColumnType("image")
                .HasColumnName("WdKE_PrnContent");
            entity.Property(e => e.WdKePrnContentLen).HasColumnName("WdKE_PrnContentLen");
            entity.Property(e => e.WdKePrnDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("WdKE_PrnDate");
            entity.Property(e => e.WdKePrnFileName)
                .HasMaxLength(255)
                .HasColumnName("WdKE_PrnFileName");
            entity.Property(e => e.WdKePrnId).HasColumnName("WdKE_PrnId");
            entity.Property(e => e.WdKePrnName)
                .HasMaxLength(255)
                .HasDefaultValue("")
                .HasColumnName("WdKE_PrnName");
            entity.Property(e => e.WdKePrnOpeId).HasColumnName("WdKE_PrnOpeId");
            entity.Property(e => e.WdKePrnOpeNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WdKE_PrnOpeNazwisko");
            entity.Property(e => e.WdKeProcId).HasColumnName("WdKE_ProcId");
            entity.Property(e => e.WdKeProcName)
                .HasMaxLength(255)
                .HasColumnName("WdKE_ProcName");
            entity.Property(e => e.WdKeUdostepnilLoginSso)
                .HasMaxLength(128)
                .HasColumnName("WdKE_Udostepnil_LoginSSO");
        });

        modelBuilder.Entity<WindykacjaLog>(entity =>
        {
            entity.HasKey(e => e.WiLWiLid)
                .HasName("WiL_Primary")
                .HasFillFactor(100);

            entity.ToTable("WindykacjaLog", "CDN");

            entity.HasIndex(e => e.WiLData, "WiL_DataIndex").HasFillFactor(100);

            entity.HasIndex(e => new { e.WiLPodmiotTyp, e.WiLPodmiotId }, "WiL_PodmiotIndex").HasFillFactor(100);

            entity.Property(e => e.WiLWiLid).HasColumnName("WiL_WiLId");
            entity.Property(e => e.WiLAkcja).HasColumnName("WiL_Akcja");
            entity.Property(e => e.WiLAkcjaId).HasColumnName("WiL_AkcjaId");
            entity.Property(e => e.WiLBlad).HasColumnName("WiL_Blad");
            entity.Property(e => e.WiLData)
                .HasColumnType("datetime")
                .HasColumnName("WiL_Data");
            entity.Property(e => e.WiLDokumentGuid).HasColumnName("WiL_DokumentGUID");
            entity.Property(e => e.WiLDokumentId).HasColumnName("WiL_DokumentId");
            entity.Property(e => e.WiLDokumentTyp).HasColumnName("WiL_DokumentTyp");
            entity.Property(e => e.WiLNumerDok)
                .HasMaxLength(256)
                .HasColumnName("WiL_NumerDok");
            entity.Property(e => e.WiLOpis)
                .HasMaxLength(1024)
                .HasColumnName("WiL_Opis");
            entity.Property(e => e.WiLPlatnoscId).HasColumnName("WiL_PlatnoscId");
            entity.Property(e => e.WiLPodmiotId).HasColumnName("WiL_PodmiotId");
            entity.Property(e => e.WiLPodmiotTyp).HasColumnName("WiL_PodmiotTyp");
            entity.Property(e => e.WiLSource).HasColumnName("WiL_Source");
        });

        modelBuilder.Entity<WkrZaznaczenia2>(entity =>
        {
            entity.HasKey(e => new { e.WkZ2Guid, e.WkZ2RekordLp })
                .HasName("WkZ2_Primary")
                .HasFillFactor(100);

            entity.ToTable("WkrZaznaczenia2", "CDN");

            entity.Property(e => e.WkZ2Guid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WkZ2_GUID");
            entity.Property(e => e.WkZ2RekordLp).HasColumnName("WkZ2_RekordLp");
            entity.Property(e => e.WkZ2Gidfirma).HasColumnName("WkZ2_GIDFirma");
            entity.Property(e => e.WkZ2Gidlp).HasColumnName("WkZ2_GIDLp");
            entity.Property(e => e.WkZ2Gidnumer).HasColumnName("WkZ2_GIDNumer");
            entity.Property(e => e.WkZ2Gidtyp).HasColumnName("WkZ2_GIDTyp");
        });

        modelBuilder.Entity<Wymiary>(entity =>
        {
            entity.HasKey(e => e.WyyWyyId)
                .HasName("Wyy_Primary")
                .HasFillFactor(100);

            entity.ToTable("Wymiary", "CDN", tb =>
                {
                    tb.HasTrigger("Wymiary_AfterUpdate_Trigger");
                    tb.HasTrigger("Wymiary_Delete_Trigger");
                    tb.HasTrigger("Wymiary_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.WyyParentId, "WyyParentId").HasFillFactor(100);

            entity.Property(e => e.WyyWyyId).HasColumnName("Wyy_WyyID");
            entity.Property(e => e.WyyAktywny).HasColumnName("Wyy_Aktywny");
            entity.Property(e => e.WyyD001).HasColumnName("Wyy_D001");
            entity.Property(e => e.WyyD002).HasColumnName("Wyy_D002");
            entity.Property(e => e.WyyD003).HasColumnName("Wyy_D003");
            entity.Property(e => e.WyyD004).HasColumnName("Wyy_D004");
            entity.Property(e => e.WyyD005).HasColumnName("Wyy_D005");
            entity.Property(e => e.WyyD006).HasColumnName("Wyy_D006");
            entity.Property(e => e.WyyD007).HasColumnName("Wyy_D007");
            entity.Property(e => e.WyyD008).HasColumnName("Wyy_D008");
            entity.Property(e => e.WyyD009).HasColumnName("Wyy_D009");
            entity.Property(e => e.WyyD010).HasColumnName("Wyy_D010");
            entity.Property(e => e.WyyD011).HasColumnName("Wyy_D011");
            entity.Property(e => e.WyyD012).HasColumnName("Wyy_D012");
            entity.Property(e => e.WyyD013).HasColumnName("Wyy_D013");
            entity.Property(e => e.WyyD014).HasColumnName("Wyy_D014");
            entity.Property(e => e.WyyD015).HasColumnName("Wyy_D015");
            entity.Property(e => e.WyyD016).HasColumnName("Wyy_D016");
            entity.Property(e => e.WyyD017).HasColumnName("Wyy_D017");
            entity.Property(e => e.WyyD018).HasColumnName("Wyy_D018");
            entity.Property(e => e.WyyD019).HasColumnName("Wyy_D019");
            entity.Property(e => e.WyyD020).HasColumnName("Wyy_D020");
            entity.Property(e => e.WyyD021).HasColumnName("Wyy_D021");
            entity.Property(e => e.WyyD022).HasColumnName("Wyy_D022");
            entity.Property(e => e.WyyD023).HasColumnName("Wyy_D023");
            entity.Property(e => e.WyyD024).HasColumnName("Wyy_D024");
            entity.Property(e => e.WyyD025).HasColumnName("Wyy_D025");
            entity.Property(e => e.WyyD026).HasColumnName("Wyy_D026");
            entity.Property(e => e.WyyD027).HasColumnName("Wyy_D027");
            entity.Property(e => e.WyyD028).HasColumnName("Wyy_D028");
            entity.Property(e => e.WyyD029).HasColumnName("Wyy_D029");
            entity.Property(e => e.WyyD030).HasColumnName("Wyy_D030");
            entity.Property(e => e.WyyD031).HasColumnName("Wyy_D031");
            entity.Property(e => e.WyyD032).HasColumnName("Wyy_D032");
            entity.Property(e => e.WyyD033).HasColumnName("Wyy_D033");
            entity.Property(e => e.WyyD034).HasColumnName("Wyy_D034");
            entity.Property(e => e.WyyD035).HasColumnName("Wyy_D035");
            entity.Property(e => e.WyyD036).HasColumnName("Wyy_D036");
            entity.Property(e => e.WyyD037).HasColumnName("Wyy_D037");
            entity.Property(e => e.WyyD038).HasColumnName("Wyy_D038");
            entity.Property(e => e.WyyD039).HasColumnName("Wyy_D039");
            entity.Property(e => e.WyyD040).HasColumnName("Wyy_D040");
            entity.Property(e => e.WyyKatId).HasColumnName("Wyy_KatId");
            entity.Property(e => e.WyyKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Wyy_Kod");
            entity.Property(e => e.WyyKontoNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Wyy_KontoNumer");
            entity.Property(e => e.WyyNazwa)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("Wyy_Nazwa");
            entity.Property(e => e.WyyOpeModId).HasColumnName("Wyy_OpeModID");
            entity.Property(e => e.WyyOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Wyy_OpeModKod");
            entity.Property(e => e.WyyOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Wyy_OpeModNazwisko");
            entity.Property(e => e.WyyOpeZalId).HasColumnName("Wyy_OpeZalID");
            entity.Property(e => e.WyyOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Wyy_OpeZalKod");
            entity.Property(e => e.WyyOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Wyy_OpeZalNazwisko");
            entity.Property(e => e.WyyOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Wyy_Opis");
            entity.Property(e => e.WyyParentId).HasColumnName("Wyy_ParentID");
            entity.Property(e => e.WyyRootId).HasColumnName("Wyy_RootID");
            entity.Property(e => e.WyySlownikId).HasColumnName("Wyy_SlownikId");
            entity.Property(e => e.WyySlownikTyp).HasColumnName("Wyy_SlownikTyp");
            entity.Property(e => e.WyyStaModId).HasColumnName("Wyy_StaModId");
            entity.Property(e => e.WyyStaZalId).HasColumnName("Wyy_StaZalId");
            entity.Property(e => e.WyySystemowy).HasColumnName("Wyy_Systemowy");
            entity.Property(e => e.WyyTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Wyy_TS_Mod");
            entity.Property(e => e.WyyTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Wyy_TS_Zal");
            entity.Property(e => e.WyyTyp).HasColumnName("Wyy_Typ");
            entity.Property(e => e.WyyTypWymiaru).HasColumnName("Wyy_TypWymiaru");
            entity.Property(e => e.WyyW001).HasColumnName("Wyy_W001");
            entity.Property(e => e.WyyW002).HasColumnName("Wyy_W002");
            entity.Property(e => e.WyyW003).HasColumnName("Wyy_W003");
            entity.Property(e => e.WyyW004).HasColumnName("Wyy_W004");
            entity.Property(e => e.WyyW005).HasColumnName("Wyy_W005");
            entity.Property(e => e.WyyW006).HasColumnName("Wyy_W006");
            entity.Property(e => e.WyyW007).HasColumnName("Wyy_W007");
            entity.Property(e => e.WyyW008).HasColumnName("Wyy_W008");
            entity.Property(e => e.WyyW009).HasColumnName("Wyy_W009");
            entity.Property(e => e.WyyW010).HasColumnName("Wyy_W010");
            entity.Property(e => e.WyyW011).HasColumnName("Wyy_W011");
            entity.Property(e => e.WyyW012).HasColumnName("Wyy_W012");
            entity.Property(e => e.WyyW013).HasColumnName("Wyy_W013");
            entity.Property(e => e.WyyW014).HasColumnName("Wyy_W014");
            entity.Property(e => e.WyyW015).HasColumnName("Wyy_W015");
            entity.Property(e => e.WyyW016).HasColumnName("Wyy_W016");
            entity.Property(e => e.WyyW017).HasColumnName("Wyy_W017");
            entity.Property(e => e.WyyW018).HasColumnName("Wyy_W018");
            entity.Property(e => e.WyyW019).HasColumnName("Wyy_W019");
            entity.Property(e => e.WyyW020).HasColumnName("Wyy_W020");
            entity.Property(e => e.WyyW021).HasColumnName("Wyy_W021");
            entity.Property(e => e.WyyW022).HasColumnName("Wyy_W022");
            entity.Property(e => e.WyyW023).HasColumnName("Wyy_W023");
            entity.Property(e => e.WyyW024).HasColumnName("Wyy_W024");
            entity.Property(e => e.WyyW025).HasColumnName("Wyy_W025");
            entity.Property(e => e.WyyW026).HasColumnName("Wyy_W026");
            entity.Property(e => e.WyyW027).HasColumnName("Wyy_W027");
            entity.Property(e => e.WyyW028).HasColumnName("Wyy_W028");
            entity.Property(e => e.WyyW029).HasColumnName("Wyy_W029");
            entity.Property(e => e.WyyW030).HasColumnName("Wyy_W030");
            entity.Property(e => e.WyyW031).HasColumnName("Wyy_W031");
            entity.Property(e => e.WyyW032).HasColumnName("Wyy_W032");
            entity.Property(e => e.WyyW033).HasColumnName("Wyy_W033");
            entity.Property(e => e.WyyW034).HasColumnName("Wyy_W034");
            entity.Property(e => e.WyyW035).HasColumnName("Wyy_W035");
            entity.Property(e => e.WyyW036).HasColumnName("Wyy_W036");
            entity.Property(e => e.WyyW037).HasColumnName("Wyy_W037");
            entity.Property(e => e.WyyW038).HasColumnName("Wyy_W038");
            entity.Property(e => e.WyyW039).HasColumnName("Wyy_W039");
            entity.Property(e => e.WyyW040).HasColumnName("Wyy_W040");
            entity.Property(e => e.WyyWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Wyy_Wartosc");
        });

        modelBuilder.Entity<WymiaryWartosci>(entity =>
        {
            entity.HasKey(e => e.WyWWyWid)
                .HasName("WyW_Primary")
                .HasFillFactor(100);

            entity.ToTable("WymiaryWartosci", "CDN");

            entity.HasIndex(e => new { e.WyWDokumentTyp, e.WyWDokumentId }, "WyWDokument").HasFillFactor(100);

            entity.HasIndex(e => e.WyWGuid, "WyWGUID").HasFillFactor(100);

            entity.HasIndex(e => e.WyWWyyId, "WyWWyyId").HasFillFactor(100);

            entity.Property(e => e.WyWWyWid).HasColumnName("WyW_WyWID");
            entity.Property(e => e.WyWDokumentId).HasColumnName("WyW_DokumentId");
            entity.Property(e => e.WyWDokumentTyp).HasColumnName("WyW_DokumentTyp");
            entity.Property(e => e.WyWGuid)
                .HasMaxLength(255)
                .HasColumnName("WyW_GUID");
            entity.Property(e => e.WyWKwota)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WyW_Kwota");
            entity.Property(e => e.WyWKwotaPozycji)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WyW_KwotaPozycji");
            entity.Property(e => e.WyWLpPozycji).HasColumnName("WyW_LpPozycji");
            entity.Property(e => e.WyWProcent)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WyW_Procent");
            entity.Property(e => e.WyWSlownikId).HasColumnName("WyW_SlownikId");
            entity.Property(e => e.WyWSourceType).HasColumnName("WyW_SourceType");
            entity.Property(e => e.WyWSrcguid)
                .HasMaxLength(255)
                .HasColumnName("WyW_SRCGUID");
            entity.Property(e => e.WyWWartosc)
                .HasMaxLength(255)
                .HasColumnName("WyW_Wartosc");
            entity.Property(e => e.WyWWyyId).HasColumnName("WyW_WyyId");
        });

        modelBuilder.Entity<WypElementy>(entity =>
        {
            entity.HasKey(e => e.WpeWpeId)
                .HasName("WPE_Primary")
                .HasFillFactor(100);

            entity.ToTable("WypElementy", "CDN", tb =>
                {
                    tb.HasTrigger("WypElementy2WypSkladniki_Delete_Trigger");
                    tb.HasTrigger("WypElementy_InsertUpdate_Trigger");
                    tb.HasTrigger("WypElementy_Update_Trigger");
                });

            entity.HasIndex(e => e.WpeKatId, "WPEKategoria").HasFillFactor(100);

            entity.HasIndex(e => e.WpePraId, "WPEPraLInk").HasFillFactor(100);

            entity.HasIndex(e => e.WpeTwpId, "WPETwpLink").HasFillFactor(100);

            entity.HasIndex(e => e.WpeWplId, "WPEWplLink").HasFillFactor(100);

            entity.Property(e => e.WpeWpeId).HasColumnName("WPE_WpeId");
            entity.Property(e => e.WpeArchiwalny).HasColumnName("WPE_Archiwalny");
            entity.Property(e => e.WpeBrutto50)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Brutto50");
            entity.Property(e => e.WpeBrutto50Zdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Brutto50Zdrow");
            entity.Property(e => e.WpeDietaKierowcyFis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_DietaKierowcyFIS");
            entity.Property(e => e.WpeDietaKierowcyZus)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_DietaKierowcyZUS");
            entity.Property(e => e.WpeDietaUmowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_DietaUmowy");
            entity.Property(e => e.WpeImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("WPE_ImportRowId");
            entity.Property(e => e.WpeKatId).HasColumnName("WPE_KatId");
            entity.Property(e => e.WpeKategoriaOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WPE_KategoriaOpis");
            entity.Property(e => e.WpeKorekta).HasColumnName("WPE_Korekta");
            entity.Property(e => e.WpeKoszty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Koszty");
            entity.Property(e => e.WpeKoszty50)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Koszty50");
            entity.Property(e => e.WpeKoszty50Zdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Koszty50Zdrow");
            entity.Property(e => e.WpeKoszty50Zwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Koszty50Zwol");
            entity.Property(e => e.WpeKosztyBezFis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_KosztyBezFIS");
            entity.Property(e => e.WpeKosztyZdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_KosztyZdrow");
            entity.Property(e => e.WpeKosztyZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_KosztyZwol");
            entity.Property(e => e.WpeMetodaProp).HasColumnName("WPE_MetodaProp");
            entity.Property(e => e.WpeNalFis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_NalFis");
            entity.Property(e => e.WpeNalFiszdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_NalFISZdrow");
            entity.Property(e => e.WpeNalFiszwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_NalFISZwol");
            entity.Property(e => e.WpeNazwa)
                .HasMaxLength(128)
                .HasColumnName("WPE_Nazwa");
            entity.Property(e => e.WpeNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Netto");
            entity.Property(e => e.WpeNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_NettoWal");
            entity.Property(e => e.WpeNrZus).HasColumnName("WPE_NrZUS");
            entity.Property(e => e.WpeOpeModId).HasColumnName("WPE_OpeModId");
            entity.Property(e => e.WpeOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPE_OpeModKod");
            entity.Property(e => e.WpeOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WPE_OpeModNazwisko");
            entity.Property(e => e.WpeOpeZalId).HasColumnName("WPE_OpeZalId");
            entity.Property(e => e.WpeOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPE_OpeZalKod");
            entity.Property(e => e.WpeOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WPE_OpeZalNazwisko");
            entity.Property(e => e.WpePodmiana).HasColumnName("WPE_Podmiana");
            entity.Property(e => e.WpePodstChor)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstChor");
            entity.Property(e => e.WpePodstChorOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstChorOpodat");
            entity.Property(e => e.WpePodstChorZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstChorZwol");
            entity.Property(e => e.WpePodstEmer)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstEmer");
            entity.Property(e => e.WpePodstEmerOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstEmerOpodat");
            entity.Property(e => e.WpePodstEmerZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstEmerZwol");
            entity.Property(e => e.WpePodstFep)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstFEP");
            entity.Property(e => e.WpePodstFgsp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstFGSP");
            entity.Property(e => e.WpePodstFp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstFP");
            entity.Property(e => e.WpePodstPitzwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstPITZwol");
            entity.Property(e => e.WpePodstPpk)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstPPK");
            entity.Property(e => e.WpePodstRent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstRent");
            entity.Property(e => e.WpePodstRentOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstRentOpodat");
            entity.Property(e => e.WpePodstRentZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstRentZwol");
            entity.Property(e => e.WpePodstWypad)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstWypad");
            entity.Property(e => e.WpePodstZdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrow");
            entity.Property(e => e.WpePodstZdrowNieopodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowNieopodat");
            entity.Property(e => e.WpePodstZdrowOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowOpodat");
            entity.Property(e => e.WpePodstZdrowWlascBrak)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowWlascBrak");
            entity.Property(e => e.WpePodstZdrowWlascKarta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowWlascKarta");
            entity.Property(e => e.WpePodstZdrowWlascLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowWlascLiniowy");
            entity.Property(e => e.WpePodstZdrowWlascRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowWlascRyczalt");
            entity.Property(e => e.WpePodstZdrowWlascSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowWlascSkala");
            entity.Property(e => e.WpePodstZdrowZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PodstZdrowZwol");
            entity.Property(e => e.WpePraId).HasColumnName("WPE_PraId");
            entity.Property(e => e.WpePrzekroczLimituOddeleg)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_PrzekroczLimituOddeleg");
            entity.Property(e => e.WpePrzychod50)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Przychod50");
            entity.Property(e => e.WpePrzychod50Zdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Przychod50Zdrow");
            entity.Property(e => e.WpeSklChorFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklChorFirma");
            entity.Property(e => e.WpeSklChorPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklChorPrac");
            entity.Property(e => e.WpeSklChorPracOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklChorPracOpodat");
            entity.Property(e => e.WpeSklChorPracZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklChorPracZwol");
            entity.Property(e => e.WpeSklEmerFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklEmerFirma");
            entity.Property(e => e.WpeSklEmerPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklEmerPrac");
            entity.Property(e => e.WpeSklEmerPracOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklEmerPracOpodat");
            entity.Property(e => e.WpeSklEmerPracZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklEmerPracZwol");
            entity.Property(e => e.WpeSklFep)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklFEP");
            entity.Property(e => e.WpeSklFgsp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklFGSP");
            entity.Property(e => e.WpeSklFp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklFP");
            entity.Property(e => e.WpeSklPpkfirma1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklPPKFirma1");
            entity.Property(e => e.WpeSklPpkfirma2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklPPKFirma2");
            entity.Property(e => e.WpeSklPpkprac1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklPPKPrac1");
            entity.Property(e => e.WpeSklPpkprac2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklPPKPrac2");
            entity.Property(e => e.WpeSklRentFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklRentFirma");
            entity.Property(e => e.WpeSklRentPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklRentPrac");
            entity.Property(e => e.WpeSklRentPracOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklRentPracOpodat");
            entity.Property(e => e.WpeSklRentPracZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklRentPracZwol");
            entity.Property(e => e.WpeSklWypadFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklWypadFirma");
            entity.Property(e => e.WpeSklWypadPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklWypadPrac");
            entity.Property(e => e.WpeSklZdrowFirma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowFirma");
            entity.Property(e => e.WpeSklZdrowPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowPrac");
            entity.Property(e => e.WpeSklZdrowPracNieopodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowPracNieopodat");
            entity.Property(e => e.WpeSklZdrowPracNieopodatWstecz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowPracNieopodatWstecz");
            entity.Property(e => e.WpeSklZdrowPracOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowPracOpodat");
            entity.Property(e => e.WpeSklZdrowPracOpodatWstecz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowPracOpodatWstecz");
            entity.Property(e => e.WpeSklZdrowPracWstecz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowPracWstecz");
            entity.Property(e => e.WpeSklZdrowPracZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowPracZwol");
            entity.Property(e => e.WpeSklZdrowSuma)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowSuma");
            entity.Property(e => e.WpeSklZdrowSumaWstecz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowSumaWstecz");
            entity.Property(e => e.WpeSklZdrowWlascBrak)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowWlascBrak");
            entity.Property(e => e.WpeSklZdrowWlascKarta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowWlascKarta");
            entity.Property(e => e.WpeSklZdrowWlascLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowWlascLiniowy");
            entity.Property(e => e.WpeSklZdrowWlascRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowWlascRyczalt");
            entity.Property(e => e.WpeSklZdrowWlascSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SklZdrowWlascSkala");
            entity.Property(e => e.WpeStaModId).HasColumnName("WPE_StaModId");
            entity.Property(e => e.WpeStaZalId).HasColumnName("WPE_StaZalId");
            entity.Property(e => e.WpeSumaOpodatOddeleg)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SumaOpodatOddeleg");
            entity.Property(e => e.WpeSwiadZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SwiadZwol");
            entity.Property(e => e.WpeSwiadZwolWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_SwiadZwolWal");
            entity.Property(e => e.WpeTemp).HasColumnName("WPE_Temp");
            entity.Property(e => e.WpeTsMod)
                .HasColumnType("datetime")
                .HasColumnName("WPE_TS_Mod");
            entity.Property(e => e.WpeTsZal)
                .HasColumnType("datetime")
                .HasColumnName("WPE_TS_Zal");
            entity.Property(e => e.WpeTwpId).HasColumnName("WPE_TwpId");
            entity.Property(e => e.WpeTyUb).HasColumnName("WPE_TyUb");
            entity.Property(e => e.WpeUlga)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Ulga");
            entity.Property(e => e.WpeUlgaKlasaSrednia)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_UlgaKlasaSrednia");
            entity.Property(e => e.WpeUlgaZdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_UlgaZdrow");
            entity.Property(e => e.WpeUlgaZwol)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_UlgaZwol");
            entity.Property(e => e.WpeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("WPE_Waluta");
            entity.Property(e => e.WpeWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_Wartosc");
            entity.Property(e => e.WpeWartoscOddelegWskaznik)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WPE_WartoscOddelegWskaznik");
            entity.Property(e => e.WpeWartoscOddelegWskaznikDieta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_WartoscOddelegWskaznikDieta");
            entity.Property(e => e.WpeWartoscPodst)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_WartoscPodst");
            entity.Property(e => e.WpeWartoscWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_WartoscWal");
            entity.Property(e => e.WpeWplId).HasColumnName("WPE_WplId");
            entity.Property(e => e.WpeZalFis)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_ZalFis");
            entity.Property(e => e.WpeZalFisZwol).HasColumnName("WPE_ZalFisZwol");
            entity.Property(e => e.WpeZalFisbiez)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_ZalFISBiez");
            entity.Property(e => e.WpeZalFisdoplata)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_ZalFISDoplata");
            entity.Property(e => e.WpeZalFisnadwyzka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_ZalFISNadwyzka");
            entity.Property(e => e.WpeZalFiswstecz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPE_ZalFISWstecz");
            entity.Property(e => e.WpeZalFiszwolPowod).HasColumnName("WPE_ZalFISZwolPowod");

            entity.HasOne(d => d.WpeKat).WithMany(p => p.WypElementies)
                .HasForeignKey(d => d.WpeKatId)
                .HasConstraintName("FK_WPEKategoria");

            entity.HasOne(d => d.WpePra).WithMany(p => p.WypElementies)
                .HasForeignKey(d => d.WpePraId)
                .HasConstraintName("FK_WPEPraLInk");

            entity.HasOne(d => d.WpeTwp).WithMany(p => p.WypElementies)
                .HasForeignKey(d => d.WpeTwpId)
                .HasConstraintName("FK_WPETwpLink");

            entity.HasOne(d => d.WpeWpl).WithMany(p => p.WypElementies)
                .HasForeignKey(d => d.WpeWplId)
                .HasConstraintName("FK_WPEWplLink");
        });

        modelBuilder.Entity<WypElementyPodstawa>(entity =>
        {
            entity.HasKey(e => e.WepWepId)
                .HasName("WEP_Primary")
                .HasFillFactor(100);

            entity.ToTable("WypElementyPodstawa", "CDN", tb => tb.HasTrigger("WypElementyPodstawa_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.WepPraId, "WEPPraId").HasFillFactor(100);

            entity.HasIndex(e => e.WepWpeId, "WEPWpeId").HasFillFactor(100);

            entity.Property(e => e.WepWepId).HasColumnName("WEP_WepId");
            entity.Property(e => e.WepGodzDni)
                .HasMaxLength(40)
                .HasColumnName("WEP_GodzDni");
            entity.Property(e => e.WepIloscMies).HasColumnName("WEP_IloscMies");
            entity.Property(e => e.WepImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("WEP_ImportRowId");
            entity.Property(e => e.WepKwota1)
                .HasColumnType("decimal(15, 6)")
                .HasColumnName("WEP_Kwota1");
            entity.Property(e => e.WepKwota2)
                .HasColumnType("decimal(15, 6)")
                .HasColumnName("WEP_Kwota2");
            entity.Property(e => e.WepKwota3)
                .HasColumnType("decimal(15, 6)")
                .HasColumnName("WEP_Kwota3");
            entity.Property(e => e.WepNazwa)
                .HasMaxLength(128)
                .HasColumnName("WEP_Nazwa");
            entity.Property(e => e.WepNormaGodz)
                .HasColumnType("datetime")
                .HasColumnName("WEP_NormaGodz");
            entity.Property(e => e.WepNumerPelny)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WEP_NumerPelny");
            entity.Property(e => e.WepOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("WEP_OkresDo");
            entity.Property(e => e.WepOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("WEP_OkresOd");
            entity.Property(e => e.WepParentId).HasColumnName("WEP_ParentId");
            entity.Property(e => e.WepPraId).HasColumnName("WEP_PraId");
            entity.Property(e => e.WepProcentWalor)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WEP_ProcentWalor");
            entity.Property(e => e.WepRodzajElem).HasColumnName("WEP_RodzajElem");
            entity.Property(e => e.WepStawkaGodz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WEP_StawkaGodz");
            entity.Property(e => e.WepWlicz).HasColumnName("WEP_Wlicz");
            entity.Property(e => e.WepWliczMetoda).HasColumnName("WEP_WliczMetoda");
            entity.Property(e => e.WepWpeId).HasColumnName("WEP_WpeId");
            entity.Property(e => e.WepWspolczynnik)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WEP_Wspolczynnik");

            entity.HasOne(d => d.WepWpe).WithMany(p => p.WypElementyPodstawas)
                .HasForeignKey(d => d.WepWpeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WEPWpeId");
        });

        modelBuilder.Entity<WypElementyPodstawaElem>(entity =>
        {
            entity.HasKey(e => e.WeeWeeId)
                .HasName("WEE_Primary")
                .HasFillFactor(100);

            entity.ToTable("WypElementyPodstawaElem", "CDN", tb => tb.HasTrigger("WypElementyPodstawaElem_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.WeeWepId, "WEEWepId").HasFillFactor(100);

            entity.Property(e => e.WeeWeeId).HasColumnName("WEE_WeeId");
            entity.Property(e => e.WeeGodzDni)
                .HasMaxLength(40)
                .HasColumnName("WEE_GodzDni");
            entity.Property(e => e.WeeIloscMies).HasColumnName("WEE_IloscMies");
            entity.Property(e => e.WeeImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("WEE_ImportRowId");
            entity.Property(e => e.WeeKwota1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WEE_Kwota1");
            entity.Property(e => e.WeeKwota2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WEE_Kwota2");
            entity.Property(e => e.WeeKwota3)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WEE_Kwota3");
            entity.Property(e => e.WeeNazwa)
                .HasMaxLength(128)
                .HasColumnName("WEE_Nazwa");
            entity.Property(e => e.WeeNumerPelny)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WEE_NumerPelny");
            entity.Property(e => e.WeeOkresDo)
                .HasColumnType("datetime")
                .HasColumnName("WEE_OkresDo");
            entity.Property(e => e.WeeOkresOd)
                .HasColumnType("datetime")
                .HasColumnName("WEE_OkresOd");
            entity.Property(e => e.WeeRodzajElem).HasColumnName("WEE_RodzajElem");
            entity.Property(e => e.WeeWepId).HasColumnName("WEE_WepId");
            entity.Property(e => e.WeeWlicz).HasColumnName("WEE_Wlicz");
            entity.Property(e => e.WeeWliczMetoda).HasColumnName("WEE_WliczMetoda");
            entity.Property(e => e.WeeWspolczynnik)
                .HasMaxLength(40)
                .HasColumnName("WEE_Wspolczynnik");

            entity.HasOne(d => d.WeeWep).WithMany(p => p.WypElementyPodstawaElems)
                .HasForeignKey(d => d.WeeWepId)
                .HasConstraintName("FK_WEEWepId");
        });

        modelBuilder.Entity<WypSkladniki>(entity =>
        {
            entity.HasKey(e => e.WpsWpsId)
                .HasName("WPS_Primary")
                .HasFillFactor(100);

            entity.ToTable("WypSkladniki", "CDN", tb =>
                {
                    tb.HasTrigger("WypSkladniki_Delete_Trigger");
                    tb.HasTrigger("WypSkladniki_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.WpsPnbId, "TWPPnbLink").HasFillFactor(100);

            entity.HasIndex(e => e.WpsWplId, "WPLWyplata").HasFillFactor(100);

            entity.HasIndex(e => new { e.WpsPraId, e.WpsWpsId, e.WpsWpeId, e.WpsDataDanych }, "WPSDataDanych").HasFillFactor(100);

            entity.HasIndex(e => e.WpsDstId, "WPSDstLink").HasFillFactor(100);

            entity.HasIndex(e => e.WpsPraId, "WPSPraLink").HasFillFactor(100);

            entity.HasIndex(e => e.WpsTwpId, "WPSTwpLink").HasFillFactor(100);

            entity.HasIndex(e => e.WpsWpeId, "WPSWpeLink").HasFillFactor(100);

            entity.HasIndex(e => new { e.WpsZrodloId, e.WpsRodzajZrodla }, "WpsZrodlo").HasFillFactor(100);

            entity.Property(e => e.WpsWpsId).HasColumnName("WPS_WpsId");
            entity.Property(e => e.WpsArchiwalny).HasColumnName("WPS_Archiwalny");
            entity.Property(e => e.WpsDataDanych)
                .HasColumnType("datetime")
                .HasColumnName("WPS_DataDanych");
            entity.Property(e => e.WpsDataDo)
                .HasColumnType("datetime")
                .HasColumnName("WPS_DataDo");
            entity.Property(e => e.WpsDataOd)
                .HasColumnType("datetime")
                .HasColumnName("WPS_DataOd");
            entity.Property(e => e.WpsDstId).HasColumnName("WPS_DstId");
            entity.Property(e => e.WpsDzlId).HasColumnName("WPS_DzlId");
            entity.Property(e => e.WpsEkwiwalentIlosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_EkwiwalentIlosc");
            entity.Property(e => e.WpsGodziny)
                .HasColumnType("datetime")
                .HasColumnName("WPS_Godziny");
            entity.Property(e => e.WpsHrmId).HasColumnName("WPS_HrmId");
            entity.Property(e => e.WpsImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("WPS_ImportRowId");
            entity.Property(e => e.WpsNazwa)
                .HasMaxLength(128)
                .HasColumnName("WPS_Nazwa");
            entity.Property(e => e.WpsOkresCzas)
                .HasColumnType("datetime")
                .HasColumnName("WPS_OkresCzas");
            entity.Property(e => e.WpsOkresCzasUmowa)
                .HasDefaultValueSql("((-2))")
                .HasColumnType("datetime")
                .HasColumnName("WPS_OkresCzasUmowa");
            entity.Property(e => e.WpsOkresDni).HasColumnName("WPS_OkresDni");
            entity.Property(e => e.WpsOpeModId).HasColumnName("WPS_OpeModId");
            entity.Property(e => e.WpsOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPS_OpeModKod");
            entity.Property(e => e.WpsOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WPS_OpeModNazwisko");
            entity.Property(e => e.WpsOpeZalId).HasColumnName("WPS_OpeZalId");
            entity.Property(e => e.WpsOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPS_OpeZalKod");
            entity.Property(e => e.WpsOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WPS_OpeZalNazwisko");
            entity.Property(e => e.WpsParentPpk).HasColumnName("WPS_ParentPPK");
            entity.Property(e => e.WpsPnbId).HasColumnName("WPS_PnbId");
            entity.Property(e => e.WpsPodstawa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_Podstawa");
            entity.Property(e => e.WpsPodstawaSklWych)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_PodstawaSklWych");
            entity.Property(e => e.WpsPraId).HasColumnName("WPS_PraId");
            entity.Property(e => e.WpsPracaRodzic).HasColumnName("WPS_PracaRodzic");
            entity.Property(e => e.WpsPracaRodzicPodstawa)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_PracaRodzicPodstawa");
            entity.Property(e => e.WpsProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_Procent");
            entity.Property(e => e.WpsPzeId).HasColumnName("WPS_PzeId");
            entity.Property(e => e.WpsRodzajZrodla).HasColumnName("WPS_RodzajZrodla");
            entity.Property(e => e.WpsSplacono)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_Splacono");
            entity.Property(e => e.WpsSplaconoAll).HasColumnName("WPS_SplaconoAll");
            entity.Property(e => e.WpsStaModId).HasColumnName("WPS_StaModId");
            entity.Property(e => e.WpsStaZalId).HasColumnName("WPS_StaZalId");
            entity.Property(e => e.WpsTsMod)
                .HasColumnType("datetime")
                .HasColumnName("WPS_TS_Mod");
            entity.Property(e => e.WpsTsZal)
                .HasColumnType("datetime")
                .HasColumnName("WPS_TS_Zal");
            entity.Property(e => e.WpsTwpId).HasColumnName("WPS_TwpId");
            entity.Property(e => e.WpsWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_Wartosc");
            entity.Property(e => e.WpsWartosc1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_Wartosc1");
            entity.Property(e => e.WpsWartosc2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_Wartosc2");
            entity.Property(e => e.WpsWartoscPodst)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_WartoscPodst");
            entity.Property(e => e.WpsWartoscWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_WartoscWal");
            entity.Property(e => e.WpsWpeId).HasColumnName("WPS_WpeId");
            entity.Property(e => e.WpsWplId).HasColumnName("WPS_WplId");
            entity.Property(e => e.WpsZaliczka).HasColumnName("WPS_Zaliczka");
            entity.Property(e => e.WpsZrodloId).HasColumnName("WPS_ZrodloId");
            entity.Property(e => e.WpsZrodloIdExt).HasColumnName("WPS_ZrodloIdExt");

            entity.HasOne(d => d.WpsDst).WithMany(p => p.WypSkladnikis)
                .HasForeignKey(d => d.WpsDstId)
                .HasConstraintName("FK_WPSDstLink");

            entity.HasOne(d => d.WpsPnb).WithMany(p => p.WypSkladnikis)
                .HasForeignKey(d => d.WpsPnbId)
                .HasConstraintName("FK_TWPPnbLink");

            entity.HasOne(d => d.WpsPra).WithMany(p => p.WypSkladnikis)
                .HasForeignKey(d => d.WpsPraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WPSPraLink");

            entity.HasOne(d => d.WpsPze).WithMany(p => p.WypSkladnikis)
                .HasForeignKey(d => d.WpsPzeId)
                .HasConstraintName("FK_WPSPzeLink");

            entity.HasOne(d => d.WpsTwp).WithMany(p => p.WypSkladnikis)
                .HasForeignKey(d => d.WpsTwpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WPSTwpLink");

            entity.HasOne(d => d.WpsWpe).WithMany(p => p.WypSkladnikis)
                .HasForeignKey(d => d.WpsWpeId)
                .HasConstraintName("FK_WPSWpeLink");
        });

        modelBuilder.Entity<Wyplaty>(entity =>
        {
            entity.HasKey(e => e.WplWplId)
                .HasName("WPL_Primary")
                .HasFillFactor(100);

            entity.ToTable("Wyplaty", "CDN", tb =>
                {
                    tb.HasTrigger("Wyplaty_DeleteHandler");
                    tb.HasTrigger("Wyplaty_Delete_Trigger");
                    tb.HasTrigger("Wyplaty_InsertUpdate_Trigger");
                    tb.HasTrigger("Wyplaty_Insert_Trigger");
                });

            entity.HasIndex(e => e.WplDdfId, "WPLDdfLink").HasFillFactor(100);

            entity.HasIndex(e => e.WplDzlId, "WPLDzlLink").HasFillFactor(100);

            entity.HasIndex(e => e.WplParentId, "WPLInclude").HasFillFactor(100);

            entity.HasIndex(e => e.WplKatId, "WPLKategoria").HasFillFactor(100);

            entity.HasIndex(e => e.WplLplId, "WPLLplLink").HasFillFactor(100);

            entity.HasIndex(e => e.WplPraId, "WPLPraLink").HasFillFactor(100);

            entity.HasIndex(e => e.WplStornId, "WPLStornId").HasFillFactor(100);

            entity.HasIndex(e => new { e.WplNumerPelny, e.WplTryb }, "WplNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WplWplId).HasColumnName("WPL_WplId");
            entity.Property(e => e.WplArchiwalna).HasColumnName("WPL_Archiwalna");
            entity.Property(e => e.WplBrutto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_Brutto");
            entity.Property(e => e.WplDataDo)
                .HasColumnType("datetime")
                .HasColumnName("WPL_DataDo");
            entity.Property(e => e.WplDataDok)
                .HasColumnType("datetime")
                .HasColumnName("WPL_DataDok");
            entity.Property(e => e.WplDataOd)
                .HasColumnType("datetime")
                .HasColumnName("WPL_DataOd");
            entity.Property(e => e.WplDdfId).HasColumnName("WPL_DdfId");
            entity.Property(e => e.WplDochodUbMiesZdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_DochodUbMiesZdrow");
            entity.Property(e => e.WplDzlId).HasColumnName("WPL_DzlId");
            entity.Property(e => e.WplFormaOpodatZdrow).HasColumnName("WPL_FormaOpodatZdrow");
            entity.Property(e => e.WplImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("WPL_ImportRowId");
            entity.Property(e => e.WplKatId).HasColumnName("WPL_KatId");
            entity.Property(e => e.WplKategoriaOpis)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WPL_KategoriaOpis");
            entity.Property(e => e.WplKompensata).HasColumnName("WPL_Kompensata");
            entity.Property(e => e.WplKorekta).HasColumnName("WPL_Korekta");
            entity.Property(e => e.WplKorektaPlatnosci).HasColumnName("WPL_KorektaPlatnosci");
            entity.Property(e => e.WplKorektaPola).HasColumnName("WPL_KorektaPola");
            entity.Property(e => e.WplKorektaPola2).HasColumnName("WPL_KorektaPola2");
            entity.Property(e => e.WplKursLnal)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WPL_KursLNal");
            entity.Property(e => e.WplKursLnalDieta)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WPL_KursLNalDieta");
            entity.Property(e => e.WplKursMnal)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("WPL_KursMNal");
            entity.Property(e => e.WplKursMnalDieta)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("WPL_KursMNalDieta");
            entity.Property(e => e.WplLplId).HasColumnName("WPL_LplId");
            entity.Property(e => e.WplMiesiac).HasColumnName("WPL_Miesiac");
            entity.Property(e => e.WplNazwa)
                .HasMaxLength(40)
                .HasColumnName("WPL_Nazwa");
            entity.Property(e => e.WplNumerNr).HasColumnName("WPL_NumerNr");
            entity.Property(e => e.WplNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([WPL_NUMERNR],[WPL_NUMERSTRING]))", false)
                .HasColumnName("WPL_NumerPelny");
            entity.Property(e => e.WplNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("WPL_NumerString");
            entity.Property(e => e.WplObnizSklPpk).HasColumnName("WPL_ObnizSklPPK");
            entity.Property(e => e.WplOddelegowanyDieta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_OddelegowanyDieta");
            entity.Property(e => e.WplOddelegowanyKierowca).HasColumnName("WPL_OddelegowanyKierowca");
            entity.Property(e => e.WplOpeModId).HasColumnName("WPL_OpeModId");
            entity.Property(e => e.WplOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPL_OpeModKod");
            entity.Property(e => e.WplOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WPL_OpeModNazwisko");
            entity.Property(e => e.WplOpeZalId).HasColumnName("WPL_OpeZalId");
            entity.Property(e => e.WplOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPL_OpeZalKod");
            entity.Property(e => e.WplOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WPL_OpeZalNazwisko");
            entity.Property(e => e.WplParentId).HasColumnName("WPL_ParentId");
            entity.Property(e => e.WplPierwotna)
                .HasDefaultValue(0)
                .HasColumnName("WPL_Pierwotna");
            entity.Property(e => e.WplPodstawaPodat1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_PodstawaPodat1");
            entity.Property(e => e.WplPodstawaPodat2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_PodstawaPodat2");
            entity.Property(e => e.WplPraId).HasColumnName("WPL_PraId");
            entity.Property(e => e.WplProcentPodat1)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("WPL_ProcentPodat1");
            entity.Property(e => e.WplProcentPodat2)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("WPL_ProcentPodat2");
            entity.Property(e => e.WplPrzychodBiezRokZdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_PrzychodBiezRokZdrow");
            entity.Property(e => e.WplPrzychodUbRokZdrow)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_PrzychodUbRokZdrow");
            entity.Property(e => e.WplRok).HasColumnName("WPL_Rok");
            entity.Property(e => e.WplStaModId).HasColumnName("WPL_StaModId");
            entity.Property(e => e.WplStaZalId).HasColumnName("WPL_StaZalId");
            entity.Property(e => e.WplStornId).HasColumnName("WPL_StornId");
            entity.Property(e => e.WplTryb).HasColumnName("WPL_Tryb");
            entity.Property(e => e.WplTsImport)
                .HasColumnType("datetime")
                .HasColumnName("WPL_TS_Import");
            entity.Property(e => e.WplTsMod)
                .HasColumnType("datetime")
                .HasColumnName("WPL_TS_Mod");
            entity.Property(e => e.WplTsZal)
                .HasColumnType("datetime")
                .HasColumnName("WPL_TS_Zal");
            entity.Property(e => e.WplUmowaDodZas).HasColumnName("WPL_UmowaDodZas");
            entity.Property(e => e.WplWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_Wartosc");
            entity.Property(e => e.WplWlascDochodBrak)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDochodBrak");
            entity.Property(e => e.WplWlascDochodKarta)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDochodKarta");
            entity.Property(e => e.WplWlascDochodLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDochodLiniowy");
            entity.Property(e => e.WplWlascDochodSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDochodSkala");
            entity.Property(e => e.WplWlascDoplata)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDoplata");
            entity.Property(e => e.WplWlascDoplataLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDoplataLiniowy");
            entity.Property(e => e.WplWlascDoplataRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDoplataRyczalt");
            entity.Property(e => e.WplWlascDoplataSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascDoplataSkala");
            entity.Property(e => e.WplWlascKwotaPoprzRokLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascKwotaPoprzRokLiniowy");
            entity.Property(e => e.WplWlascKwotaPoprzRokRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascKwotaPoprzRokRyczalt");
            entity.Property(e => e.WplWlascKwotaPoprzRokSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascKwotaPoprzRokSkala");
            entity.Property(e => e.WplWlascMinPodstZdrowLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascMinPodstZdrowLiniowy");
            entity.Property(e => e.WplWlascMinPodstZdrowRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascMinPodstZdrowRyczalt");
            entity.Property(e => e.WplWlascMinPodstZdrowSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascMinPodstZdrowSkala");
            entity.Property(e => e.WplWlascPodlZdrowMiesLiniowy).HasColumnName("WPL_WlascPodlZdrowMiesLiniowy");
            entity.Property(e => e.WplWlascPodlZdrowMiesRyczalt).HasColumnName("WPL_WlascPodlZdrowMiesRyczalt");
            entity.Property(e => e.WplWlascPodlZdrowMiesSkala).HasColumnName("WPL_WlascPodlZdrowMiesSkala");
            entity.Property(e => e.WplWlascPodstZdrowRokLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascPodstZdrowRokLiniowy");
            entity.Property(e => e.WplWlascPodstZdrowRokRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascPodstZdrowRokRyczalt");
            entity.Property(e => e.WplWlascPodstZdrowRokSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascPodstZdrowRokSkala");
            entity.Property(e => e.WplWlascPrzychodBiezRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascPrzychodBiezRyczalt");
            entity.Property(e => e.WplWlascPrzychodUbRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascPrzychodUbRyczalt");
            entity.Property(e => e.WplWlascSklZdrowRokLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascSklZdrowRokLiniowy");
            entity.Property(e => e.WplWlascSklZdrowRokRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascSklZdrowRokRyczalt");
            entity.Property(e => e.WplWlascSklZdrowRokSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascSklZdrowRokSkala");
            entity.Property(e => e.WplWlascSumaSklZdrowLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascSumaSklZdrowLiniowy");
            entity.Property(e => e.WplWlascSumaSklZdrowRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascSumaSklZdrowRyczalt");
            entity.Property(e => e.WplWlascSumaSklZdrowSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascSumaSklZdrowSkala");
            entity.Property(e => e.WplWlascZmianaFormyOpodat1).HasColumnName("WPL_WlascZmianaFormyOpodat1");
            entity.Property(e => e.WplWlascZmianaFormyOpodat7).HasColumnName("WPL_WlascZmianaFormyOpodat7");
            entity.Property(e => e.WplWlascZwrot)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascZwrot");
            entity.Property(e => e.WplWlascZwrotLiniowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascZwrotLiniowy");
            entity.Property(e => e.WplWlascZwrotRyczalt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascZwrotRyczalt");
            entity.Property(e => e.WplWlascZwrotSkala)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_WlascZwrotSkala");
            entity.Property(e => e.WplZamknieta).HasColumnName("WPL_Zamknieta");

            entity.HasOne(d => d.WplDdf).WithMany(p => p.Wyplaties)
                .HasForeignKey(d => d.WplDdfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WPLDdfLink");

            entity.HasOne(d => d.WplDzl).WithMany(p => p.Wyplaties)
                .HasForeignKey(d => d.WplDzlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WPLDzlLink");

            entity.HasOne(d => d.WplKat).WithMany(p => p.Wyplaties)
                .HasForeignKey(d => d.WplKatId)
                .HasConstraintName("FK_WPLKategoria");

            entity.HasOne(d => d.WplLpl).WithMany(p => p.Wyplaties)
                .HasForeignKey(d => d.WplLplId)
                .HasConstraintName("FK_WPLLplLink");

            entity.HasOne(d => d.WplParent).WithMany(p => p.InverseWplParent)
                .HasForeignKey(d => d.WplParentId)
                .HasConstraintName("FK_WPLParent");

            entity.HasOne(d => d.WplPra).WithMany(p => p.Wyplaties)
                .HasForeignKey(d => d.WplPraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WPLPraLink");
        });

        modelBuilder.Entity<WyplatyElem>(entity =>
        {
            entity.HasKey(e => e.WyEWyEid)
                .HasName("WyE_Primary")
                .HasFillFactor(100);

            entity.ToTable("WyplatyElem", "CDN");

            entity.HasIndex(e => e.WyEKatId, "WyEKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.WyEWyNid, e.WyEWyEid }, "WyENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WyEWyEid).HasColumnName("WyE_WyEId");
            entity.Property(e => e.WyEGotowka).HasColumnName("WyE_Gotowka");
            entity.Property(e => e.WyEKatId).HasColumnName("WyE_KatID");
            entity.Property(e => e.WyEKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WyE_Kategoria");
            entity.Property(e => e.WyEKoszt).HasColumnName("WyE_Koszt");
            entity.Property(e => e.WyEOpodatkowany).HasColumnName("WyE_Opodatkowany");
            entity.Property(e => e.WyEPotracenie).HasColumnName("WyE_Potracenie");
            entity.Property(e => e.WyEUbChorob).HasColumnName("WyE_UbChorob");
            entity.Property(e => e.WyEUbEmeryt).HasColumnName("WyE_UbEmeryt");
            entity.Property(e => e.WyEUbRentow).HasColumnName("WyE_UbRentow");
            entity.Property(e => e.WyEUbWypadk).HasColumnName("WyE_UbWypadk");
            entity.Property(e => e.WyEUbZdrowo).HasColumnName("WyE_UbZdrowo");
            entity.Property(e => e.WyEWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyE_Wartosc");
            entity.Property(e => e.WyEWyNid).HasColumnName("WyE_WyNId");

            entity.HasOne(d => d.WyEKat).WithMany(p => p.WyplatyElems)
                .HasForeignKey(d => d.WyEKatId)
                .HasConstraintName("FK_WyEKategoria");

            entity.HasOne(d => d.WyEWyN).WithMany(p => p.WyplatyElems)
                .HasForeignKey(d => d.WyEWyNid)
                .HasConstraintName("FK_WyENaglowek");
        });

        modelBuilder.Entity<WyplatyNag>(entity =>
        {
            entity.HasKey(e => e.WyNWyNid)
                .HasName("WyN_Primary")
                .HasFillFactor(100);

            entity.ToTable("WyplatyNag", "CDN", tb =>
                {
                    tb.HasTrigger("WyplatyNag_DeleteHandler");
                    tb.HasTrigger("WyplatyNag_Delete_Trigger");
                    tb.HasTrigger("WyplatyNag_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.WyNDekId, e.WyNWyNid }, "WyNDekrety")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WyNKatId, e.WyNRokMies, e.WyNDataWyp, e.WyNWyNid }, "WyNKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.WyNRokMies, "WyNMiesiac").HasFillFactor(100);

            entity.HasIndex(e => new { e.WyNPrcId, e.WyNRokMies, e.WyNDataWyp, e.WyNWyNid }, "WyNPracownik")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WyNKprId, e.WyNWyNid }, "WyNZapisyKPR")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WyNWyNid).HasColumnName("WyN_WyNId");
            entity.Property(e => e.WyNBruttoGotowka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_BruttoGotowka");
            entity.Property(e => e.WyNBruttoKoszt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_BruttoKoszt");
            entity.Property(e => e.WyNBruttoOpodat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_BruttoOpodat");
            entity.Property(e => e.WyNBruttoRazem)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_BruttoRazem");
            entity.Property(e => e.WyNDataWyp)
                .HasColumnType("datetime")
                .HasColumnName("WyN_DataWyp");
            entity.Property(e => e.WyNDataZap)
                .HasColumnType("datetime")
                .HasColumnName("WyN_DataZap");
            entity.Property(e => e.WyNDekId).HasColumnName("WyN_DekID");
            entity.Property(e => e.WyNDoRozliczWkolMies)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_DoRozliczWKolMies");
            entity.Property(e => e.WyNEtat).HasColumnName("WyN_Etat");
            entity.Property(e => e.WyNGotowka)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_Gotowka");
            entity.Property(e => e.WyNImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("WyN_ImportRowId");
            entity.Property(e => e.WyNKatId).HasColumnName("WyN_KatID");
            entity.Property(e => e.WyNKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WyN_Kategoria");
            entity.Property(e => e.WyNKosztyUzyskania)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_KosztyUzyskania");
            entity.Property(e => e.WyNKprId).HasColumnName("WyN_KprID");
            entity.Property(e => e.WyNOpeModId).HasColumnName("WyN_OpeModID");
            entity.Property(e => e.WyNOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyN_OpeModKod");
            entity.Property(e => e.WyNOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WyN_OpeModNazwisko");
            entity.Property(e => e.WyNOpeZalId).HasColumnName("WyN_OpeZalID");
            entity.Property(e => e.WyNOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyN_OpeZalKod");
            entity.Property(e => e.WyNOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WyN_OpeZalNazwisko");
            entity.Property(e => e.WyNPodatek)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_Podatek");
            entity.Property(e => e.WyNPodstawaFep)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_PodstawaFEP");
            entity.Property(e => e.WyNPodstawaFgsp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_PodstawaFGSP");
            entity.Property(e => e.WyNPodstawaFp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_PodstawaFP");
            entity.Property(e => e.WyNPrcId).HasColumnName("WyN_PrcID");
            entity.Property(e => e.WyNRokMies).HasColumnName("WyN_RokMies");
            entity.Property(e => e.WyNRozliczZpoprzedMies)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_RozliczZPoprzedMies");
            entity.Property(e => e.WyNSkladkaFep)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_SkladkaFEP");
            entity.Property(e => e.WyNStaModId).HasColumnName("WyN_StaModId");
            entity.Property(e => e.WyNStaZalId).HasColumnName("WyN_StaZalId");
            entity.Property(e => e.WyNTsMod)
                .HasColumnType("datetime")
                .HasColumnName("WyN_TS_Mod");
            entity.Property(e => e.WyNTsZal)
                .HasColumnType("datetime")
                .HasColumnName("WyN_TS_Zal");
            entity.Property(e => e.WyNUbChorobPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbChorobPrac");
            entity.Property(e => e.WyNUbEmerytFir)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbEmerytFir");
            entity.Property(e => e.WyNUbEmerytPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbEmerytPrac");
            entity.Property(e => e.WyNUbRentowFir)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbRentowFir");
            entity.Property(e => e.WyNUbRentowPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbRentowPrac");
            entity.Property(e => e.WyNUbWypadkFir)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbWypadkFir");
            entity.Property(e => e.WyNUbZdrowNodl)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbZdrowNOdl");
            entity.Property(e => e.WyNUbZdrowotne)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UbZdrowotne");
            entity.Property(e => e.WyNUlgaDlaPrac)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UlgaDlaPrac");
            entity.Property(e => e.WyNUlgaOdliczona)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_UlgaOdliczona");
            entity.Property(e => e.WyNZakId).HasColumnName("WyN_ZakID");
            entity.Property(e => e.WyNZaliczkaUs)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyN_ZaliczkaUS");
            entity.Property(e => e.WyNZwolnienie).HasColumnName("WyN_Zwolnienie");

            entity.HasOne(d => d.WyNKat).WithMany(p => p.WyplatyNags)
                .HasForeignKey(d => d.WyNKatId)
                .HasConstraintName("FK_WyNKategoria");

            entity.HasOne(d => d.WyNPrc).WithMany(p => p.WyplatyNags)
                .HasForeignKey(d => d.WyNPrcId)
                .HasConstraintName("FK_WyNPracownik");
        });

        modelBuilder.Entity<Wyposazenie>(entity =>
        {
            entity.HasKey(e => e.WypWypId)
                .HasName("Wyp_Primary")
                .HasFillFactor(100);

            entity.ToTable("Wyposazenie", "CDN", tb =>
                {
                    tb.HasTrigger("Wyposazenie_Delete_Trigger");
                    tb.HasTrigger("Wyposazenie_InsertUpdate_Trigger");
                    tb.HasTrigger("Wyposazenie_Update_Trigger");
                });

            entity.HasIndex(e => new { e.WypDokumentTyp, e.WypDokumentId }, "WypDokument").HasFillFactor(100);

            entity.HasIndex(e => e.WypImportRowId, "WypGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.WypKatId, "WypKategoria").HasFillFactor(100);

            entity.HasIndex(e => new { e.WypKodKreskowy, e.WypUniqueKodKreskowyBuster }, "WypKodKreskowy")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.WypLp, "WypLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WypNazwa, e.WypLp }, "WypNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.WypNrInwent, "WypNrInwent")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.WypPrcId, "WypPracownik").HasFillFactor(100);

            entity.Property(e => e.WypWypId).HasColumnName("Wyp_WypID");
            entity.Property(e => e.WypDataLikw)
                .HasColumnType("datetime")
                .HasColumnName("Wyp_DataLikw");
            entity.Property(e => e.WypDataZak)
                .HasColumnType("datetime")
                .HasColumnName("Wyp_DataZak");
            entity.Property(e => e.WypDokumentId).HasColumnName("Wyp_DokumentID");
            entity.Property(e => e.WypDokumentNr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Wyp_DokumentNr");
            entity.Property(e => e.WypDokumentTyp).HasColumnName("Wyp_DokumentTyp");
            entity.Property(e => e.WypIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Wyp_Ilosc");
            entity.Property(e => e.WypImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Wyp_ImportAppId");
            entity.Property(e => e.WypImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("Wyp_ImportRowId");
            entity.Property(e => e.WypJednostkaMiary)
                .HasMaxLength(20)
                .HasColumnName("Wyp_JednostkaMiary");
            entity.Property(e => e.WypKatId).HasColumnName("Wyp_KatID");
            entity.Property(e => e.WypKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Wyp_Kategoria");
            entity.Property(e => e.WypKodKreskowy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Wyp_KodKreskowy");
            entity.Property(e => e.WypLikwDokument)
                .HasMaxLength(256)
                .HasColumnName("Wyp_LikwDokument");
            entity.Property(e => e.WypLikwidacja)
                .HasMaxLength(50)
                .HasColumnName("Wyp_Likwidacja");
            entity.Property(e => e.WypLp).HasColumnName("Wyp_Lp");
            entity.Property(e => e.WypNazwa)
                .HasMaxLength(50)
                .HasColumnName("Wyp_Nazwa");
            entity.Property(e => e.WypNrInwent)
                .HasMaxLength(20)
                .HasColumnName("Wyp_NrInwent");
            entity.Property(e => e.WypNumerKpr)
                .HasMaxLength(20)
                .HasColumnName("Wyp_NumerKPR");
            entity.Property(e => e.WypOpeModId).HasColumnName("Wyp_OpeModID");
            entity.Property(e => e.WypOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Wyp_OpeModKod");
            entity.Property(e => e.WypOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Wyp_OpeModNazwisko");
            entity.Property(e => e.WypOpeZalId).HasColumnName("Wyp_OpeZalID");
            entity.Property(e => e.WypOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Wyp_OpeZalKod");
            entity.Property(e => e.WypOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Wyp_OpeZalNazwisko");
            entity.Property(e => e.WypOpis)
                .HasMaxLength(254)
                .HasColumnName("Wyp_Opis");
            entity.Property(e => e.WypPrcId).HasColumnName("Wyp_PrcID");
            entity.Property(e => e.WypPrcNazwisko)
                .HasMaxLength(100)
                .HasColumnName("Wyp_PrcNazwisko");
            entity.Property(e => e.WypStaModId).HasColumnName("Wyp_StaModId");
            entity.Property(e => e.WypStaZalId).HasColumnName("Wyp_StaZalId");
            entity.Property(e => e.WypStan).HasColumnName("Wyp_Stan");
            entity.Property(e => e.WypTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Wyp_TS_Mod");
            entity.Property(e => e.WypTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Wyp_TS_Zal");
            entity.Property(e => e.WypUniqueKodKreskowyBuster)
                .HasComputedColumnSql("(case when [Wyp_KodKreskowy]='' then [Wyp_WypID] else (0) end)", false)
                .HasColumnName("Wyp_UniqueKodKreskowyBuster");
            entity.Property(e => e.WypWartoscZakup)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Wyp_WartoscZakup");

            entity.HasOne(d => d.WypKat).WithMany(p => p.Wyposazenies)
                .HasForeignKey(d => d.WypKatId)
                .HasConstraintName("FK_WypKategoria");

            entity.HasOne(d => d.WypPrc).WithMany(p => p.Wyposazenies)
                .HasForeignKey(d => d.WypPrcId)
                .HasConstraintName("FK_WypPracownik");
        });

        modelBuilder.Entity<WyposazenieAielem>(entity =>
        {
            entity.HasKey(e => e.WypAieWypAieid)
                .HasName("WypAIE_Primary")
                .HasFillFactor(100);

            entity.ToTable("WyposazenieAIElem", "CDN");

            entity.HasIndex(e => new { e.WypAieWypAinid, e.WypAieKodKreskowy, e.WypAieUniqueKodKreskowyBuster }, "WypAIEKodKreskowy")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WypAieWypAinid, e.WypAieLp }, "WypAIELp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WypAieWypAinid, e.WypAieWypAieid }, "WypAIENaglowek")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WypAieWypAinid, e.WypAieNrInwent }, "WypAIENrInwent")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WypAieWypId, e.WypAieWypAieid }, "WypAIEWyposazenie")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WypAieWypAieid).HasColumnName("WypAIE_WypAIEID");
            entity.Property(e => e.WypAieIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WypAIE_Ilosc");
            entity.Property(e => e.WypAieJednostkaMiary)
                .HasMaxLength(20)
                .HasColumnName("WypAIE_JednostkaMiary");
            entity.Property(e => e.WypAieKodKreskowy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("WypAIE_KodKreskowy");
            entity.Property(e => e.WypAieLp).HasColumnName("WypAIE_Lp");
            entity.Property(e => e.WypAieNazwa)
                .HasMaxLength(50)
                .HasColumnName("WypAIE_Nazwa");
            entity.Property(e => e.WypAieNrInwent)
                .HasMaxLength(20)
                .HasColumnName("WypAIE_NrInwent");
            entity.Property(e => e.WypAieRoznica)
                .HasComputedColumnSql("([WypAIE_Ilosc]-[WypAIE_StanBiez])", false)
                .HasColumnType("decimal(16, 4)")
                .HasColumnName("WypAIE_Roznica");
            entity.Property(e => e.WypAieStanBiez)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WypAIE_StanBiez");
            entity.Property(e => e.WypAieUniqueKodKreskowyBuster)
                .HasComputedColumnSql("(case when [WypAIE_KodKreskowy]='' then [WypAIE_WypAIEID] else (0) end)", false)
                .HasColumnName("WypAIE_UniqueKodKreskowyBuster");
            entity.Property(e => e.WypAieWartoscZak)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WypAIE_WartoscZak");
            entity.Property(e => e.WypAieWypAinid).HasColumnName("WypAIE_WypAINID");
            entity.Property(e => e.WypAieWypId).HasColumnName("WypAIE_WypID");

            entity.HasOne(d => d.WypAieWypAin).WithMany(p => p.WyposazenieAielems)
                .HasForeignKey(d => d.WypAieWypAinid)
                .HasConstraintName("FK_WypAIENaglowek");
        });

        modelBuilder.Entity<WyposazenieAinag>(entity =>
        {
            entity.HasKey(e => e.WypAinWypAinid)
                .HasName("WypAIN_Primary")
                .HasFillFactor(100);

            entity.ToTable("WyposazenieAINag", "CDN");

            entity.HasIndex(e => e.WypAinDdfId, "WypAINDokDefinicja").HasFillFactor(100);

            entity.HasIndex(e => new { e.WypAinKatId, e.WypAinDataDok, e.WypAinWypAinid }, "WypAINKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.WypAinNumerString, e.WypAinNumerNr }, "WypAINNumer")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.WypAinNumerPelny, "WypAINNumerPelny")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WypAinWypAinid).HasColumnName("WypAIN_WypAINID");
            entity.Property(e => e.WypAinBufor).HasColumnName("WypAIN_Bufor");
            entity.Property(e => e.WypAinDataDok)
                .HasColumnType("datetime")
                .HasColumnName("WypAIN_DataDok");
            entity.Property(e => e.WypAinDdfId).HasColumnName("WypAIN_DDfID");
            entity.Property(e => e.WypAinKatId).HasColumnName("WypAIN_KatID");
            entity.Property(e => e.WypAinKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WypAIN_Kategoria");
            entity.Property(e => e.WypAinNumerNr).HasColumnName("WypAIN_NumerNr");
            entity.Property(e => e.WypAinNumerPelny)
                .HasMaxLength(30)
                .HasComputedColumnSql("([CDN].[FN_NUMERPELNY]([WypAIN_NUMERNR],[WypAIN_NUMERSTRING]))", false)
                .HasColumnName("WypAIN_NumerPelny");
            entity.Property(e => e.WypAinNumerString)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("WypAIN_NumerString");
            entity.Property(e => e.WypAinOpeModId).HasColumnName("WypAIN_OpeModID");
            entity.Property(e => e.WypAinOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WypAIN_OpeModKod");
            entity.Property(e => e.WypAinOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WypAIN_OpeModNazwisko");
            entity.Property(e => e.WypAinOpeZalId).HasColumnName("WypAIN_OpeZalID");
            entity.Property(e => e.WypAinOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WypAIN_OpeZalKod");
            entity.Property(e => e.WypAinOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WypAIN_OpeZalNazwisko");
            entity.Property(e => e.WypAinOpis)
                .HasMaxLength(1024)
                .HasColumnName("WypAIN_Opis");
            entity.Property(e => e.WypAinStaModId).HasColumnName("WypAIN_StaModID");
            entity.Property(e => e.WypAinStaZalId).HasColumnName("WypAIN_StaZalID");
            entity.Property(e => e.WypAinTsMod)
                .HasColumnType("datetime")
                .HasColumnName("WypAIN_TS_Mod");
            entity.Property(e => e.WypAinTsZal)
                .HasColumnType("datetime")
                .HasColumnName("WypAIN_TS_Zal");

            entity.HasOne(d => d.WypAinDdf).WithMany(p => p.WyposazenieAinags)
                .HasForeignKey(d => d.WypAinDdfId)
                .HasConstraintName("FK_WypAINDokDefinicja");

            entity.HasOne(d => d.WypAinKat).WithMany(p => p.WyposazenieAinags)
                .HasForeignKey(d => d.WypAinKatId)
                .HasConstraintName("FK_WypAINKategoria");
        });

        modelBuilder.Entity<WyposazenieAtrybutyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WyposazenieAtrybutyView", "CDN");

            entity.Property(e => e.WyAvAtrybutFormat).HasColumnName("WyAV_AtrybutFormat");
            entity.Property(e => e.WyAvAtrybutKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("WyAV_AtrybutKod");
            entity.Property(e => e.WyAvAtrybutNazwa)
                .HasMaxLength(40)
                .HasColumnName("WyAV_AtrybutNazwa");
            entity.Property(e => e.WyAvAtrybutWartosc)
                .HasMaxLength(255)
                .HasColumnName("WyAV_AtrybutWartosc");
            entity.Property(e => e.WyAvDataLikw)
                .HasColumnType("datetime")
                .HasColumnName("WyAV_DataLikw");
            entity.Property(e => e.WyAvDataZak)
                .HasColumnType("datetime")
                .HasColumnName("WyAV_DataZak");
            entity.Property(e => e.WyAvDeAid).HasColumnName("WyAV_DeAId");
            entity.Property(e => e.WyAvDokumentId).HasColumnName("WyAV_DokumentID");
            entity.Property(e => e.WyAvDokumentNr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("WyAV_DokumentNr");
            entity.Property(e => e.WyAvDokumentTyp).HasColumnName("WyAV_DokumentTyp");
            entity.Property(e => e.WyAvIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WyAV_Ilosc");
            entity.Property(e => e.WyAvJednostkaMiary)
                .HasMaxLength(20)
                .HasColumnName("WyAV_JednostkaMiary");
            entity.Property(e => e.WyAvKatId).HasColumnName("WyAV_KatID");
            entity.Property(e => e.WyAvKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WyAV_Kategoria");
            entity.Property(e => e.WyAvLikwDokument)
                .HasMaxLength(256)
                .HasColumnName("WyAV_LikwDokument");
            entity.Property(e => e.WyAvLikwidacja)
                .HasMaxLength(50)
                .HasColumnName("WyAV_Likwidacja");
            entity.Property(e => e.WyAvLp).HasColumnName("WyAV_Lp");
            entity.Property(e => e.WyAvNazwa)
                .HasMaxLength(50)
                .HasColumnName("WyAV_Nazwa");
            entity.Property(e => e.WyAvNrInwent)
                .HasMaxLength(20)
                .HasColumnName("WyAV_NrInwent");
            entity.Property(e => e.WyAvNumerKpr)
                .HasMaxLength(20)
                .HasColumnName("WyAV_NumerKPR");
            entity.Property(e => e.WyAvOpeModId).HasColumnName("WyAV_OpeModID");
            entity.Property(e => e.WyAvOpeZalId).HasColumnName("WyAV_OpeZalID");
            entity.Property(e => e.WyAvOpis)
                .HasMaxLength(254)
                .HasColumnName("WyAV_Opis");
            entity.Property(e => e.WyAvPrcId).HasColumnName("WyAV_PrcID");
            entity.Property(e => e.WyAvPrcNazwisko)
                .HasMaxLength(100)
                .HasColumnName("WyAV_PrcNazwisko");
            entity.Property(e => e.WyAvSrAid).HasColumnName("WyAV_SrAId");
            entity.Property(e => e.WyAvStaModId).HasColumnName("WyAV_StaModId");
            entity.Property(e => e.WyAvStaZalId).HasColumnName("WyAV_StaZalId");
            entity.Property(e => e.WyAvStan).HasColumnName("WyAV_Stan");
            entity.Property(e => e.WyAvTsMod)
                .HasColumnType("datetime")
                .HasColumnName("WyAV_TS_Mod");
            entity.Property(e => e.WyAvTsZal)
                .HasColumnType("datetime")
                .HasColumnName("WyAV_TS_Zal");
            entity.Property(e => e.WyAvWartoscZakup)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyAV_WartoscZakup");
            entity.Property(e => e.WyAvWyAvid)
                .HasMaxLength(4000)
                .HasColumnName("WyAV_WyAVID");
            entity.Property(e => e.WyAvWypId).HasColumnName("WyAV_WypID");
        });

        modelBuilder.Entity<WyposazenieMiejscaUzytkowanium>(entity =>
        {
            entity.HasKey(e => e.WyMuWyMuid)
                .HasName("WyMUPrimary")
                .HasFillFactor(100);

            entity.ToTable("WyposazenieMiejscaUzytkowania", "CDN");

            entity.HasIndex(e => new { e.WyMuWypId, e.WyMuDataOd }, "WyMUWyp")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WyMuWyMuid).HasColumnName("WyMU_WyMUID");
            entity.Property(e => e.WyMuDataDo)
                .HasColumnType("datetime")
                .HasColumnName("WyMU_DataDo");
            entity.Property(e => e.WyMuDataOd)
                .HasColumnType("datetime")
                .HasColumnName("WyMU_DataOd");
            entity.Property(e => e.WyMuNazwa)
                .HasMaxLength(255)
                .HasColumnName("WyMU_Nazwa");
            entity.Property(e => e.WyMuWypId).HasColumnName("WyMU_WypID");

            entity.HasOne(d => d.WyMuWyp).WithMany(p => p.WyposazenieMiejscaUzytkowania)
                .HasForeignKey(d => d.WyMuWypId)
                .HasConstraintName("FK_WyMUWyp");
        });

        modelBuilder.Entity<WyposazenieOsobyOdpowiedzialne>(entity =>
        {
            entity.HasKey(e => e.WyOoWyOoid)
                .HasName("WyOOPrimary")
                .HasFillFactor(100);

            entity.ToTable("WyposazenieOsobyOdpowiedzialne", "CDN");

            entity.HasIndex(e => new { e.WyOoWypId, e.WyOoDataOd }, "WyOOWyp")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WyOoWyOoid).HasColumnName("WyOO_WyOOID");
            entity.Property(e => e.WyOoDataDo)
                .HasColumnType("datetime")
                .HasColumnName("WyOO_DataDo");
            entity.Property(e => e.WyOoDataOd)
                .HasColumnType("datetime")
                .HasColumnName("WyOO_DataOd");
            entity.Property(e => e.WyOoPrcId).HasColumnName("WyOO_PrcID");
            entity.Property(e => e.WyOoPrcImieNazwisko)
                .HasMaxLength(255)
                .HasColumnName("WyOO_PrcImieNazwisko");
            entity.Property(e => e.WyOoWypId).HasColumnName("WyOO_WypID");

            entity.HasOne(d => d.WyOoWyp).WithMany(p => p.WyposazenieOsobyOdpowiedzialnes)
                .HasForeignKey(d => d.WyOoWypId)
                .HasConstraintName("FK_WyOOWyp");
        });

        modelBuilder.Entity<WyposazeniePowiazanium>(entity =>
        {
            entity.HasKey(e => e.WypPWypPid)
                .HasName("WypP_Primary")
                .HasFillFactor(100);

            entity.ToTable("WyposazeniePowiazania", "CDN");

            entity.HasIndex(e => new { e.WypPWypId, e.WypPDokumentId, e.WypPDokumentTyp, e.WypPNumer }, "WypPDok")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WypPWypPid).HasColumnName("WypP_WypPID");
            entity.Property(e => e.WypPDataDok)
                .HasColumnType("datetime")
                .HasColumnName("WypP_DataDok");
            entity.Property(e => e.WypPDokumentId).HasColumnName("WypP_DokumentID");
            entity.Property(e => e.WypPDokumentTyp).HasColumnName("WypP_DokumentTyp");
            entity.Property(e => e.WypPKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WypP_Kwota");
            entity.Property(e => e.WypPNumer)
                .HasMaxLength(256)
                .HasColumnName("WypP_Numer");
            entity.Property(e => e.WypPOpis)
                .HasMaxLength(255)
                .HasColumnName("WypP_Opis");
            entity.Property(e => e.WypPWypId).HasColumnName("WypP_WypID");

            entity.HasOne(d => d.WypPWyp).WithMany(p => p.WyposazeniePowiazania)
                .HasForeignKey(d => d.WypPWypId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WypPDok");
        });

        modelBuilder.Entity<WzorWartosci>(entity =>
        {
            entity.HasKey(e => e.WzwWzwId)
                .HasName("WZW_Primary")
                .HasFillFactor(100);

            entity.ToTable("WzorWartosci", "CDN");

            entity.HasIndex(e => e.WzwTwpId, "WZWTypWyplata").HasFillFactor(100);

            entity.HasIndex(e => e.WzwWzrId, "WZWWzrId").HasFillFactor(100);

            entity.Property(e => e.WzwWzwId).HasColumnName("WZW_WzwId");
            entity.Property(e => e.WzwDodatkowe)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WZW_Dodatkowe");
            entity.Property(e => e.WzwNieaktywny).HasColumnName("WZW_Nieaktywny");
            entity.Property(e => e.WzwSymbol)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("WZW_Symbol");
            entity.Property(e => e.WzwTwpId).HasColumnName("WZW_TwpId");
            entity.Property(e => e.WzwWzor)
                .HasMaxLength(256)
                .HasColumnName("WZW_Wzor");
            entity.Property(e => e.WzwWzrId).HasColumnName("WZW_WzrId");

            entity.HasOne(d => d.WzwTwp).WithMany(p => p.WzorWartoscis)
                .HasForeignKey(d => d.WzwTwpId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WZWTypWyplata");
        });

        modelBuilder.Entity<Wzorce>(entity =>
        {
            entity.HasKey(e => e.WzrWzrId)
                .HasName("WZR_Primary")
                .HasFillFactor(100);

            entity.ToTable("Wzorce", "CDN");

            entity.HasIndex(e => e.WzrNazwa, "WZRKeyNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.WzrWzrId).HasColumnName("WZR_WzrId");
            entity.Property(e => e.WzrDataDo)
                .HasColumnType("datetime")
                .HasColumnName("WZR_DataDo");
            entity.Property(e => e.WzrDataOd)
                .HasColumnType("datetime")
                .HasColumnName("WZR_DataOd");
            entity.Property(e => e.WzrDodatkowe)
                .HasMaxLength(128)
                .HasColumnName("WZR_Dodatkowe");
            entity.Property(e => e.WzrLista).HasColumnName("WZR_Lista");
            entity.Property(e => e.WzrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WZR_Nazwa");
            entity.Property(e => e.WzrOpeModId).HasColumnName("WZR_OpeModId");
            entity.Property(e => e.WzrOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WZR_OpeModKod");
            entity.Property(e => e.WzrOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WZR_OpeModNazwisko");
            entity.Property(e => e.WzrOpeZalId).HasColumnName("WZR_OpeZalId");
            entity.Property(e => e.WzrOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WZR_OpeZalKod");
            entity.Property(e => e.WzrOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("WZR_OpeZalNazwisko");
            entity.Property(e => e.WzrOpis)
                .HasMaxLength(256)
                .HasColumnName("WZR_Opis");
            entity.Property(e => e.WzrRodzaj).HasColumnName("WZR_Rodzaj");
            entity.Property(e => e.WzrStaModId).HasColumnName("WZR_StaModId");
            entity.Property(e => e.WzrStaZalId).HasColumnName("WZR_StaZalId");
            entity.Property(e => e.WzrTsMod)
                .HasColumnType("datetime")
                .HasColumnName("WZR_TS_Mod");
            entity.Property(e => e.WzrTsZal)
                .HasColumnType("datetime")
                .HasColumnName("WZR_TS_Zal");
            entity.Property(e => e.WzrTyp).HasColumnName("WZR_Typ");
            entity.Property(e => e.WzrWzor)
                .HasMaxLength(256)
                .HasColumnName("WZR_Wzor");
            entity.Property(e => e.WzrZmiennaCur1)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WZR_ZmiennaCur1");
            entity.Property(e => e.WzrZmiennaCur2)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WZR_ZmiennaCur2");
            entity.Property(e => e.WzrZmiennaCur3)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WZR_ZmiennaCur3");
            entity.Property(e => e.WzrZmiennaInt1).HasColumnName("WZR_ZmiennaInt1");
            entity.Property(e => e.WzrZmiennaInt2).HasColumnName("WZR_ZmiennaInt2");
            entity.Property(e => e.WzrZmiennaInt3).HasColumnName("WZR_ZmiennaInt3");
        });

        modelBuilder.Entity<ZajeciaWynagr>(entity =>
        {
            entity.HasKey(e => e.ZawZawId)
                .HasName("ZAW_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZajeciaWynagr", "CDN", tb => tb.HasTrigger("ZajeciaWynagr_InsertUpdate_Trigger"));

            entity.HasIndex(e => e.ZawPraId, "ZAWPraLink").HasFillFactor(100);

            entity.Property(e => e.ZawZawId).HasColumnName("ZAW_ZawId");
            entity.Property(e => e.ZawBnaId).HasColumnName("ZAW_BnaId");
            entity.Property(e => e.ZawDataDecyzji)
                .HasColumnType("datetime")
                .HasColumnName("ZAW_DataDecyzji");
            entity.Property(e => e.ZawDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ZAW_DataDo");
            entity.Property(e => e.ZawDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ZAW_DataOd");
            entity.Property(e => e.ZawIban).HasColumnName("ZAW_IBAN");
            entity.Property(e => e.ZawIloscGodzin)
                .HasColumnType("datetime")
                .HasColumnName("ZAW_IloscGodzin");
            entity.Property(e => e.ZawImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("ZAW_ImportRowId");
            entity.Property(e => e.ZawKntId).HasColumnName("ZAW_KntId");
            entity.Property(e => e.ZawNazwa)
                .HasMaxLength(128)
                .HasColumnName("ZAW_Nazwa");
            entity.Property(e => e.ZawNieaktywne).HasColumnName("ZAW_Nieaktywne");
            entity.Property(e => e.ZawOpeModId).HasColumnName("ZAW_OpeModId");
            entity.Property(e => e.ZawOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZAW_OpeModKod");
            entity.Property(e => e.ZawOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZAW_OpeModNazwisko");
            entity.Property(e => e.ZawOpeZalId).HasColumnName("ZAW_OpeZalId");
            entity.Property(e => e.ZawOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZAW_OpeZalKod");
            entity.Property(e => e.ZawOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZAW_OpeZalNazwisko");
            entity.Property(e => e.ZawOpis)
                .HasMaxLength(256)
                .HasColumnName("ZAW_Opis");
            entity.Property(e => e.ZawPraId).HasColumnName("ZAW_PraId");
            entity.Property(e => e.ZawPriorytet).HasColumnName("ZAW_Priorytet");
            entity.Property(e => e.ZawProcWynZgodnyGrupa).HasColumnName("ZAW_ProcWynZgodnyGrupa");
            entity.Property(e => e.ZawRachunekNr)
                .HasMaxLength(50)
                .HasColumnName("ZAW_RachunekNr");
            entity.Property(e => e.ZawRachunekNr0)
                .HasMaxLength(50)
                .HasColumnName("ZAW_RachunekNr0");
            entity.Property(e => e.ZawRodzaj).HasColumnName("ZAW_Rodzaj");
            entity.Property(e => e.ZawRodzajCzasuPracy).HasColumnName("ZAW_RodzajCzasuPracy");
            entity.Property(e => e.ZawSplacone).HasColumnName("ZAW_Splacone");
            entity.Property(e => e.ZawSplaconeCale)
                .HasComputedColumnSql("([cdn].[SplaconeCale]([ZAW_Rodzaj],[ZAW_Wartosc],[ZAW_Splacono],[ZAW_Splacone]))", false)
                .HasColumnName("ZAW_SplaconeCale");
            entity.Property(e => e.ZawSplacono)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAW_Splacono");
            entity.Property(e => e.ZawStaModId).HasColumnName("ZAW_StaModId");
            entity.Property(e => e.ZawStaZalId).HasColumnName("ZAW_StaZalId");
            entity.Property(e => e.ZawSygnatura)
                .HasMaxLength(70)
                .HasColumnName("ZAW_Sygnatura");
            entity.Property(e => e.ZawTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ZAW_TS_Mod");
            entity.Property(e => e.ZawTsZal)
                .HasColumnType("datetime")
                .HasColumnName("ZAW_TS_Zal");
            entity.Property(e => e.ZawTwpId).HasColumnName("ZAW_TwpId");
            entity.Property(e => e.ZawUmowa).HasColumnName("ZAW_Umowa");
            entity.Property(e => e.ZawUmowaOgranicz).HasColumnName("ZAW_UmowaOgranicz");
            entity.Property(e => e.ZawUmowaOgraniczKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAW_UmowaOgraniczKwota");
            entity.Property(e => e.ZawUmowaOgraniczProcent)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAW_UmowaOgraniczProcent");
            entity.Property(e => e.ZawWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAW_Wartosc");

            entity.HasOne(d => d.ZawPra).WithMany(p => p.ZajeciaWynagrs)
                .HasForeignKey(d => d.ZawPraId)
                .HasConstraintName("FK_ZAWPraLink");
        });

        modelBuilder.Entity<ZakazyDoWydzialowView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ZakazyDoWydzialowView", "CDN");
        });

        modelBuilder.Entity<Zaklady>(entity =>
        {
            entity.HasKey(e => e.ZakZakId)
                .HasName("PK_Zak_ZakID")
                .HasFillFactor(100);

            entity.ToTable("Zaklady", "CDN", tb =>
                {
                    tb.HasTrigger("Zaklady_Delete_Trigger");
                    tb.HasTrigger("Zaklady_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.ZakImportRowId, "ZakGUID")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.ZakSymbol, "ZakSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ZakZakId).HasColumnName("Zak_ZakID");
            entity.Property(e => e.ZakDomyslny).HasColumnName("Zak_Domyslny");
            entity.Property(e => e.ZakImportAppId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Zak_ImportAppId");
            entity.Property(e => e.ZakImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("Zak_ImportRowId");
            entity.Property(e => e.ZakKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Zak_KodPocztowy");
            entity.Property(e => e.ZakMiejscowosc)
                .HasMaxLength(40)
                .HasColumnName("Zak_Miejscowosc");
            entity.Property(e => e.ZakNazwaFirmy)
                .HasMaxLength(250)
                .HasColumnName("Zak_NazwaFirmy");
            entity.Property(e => e.ZakNazwaZakladu)
                .HasMaxLength(250)
                .HasColumnName("Zak_NazwaZakladu");
            entity.Property(e => e.ZakNieaktywny).HasColumnName("Zak_Nieaktywny");
            entity.Property(e => e.ZakNipE)
                .HasMaxLength(20)
                .HasColumnName("Zak_NipE");
            entity.Property(e => e.ZakNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Zak_NipKraj");
            entity.Property(e => e.ZakNrDomu)
                .HasMaxLength(10)
                .HasColumnName("Zak_NrDomu");
            entity.Property(e => e.ZakNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("Zak_NrLokalu");
            entity.Property(e => e.ZakOpeModId).HasColumnName("Zak_OpeModID");
            entity.Property(e => e.ZakOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zak_OpeModKod");
            entity.Property(e => e.ZakOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Zak_OpeModNazwisko");
            entity.Property(e => e.ZakOpeZalId).HasColumnName("Zak_OpeZalID");
            entity.Property(e => e.ZakOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zak_OpeZalKod");
            entity.Property(e => e.ZakOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Zak_OpeZalNazwisko");
            entity.Property(e => e.ZakPierwszy).HasColumnName("Zak_Pierwszy");
            entity.Property(e => e.ZakPoczta)
                .HasMaxLength(40)
                .HasColumnName("Zak_Poczta");
            entity.Property(e => e.ZakRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Zak_Regon");
            entity.Property(e => e.ZakStaModId).HasColumnName("Zak_StaModId");
            entity.Property(e => e.ZakStaZalId).HasColumnName("Zak_StaZalId");
            entity.Property(e => e.ZakSymbol)
                .HasMaxLength(30)
                .HasColumnName("Zak_Symbol");
            entity.Property(e => e.ZakTsExport)
                .HasColumnType("datetime")
                .HasColumnName("Zak_TS_Export");
            entity.Property(e => e.ZakTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Zak_TS_Mod");
            entity.Property(e => e.ZakTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Zak_TS_Zal");
            entity.Property(e => e.ZakUlica)
                .HasMaxLength(40)
                .HasColumnName("Zak_Ulica");
        });

        modelBuilder.Entity<Zaliczki>(entity =>
        {
            entity.HasKey(e => e.ZalZalId)
                .HasName("Zal_Primary")
                .HasFillFactor(100);

            entity.ToTable("Zaliczki", "CDN", tb => tb.HasTrigger("Zaliczki_InsertUpdateHandler"));

            entity.HasIndex(e => e.ZalBzpId, "DoRBnkZapis").HasFillFactor(100);

            entity.HasIndex(e => new { e.ZalDokumentId, e.ZalDokumentTyp, e.ZalBzpId }, "DoRDokument")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ZalZalId).HasColumnName("Zal_ZalID");
            entity.Property(e => e.ZalBzpId).HasColumnName("Zal_BZpId");
            entity.Property(e => e.ZalDokumentId).HasColumnName("Zal_DokumentID");
            entity.Property(e => e.ZalDokumentTyp).HasColumnName("Zal_DokumentTyp");
            entity.Property(e => e.ZalKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Zal_Kwota");
            entity.Property(e => e.ZalOpeModId).HasColumnName("Zal_OpeModId");
            entity.Property(e => e.ZalOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zal_OpeModKod");
            entity.Property(e => e.ZalOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Zal_OpeModNazwisko");
            entity.Property(e => e.ZalOpeZalId).HasColumnName("Zal_OpeZalId");
            entity.Property(e => e.ZalOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zal_OpeZalKod");
            entity.Property(e => e.ZalOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("Zal_OpeZalNazwisko");
            entity.Property(e => e.ZalStaModId).HasColumnName("Zal_StaModId");
            entity.Property(e => e.ZalStaZalId).HasColumnName("Zal_StaZalId");
            entity.Property(e => e.ZalTsMod)
                .HasColumnType("datetime")
                .HasColumnName("Zal_TS_Mod");
            entity.Property(e => e.ZalTsZal)
                .HasColumnType("datetime")
                .HasColumnName("Zal_TS_Zal");
            entity.Property(e => e.ZalZaznaczenie).HasColumnName("Zal_Zaznaczenie");

            entity.HasOne(d => d.ZalBzp).WithMany(p => p.Zaliczkis)
                .HasForeignKey(d => d.ZalBzpId)
                .HasConstraintName("FK_DoRBnkZapis");
        });

        modelBuilder.Entity<Zamienniki>(entity =>
        {
            entity.HasKey(e => e.ZamZamId)
                .HasName("ZAM_Primary")
                .HasFillFactor(100);

            entity.ToTable("Zamienniki", "CDN");

            entity.HasIndex(e => new { e.ZamTwrId, e.ZamZamTwrId }, "ZamTwrId")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ZamZamId).HasColumnName("ZAM_ZamId");
            entity.Property(e => e.ZamLp).HasColumnName("ZAM_Lp");
            entity.Property(e => e.ZamTwrId).HasColumnName("ZAM_TwrId");
            entity.Property(e => e.ZamZamTwrId).HasColumnName("ZAM_ZamTwrId");

            entity.HasOne(d => d.ZamTwr).WithMany(p => p.Zamiennikis)
                .HasForeignKey(d => d.ZamTwrId)
                .HasConstraintName("FK_ZamTwrId");
        });

        modelBuilder.Entity<ZamowienieKuriera>(entity =>
        {
            entity.HasKey(e => e.ZamkZamkid)
                .HasName("ZAMK_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZamowienieKuriera", "CDN");

            entity.HasIndex(e => e.ZamkAdresId, "ZAMK_AdresID_idx").HasFillFactor(100);

            entity.Property(e => e.ZamkZamkid).HasColumnName("ZAMK_ZAMKID");
            entity.Property(e => e.ZamkAdresId).HasColumnName("ZAMK_AdresID");
            entity.Property(e => e.ZamkDataZamowienia)
                .HasColumnType("datetime")
                .HasColumnName("ZAMK_DataZamowienia");
            entity.Property(e => e.ZamkKurierTyp).HasColumnName("ZAMK_KurierTyp");
        });

        modelBuilder.Entity<ZaniechaniaRoz>(entity =>
        {
            entity.HasKey(e => e.ZarZarId)
                .HasName("ZAR_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZaniechaniaRoz", "CDN");

            entity.HasIndex(e => e.ZarWplId, "ZARWplId").HasFillFactor(100);

            entity.HasIndex(e => e.ZarZanId, "ZARZanId").HasFillFactor(100);

            entity.Property(e => e.ZarZarId).HasColumnName("ZAR_ZarId");
            entity.Property(e => e.ZarData)
                .HasColumnType("datetime")
                .HasColumnName("ZAR_Data");
            entity.Property(e => e.ZarKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAR_Kwota");
            entity.Property(e => e.ZarWplId).HasColumnName("ZAR_WplId");
            entity.Property(e => e.ZarZanId).HasColumnName("ZAR_ZanId");

            entity.HasOne(d => d.ZarZan).WithMany(p => p.ZaniechaniaRozs)
                .HasForeignKey(d => d.ZarZanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZARZanId");
        });

        modelBuilder.Entity<Zaniechanium>(entity =>
        {
            entity.HasKey(e => e.ZanZanId)
                .HasName("ZAN_Primary")
                .HasFillFactor(100);

            entity.ToTable("Zaniechania", "CDN");

            entity.HasIndex(e => new { e.ZanPraId, e.ZanData }, "ZANPraLink").HasFillFactor(100);

            entity.HasIndex(e => e.ZanSposob, "ZANTwpLink").HasFillFactor(100);

            entity.Property(e => e.ZanZanId).HasColumnName("ZAN_ZanId");
            entity.Property(e => e.ZanData)
                .HasColumnType("datetime")
                .HasColumnName("ZAN_Data");
            entity.Property(e => e.ZanKwotaRoz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAN_KwotaRoz");
            entity.Property(e => e.ZanKwotaTemp)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAN_KwotaTemp");
            entity.Property(e => e.ZanKwotaZan)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZAN_KwotaZan");
            entity.Property(e => e.ZanNazwa)
                .HasMaxLength(40)
                .HasColumnName("ZAN_Nazwa");
            entity.Property(e => e.ZanOpeModId).HasColumnName("ZAN_OpeModId");
            entity.Property(e => e.ZanOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZAN_OpeModKod");
            entity.Property(e => e.ZanOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZAN_OpeModNazwisko");
            entity.Property(e => e.ZanOpeZalId).HasColumnName("ZAN_OpeZalId");
            entity.Property(e => e.ZanOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZAN_OpeZalKod");
            entity.Property(e => e.ZanOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZAN_OpeZalNazwisko");
            entity.Property(e => e.ZanPraId).HasColumnName("ZAN_PraId");
            entity.Property(e => e.ZanSposob).HasColumnName("ZAN_Sposob");
            entity.Property(e => e.ZanStaModId).HasColumnName("ZAN_StaModId");
            entity.Property(e => e.ZanStaZalId).HasColumnName("ZAN_StaZalId");
            entity.Property(e => e.ZanTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ZAN_TS_Mod");
            entity.Property(e => e.ZanTsZal)
                .HasColumnType("datetime")
                .HasColumnName("ZAN_TS_Zal");

            entity.HasOne(d => d.ZanPra).WithMany(p => p.Zaniechania)
                .HasForeignKey(d => d.ZanPraId)
                .HasConstraintName("FK_ZANPraLink");
        });

        modelBuilder.Entity<ZapisyKpr>(entity =>
        {
            entity.HasKey(e => e.KprKprid)
                .HasName("KPR_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZapisyKPR", "CDN", tb =>
                {
                    tb.HasTrigger("ZapisyKPR_Delete_Trigger");
                    tb.HasTrigger("ZapisyKPR_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.KprDataOpe, e.KprKprid }, "KPRChrono")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KprBufor, e.KprDataOpe, e.KprKprid }, "KPRChronoBuf")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KprKatId, e.KprDataOpe, e.KprKprid }, "KPRKategoria")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KprPodId, e.KprPodmiotTyp, e.KprDataOpe, e.KprKprid }, "KPRKontrah")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.KprBufor, e.KprRokMies, e.KprLp, e.KprKprid }, "KPRLp")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.KprOrgId, "KPROryginal").HasFillFactor(100);

            entity.Property(e => e.KprKprid).HasColumnName("KPR_KPRID");
            entity.Property(e => e.KprBufor).HasColumnName("KPR_Bufor");
            entity.Property(e => e.KprDataGosp)
                .HasDefaultValueSql("((-2))")
                .HasColumnType("datetime")
                .HasColumnName("KPR_DataGosp");
            entity.Property(e => e.KprDataOpe)
                .HasColumnType("datetime")
                .HasColumnName("KPR_DataOpe");
            entity.Property(e => e.KprDokument)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("KPR_Dokument");
            entity.Property(e => e.KprImportRowId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("KPR_ImportRowId");
            entity.Property(e => e.KprInne)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Inne");
            entity.Property(e => e.KprKatId).HasColumnName("KPR_KatID");
            entity.Property(e => e.KprKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KPR_Kategoria");
            entity.Property(e => e.KprKntAdres2)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntAdres2");
            entity.Property(e => e.KprKntGmina)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntGmina");
            entity.Property(e => e.KprKntKodPocztowy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("KPR_KntKodPocztowy");
            entity.Property(e => e.KprKntKraj)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntKraj");
            entity.Property(e => e.KprKntMiasto)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntMiasto");
            entity.Property(e => e.KprKntNazwa1)
                .HasMaxLength(50)
                .HasColumnName("KPR_KntNazwa1");
            entity.Property(e => e.KprKntNazwa2)
                .HasMaxLength(50)
                .HasColumnName("KPR_KntNazwa2");
            entity.Property(e => e.KprKntNazwa3)
                .HasMaxLength(250)
                .HasColumnName("KPR_KntNazwa3");
            entity.Property(e => e.KprKntNipE)
                .HasMaxLength(20)
                .HasColumnName("KPR_KntNipE");
            entity.Property(e => e.KprKntNipKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("KPR_KntNipKraj");
            entity.Property(e => e.KprKntNrDomu)
                .HasMaxLength(10)
                .HasColumnName("KPR_KntNrDomu");
            entity.Property(e => e.KprKntNrLokalu)
                .HasMaxLength(10)
                .HasColumnName("KPR_KntNrLokalu");
            entity.Property(e => e.KprKntPoczta)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntPoczta");
            entity.Property(e => e.KprKntPowiat)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntPowiat");
            entity.Property(e => e.KprKntUlica)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntUlica");
            entity.Property(e => e.KprKntWojewodztwo)
                .HasMaxLength(40)
                .HasColumnName("KPR_KntWojewodztwo");
            entity.Property(e => e.KprKorekta).HasColumnName("KPR_Korekta");
            entity.Property(e => e.KprKorektaZaplaconych).HasColumnName("KPR_KorektaZaplaconych");
            entity.Property(e => e.KprKosztyBiR)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Koszty_BiR");
            entity.Property(e => e.KprLp).HasColumnName("KPR_Lp");
            entity.Property(e => e.KprOpeModId).HasColumnName("KPR_OpeModID");
            entity.Property(e => e.KprOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPR_OpeModKod");
            entity.Property(e => e.KprOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KPR_OpeModNazwisko");
            entity.Property(e => e.KprOpeZalId).HasColumnName("KPR_OpeZalID");
            entity.Property(e => e.KprOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPR_OpeZalKod");
            entity.Property(e => e.KprOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("KPR_OpeZalNazwisko");
            entity.Property(e => e.KprOpisKorekta)
                .HasMaxLength(254)
                .HasColumnName("KPR_OpisKorekta");
            entity.Property(e => e.KprOpisKosztow)
                .HasMaxLength(254)
                .HasDefaultValue("")
                .HasColumnName("KPR_OpisKosztow");
            entity.Property(e => e.KprOrgId).HasColumnName("KPR_OrgId");
            entity.Property(e => e.KprPodId).HasColumnName("KPR_PodID");
            entity.Property(e => e.KprPodmiotTyp).HasColumnName("KPR_PodmiotTyp");
            entity.Property(e => e.KprPozostale)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Pozostale");
            entity.Property(e => e.KprReklama)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Reklama");
            entity.Property(e => e.KprRokMies).HasColumnName("KPR_RokMies");
            entity.Property(e => e.KprSkreslony).HasColumnName("KPR_Skreslony");
            entity.Property(e => e.KprSpisZnatury).HasColumnName("KPR_SpisZNatury");
            entity.Property(e => e.KprSprzedaz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Sprzedaz");
            entity.Property(e => e.KprStaModId).HasColumnName("KPR_StaModId");
            entity.Property(e => e.KprStaZalId).HasColumnName("KPR_StaZalId");
            entity.Property(e => e.KprTowary)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Towary");
            entity.Property(e => e.KprTsMod)
                .HasColumnType("datetime")
                .HasColumnName("KPR_TS_Mod");
            entity.Property(e => e.KprTsZal)
                .HasColumnType("datetime")
                .HasColumnName("KPR_TS_Zal");
            entity.Property(e => e.KprUboczne)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Uboczne");
            entity.Property(e => e.KprUwagi)
                .HasMaxLength(254)
                .HasColumnName("KPR_Uwagi");
            entity.Property(e => e.KprWynagrodz)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Wynagrodz");
            entity.Property(e => e.KprZakId).HasColumnName("KPR_ZakID");
            entity.Property(e => e.KprZakLp).HasColumnName("KPR_ZakLp");
            entity.Property(e => e.KprZaszlosci)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KPR_Zaszlosci");
            entity.Property(e => e.KprZrodlo).HasColumnName("KPR_Zrodlo");

            entity.HasOne(d => d.KprKat).WithMany(p => p.ZapisyKprs)
                .HasForeignKey(d => d.KprKatId)
                .HasConstraintName("FK_KPRKategoria");

            entity.HasOne(d => d.PodmiotyView).WithMany(p => p.ZapisyKprs)
                .HasForeignKey(d => new { d.KprPodId, d.KprPodmiotTyp })
                .HasConstraintName("FK_KPRKontrah");
        });

        modelBuilder.Entity<ZasobyJezykowe>(entity =>
        {
            entity.HasKey(e => new { e.ZjeId, e.ZjeJezyk })
                .HasName("ZJE_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZasobyJezykowe", "CDN");

            entity.Property(e => e.ZjeId)
                .HasMaxLength(448)
                .HasColumnName("ZJE_Id");
            entity.Property(e => e.ZjeJezyk)
                .HasDefaultValue(1045)
                .HasColumnName("ZJE_Jezyk");
            entity.Property(e => e.ZjeKomunikat).HasColumnName("ZJE_Komunikat");
        });

        modelBuilder.Entity<ZasobyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ZasobyView", "CDN");

            entity.Property(e => e.TwZvBraki)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZV_Braki");
            entity.Property(e => e.TwZvCena)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("TwZV_Cena");
            entity.Property(e => e.TwZvData)
                .HasColumnType("datetime")
                .HasColumnName("TwZV_Data");
            entity.Property(e => e.TwZvGrupa)
                .HasMaxLength(4000)
                .HasColumnName("TwZV_Grupa");
            entity.Property(e => e.TwZvIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZV_Ilosc");
            entity.Property(e => e.TwZvJm)
                .HasMaxLength(20)
                .HasColumnName("TwZV_Jm");
            entity.Property(e => e.TwZvJmZ)
                .HasMaxLength(20)
                .HasColumnName("TwZV_JmZ");
            entity.Property(e => e.TwZvKatId).HasColumnName("TwZV_KatId");
            entity.Property(e => e.TwZvKatZakId).HasColumnName("TwZV_KatZakId");
            entity.Property(e => e.TwZvKategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TwZV_Kategoria");
            entity.Property(e => e.TwZvKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TwZV_Kod");
            entity.Property(e => e.TwZvMagId).HasColumnName("TwZV_MagId");
            entity.Property(e => e.TwZvNazwa)
                .HasMaxLength(255)
                .HasColumnName("TwZV_Nazwa");
            entity.Property(e => e.TwZvNumerKat)
                .HasMaxLength(40)
                .HasColumnName("TwZV_NumerKat");
            entity.Property(e => e.TwZvOpis).HasColumnName("TwZV_Opis");
            entity.Property(e => e.TwZvProdukt).HasColumnName("TwZV_Produkt");
            entity.Property(e => e.TwZvRezerwacje)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZV_Rezerwacje");
            entity.Property(e => e.TwZvRpT2id).HasColumnName("TwZV_RpT2Id");
            entity.Property(e => e.TwZvTwCnumer).HasColumnName("TwZV_TwCNumer");
            entity.Property(e => e.TwZvTwIid).HasColumnName("TwZV_TwIId");
            entity.Property(e => e.TwZvTwrId).HasColumnName("TwZV_TwrId");
            entity.Property(e => e.TwZvTwrTyp).HasColumnName("TwZV_TwrTyp");
            entity.Property(e => e.TwZvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TwZV_Waluta");
            entity.Property(e => e.TwZvWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwZV_Wartosc");
            entity.Property(e => e.TwZvZamowienia)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZV_Zamowienia");
        });

        modelBuilder.Entity<ZestKsiKol>(entity =>
        {
            entity.HasKey(e => e.ZkkZkkid)
                .HasName("ZKK_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestKsiKol", "CDN", tb => tb.HasTrigger("ZestKsiKol_Delete_Trigger"));

            entity.HasIndex(e => new { e.ZkkZknid, e.ZkkLp }, "ZKKZestawienie").HasFillFactor(100);

            entity.Property(e => e.ZkkZkkid).HasColumnName("ZKK_ZKKId");
            entity.Property(e => e.ZkkDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ZKK_DataDo");
            entity.Property(e => e.ZkkDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ZKK_DataOd");
            entity.Property(e => e.ZkkLp).HasColumnName("ZKK_Lp");
            entity.Property(e => e.ZkkNazwa)
                .HasMaxLength(20)
                .HasColumnName("ZKK_Nazwa");
            entity.Property(e => e.ZkkOkres).HasColumnName("ZKK_Okres");
            entity.Property(e => e.ZkkZknid).HasColumnName("ZKK_ZKNId");

            entity.HasOne(d => d.ZkkZkn).WithMany(p => p.ZestKsiKols)
                .HasForeignKey(d => d.ZkkZknid)
                .HasConstraintName("FK_ZKKZestawienie");
        });

        modelBuilder.Entity<ZestKsiNag>(entity =>
        {
            entity.HasKey(e => e.ZknZknid)
                .HasName("ZKN_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestKsiNag", "CDN", tb =>
                {
                    tb.HasTrigger("ZestKsiNag_Delete_Trigger");
                    tb.HasTrigger("ZestKsiNag_Update_Trigger");
                });

            entity.HasIndex(e => e.ZknSymbol, "ZKNSymbol")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.ZknTypZest, e.ZknSymbol }, "ZKNTyp")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ZknZknid).HasColumnName("ZKN_ZKNId");
            entity.Property(e => e.ZknBufor).HasColumnName("ZKN_Bufor");
            entity.Property(e => e.ZknNazwa)
                .HasMaxLength(255)
                .HasColumnName("ZKN_Nazwa");
            entity.Property(e => e.ZknNieaktywne).HasColumnName("ZKN_Nieaktywne");
            entity.Property(e => e.ZknNumeracja)
                .HasMaxLength(20)
                .HasColumnName("ZKN_Numeracja");
            entity.Property(e => e.ZknOpeModId).HasColumnName("ZKN_OpeModID");
            entity.Property(e => e.ZknOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKN_OpeModKod");
            entity.Property(e => e.ZknOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZKN_OpeModNazwisko");
            entity.Property(e => e.ZknOpeZalId).HasColumnName("ZKN_OpeZalID");
            entity.Property(e => e.ZknOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKN_OpeZalKod");
            entity.Property(e => e.ZknOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZKN_OpeZalNazwisko");
            entity.Property(e => e.ZknOpis)
                .HasMaxLength(254)
                .HasColumnName("ZKN_Opis");
            entity.Property(e => e.ZknStaModId).HasColumnName("ZKN_StaModId");
            entity.Property(e => e.ZknStaZalId).HasColumnName("ZKN_StaZalId");
            entity.Property(e => e.ZknSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ZKN_Symbol");
            entity.Property(e => e.ZknTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ZKN_TS_Mod");
            entity.Property(e => e.ZknTsOblicz)
                .HasColumnType("datetime")
                .HasColumnName("ZKN_TS_Oblicz");
            entity.Property(e => e.ZknTsZal)
                .HasColumnType("datetime")
                .HasColumnName("ZKN_TS_Zal");
            entity.Property(e => e.ZknTypJednostki).HasColumnName("ZKN_TypJednostki");
            entity.Property(e => e.ZknTypZest).HasColumnName("ZKN_TypZest");
            entity.Property(e => e.ZknTypZestawienia).HasColumnName("ZKN_TypZestawienia");
        });

        modelBuilder.Entity<ZestKsiPoz>(entity =>
        {
            entity.HasKey(e => e.ZkpZkpid)
                .HasName("ZKP_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestKsiPoz", "CDN", tb =>
                {
                    tb.HasTrigger("ZestKsiPoz_Delete_Trigger");
                    tb.HasTrigger("ZestKsiPoz_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.ZkpParId, e.ZkpLp, e.ZkpZkpid }, "ZKPParrent")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.ZkpZknid, "ZKPZestawienie").HasFillFactor(100);

            entity.Property(e => e.ZkpZkpid).HasColumnName("ZKP_ZKPId");
            entity.Property(e => e.ZkpBrakKontroli).HasColumnName("ZKP_BrakKontroli");
            entity.Property(e => e.ZkpDefinicja)
                .HasMaxLength(2000)
                .HasColumnName("ZKP_Definicja");
            entity.Property(e => e.ZkpLisc).HasColumnName("ZKP_Lisc");
            entity.Property(e => e.ZkpLp).HasColumnName("ZKP_Lp");
            entity.Property(e => e.ZkpNazwa)
                .HasMaxLength(255)
                .HasColumnName("ZKP_Nazwa");
            entity.Property(e => e.ZkpNumer)
                .HasMaxLength(50)
                .HasComputedColumnSql("([CDN].[ZestKsiNumer]([ZKP_ZKPId]))", false)
                .HasColumnName("ZKP_Numer");
            entity.Property(e => e.ZkpNumeracja)
                .HasMaxLength(4)
                .HasDefaultValue("AUTO")
                .HasColumnName("ZKP_Numeracja");
            entity.Property(e => e.ZkpParId).HasColumnName("ZKP_ParId");
            entity.Property(e => e.ZkpPoziom).HasColumnName("ZKP_Poziom");
            entity.Property(e => e.ZkpSegment)
                .HasMaxLength(8)
                .HasComputedColumnSql("([CDN].[ZestKsiSegment]([ZKP_ZKPId]))", false)
                .HasColumnName("ZKP_Segment");
            entity.Property(e => e.ZkpSfid).HasColumnName("ZKP_SFId");
            entity.Property(e => e.ZkpZknid).HasColumnName("ZKP_ZKNId");
            entity.Property(e => e.ZkpZnak).HasColumnName("ZKP_Znak");

            entity.HasOne(d => d.ZkpPar).WithMany(p => p.InverseZkpPar)
                .HasForeignKey(d => d.ZkpParId)
                .HasConstraintName("FK_ZKPParrent");

            entity.HasOne(d => d.ZkpZkn).WithMany(p => p.ZestKsiPozs)
                .HasForeignKey(d => d.ZkpZknid)
                .HasConstraintName("FK_ZKPZestawienie");
        });

        modelBuilder.Entity<ZestKsiWyniki>(entity =>
        {
            entity.HasKey(e => e.ZkwZkwid)
                .HasName("ZKW_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestKsiWyniki", "CDN");

            entity.HasIndex(e => e.ZkwZkkid, "ZKWKolumna").HasFillFactor(100);

            entity.HasIndex(e => new { e.ZkwZkpid, e.ZkwZkkid, e.ZkwOobId }, "ZKWPozycja")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.ZkwZknid, "ZKWZestawienie").HasFillFactor(100);

            entity.Property(e => e.ZkwZkwid).HasColumnName("ZKW_ZKWId");
            entity.Property(e => e.ZkwOobId).HasColumnName("ZKW_OObId");
            entity.Property(e => e.ZkwWartosc)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZKW_Wartosc");
            entity.Property(e => e.ZkwZkkid).HasColumnName("ZKW_ZKKId");
            entity.Property(e => e.ZkwZknid).HasColumnName("ZKW_ZKNId");
            entity.Property(e => e.ZkwZkpid).HasColumnName("ZKW_ZKPId");

            entity.HasOne(d => d.ZkwZkn).WithMany(p => p.ZestKsiWynikis)
                .HasForeignKey(d => d.ZkwZknid)
                .HasConstraintName("FK_ZKWZestawienie");
        });

        modelBuilder.Entity<ZestawieniaKontum>(entity =>
        {
            entity.HasKey(e => e.ZkaZkaId)
                .HasName("ZKa_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestawieniaKonta", "CDN");

            entity.HasIndex(e => new { e.ZkaOobId, e.ZkaZknid, e.ZkaZkpid, e.ZkaAccId, e.ZkaFunkcjaNorma }, "ZKaZestawienie").HasFillFactor(100);

            entity.Property(e => e.ZkaZkaId).HasColumnName("ZKa_ZKaId");
            entity.Property(e => e.ZkaAccId).HasColumnName("ZKa_AccId");
            entity.Property(e => e.ZkaFunkcja)
                .HasMaxLength(50)
                .HasColumnName("ZKa_Funkcja");
            entity.Property(e => e.ZkaFunkcjaNorma)
                .HasMaxLength(50)
                .HasColumnName("ZKa_FunkcjaNorma");
            entity.Property(e => e.ZkaOobId).HasColumnName("ZKa_OObId");
            entity.Property(e => e.ZkaZknid).HasColumnName("ZKa_ZKNId");
            entity.Property(e => e.ZkaZkpid).HasColumnName("ZKa_ZKPId");

            entity.HasOne(d => d.ZkaAcc).WithMany(p => p.ZestawieniaKonta)
                .HasForeignKey(d => d.ZkaAccId)
                .HasConstraintName("FK_AccZestawienie");

            entity.HasOne(d => d.ZkaZkp).WithMany(p => p.ZestawieniaKonta)
                .HasForeignKey(d => d.ZkaZkpid)
                .HasConstraintName("FK_ZKaZestawienie");
        });

        modelBuilder.Entity<ZestawyRegul>(entity =>
        {
            entity.HasKey(e => e.ZrgZrgId)
                .HasName("ZRG_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestawyRegul", "CDN", tb => tb.HasTrigger("ZestawyRegul_Delete_Trigger"));

            entity.HasIndex(e => e.ZrgAkronim, "ZRGZrgAkronim")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => e.ZrgNazwa, "ZRGZrgNazwa")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ZrgZrgId).HasColumnName("ZRG_ZrgId");
            entity.Property(e => e.ZrgAkronim)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ZRG_Akronim");
            entity.Property(e => e.ZrgNazwa)
                .HasMaxLength(50)
                .HasColumnName("ZRG_Nazwa");
        });

        modelBuilder.Entity<ZestawyRegulElem>(entity =>
        {
            entity.HasKey(e => e.ZreZreId)
                .HasName("ZRE_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestawyRegulElem", "CDN");

            entity.HasIndex(e => e.ZreZrgId, "FREForId").HasFillFactor(100);

            entity.HasIndex(e => e.ZreRrgId, "FRERrgId").HasFillFactor(100);

            entity.Property(e => e.ZreZreId).HasColumnName("ZRE_ZreId");
            entity.Property(e => e.ZreAkcja).HasColumnName("ZRE_Akcja");
            entity.Property(e => e.ZreIloscMinCel).HasColumnName("ZRE_IloscMinCel");
            entity.Property(e => e.ZreIloscMinZrodlo).HasColumnName("ZRE_IloscMinZrodlo");
            entity.Property(e => e.ZreLp).HasColumnName("ZRE_Lp");
            entity.Property(e => e.ZreMetodaModyf).HasColumnName("ZRE_MetodaModyf");
            entity.Property(e => e.ZreRrgId).HasColumnName("ZRE_RrgId");
            entity.Property(e => e.ZreZrgId).HasColumnName("ZRE_ZrgId");

            entity.HasOne(d => d.ZreRrg).WithMany(p => p.ZestawyRegulElems)
                .HasForeignKey(d => d.ZreRrgId)
                .HasConstraintName("FK_FRERrgId");

            entity.HasOne(d => d.ZreZrg).WithMany(p => p.ZestawyRegulElems)
                .HasForeignKey(d => d.ZreZrgId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FREForId");
        });

        modelBuilder.Entity<ZestawyTwr>(entity =>
        {
            entity.HasKey(e => e.ZtwZtwId)
                .HasName("ZTw_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestawyTwr", "CDN", tb =>
                {
                    tb.HasTrigger("ZestawyTwr_Delete_Trigger");
                    tb.HasTrigger("ZestawyTwr_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => new { e.ZtwTwrId, e.ZtwKod }, "ZTwTwrKod")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ZtwZtwId).HasColumnName("ZTw_ZTwId");
            entity.Property(e => e.ZtwCzyOgraniczacCzas).HasColumnName("ZTw_CzyOgraniczacCzas");
            entity.Property(e => e.ZtwCzyOgraniczacDaty).HasColumnName("ZTw_CzyOgraniczacDaty");
            entity.Property(e => e.ZtwDataDo)
                .HasColumnType("datetime")
                .HasColumnName("ZTw_DataDo");
            entity.Property(e => e.ZtwDataOd)
                .HasColumnType("datetime")
                .HasColumnName("ZTw_DataOd");
            entity.Property(e => e.ZtwEsklep).HasColumnName("ZTw_ESklep");
            entity.Property(e => e.ZtwGodzinaDo)
                .HasColumnType("datetime")
                .HasColumnName("ZTw_GodzinaDo");
            entity.Property(e => e.ZtwGodzinaOd)
                .HasColumnType("datetime")
                .HasColumnName("ZTw_GodzinaOd");
            entity.Property(e => e.ZtwKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ZTw_Kod");
            entity.Property(e => e.ZtwNazwa)
                .HasMaxLength(512)
                .HasColumnName("ZTw_Nazwa");
            entity.Property(e => e.ZtwOpeModId).HasColumnName("ZTw_OpeModID");
            entity.Property(e => e.ZtwOpeModKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZTw_OpeModKod");
            entity.Property(e => e.ZtwOpeModNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZTw_OpeModNazwisko");
            entity.Property(e => e.ZtwOpeZalId).HasColumnName("ZTw_OpeZalID");
            entity.Property(e => e.ZtwOpeZalKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZTw_OpeZalKod");
            entity.Property(e => e.ZtwOpeZalNazwisko)
                .HasMaxLength(50)
                .HasDefaultValue("")
                .HasColumnName("ZTw_OpeZalNazwisko");
            entity.Property(e => e.ZtwOpis)
                .HasMaxLength(254)
                .HasColumnName("ZTw_Opis");
            entity.Property(e => e.ZtwStaModId).HasColumnName("ZTw_StaModId");
            entity.Property(e => e.ZtwStaZalId).HasColumnName("ZTw_StaZalId");
            entity.Property(e => e.ZtwTsMod)
                .HasColumnType("datetime")
                .HasColumnName("ZTw_TS_Mod");
            entity.Property(e => e.ZtwTsZal)
                .HasColumnType("datetime")
                .HasColumnName("ZTw_TS_Zal");
            entity.Property(e => e.ZtwTwrId).HasColumnName("ZTw_TwrId");
            entity.Property(e => e.ZtwTypRabatu).HasColumnName("ZTw_TypRabatu");
            entity.Property(e => e.ZtwWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZTw_Waluta");
            entity.Property(e => e.ZtwWartosc)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("ZTw_Wartosc");

            entity.HasOne(d => d.ZtwTwr).WithMany(p => p.ZestawyTwrs)
                .HasForeignKey(d => d.ZtwTwrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZTwTwrKod");
        });

        modelBuilder.Entity<ZestawyTwrSkladniki>(entity =>
        {
            entity.HasKey(e => e.ZtsZtsid)
                .HasName("ZTS_Primary")
                .HasFillFactor(100);

            entity.ToTable("ZestawyTwrSkladniki", "CDN", tb =>
                {
                    tb.HasTrigger("ZestawyTwrSkladniki_Delete_Trigger");
                    tb.HasTrigger("ZestawyTwrSkladniki_InsertUpdate_Trigger");
                });

            entity.HasIndex(e => e.ZtsTwrId, "ZTSTowar").HasFillFactor(100);

            entity.HasIndex(e => new { e.ZtsZtwId, e.ZtsZtsid }, "ZTSZestaw")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.ZtsZtsid).HasColumnName("ZTS_ZTSId");
            entity.Property(e => e.ZtsIlosc)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZTS_Ilosc");
            entity.Property(e => e.ZtsJm)
                .HasMaxLength(20)
                .HasColumnName("ZTS_Jm");
            entity.Property(e => e.ZtsTwrId).HasColumnName("ZTS_TwrId");
            entity.Property(e => e.ZtsTypRabatu).HasColumnName("ZTS_TypRabatu");
            entity.Property(e => e.ZtsWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZTS_Waluta");
            entity.Property(e => e.ZtsWartosc)
                .HasColumnType("decimal(17, 4)")
                .HasColumnName("ZTS_Wartosc");
            entity.Property(e => e.ZtsZtwId).HasColumnName("ZTS_ZTwId");

            entity.HasOne(d => d.ZtsTwr).WithMany(p => p.ZestawyTwrSkladnikis)
                .HasForeignKey(d => d.ZtsTwrId)
                .HasConstraintName("FK_ZTSTowar");

            entity.HasOne(d => d.ZtsZtw).WithMany(p => p.ZestawyTwrSkladnikis)
                .HasForeignKey(d => d.ZtsZtwId)
                .HasConstraintName("FK_ZTSReceptura");
        });

        modelBuilder.Entity<ZstPromocje>(entity =>
        {
            entity.HasKey(e => e.ZprId).HasName("ZPR_Primary");

            entity.ToTable("ZstPromocje", "CDN");

            entity.Property(e => e.ZprId).HasColumnName("ZPR_ID");
            entity.Property(e => e.ZprNazwa)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ZPR_Nazwa");
            entity.Property(e => e.ZprPrmId).HasColumnName("ZPR_PrmID");
            entity.Property(e => e.ZprTwrFirma).HasColumnName("ZPR_TwrFirma");
            entity.Property(e => e.ZprTwrLp).HasColumnName("ZPR_TwrLp");
            entity.Property(e => e.ZprTwrNumer).HasColumnName("ZPR_TwrNumer");
            entity.Property(e => e.ZprTwrTyp).HasColumnName("ZPR_TwrTyp");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
