using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TSL.Data.Models.ERPXL_TSL_GROUP;

public partial class ERPXL_TSL_GROUPContext : DbContext
{
    public ERPXL_TSL_GROUPContext(DbContextOptions<ERPXL_TSL_GROUPContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AilimityKredytowe> AilimityKredytowes { get; set; }

    public virtual DbSet<AilimityKredytoweHistorium> AilimityKredytoweHistoria { get; set; }

    public virtual DbSet<AiprognozaPopytu> AiprognozaPopytus { get; set; }

    public virtual DbSet<AnElem> AnElems { get; set; }

    public virtual DbSet<AnFunkcje> AnFunkcjes { get; set; }

    public virtual DbSet<AnKolejka> AnKolejkas { get; set; }

    public virtual DbSet<AnNag> AnNags { get; set; }

    public virtual DbSet<AnRaporty> AnRaporties { get; set; }

    public virtual DbSet<AnWyniki> AnWynikis { get; set; }

    public virtual DbSet<AnZestawy> AnZestawies { get; set; }

    public virtual DbSet<AnalizaAbcxyz> AnalizaAbcxyzs { get; set; }

    public virtual DbSet<AnalizyBiparam> AnalizyBiparams { get; set; }

    public virtual DbSet<Ankiety> Ankieties { get; set; }

    public virtual DbSet<AnkietyOkresy> AnkietyOkresies { get; set; }

    public virtual DbSet<Apfino> Apfinos { get; set; }

    public virtual DbSet<ApisessionCache> ApisessionCaches { get; set; }

    public virtual DbSet<Aplikacje> Aplikacjes { get; set; }

    public virtual DbSet<AtrKompletyLinki> AtrKompletyLinkis { get; set; }

    public virtual DbSet<Atrybuty> Atrybuties { get; set; }

    public virtual DbSet<AtrybutyCennik> AtrybutyCenniks { get; set; }

    public virtual DbSet<AtrybutyDostawa> AtrybutyDostawas { get; set; }

    public virtual DbSet<AtrybutyFakty> AtrybutyFakties { get; set; }

    public virtual DbSet<AtrybutyHist> AtrybutyHists { get; set; }

    public virtual DbSet<AtrybutyKampanieEtapy> AtrybutyKampanieEtapies { get; set; }

    public virtual DbSet<AtrybutyKlasy> AtrybutyKlasies { get; set; }

    public virtual DbSet<AtrybutyKomplety> AtrybutyKompleties { get; set; }

    public virtual DbSet<AtrybutyKonto> AtrybutyKontos { get; set; }

    public virtual DbSet<AtrybutyKontrahent> AtrybutyKontrahents { get; set; }

    public virtual DbSet<AtrybutyKonwersacje> AtrybutyKonwersacjes { get; set; }

    public virtual DbSet<AtrybutyLokalizacja> AtrybutyLokalizacjas { get; set; }

    public virtual DbSet<AtrybutyMagazyn> AtrybutyMagazyns { get; set; }

    public virtual DbSet<AtrybutyMagazynyRuchy> AtrybutyMagazynyRuchies { get; set; }

    public virtual DbSet<AtrybutyMagazynyRuchyDokMag> AtrybutyMagazynyRuchyDokMags { get; set; }

    public virtual DbSet<AtrybutyMagazynyStany> AtrybutyMagazynyStanies { get; set; }

    public virtual DbSet<AtrybutyObiekty> AtrybutyObiekties { get; set; }

    public virtual DbSet<AtrybutyObiektyFakty> AtrybutyObiektyFakties { get; set; }

    public virtual DbSet<AtrybutyOferty> AtrybutyOferties { get; set; }

    public virtual DbSet<AtrybutyPlatnosciBiezace> AtrybutyPlatnosciBiezaces { get; set; }

    public virtual DbSet<AtrybutyPlatnosciStanyKa> AtrybutyPlatnosciStanyKas { get; set; }

    public virtual DbSet<AtrybutyProdukcjaDokumenty> AtrybutyProdukcjaDokumenties { get; set; }

    public virtual DbSet<AtrybutyProdukt> AtrybutyProdukts { get; set; }

    public virtual DbSet<AtrybutyProjekt> AtrybutyProjekts { get; set; }

    public virtual DbSet<AtrybutyPromocje> AtrybutyPromocjes { get; set; }

    public virtual DbSet<AtrybutyPrzychodyKoszty> AtrybutyPrzychodyKoszties { get; set; }

    public virtual DbSet<AtrybutyReklamacje> AtrybutyReklamacjes { get; set; }

    public virtual DbSet<AtrybutySamochod> AtrybutySamochods { get; set; }

    public virtual DbSet<AtrybutySprzedaz> AtrybutySprzedazs { get; set; }

    public virtual DbSet<AtrybutyStrukturaFirmy> AtrybutyStrukturaFirmies { get; set; }

    public virtual DbSet<AtrybutyTechnologium> AtrybutyTechnologia { get; set; }

    public virtual DbSet<AtrybutyTransport> AtrybutyTransports { get; set; }

    public virtual DbSet<AtrybutyUmowy> AtrybutyUmowies { get; set; }

    public virtual DbSet<AtrybutyUprawnienium> AtrybutyUprawnienia { get; set; }

    public virtual DbSet<AtrybutyWartosci> AtrybutyWartoscis { get; set; }

    public virtual DbSet<AtrybutyWizyty> AtrybutyWizyties { get; set; }

    public virtual DbSet<AtrybutyZakupy> AtrybutyZakupies { get; set; }

    public virtual DbSet<AtrybutyZamowieniaKlientum> AtrybutyZamowieniaKlienta { get; set; }

    public virtual DbSet<AtrybutyZamowieniaRhandl> AtrybutyZamowieniaRhandls { get; set; }

    public virtual DbSet<AtrybutyZamowieniaRmag> AtrybutyZamowieniaRmags { get; set; }

    public virtual DbSet<AtrybutyZamowieniaZakupu> AtrybutyZamowieniaZakupus { get; set; }

    public virtual DbSet<AtrybutyZapytaniaOfertowe> AtrybutyZapytaniaOfertowes { get; set; }

    public virtual DbSet<AtrybutyZestawienium> AtrybutyZestawienia { get; set; }

    public virtual DbSet<AtrybutyZrodla> AtrybutyZrodlas { get; set; }

    public virtual DbSet<AtrybutyZrodlaObiekty> AtrybutyZrodlaObiekties { get; set; }

    public virtual DbSet<AtstElem> AtstElems { get; set; }

    public virtual DbSet<AtstLog> AtstLogs { get; set; }

    public virtual DbSet<AtstLogKrotki> AtstLogKrotkis { get; set; }

    public virtual DbSet<AtstNag> AtstNags { get; set; }

    public virtual DbSet<AtstTesty> AtstTesties { get; set; }

    public virtual DbSet<Banki> Bankis { get; set; }

    public virtual DbSet<BankiDefinicje> BankiDefinicjes { get; set; }

    public virtual DbSet<BankiDefinicjeOperacje> BankiDefinicjeOperacjes { get; set; }

    public virtual DbSet<BankiFormKryt> BankiFormKryts { get; set; }

    public virtual DbSet<BilansOtwarciaElem> BilansOtwarciaElems { get; set; }

    public virtual DbSet<BilansOtwarciaNag> BilansOtwarciaNags { get; set; }

    public virtual DbSet<BilansOtwarciaSelem> BilansOtwarciaSelems { get; set; }

    public virtual DbSet<BilingTel> BilingTels { get; set; }

    public virtual DbSet<BipointRaportDef> BipointRaportDefs { get; set; }

    public virtual DbSet<BipointRaportElem> BipointRaportElems { get; set; }

    public virtual DbSet<BipointRaportOpeCentra> BipointRaportOpeCentras { get; set; }

    public virtual DbSet<Bokstatystyki> Bokstatystykis { get; set; }

    public virtual DbSet<Bony> Bonies { get; set; }

    public virtual DbSet<BstDokumenty> BstDokumenties { get; set; }

    public virtual DbSet<BstElem> BstElems { get; set; }

    public virtual DbSet<BstMagazyny> BstMagazynies { get; set; }

    public virtual DbSet<BstNag> BstNags { get; set; }

    public virtual DbSet<BstSelem> BstSelems { get; set; }

    public virtual DbSet<BstSkladniki> BstSkladnikis { get; set; }

    public virtual DbSet<BstSkladnikiDef> BstSkladnikiDefs { get; set; }

    public virtual DbSet<BudzetAtrybuty> BudzetAtrybuties { get; set; }

    public virtual DbSet<BudzetDefinicje> BudzetDefinicjes { get; set; }

    public virtual DbSet<BudzetNag> BudzetNags { get; set; }

    public virtual DbSet<BudzetOpisyAnalityczne> BudzetOpisyAnalitycznes { get; set; }

    public virtual DbSet<BudzetPrjElem> BudzetPrjElems { get; set; }

    public virtual DbSet<BudzetPrjElemDzialanium> BudzetPrjElemDzialania { get; set; }

    public virtual DbSet<BudzetPrjElemOkresy> BudzetPrjElemOkresies { get; set; }

    public virtual DbSet<BudzetPrjNag> BudzetPrjNags { get; set; }

    public virtual DbSet<BudzetPrjNagWaluty> BudzetPrjNagWaluties { get; set; }

    public virtual DbSet<BudzetPrzychodyKoszty> BudzetPrzychodyKoszties { get; set; }

    public virtual DbSet<BudzetSprzedaz> BudzetSprzedazs { get; set; }

    public virtual DbSet<BudzetZestawienium> BudzetZestawienia { get; set; }

    public virtual DbSet<Cdccertyfikaty> Cdccertyfikaties { get; set; }

    public virtual DbSet<Cdcloginy> Cdcloginies { get; set; }

    public virtual DbSet<Cechy> Cechies { get; set; }

    public virtual DbSet<CechyKlasy> CechyKlasies { get; set; }

    public virtual DbSet<ClbkKarty> ClbkKarties { get; set; }

    public virtual DbSet<ClbkProcedury> ClbkProceduries { get; set; }

    public virtual DbSet<CrmakcjeAutomatyczne> CrmakcjeAutomatycznes { get; set; }

    public virtual DbSet<CrmakcjeDokumenty> CrmakcjeDokumenties { get; set; }

    public virtual DbSet<CrmdefZadanium> CrmdefZadania { get; set; }

    public virtual DbSet<CrmdokumentyLinki> CrmdokumentyLinkis { get; set; }

    public virtual DbSet<CrmdokumentyLinkiView> CrmdokumentyLinkiViews { get; set; }

    public virtual DbSet<CrmdokumentyLinkiViewFullDatum> CrmdokumentyLinkiViewFullData { get; set; }

    public virtual DbSet<CrmdokumentyPozycje> CrmdokumentyPozycjes { get; set; }

    public virtual DbSet<CrmetapyDef> CrmetapyDefs { get; set; }

    public virtual DbSet<CrmetapyTwr> CrmetapyTwrs { get; set; }

    public virtual DbSet<CrmkalendarzSync> CrmkalendarzSyncs { get; set; }

    public virtual DbSet<CrmkampEtapy> CrmkampEtapies { get; set; }

    public virtual DbSet<CrmkampNag> CrmkampNags { get; set; }

    public virtual DbSet<CrmkampTwr> CrmkampTwrs { get; set; }

    public virtual DbSet<CrmkntEtapy> CrmkntEtapies { get; set; }

    public virtual DbSet<CrmkntEtapyTwr> CrmkntEtapyTwrs { get; set; }

    public virtual DbSet<CrmraportyDef> CrmraportyDefs { get; set; }

    public virtual DbSet<CrmraportyKolumny> CrmraportyKolumnies { get; set; }

    public virtual DbSet<CrmsrsKontrahenci> CrmsrsKontrahencis { get; set; }

    public virtual DbSet<CrmwizytyAnkiety> CrmwizytyAnkieties { get; set; }

    public virtual DbSet<CrmwizytyDokTwr> CrmwizytyDokTwrs { get; set; }

    public virtual DbSet<CrmwizytyElem> CrmwizytyElems { get; set; }

    public virtual DbSet<CrmwizytyElemDok> CrmwizytyElemDoks { get; set; }

    public virtual DbSet<CrmwizytyElemObiekty> CrmwizytyElemObiekties { get; set; }

    public virtual DbSet<CrmwizytyNag> CrmwizytyNags { get; set; }

    public virtual DbSet<CrmwizytyRptKolumny> CrmwizytyRptKolumnies { get; set; }

    public virtual DbSet<CrmwizytyRptTwr> CrmwizytyRptTwrs { get; set; }

    public virtual DbSet<CrmwzorceWizyt> CrmwzorceWizyts { get; set; }

    public virtual DbSet<CrmzadaniaObiekty> CrmzadaniaObiekties { get; set; }

    public virtual DbSet<CrmzwiazaneKamp> CrmzwiazaneKamps { get; set; }

    public virtual DbSet<DaneBinarne> DaneBinarnes { get; set; }

    public virtual DbSet<DaneBinarneGrupy> DaneBinarneGrupies { get; set; }

    public virtual DbSet<DaneBinarneWydruki> DaneBinarneWydrukis { get; set; }

    public virtual DbSet<DaneKlientaTryb1> DaneKlientaTryb1s { get; set; }

    public virtual DbSet<DaneKlientaTryb2> DaneKlientaTryb2s { get; set; }

    public virtual DbSet<DaneObiekty> DaneObiekties { get; set; }

    public virtual DbSet<DaneRynkowe> DaneRynkowes { get; set; }

    public virtual DbSet<DaneRynkoweCeny> DaneRynkoweCenies { get; set; }

    public virtual DbSet<DaneRynkoweNotowanium> DaneRynkoweNotowania { get; set; }

    public virtual DbSet<DefNieobecnosci> DefNieobecnoscis { get; set; }

    public virtual DbSet<DefPodElem> DefPodElems { get; set; }

    public virtual DbSet<DefPodElemKolumny> DefPodElemKolumnies { get; set; }

    public virtual DbSet<DefPodElemWyrazenium> DefPodElemWyrazenia { get; set; }

    public virtual DbSet<DefPodNag> DefPodNags { get; set; }

    public virtual DbSet<DefinicjeKolumn> DefinicjeKolumns { get; set; }

    public virtual DbSet<Dekrety> Dekreties { get; set; }

    public virtual DbSet<DekretyFiltryElem> DekretyFiltryElems { get; set; }

    public virtual DbSet<DekretyFiltryNag> DekretyFiltryNags { get; set; }

    public virtual DbSet<Delegacje> Delegacjes { get; set; }

    public virtual DbSet<DelegacjeElem> DelegacjeElems { get; set; }

    public virtual DbSet<DelegacjeStawki> DelegacjeStawkis { get; set; }

    public virtual DbSet<DelegacjeTransport> DelegacjeTransports { get; set; }

    public virtual DbSet<DoDimensionCondition> DoDimensionConditions { get; set; }

    public virtual DbSet<DoDimensionsBuffer> DoDimensionsBuffers { get; set; }

    public virtual DbSet<DokDefinicje> DokDefinicjes { get; set; }

    public virtual DbSet<DokMagazyny> DokMagazynies { get; set; }

    public virtual DbSet<DokRelacje> DokRelacjes { get; set; }

    public virtual DbSet<DokZwiazane> DokZwiazanes { get; set; }

    public virtual DbSet<Dostawy> Dostawies { get; set; }

    public virtual DbSet<DstOpisy> DstOpisies { get; set; }

    public virtual DbSet<DtsDeklaracjeElem> DtsDeklaracjeElems { get; set; }

    public virtual DbSet<DtsDeklaracjeNag> DtsDeklaracjeNags { get; set; }

    public virtual DbSet<DtsWsady> DtsWsadies { get; set; }

    public virtual DbSet<DtsWyplaty> DtsWyplaties { get; set; }

    public virtual DbSet<DtsWyplatyKwoty> DtsWyplatyKwoties { get; set; }

    public virtual DbSet<DtsWyplatyOpi> DtsWyplatyOpis { get; set; }

    public virtual DbSet<DtsZestawy> DtsZestawies { get; set; }

    public virtual DbSet<DtsZmienne> DtsZmiennes { get; set; }

    public virtual DbSet<Dziennik> Dzienniks { get; set; }

    public virtual DbSet<DziennikElem> DziennikElems { get; set; }

    public virtual DbSet<DziennikView> DziennikViews { get; set; }

    public virtual DbSet<EpDelegacjeView> EpDelegacjeViews { get; set; }

    public virtual DbSet<Fakty> Fakties { get; set; }

    public virtual DbSet<Filtry> Filtries { get; set; }

    public virtual DbSet<Firma> Firmas { get; set; }

    public virtual DbSet<FktVWm> FktVWms { get; set; }

    public virtual DbSet<FormBanElem> FormBanElems { get; set; }

    public virtual DbSet<FormBanKryt> FormBanKryts { get; set; }

    public virtual DbSet<FormBanNag> FormBanNags { get; set; }

    public virtual DbSet<FormatyList> FormatyLists { get; set; }

    public virtual DbSet<Frazy> Frazies { get; set; }

    public virtual DbSet<FrazyTlumaczenium> FrazyTlumaczenia { get; set; }

    public virtual DbSet<FrmLinki> FrmLinkis { get; set; }

    public virtual DbSet<FrmObiekty> FrmObiekties { get; set; }

    public virtual DbSet<FrmStruktura> FrmStrukturas { get; set; }

    public virtual DbSet<FrmStrukturaTel> FrmStrukturaTels { get; set; }

    public virtual DbSet<FrsAplikacje> FrsAplikacjes { get; set; }

    public virtual DbSet<FrsPromocje> FrsPromocjes { get; set; }

    public virtual DbSet<FrsZamienniki> FrsZamiennikis { get; set; }

    public virtual DbSet<FsfLevel> FsfLevels { get; set; }

    public virtual DbSet<FsfkosztLevel> FsfkosztLevels { get; set; }

    public virtual DbSet<GratisyPromocje> GratisyPromocjes { get; set; }

    public virtual DbSet<GrupyKrajow> GrupyKrajows { get; set; }

    public virtual DbSet<GrupyTemp> GrupyTemps { get; set; }

    public virtual DbSet<GtLevel> GtLevels { get; set; }

    public virtual DbSet<HaspLog> HaspLogs { get; set; }

    public virtual DbSet<HeatMapLog> HeatMapLogs { get; set; }

    public virtual DbSet<HistoriaUruchomien> HistoriaUruchomiens { get; set; }

    public virtual DbSet<HistoriaZmian> HistoriaZmians { get; set; }

    public virtual DbSet<ImpElem> ImpElems { get; set; }

    public virtual DbSet<ImpNag> ImpNags { get; set; }

    public virtual DbSet<ImportWyciagowBankowych> ImportWyciagowBankowyches { get; set; }

    public virtual DbSet<ImtArkusze> ImtArkuszes { get; set; }

    public virtual DbSet<ImtArkuszeElem> ImtArkuszeElems { get; set; }

    public virtual DbSet<ImtNag> ImtNags { get; set; }

    public virtual DbSet<ImtOdczyty> ImtOdczyties { get; set; }

    public virtual DbSet<ImtOdczytyElem> ImtOdczytyElems { get; set; }

    public virtual DbSet<InboxView> InboxViews { get; set; }

    public virtual DbSet<InwArk> InwArks { get; set; }

    public virtual DbSet<InwArkTwr> InwArkTwrs { get; set; }

    public virtual DbSet<InwMag> InwMags { get; set; }

    public virtual DbSet<InwMagTwr> InwMagTwrs { get; set; }

    public virtual DbSet<InwNag> InwNags { get; set; }

    public virtual DbSet<InwNagSesje> InwNagSesjes { get; set; }

    public virtual DbSet<InwOdc> InwOdcs { get; set; }

    public virtual DbSet<InwOdcTwr> InwOdcTwrs { get; set; }

    public virtual DbSet<InwTwr> InwTwrs { get; set; }

    public virtual DbSet<IstElem> IstElems { get; set; }

    public virtual DbSet<IstNag> IstNags { get; set; }

    public virtual DbSet<IstSelem> IstSelems { get; set; }

    public virtual DbSet<IstotneObiekty> IstotneObiekties { get; set; }

    public virtual DbSet<IstotneOpcje> IstotneOpcjes { get; set; }

    public virtual DbSet<KadrSlowniki> KadrSlownikis { get; set; }

    public virtual DbSet<KadrStaSlowniki> KadrStaSlownikis { get; set; }

    public virtual DbSet<KadrStanowiska> KadrStanowiskas { get; set; }

    public virtual DbSet<KadrZaszeregowanium> KadrZaszeregowania { get; set; }

    public virtual DbSet<KatGrupyTwr> KatGrupyTwrs { get; set; }

    public virtual DbSet<KategorieCelne> KategorieCelnes { get; set; }

    public virtual DbSet<KazTrpView> KazTrpViews { get; set; }

    public virtual DbSet<Kbnelem> Kbnelems { get; set; }

    public virtual DbSet<Kbnnag> Kbnnags { get; set; }

    public virtual DbSet<Kbnodpowiedzialni> Kbnodpowiedzialnis { get; set; }

    public virtual DbSet<KgtParametr> KgtParametrs { get; set; }

    public virtual DbSet<KgtParametryKategorii> KgtParametryKategoriis { get; set; }

    public virtual DbSet<KgtSlownik> KgtSlowniks { get; set; }

    public virtual DbSet<KgtSlownikiParametruKategorii> KgtSlownikiParametruKategoriis { get; set; }

    public virtual DbSet<KgtWartoscParametrDlaTowaru> KgtWartoscParametrDlaTowarus { get; set; }

    public virtual DbSet<KksGrupyElem> KksGrupyElems { get; set; }

    public virtual DbSet<KksGrupyNag> KksGrupyNags { get; set; }

    public virtual DbSet<KluczeElem> KluczeElems { get; set; }

    public virtual DbSet<KluczeNag> KluczeNags { get; set; }

    public virtual DbSet<KluczeParametry> KluczeParametries { get; set; }

    public virtual DbSet<KmStawki> KmStawkis { get; set; }

    public virtual DbSet<KntAdresy> KntAdresies { get; set; }

    public virtual DbSet<KntAplikacje> KntAplikacjes { get; set; }

    public virtual DbSet<KntAplikacjeObiekty> KntAplikacjeObiekties { get; set; }

    public virtual DbSet<KntAtrybuty> KntAtrybuties { get; set; }

    public virtual DbSet<KntGrupy> KntGrupies { get; set; }

    public virtual DbSet<KntGrupyDom> KntGrupyDoms { get; set; }

    public virtual DbSet<KntKarty> KntKarties { get; set; }

    public virtual DbSet<KntKody> KntKodies { get; set; }

    public virtual DbSet<KntKoncesje> KntKoncesjes { get; set; }

    public virtual DbSet<KntKontakty> KntKontakties { get; set; }

    public virtual DbSet<KntKontum> KntKonta { get; set; }

    public virtual DbSet<KntLevel> KntLevels { get; set; }

    public virtual DbSet<KntLimity> KntLimitys { get; set; }

    public virtual DbSet<KntLimityK> KntLimityKs { get; set; }

    public virtual DbSet<KntLinki> KntLinkis { get; set; }

    public virtual DbSet<KntMagazyny> KntMagazynies { get; set; }

    public virtual DbSet<KntOpiekun> KntOpiekuns { get; set; }

    public virtual DbSet<KntOpisy> KntOpisies { get; set; }

    public virtual DbSet<KntOsoby> KntOsobies { get; set; }

    public virtual DbSet<KntOsobyKomunikatory> KntOsobyKomunikatories { get; set; }

    public virtual DbSet<KntOsobyView> KntOsobyViews { get; set; }

    public virtual DbSet<KntPromocje> KntPromocjes { get; set; }

    public virtual DbSet<KntRejestr> KntRejestrs { get; set; }

    public virtual DbSet<KntRejony> KntRejonies { get; set; }

    public virtual DbSet<KntTowary> KntTowaries { get; set; }

    public virtual DbSet<KntUpusty> KntUpusties { get; set; }

    public virtual DbSet<KntVat> KntVats { get; set; }

    public virtual DbSet<KntWzUpusty> KntWzUpusties { get; set; }

    public virtual DbSet<KntWzorce> KntWzorces { get; set; }

    public virtual DbSet<KntZasoby> KntZasobies { get; set; }

    public virtual DbSet<KodyCn> KodyCns { get; set; }

    public virtual DbSet<KodyCnjednostkiSent> KodyCnjednostkiSents { get; set; }

    public virtual DbSet<KolDokumenty> KolDokumenties { get; set; }

    public virtual DbSet<KompElem> KompElems { get; set; }

    public virtual DbSet<KompElemPlatnosci> KompElemPlatnoscis { get; set; }

    public virtual DbSet<KompNag> KompNags { get; set; }

    public virtual DbSet<Komunikaty> Komunikaties { get; set; }

    public virtual DbSet<KonfProdElem> KonfProdElems { get; set; }

    public virtual DbSet<KonfProdGrupy> KonfProdGrupies { get; set; }

    public virtual DbSet<KonfProdGrupyElem> KonfProdGrupyElems { get; set; }

    public virtual DbSet<KonfProdGrupyStruktura> KonfProdGrupyStrukturas { get; set; }

    public virtual DbSet<KonfProdLinki> KonfProdLinkis { get; set; }

    public virtual DbSet<KonfProdNag> KonfProdNags { get; set; }

    public virtual DbSet<Konfig> Konfigs { get; set; }

    public virtual DbSet<KontaLinki> KontaLinkis { get; set; }

    public virtual DbSet<KontaListaWybrane> KontaListaWybranes { get; set; }

    public virtual DbSet<KontaMapowaniePom> KontaMapowaniePoms { get; set; }

    public virtual DbSet<KontaNastLinki> KontaNastLinkis { get; set; }

    public virtual DbSet<KontaNazwy> KontaNazwies { get; set; }

    public virtual DbSet<KontaSegmentyNumeru> KontaSegmentyNumerus { get; set; }

    public virtual DbSet<Kontum> Konta { get; set; }

    public virtual DbSet<Konwersacje> Konwersacjes { get; set; }

    public virtual DbSet<Konwersja30> Konwersja30s { get; set; }

    public virtual DbSet<Kostki> Kostkis { get; set; }

    public virtual DbSet<KosztyDodDok> KosztyDodDoks { get; set; }

    public virtual DbSet<Kpdzrodla> Kpdzrodlas { get; set; }

    public virtual DbSet<KrajeCelne> KrajeCelnes { get; set; }

    public virtual DbSet<KreatorKodowElem> KreatorKodowElems { get; set; }

    public virtual DbSet<KreatorKodowNag> KreatorKodowNags { get; set; }

    public virtual DbSet<KregiKosztowElem> KregiKosztowElems { get; set; }

    public virtual DbSet<KregiKosztowNag> KregiKosztowNags { get; set; }

    public virtual DbSet<KseFdokumenty> KseFdokumenties { get; set; }

    public virtual DbSet<KsoElem> KsoElems { get; set; }

    public virtual DbSet<KsoNag> KsoNags { get; set; }

    public virtual DbSet<KsoParametry> KsoParametries { get; set; }

    public virtual DbSet<KsoRaty> KsoRaties { get; set; }

    public virtual DbSet<ListyPlac> ListyPlacs { get; set; }

    public virtual DbSet<Loginy> Loginies { get; set; }

    public virtual DbSet<LokalizacjeDok> LokalizacjeDoks { get; set; }

    public virtual DbSet<MaNopisy> MaNopisies { get; set; }

    public virtual DbSet<MagAdresy> MagAdresies { get; set; }

    public virtual DbSet<MagElem> MagElems { get; set; }

    public virtual DbSet<MagLelem> MagLelems { get; set; }

    public virtual DbSet<MagLinki> MagLinkis { get; set; }

    public virtual DbSet<MagNag> MagNags { get; set; }

    public virtual DbSet<MagObszary> MagObszaries { get; set; }

    public virtual DbSet<MagOsobyOdpowiedzialne> MagOsobyOdpowiedzialnes { get; set; }

    public virtual DbSet<MagParAdr> MagParAdrs { get; set; }

    public virtual DbSet<MagParJednostki> MagParJednostkis { get; set; }

    public virtual DbSet<MagPelem> MagPelems { get; set; }

    public virtual DbSet<MagPelemArc> MagPelemArcs { get; set; }

    public virtual DbSet<MagPromocje> MagPromocjes { get; set; }

    public virtual DbSet<MagPromocjeView> MagPromocjeViews { get; set; }

    public virtual DbSet<MagSelem> MagSelems { get; set; }

    public virtual DbSet<MagSelemArc> MagSelemArcs { get; set; }

    public virtual DbSet<MagStruktura> MagStrukturas { get; set; }

    public virtual DbSet<MagTwrObszary> MagTwrObszaries { get; set; }

    public virtual DbSet<MagWybor> MagWybors { get; set; }

    public virtual DbSet<MagazynId> MagazynIds { get; set; }

    public virtual DbSet<Magazyny> Magazynies { get; set; }

    public virtual DbSet<MemDokElem> MemDokElems { get; set; }

    public virtual DbSet<MemDokNag> MemDokNags { get; set; }

    public virtual DbSet<MemElem> MemElems { get; set; }

    public virtual DbSet<MemNag> MemNags { get; set; }

    public virtual DbSet<MemSymbole> MemSymboles { get; set; }

    public virtual DbSet<Mesprofile> Mesprofiles { get; set; }

    public virtual DbSet<MesprofileOperatorzy> MesprofileOperatorzies { get; set; }

    public virtual DbSet<MskntAdresy> MskntAdresies { get; set; }

    public virtual DbSet<MskntKarty> MskntKarties { get; set; }

    public virtual DbSet<MskntOpisy> MskntOpisies { get; set; }

    public virtual DbSet<MskntOsoby> MskntOsobies { get; set; }

    public virtual DbSet<NazRelacje> NazRelacjes { get; set; }

    public virtual DbSet<Nazwy> Nazwies { get; set; }

    public virtual DbSet<NtsElem> NtsElems { get; set; }

    public virtual DbSet<NtsKnt> NtsKnts { get; set; }

    public virtual DbSet<NtsNag> NtsNags { get; set; }

    public virtual DbSet<NumeryKier> NumeryKiers { get; set; }

    public virtual DbSet<NumeryRachunkow> NumeryRachunkows { get; set; }

    public virtual DbSet<ObiegNrDok> ObiegNrDoks { get; set; }

    public virtual DbSet<ObiegOpe> ObiegOpes { get; set; }

    public virtual DbSet<Obiekty> Obiekties { get; set; }

    public virtual DbSet<ObiektyCykl> ObiektyCykls { get; set; }

    public virtual DbSet<ObiektyDomyslne> ObiektyDomyslnes { get; set; }

    public virtual DbSet<ObiektyLinki> ObiektyLinkis { get; set; }

    public virtual DbSet<ObiektyObce> ObiektyObces { get; set; }

    public virtual DbSet<ObiektyZablok> ObiektyZabloks { get; set; }

    public virtual DbSet<Odleglosci> Odlegloscis { get; set; }

    public virtual DbSet<OdpowiedziZadaniaWielokrotne> OdpowiedziZadaniaWielokrotnes { get; set; }

    public virtual DbSet<OdpowiedziZadanium> OdpowiedziZadania { get; set; }

    public virtual DbSet<Odsetki> Odsetkis { get; set; }

    public virtual DbSet<OfertyDok> OfertyDoks { get; set; }

    public virtual DbSet<OfertyFrag> OfertyFrags { get; set; }

    public virtual DbSet<Okresy> Okresies { get; set; }

    public virtual DbSet<OkresyMiesiace> OkresyMiesiaces { get; set; }

    public virtual DbSet<OkresyZamkniete> OkresyZamknietes { get; set; }

    public virtual DbSet<OlapGrupy> OlapGrupies { get; set; }

    public virtual DbSet<OlapWidoki> OlapWidokis { get; set; }

    public virtual DbSet<OlapWidokiLog> OlapWidokiLogs { get; set; }

    public virtual DbSet<Olaplinki> Olaplinkis { get; set; }

    public virtual DbSet<Olapxmldatum> Olapxmldata { get; set; }

    public virtual DbSet<OpeCentra> OpeCentras { get; set; }

    public virtual DbSet<OpeDefKol> OpeDefKols { get; set; }

    public virtual DbSet<OpeKarty> OpeKarties { get; set; }

    public virtual DbSet<OpeOpisy> OpeOpisies { get; set; }

    public virtual DbSet<OpePromocje> OpePromocjes { get; set; }

    public virtual DbSet<OpePulpity> OpePulpities { get; set; }

    public virtual DbSet<OpeSkillGrupa> OpeSkillGrupas { get; set; }

    public virtual DbSet<OpeZakazy> OpeZakazies { get; set; }

    public virtual DbSet<Operacje> Operacjes { get; set; }

    public virtual DbSet<OperatorTel> OperatorTels { get; set; }

    public virtual DbSet<OpisWarunki> OpisWarunkis { get; set; }

    public virtual DbSet<OpisWymElem> OpisWymElems { get; set; }

    public virtual DbSet<OpisWymNag> OpisWymNags { get; set; }

    public virtual DbSet<OpisWymSelem> OpisWymSelems { get; set; }

    public virtual DbSet<OpisWzorce> OpisWzorces { get; set; }

    public virtual DbSet<OsoAdresy> OsoAdresies { get; set; }

    public virtual DbSet<OsoCzasPracy> OsoCzasPracies { get; set; }

    public virtual DbSet<OsoCzasRazem> OsoCzasRazems { get; set; }

    public virtual DbSet<OsoDodatki> OsoDodatkis { get; set; }

    public virtual DbSet<OsoHistZatrudnienium> OsoHistZatrudnienia { get; set; }

    public virtual DbSet<OsoKarty> OsoKarties { get; set; }

    public virtual DbSet<OsoKompZakre> OsoKompZakres { get; set; }

    public virtual DbSet<OsoKompetencje> OsoKompetencjes { get; set; }

    public virtual DbSet<OsoNieobecnosci> OsoNieobecnoscis { get; set; }

    public virtual DbSet<OsoPlatElem> OsoPlatElems { get; set; }

    public virtual DbSet<OsoPlatNag> OsoPlatNags { get; set; }

    public virtual DbSet<OsoPrzekPodstawy> OsoPrzekPodstawies { get; set; }

    public virtual DbSet<OsoRodzajStaz> OsoRodzajStazs { get; set; }

    public virtual DbSet<OsoRodzina> OsoRodzinas { get; set; }

    public virtual DbSet<OsoStaleRoczne> OsoStaleRocznes { get; set; }

    public virtual DbSet<OsoUbezpieczenium> OsoUbezpieczenia { get; set; }

    public virtual DbSet<OsoUmowy> OsoUmowies { get; set; }

    public virtual DbSet<OsoWskazniki> OsoWskaznikis { get; set; }

    public virtual DbSet<OsoWyksztalcenie> OsoWyksztalcenies { get; set; }

    public virtual DbSet<Paczki> Paczkis { get; set; }

    public virtual DbSet<ParamRozKonf> ParamRozKonfs { get; set; }

    public virtual DbSet<Pdoadministratorzy> Pdoadministratorzies { get; set; }

    public virtual DbSet<Pdoczynnosci> Pdoczynnoscis { get; set; }

    public virtual DbSet<PdoczynnosciKraje> PdoczynnosciKrajes { get; set; }

    public virtual DbSet<Pdonaruszenium> Pdonaruszenia { get; set; }

    public virtual DbSet<Pdoupowaznienium> Pdoupowaznienia { get; set; }

    public virtual DbSet<PicoCenniki> PicoCennikis { get; set; }

    public virtual DbSet<PicoDaneA> PicoDaneAs { get; set; }

    public virtual DbSet<PicoKntRodzaje> PicoKntRodzajes { get; set; }

    public virtual DbSet<PicoKonfig> PicoKonfigs { get; set; }

    public virtual DbSet<PicoKontrahenci> PicoKontrahencis { get; set; }

    public virtual DbSet<PicoLog> PicoLogs { get; set; }

    public virtual DbSet<PicoLogElem> PicoLogElems { get; set; }

    public virtual DbSet<PicoLogNag> PicoLogNags { get; set; }

    public virtual DbSet<PicoRelacje> PicoRelacjes { get; set; }

    public virtual DbSet<PicoSposobyDst> PicoSposobyDsts { get; set; }

    public virtual DbSet<PicoStanowiska> PicoStanowiskas { get; set; }

    public virtual DbSet<PicoStanowiskaFormyPl> PicoStanowiskaFormyPls { get; set; }

    public virtual DbSet<PicoStanowiskaOperatorzy> PicoStanowiskaOperatorzies { get; set; }

    public virtual DbSet<PicoStanowiskaWydruki> PicoStanowiskaWydrukis { get; set; }

    public virtual DbSet<PicoSzybkaSprzedaz> PicoSzybkaSprzedazs { get; set; }

    public virtual DbSet<PicoTimestamp> PicoTimestamps { get; set; }

    public virtual DbSet<PicoUlubioneTwr> PicoUlubioneTwrs { get; set; }

    public virtual DbSet<PicoUsuniete> PicoUsunietes { get; set; }

    public virtual DbSet<PicoWaluty> PicoWaluties { get; set; }

    public virtual DbSet<Pikelem> Pikelems { get; set; }

    public virtual DbSet<Pikkwoty> Pikkwoties { get; set; }

    public virtual DbSet<Piknag> Piknags { get; set; }

    public virtual DbSet<PlaceElementyGrupy> PlaceElementyGrupies { get; set; }

    public virtual DbSet<PlaceElementyProgi> PlaceElementyProgis { get; set; }

    public virtual DbSet<PlaceElementySkladniki> PlaceElementySkladnikis { get; set; }

    public virtual DbSet<PlaceElementyWyplat> PlaceElementyWyplats { get; set; }

    public virtual DbSet<PlaceSkladkiWzorce> PlaceSkladkiWzorces { get; set; }

    public virtual DbSet<PlaceWskazniki> PlaceWskaznikis { get; set; }

    public virtual DbSet<PlanElem> PlanElems { get; set; }

    public virtual DbSet<PlanNag> PlanNags { get; set; }

    public virtual DbSet<PlanOkre> PlanOkres { get; set; }

    public virtual DbSet<PlanSprzedazy> PlanSprzedazies { get; set; }

    public virtual DbSet<PlanSprzedazyKnt> PlanSprzedazyKnts { get; set; }

    public virtual DbSet<PlanSprzedazyRej> PlanSprzedazyRejs { get; set; }

    public virtual DbSet<PlanSprzedazyTwr> PlanSprzedazyTwrs { get; set; }

    public virtual DbSet<PlanyElementyProdukty> PlanyElementyProdukties { get; set; }

    public virtual DbSet<PlanyElementySkladnikow> PlanyElementySkladnikows { get; set; }

    public virtual DbSet<PlanyObciazeniaGniazd> PlanyObciazeniaGniazds { get; set; }

    public virtual DbSet<PlanyObciazeniaPozycje> PlanyObciazeniaPozycjes { get; set; }

    public virtual DbSet<PlanyPozycjeSkladniki> PlanyPozycjeSkladnikis { get; set; }

    public virtual DbSet<PlanySkladnikiObciazenium> PlanySkladnikiObciazenia { get; set; }

    public virtual DbSet<PlanyTypyOkresow> PlanyTypyOkresows { get; set; }

    public virtual DbSet<PlatnosciNaDzien> PlatnosciNaDziens { get; set; }

    public virtual DbSet<PltPromocje> PltPromocjes { get; set; }

    public virtual DbSet<PobLevel> PobLevels { get; set; }

    public virtual DbSet<PodElem> PodElems { get; set; }

    public virtual DbSet<PodElemDok> PodElemDoks { get; set; }

    public virtual DbSet<PodElemDokVat> PodElemDokVats { get; set; }

    public virtual DbSet<PodElemListy> PodElemListies { get; set; }

    public virtual DbSet<PodElemNagListy> PodElemNagListies { get; set; }

    public virtual DbSet<PodElemVuegrupy> PodElemVuegrupies { get; set; }

    public virtual DbSet<PodElemVuepozycje> PodElemVuepozycjes { get; set; }

    public virtual DbSet<PodNag> PodNags { get; set; }

    public virtual DbSet<PodSelem> PodSelems { get; set; }

    public virtual DbSet<PodZestawy> PodZestawies { get; set; }

    public virtual DbSet<PodmiotyView> PodmiotyViews { get; set; }

    public virtual DbSet<PodzielnikElem> PodzielnikElems { get; set; }

    public virtual DbSet<PodzielnikMelem> PodzielnikMelems { get; set; }

    public virtual DbSet<PodzielnikNag> PodzielnikNags { get; set; }

    public virtual DbSet<PodzielnikPrac> PodzielnikPracs { get; set; }

    public virtual DbSet<PodzielnikSelem> PodzielnikSelems { get; set; }

    public virtual DbSet<PodzielnikZelem> PodzielnikZelems { get; set; }

    public virtual DbSet<PoleceniaGlowne> PoleceniaGlownes { get; set; }

    public virtual DbSet<PoleceniaOdpowiedzi> PoleceniaOdpowiedzis { get; set; }

    public virtual DbSet<PoleceniaTozsame> PoleceniaTozsames { get; set; }

    public virtual DbSet<PomKsifunkcjeSql> PomKsifunkcjeSqls { get; set; }

    public virtual DbSet<PosrozbieznosciMmp> PosrozbieznosciMmps { get; set; }

    public virtual DbSet<Prawa> Prawas { get; set; }

    public virtual DbSet<PrcAdresyEmail> PrcAdresyEmails { get; set; }

    public virtual DbSet<PrcHist> PrcHists { get; set; }

    public virtual DbSet<PrcKarty> PrcKarties { get; set; }

    public virtual DbSet<PrcRole> PrcRoles { get; set; }

    public virtual DbSet<PrcWarunki> PrcWarunkis { get; set; }

    public virtual DbSet<Predekrety> Predekreties { get; set; }

    public virtual DbSet<Preliminarz> Preliminarzs { get; set; }

    public virtual DbSet<PreliminarzView> PreliminarzViews { get; set; }

    public virtual DbSet<PreliminarzViewDokumenty> PreliminarzViewDokumenties { get; set; }

    public virtual DbSet<PrjLevel> PrjLevels { get; set; }

    public virtual DbSet<PrjStruktura> PrjStrukturas { get; set; }

    public virtual DbSet<PrlnOpisy> PrlnOpisies { get; set; }

    public virtual DbSet<PrmHistorium> PrmHistoria { get; set; }

    public virtual DbSet<PrmKarty> PrmKarties { get; set; }

    public virtual DbSet<PrmTransakcje> PrmTransakcjes { get; set; }

    public virtual DbSet<ProdCzynnosci> ProdCzynnoscis { get; set; }

    public virtual DbSet<ProdCzynnosciMaterialy> ProdCzynnosciMaterialies { get; set; }

    public virtual DbSet<ProdCzynnosciObiekty> ProdCzynnosciObiekties { get; set; }

    public virtual DbSet<ProdCzynnosciRealizujaceTechnologie> ProdCzynnosciRealizujaceTechnologies { get; set; }

    public virtual DbSet<ProdCzynnosciTerminy> ProdCzynnosciTerminies { get; set; }

    public virtual DbSet<ProdDefinicjeKolejek> ProdDefinicjeKolejeks { get; set; }

    public virtual DbSet<ProdDoPrzeliczenium> ProdDoPrzeliczenia { get; set; }

    public virtual DbSet<ProdFunkcje> ProdFunkcjes { get; set; }

    public virtual DbSet<ProdIoTakcje> ProdIoTakcjes { get; set; }

    public virtual DbSet<ProdIoTakcjeZdarzenium> ProdIoTakcjeZdarzenia { get; set; }

    public virtual DbSet<ProdIoTczujniki> ProdIoTczujnikis { get; set; }

    public virtual DbSet<ProdIoTczujnikiZdarzenium> ProdIoTczujnikiZdarzenia { get; set; }

    public virtual DbSet<ProdIoTkomunikaty> ProdIoTkomunikaties { get; set; }

    public virtual DbSet<ProdIoTkomunikatyZdarzenium> ProdIoTkomunikatyZdarzenia { get; set; }

    public virtual DbSet<ProdIoTodbiorcyPowiadomien> ProdIoTodbiorcyPowiadomiens { get; set; }

    public virtual DbSet<ProdIoTostOdebraneZdarzenieOpe> ProdIoTostOdebraneZdarzenieOpes { get; set; }

    public virtual DbSet<ProdIoTregulyDefinicji> ProdIoTregulyDefinicjis { get; set; }

    public virtual DbSet<ProdIoTzadaniaZdarzenium> ProdIoTzadaniaZdarzenia { get; set; }

    public virtual DbSet<ProdIoTzdarzeniaDefinicje> ProdIoTzdarzeniaDefinicjes { get; set; }

    public virtual DbSet<ProdIoTzdarzenium> ProdIoTzdarzenia { get; set; }

    public virtual DbSet<ProdKalendarze> ProdKalendarzes { get; set; }

    public virtual DbSet<ProdKalkulacjaKosztu> ProdKalkulacjaKosztus { get; set; }

    public virtual DbSet<ProdKalkulacjaKosztuElem> ProdKalkulacjaKosztuElems { get; set; }

    public virtual DbSet<ProdKalkulacjaKosztuView> ProdKalkulacjaKosztuViews { get; set; }

    public virtual DbSet<ProdKoszty> ProdKoszties { get; set; }

    public virtual DbSet<ProdKosztyElem> ProdKosztyElems { get; set; }

    public virtual DbSet<ProdKosztyElemO> ProdKosztyElemOs { get; set; }

    public virtual DbSet<ProdKosztyParametry> ProdKosztyParametries { get; set; }

    public virtual DbSet<ProdLinki> ProdLinkis { get; set; }

    public virtual DbSet<ProdMaterialy> ProdMaterialies { get; set; }

    public virtual DbSet<ProdNadzleceniaLinki> ProdNadzleceniaLinkis { get; set; }

    public virtual DbSet<ProdNadzlecenium> ProdNadzlecenia { get; set; }

    public virtual DbSet<ProdNormatywRealizacja> ProdNormatywRealizacjas { get; set; }

    public virtual DbSet<ProdNormatywRealizacjaCzynnosci> ProdNormatywRealizacjaCzynnoscis { get; set; }

    public virtual DbSet<ProdNormatywRealizacjaElem> ProdNormatywRealizacjaElems { get; set; }

    public virtual DbSet<ProdNormatywRealizacjaOperElem> ProdNormatywRealizacjaOperElems { get; set; }

    public virtual DbSet<ProdNormatywZlecenium> ProdNormatywZlecenia { get; set; }

    public virtual DbSet<ProdObiekty> ProdObiekties { get; set; }

    public virtual DbSet<ProdObiektyCzujniki> ProdObiektyCzujnikis { get; set; }

    public virtual DbSet<ProdObiektyDoPlanu> ProdObiektyDoPlanus { get; set; }

    public virtual DbSet<ProdObiektyFunkcje> ProdObiektyFunkcjes { get; set; }

    public virtual DbSet<ProdObiektyUzycie> ProdObiektyUzycies { get; set; }

    public virtual DbSet<ProdObiektyUzycieAktualneView> ProdObiektyUzycieAktualneViews { get; set; }

    public virtual DbSet<ProdOkresy> ProdOkresies { get; set; }

    public virtual DbSet<ProdOperacjeMagazyny> ProdOperacjeMagazynies { get; set; }

    public virtual DbSet<ProdOperacjePauzy> ProdOperacjePauzies { get; set; }

    public virtual DbSet<ProdOperacjePominiete> ProdOperacjePominietes { get; set; }

    public virtual DbSet<ProdOperacjePowiazane> ProdOperacjePowiazanes { get; set; }

    public virtual DbSet<ProdParamKjnormyObiektow> ProdParamKjnormyObiektows { get; set; }

    public virtual DbSet<ProdParametryKj> ProdParametryKjs { get; set; }

    public virtual DbSet<ProdParametryKjnormy> ProdParametryKjnormies { get; set; }

    public virtual DbSet<ProdPkjhistoriaZmian> ProdPkjhistoriaZmians { get; set; }

    public virtual DbSet<ProdPkjnag> ProdPkjnags { get; set; }

    public virtual DbSet<ProdPkjsubelem> ProdPkjsubelems { get; set; }

    public virtual DbSet<ProdPkjza> ProdPkjzas { get; set; }

    public virtual DbSet<ProdPlany> ProdPlanies { get; set; }

    public virtual DbSet<ProdPlanyDokumenty> ProdPlanyDokumenties { get; set; }

    public virtual DbSet<ProdPlanyMag> ProdPlanyMags { get; set; }

    public virtual DbSet<ProdPlanyMaterialy> ProdPlanyMaterialies { get; set; }

    public virtual DbSet<ProdPlanyMaterialyDoZamowienium> ProdPlanyMaterialyDoZamowienia { get; set; }

    public virtual DbSet<ProdPlanyProdukty> ProdPlanyProdukties { get; set; }

    public virtual DbSet<ProdPlanyTwG> ProdPlanyTwGs { get; set; }

    public virtual DbSet<ProdPlanyZrdDok> ProdPlanyZrdDoks { get; set; }

    public virtual DbSet<ProdProcesy> ProdProcesies { get; set; }

    public virtual DbSet<ProdProduktyWczynnosciView> ProdProduktyWczynnosciViews { get; set; }

    public virtual DbSet<ProdRekomendacje> ProdRekomendacjes { get; set; }

    public virtual DbSet<ProdRekomendacjeDokumenty> ProdRekomendacjeDokumenties { get; set; }

    public virtual DbSet<ProdRekomendacjeProdukty> ProdRekomendacjeProdukties { get; set; }

    public virtual DbSet<ProdRekomendacjeWzorce> ProdRekomendacjeWzorces { get; set; }

    public virtual DbSet<ProdRekomendacjeWzorceWarunki> ProdRekomendacjeWzorceWarunkis { get; set; }

    public virtual DbSet<ProdRekomendacjeWzorceWarunkiTwr> ProdRekomendacjeWzorceWarunkiTwrs { get; set; }

    public virtual DbSet<ProdSegmenty> ProdSegmenties { get; set; }

    public virtual DbSet<ProdSegmentyWlasciwosci> ProdSegmentyWlasciwoscis { get; set; }

    public virtual DbSet<ProdTechnologiaCzynnosci> ProdTechnologiaCzynnoscis { get; set; }

    public virtual DbSet<ProdTechnologiaFunkcje> ProdTechnologiaFunkcjes { get; set; }

    public virtual DbSet<ProdTechnologiaKoszty> ProdTechnologiaKoszties { get; set; }

    public virtual DbSet<ProdTechnologiaTerminy> ProdTechnologiaTerminies { get; set; }

    public virtual DbSet<ProdTechnologiaZasoby> ProdTechnologiaZasobies { get; set; }

    public virtual DbSet<ProdTechnologiaZasobyTwX> ProdTechnologiaZasobyTwXes { get; set; }

    public virtual DbSet<ProdTechnologieDomyslne> ProdTechnologieDomyslnes { get; set; }

    public virtual DbSet<ProdTechnologieZasobyGniazd> ProdTechnologieZasobyGniazds { get; set; }

    public virtual DbSet<ProdTechnologium> ProdTechnologia { get; set; }

    public virtual DbSet<ProdWzorceKj> ProdWzorceKjs { get; set; }

    public virtual DbSet<ProdWzorceKjtowary> ProdWzorceKjtowaries { get; set; }

    public virtual DbSet<ProdWzorceKosztow> ProdWzorceKosztows { get; set; }

    public virtual DbSet<ProdWzorceKosztowWarunki> ProdWzorceKosztowWarunkis { get; set; }

    public virtual DbSet<ProdWzorceNumerowPartii> ProdWzorceNumerowPartiis { get; set; }

    public virtual DbSet<ProdZabiegiOperacji> ProdZabiegiOperacjis { get; set; }

    public virtual DbSet<ProdZasoby> ProdZasobies { get; set; }

    public virtual DbSet<ProdZasobyzTechnologiami> ProdZasobyzTechnologiamis { get; set; }

    public virtual DbSet<ProdZlecElem> ProdZlecElems { get; set; }

    public virtual DbSet<ProdZleceniaZabiegi> ProdZleceniaZabiegis { get; set; }

    public virtual DbSet<ProdZlecenium> ProdZlecenia { get; set; }

    public virtual DbSet<ProdZmianyGanttum> ProdZmianyGantta { get; set; }

    public virtual DbSet<ProdZuzycieMaterialu> ProdZuzycieMaterialus { get; set; }

    public virtual DbSet<ProdZuzycieNarzedzium> ProdZuzycieNarzedzia { get; set; }

    public virtual DbSet<ProdZwiazane> ProdZwiazanes { get; set; }

    public virtual DbSet<ProdZwiazanePolprodukty> ProdZwiazanePolprodukties { get; set; }

    public virtual DbSet<ProgiIloscAp> ProgiIloscAps { get; set; }

    public virtual DbSet<ProgiPromocje> ProgiPromocjes { get; set; }

    public virtual DbSet<ProgiTwrPromocje> ProgiTwrPromocjes { get; set; }

    public virtual DbSet<ProlongElem> ProlongElems { get; set; }

    public virtual DbSet<ProlongNag> ProlongNags { get; set; }

    public virtual DbSet<Przelewy> Przelewies { get; set; }

    public virtual DbSet<PrzelewyAutoryzacje> PrzelewyAutoryzacjes { get; set; }

    public virtual DbSet<PrzelewyElem> PrzelewyElems { get; set; }

    public virtual DbSet<PrzelewyNag> PrzelewyNags { get; set; }

    public virtual DbSet<PrzelewyNagPodpisy> PrzelewyNagPodpisies { get; set; }

    public virtual DbSet<PrzeszacElem> PrzeszacElems { get; set; }

    public virtual DbSet<PrzeszacNag> PrzeszacNags { get; set; }

    public virtual DbSet<PunktyKntView> PunktyKntViews { get; set; }

    public virtual DbSet<PunktyKonfig> PunktyKonfigs { get; set; }

    public virtual DbSet<PytaniaAnkiety> PytaniaAnkieties { get; set; }

    public virtual DbSet<PytaniaZadanium> PytaniaZadania { get; set; }

    public virtual DbSet<Pytanium> Pytania { get; set; }

    public virtual DbSet<RachunkiBankowe> RachunkiBankowes { get; set; }

    public virtual DbSet<RachunkiBankoweVat> RachunkiBankoweVats { get; set; }

    public virtual DbSet<Raporty> Raporties { get; set; }

    public virtual DbSet<Rcpkorekty> Rcpkorekties { get; set; }

    public virtual DbSet<Rcpnorma> Rcpnormas { get; set; }

    public virtual DbSet<Rcpopisy> Rcpopisies { get; set; }

    public virtual DbSet<Rcpzapisy> Rcpzapisies { get; set; }

    public virtual DbSet<RcpzatwElem> RcpzatwElems { get; set; }

    public virtual DbSet<RcpzatwNag> RcpzatwNags { get; set; }

    public virtual DbSet<RecElem> RecElems { get; set; }

    public virtual DbSet<RecNag> RecNags { get; set; }

    public virtual DbSet<RefPromocje> RefPromocjes { get; set; }

    public virtual DbSet<RegulyNormTel> RegulyNormTels { get; set; }

    public virtual DbSet<RejLevel> RejLevels { get; set; }

    public virtual DbSet<RejOp> RejOps { get; set; }

    public virtual DbSet<Rejestry> Rejestries { get; set; }

    public virtual DbSet<RejestryDomyslne> RejestryDomyslnes { get; set; }

    public virtual DbSet<RejestryHistorium> RejestryHistoria { get; set; }

    public virtual DbSet<Rejony> Rejonies { get; set; }

    public virtual DbSet<ReklElem> ReklElems { get; set; }

    public virtual DbSet<ReklNag> ReklNags { get; set; }

    public virtual DbSet<ReklOperacjeDef> ReklOperacjeDefs { get; set; }

    public virtual DbSet<ReklRealizacja> ReklRealizacjas { get; set; }

    public virtual DbSet<ReklSelem> ReklSelems { get; set; }

    public virtual DbSet<RelTraImp> RelTraImps { get; set; }

    public virtual DbSet<RetroKarty> RetroKarties { get; set; }

    public virtual DbSet<RetroKntOkresy> RetroKntOkresies { get; set; }

    public virtual DbSet<RetroKontrahenci> RetroKontrahencis { get; set; }

    public virtual DbSet<RetroMagazyny> RetroMagazynies { get; set; }

    public virtual DbSet<RetroOdbiorcy> RetroOdbiorcies { get; set; }

    public virtual DbSet<RetroPlt> RetroPlts { get; set; }

    public virtual DbSet<RetroProgi> RetroProgis { get; set; }

    public virtual DbSet<RetroSpD> RetroSpDs { get; set; }

    public virtual DbSet<RetroStrukturaRabatu> RetroStrukturaRabatus { get; set; }

    public virtual DbSet<RetroTowary> RetroTowaries { get; set; }

    public virtual DbSet<RezMagazyny> RezMagazynies { get; set; }

    public virtual DbSet<Rezerwacje> Rezerwacjes { get; set; }

    public virtual DbSet<RezerwacjeWprzyszlosc> RezerwacjeWprzyszloscs { get; set; }

    public virtual DbSet<RodzajUpomnieniaParametryProcesow> RodzajUpomnieniaParametryProcesows { get; set; }

    public virtual DbSet<RodzajeBonow> RodzajeBonows { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Rozliczenium> Rozliczenia { get; set; }

    public virtual DbSet<RozmowaTel> RozmowaTels { get; set; }

    public virtual DbSet<RozniceKursowe> RozniceKursowes { get; set; }

    public virtual DbSet<Rozrachunki> Rozrachunkis { get; set; }

    public virtual DbSet<RptDefinicje2> RptDefinicje2s { get; set; }

    public virtual DbSet<RptDomyslne2> RptDomyslne2s { get; set; }

    public virtual DbSet<RptDomyslneU> RptDomyslneUs { get; set; }

    public virtual DbSet<RptFormaty2> RptFormaty2s { get; set; }

    public virtual DbSet<RptFormatyU> RptFormatyUs { get; set; }

    public virtual DbSet<RptKolejka2> RptKolejka2s { get; set; }

    public virtual DbSet<RptMapa2> RptMapa2s { get; set; }

    public virtual DbSet<RptParametry2> RptParametry2s { get; set; }

    public virtual DbSet<RptWydruki2> RptWydruki2s { get; set; }

    public virtual DbSet<RptWydrukiU> RptWydrukiUs { get; set; }

    public virtual DbSet<RptZaznaczenia2> RptZaznaczenia2s { get; set; }

    public virtual DbSet<SFktAtrybuty> SFktAtrybuties { get; set; }

    public virtual DbSet<SPomAtrybuty> SPomAtrybuties { get; set; }

    public virtual DbSet<SPomFktCennik> SPomFktCenniks { get; set; }

    public virtual DbSet<SPomOpisyAnalityczne> SPomOpisyAnalitycznes { get; set; }

    public virtual DbSet<SaEkwoty> SaEkwoties { get; set; }

    public virtual DbSet<SadElem> SadElems { get; set; }

    public virtual DbSet<SadKwoty> SadKwoties { get; set; }

    public virtual DbSet<SadKwotyDef> SadKwotyDefs { get; set; }

    public virtual DbSet<SadNag> SadNags { get; set; }

    public virtual DbSet<SadSelem> SadSelems { get; set; }

    public virtual DbSet<SamPrzejazdy> SamPrzejazdies { get; set; }

    public virtual DbSet<Samochody> Samochodies { get; set; }

    public virtual DbSet<SchematDziennik> SchematDzienniks { get; set; }

    public virtual DbSet<SchematRodzajDaty> SchematRodzajDaties { get; set; }

    public virtual DbSet<Schematy> Schematies { get; set; }

    public virtual DbSet<Sczasoby> Sczasobies { get; set; }

    public virtual DbSet<SeSkwoty> SeSkwoties { get; set; }

    public virtual DbSet<SeSkwotyDod> SeSkwotyDods { get; set; }

    public virtual DbSet<SeSopakowanium> SeSopakowania { get; set; }

    public virtual DbSet<SekDokStatusy> SekDokStatusies { get; set; }

    public virtual DbSet<SekDokTypy> SekDokTypies { get; set; }

    public virtual DbSet<SekDokumenty> SekDokumenties { get; set; }

    public virtual DbSet<SekMailInfo> SekMailInfos { get; set; }

    public virtual DbSet<SekOpiekunowieDok> SekOpiekunowieDoks { get; set; }

    public virtual DbSet<SekStatusyDok> SekStatusyDoks { get; set; }

    public virtual DbSet<SekTypySerie> SekTypySeries { get; set; }

    public virtual DbSet<Sent> Sents { get; set; }

    public virtual DbSet<SentElem> SentElems { get; set; }

    public virtual DbSet<SeqTable> SeqTables { get; set; }

    public virtual DbSet<Serie> Series { get; set; }

    public virtual DbSet<SesDokumenty> SesDokumenties { get; set; }

    public virtual DbSet<Sesje> Sesjes { get; set; }

    public virtual DbSet<Sfnag> Sfnags { get; set; }

    public virtual DbSet<Sfpodpisy> Sfpodpisies { get; set; }

    public virtual DbSet<SfslownikiElem> SfslownikiElems { get; set; }

    public virtual DbSet<SfslownikiNag> SfslownikiNags { get; set; }

    public virtual DbSet<SfzalWlasne> SfzalWlasnes { get; set; }

    public virtual DbSet<Sfzalaczniki> Sfzalacznikis { get; set; }

    public virtual DbSet<ShippingLogElem> ShippingLogElems { get; set; }

    public virtual DbSet<ShippingLogNag> ShippingLogNags { get; set; }

    public virtual DbSet<Sisdefinicje> Sisdefinicjes { get; set; }

    public virtual DbSet<SisdefinicjeKontum> SisdefinicjeKonta { get; set; }

    public virtual DbSet<Siswartosci> Siswartoscis { get; set; }

    public virtual DbSet<Skladniki> Skladnikis { get; set; }

    public virtual DbSet<SkladnikiCelne> SkladnikiCelnes { get; set; }

    public virtual DbSet<SkladyCelne> SkladyCelnes { get; set; }

    public virtual DbSet<Slowniki> Slownikis { get; set; }

    public virtual DbSet<SlownikiAplikacje> SlownikiAplikacjes { get; set; }

    public virtual DbSet<SlownikiStruktura> SlownikiStrukturas { get; set; }

    public virtual DbSet<SlwDefPowiazaniaKont> SlwDefPowiazaniaKonts { get; set; }

    public virtual DbSet<SlwFunkcjeKontum> SlwFunkcjeKonta { get; set; }

    public virtual DbSet<SlwKosztyParametry> SlwKosztyParametries { get; set; }

    public virtual DbSet<SlwLinki> SlwLinkis { get; set; }

    public virtual DbSet<SlwRodzajePrzesylek> SlwRodzajePrzesyleks { get; set; }

    public virtual DbSet<SlwTraDokumenty> SlwTraDokumenties { get; set; }

    public virtual DbSet<SlwTransakcje> SlwTransakcjes { get; set; }

    public virtual DbSet<SlwTypyInwentaryzacjiPo> SlwTypyInwentaryzacjiPos { get; set; }

    public virtual DbSet<SpDpromocje> SpDpromocjes { get; set; }

    public virtual DbSet<SpisTelefonow> SpisTelefonows { get; set; }

    public virtual DbSet<SqlMapa> SqlMapas { get; set; }

    public virtual DbSet<SqlRaporty> SqlRaporties { get; set; }

    public virtual DbSet<SrTrDatyBi> SrTrDatyBis { get; set; }

    public virtual DbSet<SrcPowObiektyAtr> SrcPowObiektyAtrs { get; set; }

    public virtual DbSet<SrcPowObiektyAtrMiary> SrcPowObiektyAtrMiaries { get; set; }

    public virtual DbSet<SrcWymKategorieFinansowe> SrcWymKategorieFinansowes { get; set; }

    public virtual DbSet<SrcWymWymiaryAnalityczne> SrcWymWymiaryAnalitycznes { get; set; }

    public virtual DbSet<SrsBranze> SrsBranzes { get; set; }

    public virtual DbSet<SrsCennikCzynnosci> SrsCennikCzynnoscis { get; set; }

    public virtual DbSet<SrsCzynnosci> SrsCzynnoscis { get; set; }

    public virtual DbSet<SrsElem> SrsElems { get; set; }

    public virtual DbSet<SrsNag> SrsNags { get; set; }

    public virtual DbSet<SrsObiekty> SrsObiekties { get; set; }

    public virtual DbSet<SrsWypDefinicje> SrsWypDefinicjes { get; set; }

    public virtual DbSet<SrsWypRodzaje> SrsWypRodzajes { get; set; }

    public virtual DbSet<SrsWyposazenium> SrsWyposazenia { get; set; }

    public virtual DbSet<SrtDokZakupu> SrtDokZakupus { get; set; }

    public virtual DbSet<SrtGrupy> SrtGrupies { get; set; }

    public virtual DbSet<SrtGrupyDom> SrtGrupyDoms { get; set; }

    public virtual DbSet<SrtHistElem> SrtHistElems { get; set; }

    public virtual DbSet<SrtHistNag> SrtHistNags { get; set; }

    public virtual DbSet<SrtKarty> SrtKarties { get; set; }

    public virtual DbSet<SrtKst> SrtKsts { get; set; }

    public virtual DbSet<SrtLevel> SrtLevels { get; set; }

    public virtual DbSet<SrtLinki> SrtLinkis { get; set; }

    public virtual DbSet<SrtOpisy> SrtOpisies { get; set; }

    public virtual DbSet<SrtSezon> SrtSezons { get; set; }

    public virtual DbSet<SrtWzorce> SrtWzorces { get; set; }

    public virtual DbSet<SrtZestElem> SrtZestElems { get; set; }

    public virtual DbSet<SrwCzesciZamienne> SrwCzesciZamiennes { get; set; }

    public virtual DbSet<SrwObiektyReceptury> SrwObiektyRecepturies { get; set; }

    public virtual DbSet<SrwPlanDokumenty> SrwPlanDokumenties { get; set; }

    public virtual DbSet<SrwPlanElem> SrwPlanElems { get; set; }

    public virtual DbSet<SrwPlanPrzegladu> SrwPlanPrzegladus { get; set; }

    public virtual DbSet<SrwReceptury> SrwRecepturies { get; set; }

    public virtual DbSet<SrwRecepturyCzynnosci> SrwRecepturyCzynnoscis { get; set; }

    public virtual DbSet<SrwRecepturySkladniki> SrwRecepturySkladnikis { get; set; }

    public virtual DbSet<SrwSruHistoriaDok> SrwSruHistoriaDoks { get; set; }

    public virtual DbSet<SrwSruHistoriaDokLinki> SrwSruHistoriaDokLinkis { get; set; }

    public virtual DbSet<SrwSruHistoriaZmian> SrwSruHistoriaZmians { get; set; }

    public virtual DbSet<SrwSruHistoriaZmianLinki> SrwSruHistoriaZmianLinkis { get; set; }

    public virtual DbSet<SrwTypyPrzegladu> SrwTypyPrzegladus { get; set; }

    public virtual DbSet<SrwUrzParDef> SrwUrzParDefs { get; set; }

    public virtual DbSet<SrwUrzParam> SrwUrzParams { get; set; }

    public virtual DbSet<SrwUrzRodzPar> SrwUrzRodzPars { get; set; }

    public virtual DbSet<SrwUrzRodzTypyP> SrwUrzRodzTypyPs { get; set; }

    public virtual DbSet<SrwUrzRodzaje> SrwUrzRodzajes { get; set; }

    public virtual DbSet<SrwUrzTypyP> SrwUrzTypyPs { get; set; }

    public virtual DbSet<SrwUrzWlasc> SrwUrzWlascs { get; set; }

    public virtual DbSet<SrwUrzadzenium> SrwUrzadzenia { get; set; }

    public virtual DbSet<SrwZlcCzynnosci> SrwZlcCzynnoscis { get; set; }

    public virtual DbSet<SrwZlcCzynnosciTerminy> SrwZlcCzynnosciTerminies { get; set; }

    public virtual DbSet<SrwZlcKoszty> SrwZlcKoszties { get; set; }

    public virtual DbSet<SrwZlcNag> SrwZlcNags { get; set; }

    public virtual DbSet<SrwZlcObiekty> SrwZlcObiekties { get; set; }

    public virtual DbSet<SrwZlcSkladniki> SrwZlcSkladnikis { get; set; }

    public virtual DbSet<SrwZlcUrz> SrwZlcUrzs { get; set; }

    public virtual DbSet<StaDostepy> StaDostepies { get; set; }

    public virtual DbSet<StaKarty> StaKarties { get; set; }

    public virtual DbSet<StaKonfig> StaKonfigs { get; set; }

    public virtual DbSet<StaOpisy> StaOpisies { get; set; }

    public virtual DbSet<StaZakazy> StaZakazies { get; set; }

    public virtual DbSet<StacjeRobocze> StacjeRoboczes { get; set; }

    public virtual DbSet<Stany> Stanies { get; set; }

    public virtual DbSet<Statystyki> Statystykis { get; set; }

    public virtual DbSet<Subelementy> Subelementies { get; set; }

    public virtual DbSet<Swdrukarki> Swdrukarkis { get; set; }

    public virtual DbSet<Swkolejka> Swkolejkas { get; set; }

    public virtual DbSet<Swpolecenium> Swpolecenia { get; set; }

    public virtual DbSet<Swwku> Swwkus { get; set; }

    public virtual DbSet<Swzmienne> Swzmiennes { get; set; }

    public virtual DbSet<SymboleKont> SymboleKonts { get; set; }

    public virtual DbSet<SynchroT> SynchroTs { get; set; }

    public virtual DbSet<SystemCdn> SystemCdns { get; set; }

    public virtual DbSet<SystemInfo> SystemInfos { get; set; }

    public virtual DbSet<T2bsoftHistoryczneRodzajKontrahentum> T2bsoftHistoryczneRodzajKontrahenta { get; set; }

    public virtual DbSet<Techniczna> Technicznas { get; set; }

    public virtual DbSet<Techniczna2> Techniczna2s { get; set; }

    public virtual DbSet<TempRoz2> TempRoz2s { get; set; }

    public virtual DbSet<TempRozrachunki> TempRozrachunkis { get; set; }

    public virtual DbSet<TempSprTr> TempSprTrs { get; set; }

    public virtual DbSet<TempSumyRozrachunki> TempSumyRozrachunkis { get; set; }

    public virtual DbSet<TempZakRoz> TempZakRozs { get; set; }

    public virtual DbSet<TestyDefiniowane> TestyDefiniowanes { get; set; }

    public virtual DbSet<TgdLevel> TgdLevels { get; set; }

    public virtual DbSet<Tkelem> Tkelems { get; set; }

    public virtual DbSet<Tknag> Tknags { get; set; }

    public virtual DbSet<Tkselem> Tkselems { get; set; }

    public virtual DbSet<Tlumaczenium> Tlumaczenia { get; set; }

    public virtual DbSet<TowarId> TowarIds { get; set; }

    public virtual DbSet<TrNopisy> TrNopisies { get; set; }

    public virtual DbSet<TraElem> TraElems { get; set; }

    public virtual DbSet<TraJpk> TraJpks { get; set; }

    public virtual DbSet<TraKelem> TraKelems { get; set; }

    public virtual DbSet<TraNag> TraNags { get; set; }

    public virtual DbSet<TraPlat> TraPlats { get; set; }

    public virtual DbSet<TraRozliczZal> TraRozliczZals { get; set; }

    public virtual DbSet<TraSelem> TraSelems { get; set; }

    public virtual DbSet<TraSvat> TraSvats { get; set; }

    public virtual DbSet<TraVat> TraVats { get; set; }

    public virtual DbSet<TrasyElem> TrasyElems { get; set; }

    public virtual DbSet<TrasyNag> TrasyNags { get; set; }

    public virtual DbSet<TreOpisy> TreOpisies { get; set; }

    public virtual DbSet<TreTrsCount> TreTrsCounts { get; set; }

    public virtual DbSet<TrnTreBrutto> TrnTreBruttos { get; set; }

    public virtual DbSet<TrpDokView> TrpDokViews { get; set; }

    public virtual DbSet<TrpTrnKazView> TrpTrnKazViews { get; set; }

    public virtual DbSet<TrpTrnView> TrpTrnViews { get; set; }

    public virtual DbSet<TwgView> TwgViews { get; set; }

    public virtual DbSet<TwrAnaliza> TwrAnalizas { get; set; }

    public virtual DbSet<TwrAnalizaElem> TwrAnalizaElems { get; set; }

    public virtual DbSet<TwrAnalizaMag> TwrAnalizaMags { get; set; }

    public virtual DbSet<TwrAnalizaNag> TwrAnalizaNags { get; set; }

    public virtual DbSet<TwrAnalizaOkre> TwrAnalizaOkres { get; set; }

    public virtual DbSet<TwrAplikacje> TwrAplikacjes { get; set; }

    public virtual DbSet<TwrAplikacjeOpisy> TwrAplikacjeOpisies { get; set; }

    public virtual DbSet<TwrAtrybuty> TwrAtrybuties { get; set; }

    public virtual DbSet<TwrCeny> TwrCenies { get; set; }

    public virtual DbSet<TwrCenyHist> TwrCenyHists { get; set; }

    public virtual DbSet<TwrCenyHistOdDo> TwrCenyHistOdDos { get; set; }

    public virtual DbSet<TwrCenyNag> TwrCenyNags { get; set; }

    public virtual DbSet<TwrDost> TwrDosts { get; set; }

    public virtual DbSet<TwrDostCeny> TwrDostCenies { get; set; }

    public virtual DbSet<TwrDostHist> TwrDostHists { get; set; }

    public virtual DbSet<TwrGrupy> TwrGrupies { get; set; }

    public virtual DbSet<TwrGrupyDom> TwrGrupyDoms { get; set; }

    public virtual DbSet<TwrJm> TwrJms { get; set; }

    public virtual DbSet<TwrKarty> TwrKarties { get; set; }

    public virtual DbSet<TwrKody> TwrKodies { get; set; }

    public virtual DbSet<TwrKodyKnt> TwrKodyKnts { get; set; }

    public virtual DbSet<TwrLinki> TwrLinkis { get; set; }

    public virtual DbSet<TwrOpisy> TwrOpisies { get; set; }

    public virtual DbSet<TwrParMag> TwrParMags { get; set; }

    public virtual DbSet<TwrParMagHist> TwrParMagHists { get; set; }

    public virtual DbSet<TwrPartie> TwrParties { get; set; }

    public virtual DbSet<TwrPodm> TwrPodms { get; set; }

    public virtual DbSet<TwrPromocje> TwrPromocjes { get; set; }

    public virtual DbSet<TwrSchematyKaucjiElem> TwrSchematyKaucjiElems { get; set; }

    public virtual DbSet<TwrSchematyKaucjiNag> TwrSchematyKaucjiNags { get; set; }

    public virtual DbSet<TwrStany> TwrStanies { get; set; }

    public virtual DbSet<TwrStanyBufor> TwrStanyBufors { get; set; }

    public virtual DbSet<TwrStawkiVat> TwrStawkiVats { get; set; }

    public virtual DbSet<TwrUpusty> TwrUpusties { get; set; }

    public virtual DbSet<TwrWzCeny> TwrWzCenies { get; set; }

    public virtual DbSet<TwrWzDst> TwrWzDsts { get; set; }

    public virtual DbSet<TwrWzJm> TwrWzJms { get; set; }

    public virtual DbSet<TwrWzOpisy> TwrWzOpisies { get; set; }

    public virtual DbSet<TwrWzUpusty> TwrWzUpusties { get; set; }

    public virtual DbSet<TwrWzorce> TwrWzorces { get; set; }

    public virtual DbSet<TwrZasoby> TwrZasobies { get; set; }

    public virtual DbSet<TwrZasobyMag> TwrZasobyMags { get; set; }

    public virtual DbSet<TypSchemat> TypSchemats { get; set; }

    public virtual DbSet<UczestnicyKonwersacji> UczestnicyKonwersacjis { get; set; }

    public virtual DbSet<UmlNag> UmlNags { get; set; }

    public virtual DbSet<UmlPrzedmioty> UmlPrzedmioties { get; set; }

    public virtual DbSet<UmlRaty> UmlRaties { get; set; }

    public virtual DbSet<UmwElem> UmwElems { get; set; }

    public virtual DbSet<UmwNag> UmwNags { get; set; }

    public virtual DbSet<UmwPlat> UmwPlats { get; set; }

    public virtual DbSet<UmwPlatPozycje> UmwPlatPozycjes { get; set; }

    public virtual DbSet<UmwPozycje> UmwPozycjes { get; set; }

    public virtual DbSet<UmwTypy> UmwTypies { get; set; }

    public virtual DbSet<UmwVat> UmwVats { get; set; }

    public virtual DbSet<UpoElem> UpoElems { get; set; }

    public virtual DbSet<UpoNag> UpoNags { get; set; }

    public virtual DbSet<UpoOpisy> UpoOpisies { get; set; }

    public virtual DbSet<UrzadzeniaZewnetrzne> UrzadzeniaZewnetrznes { get; set; }

    public virtual DbSet<UrzadzeniaZewnetrzneObiekty> UrzadzeniaZewnetrzneObiekties { get; set; }

    public virtual DbSet<Urzedy> Urzedies { get; set; }

    public virtual DbSet<UrzedyOpisy> UrzedyOpisies { get; set; }

    public virtual DbSet<UstawieniaList> UstawieniaLists { get; set; }

    public virtual DbSet<WalElem> WalElems { get; set; }

    public virtual DbSet<WalNag> WalNags { get; set; }

    public virtual DbSet<WfDefAkcje> WfDefAkcjes { get; set; }

    public virtual DbSet<WfDefOpiekun> WfDefOpiekuns { get; set; }

    public virtual DbSet<WfDefProcesy> WfDefProcesies { get; set; }

    public virtual DbSet<WfDefProcesyGrupy> WfDefProcesyGrupies { get; set; }

    public virtual DbSet<WfDefStatKonc> WfDefStatKoncs { get; set; }

    public virtual DbSet<WfDefStatusy> WfDefStatusies { get; set; }

    public virtual DbSet<WfDefZadanium> WfDefZadania { get; set; }

    public virtual DbSet<WfHarmonogramAutomatu> WfHarmonogramAutomatus { get; set; }

    public virtual DbSet<WfProcesy> WfProcesies { get; set; }

    public virtual DbSet<WfZadanium> WfZadania { get; set; }

    public virtual DbSet<WkrDefinicje2> WkrDefinicje2s { get; set; }

    public virtual DbSet<WkrDefinicjeU> WkrDefinicjeUs { get; set; }

    public virtual DbSet<WkrDomyslne2> WkrDomyslne2s { get; set; }

    public virtual DbSet<WkrDomyslneU> WkrDomyslneUs { get; set; }

    public virtual DbSet<WkrMapa02> WkrMapa02s { get; set; }

    public virtual DbSet<WkrMapa0U> WkrMapa0Us { get; set; }

    public virtual DbSet<WkrMapa2> WkrMapa2s { get; set; }

    public virtual DbSet<WkrUlubione2> WkrUlubione2s { get; set; }

    public virtual DbSet<WkrWstawki2> WkrWstawki2s { get; set; }

    public virtual DbSet<WkrZaznaczenia2> WkrZaznaczenia2s { get; set; }

    public virtual DbSet<WmsVWymWmsmagazyn> WmsVWymWmsmagazyns { get; set; }

    public virtual DbSet<WmsVWymWmsstrukturaMagazynu> WmsVWymWmsstrukturaMagazynus { get; set; }

    public virtual DbSet<WmstresciDok> WmstresciDoks { get; set; }

    public virtual DbSet<Wnioski> Wnioskis { get; set; }

    public virtual DbSet<Wolne> Wolnes { get; set; }

    public virtual DbSet<WstegaUstawienium> WstegaUstawienia { get; set; }

    public virtual DbSet<WszystkoPlopisyOfert> WszystkoPlopisyOferts { get; set; }

    public virtual DbSet<WydatkiPracownikow> WydatkiPracownikows { get; set; }

    public virtual DbSet<WydatkiPrcPlatnosci> WydatkiPrcPlatnoscis { get; set; }

    public virtual DbSet<WymPowiazanium> WymPowiazania { get; set; }

    public virtual DbSet<Wymiary> Wymiaries { get; set; }

    public virtual DbSet<WypElem> WypElems { get; set; }

    public virtual DbSet<WypSelem> WypSelems { get; set; }

    public virtual DbSet<Wyplaty> Wyplaties { get; set; }

    public virtual DbSet<WysKoszty> WysKoszties { get; set; }

    public virtual DbSet<WysPaczki> WysPaczkis { get; set; }

    public virtual DbSet<WysRelacje> WysRelacjes { get; set; }

    public virtual DbSet<Wysylki> Wysylkis { get; set; }

    public virtual DbSet<XlDelegacje> XlDelegacjes { get; set; }

    public virtual DbSet<XlDelegacjeSyncMap> XlDelegacjeSyncMaps { get; set; }

    public virtual DbSet<XlDelegacjeSyncMapDiff> XlDelegacjeSyncMapDiffs { get; set; }

    public virtual DbSet<XlSamochody> XlSamochodies { get; set; }

    public virtual DbSet<XlSamochodySyncMap> XlSamochodySyncMaps { get; set; }

    public virtual DbSet<XlSamochodySyncMapDiff> XlSamochodySyncMapDiffs { get; set; }

    public virtual DbSet<XlSlowniki> XlSlownikis { get; set; }

    public virtual DbSet<XlSlownikiStruktura> XlSlownikiStrukturas { get; set; }

    public virtual DbSet<XlSlownikiStrukturaSyncMap> XlSlownikiStrukturaSyncMaps { get; set; }

    public virtual DbSet<XlSlownikiStrukturaSyncMapDiff> XlSlownikiStrukturaSyncMapDiffs { get; set; }

    public virtual DbSet<XlSlownikiSyncMap> XlSlownikiSyncMaps { get; set; }

    public virtual DbSet<XlSlownikiSyncMapDiff> XlSlownikiSyncMapDiffs { get; set; }

    public virtual DbSet<XlSyncStatus> XlSyncStatuses { get; set; }

    public virtual DbSet<XlbiKategoriaAbcxyzhist> XlbiKategoriaAbcxyzhists { get; set; }

    public virtual DbSet<XlbiKntGeografium> XlbiKntGeografia { get; set; }

    public virtual DbSet<XlbiMapowaniaGeografii> XlbiMapowaniaGeografiis { get; set; }

    public virtual DbSet<XlbiSumaTrn> XlbiSumaTrns { get; set; }

    public virtual DbSet<XldlaExecSql> XldlaExecSqls { get; set; }

    public virtual DbSet<ZaEopisy> ZaEopisies { get; set; }

    public virtual DbSet<ZaNopisy> ZaNopisies { get; set; }

    public virtual DbSet<ZadaniaObiekty> ZadaniaObiekties { get; set; }

    public virtual DbSet<ZadaniaPrcPodl> ZadaniaPrcPodls { get; set; }

    public virtual DbSet<Zadanium> Zadania { get; set; }

    public virtual DbSet<ZamElem> ZamElems { get; set; }

    public virtual DbSet<ZamElemListView> ZamElemListViews { get; set; }

    public virtual DbSet<ZamHistoriaZmian> ZamHistoriaZmians { get; set; }

    public virtual DbSet<ZamNag> ZamNags { get; set; }

    public virtual DbSet<ZamPlat> ZamPlats { get; set; }

    public virtual DbSet<ZamRealizacja> ZamRealizacjas { get; set; }

    public virtual DbSet<ZamVat> ZamVats { get; set; }

    public virtual DbSet<ZamZamLinki> ZamZamLinkis { get; set; }

    public virtual DbSet<Zapisy> Zapisies { get; set; }

    public virtual DbSet<ZasobyGniazdRoboczychView> ZasobyGniazdRoboczychViews { get; set; }

    public virtual DbSet<Zdarzenium> Zdarzenia { get; set; }

    public virtual DbSet<ZestKsdef> ZestKsdefs { get; set; }

    public virtual DbSet<ZestKsdefKontum> ZestKsdefKonta { get; set; }

    public virtual DbSet<ZestKselem> ZestKselems { get; set; }

    public virtual DbSet<ZestKskolumny> ZestKskolumnies { get; set; }

    public virtual DbSet<ZestKsnag> ZestKsnags { get; set; }

    public virtual DbSet<ZestKswidok> ZestKswidoks { get; set; }

    public virtual DbSet<ZestKswyniki> ZestKswynikis { get; set; }

    public virtual DbSet<ZestKswynikiDef> ZestKswynikiDefs { get; set; }

    public virtual DbSet<ZestKszmienne> ZestKszmiennes { get; set; }

    public virtual DbSet<Zgody> Zgodies { get; set; }

    public virtual DbSet<ZlcElem> ZlcElems { get; set; }

    public virtual DbSet<ZlcNag> ZlcNags { get; set; }

    public virtual DbSet<ZlcRemElem> ZlcRemElems { get; set; }

    public virtual DbSet<ZlcRemNag> ZlcRemNags { get; set; }

    public virtual DbSet<ZlcTrsLinki> ZlcTrsLinkis { get; set; }

    public virtual DbSet<ZlecWewElem> ZlecWewElems { get; set; }

    public virtual DbSet<ZlecWewNag> ZlecWewNags { get; set; }

    public virtual DbSet<ZrnkartyPracy> ZrnkartyPracies { get; set; }

    public virtual DbSet<ZrnkartyPracyPrc> ZrnkartyPracyPrcs { get; set; }

    public virtual DbSet<ZrnkartyPracyUsl> ZrnkartyPracyUsls { get; set; }

    public virtual DbSet<Zrnmaterialy> Zrnmaterialies { get; set; }

    public virtual DbSet<ZrnplanyElem> ZrnplanyElems { get; set; }

    public virtual DbSet<ZrnplanyNag> ZrnplanyNags { get; set; }

    public virtual DbSet<Zrodla> Zrodlas { get; set; }

    public virtual DbSet<ZrodlaPozycje> ZrodlaPozycjes { get; set; }

    public virtual DbSet<ZstLiczniki> ZstLicznikis { get; set; }

    public virtual DbSet<ZstPromocje> ZstPromocjes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AilimityKredytowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AILimityKredytowe", "CDN");

            entity.Property(e => e.AilkAkcja)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Akcja");
            entity.Property(e => e.AilkAkronim)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Akronim");
            entity.Property(e => e.AilkAktualnyLimit)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Aktualny_Limit");
            entity.Property(e => e.AilkCzynnik)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Czynnik");
            entity.Property(e => e.AilkDzialalnosc)
                .HasDefaultValue(0)
                .HasColumnName("AILK_Dzialalnosc");
            entity.Property(e => e.AilkKlasa)
                .HasDefaultValue(0)
                .HasColumnName("AILK_Klasa");
            entity.Property(e => e.AilkKwotaKwantyl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_KwotaKwantyl");
            entity.Property(e => e.AilkKwotaOstatnia)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_KwotaOstatnia");
            entity.Property(e => e.AilkKwotaPozostala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_KwotaPozostala");
            entity.Property(e => e.AilkKwotaSprzedazy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Kwota_sprzedazy");
            entity.Property(e => e.AilkKwotaSprzedazyOstatnieLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Kwota_sprzedazy_ostatnie_lata");
            entity.Property(e => e.AilkLiczbaFaktur)
                .HasDefaultValue(0)
                .HasColumnName("AILK_Liczba_faktur");
            entity.Property(e => e.AilkLiczbaLimitow)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Liczba_Limitow");
            entity.Property(e => e.AilkLimit)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Limit");
            entity.Property(e => e.AilkLimitRoznica)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Limit_Roznica");
            entity.Property(e => e.AilkLimitTransakcyjny)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Limit_transakcyjny");
            entity.Property(e => e.AilkMaxNaleznosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Max_naleznosc");
            entity.Property(e => e.AilkMaxNaleznoscOstatnieLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Max_naleznosc_ostatnie_lata");
            entity.Property(e => e.AilkMaxNaleznoscTermin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Max_naleznosc_termin");
            entity.Property(e => e.AilkMaxNaleznoscWystawiona)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Max_naleznosc_wystawiona");
            entity.Property(e => e.AilkMinNaleznosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Min_naleznosc");
            entity.Property(e => e.AilkNip)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_NIP");
            entity.Property(e => e.AilkOpoznienie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Opoznienie");
            entity.Property(e => e.AilkOstatniaData)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Ostatnia_data");
            entity.Property(e => e.AilkPartner)
                .HasDefaultValue(0)
                .HasColumnName("AILK_Partner");
            entity.Property(e => e.AilkPeakSprzedazOstatnieLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Peak_sprzedaz_ostatnie_lata");
            entity.Property(e => e.AilkPierwszaData)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Pierwsza_data");
            entity.Property(e => e.AilkPodmiotId)
                .HasDefaultValue(0)
                .HasColumnName("AILK_PodmiotID");
            entity.Property(e => e.AilkPoprawaTerminowosci)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Poprawa_terminowosci");
            entity.Property(e => e.AilkProcentNiedoplata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Procent_niedoplata");
            entity.Property(e => e.AilkProcentNiesplaconychFaktur)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Procent_niesplaconych_faktur");
            entity.Property(e => e.AilkProcentNiesplaconychFakturOstLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Procent_niesplaconych_faktur_ost_lata");
            entity.Property(e => e.AilkProcentRoznica)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Procent_Roznica");
            entity.Property(e => e.AilkProcentSprzedazy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Procent_sprzedazy");
            entity.Property(e => e.AilkProcentSprzedazyOstatnieLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Procent_sprzedazy_ostatnie_lata");
            entity.Property(e => e.AilkProcentTerminowo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Procent_terminowo");
            entity.Property(e => e.AilkRating)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Rating");
            entity.Property(e => e.AilkRekomendacja)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AILK_Rekomendacja");
            entity.Property(e => e.AilkScoring)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Scoring");
            entity.Property(e => e.AilkSredniaNaleznosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Srednia_naleznosc");
            entity.Property(e => e.AilkSredniaNaleznoscTermin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Srednia_naleznosc_termin");
            entity.Property(e => e.AilkSredniaPozostalaKwotaOstLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Srednia_pozostala_kwota_ost_lata");
            entity.Property(e => e.AilkSrednieOpoznienie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Srednie_opoznienie");
            entity.Property(e => e.AilkSrednieOpoznienieOstLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Srednie_opoznienie_ost_lata");
            entity.Property(e => e.AilkWielkosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Wielkosc");
            entity.Property(e => e.AilkWolumen)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Wolumen");
            entity.Property(e => e.AilkWolumenOstatnieLata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Wolumen_ostatnie_lata");
            entity.Property(e => e.AilkZmiennosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AILK_Zmiennosc");
        });

        modelBuilder.Entity<AilimityKredytoweHistorium>(entity =>
        {
            entity.HasKey(e => e.AilkhId).HasName("AILKH_Primary");

            entity.ToTable("AILimityKredytoweHistoria", "CDN");

            entity.HasIndex(e => new { e.AilkhKntNumer, e.AilkhDataDodania }, "AILKHKntData").IsUnique();

            entity.HasIndex(e => e.AilkhKntNumer, "AILKHKntNumer");

            entity.Property(e => e.AilkhId).HasColumnName("AILKH_Id");
            entity.Property(e => e.AilkhDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("AILKH_DataDodania");
            entity.Property(e => e.AilkhKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("AILKH_KntNumer");
            entity.Property(e => e.AilkhWartoscAi)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AILKH_WartoscAI");
            entity.Property(e => e.AilkhWartoscXl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AILKH_WartoscXL");

            entity.HasOne(d => d.AilkhKntNumerNavigation).WithMany(p => p.AilimityKredytoweHistoria)
                .HasForeignKey(d => d.AilkhKntNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AILKHKntNumer");
        });

        modelBuilder.Entity<AiprognozaPopytu>(entity =>
        {
            entity.HasKey(e => e.AippId).HasName("AIPP_Primary");

            entity.ToTable("AIPrognozaPopytu", "CDN");

            entity.HasIndex(e => e.AippMagNumer, "AIPPMagazyn");

            entity.HasIndex(e => e.AippTwrNumer, "AIPPTowar");

            entity.HasIndex(e => new { e.AippTwrNumer, e.AippDataPrognozy, e.AippMagNumer }, "AIPPTwrDataMag").IsUnique();

            entity.Property(e => e.AippId).HasColumnName("AIPP_Id");
            entity.Property(e => e.AippDataPrognozy)
                .HasDefaultValue(0)
                .HasColumnName("AIPP_DataPrognozy");
            entity.Property(e => e.AippIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("AIPP_Ilosc");
            entity.Property(e => e.AippMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("AIPP_MagNumer");
            entity.Property(e => e.AippTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("AIPP_TwrNumer");

            entity.HasOne(d => d.AippMagNumerNavigation).WithMany(p => p.AiprognozaPopytus)
                .HasForeignKey(d => d.AippMagNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AIPPMagazyn");

            entity.HasOne(d => d.AippTwrNumerNavigation).WithMany(p => p.AiprognozaPopytus)
                .HasForeignKey(d => d.AippTwrNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AIPPTowar");
        });

        modelBuilder.Entity<AnElem>(entity =>
        {
            entity.HasKey(e => new { e.AnEGidtyp, e.AnEGidnumer, e.AnEGidlp }).HasName("AnE_Primary");

            entity.ToTable("AnElem", "CDN", tb => tb.HasTrigger("AnElem_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.AnEAnFtyp, e.AnEAnFnumer, e.AnEAnFlp }, "AnEFunkcja");

            entity.HasIndex(e => new { e.AnEAnZtyp, e.AnEAnZnumer, e.AnEAnZlp }, "AnEZestaw");

            entity.HasIndex(e => new { e.AnEGidtyp, e.AnEGidnumer, e.AnEZmienna }, "AnEZmienna").IsUnique();

            entity.Property(e => e.AnEGidtyp).HasColumnName("AnE_GIDTyp");
            entity.Property(e => e.AnEGidnumer).HasColumnName("AnE_GIDNumer");
            entity.Property(e => e.AnEGidlp).HasColumnName("AnE_GIDLp");
            entity.Property(e => e.AnEAnFfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnE_AnFFirma");
            entity.Property(e => e.AnEAnFlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnE_AnFLp");
            entity.Property(e => e.AnEAnFnumer)
                .HasDefaultValue(0)
                .HasColumnName("AnE_AnFNumer");
            entity.Property(e => e.AnEAnFtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnE_AnFTyp");
            entity.Property(e => e.AnEAnZfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnE_AnZFirma");
            entity.Property(e => e.AnEAnZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnE_AnZLp");
            entity.Property(e => e.AnEAnZnumer)
                .HasDefaultValue(0)
                .HasColumnName("AnE_AnZNumer");
            entity.Property(e => e.AnEAnZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnE_AnZTyp");
            entity.Property(e => e.AnEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnE_GIDFirma");
            entity.Property(e => e.AnEWzgledny)
                .HasDefaultValue(0)
                .HasColumnName("AnE_Wzgledny");
            entity.Property(e => e.AnEZmienna)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnE_Zmienna");

            entity.HasOne(d => d.AnEGidnumerNavigation).WithMany(p => p.AnElems)
                .HasForeignKey(d => d.AnEGidnumer)
                .HasConstraintName("FK_AnEPrimary");
        });

        modelBuilder.Entity<AnFunkcje>(entity =>
        {
            entity.HasKey(e => new { e.AnFAnRtyp, e.AnFAnRnumer, e.AnFAnRlp }).HasName("AnF_Primary");

            entity.ToTable("AnFunkcje", "CDN", tb => tb.HasTrigger("AnFunkcje_DeleteHandler"));

            entity.HasIndex(e => new { e.AnFAnRtyp, e.AnFAnRnumer, e.AnFAkronim, e.AnFAnRlp }, "AnFAkronim").IsUnique();

            entity.Property(e => e.AnFAnRtyp).HasColumnName("AnF_AnRTyp");
            entity.Property(e => e.AnFAnRnumer).HasColumnName("AnF_AnRNumer");
            entity.Property(e => e.AnFAnRlp).HasColumnName("AnF_AnRLp");
            entity.Property(e => e.AnFAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnF_Akronim");
            entity.Property(e => e.AnFAnRfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnF_AnRFirma");
            entity.Property(e => e.AnFFiltr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnF_Filtr");
            entity.Property(e => e.AnFOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnF_Opis");
            entity.Property(e => e.AnFQuery)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnF_Query");
            entity.Property(e => e.AnFWyrazenie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnF_Wyrazenie");
            entity.Property(e => e.AnFZapisSymb)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnF_ZapisSymb");

            entity.HasOne(d => d.AnFAnRnumerNavigation).WithMany(p => p.AnFunkcjes)
                .HasForeignKey(d => d.AnFAnRnumer)
                .HasConstraintName("FK_AnFPrimary");
        });

        modelBuilder.Entity<AnKolejka>(entity =>
        {
            entity.HasKey(e => new { e.AnKAnRtyp, e.AnKAnRnumer }).HasName("AnK_Primary");

            entity.ToTable("AnKolejka", "CDN");

            entity.HasIndex(e => new { e.AnKPriorytet, e.AnKStrefa }, "AnKPriorytet");

            entity.Property(e => e.AnKAnRtyp).HasColumnName("AnK_AnRTyp");
            entity.Property(e => e.AnKAnRnumer).HasColumnName("AnK_AnRNumer");
            entity.Property(e => e.AnKAnRfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnK_AnRFirma");
            entity.Property(e => e.AnKAnRlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnK_AnRLp");
            entity.Property(e => e.AnKKiedyDodany)
                .HasDefaultValue(0)
                .HasColumnName("AnK_KiedyDodany");
            entity.Property(e => e.AnKPriorytet)
                .HasDefaultValue((short)0)
                .HasColumnName("AnK_Priorytet");
            entity.Property(e => e.AnKStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("AnK_Status");
            entity.Property(e => e.AnKStrefa)
                .HasDefaultValue((short)0)
                .HasColumnName("AnK_Strefa");

            entity.HasOne(d => d.AnKAnRnumerNavigation).WithMany(p => p.AnKolejkas)
                .HasForeignKey(d => d.AnKAnRnumer)
                .HasConstraintName("FK_AnKPrimary");
        });

        modelBuilder.Entity<AnNag>(entity =>
        {
            entity.HasKey(e => e.AnNGidnumer).HasName("AnN_Primary");

            entity.ToTable("AnNag", "CDN");

            entity.HasIndex(e => new { e.AnNStaTyp, e.AnNStaNumer, e.AnNAkronim }, "AnNStanowiska").IsUnique();

            entity.Property(e => e.AnNGidnumer).HasColumnName("AnN_GIDNumer");
            entity.Property(e => e.AnNAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Akronim");
            entity.Property(e => e.AnNElementy)
                .HasDefaultValue((byte)0)
                .HasColumnName("AnN_Elementy");
            entity.Property(e => e.AnNFormat1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Format1");
            entity.Property(e => e.AnNFormat2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Format2");
            entity.Property(e => e.AnNFormat3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Format3");
            entity.Property(e => e.AnNFormat4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Format4");
            entity.Property(e => e.AnNFormat5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Format5");
            entity.Property(e => e.AnNFormat6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Format6");
            entity.Property(e => e.AnNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnN_GIDFirma");
            entity.Property(e => e.AnNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_GIDLp");
            entity.Property(e => e.AnNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_GIDTyp");
            entity.Property(e => e.AnNNazwa1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Nazwa1");
            entity.Property(e => e.AnNNazwa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Nazwa2");
            entity.Property(e => e.AnNNazwa3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Nazwa3");
            entity.Property(e => e.AnNNazwa4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Nazwa4");
            entity.Property(e => e.AnNNazwa5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Nazwa5");
            entity.Property(e => e.AnNNazwa6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Nazwa6");
            entity.Property(e => e.AnNOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("AnN_OpeFirma");
            entity.Property(e => e.AnNOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_OpeLp");
            entity.Property(e => e.AnNOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("AnN_OpeNumer");
            entity.Property(e => e.AnNOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_OpeTyp");
            entity.Property(e => e.AnNOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Opis");
            entity.Property(e => e.AnNProg1A)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog1A");
            entity.Property(e => e.AnNProg1B)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog1B");
            entity.Property(e => e.AnNProg2A)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog2A");
            entity.Property(e => e.AnNProg2B)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog2B");
            entity.Property(e => e.AnNProg3A)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog3A");
            entity.Property(e => e.AnNProg3B)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog3B");
            entity.Property(e => e.AnNProg4A)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog4A");
            entity.Property(e => e.AnNProg4B)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog4B");
            entity.Property(e => e.AnNProg5A)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog5A");
            entity.Property(e => e.AnNProg5B)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog5B");
            entity.Property(e => e.AnNProg6A)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog6A");
            entity.Property(e => e.AnNProg6B)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnN_Prog6B");
            entity.Property(e => e.AnNStGfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnN_StGFirma");
            entity.Property(e => e.AnNStGlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_StGLp");
            entity.Property(e => e.AnNStGnumer)
                .HasDefaultValue(0)
                .HasColumnName("AnN_StGNumer");
            entity.Property(e => e.AnNStGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_StGTyp");
            entity.Property(e => e.AnNStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("AnN_StaFirma");
            entity.Property(e => e.AnNStaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_StaLp");
            entity.Property(e => e.AnNStaNumer)
                .HasDefaultValue(0)
                .HasColumnName("AnN_StaNumer");
            entity.Property(e => e.AnNStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnN_StaTyp");
            entity.Property(e => e.AnNWyrazenie1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Wyrazenie1");
            entity.Property(e => e.AnNWyrazenie2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Wyrazenie2");
            entity.Property(e => e.AnNWyrazenie3)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Wyrazenie3");
            entity.Property(e => e.AnNWyrazenie4)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Wyrazenie4");
            entity.Property(e => e.AnNWyrazenie5)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Wyrazenie5");
            entity.Property(e => e.AnNWyrazenie6)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnN_Wyrazenie6");
        });

        modelBuilder.Entity<AnRaporty>(entity =>
        {
            entity.HasKey(e => e.AnRGidnumer).HasName("AnR_Primary");

            entity.ToTable("AnRaporty", "CDN");

            entity.HasIndex(e => e.AnRAkronim, "AnrAkronim").IsUnique();

            entity.Property(e => e.AnRGidnumer).HasColumnName("AnR_GIDNumer");
            entity.Property(e => e.AnRAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnR_Akronim");
            entity.Property(e => e.AnRAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("AnR_Aktywny");
            entity.Property(e => e.AnRDaneZ)
                .HasDefaultValue(0)
                .HasColumnName("AnR_DaneZ");
            entity.Property(e => e.AnRDataDo)
                .HasDefaultValue(0)
                .HasColumnName("AnR_DataDo");
            entity.Property(e => e.AnRDataOd)
                .HasDefaultValue(0)
                .HasColumnName("AnR_DataOd");
            entity.Property(e => e.AnRFiltr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnR_Filtr");
            entity.Property(e => e.AnRGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnR_GIDFirma");
            entity.Property(e => e.AnRGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_GIDLp");
            entity.Property(e => e.AnRGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_GIDTyp");
            entity.Property(e => e.AnRGw1firma)
                .HasDefaultValue(0)
                .HasColumnName("AnR_GW1Firma");
            entity.Property(e => e.AnRGw1lp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_GW1Lp");
            entity.Property(e => e.AnRGw1numer)
                .HasDefaultValue(0)
                .HasColumnName("AnR_GW1Numer");
            entity.Property(e => e.AnRGw1typ)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_GW1Typ");
            entity.Property(e => e.AnRGw2firma)
                .HasDefaultValue(0)
                .HasColumnName("AnR_GW2Firma");
            entity.Property(e => e.AnRGw2lp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_GW2Lp");
            entity.Property(e => e.AnRGw2numer)
                .HasDefaultValue(0)
                .HasColumnName("AnR_GW2Numer");
            entity.Property(e => e.AnRGw2typ)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_GW2Typ");
            entity.Property(e => e.AnRIloscArch)
                .HasDefaultValue(0)
                .HasColumnName("AnR_IloscArch");
            entity.Property(e => e.AnRKiedyLiczyc)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_KiedyLiczyc");
            entity.Property(e => e.AnRKiedyNowy)
                .HasDefaultValue(0)
                .HasColumnName("AnR_KiedyNowy");
            entity.Property(e => e.AnROpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("AnR_OpeFirma");
            entity.Property(e => e.AnROpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_OpeLp");
            entity.Property(e => e.AnROpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("AnR_OpeNumer");
            entity.Property(e => e.AnROpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnR_OpeTyp");
            entity.Property(e => e.AnROpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnR_Opis");
            entity.Property(e => e.AnRPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("AnR_Priorytet");
            entity.Property(e => e.AnRQuery)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnR_Query");
            entity.Property(e => e.AnRTypDo)
                .HasDefaultValue(0)
                .HasColumnName("AnR_TypDo");
            entity.Property(e => e.AnRTypOd)
                .HasDefaultValue(0)
                .HasColumnName("AnR_TypOd");
        });

        modelBuilder.Entity<AnWyniki>(entity =>
        {
            entity.HasKey(e => new { e.AnWAnZnumer, e.AnWObiTyp, e.AnWObiNumer, e.AnWObiLp }).HasName("AnW_Primary");

            entity.ToTable("AnWyniki", "CDN");

            entity.Property(e => e.AnWAnZnumer).HasColumnName("AnW_AnZNumer");
            entity.Property(e => e.AnWObiTyp).HasColumnName("AnW_ObiTyp");
            entity.Property(e => e.AnWObiNumer).HasColumnName("AnW_ObiNumer");
            entity.Property(e => e.AnWObiLp).HasColumnName("AnW_ObiLp");
            entity.Property(e => e.AnWAnZfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnW_AnZFirma");
            entity.Property(e => e.AnWAnZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnW_AnZLp");
            entity.Property(e => e.AnWAnZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnW_AnZTyp");
            entity.Property(e => e.AnWObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("AnW_ObiFirma");
            entity.Property(e => e.AnWWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("AnW_Wartosc");

            entity.HasOne(d => d.AnWAnZnumerNavigation).WithMany(p => p.AnWynikis)
                .HasForeignKey(d => d.AnWAnZnumer)
                .HasConstraintName("FK_AnWPrimaryNoType");
        });

        modelBuilder.Entity<AnZestawy>(entity =>
        {
            entity.HasKey(e => e.AnZGidnumer).HasName("AnZ_Primary");

            entity.ToTable("AnZestawy", "CDN", tb => tb.HasTrigger("AnZestawy_DeleteHandler"));

            entity.HasIndex(e => new { e.AnZAnFtyp, e.AnZAnFnumer, e.AnZAnFlp }, "AnZRaport");

            entity.Property(e => e.AnZGidnumer).HasColumnName("AnZ_GIDNumer");
            entity.Property(e => e.AnZAnFfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_AnFFirma");
            entity.Property(e => e.AnZAnFlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnZ_AnFLp");
            entity.Property(e => e.AnZAnFnumer)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_AnFNumer");
            entity.Property(e => e.AnZAnFtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnZ_AnFTyp");
            entity.Property(e => e.AnZDataDo)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_DataDo");
            entity.Property(e => e.AnZDataOd)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_DataOd");
            entity.Property(e => e.AnZGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_GIDFirma");
            entity.Property(e => e.AnZGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnZ_GIDLp");
            entity.Property(e => e.AnZGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AnZ_GIDTyp");
            entity.Property(e => e.AnZOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AnZ_Opis");
            entity.Property(e => e.AnZStan)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_Stan");
            entity.Property(e => e.AnZTstart)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_TStart");
            entity.Property(e => e.AnZTstop)
                .HasDefaultValue(0)
                .HasColumnName("AnZ_TStop");

            entity.HasOne(d => d.AnFunkcje).WithMany(p => p.AnZestawies)
                .HasForeignKey(d => new { d.AnZAnFtyp, d.AnZAnFnumer, d.AnZAnFlp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AnZRaport");
        });

        modelBuilder.Entity<AnalizaAbcxyz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AnalizaABCXYZ");

            entity.Property(e => e.Flaga)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FLAGA");
        });

        modelBuilder.Entity<AnalizyBiparam>(entity =>
        {
            entity.HasKey(e => e.AbpNazwa).HasName("ABP_Primary");

            entity.ToTable("AnalizyBIParam", "CDN");

            entity.Property(e => e.AbpNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ABP_Nazwa");
            entity.Property(e => e.AbpData)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ABP_Data");
            entity.Property(e => e.AbpParam)
                .HasDefaultValue(0)
                .HasColumnName("ABP_Param");
            entity.Property(e => e.AbpTimestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ABP_Timestamp");
        });

        modelBuilder.Entity<Ankiety>(entity =>
        {
            entity.HasKey(e => e.AntId).HasName("ANT_Primary");

            entity.ToTable("Ankiety", "CDN", tb =>
                {
                    tb.HasTrigger("Ankiety_DeleteHandler");
                    tb.HasTrigger("Ankiety_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.AntKod, "ANTKod").IsUnique();

            entity.HasIndex(e => e.AntRodzaj, "AntRodzaj");

            entity.Property(e => e.AntId).HasColumnName("ANT_Id");
            entity.Property(e => e.AntAktywna)
                .HasDefaultValue((short)0)
                .HasColumnName("ANT_Aktywna");
            entity.Property(e => e.AntAnonimowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("ANT_Anonimowa");
            entity.Property(e => e.AntKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ANT_Kod");
            entity.Property(e => e.AntNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ANT_Nazwa");
            entity.Property(e => e.AntPodmiotWymagany)
                .HasDefaultValue((byte)0)
                .HasColumnName("ANT_PodmiotWymagany");
            entity.Property(e => e.AntRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("ANT_Rodzaj");
        });

        modelBuilder.Entity<AnkietyOkresy>(entity =>
        {
            entity.HasKey(e => e.AnoId).HasName("ANO_Primary");

            entity.ToTable("AnkietyOkresy", "CDN");

            entity.Property(e => e.AnoId).HasColumnName("ANO_Id");
            entity.Property(e => e.AnoKoniec)
                .HasDefaultValue(0)
                .HasColumnName("ANO_Koniec");
            entity.Property(e => e.AnoOpis)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ANO_Opis");
            entity.Property(e => e.AnoPoczatek)
                .HasDefaultValue(0)
                .HasColumnName("ANO_Poczatek");
        });

        modelBuilder.Entity<Apfino>(entity =>
        {
            entity.HasKey(e => e.ApfId).HasName("Apf_Primary");

            entity.ToTable("Apfino", "CDN");

            entity.HasIndex(e => e.ApfApfinoId, "ApfApfinoId");

            entity.HasIndex(e => e.ApfTrNnumer, "ApfTrN").IsUnique();

            entity.Property(e => e.ApfId).HasColumnName("Apf_Id");
            entity.Property(e => e.ApfApfinoId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Apf_ApfinoId");
            entity.Property(e => e.ApfData)
                .HasDefaultValue(0)
                .HasColumnName("Apf_Data");
            entity.Property(e => e.ApfFileId)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Apf_FileId");
            entity.Property(e => e.ApfKod)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Apf_Kod");
            entity.Property(e => e.ApfKodWartosc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Apf_KodWartosc");
            entity.Property(e => e.ApfTrNfirma)
                .HasDefaultValue(0)
                .HasColumnName("Apf_TrNFirma");
            entity.Property(e => e.ApfTrNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Apf_TrNLp");
            entity.Property(e => e.ApfTrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("Apf_TrNNumer");
            entity.Property(e => e.ApfTrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Apf_TrNTyp");
            entity.Property(e => e.ApfUsluga)
                .HasDefaultValue((short)0)
                .HasColumnName("Apf_Usluga");
            entity.Property(e => e.ApfZgloszonaKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Apf_ZgloszonaKwotaSys");

            entity.HasOne(d => d.ApfTrNnumerNavigation).WithOne(p => p.Apfino)
                .HasForeignKey<Apfino>(d => d.ApfTrNnumer)
                .HasConstraintName("FK_ApfTrN");
        });

        modelBuilder.Entity<ApisessionCache>(entity =>
        {
            entity.HasKey(e => e.AscId).HasName("ASC_Primary");

            entity.ToTable("APISessionCache", "CDN");

            entity.Property(e => e.AscId).HasColumnName("ASC_ID");
            entity.Property(e => e.AscSesData)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ASC_SesData");
        });

        modelBuilder.Entity<Aplikacje>(entity =>
        {
            entity.HasKey(e => e.AplKod).HasName("APL_Primary");

            entity.ToTable("Aplikacje", "CDN");

            entity.Property(e => e.AplKod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("APL_Kod");
            entity.Property(e => e.AplDataRej)
                .HasDefaultValue(0)
                .HasColumnName("APL_DataRej");
            entity.Property(e => e.AplNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("APL_Nazwa");
            entity.Property(e => e.AplNumSer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("APL_NumSer");
            entity.Property(e => e.AplOfset)
                .HasDefaultValue(0)
                .HasColumnName("APL_Ofset");
            entity.Property(e => e.AplPlatformy)
                .HasDefaultValue(0)
                .HasColumnName("APL_Platformy");
            entity.Property(e => e.AplProducent)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("APL_Producent");
            entity.Property(e => e.AplStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("APL_Status");
            entity.Property(e => e.AplWersja)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("APL_Wersja");
        });

        modelBuilder.Entity<AtrKompletyLinki>(entity =>
        {
            entity.HasKey(e => new { e.AklAkpId, e.AklAtKid }).HasName("AKl_Primary");

            entity.ToTable("AtrKompletyLinki", "CDN");

            entity.HasIndex(e => e.AklAtKid, "AKLAtkID");

            entity.HasIndex(e => new { e.AklAkpId, e.AklLp }, "AkLLp");

            entity.Property(e => e.AklAkpId).HasColumnName("AKl_AKpID");
            entity.Property(e => e.AklAtKid).HasColumnName("AKl_AtKId");
            entity.Property(e => e.AklLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AKl_Lp");

            entity.HasOne(d => d.AklAkp).WithMany(p => p.AtrKompletyLinkis)
                .HasForeignKey(d => d.AklAkpId)
                .HasConstraintName("FK_AKlPrimary");

            entity.HasOne(d => d.AklAtK).WithMany(p => p.AtrKompletyLinkis)
                .HasForeignKey(d => d.AklAtKid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AKLAtkID");
        });

        modelBuilder.Entity<Atrybuty>(entity =>
        {
            entity.HasKey(e => e.AtrId).HasName("Atr_Primary");

            entity.ToTable("Atrybuty", "CDN", tb =>
                {
                    tb.HasTrigger("Atrybuty_DeleteHandler");
                    tb.HasTrigger("Atrybuty_InsertUpdateHandler");
                    tb.HasTrigger("Atrybuty_Kasowanie");
                    tb.HasTrigger("Atrybuty_LastMod");
                    tb.HasTrigger("DABCzasModyfikacji");
                });

            entity.HasIndex(e => e.AtrAtkId, "AtrAtKID");

            entity.HasIndex(e => new { e.AtrAtrNumer, e.AtrAtrTyp, e.AtrAtrLp }, "AtrAtrGID");

            entity.HasIndex(e => new { e.AtrObiNumer, e.AtrObiTyp, e.AtrObiLp, e.AtrObiSubLp, e.AtrAtkId }, "AtrObiGID").IsUnique();

            entity.Property(e => e.AtrId).HasColumnName("Atr_Id");
            entity.Property(e => e.AtrAtkId)
                .HasDefaultValue(0)
                .HasColumnName("Atr_AtkId");
            entity.Property(e => e.AtrAtrFirma)
                .HasDefaultValue(0)
                .HasColumnName("Atr_AtrFirma");
            entity.Property(e => e.AtrAtrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Atr_AtrLp");
            entity.Property(e => e.AtrAtrNumer)
                .HasDefaultValue(0)
                .HasColumnName("Atr_AtrNumer");
            entity.Property(e => e.AtrAtrSubLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Atr_AtrSubLp");
            entity.Property(e => e.AtrAtrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Atr_AtrTyp");
            entity.Property(e => e.AtrGrupujacy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Atr_Grupujacy");
            entity.Property(e => e.AtrGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("Atr_GUID");
            entity.Property(e => e.AtrLastMod)
                .HasDefaultValue(0)
                .HasColumnName("Atr_LastMod");
            entity.Property(e => e.AtrObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("Atr_ObiFirma");
            entity.Property(e => e.AtrObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Atr_ObiLp");
            entity.Property(e => e.AtrObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("Atr_ObiNumer");
            entity.Property(e => e.AtrObiSubLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Atr_ObiSubLp");
            entity.Property(e => e.AtrObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Atr_ObiTyp");
            entity.Property(e => e.AtrOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("Atr_OptimaId");
            entity.Property(e => e.AtrPozycja)
                .HasDefaultValue(0)
                .HasColumnName("Atr_Pozycja");
            entity.Property(e => e.AtrWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Atr_Wartosc");

            entity.HasOne(d => d.AtrAtk).WithMany(p => p.Atrybuties)
                .HasForeignKey(d => d.AtrAtkId)
                .HasConstraintName("FK_AtrAtKID");
        });

        modelBuilder.Entity<AtrybutyCennik>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Cennik");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Cennik");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyDostawa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Dostawa");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Dostawa");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyFakty>(entity =>
        {
            entity.HasKey(e => new { e.AtFObtyp, e.AtFElement, e.AtFKosId, e.AtFFakId }).HasName("AtF_Primary");

            entity.ToTable("AtrybutyFakty", "CDN");

            entity.HasIndex(e => e.AtFFakId, "AtFFakt");

            entity.HasIndex(e => e.AtFKosId, "AtFKostka");

            entity.Property(e => e.AtFObtyp).HasColumnName("AtF_OBTyp");
            entity.Property(e => e.AtFElement).HasColumnName("AtF_Element");
            entity.Property(e => e.AtFKosId).HasColumnName("AtF_KosID");
            entity.Property(e => e.AtFFakId).HasColumnName("AtF_FakID");

            entity.HasOne(d => d.AtFFak).WithMany(p => p.AtrybutyFakties)
                .HasForeignKey(d => d.AtFFakId)
                .HasConstraintName("FK_AtFFakt");

            entity.HasOne(d => d.AtFKos).WithMany(p => p.AtrybutyFakties)
                .HasForeignKey(d => d.AtFKosId)
                .HasConstraintName("FK_AtFKostka");
        });

        modelBuilder.Entity<AtrybutyHist>(entity =>
        {
            entity.HasKey(e => new { e.AtHId, e.AtHTimeStamp, e.AtHAtHid }).HasName("AtH_Primary");

            entity.ToTable("AtrybutyHist", "CDN", tb => tb.HasTrigger("AtrybutyHist_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.AtHAtrNumer, e.AtHAtrTyp, e.AtHAtrLp }, "AtHAtrGID");

            entity.HasIndex(e => new { e.AtHObiTyp, e.AtHObiNumer, e.AtHObiLp, e.AtHObiSubLp, e.AtHAtkId }, "AtHObiGID");

            entity.Property(e => e.AtHId).HasColumnName("AtH_Id");
            entity.Property(e => e.AtHTimeStamp).HasColumnName("AtH_TimeStamp");
            entity.Property(e => e.AtHAtHid)
                .ValueGeneratedOnAdd()
                .HasColumnName("AtH_AtHID");
            entity.Property(e => e.AtHAtkId)
                .HasDefaultValue(0)
                .HasColumnName("AtH_AtkId");
            entity.Property(e => e.AtHAtrFirma)
                .HasDefaultValue(0)
                .HasColumnName("AtH_AtrFirma");
            entity.Property(e => e.AtHAtrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_AtrLp");
            entity.Property(e => e.AtHAtrNumer)
                .HasDefaultValue(0)
                .HasColumnName("AtH_AtrNumer");
            entity.Property(e => e.AtHAtrSubLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_AtrSubLp");
            entity.Property(e => e.AtHAtrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_AtrTyp");
            entity.Property(e => e.AtHGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("AtH_GUID");
            entity.Property(e => e.AtHObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("AtH_ObiFirma");
            entity.Property(e => e.AtHObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_ObiLp");
            entity.Property(e => e.AtHObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("AtH_ObiNumer");
            entity.Property(e => e.AtHObiSubLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_ObiSubLp");
            entity.Property(e => e.AtHObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_ObiTyp");
            entity.Property(e => e.AtHOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("AtH_OpeFirma");
            entity.Property(e => e.AtHOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_OpeLp");
            entity.Property(e => e.AtHOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("AtH_OpeNumer");
            entity.Property(e => e.AtHOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtH_OpeTyp");
            entity.Property(e => e.AtHTimeStampDo)
                .HasDefaultValue(0)
                .HasColumnName("AtH_TimeStampDo");
            entity.Property(e => e.AtHWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtH_Wartosc");
        });

        modelBuilder.Entity<AtrybutyKampanieEtapy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_KampanieEtapy");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyKlasy>(entity =>
        {
            entity.HasKey(e => e.AtKId).HasName("AtK_Primary");

            entity.ToTable("AtrybutyKlasy", "CDN", tb =>
                {
                    tb.HasTrigger("AtrybutyKlasy_CzasModyfikacji");
                    tb.HasTrigger("AtrybutyKlasy_DeleteHandler");
                    tb.HasTrigger("AtrybutyKlasy_Kasowanie");
                });

            entity.HasIndex(e => e.AtKNazwa, "AtKNazwa").IsUnique();

            entity.Property(e => e.AtKId).HasColumnName("AtK_ID");
            entity.Property(e => e.AtKAutomat)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Automat");
            entity.Property(e => e.AtKCharSet)
                .HasDefaultValue(0)
                .HasColumnName("AtK_CharSet");
            entity.Property(e => e.AtKControlling)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Controlling");
            entity.Property(e => e.AtKCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("AtK_CzasModyfikacji");
            entity.Property(e => e.AtKDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("AtK_DataDodania");
            entity.Property(e => e.AtKDomApiFirma)
                .HasDefaultValue(0)
                .HasColumnName("AtK_DomApiFirma");
            entity.Property(e => e.AtKDomApilp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtK_DomAPILp");
            entity.Property(e => e.AtKDomApinumer)
                .HasDefaultValue(0)
                .HasColumnName("AtK_DomAPINumer");
            entity.Property(e => e.AtKDomApityp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtK_DomAPITyp");
            entity.Property(e => e.AtKDomFirma)
                .HasDefaultValue(0)
                .HasColumnName("AtK_DomFirma");
            entity.Property(e => e.AtKDomLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtK_DomLp");
            entity.Property(e => e.AtKDomNumer)
                .HasDefaultValue(0)
                .HasColumnName("AtK_DomNumer");
            entity.Property(e => e.AtKDomTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtK_DomTyp");
            entity.Property(e => e.AtKDomyslna)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_Domyslna");
            entity.Property(e => e.AtKDomyslnaApi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_DomyslnaAPI");
            entity.Property(e => e.AtKDomyslnaApisql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_DomyslnaAPISQL");
            entity.Property(e => e.AtKDomyslnaSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_DomyslnaSQL");
            entity.Property(e => e.AtKESklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_eSklep");
            entity.Property(e => e.AtKFormat)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_Format");
            entity.Property(e => e.AtKHistoria)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Historia");
            entity.Property(e => e.AtKIMall)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_iMall");
            entity.Property(e => e.AtKIZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_iZam");
            entity.Property(e => e.AtKKseF)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_KSeF");
            entity.Property(e => e.AtKMes)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_MES");
            entity.Property(e => e.AtKMobmprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_MOBMPrawa");
            entity.Property(e => e.AtKMobsprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_MOBSPrawa");
            entity.Property(e => e.AtKMobzprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_MOBZPrawa");
            entity.Property(e => e.AtKNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_Nazwa");
            entity.Property(e => e.AtKNieaktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Nieaktywny");
            entity.Property(e => e.AtKOddZrdId)
                .HasDefaultValue(0)
                .HasColumnName("AtK_OddZrdID");
            entity.Property(e => e.AtKOkresowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Okresowe");
            entity.Property(e => e.AtKOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_Opis");
            entity.Property(e => e.AtKOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("AtK_OptimaId");
            entity.Property(e => e.AtKPracprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_PRACPrawa");
            entity.Property(e => e.AtKReadOnly)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_ReadOnly");
            entity.Property(e => e.AtKSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtK_SQL");
            entity.Property(e => e.AtKSynchronizowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Synchronizowany");
            entity.Property(e => e.AtKTyp).HasColumnName("AtK_Typ");
            entity.Property(e => e.AtKTypDom)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_TypDom");
            entity.Property(e => e.AtKTypDomApi)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_TypDomApi");
            entity.Property(e => e.AtKWielowart)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Wielowart");
            entity.Property(e => e.AtKWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_WMS");
            entity.Property(e => e.AtKWymagany)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Wymagany");
            entity.Property(e => e.AtKZamknieta)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_Zamknieta");
            entity.Property(e => e.AtKZlisty)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtK_ZListy");
        });

        modelBuilder.Entity<AtrybutyKomplety>(entity =>
        {
            entity.HasKey(e => e.AkpId).HasName("AKp_Primary");

            entity.ToTable("AtrybutyKomplety", "CDN", tb =>
                {
                    tb.HasTrigger("AtrybutyKomplety_CzasModyfikacji");
                    tb.HasTrigger("AtrybutyKomplety_Kasuj");
                });

            entity.Property(e => e.AkpId).HasColumnName("AKp_Id");
            entity.Property(e => e.AkpCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("AKp_CzasModyfikacji");
            entity.Property(e => e.AkpNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AKp_Nazwa");
            entity.Property(e => e.AkpOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("AKp_OptimaId");
        });

        modelBuilder.Entity<AtrybutyKonto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Konto");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Konto");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyKontrahent>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Kontrahent");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Kontrahent");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyKonwersacje>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Konwersacje");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyLokalizacja>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Lokalizacja");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Lokalizacja");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyMagazyn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Magazyn");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Magazyn");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyMagazynyRuchy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_MagazynyRuchy");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_ATRYBUTY_MagazynyRuchy_ObiTypObiNumer");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyMagazynyRuchyDokMag>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_MagazynyRuchyDokMag");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_ATRYBUTY_MagazynyRuchyDokMag");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyMagazynyStany>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_MagazynyStany");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_MagazynyStany");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyObiekty>(entity =>
        {
            entity.HasKey(e => new { e.AtOGidtyp, e.AtOElement, e.AtOAtKid }).HasName("AtO_Primary");

            entity.ToTable("AtrybutyObiekty", "CDN", tb =>
                {
                    tb.HasTrigger("AtrybutyObiekty_CzasModyfikacji");
                    tb.HasTrigger("AtrybutyObiekty_InsertUpdateHandler");
                    tb.HasTrigger("AtrybutyObiekty_Zmiana");
                });

            entity.HasIndex(e => e.AtOAtzid, "ATOZrodlo");

            entity.HasIndex(e => e.AtOAtKid, "AtOAtkId");

            entity.Property(e => e.AtOGidtyp).HasColumnName("AtO_GIDTyp");
            entity.Property(e => e.AtOElement).HasColumnName("AtO_Element");
            entity.Property(e => e.AtOAtKid).HasColumnName("AtO_AtKId");
            entity.Property(e => e.AtOAgregacja)
                .HasDefaultValue(0)
                .HasColumnName("AtO_Agregacja");
            entity.Property(e => e.AtOAkcja)
                .HasDefaultValue(-1)
                .HasColumnName("AtO_Akcja");
            entity.Property(e => e.AtOAtzid)
                .HasDefaultValue(0)
                .HasColumnName("AtO_ATZID");
            entity.Property(e => e.AtOAutomat)
                .HasDefaultValue((short)-1)
                .HasColumnName("AtO_Automat");
            entity.Property(e => e.AtOCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("AtO_CzasModyfikacji");
            entity.Property(e => e.AtOFormat)
                .HasDefaultValue(0)
                .HasColumnName("AtO_Format");
            entity.Property(e => e.AtOId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AtO_Id");
            entity.Property(e => e.AtOKorekty)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtO_Korekty");
            entity.Property(e => e.AtOLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtO_Lp");
            entity.Property(e => e.AtOMiara)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtO_Miara");
            entity.Property(e => e.AtOOnline)
                .HasDefaultValue((short)0)
                .HasColumnName("AtO_Online");
            entity.Property(e => e.AtOPusteWartosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtO_PusteWartosci");
            entity.Property(e => e.AtOReadOnly)
                .HasDefaultValue((short)-1)
                .HasColumnName("AtO_ReadOnly");
            entity.Property(e => e.AtORozbijanie)
                .HasDefaultValue(0)
                .HasColumnName("AtO_Rozbijanie");
            entity.Property(e => e.AtOWymagany)
                .HasDefaultValue((short)-1)
                .HasColumnName("AtO_Wymagany");
        });

        modelBuilder.Entity<AtrybutyObiektyFakty>(entity =>
        {
            entity.HasKey(e => new { e.AofAtOtyp, e.AofAtOelement, e.AofAtOatkId, e.AofKosId, e.AofFakId }).HasName("AOF_Primary");

            entity.ToTable("AtrybutyObiektyFakty", "CDN");

            entity.HasIndex(e => new { e.AofAtOtyp, e.AofAtOelement, e.AofKosId, e.AofFakId }, "AOFAtrybutyFakty");

            entity.Property(e => e.AofAtOtyp).HasColumnName("AOF_AtOTyp");
            entity.Property(e => e.AofAtOelement).HasColumnName("AOF_AtOElement");
            entity.Property(e => e.AofAtOatkId).HasColumnName("AOF_AtOAtkID");
            entity.Property(e => e.AofKosId).HasColumnName("AOF_KosID");
            entity.Property(e => e.AofFakId).HasColumnName("AOF_FakID");

            entity.HasOne(d => d.AtrybutyObiekty).WithMany(p => p.AtrybutyObiektyFakties)
                .HasForeignKey(d => new { d.AofAtOtyp, d.AofAtOelement, d.AofAtOatkId })
                .HasConstraintName("FK_AOFPrimary");

            entity.HasOne(d => d.AtrybutyFakty).WithMany(p => p.AtrybutyObiektyFakties)
                .HasForeignKey(d => new { d.AofAtOtyp, d.AofAtOelement, d.AofKosId, d.AofFakId })
                .HasConstraintName("FK_AOFAtrybutyFakty");
        });

        modelBuilder.Entity<AtrybutyOferty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Oferty");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Oferty");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyPlatnosciBiezace>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_PlatnosciBiezace");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_PlatnosciBiezace_ObiTypObiNumer");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyPlatnosciStanyKa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_PlatnosciStanyKas");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_PlatnosciStanyKas");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyProdukcjaDokumenty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_ProdukcjaDokumenty");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_ProdukcjaDokumenty");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyProdukt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Produkt");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Produkt");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyProjekt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Projekt");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Projekt");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyPromocje>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Promocje");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Promocje");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyPrzychodyKoszty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_PrzychodyKoszty");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_PrzychodyKoszty");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyReklamacje>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Reklamacje");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Reklamacje");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutySamochod>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Samochod");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Samochod");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutySprzedaz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Sprzedaz");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_ATRYBUTY_Sprzedaz");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyStrukturaFirmy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_StrukturaFirmy");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_StrukturaFirmy");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Technologia");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyTechnologium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Technologia");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyTransport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Transport");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Transport");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyUmowy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Umowy");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Umowy");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyUprawnienium>(entity =>
        {
            entity.HasKey(e => new { e.AtUAtkId, e.AtUOpeNumer }).HasName("AtU_Primary");

            entity.ToTable("AtrybutyUprawnienia", "CDN", tb =>
                {
                    tb.HasTrigger("AtrybutyUprawnienia_InsertUpdateHandler");
                    tb.HasTrigger("AtrybutyUprawnienia_Kpl_InsertUpdateHandler");
                    tb.HasTrigger("AtrybutyUprawnienia_Sta_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.AtUAtkId, "AtUKlasa");

            entity.HasIndex(e => e.AtUOpeNumer, "AtUOperator");

            entity.Property(e => e.AtUAtkId).HasColumnName("AtU_AtkID");
            entity.Property(e => e.AtUOpeNumer).HasColumnName("AtU_OpeNumer");
            entity.Property(e => e.AtUDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("AtU_DataModyfikacji");
            entity.Property(e => e.AtUPrawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("AtU_Prawa");
        });

        modelBuilder.Entity<AtrybutyWartosci>(entity =>
        {
            entity.HasKey(e => new { e.AtWAtKid, e.AtWWartosc }).HasName("AtW_Primary");

            entity.ToTable("AtrybutyWartosci", "CDN", tb =>
                {
                    tb.HasTrigger("AtrybutyWartosci_CzasModyfikacji");
                    tb.HasTrigger("AtrybutyWartosci_DeleteHandler");
                });

            entity.HasIndex(e => e.AtWId, "AtWAtWID").IsUnique();

            entity.Property(e => e.AtWAtKid).HasColumnName("AtW_AtKId");
            entity.Property(e => e.AtWWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AtW_Wartosc");
            entity.Property(e => e.AtWCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("AtW_CzasModyfikacji");
            entity.Property(e => e.AtWId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AtW_ID");
            entity.Property(e => e.AtWLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AtW_Lp");
            entity.Property(e => e.AtWOddZrdId)
                .HasDefaultValue(0)
                .HasColumnName("AtW_OddZrdID");

            entity.HasOne(d => d.AtWAtK).WithMany(p => p.AtrybutyWartoscis)
                .HasForeignKey(d => d.AtWAtKid)
                .HasConstraintName("FK_AtWPrimary");
        });

        modelBuilder.Entity<AtrybutyWizyty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Wizyty");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Wizyty");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZakupy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Zakupy");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_ATRYBUTY_Zakupy");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZamowieniaKlientum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_ZamowieniaKlienta");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_ZamowieniaKlienta");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZamowieniaRhandl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_ZamowieniaRHandl");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_ZamowieniaRHandl");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZamowieniaRmag>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_ZamowieniaRMag");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_ZamowieniaRMag");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZamowieniaZakupu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_ZamowieniaZakupu");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_ZamowieniaZakupu");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZapytaniaOfertowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_ZapytaniaOfertowe");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_ZapytaniaOfertowe");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZestawienium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATRYBUTY_Zestawienia");

            entity.HasIndex(e => new { e.AtrObityp, e.AtrObinumer }, "IX_Atrybuty_Zestawienia");

            entity.Property(e => e.AtrObifirma).HasColumnName("ATR_OBIFirma");
            entity.Property(e => e.AtrObilp).HasColumnName("ATR_OBILP");
            entity.Property(e => e.AtrObinumer).HasColumnName("ATR_OBINumer");
            entity.Property(e => e.AtrObisublp).HasColumnName("ATR_OBISUBLP");
            entity.Property(e => e.AtrObityp).HasColumnName("ATR_OBITYP");
        });

        modelBuilder.Entity<AtrybutyZrodla>(entity =>
        {
            entity.HasKey(e => e.AtzId).HasName("ATZ_Primary");

            entity.ToTable("AtrybutyZrodla", "CDN", tb => tb.HasTrigger("AtrybutyZrodla_DeleteHandler"));

            entity.HasIndex(e => new { e.AtzId, e.AtzPredefiniowane }, "ATZIDPredef").IsUnique();

            entity.HasIndex(e => e.AtzNazwa, "ATZNazwa");

            entity.HasIndex(e => new { e.AtzNazwa, e.AtzNazwaObDoc, e.AtzPredefiniowane }, "ATZNazwaPredef").IsUnique();

            entity.Property(e => e.AtzId).HasColumnName("ATZ_ID");
            entity.Property(e => e.AtzAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("ATZ_Aktywne");
            entity.Property(e => e.AtzNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATZ_Nazwa");
            entity.Property(e => e.AtzNazwaObDoc)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATZ_NazwaObDoc");
            entity.Property(e => e.AtzOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATZ_Opis");
            entity.Property(e => e.AtzPredefiniowane)
                .HasDefaultValue(0)
                .HasColumnName("ATZ_Predefiniowane");
            entity.Property(e => e.AtzSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATZ_SQL");
        });

        modelBuilder.Entity<AtrybutyZrodlaObiekty>(entity =>
        {
            entity.HasKey(e => new { e.AzoAtzid, e.AzoAtogidtyp, e.AzoAtoelement }).HasName("AZO_Primary");

            entity.ToTable("AtrybutyZrodlaObiekty", "CDN");

            entity.HasIndex(e => new { e.AzoAtogidtyp, e.AzoAtoelement }, "AZOObiekt");

            entity.HasIndex(e => e.AzoAtzid, "AZOZrodlo");

            entity.Property(e => e.AzoAtzid).HasColumnName("AZO_ATZID");
            entity.Property(e => e.AzoAtogidtyp).HasColumnName("AZO_ATOGIDTyp");
            entity.Property(e => e.AzoAtoelement).HasColumnName("AZO_ATOElement");

            entity.HasOne(d => d.AzoAtz).WithMany(p => p.AtrybutyZrodlaObiekties)
                .HasForeignKey(d => d.AzoAtzid)
                .HasConstraintName("FK_AZOZrodlo");
        });

        modelBuilder.Entity<AtstElem>(entity =>
        {
            entity.HasKey(e => new { e.AteDokumentId, e.AteDokumentLp }).HasName("ATE_Primary");

            entity.ToTable("AtstElem", "CDN");

            entity.Property(e => e.AteDokumentId).HasColumnName("ATE_DokumentID");
            entity.Property(e => e.AteDokumentLp).HasColumnName("ATE_DokumentLp");
            entity.Property(e => e.AteIlosc)
                .HasDefaultValue(0)
                .HasColumnName("ATE_Ilosc");
            entity.Property(e => e.AteMagazyn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATE_Magazyn");
            entity.Property(e => e.AteTowarKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATE_TowarKod");

            entity.HasOne(d => d.AteDokument).WithMany(p => p.AtstElems)
                .HasForeignKey(d => d.AteDokumentId)
                .HasConstraintName("FK_AtePrimary");
        });

        modelBuilder.Entity<AtstLog>(entity =>
        {
            entity.HasKey(e => e.AtlId).HasName("ATL_Primary");

            entity.ToTable("AtstLog", "CDN");

            entity.Property(e => e.AtlId).HasColumnName("ATL_ID");
            entity.Property(e => e.AtlBlad)
                .HasDefaultValue(0)
                .HasColumnName("ATL_Blad");
            entity.Property(e => e.AtlCzas)
                .HasDefaultValue(0)
                .HasColumnName("ATL_Czas");
            entity.Property(e => e.AtlData)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATL_Data");
            entity.Property(e => e.AtlDokumentNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATL_DokumentNumer");
            entity.Property(e => e.AtlDokumentTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ATL_DokumentTyp");
            entity.Property(e => e.AtlIloscDokumentow)
                .HasDefaultValue(0)
                .HasColumnName("ATL_IloscDokumentow");
            entity.Property(e => e.AtlIloscPozycji)
                .HasDefaultValue(0)
                .HasColumnName("ATL_IloscPozycji");
            entity.Property(e => e.AtlKomputer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATL_Komputer");
            entity.Property(e => e.AtlStatus)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATL_Status");
            entity.Property(e => e.AtlZagniezdzenie)
                .HasDefaultValue(0)
                .HasColumnName("ATL_Zagniezdzenie");
        });

        modelBuilder.Entity<AtstLogKrotki>(entity =>
        {
            entity.HasKey(e => e.AtlkId).HasName("ATLK_Primary");

            entity.ToTable("AtstLogKrotki", "CDN");

            entity.Property(e => e.AtlkId).HasColumnName("ATLK_Id");
            entity.Property(e => e.AtlkBlad)
                .HasDefaultValue((short)0)
                .HasColumnName("ATLK_Blad");
            entity.Property(e => e.AtlkCzas)
                .HasDefaultValue(0)
                .HasColumnName("ATLK_Czas");
            entity.Property(e => e.AtlkCzasWystawiania)
                .HasDefaultValue(0)
                .HasColumnName("ATLK_CzasWystawiania");
            entity.Property(e => e.AtlkData)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATLK_Data");
            entity.Property(e => e.AtlkTypDokumentZrodlo)
                .HasDefaultValue((short)0)
                .HasColumnName("ATLK_TypDokumentZrodlo");
            entity.Property(e => e.AtlkTypDokumentu)
                .HasDefaultValue((short)0)
                .HasColumnName("ATLK_TypDokumentu");
            entity.Property(e => e.AtlkTypOperacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("ATLK_TypOperacji");
        });

        modelBuilder.Entity<AtstNag>(entity =>
        {
            entity.HasKey(e => e.AtnDokumentId).HasName("ATN_Primary");

            entity.ToTable("AtstNag", "CDN", tb => tb.HasTrigger("AtstNag_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.AtnTestId, e.AtnDokumentLp }, "AtNTestID").IsUnique();

            entity.Property(e => e.AtnDokumentId).HasColumnName("ATN_DokumentID");
            entity.Property(e => e.AtnAkcja)
                .HasDefaultValue((short)0)
                .HasColumnName("ATN_Akcja");
            entity.Property(e => e.AtnAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATN_Akronim");
            entity.Property(e => e.AtnDokBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("ATN_DokBufor");
            entity.Property(e => e.AtnDokKsiNumer)
                .HasDefaultValue(0)
                .HasColumnName("ATN_DokKsiNumer");
            entity.Property(e => e.AtnDokKsiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ATN_DokKsiTyp");
            entity.Property(e => e.AtnDokSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATN_DokSeria");
            entity.Property(e => e.AtnDokumentLp)
                .HasDefaultValue(0)
                .HasColumnName("ATN_DokumentLp");
            entity.Property(e => e.AtnDokumentTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ATN_DokumentTyp");
            entity.Property(e => e.AtnDziennikKsi)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATN_DziennikKsi");
            entity.Property(e => e.AtnMagazyn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATN_Magazyn");
            entity.Property(e => e.AtnRejestrVat)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATN_RejestrVat");
            entity.Property(e => e.AtnSchematKsiNumer)
                .HasDefaultValue(0)
                .HasColumnName("ATN_SchematKsiNumer");
            entity.Property(e => e.AtnSchematKsiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ATN_SchematKsiTyp");
            entity.Property(e => e.AtnTestId).HasColumnName("ATN_TestID");
            entity.Property(e => e.AtnTypGenerowanegoDok)
                .HasDefaultValue((short)0)
                .HasColumnName("ATN_TypGenerowanegoDok");
            entity.Property(e => e.AtnZanNumer)
                .HasDefaultValue(0)
                .HasColumnName("ATN_ZanNumer");

            entity.HasOne(d => d.AtnTest).WithMany(p => p.AtstNags)
                .HasForeignKey(d => d.AtnTestId)
                .HasConstraintName("FK_AtNTestID");
        });

        modelBuilder.Entity<AtstTesty>(entity =>
        {
            entity.HasKey(e => e.AttTestId).HasName("ATT_Primary");

            entity.ToTable("AtstTesty", "CDN");

            entity.HasIndex(e => e.AttNazwaTestu, "AttNazwaTestu").IsUnique();

            entity.Property(e => e.AttTestId).HasColumnName("ATT_TestID");
            entity.Property(e => e.AttAkcjaPoZakonczeniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("ATT_AkcjaPoZakonczeniu");
            entity.Property(e => e.AttNazwaTestu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATT_NazwaTestu");
            entity.Property(e => e.AttOpoznienieElem)
                .HasDefaultValue(0)
                .HasColumnName("ATT_OpoznienieElem");
            entity.Property(e => e.AttOpoznienieNag)
                .HasDefaultValue(0)
                .HasColumnName("ATT_OpoznienieNag");
            entity.Property(e => e.AttPlikLog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ATT_PlikLog");
        });

        modelBuilder.Entity<Banki>(entity =>
        {
            entity.HasKey(e => e.BnkGidnumer).HasName("Bnk_Primary");

            entity.ToTable("Banki", "CDN", tb =>
                {
                    tb.HasTrigger("BankiAlias2_DeleteHandler");
                    tb.HasTrigger("BankiAlias3_DeleteHandler");
                    tb.HasTrigger("BankiAlias_DeleteHandler");
                    tb.HasTrigger("Banki_DeleteHandler");
                    tb.HasTrigger("Banki_HistoriaZmian");
                });

            entity.HasIndex(e => e.BnkBnDid, "BnkBnd");

            entity.HasIndex(e => e.BnkKod, "BnkKod").IsUnique();

            entity.HasIndex(e => new { e.BnkGidtyp, e.BnkMiasto, e.BnkGidnumer }, "BnkMiasto").IsUnique();

            entity.HasIndex(e => e.BnkNumer, "BnkNumer").IsUnique();

            entity.Property(e => e.BnkGidnumer).HasColumnName("Bnk_GIDNumer");
            entity.Property(e => e.BnkAktywny)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_Aktywny");
            entity.Property(e => e.BnkBnDid)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_BnDId");
            entity.Property(e => e.BnkCdcclientId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_CDCClientId");
            entity.Property(e => e.BnkCdcimieNazwisko)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_CDCImieNazwisko");
            entity.Property(e => e.BnkCdckontakt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_CDCKontakt");
            entity.Property(e => e.BnkCdcoplata)
                .HasDefaultValue((byte)0)
                .HasColumnName("Bnk_CDCOplata");
            entity.Property(e => e.BnkCdcsecretKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_CDCSecretKey");
            entity.Property(e => e.BnkCdcsslcert)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_CDCSSLCert");
            entity.Property(e => e.BnkCzasRealizacji)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_CzasRealizacji");
            entity.Property(e => e.BnkFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Fax");
            entity.Property(e => e.BnkFbnid)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_FBNId");
            entity.Property(e => e.BnkFbnimpId)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_FBNImpId");
            entity.Property(e => e.BnkFormat)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_Format");
            entity.Property(e => e.BnkGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_GIDFirma");
            entity.Property(e => e.BnkGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_GIDLp");
            entity.Property(e => e.BnkGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_GIDTyp");
            entity.Property(e => e.BnkGmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Gmina");
            entity.Property(e => e.BnkKlientBre)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_KlientBRE");
            entity.Property(e => e.BnkKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Kod");
            entity.Property(e => e.BnkKodKraju)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_KodKraju");
            entity.Property(e => e.BnkKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_KodP");
            entity.Property(e => e.BnkKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Konto");
            entity.Property(e => e.BnkKraj)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Kraj");
            entity.Property(e => e.BnkLastModC)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_LastModC");
            entity.Property(e => e.BnkLastModL)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_LastModL");
            entity.Property(e => e.BnkLastModO)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_LastModO");
            entity.Property(e => e.BnkMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Miasto");
            entity.Property(e => e.BnkModem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Modem");
            entity.Property(e => e.BnkNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Nazwa");
            entity.Property(e => e.BnkNrb)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_NRB");
            entity.Property(e => e.BnkNumer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Numer");
            entity.Property(e => e.BnkOddzialBre)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_OddzialBRE");
            entity.Property(e => e.BnkOpeMfirma)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_OpeMFirma");
            entity.Property(e => e.BnkOpeMlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_OpeMLp");
            entity.Property(e => e.BnkOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_OpeMNumer");
            entity.Property(e => e.BnkOpeMtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_OpeMTyp");
            entity.Property(e => e.BnkOpeZfirma)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_OpeZFirma");
            entity.Property(e => e.BnkOpeZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_OpeZLp");
            entity.Property(e => e.BnkOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_OpeZNumer");
            entity.Property(e => e.BnkOpeZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Bnk_OpeZTyp");
            entity.Property(e => e.BnkPkobp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Bnk_PKOBP");
            entity.Property(e => e.BnkPoczta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Poczta");
            entity.Property(e => e.BnkPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Powiat");
            entity.Property(e => e.BnkSwift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Swift");
            entity.Property(e => e.BnkTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Telefon");
            entity.Property(e => e.BnkTszapisu)
                .HasDefaultValue(0)
                .HasColumnName("Bnk_TSZapisu");
            entity.Property(e => e.BnkUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Ulica");
            entity.Property(e => e.BnkUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Url");
            entity.Property(e => e.BnkWojewodztwo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bnk_Wojewodztwo");
            entity.Property(e => e.BnkWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Bnk_Wsk");
        });

        modelBuilder.Entity<BankiDefinicje>(entity =>
        {
            entity.HasKey(e => e.BnDId).HasName("BnD_Primary");

            entity.ToTable("BankiDefinicje", "CDN");

            entity.HasIndex(e => e.BnDKod, "BnDKod").IsUnique();

            entity.Property(e => e.BnDId).HasColumnName("BnD_Id");
            entity.Property(e => e.BnDArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("BnD_Archiwalny");
            entity.Property(e => e.BnDKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BnD_Kod");
            entity.Property(e => e.BnDNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BnD_Nazwa");
        });

        modelBuilder.Entity<BankiDefinicjeOperacje>(entity =>
        {
            entity.HasKey(e => e.BdoId).HasName("BDO_Primary");

            entity.ToTable("BankiDefinicjeOperacje", "CDN");

            entity.HasIndex(e => e.BdoBankDefId, "BDOBankDefId");

            entity.HasIndex(e => e.BdoKaonumer, "BDOKAONumer");

            entity.Property(e => e.BdoId).HasColumnName("BDO_Id");
            entity.Property(e => e.BdoBankDefId)
                .HasDefaultValue(0)
                .HasColumnName("BDO_BankDefId");
            entity.Property(e => e.BdoFiltrSql)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDO_FiltrSQL");
            entity.Property(e => e.BdoFiltrSym)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDO_FiltrSym");
            entity.Property(e => e.BdoFirmaId)
                .HasDefaultValue(0)
                .HasColumnName("BDO_FirmaId");
            entity.Property(e => e.BdoKaonumer)
                .HasDefaultValue(0)
                .HasColumnName("BDO_KAONumer");
            entity.Property(e => e.BdoLp)
                .HasDefaultValue(0)
                .HasColumnName("BDO_Lp");
            entity.Property(e => e.BdoNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDO_Nazwa");

            entity.HasOne(d => d.BdoBankDef).WithMany(p => p.BankiDefinicjeOperacjes)
                .HasForeignKey(d => d.BdoBankDefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BDOBankDefId");
        });

        modelBuilder.Entity<BankiFormKryt>(entity =>
        {
            entity.HasKey(e => e.BfkId).HasName("BFK_Primary");

            entity.ToTable("BankiFormKryt", "CDN");

            entity.HasIndex(e => e.BfkBankDefId, "FBKBankDef");

            entity.Property(e => e.BfkId).HasColumnName("BFK_ID");
            entity.Property(e => e.BfkBankDefId)
                .HasDefaultValue(0)
                .HasColumnName("BFK_BankDefID");
            entity.Property(e => e.BfkKodOperacji)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BFK_KodOperacji");
            entity.Property(e => e.BfkOperator)
                .HasDefaultValue((byte)0)
                .HasColumnName("BFK_Operator");
            entity.Property(e => e.BfkOperatorLog)
                .HasDefaultValue((byte)0)
                .HasColumnName("BFK_OperatorLog");
            entity.Property(e => e.BfkTypOperacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("BFK_TypOperacji");
        });

        modelBuilder.Entity<BilansOtwarciaElem>(entity =>
        {
            entity.HasKey(e => new { e.BoeGidtyp, e.BoeGidnumer, e.BoeGidlp }).HasName("BOE_Primary");

            entity.ToTable("BilansOtwarciaElem", "CDN", tb => tb.HasTrigger("BilansOtwarciaElem_DeleteHandler"));

            entity.Property(e => e.BoeGidtyp).HasColumnName("BOE_GIDTyp");
            entity.Property(e => e.BoeGidnumer).HasColumnName("BOE_GIDNumer");
            entity.Property(e => e.BoeGidlp).HasColumnName("BOE_GIDLp");
            entity.Property(e => e.BoeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("BOE_GIDFirma");
            entity.Property(e => e.BoeKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("BOE_KntNumer");
            entity.Property(e => e.BoeKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BOE_KntTyp");
            entity.Property(e => e.BoeKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BOE_Konto");
            entity.Property(e => e.BoeKwotaBocredit)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaBOCredit");
            entity.Property(e => e.BoeKwotaBodebet)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaBODebet");
            entity.Property(e => e.BoeKwotaCredit)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaCredit");
            entity.Property(e => e.BoeKwotaDebet)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOE_KwotaDebet");
            entity.Property(e => e.BoeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BOE_Opis");
            entity.Property(e => e.BoeStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("BOE_Status");

            entity.HasOne(d => d.BoeGidnumerNavigation).WithMany(p => p.BilansOtwarciaElems)
                .HasForeignKey(d => d.BoeGidnumer)
                .HasConstraintName("FK_BOEPrimary");
        });

        modelBuilder.Entity<BilansOtwarciaNag>(entity =>
        {
            entity.HasKey(e => e.BonGidnumer).HasName("BON_Primary");

            entity.ToTable("BilansOtwarciaNag", "CDN", tb => tb.HasTrigger("BilansOtwarciaNag_DeleteHandler"));

            entity.HasIndex(e => new { e.BonOkrPoczatek, e.BonDataWprow, e.BonTyp, e.BonNumer }, "BONData").IsUnique();

            entity.HasIndex(e => new { e.BonOkrPoczatek, e.BonTyp, e.BonNumer }, "BONNumer").IsUnique();

            entity.Property(e => e.BonGidnumer).HasColumnName("BON_GIDNumer");
            entity.Property(e => e.BonCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BON_CechaOpis");
            entity.Property(e => e.BonDataWprow)
                .HasDefaultValue(0)
                .HasColumnName("BON_DataWprow");
            entity.Property(e => e.BonGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("BON_GIDFirma");
            entity.Property(e => e.BonGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_GIDLp");
            entity.Property(e => e.BonGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_GIDTyp");
            entity.Property(e => e.BonNumer)
                .HasDefaultValue(0)
                .HasColumnName("BON_Numer");
            entity.Property(e => e.BonOkrPoczatek)
                .HasDefaultValue(0)
                .HasColumnName("BON_OkrPoczatek");
            entity.Property(e => e.BonOkrSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BON_OkrSymbol");
            entity.Property(e => e.BonOpeafirma)
                .HasDefaultValue(0)
                .HasColumnName("BON_OPEAFirma");
            entity.Property(e => e.BonOpealp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_OPEALp");
            entity.Property(e => e.BonOpeanumer)
                .HasDefaultValue(0)
                .HasColumnName("BON_OPEANumer");
            entity.Property(e => e.BonOpeatyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_OPEATyp");
            entity.Property(e => e.BonOpewfirma)
                .HasDefaultValue(0)
                .HasColumnName("BON_OPEWFirma");
            entity.Property(e => e.BonOpewlp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_OPEWLp");
            entity.Property(e => e.BonOpewnumer)
                .HasDefaultValue(0)
                .HasColumnName("BON_OPEWNumer");
            entity.Property(e => e.BonOpewtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_OPEWTyp");
            entity.Property(e => e.BonOpezfirma)
                .HasDefaultValue(0)
                .HasColumnName("BON_OPEZFirma");
            entity.Property(e => e.BonOpezlp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_OPEZLp");
            entity.Property(e => e.BonOpeznumer)
                .HasDefaultValue(0)
                .HasColumnName("BON_OPEZNumer");
            entity.Property(e => e.BonOpeztyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BON_OPEZTyp");
            entity.Property(e => e.BonOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BON_Opis");
            entity.Property(e => e.BonRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("BON_RokMiesiac");
            entity.Property(e => e.BonStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("BON_Status");
            entity.Property(e => e.BonTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("BON_Typ");
            entity.Property(e => e.BonZapisyZbufora)
                .HasDefaultValue((byte)0)
                .HasColumnName("BON_ZapisyZBufora");
        });

        modelBuilder.Entity<BilansOtwarciaSelem>(entity =>
        {
            entity.HasKey(e => new { e.BosGidtyp, e.BosGidnumer, e.BosGidlp, e.BosSubGidlp }).HasName("BOS_Primary");

            entity.ToTable("BilansOtwarciaSElem", "CDN", tb => tb.HasTrigger("BilansOtwarciaSElem_DeleteHandler"));

            entity.HasIndex(e => new { e.BosDzktyp, e.BosDzknumer, e.BosDzklp }, "BOSDZK");

            entity.HasIndex(e => new { e.BosTrptyp, e.BosTrpnumer, e.BosTrplp }, "BOSTRP");

            entity.Property(e => e.BosGidtyp).HasColumnName("BOS_GIDTyp");
            entity.Property(e => e.BosGidnumer).HasColumnName("BOS_GIDNumer");
            entity.Property(e => e.BosGidlp).HasColumnName("BOS_GIDLp");
            entity.Property(e => e.BosSubGidlp).HasColumnName("BOS_SubGIDLp");
            entity.Property(e => e.BosData)
                .HasDefaultValue(0)
                .HasColumnName("BOS_Data");
            entity.Property(e => e.BosDc)
                .HasDefaultValue((byte)0)
                .HasColumnName("BOS_DC");
            entity.Property(e => e.BosDzkfirma)
                .HasDefaultValue(0)
                .HasColumnName("BOS_DZKFirma");
            entity.Property(e => e.BosDzklp)
                .HasDefaultValue((short)0)
                .HasColumnName("BOS_DZKLp");
            entity.Property(e => e.BosDzknumer)
                .HasDefaultValue(0)
                .HasColumnName("BOS_DZKNumer");
            entity.Property(e => e.BosDzktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BOS_DZKTyp");
            entity.Property(e => e.BosGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("BOS_GIDFirma");
            entity.Property(e => e.BosKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("BOS_KursL");
            entity.Property(e => e.BosKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BOS_KursM");
            entity.Property(e => e.BosKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOS_Kwota");
            entity.Property(e => e.BosKwotaBo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOS_KwotaBO");
            entity.Property(e => e.BosKwotaBowal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOS_KwotaBOWal");
            entity.Property(e => e.BosKwotaWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BOS_KwotaWal");
            entity.Property(e => e.BosNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("BOS_NrKursu");
            entity.Property(e => e.BosNumerDokumentu)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BOS_NumerDokumentu");
            entity.Property(e => e.BosTermin)
                .HasDefaultValue(0)
                .HasColumnName("BOS_Termin");
            entity.Property(e => e.BosTrpfirma)
                .HasDefaultValue(0)
                .HasColumnName("BOS_TRPFirma");
            entity.Property(e => e.BosTrplp)
                .HasDefaultValue((short)0)
                .HasColumnName("BOS_TRPLp");
            entity.Property(e => e.BosTrpnumer)
                .HasDefaultValue(0)
                .HasColumnName("BOS_TRPNumer");
            entity.Property(e => e.BosTrptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BOS_TRPTyp");
            entity.Property(e => e.BosWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BOS_Waluta");

            entity.HasOne(d => d.BilansOtwarciaElem).WithMany(p => p.BilansOtwarciaSelems)
                .HasForeignKey(d => new { d.BosGidtyp, d.BosGidnumer, d.BosGidlp })
                .HasConstraintName("FK_BOSPrimary");
        });

        modelBuilder.Entity<BilingTel>(entity =>
        {
            entity.HasKey(e => e.BtelId).HasName("BTel_Primary");

            entity.ToTable("BilingTel", "CDN");

            entity.Property(e => e.BtelId).HasColumnName("BTel_ID");
            entity.Property(e => e.BtelDataWczytania)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("BTel_DataWczytania");
            entity.Property(e => e.BtelNazwaPliku)
                .HasMaxLength(260)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BTel_NazwaPliku");
            entity.Property(e => e.BtelOpTelOrgId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BTel_OpTelOrgID");

            entity.HasOne(d => d.BtelOpTelOrg).WithMany(p => p.BilingTels)
                .HasForeignKey(d => d.BtelOpTelOrgId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BTelOperator");
        });

        modelBuilder.Entity<BipointRaportDef>(entity =>
        {
            entity.HasKey(e => e.BrdId).HasName("BRD_Primary");

            entity.ToTable("BIPointRaportDef", "CDN");

            entity.Property(e => e.BrdId).HasColumnName("BRD_Id");
            entity.Property(e => e.BrdAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("BRD_Aktywny");
            entity.Property(e => e.BrdFormatkaId)
                .HasDefaultValue(0)
                .HasColumnName("BRD_FormatkaId");
            entity.Property(e => e.BrdKontekstId)
                .HasDefaultValue(0)
                .HasColumnName("BRD_KontekstId");
            entity.Property(e => e.BrdListaId)
                .HasDefaultValue(0)
                .HasColumnName("BRD_ListaId");
            entity.Property(e => e.BrdNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRD_Nazwa");
        });

        modelBuilder.Entity<BipointRaportElem>(entity =>
        {
            entity.HasKey(e => e.BreId).HasName("BRE_Primary");

            entity.ToTable("BIPointRaportElem", "CDN");

            entity.HasIndex(e => e.BreBrdid, "BREBIPointRaportDef");

            entity.HasIndex(e => new { e.BreRaportId, e.BreKontekstId, e.BreBrdid }, "BREBIPointRaportId");

            entity.Property(e => e.BreId).HasColumnName("BRE_Id");
            entity.Property(e => e.BreBrdid)
                .HasDefaultValue(0)
                .HasColumnName("BRE_BRDId");
            entity.Property(e => e.BreKontekst)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRE_Kontekst");
            entity.Property(e => e.BreKontekstId)
                .HasDefaultValue(0)
                .HasColumnName("BRE_KontekstId");
            entity.Property(e => e.BreLp)
                .HasDefaultValue((short)0)
                .HasColumnName("BRE_Lp");
            entity.Property(e => e.BreNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BRE_Nazwa");
            entity.Property(e => e.BreRaportId)
                .HasDefaultValue(0)
                .HasColumnName("BRE_RaportId");
            entity.Property(e => e.BreTstamp)
                .HasDefaultValue(0)
                .HasColumnName("BRE_TStamp");

            entity.HasOne(d => d.BreBrd).WithMany(p => p.BipointRaportElems)
                .HasForeignKey(d => d.BreBrdid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BREBIPointRaportDef");
        });

        modelBuilder.Entity<BipointRaportOpeCentra>(entity =>
        {
            entity.HasKey(e => e.BroId).HasName("BRO_Primary");

            entity.ToTable("BIPointRaportOpeCentra", "CDN", tb => tb.HasTrigger("BIPointRaportOpeCentra_InsertUpdateHandler"));

            entity.HasIndex(e => e.BroBrdid, "BROBIPointRaportDef");

            entity.Property(e => e.BroId).HasColumnName("BRO_Id");
            entity.Property(e => e.BroBrdid)
                .HasDefaultValue(0)
                .HasColumnName("BRO_BRDId");
            entity.Property(e => e.BroNumer)
                .HasDefaultValue(0)
                .HasColumnName("BRO_Numer");
            entity.Property(e => e.BroTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BRO_Typ");

            entity.HasOne(d => d.BroBrd).WithMany(p => p.BipointRaportOpeCentras)
                .HasForeignKey(d => d.BroBrdid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BROBIPointRaportDef");
        });

        modelBuilder.Entity<Bokstatystyki>(entity =>
        {
            entity.HasKey(e => e.BksId).HasName("BKS_Primary");

            entity.ToTable("BOKStatystyki", "CDN");

            entity.Property(e => e.BksId).HasColumnName("BKS_Id");
            entity.Property(e => e.BksData)
                .HasColumnType("datetime")
                .HasColumnName("BKS_Data");
            entity.Property(e => e.BksKntNumer).HasColumnName("BKS_KntNumer");
            entity.Property(e => e.BksOcena).HasColumnName("BKS_Ocena");
            entity.Property(e => e.BksPrawa).HasColumnName("BKS_Prawa");
            entity.Property(e => e.BksStatus).HasColumnName("BKS_Status");
        });

        modelBuilder.Entity<Bony>(entity =>
        {
            entity.HasKey(e => e.BbonId).HasName("Bbon_Primary");

            entity.ToTable("Bony", "CDN", tb =>
                {
                    tb.HasTrigger("Bony_DeleteHandler");
                    tb.HasTrigger("Bony_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.BbonNumer, "BbonNumer").IsUnique();

            entity.HasIndex(e => e.BbonOpeBnumer, "BbonOpeB");

            entity.HasIndex(e => e.BbonOpeMnumer, "BbonOpeM");

            entity.HasIndex(e => e.BbonOpeWnumer, "BbonOpeW");

            entity.HasIndex(e => e.BbonOpeWydalNumer, "BbonOpeWydal");

            entity.HasIndex(e => e.BbonOpeZnumer, "BbonOpeZ");

            entity.HasIndex(e => e.BbonPrzyczynaBlokady, "BbonPrzyczynaBlokady");

            entity.HasIndex(e => e.BbonRboId, "BbonRBoId");

            entity.Property(e => e.BbonId).HasColumnName("Bbon_Id");
            entity.Property(e => e.BbonDataBlokady)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_DataBlokady");
            entity.Property(e => e.BbonDataWydania)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_DataWydania");
            entity.Property(e => e.BbonDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_DataWystawienia");
            entity.Property(e => e.BbonDataZatwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_DataZatwierdzenia");
            entity.Property(e => e.BbonKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Bbon_Kwota");
            entity.Property(e => e.BbonKwotaZrealizowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Bbon_KwotaZrealizowana");
            entity.Property(e => e.BbonNumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bbon_Numer");
            entity.Property(e => e.BbonOpeBnumer)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_OpeBNumer");
            entity.Property(e => e.BbonOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_OpeMNumer");
            entity.Property(e => e.BbonOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_OpeWNumer");
            entity.Property(e => e.BbonOpeWydalNumer)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_OpeWydalNumer");
            entity.Property(e => e.BbonOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_OpeZNumer");
            entity.Property(e => e.BbonOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Bbon_Opis");
            entity.Property(e => e.BbonPrzyczynaBlokady)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_PrzyczynaBlokady");
            entity.Property(e => e.BbonRboId)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_RBoId");
            entity.Property(e => e.BbonStan)
                .HasDefaultValue((short)0)
                .HasColumnName("Bbon_Stan");
            entity.Property(e => e.BbonTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_TerminDo");
            entity.Property(e => e.BbonTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("Bbon_TerminOd");
        });

        modelBuilder.Entity<BstDokumenty>(entity =>
        {
            entity.HasKey(e => new { e.BsDBsNid, e.BsDDokTyp, e.BsDDokNumer }).HasName("BsD_Primary");

            entity.ToTable("BstDokumenty", "CDN", tb => tb.HasTrigger("BstDokumenty_InsertUpdateHandler"));

            entity.Property(e => e.BsDBsNid).HasColumnName("BsD_BsNID");
            entity.Property(e => e.BsDDokTyp).HasColumnName("BsD_DokTyp");
            entity.Property(e => e.BsDDokNumer).HasColumnName("BsD_DokNumer");

            entity.HasOne(d => d.BsDBsN).WithMany(p => p.BstDokumenties)
                .HasForeignKey(d => d.BsDBsNid)
                .HasConstraintName("FK_BsDBstNag");
        });

        modelBuilder.Entity<BstElem>(entity =>
        {
            entity.HasKey(e => new { e.BsEBsNid, e.BsETwrNumer }).HasName("BsE_Primary");

            entity.ToTable("BstElem", "CDN", tb =>
                {
                    tb.HasTrigger("BstElem_DeleteHandler");
                    tb.HasTrigger("BstElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.BsETwrNumer, "BsETwrNumer");

            entity.Property(e => e.BsEBsNid).HasColumnName("BsE_BsNID");
            entity.Property(e => e.BsETwrNumer).HasColumnName("BsE_TwrNumer");
            entity.Property(e => e.BsEDoZamowienia)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("BsE_DoZamowienia");
            entity.Property(e => e.BsEFlaga)
                .HasDefaultValue((short)0)
                .HasColumnName("BsE_Flaga");

            entity.HasOne(d => d.BsETwrNumerNavigation).WithMany(p => p.BstElems)
                .HasForeignKey(d => d.BsETwrNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BsETwrNumer");
        });

        modelBuilder.Entity<BstMagazyny>(entity =>
        {
            entity.HasKey(e => new { e.BsMBsNid, e.BsMMagTyp, e.BsMMagNumer }).HasName("BsM_Primary");

            entity.ToTable("BstMagazyny", "CDN", tb => tb.HasTrigger("BstMagazyny_InsertUpdateHandler"));

            entity.HasIndex(e => e.BsMBsNid, "BsMBstNag");

            entity.Property(e => e.BsMBsNid).HasColumnName("BsM_BsNID");
            entity.Property(e => e.BsMMagTyp).HasColumnName("BsM_MagTyp");
            entity.Property(e => e.BsMMagNumer).HasColumnName("BsM_MagNumer");

            entity.HasOne(d => d.BsMBsN).WithMany(p => p.BstMagazynies)
                .HasForeignKey(d => d.BsMBsNid)
                .HasConstraintName("FK_BsMBstNag");
        });

        modelBuilder.Entity<BstNag>(entity =>
        {
            entity.HasKey(e => e.BsNId).HasName("BsN_Primary");

            entity.ToTable("BstNag", "CDN", tb =>
                {
                    tb.HasTrigger("BstNag_DeleteHandler");
                    tb.HasTrigger("BstNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.BsNKntNumer, "BsNKntNumer");

            entity.HasIndex(e => new { e.BsNRokMiesiac, e.BsNRok, e.BsNMiesiac, e.BsNSeria, e.BsNNumer }, "BsNNumerDok").IsUnique();

            entity.HasIndex(e => e.BsNOpeWnumer, "BsNOperator");

            entity.HasIndex(e => new { e.BsNTwGtyp, e.BsNTwGnumer, e.BsNTwGgrotyp, e.BsNTwGgronumer }, "BsNTwGNumer");

            entity.Property(e => e.BsNId).HasColumnName("BsN_ID");
            entity.Property(e => e.BsNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("BsN_Aktywny");
            entity.Property(e => e.BsNDataDo)
                .HasDefaultValue(0)
                .HasColumnName("BsN_DataDo");
            entity.Property(e => e.BsNDataDst)
                .HasDefaultValue(0)
                .HasColumnName("BsN_DataDst");
            entity.Property(e => e.BsNDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("BsN_DataUtworzenia");
            entity.Property(e => e.BsNFrMnumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_FrMNumer");
            entity.Property(e => e.BsNFrsId)
                .HasDefaultValue(0)
                .HasColumnName("BsN_FrsId");
            entity.Property(e => e.BsNHarmonogram)
                .HasDefaultValue((byte)0)
                .HasColumnName("BsN_Harmonogram");
            entity.Property(e => e.BsNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_KntNumer");
            entity.Property(e => e.BsNMagNnumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_MagNNumer");
            entity.Property(e => e.BsNMagNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BsN_MagNTyp");
            entity.Property(e => e.BsNMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("BsN_Miesiac");
            entity.Property(e => e.BsNNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BsN_Nazwa");
            entity.Property(e => e.BsNNumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_Numer");
            entity.Property(e => e.BsNOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_OpeMNumer");
            entity.Property(e => e.BsNOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_OpeWNumer");
            entity.Property(e => e.BsNOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_OpeZNumer");
            entity.Property(e => e.BsNOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BsN_Opis");
            entity.Property(e => e.BsNOptymalizacjaZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("BsN_OptymalizacjaZam");
            entity.Property(e => e.BsNPominPowiazane)
                .HasDefaultValue((byte)0)
                .HasColumnName("BsN_PominPowiazane");
            entity.Property(e => e.BsNRodzajNormatywu)
                .HasDefaultValue((byte)1)
                .HasColumnName("BsN_RodzajNormatywu");
            entity.Property(e => e.BsNRok)
                .HasDefaultValue((short)0)
                .HasColumnName("BsN_Rok");
            entity.Property(e => e.BsNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("BsN_RokMiesiac");
            entity.Property(e => e.BsNSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BsN_Seria");
            entity.Property(e => e.BsNStan)
                .HasDefaultValue((short)0)
                .HasColumnName("BsN_Stan");
            entity.Property(e => e.BsNTsprzeliczenia)
                .HasDefaultValue(0)
                .HasColumnName("BsN_TSPrzeliczenia");
            entity.Property(e => e.BsNTwGgronumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_TwGGRONumer");
            entity.Property(e => e.BsNTwGgrotyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BsN_TwGGROTyp");
            entity.Property(e => e.BsNTwGnumer)
                .HasDefaultValue(0)
                .HasColumnName("BsN_TwGNumer");
            entity.Property(e => e.BsNTwGtyp)
                .HasDefaultValue((short)-16)
                .HasColumnName("BsN_TwGTyp");
            entity.Property(e => e.BsNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BsN_URL");
            entity.Property(e => e.BsNZakresNormatywu)
                .HasDefaultValue((byte)1)
                .HasColumnName("BsN_ZakresNormatywu");

            entity.HasOne(d => d.BsNOpeWnumerNavigation).WithMany(p => p.BstNags)
                .HasForeignKey(d => d.BsNOpeWnumer)
                .HasConstraintName("FK_BsNOperator");
        });

        modelBuilder.Entity<BstSelem>(entity =>
        {
            entity.HasKey(e => new { e.BsSBsNid, e.BsSTwrNumer, e.BsSRodzaj }).HasName("BsS_Primary");

            entity.ToTable("BstSElem", "CDN");

            entity.HasIndex(e => new { e.BsSBsNid, e.BsSRodzaj }, "BsSSkladniki");

            entity.Property(e => e.BsSBsNid).HasColumnName("BsS_BsNID");
            entity.Property(e => e.BsSTwrNumer).HasColumnName("BsS_TwrNumer");
            entity.Property(e => e.BsSRodzaj).HasColumnName("BsS_Rodzaj");
            entity.Property(e => e.BsSIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("BsS_Ilosc");

            entity.HasOne(d => d.BstElem).WithMany(p => p.BstSelems)
                .HasForeignKey(d => new { d.BsSBsNid, d.BsSTwrNumer })
                .HasConstraintName("FK_BsSPrimary");
        });

        modelBuilder.Entity<BstSkladniki>(entity =>
        {
            entity.HasKey(e => new { e.BsKBsNid, e.BsKRodzaj }).HasName("BsK_Primary");

            entity.ToTable("BstSkladniki", "CDN", tb => tb.HasTrigger("BstSkladniki_Insert_Trigger"));

            entity.Property(e => e.BsKBsNid).HasColumnName("BsK_BsNID");
            entity.Property(e => e.BsKRodzaj).HasColumnName("BsK_Rodzaj");
            entity.Property(e => e.BsKKod)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BsK_Kod");
            entity.Property(e => e.BsKOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BsK_Opis");
            entity.Property(e => e.BsKPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("BsK_Pozycja");
            entity.Property(e => e.BsKSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BsK_SQL");
            entity.Property(e => e.BsKUwzgledniajWbilansie)
                .HasDefaultValue((byte)1)
                .HasColumnName("BsK_UwzgledniajWBilansie");
            entity.Property(e => e.BsKWplywaNaSaldo)
                .HasDefaultValue((byte)1)
                .HasColumnName("BsK_WplywaNaSaldo");

            entity.HasOne(d => d.BsKBsN).WithMany(p => p.BstSkladnikis)
                .HasForeignKey(d => d.BsKBsNid)
                .HasConstraintName("FK_BsKPrimary");
        });

        modelBuilder.Entity<BstSkladnikiDef>(entity =>
        {
            entity.HasKey(e => e.BsfId).HasName("BSF_Primary");

            entity.ToTable("BstSkladnikiDef", "CDN");

            entity.HasIndex(e => e.BsfKod, "BSFKod");

            entity.HasIndex(e => e.BsfNazwa, "BSFNazwa").IsUnique();

            entity.Property(e => e.BsfId).HasColumnName("BSF_ID");
            entity.Property(e => e.BsfKod)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BSF_Kod");
            entity.Property(e => e.BsfNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BSF_Nazwa");
            entity.Property(e => e.BsfSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BSF_SQL");
            entity.Property(e => e.BsfWarunek)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BSF_Warunek");
            entity.Property(e => e.BsfWplywaNaSaldo)
                .HasDefaultValue((byte)1)
                .HasColumnName("BSF_WplywaNaSaldo");
        });

        modelBuilder.Entity<BudzetAtrybuty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BudzetAtrybuty", "CDN");

            entity.Property(e => e.PomatrAktywny)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_Aktywny");
            entity.Property(e => e.PomatrAtkId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POMATR_AtkID");
            entity.Property(e => e.PomatrObjLp)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_ObjLp");
            entity.Property(e => e.PomatrObjNumer)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_ObjNumer");
            entity.Property(e => e.PomatrObjOrgId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POMATR_ObjOrgID");
            entity.Property(e => e.PomatrObjSubLp)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_ObjSubLp");
            entity.Property(e => e.PomatrObjTyp)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_ObjTyp");
            entity.Property(e => e.PomatrTypWymiaru)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_TypWymiaru");
            entity.Property(e => e.PomatrWartosc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POMATR_Wartosc");
            entity.Property(e => e.PomatrWsadInsertId)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_WsadInsertID");
            entity.Property(e => e.PomatrWymFirma)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_WymFirma");
            entity.Property(e => e.PomatrWymTyp)
                .HasDefaultValue(0)
                .HasColumnName("POMATR_WymTyp");
        });

        modelBuilder.Entity<BudzetDefinicje>(entity =>
        {
            entity.HasKey(e => new { e.BddGidTyp, e.BddGidNumer, e.BddGidLp }).HasName("BDD_Primary");

            entity.ToTable("BudzetDefinicje", "CDN");

            entity.Property(e => e.BddGidTyp).HasColumnName("BDD_GidTyp");
            entity.Property(e => e.BddGidNumer).HasColumnName("BDD_GidNumer");
            entity.Property(e => e.BddGidLp).HasColumnName("BDD_GidLp");
            entity.Property(e => e.BddDefinicja)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("BDD_Definicja");
            entity.Property(e => e.BddGidFirma)
                .HasDefaultValue(0)
                .HasColumnName("BDD_GidFirma");
        });

        modelBuilder.Entity<BudzetNag>(entity =>
        {
            entity.HasKey(e => new { e.BdnGidTyp, e.BdnGidNumer, e.BdnGroTyp, e.BdnGroNumer }).HasName("BDN_Primary");

            entity.ToTable("BudzetNag", "CDN");

            entity.HasIndex(e => new { e.BdnGidTyp, e.BdnGidNumer }, "BDNGID").IsUnique();

            entity.HasIndex(e => e.BdnId, "BDNID").IsUnique();

            entity.HasIndex(e => e.BdnRootNumer, "BDNRoot");

            entity.Property(e => e.BdnGidTyp).HasColumnName("BDN_GidTyp");
            entity.Property(e => e.BdnGidNumer).HasColumnName("BDN_GidNumer");
            entity.Property(e => e.BdnGroTyp).HasColumnName("BDN_GroTyp");
            entity.Property(e => e.BdnGroNumer).HasColumnName("BDN_GroNumer");
            entity.Property(e => e.BdnAktywny)
                .HasDefaultValue(1)
                .HasColumnName("BDN_Aktywny");
            entity.Property(e => e.BdnFrmFirma)
                .HasDefaultValue(0)
                .HasColumnName("BDN_FrmFirma");
            entity.Property(e => e.BdnFrmLp)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_FrmLp");
            entity.Property(e => e.BdnFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("BDN_FrmNumer");
            entity.Property(e => e.BdnFrmTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_FrmTyp");
            entity.Property(e => e.BdnGidFirma)
                .HasDefaultValue(0)
                .HasColumnName("BDN_GidFirma");
            entity.Property(e => e.BdnGidLp)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_GidLp");
            entity.Property(e => e.BdnGroLp)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_GroLp");
            entity.Property(e => e.BdnGrofirma)
                .HasDefaultValue(0)
                .HasColumnName("BDN_Grofirma");
            entity.Property(e => e.BdnHierarchiaCzasu)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_HierarchiaCzasu");
            entity.Property(e => e.BdnId).HasColumnName("BDN_ID");
            entity.Property(e => e.BdnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_Nazwa");
            entity.Property(e => e.BdnOlapbaza)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_OLAPBaza");
            entity.Property(e => e.BdnOlapkostka)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_OLAPKostka");
            entity.Property(e => e.BdnOlapserwer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_OLAPSerwer");
            entity.Property(e => e.BdnOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_Opis");
            entity.Property(e => e.BdnOutlookFolder)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_OutlookFolder");
            entity.Property(e => e.BdnRok)
                .HasDefaultValue(0)
                .HasColumnName("BDN_Rok");
            entity.Property(e => e.BdnRootFirma)
                .HasDefaultValue(0)
                .HasColumnName("BDN_RootFirma");
            entity.Property(e => e.BdnRootLp)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_RootLp");
            entity.Property(e => e.BdnRootNumer)
                .HasDefaultValue(0)
                .HasColumnName("BDN_RootNumer");
            entity.Property(e => e.BdnRootTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_RootTyp");
            entity.Property(e => e.BdnScenariuszId)
                .HasDefaultValue(0)
                .HasColumnName("BDN_ScenariuszID");
            entity.Property(e => e.BdnStan)
                .HasDefaultValue((short)0)
                .HasColumnName("BDN_Stan");
            entity.Property(e => e.BdnTstampEd)
                .HasDefaultValue(0)
                .HasColumnName("BDN_TStampEd");
            entity.Property(e => e.BdnTstampUtw)
                .HasDefaultValue(0)
                .HasColumnName("BDN_TStampUtw");
            entity.Property(e => e.BdnTstampZam)
                .HasDefaultValue(0)
                .HasColumnName("BDN_TStampZam");
            entity.Property(e => e.BdnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BDN_URL");
            entity.Property(e => e.BdnWsk)
                .HasDefaultValue(0)
                .HasColumnName("BDN_Wsk");
        });

        modelBuilder.Entity<BudzetOpisyAnalityczne>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BudzetOpisyAnalityczne", "CDN");

            entity.Property(e => e.PomWymAktywny)
                .HasDefaultValue((short)0)
                .HasColumnName("PomWym_Aktywny");
            entity.Property(e => e.PomWymAuditTime)
                .HasDefaultValue(0)
                .HasColumnName("PomWym_AuditTime");
            entity.Property(e => e.PomWymAuditUser)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PomWym_AuditUser");
            entity.Property(e => e.PomWymKierunek)
                .HasDefaultValue((short)0)
                .HasColumnName("PomWym_Kierunek");
            entity.Property(e => e.PomWymObjGidDokLp)
                .HasDefaultValue(0)
                .HasColumnName("PomWym_ObjGidDokLp");
            entity.Property(e => e.PomWymObjGidFirma)
                .HasDefaultValue(0)
                .HasColumnName("PomWym_ObjGidFirma");
            entity.Property(e => e.PomWymObjGidLp)
                .HasDefaultValue(0)
                .HasColumnName("PomWym_ObjGidLp");
            entity.Property(e => e.PomWymObjGidNumer)
                .HasDefaultValue(0)
                .HasColumnName("PomWym_ObjGidNumer");
            entity.Property(e => e.PomWymObjGidTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PomWym_ObjGidTyp");
            entity.Property(e => e.PomWymObjOrgId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PomWym_ObjOrgID");
            entity.Property(e => e.PomWymProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PomWym_Procent");
            entity.Property(e => e.PomWymTypKwoty)
                .HasDefaultValue((short)0)
                .HasColumnName("PomWym_TypKwoty");
            entity.Property(e => e.PomWymTypWymiaru)
                .HasDefaultValue((short)0)
                .HasColumnName("PomWym_TypWymiaru");
            entity.Property(e => e.PomWymWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PomWym_Wartosc");
            entity.Property(e => e.PomWymWsadInsertId)
                .HasDefaultValue(0)
                .HasColumnName("PomWym_WsadInsertID");
            entity.Property(e => e.PomWymWymFirma)
                .HasDefaultValue(0)
                .HasColumnName("PomWym_WymFirma");
            entity.Property(e => e.PomWymWymOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PomWym_WymOrgID");
        });

        modelBuilder.Entity<BudzetPrjElem>(entity =>
        {
            entity.HasKey(e => e.BpeId).HasName("BPE_Primary");

            entity.ToTable("BudzetPrjElem", "CDN", tb =>
                {
                    tb.HasTrigger("BudzetPrjElemAlias_DeleteHandler");
                    tb.HasTrigger("BudzetPrjElem_DeleteHandler");
                    tb.HasTrigger("BudzetPrjElem_InsertUpdateHandler");
                    tb.HasTrigger("BudzetPrjElem_UaktualnijBPEO");
                });

            entity.HasIndex(e => e.BpeBpnid, "BPEBPNid");

            entity.HasIndex(e => e.BpeFunkcja, "BPEFunkcja");

            entity.HasIndex(e => e.BpeKntNumer, "BPEKnt");

            entity.HasIndex(e => new { e.BpeNadrzedny, e.BpeKod, e.BpeBpnid }, "BPEKod").IsUnique();

            entity.HasIndex(e => new { e.BpeBpnid, e.BpeNadrzedny, e.BpeLp }, "BPELp");

            entity.HasIndex(e => e.BpeNadrzedny, "BPENadrzedny");

            entity.HasIndex(e => e.BpePrjId, "BPEPrJId");

            entity.HasIndex(e => e.BpeRezygnacjaId, "BPERezygnacja");

            entity.HasIndex(e => e.BpeTwrNumer, "BPETwr");

            entity.HasIndex(e => e.BpeUmNid, "BPEUmNId");

            entity.Property(e => e.BpeId).HasColumnName("BPE_Id");
            entity.Property(e => e.BpeBpnid)
                .HasDefaultValue(0)
                .HasColumnName("BPE_BPNId");
            entity.Property(e => e.BpeCzasTrwania)
                .HasDefaultValue(0)
                .HasColumnName("BPE_CzasTrwania");
            entity.Property(e => e.BpeCzasTrwaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_CzasTrwaniaJedn");
            entity.Property(e => e.BpeDataM)
                .HasDefaultValue(0)
                .HasColumnName("BPE_DataM");
            entity.Property(e => e.BpeDataRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("BPE_DataRozpoczecia");
            entity.Property(e => e.BpeDataW)
                .HasDefaultValue(0)
                .HasColumnName("BPE_DataW");
            entity.Property(e => e.BpeDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("BPE_DataZakonczenia");
            entity.Property(e => e.BpeDzialanieBudzet)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_DzialanieBudzet");
            entity.Property(e => e.BpeDzialanieKontrakt)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_DzialanieKontrakt");
            entity.Property(e => e.BpeFakturowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_Fakturowac");
            entity.Property(e => e.BpeFunkcja)
                .HasDefaultValue(0)
                .HasColumnName("BPE_Funkcja");
            entity.Property(e => e.BpeIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("BPE_Ilosc");
            entity.Property(e => e.BpeIloscCzas)
                .HasDefaultValue(0)
                .HasColumnName("BPE_IloscCzas");
            entity.Property(e => e.BpeIloscCzasJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_IloscCzasJM");
            entity.Property(e => e.BpeKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("BPE_KntNumer");
            entity.Property(e => e.BpeKntNumerSpr)
                .HasDefaultValue(0)
                .HasColumnName("BPE_KntNumerSpr");
            entity.Property(e => e.BpeKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BPE_KntTyp");
            entity.Property(e => e.BpeKntTypSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("BPE_KntTypSpr");
            entity.Property(e => e.BpeKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPE_Kod");
            entity.Property(e => e.BpeKosztSql)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("BPE_KosztSQL");
            entity.Property(e => e.BpeKosztyInne)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_KosztyInne");
            entity.Property(e => e.BpeKosztyWyrazen)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_KosztyWyrazen");
            entity.Property(e => e.BpeKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("BPE_KursL");
            entity.Property(e => e.BpeKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BPE_KursM");
            entity.Property(e => e.BpeLp)
                .HasDefaultValue(0)
                .HasColumnName("BPE_Lp");
            entity.Property(e => e.BpeNadrzedny)
                .HasDefaultValue(0)
                .HasColumnName("BPE_Nadrzedny");
            entity.Property(e => e.BpeNarzut)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_Narzut");
            entity.Property(e => e.BpeNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPE_Nazwa");
            entity.Property(e => e.BpeOfertowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_Ofertowac");
            entity.Property(e => e.BpeOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("BPE_OpeMNumer");
            entity.Property(e => e.BpeOpeOdpowiedzialny)
                .HasDefaultValue(0)
                .HasColumnName("BPE_OpeOdpowiedzialny");
            entity.Property(e => e.BpeOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("BPE_OpeWNumer");
            entity.Property(e => e.BpeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPE_Opis");
            entity.Property(e => e.BpePokazZpodrzednych)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_PokazZPodrzednych");
            entity.Property(e => e.BpePrjId)
                .HasDefaultValue(0)
                .HasColumnName("BPE_PrjID");
            entity.Property(e => e.BpePrzychodyInne)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_PrzychodyInne");
            entity.Property(e => e.BpePrzychodyPlan)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_PrzychodyPlan");
            entity.Property(e => e.BpePrzychodyPlanowaneEdycjaSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_PrzychodyPlanowaneEdycjaSpr");
            entity.Property(e => e.BpePrzychodyPlanowaneSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_PrzychodyPlanowaneSpr");
            entity.Property(e => e.BpeRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("BPE_Rabat");
            entity.Property(e => e.BpeRealizacjaPracProc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("BPE_RealizacjaPracProc");
            entity.Property(e => e.BpeRealizacjaPracProcBiez)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("BPE_RealizacjaPracProcBiez");
            entity.Property(e => e.BpeRezygnacjaId)
                .HasDefaultValue(0)
                .HasColumnName("BPE_RezygnacjaId");
            entity.Property(e => e.BpeRodzajNarzutu)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_RodzajNarzutu");
            entity.Property(e => e.BpeRodzajPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_RodzajPracy");
            entity.Property(e => e.BpeRodzajSkladnika)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_RodzajSkladnika");
            entity.Property(e => e.BpeRodzajSkladnikaInny)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPE_RodzajSkladnikaInny");
            entity.Property(e => e.BpeSkladnikJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPE_SkladnikJM");
            entity.Property(e => e.BpeStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_Stawka");
            entity.Property(e => e.BpeStawkaCzas)
                .HasDefaultValue(0)
                .HasColumnName("BPE_StawkaCzas");
            entity.Property(e => e.BpeStawkaCzasJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_StawkaCzasJM");
            entity.Property(e => e.BpeStawkaPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_StawkaPoRabacie");
            entity.Property(e => e.BpeStawkaWaluta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_StawkaWaluta");
            entity.Property(e => e.BpeTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("BPE_TwrNumer");
            entity.Property(e => e.BpeTwrNumerSpr)
                .HasDefaultValue(0)
                .HasColumnName("BPE_TwrNumerSpr");
            entity.Property(e => e.BpeTwrTyp)
                .HasDefaultValue(0)
                .HasColumnName("BPE_TwrTyp");
            entity.Property(e => e.BpeTwrTypSpr)
                .HasDefaultValue(0)
                .HasColumnName("BPE_TwrTypSpr");
            entity.Property(e => e.BpeTwrUmw)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_TwrUmw");
            entity.Property(e => e.BpeTwrUmwPozycja)
                .HasDefaultValue(0)
                .HasColumnName("BPE_TwrUmwPozycja");
            entity.Property(e => e.BpeUmNid)
                .HasDefaultValue(0)
                .HasColumnName("BPE_UmNId");
            entity.Property(e => e.BpeUmNidSpr)
                .HasDefaultValue(0)
                .HasColumnName("BPE_UmNIdSpr");
            entity.Property(e => e.BpeUmowaProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("BPE_UmowaProcent");
            entity.Property(e => e.BpeUmowaProcentSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("BPE_UmowaProcentSpr");
            entity.Property(e => e.BpeUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPE_URL");
            entity.Property(e => e.BpeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPE_Waluta");
            entity.Property(e => e.BpeWartoscBudzetu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscBudzetu");
            entity.Property(e => e.BpeWartoscKontraktu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscKontraktu");
            entity.Property(e => e.BpeWartoscPoNarzucie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscPoNarzucie");
            entity.Property(e => e.BpeWartoscPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscPoRabacie");
            entity.Property(e => e.BpeWartoscPrzedNarzutem)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscPrzedNarzutem");
            entity.Property(e => e.BpeWartoscUmowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscUmowy");
            entity.Property(e => e.BpeWartoscUmowyPoProc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscUmowyPoProc");
            entity.Property(e => e.BpeWartoscUmowyPoProcSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscUmowyPoProcSpr");
            entity.Property(e => e.BpeWartoscUmowySpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPE_WartoscUmowySpr");
            entity.Property(e => e.BpeWyjety)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPE_Wyjety");
            entity.Property(e => e.BpeWyrazenie)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("BPE_Wyrazenie");

            entity.HasOne(d => d.BpeBpn).WithMany(p => p.BudzetPrjElems)
                .HasForeignKey(d => d.BpeBpnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BPEBPNid");
        });

        modelBuilder.Entity<BudzetPrjElemDzialanium>(entity =>
        {
            entity.HasKey(e => e.BpedId).HasName("BPED_Primary");

            entity.ToTable("BudzetPrjElemDzialania", "CDN");

            entity.HasIndex(e => e.BpedBpeid, "BPEDBPEId");

            entity.Property(e => e.BpedId).HasColumnName("BPED_Id");
            entity.Property(e => e.BpedBpeid)
                .HasDefaultValue(0)
                .HasColumnName("BPED_BPEId");
            entity.Property(e => e.BpedDzialanie1)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPED_Dzialanie1");
            entity.Property(e => e.BpedDzialanie2)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPED_Dzialanie2");
            entity.Property(e => e.BpedPozycja)
                .HasDefaultValue(0)
                .HasColumnName("BPED_Pozycja");
            entity.Property(e => e.BpedWartosc1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPED_Wartosc1");
            entity.Property(e => e.BpedWartosc2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPED_Wartosc2");
            entity.Property(e => e.BpedWymiar)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPED_Wymiar");
            entity.Property(e => e.BpedWynikCalosciowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPED_WynikCalosciowy");
            entity.Property(e => e.BpedWynikDzialania)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPED_WynikDzialania");

            entity.HasOne(d => d.BpedBpe).WithMany(p => p.BudzetPrjElemDzialania)
                .HasForeignKey(d => d.BpedBpeid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BPEDBPEId");

            entity.HasMany(d => d.BpepBpes).WithMany(p => p.BpepBpeds)
                .UsingEntity<Dictionary<string, object>>(
                    "BudzetPrjElemPowiazane",
                    r => r.HasOne<BudzetPrjElem>().WithMany()
                        .HasForeignKey("BpepBpeid")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_BPEPBPE"),
                    l => l.HasOne<BudzetPrjElemDzialanium>().WithMany()
                        .HasForeignKey("BpepBpedid")
                        .HasConstraintName("FK_BPEPBPED"),
                    j =>
                    {
                        j.HasKey("BpepBpedid", "BpepBpeid").HasName("BPEP_Primary");
                        j.ToTable("BudzetPrjElemPowiazane", "CDN");
                        j.HasIndex(new[] { "BpepBpeid" }, "BPEPBPE");
                        j.HasIndex(new[] { "BpepBpedid" }, "BPEPBPED");
                        j.IndexerProperty<int>("BpepBpedid").HasColumnName("BPEP_BPEDId");
                        j.IndexerProperty<int>("BpepBpeid").HasColumnName("BPEP_BPEId");
                    });
        });

        modelBuilder.Entity<BudzetPrjElemOkresy>(entity =>
        {
            entity.HasKey(e => e.BpeoId).HasName("BPEO_Primary");

            entity.ToTable("BudzetPrjElemOkresy", "CDN");

            entity.HasIndex(e => e.BpeoBpeid, "BPEOBPEId");

            entity.Property(e => e.BpeoId).HasColumnName("BPEO_Id");
            entity.Property(e => e.BpeoBpeid)
                .HasDefaultValue(0)
                .HasColumnName("BPEO_BPEId");
            entity.Property(e => e.BpeoBudzet)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_Budzet");
            entity.Property(e => e.BpeoDataDo)
                .HasDefaultValue(0)
                .HasColumnName("BPEO_DataDo");
            entity.Property(e => e.BpeoDataOd)
                .HasDefaultValue(0)
                .HasColumnName("BPEO_DataOd");
            entity.Property(e => e.BpeoKontrakt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_Kontrakt");
            entity.Property(e => e.BpeoKosztyInne)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_KosztyInne");
            entity.Property(e => e.BpeoKosztyRzeczywiste)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_KosztyRzeczywiste");
            entity.Property(e => e.BpeoKosztyWynagrodzen)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_KosztyWynagrodzen");
            entity.Property(e => e.BpeoKosztyZamowien)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_KosztyZamowien");
            entity.Property(e => e.BpeoNaglowek)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPEO_Naglowek");
            entity.Property(e => e.BpeoPozycja)
                .HasDefaultValue(0)
                .HasColumnName("BPEO_Pozycja");
            entity.Property(e => e.BpeoPrzychodyInne)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_PrzychodyInne");
            entity.Property(e => e.BpeoPrzychodyPlanowane)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_PrzychodyPlanowane");
            entity.Property(e => e.BpeoPrzychodyPlanowaneEdycja)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_PrzychodyPlanowaneEdycja");
            entity.Property(e => e.BpeoPrzychodyRzeczywiste)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_PrzychodyRzeczywiste");
            entity.Property(e => e.BpeoUmowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_Umowa");
            entity.Property(e => e.BpeoWartoscPoNarzucie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_WartoscPoNarzucie");
            entity.Property(e => e.BpeoWartoscPrzedNarzutem)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("BPEO_WartoscPrzedNarzutem");

            entity.HasOne(d => d.BpeoBpe).WithMany(p => p.BudzetPrjElemOkresies)
                .HasForeignKey(d => d.BpeoBpeid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BPEOBPEId");
        });

        modelBuilder.Entity<BudzetPrjNag>(entity =>
        {
            entity.HasKey(e => e.BpnId).HasName("BPN_Primary");

            entity.ToTable("BudzetPrjNag", "CDN", tb =>
                {
                    tb.HasTrigger("BudzetPrjNag_DeleteHandler");
                    tb.HasTrigger("BudzetPrjNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.BpnFrsId, "BPNFrsID");

            entity.HasIndex(e => e.BpnKntNumer, "BPNKnt");

            entity.HasIndex(e => e.BpnKod, "BPNKod").IsUnique();

            entity.HasIndex(e => new { e.BpnRok, e.BpnMiesiac, e.BpnSeria, e.BpnNumer }, "BPNNumer").IsUnique();

            entity.HasIndex(e => e.BpnPrjId, "BPNPrJId");

            entity.HasIndex(e => e.BpnStatusId, "BPNStatusId");

            entity.HasIndex(e => e.BpnUmNid, "BPNUmowa");

            entity.HasIndex(e => e.BpnZmianaStanuId, "BPNZmianaStanuId");

            entity.Property(e => e.BpnId).HasColumnName("BPN_Id");
            entity.Property(e => e.BpnAktualizujKosztyWyr)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_AktualizujKosztyWyr");
            entity.Property(e => e.BpnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("BPN_Aktywny");
            entity.Property(e => e.BpnArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_Archiwalny");
            entity.Property(e => e.BpnCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("BPN_CzasModyfikacji");
            entity.Property(e => e.BpnCzasTrwania)
                .HasDefaultValue(0)
                .HasColumnName("BPN_CzasTrwania");
            entity.Property(e => e.BpnCzasTrwaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_CzasTrwaniaJedn");
            entity.Property(e => e.BpnDataGwarancji)
                .HasDefaultValue(0)
                .HasColumnName("BPN_DataGwarancji");
            entity.Property(e => e.BpnDataPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("BPN_DataPotwierdzenia");
            entity.Property(e => e.BpnDataPrzegladu)
                .HasDefaultValue(0)
                .HasColumnName("BPN_DataPrzegladu");
            entity.Property(e => e.BpnDataRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("BPN_DataRozpoczecia");
            entity.Property(e => e.BpnDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("BPN_DataWystawienia");
            entity.Property(e => e.BpnDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("BPN_DataZakonczenia");
            entity.Property(e => e.BpnDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPN_DokumentObcy");
            entity.Property(e => e.BpnFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("BPN_FrmNumer");
            entity.Property(e => e.BpnFrsId)
                .HasDefaultValue(0)
                .HasColumnName("BPN_FrsId");
            entity.Property(e => e.BpnKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("BPN_KntNumer");
            entity.Property(e => e.BpnKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("BPN_KntTyp");
            entity.Property(e => e.BpnKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPN_Kod");
            entity.Property(e => e.BpnMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_Miesiac");
            entity.Property(e => e.BpnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPN_Nazwa");
            entity.Property(e => e.BpnNumer)
                .HasDefaultValue(0)
                .HasColumnName("BPN_Numer");
            entity.Property(e => e.BpnOkresyRozbicia)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_OkresyRozbicia");
            entity.Property(e => e.BpnOpeNumerK)
                .HasDefaultValue(0)
                .HasColumnName("BPN_OpeNumerK");
            entity.Property(e => e.BpnOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("BPN_OpeNumerM");
            entity.Property(e => e.BpnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("BPN_OpeNumerW");
            entity.Property(e => e.BpnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("BPN_OpeNumerZ");
            entity.Property(e => e.BpnOpeOdpowiedzialny)
                .HasDefaultValue(0)
                .HasColumnName("BPN_OpeOdpowiedzialny");
            entity.Property(e => e.BpnOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPN_Opis");
            entity.Property(e => e.BpnOpisAnalitycznyDaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_OpisAnalitycznyDaty");
            entity.Property(e => e.BpnPrjId)
                .HasDefaultValue(0)
                .HasColumnName("BPN_PrjId");
            entity.Property(e => e.BpnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("BPN_Rok");
            entity.Property(e => e.BpnRozbicieSql)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("BPN_RozbicieSQL");
            entity.Property(e => e.BpnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPN_Seria");
            entity.Property(e => e.BpnStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_Stan");
            entity.Property(e => e.BpnStatusId)
                .HasDefaultValue(0)
                .HasColumnName("BPN_StatusId");
            entity.Property(e => e.BpnTypRozbicia)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_TypRozbicia");
            entity.Property(e => e.BpnUmNid)
                .HasDefaultValue(0)
                .HasColumnName("BPN_UmNId");
            entity.Property(e => e.BpnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPN_URL");
            entity.Property(e => e.BpnWersjaId)
                .HasDefaultValue(0)
                .HasColumnName("BPN_WersjaId");
            entity.Property(e => e.BpnZamkniety)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_Zamkniety");
            entity.Property(e => e.BpnZmianaStanuId)
                .HasDefaultValue(0)
                .HasColumnName("BPN_ZmianaStanuId");
            entity.Property(e => e.BpnZwinPoziom)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_ZwinPoziom");
            entity.Property(e => e.BpnZwinPoziomMax)
                .HasDefaultValue((byte)0)
                .HasColumnName("BPN_ZwinPoziomMax");
        });

        modelBuilder.Entity<BudzetPrjNagWaluty>(entity =>
        {
            entity.HasKey(e => e.BpnwId).HasName("BPNW_Primary");

            entity.ToTable("BudzetPrjNagWaluty", "CDN");

            entity.HasIndex(e => e.BpnwBpnid, "BPNWBPNId");

            entity.HasIndex(e => new { e.BpnwBpnid, e.BpnwWaluta }, "BPNWaluta").IsUnique();

            entity.Property(e => e.BpnwId).HasColumnName("BPNW_Id");
            entity.Property(e => e.BpnwBpnid)
                .HasDefaultValue(0)
                .HasColumnName("BPNW_BPNId");
            entity.Property(e => e.BpnwKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("BPNW_KursL");
            entity.Property(e => e.BpnwKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("BPNW_KursM");
            entity.Property(e => e.BpnwWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BPNW_Waluta");

            entity.HasOne(d => d.BpnwBpn).WithMany(p => p.BudzetPrjNagWaluties)
                .HasForeignKey(d => d.BpnwBpnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BPNWBPNId");
        });

        modelBuilder.Entity<BudzetPrzychodyKoszty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BudzetPrzychodyKoszty", "CDN");

            entity.Property(e => e.PkAkwOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_AkwOrgID");
            entity.Property(e => e.PkAkwStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_AkwStazOrgID");
            entity.Property(e => e.PkAnulowany)
                .HasDefaultValue((short)0)
                .HasColumnName("PK_Anulowany");
            entity.Property(e => e.PkAuditTime)
                .HasDefaultValue(0)
                .HasColumnName("PK_AuditTime");
            entity.Property(e => e.PkAuditUser)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_AuditUser");
            entity.Property(e => e.PkBudzetOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_BudzetOrgID");
            entity.Property(e => e.PkCechyOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_CechyOrgID");
            entity.Property(e => e.PkCrmetapOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_CRMEtapOrgID");
            entity.Property(e => e.PkCzDorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_CzDOrgID");
            entity.Property(e => e.PkCzMorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_CzMOrgID");
            entity.Property(e => e.PkCzRorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_CzROrgID");
            entity.Property(e => e.PkCzTorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_CzTOrgID");
            entity.Property(e => e.PkDokNumerOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_DokNumerOrgID");
            entity.Property(e => e.PkDstOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_DstOrgID");
            entity.Property(e => e.PkDstStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_DstStazOrgID");
            entity.Property(e => e.PkFirmaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_FirmaOrgID");
            entity.Property(e => e.PkKatFinOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_KatFinOrgID");
            entity.Property(e => e.PkKierunek)
                .HasDefaultValue((short)0)
                .HasColumnName("PK_Kierunek");
            entity.Property(e => e.PkKndOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_KndOrgID");
            entity.Property(e => e.PkKndStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_KndStazOrgID");
            entity.Property(e => e.PkKntOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_KntOrgID");
            entity.Property(e => e.PkKntStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_KntStazOrgID");
            entity.Property(e => e.PkLokOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_LokOrgID");
            entity.Property(e => e.PkMagOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_MagOrgID");
            entity.Property(e => e.PkMsaldo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PK_MSaldo");
            entity.Property(e => e.PkMsklOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_MsklOrgID");
            entity.Property(e => e.PkMzmniejszenie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PK_MZmniejszenie");
            entity.Property(e => e.PkMzwiekszenie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PK_MZwiekszenie");
            entity.Property(e => e.PkOpiekunOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_OpiekunOrgID");
            entity.Property(e => e.PkOrgAtrId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_OrgAtrID");
            entity.Property(e => e.PkOrgId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_OrgID");
            entity.Property(e => e.PkOrgWymId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_OrgWymID");
            entity.Property(e => e.PkPaczka)
                .HasDefaultValue((short)0)
                .HasColumnName("PK_Paczka");
            entity.Property(e => e.PkPerspektywaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_PerspektywaOrgID");
            entity.Property(e => e.PkPlatOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_PlatOrgID");
            entity.Property(e => e.PkPlatStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_PlatStazOrgID");
            entity.Property(e => e.PkPracownikOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_PracownikOrgID");
            entity.Property(e => e.PkProdOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_ProdOrgID");
            entity.Property(e => e.PkProdStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_ProdStazOrgID");
            entity.Property(e => e.PkProjektOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_ProjektOrgID");
            entity.Property(e => e.PkPrzelicznikWaluty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PK_PrzelicznikWaluty");
            entity.Property(e => e.PkRksOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_RksOrgID");
            entity.Property(e => e.PkSpiNumerOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_SpiNumerOrgID");
            entity.Property(e => e.PkStokOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_StokOrgID");
            entity.Property(e => e.PkStrFrmOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_StrFrmOrgID");
            entity.Property(e => e.PkTypKwoty)
                .HasDefaultValue((short)0)
                .HasColumnName("PK_TypKwoty");
            entity.Property(e => e.PkWalutaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PK_WalutaOrgID");
            entity.Property(e => e.PkWsadInsertId)
                .HasDefaultValue(0)
                .HasColumnName("PK_WsadInsertID");
            entity.Property(e => e.PkWymTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PK_WymTyp");
        });

        modelBuilder.Entity<BudzetSprzedaz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BudzetSprzedaz", "CDN");

            entity.Property(e => e.SprAkwOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_AkwOrgID");
            entity.Property(e => e.SprAkwStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_AkwStazOrgID");
            entity.Property(e => e.SprAnulowany)
                .HasDefaultValue((short)0)
                .HasColumnName("SPR_Anulowany");
            entity.Property(e => e.SprAuditTime)
                .HasDefaultValue(0)
                .HasColumnName("SPR_AuditTime");
            entity.Property(e => e.SprAuditUser)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_AuditUser");
            entity.Property(e => e.SprBudzetOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_BudzetOrgID");
            entity.Property(e => e.SprCechyOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_CechyOrgID");
            entity.Property(e => e.SprCrmetapOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_CRMEtapOrgID");
            entity.Property(e => e.SprCzDorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_CzDOrgID");
            entity.Property(e => e.SprCzMorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_CzMOrgID");
            entity.Property(e => e.SprCzRorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_CzROrgID");
            entity.Property(e => e.SprCzTorgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_CzTOrgID");
            entity.Property(e => e.SprDokNumerOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_DokNumerOrgID");
            entity.Property(e => e.SprDstOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_DstOrgID");
            entity.Property(e => e.SprDstStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_DstStazOrgID");
            entity.Property(e => e.SprFirmaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_FirmaOrgID");
            entity.Property(e => e.SprKatFinOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_KatFinOrgID");
            entity.Property(e => e.SprKierunek)
                .HasDefaultValue((short)0)
                .HasColumnName("SPR_Kierunek");
            entity.Property(e => e.SprKndOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_KndOrgID");
            entity.Property(e => e.SprKndStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_KndStazOrgID");
            entity.Property(e => e.SprKntOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_KntOrgID");
            entity.Property(e => e.SprKntStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_KntStazOrgID");
            entity.Property(e => e.SprLokOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_LokOrgID");
            entity.Property(e => e.SprMagOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_MagOrgID");
            entity.Property(e => e.SprMilosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("SPR_MIlosc");
            entity.Property(e => e.SprMiloscJp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("SPR_MIloscJP");
            entity.Property(e => e.SprMkoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("SPR_MKoszt");
            entity.Property(e => e.SprMmarza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("SPR_MMarza");
            entity.Property(e => e.SprMprzychod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("SPR_MPrzychod");
            entity.Property(e => e.SprMsklOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_MsklOrgID");
            entity.Property(e => e.SprOpiekunOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_OpiekunOrgID");
            entity.Property(e => e.SprOrgAtrId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_OrgAtrID");
            entity.Property(e => e.SprOrgId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_OrgID");
            entity.Property(e => e.SprOrgWymId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_OrgWymID");
            entity.Property(e => e.SprPerspektywaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_PerspektywaOrgID");
            entity.Property(e => e.SprPlatOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_PlatOrgID");
            entity.Property(e => e.SprPlatStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_PlatStazOrgID");
            entity.Property(e => e.SprPracownikOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_PracownikOrgID");
            entity.Property(e => e.SprPrmOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_PrmOrgID");
            entity.Property(e => e.SprProdOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_ProdOrgID");
            entity.Property(e => e.SprProdStazOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_ProdStazOrgID");
            entity.Property(e => e.SprProjektOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_ProjektOrgID");
            entity.Property(e => e.SprPrzelicznikWaluty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("SPR_PrzelicznikWaluty");
            entity.Property(e => e.SprRksOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_RksOrgID");
            entity.Property(e => e.SprSpiNumerOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_SpiNumerOrgID");
            entity.Property(e => e.SprStokOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_StokOrgID");
            entity.Property(e => e.SprStrFrmOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_StrFrmOrgID");
            entity.Property(e => e.SprTypKwoty)
                .HasDefaultValue((short)0)
                .HasColumnName("SPR_TypKwoty");
            entity.Property(e => e.SprWalutaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPR_WalutaOrgID");
            entity.Property(e => e.SprWsadInsertId)
                .HasDefaultValue(0)
                .HasColumnName("SPR_WsadInsertID");
            entity.Property(e => e.SprWymTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SPR_WymTyp");
        });

        modelBuilder.Entity<BudzetZestawienium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BudzetZestawienia", "CDN");

            entity.Property(e => e.BzsAuditTime)
                .HasDefaultValue(0)
                .HasColumnName("BZS_AuditTime");
            entity.Property(e => e.BzsAuditUser)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_AuditUser");
            entity.Property(e => e.BzsBudzetOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_BudzetOrgID");
            entity.Property(e => e.BzsBuforOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_BuforOrgID");
            entity.Property(e => e.BzsCzdorgId)
                .HasDefaultValue(0)
                .HasColumnName("BZS_CZDOrgID");
            entity.Property(e => e.BzsCzmorgId)
                .HasDefaultValue(0)
                .HasColumnName("BZS_CZMOrgID");
            entity.Property(e => e.BzsCzrorgId)
                .HasDefaultValue(0)
                .HasColumnName("BZS_CZROrgID");
            entity.Property(e => e.BzsCztorgId)
                .HasDefaultValue(0)
                .HasColumnName("BZS_CZTOrgID");
            entity.Property(e => e.BzsDziennikOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_DziennikOrgID");
            entity.Property(e => e.BzsFirmaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_FirmaOrgID");
            entity.Property(e => e.BzsKatFinOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_KatFinOrgID");
            entity.Property(e => e.BzsKierunek)
                .HasDefaultValue(0)
                .HasColumnName("BZS_Kierunek");
            entity.Property(e => e.BzsKndOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_KndOrgID");
            entity.Property(e => e.BzsKntOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_KntOrgID");
            entity.Property(e => e.BzsKontoOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_KontoOrgID");
            entity.Property(e => e.BzsLokOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_LokOrgId");
            entity.Property(e => e.BzsMkwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("BZS_MKwota");
            entity.Property(e => e.BzsMkwotaOrg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("BZS_MKwotaOrg");
            entity.Property(e => e.BzsOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_Opis");
            entity.Property(e => e.BzsOrgAtrId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_OrgAtrID");
            entity.Property(e => e.BzsOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_OrgID");
            entity.Property(e => e.BzsOrgWymId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_OrgWymId");
            entity.Property(e => e.BzsPaczka)
                .HasDefaultValue(0)
                .HasColumnName("BZS_Paczka");
            entity.Property(e => e.BzsPerspektywaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_PerspektywaOrgID");
            entity.Property(e => e.BzsPlatOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_PlatOrgID");
            entity.Property(e => e.BzsProjektOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_ProjektOrgID");
            entity.Property(e => e.BzsPrzelicznikWaluty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("BZS_PrzelicznikWaluty");
            entity.Property(e => e.BzsStrFrmOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_StrFrmOrgID");
            entity.Property(e => e.BzsTypKwoty)
                .HasDefaultValue(0)
                .HasColumnName("BZS_TypKwoty");
            entity.Property(e => e.BzsWalutaOrgId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_WalutaOrgID");
            entity.Property(e => e.BzsWsadInsertId)
                .HasDefaultValue(0)
                .HasColumnName("BZS_WsadInsertID");
            entity.Property(e => e.BzsWymTyp)
                .HasDefaultValue(0)
                .HasColumnName("BZS_WymTyp");
            entity.Property(e => e.BzsZstNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_ZstNazwa");
            entity.Property(e => e.BzsZstOrgId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BZS_ZstOrgID");
        });

        modelBuilder.Entity<Cdccertyfikaty>(entity =>
        {
            entity.HasKey(e => e.CdcId).HasName("CDC_Primary");

            entity.ToTable("CDCCertyfikaty", "CDN", tb => tb.HasTrigger("CDCCertyfikaty_InsertUpdateHandler"));

            entity.HasIndex(e => e.CdcBnkNumer, "CDCBnkNumer");

            entity.HasIndex(e => new { e.CdcBnkNumer, e.CdcOpeNumer, e.CdcTyp }, "CDCIdentCertyfikatu");

            entity.HasIndex(e => e.CdcOpeNumer, "CDCOpeNumer");

            entity.Property(e => e.CdcId).HasColumnName("CDC_Id");
            entity.Property(e => e.CdcBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("CDC_BnkNumer");
            entity.Property(e => e.CdcNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CDC_Nazwa");
            entity.Property(e => e.CdcOdcisk)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CDC_Odcisk");
            entity.Property(e => e.CdcOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("CDC_OpeNumer");
            entity.Property(e => e.CdcTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDC_Typ");

            entity.HasOne(d => d.CdcBnkNumerNavigation).WithMany(p => p.Cdccertyfikaties)
                .HasForeignKey(d => d.CdcBnkNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CDCBnkNumer");
        });

        modelBuilder.Entity<Cdcloginy>(entity =>
        {
            entity.HasKey(e => e.CdclId).HasName("CDCL_Primary");

            entity.ToTable("CDCLoginy", "CDN");

            entity.HasIndex(e => e.CdclBnkNumer, "KeyBnk");

            entity.HasIndex(e => e.CdclOpeNumer, "KeyOpe");

            entity.HasIndex(e => new { e.CdclBnkNumer, e.CdclOpeNumer }, "KeyOpeLogin");

            entity.Property(e => e.CdclId).HasColumnName("CDCL_Id");
            entity.Property(e => e.CdclBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("CDCL_BnkNumer");
            entity.Property(e => e.CdclLogin)
                .HasMaxLength(101)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CDCL_Login");
            entity.Property(e => e.CdclLoginTyp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CDCL_LoginTyp");
            entity.Property(e => e.CdclOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("CDCL_OpeNumer");

            entity.HasOne(d => d.CdclBnkNumerNavigation).WithMany(p => p.Cdcloginies)
                .HasForeignKey(d => d.CdclBnkNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KeyBnk");

            entity.HasOne(d => d.CdclOpeNumerNavigation).WithMany(p => p.Cdcloginies)
                .HasForeignKey(d => d.CdclOpeNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KeyOpe");
        });

        modelBuilder.Entity<Cechy>(entity =>
        {
            entity.HasKey(e => new { e.CchGidnumer, e.CchGidlp }).HasName("CCh_Primary");

            entity.ToTable("Cechy", "CDN");

            entity.HasIndex(e => new { e.CchGidtyp, e.CchGidnumer, e.CchCecha }, "CChCecha").IsUnique();

            entity.Property(e => e.CchGidnumer).HasColumnName("CCh_GIDNumer");
            entity.Property(e => e.CchGidlp).HasColumnName("CCh_GIDLp");
            entity.Property(e => e.CchAktywna)
                .HasDefaultValue((byte)0)
                .HasColumnName("CCh_Aktywna");
            entity.Property(e => e.CchCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CCh_Cecha");
            entity.Property(e => e.CchCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("CCh_CzasModyfikacji");
            entity.Property(e => e.CchGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("CCh_GIDFirma");
            entity.Property(e => e.CchGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CCh_GIDTyp");
            entity.Property(e => e.CchISklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("CCh_iSklep");
            entity.Property(e => e.CchOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CCh_Opis");
            entity.Property(e => e.CchWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("CCh_Wsk");

            entity.HasOne(d => d.CchGidnumerNavigation).WithMany(p => p.Cechies)
                .HasForeignKey(d => d.CchGidnumer)
                .HasConstraintName("FK_CChPrimaryNoType");
        });

        modelBuilder.Entity<CechyKlasy>(entity =>
        {
            entity.HasKey(e => e.CckGidnumer).HasName("CCK_Primary");

            entity.ToTable("CechyKlasy", "CDN", tb => tb.HasTrigger("CechyKlasy_DeleteHandler"));

            entity.HasIndex(e => e.CckNazwa, "CCKNazwa").IsUnique();

            entity.Property(e => e.CckGidnumer).HasColumnName("CCK_GIDNumer");
            entity.Property(e => e.CckCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("CCK_CzasModyfikacji");
            entity.Property(e => e.CckGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("CCK_GIDFirma");
            entity.Property(e => e.CckGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("CCK_GIDLp");
            entity.Property(e => e.CckGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CCK_GIDTyp");
            entity.Property(e => e.CckNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CCK_Nazwa");
            entity.Property(e => e.CckOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CCK_Opis");
            entity.Property(e => e.CckZamknieta)
                .HasDefaultValue((byte)0)
                .HasColumnName("CCK_Zamknieta");
            entity.Property(e => e.CckZlisty)
                .HasDefaultValue((byte)0)
                .HasColumnName("CCK_ZListy");
        });

        modelBuilder.Entity<ClbkKarty>(entity =>
        {
            entity.HasKey(e => e.ClbkId).HasName("CLBK_Primary");

            entity.ToTable("ClbkKarty", "CDN");

            entity.HasIndex(e => e.ClbkNazwa, "ClbkNazwa").IsUnique();

            entity.Property(e => e.ClbkId).HasColumnName("CLBK_Id");
            entity.Property(e => e.ClbkAssembly)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("CLBK_Assembly");
            entity.Property(e => e.ClbkAssemblyPdb)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("CLBK_AssemblyPdb");
            entity.Property(e => e.ClbkAutor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CLBK_Autor");
            entity.Property(e => e.ClbkDodany)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("CLBK_Dodany");
            entity.Property(e => e.ClbkNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CLBK_Nazwa");
            entity.Property(e => e.ClbkOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("CLBK_OpeNumer");
            entity.Property(e => e.ClbkOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CLBK_Opis");
            entity.Property(e => e.ClbkPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("CLBK_Priorytet");
            entity.Property(e => e.ClbkStan)
                .HasDefaultValue((short)0)
                .HasColumnName("CLBK_Stan");
            entity.Property(e => e.ClbkSumaKontrolna)
                .HasMaxLength(16)
                .HasColumnName("CLBK_SumaKontrolna");
            entity.Property(e => e.ClbkUtworzony)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("CLBK_Utworzony");
            entity.Property(e => e.ClbkWersja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CLBK_Wersja");
            entity.Property(e => e.ClbkWersjaXl)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CLBK_WersjaXL");
            entity.Property(e => e.ClbkZmodyfikowany)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("CLBK_Zmodyfikowany");

            entity.HasMany(d => d.ClbfFrs).WithMany(p => p.ClbfClbks)
                .UsingEntity<Dictionary<string, object>>(
                    "ClbkFr",
                    r => r.HasOne<FrmStruktura>().WithMany()
                        .HasPrincipalKey("FrsId")
                        .HasForeignKey("ClbfFrsId")
                        .HasConstraintName("FK_ClbfFirma"),
                    l => l.HasOne<ClbkKarty>().WithMany()
                        .HasForeignKey("ClbfClbkId")
                        .HasConstraintName("FK_ClbfPrimary"),
                    j =>
                    {
                        j.HasKey("ClbfClbkId", "ClbfFrsId").HasName("CLBF_Primary");
                        j.ToTable("ClbkFrs", "CDN");
                        j.IndexerProperty<int>("ClbfClbkId").HasColumnName("CLBF_ClbkId");
                        j.IndexerProperty<int>("ClbfFrsId").HasColumnName("CLBF_FrsId");
                    });
        });

        modelBuilder.Entity<ClbkProcedury>(entity =>
        {
            entity.HasKey(e => new { e.ClbpClbkId, e.ClbpIdProcedury }).HasName("CLBP_Primary");

            entity.ToTable("ClbkProcedury", "CDN");

            entity.Property(e => e.ClbpClbkId).HasColumnName("CLBP_ClbkId");
            entity.Property(e => e.ClbpIdProcedury).HasColumnName("CLBP_IdProcedury");
            entity.Property(e => e.ClbpOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CLBP_Opis");
        });

        modelBuilder.Entity<CrmakcjeAutomatyczne>(entity =>
        {
            entity.HasKey(e => e.CaaId).HasName("CAA_Primary");

            entity.ToTable("CRMAkcjeAutomatyczne", "CDN", tb => tb.HasTrigger("CRMAkcjeAutomatyczne_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.CaaCrmnumer, e.CaaCrmlp }, "CAACRMBezTypu");

            entity.HasIndex(e => new { e.CaaCrmtyp, e.CaaCrmnumer, e.CaaCrmlp }, "CAAObiektCRM");

            entity.Property(e => e.CaaId).HasColumnName("CAA_Id");
            entity.Property(e => e.CaaAktywna)
                .HasDefaultValue((byte)0)
                .HasColumnName("CAA_Aktywna");
            entity.Property(e => e.CaaCrmlp)
                .HasDefaultValue((short)0)
                .HasColumnName("CAA_CRMLp");
            entity.Property(e => e.CaaCrmnumer)
                .HasDefaultValue(0)
                .HasColumnName("CAA_CRMNumer");
            entity.Property(e => e.CaaCrmtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CAA_CRMTyp");
            entity.Property(e => e.CaaEtapPropLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CAA_EtapPropLp");
            entity.Property(e => e.CaaKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CAA_Kod");
            entity.Property(e => e.CaaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CAA_Nazwa");
            entity.Property(e => e.CaaOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CAA_Opis");
            entity.Property(e => e.CaaPredefiniowany)
                .HasDefaultValue((short)0)
                .HasColumnName("CAA_Predefiniowany");
            entity.Property(e => e.CaaSql)
                .HasDefaultValue((byte)0)
                .HasColumnName("CAA_Sql");
            entity.Property(e => e.CaaSqlFiltr)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CAA_SqlFiltr");
            entity.Property(e => e.CaaSqlTresc)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CAA_SqlTresc");
            entity.Property(e => e.CaaTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("CAA_TerminDo");
            entity.Property(e => e.CaaTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("CAA_TerminOD");
            entity.Property(e => e.CaaTowarZkampanii)
                .HasDefaultValue((byte)0)
                .HasColumnName("CAA_TowarZKampanii");
            entity.Property(e => e.CaaTswykonania)
                .HasDefaultValue(0)
                .HasColumnName("CAA_TSWykonania");
            entity.Property(e => e.CaaTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("CAA_Typ");
            entity.Property(e => e.CaaWiazaniePozycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("CAA_WiazaniePozycji");
            entity.Property(e => e.CaaWykonanieAkcji)
                .HasDefaultValue((byte)0)
                .HasColumnName("CAA_WykonanieAkcji");
            entity.Property(e => e.CaaWykonanieZadan)
                .HasDefaultValue((byte)0)
                .HasColumnName("CAA_WykonanieZadan");
        });

        modelBuilder.Entity<CrmakcjeDokumenty>(entity =>
        {
            entity.HasKey(e => new { e.CadCaaid, e.CadDokTyp }).HasName("CAD_Primary");

            entity.ToTable("CRMAkcjeDokumenty", "CDN");

            entity.HasIndex(e => e.CadCaaid, "CADAkcja");

            entity.HasIndex(e => e.CadDokTyp, "CADDok");

            entity.Property(e => e.CadCaaid).HasColumnName("CAD_CAAId");
            entity.Property(e => e.CadDokTyp).HasColumnName("CAD_DokTyp");

            entity.HasOne(d => d.CadCaa).WithMany(p => p.CrmakcjeDokumenties)
                .HasForeignKey(d => d.CadCaaid)
                .HasConstraintName("FK_CADAkcja");
        });

        modelBuilder.Entity<CrmdefZadanium>(entity =>
        {
            entity.HasKey(e => e.CdzId).HasName("CDZ_Primary");

            entity.ToTable("CRMDefZadania", "CDN", tb =>
                {
                    tb.HasTrigger("CRMDefZadania_DeleteHandler");
                    tb.HasTrigger("CRMDefZadania_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.CdzCkeNumer, e.CdzCkeLp, e.CdzCkeTyp }, "CDZEtap");

            entity.Property(e => e.CdzId).HasColumnName("CDZ_Id");
            entity.Property(e => e.CdzCalyDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_CalyDzien");
            entity.Property(e => e.CdzCdzid)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_CDZId");
            entity.Property(e => e.CdzCkeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CDZ_CkeLp");
            entity.Property(e => e.CdzCkeNumer)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_CkeNumer");
            entity.Property(e => e.CdzCkeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CDZ_CkeTyp");
            entity.Property(e => e.CdzCzasPlanowany)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_CzasPlanowany");
            entity.Property(e => e.CdzCzasPlanowanyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_CzasPlanowanyJedn");
            entity.Property(e => e.CdzCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_CzasPrzypomnienia");
            entity.Property(e => e.CdzCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_CzasPrzypomnieniaJedn");
            entity.Property(e => e.CdzDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_DataUtworzenia");
            entity.Property(e => e.CdzFrsId)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_FrsId");
            entity.Property(e => e.CdzGenerujAutomatycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_GenerujAutomatycznie");
            entity.Property(e => e.CdzLaczZadania)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_LaczZadania");
            entity.Property(e => e.CdzObsluga)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_Obsluga");
            entity.Property(e => e.CdzOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_OpeMNumer");
            entity.Property(e => e.CdzOpeOnumer)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_OpeONumer");
            entity.Property(e => e.CdzOpeUnumer)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_OpeUNumer");
            entity.Property(e => e.CdzOpis)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CDZ_Opis");
            entity.Property(e => e.CdzPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_Priorytet");
            entity.Property(e => e.CdzPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_Przypomnienie");
            entity.Property(e => e.CdzRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_Rodzaj");
            entity.Property(e => e.CdzTerminZadania)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_TerminZadania");
            entity.Property(e => e.CdzTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDZ_Terminarz");
            entity.Property(e => e.CdzTypId)
                .HasDefaultValue(0)
                .HasColumnName("CDZ_TypId");
            entity.Property(e => e.CdzTytul)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CDZ_Tytul");
        });

        modelBuilder.Entity<CrmdokumentyLinki>(entity =>
        {
            entity.HasKey(e => new { e.CdlCrmtyp, e.CdlCrmnumer, e.CdlCrmlp, e.CdlDokTyp, e.CdlDokNumer }).HasName("CDL_Primary");

            entity.ToTable("CRMDokumentyLinki", "CDN", tb =>
                {
                    tb.HasTrigger("CRMDokumentyLinki_DeleteHandler");
                    tb.HasTrigger("CRMDokumentyLinki_InsertUpdateHandler");
                    tb.HasTrigger("CRMDokumentyLinki_UaktualnijBPEO");
                });

            entity.HasIndex(e => new { e.CdlCrmnumer, e.CdlCrmlp, e.CdlCrmtyp }, "CDLCRM");

            entity.HasIndex(e => new { e.CdlCrmnumer, e.CdlCrmlp }, "CDLCRMNumerLp");

            entity.HasIndex(e => e.CdlDokNumer, "CDLDokNumer");

            entity.Property(e => e.CdlCrmtyp).HasColumnName("CDL_CRMTyp");
            entity.Property(e => e.CdlCrmnumer).HasColumnName("CDL_CRMNumer");
            entity.Property(e => e.CdlCrmlp).HasColumnName("CDL_CRMLp");
            entity.Property(e => e.CdlDokTyp).HasColumnName("CDL_DokTyp");
            entity.Property(e => e.CdlDokNumer).HasColumnName("CDL_DokNumer");
            entity.Property(e => e.CdlKierunek)
                .HasDefaultValue((short)0)
                .HasColumnName("CDL_Kierunek");
            entity.Property(e => e.CdlKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CDL_Kwota");
            entity.Property(e => e.CdlOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("CDL_OpeNumer");
            entity.Property(e => e.CdlOpis)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CDL_Opis");
            entity.Property(e => e.CdlPozycje)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDL_Pozycje");
            entity.Property(e => e.CdlProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CDL_Procent");
            entity.Property(e => e.CdlTimeStamp)
                .HasDefaultValue(0)
                .HasColumnName("CDL_TimeStamp");
            entity.Property(e => e.CdlTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDL_Typ");
        });

        modelBuilder.Entity<CrmdokumentyLinkiView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CRMDokumentyLinkiView", "CDN");

            entity.Property(e => e.CdlvAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDLV_Akronim");
            entity.Property(e => e.CdlvAktywny).HasColumnName("CDLV_Aktywny");
            entity.Property(e => e.CdlvCrmlp).HasColumnName("CDLV_CRMLp");
            entity.Property(e => e.CdlvCrmnumer).HasColumnName("CDLV_CRMNumer");
            entity.Property(e => e.CdlvCrmtyp).HasColumnName("CDLV_CRMTyp");
            entity.Property(e => e.CdlvData).HasColumnName("CDLV_Data");
            entity.Property(e => e.CdlvDokNumer).HasColumnName("CDLV_DokNumer");
            entity.Property(e => e.CdlvDokTyp).HasColumnName("CDLV_DokTyp");
            entity.Property(e => e.CdlvKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CDLV_Kwota");
            entity.Property(e => e.CdlvMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CDLV_Miasto");
            entity.Property(e => e.CdlvMiesiac).HasColumnName("CDLV_Miesiac");
            entity.Property(e => e.CdlvNazwa)
                .HasMaxLength(352)
                .IsUnicode(false)
                .HasColumnName("CDLV_Nazwa");
            entity.Property(e => e.CdlvNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CDLV_Netto");
            entity.Property(e => e.CdlvNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CDLV_NettoWal");
            entity.Property(e => e.CdlvNieKsiegowac).HasColumnName("CDLV_NieKsiegowac");
            entity.Property(e => e.CdlvNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CDLV_NrDok");
            entity.Property(e => e.CdlvNumer).HasColumnName("CDLV_Numer");
            entity.Property(e => e.CdlvRok).HasColumnName("CDLV_Rok");
            entity.Property(e => e.CdlvSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CDLV_Seria");
            entity.Property(e => e.CdlvSkrot)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CDLV_Skrot");
            entity.Property(e => e.CdlvSmallInt1).HasColumnName("CDLV_SmallInt1");
            entity.Property(e => e.CdlvSmallInt2).HasColumnName("CDLV_SmallInt2");
            entity.Property(e => e.CdlvSmallInt3).HasColumnName("CDLV_SmallInt3");
            entity.Property(e => e.CdlvStan).HasColumnName("CDLV_Stan");
            entity.Property(e => e.CdlvTinyInt1).HasColumnName("CDLV_TinyInt1");
            entity.Property(e => e.CdlvTyp).HasColumnName("CDLV_Typ");
            entity.Property(e => e.CdlvVarChar1)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("CDLV_VarChar1");
            entity.Property(e => e.CdlvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CDLV_Waluta");
            entity.Property(e => e.CdlvZaksiegowano).HasColumnName("CDLV_Zaksiegowano");
        });

        modelBuilder.Entity<CrmdokumentyLinkiViewFullDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CRMDokumentyLinkiView_FullData", "CDN");

            entity.Property(e => e.CdlvAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDLV_Akronim");
            entity.Property(e => e.CdlvAktywny).HasColumnName("CDLV_Aktywny");
            entity.Property(e => e.CdlvCrmlp).HasColumnName("CDLV_CRMLp");
            entity.Property(e => e.CdlvCrmnumer).HasColumnName("CDLV_CRMNumer");
            entity.Property(e => e.CdlvCrmtyp).HasColumnName("CDLV_CRMTyp");
            entity.Property(e => e.CdlvData).HasColumnName("CDLV_Data");
            entity.Property(e => e.CdlvDokNumer).HasColumnName("CDLV_DokNumer");
            entity.Property(e => e.CdlvDokTyp).HasColumnName("CDLV_DokTyp");
            entity.Property(e => e.CdlvKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CDLV_Kwota");
            entity.Property(e => e.CdlvMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CDLV_Miasto");
            entity.Property(e => e.CdlvMiesiac).HasColumnName("CDLV_Miesiac");
            entity.Property(e => e.CdlvNazwa)
                .HasMaxLength(352)
                .IsUnicode(false)
                .HasColumnName("CDLV_Nazwa");
            entity.Property(e => e.CdlvNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CDLV_Netto");
            entity.Property(e => e.CdlvNettoWal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CDLV_NettoWal");
            entity.Property(e => e.CdlvNieKsiegowac).HasColumnName("CDLV_NieKsiegowac");
            entity.Property(e => e.CdlvNrDok)
                .HasMaxLength(91)
                .IsUnicode(false)
                .HasColumnName("CDLV_NrDok");
            entity.Property(e => e.CdlvNumer).HasColumnName("CDLV_Numer");
            entity.Property(e => e.CdlvRok).HasColumnName("CDLV_Rok");
            entity.Property(e => e.CdlvSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CDLV_Seria");
            entity.Property(e => e.CdlvSkrot)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CDLV_Skrot");
            entity.Property(e => e.CdlvSmallInt1).HasColumnName("CDLV_SmallInt1");
            entity.Property(e => e.CdlvSmallInt2).HasColumnName("CDLV_SmallInt2");
            entity.Property(e => e.CdlvSmallInt3).HasColumnName("CDLV_SmallInt3");
            entity.Property(e => e.CdlvStan).HasColumnName("CDLV_Stan");
            entity.Property(e => e.CdlvTinyInt1).HasColumnName("CDLV_TinyInt1");
            entity.Property(e => e.CdlvTyp).HasColumnName("CDLV_Typ");
            entity.Property(e => e.CdlvVarChar1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CDLV_VarChar1");
            entity.Property(e => e.CdlvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CDLV_Waluta");
            entity.Property(e => e.CdlvZaksiegowano).HasColumnName("CDLV_Zaksiegowano");
        });

        modelBuilder.Entity<CrmdokumentyPozycje>(entity =>
        {
            entity.HasKey(e => new { e.CdpCrmtyp, e.CdpCrmnumer, e.CdpDokTyp, e.CdpDokNumer, e.CdpCrmlp, e.CdpDokLp }).HasName("CDP_Primary");

            entity.ToTable("CRMDokumentyPozycje", "CDN", tb =>
                {
                    tb.HasTrigger("CRMDokumentyPozycjeAlias_InsertUpdateHandler");
                    tb.HasTrigger("CRMDokumentyPozycje_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.CdpCrmnumer, e.CdpCrmlp }, "CDPCRMWithoutType");

            entity.HasIndex(e => new { e.CdpCrmlp, e.CdpCrmtyp }, "CDPKeyCRMLpType");

            entity.HasIndex(e => new { e.CdpDokTyp, e.CdpDokNumer, e.CdpDokLp }, "CDPPozycja");

            entity.HasIndex(e => e.CdpDokLp, "CDPPozycjaLp");

            entity.Property(e => e.CdpCrmtyp).HasColumnName("CDP_CRMTyp");
            entity.Property(e => e.CdpCrmnumer).HasColumnName("CDP_CRMNumer");
            entity.Property(e => e.CdpDokTyp).HasColumnName("CDP_DokTyp");
            entity.Property(e => e.CdpDokNumer).HasColumnName("CDP_DokNumer");
            entity.Property(e => e.CdpCrmlp).HasColumnName("CDP_CRMLp");
            entity.Property(e => e.CdpDokLp).HasColumnName("CDP_DokLp");
        });

        modelBuilder.Entity<CrmetapyDef>(entity =>
        {
            entity.HasKey(e => e.CedId).HasName("CED_Primary");

            entity.ToTable("CRMEtapyDef", "CDN", tb => tb.HasTrigger("CRMEtapyDef_DeleteHandler"));

            entity.Property(e => e.CedId).HasColumnName("CED_ID");
            entity.Property(e => e.CedAkcja)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CED_Akcja");
            entity.Property(e => e.CedAkcjaWymagana)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_AkcjaWymagana");
            entity.Property(e => e.CedAkcjaZa)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_AkcjaZa");
            entity.Property(e => e.CedCzasPlanowany)
                .HasDefaultValue(0)
                .HasColumnName("CED_CzasPlanowany");
            entity.Property(e => e.CedCzasPlanowanyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_CzasPlanowanyJedn");
            entity.Property(e => e.CedCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("CED_CzasPrzypomnienia");
            entity.Property(e => e.CedCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_CzasPrzypomnieniaJedn");
            entity.Property(e => e.CedDataUtw)
                .HasDefaultValue(0)
                .HasColumnName("CED_DataUtw");
            entity.Property(e => e.CedEmailTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CED_EmailTemat");
            entity.Property(e => e.CedEmailTresc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CED_EmailTresc");
            entity.Property(e => e.CedEtapBezKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_EtapBezKnt");
            entity.Property(e => e.CedEtapNadzorowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_EtapNadzorowany");
            entity.Property(e => e.CedKntKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("CED_KntKoszt");
            entity.Property(e => e.CedKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CED_Kod");
            entity.Property(e => e.CedKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CED_Koszt");
            entity.Property(e => e.CedKwotaKontraktu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CED_KwotaKontraktu");
            entity.Property(e => e.CedKwotaWymagana)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_KwotaWymagana");
            entity.Property(e => e.CedNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CED_Nazwa");
            entity.Property(e => e.CedOpeFirmaA)
                .HasDefaultValue(0)
                .HasColumnName("CED_OpeFirmaA");
            entity.Property(e => e.CedOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("CED_OpeFirmaM");
            entity.Property(e => e.CedOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("CED_OpeFirmaZ");
            entity.Property(e => e.CedOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_OpeLp");
            entity.Property(e => e.CedOpeLpA)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_OpeLpA");
            entity.Property(e => e.CedOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_OpeLpZ");
            entity.Property(e => e.CedOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("CED_OpeNumerA");
            entity.Property(e => e.CedOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("CED_OpeNumerM");
            entity.Property(e => e.CedOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("CED_OpeNumerZ");
            entity.Property(e => e.CedOpeTypA)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_OpeTypA");
            entity.Property(e => e.CedOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_OpeTypM");
            entity.Property(e => e.CedOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_OpeTypZ");
            entity.Property(e => e.CedOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CED_Opis");
            entity.Property(e => e.CedPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_Przypomnienie");
            entity.Property(e => e.CedSzansa)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_Szansa");
            entity.Property(e => e.CedTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_Terminarz");
            entity.Property(e => e.CedTstampAkt)
                .HasDefaultValue(0)
                .HasColumnName("CED_TStampAkt");
            entity.Property(e => e.CedTylkoAktywni)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_TylkoAktywni");
            entity.Property(e => e.CedUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CED_Url");
            entity.Property(e => e.CedWymuszajTransakcje)
                .HasDefaultValue((short)0)
                .HasColumnName("CED_WymuszajTransakcje");
            entity.Property(e => e.CedZadaniaWymagane)
                .HasDefaultValue((byte)0)
                .HasColumnName("CED_ZadaniaWymagane");
        });

        modelBuilder.Entity<CrmetapyTwr>(entity =>
        {
            entity.HasKey(e => e.CetId).HasName("CET_Primary");

            entity.ToTable("CRMEtapyTwr", "CDN", tb => tb.HasTrigger("CRMEtapyTwr_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.CetCkenumer, e.CetCkelp }, "CETCKE");

            entity.HasIndex(e => e.CetCktid, "CETCKT");

            entity.Property(e => e.CetId).HasColumnName("CET_ID");
            entity.Property(e => e.CetCkelp)
                .HasDefaultValue((short)0)
                .HasColumnName("CET_CKELp");
            entity.Property(e => e.CetCkenumer)
                .HasDefaultValue(0)
                .HasColumnName("CET_CKENumer");
            entity.Property(e => e.CetCktid)
                .HasDefaultValue(0)
                .HasColumnName("CET_CKTId");
            entity.Property(e => e.CetPrzychodIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("CET_PrzychodIlosc");

            entity.HasOne(d => d.CrmkampEtapy).WithMany(p => p.CrmetapyTwrs)
                .HasForeignKey(d => new { d.CetCkenumer, d.CetCkelp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CETCKE");
        });

        modelBuilder.Entity<CrmkalendarzSync>(entity =>
        {
            entity.HasKey(e => e.CksId).HasName("CKS_Primary");

            entity.ToTable("CRMKalendarzSync", "CDN");

            entity.HasIndex(e => e.CksGoogleId, "CKSGoogleId");

            entity.HasIndex(e => e.CksOutlookId, "CKSOutlookId");

            entity.HasIndex(e => new { e.CksSyncNumer, e.CksSyncTyp, e.CksObiNumer, e.CksObiTyp }, "CKSSyncObi").IsUnique();

            entity.Property(e => e.CksId).HasColumnName("CKS_Id");
            entity.Property(e => e.CksCzasUsuniecia)
                .HasDefaultValue(0)
                .HasColumnName("CKS_CzasUsuniecia");
            entity.Property(e => e.CksGoogleId)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKS_GoogleId");
            entity.Property(e => e.CksObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("CKS_ObiNumer");
            entity.Property(e => e.CksObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKS_ObiTyp");
            entity.Property(e => e.CksOutlookId)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKS_OutlookId");
            entity.Property(e => e.CksSyncNumer)
                .HasDefaultValue(0)
                .HasColumnName("CKS_SyncNumer");
            entity.Property(e => e.CksSyncTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKS_SyncTyp");
        });

        modelBuilder.Entity<CrmkampEtapy>(entity =>
        {
            entity.HasKey(e => new { e.CkeGidnumer, e.CkeGidlp }).HasName("CKE_Primary");

            entity.ToTable("CRMKampEtapy", "CDN", tb =>
                {
                    tb.HasTrigger("CRMKampEtapyAlias_DeleteHandler");
                    tb.HasTrigger("CRMKampEtapy_DeleteHandler");
                });

            entity.HasIndex(e => new { e.CkeGidtyp, e.CkeGidnumer, e.CkePozycja }, "CKEPozycja");

            entity.Property(e => e.CkeGidnumer).HasColumnName("CKE_GIDNumer");
            entity.Property(e => e.CkeGidlp).HasColumnName("CKE_GIDLp");
            entity.Property(e => e.CkeAkcja)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKE_Akcja");
            entity.Property(e => e.CkeAkcjaWymagana)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_AkcjaWymagana");
            entity.Property(e => e.CkeAkcjaZa)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_AkcjaZa");
            entity.Property(e => e.CkeArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_Archiwalny");
            entity.Property(e => e.CkeCedId)
                .HasDefaultValue(0)
                .HasColumnName("CKE_CedId");
            entity.Property(e => e.CkeCzasPlanowany)
                .HasDefaultValue(0)
                .HasColumnName("CKE_CzasPlanowany");
            entity.Property(e => e.CkeCzasPlanowanyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_CzasPlanowanyJedn");
            entity.Property(e => e.CkeCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("CKE_CzasPrzypomnienia");
            entity.Property(e => e.CkeCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_CzasPrzypomnieniaJedn");
            entity.Property(e => e.CkeDataKoniec)
                .HasDefaultValue(0)
                .HasColumnName("CKE_DataKoniec");
            entity.Property(e => e.CkeDataStart)
                .HasDefaultValue(0)
                .HasColumnName("CKE_DataStart");
            entity.Property(e => e.CkeDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("CKE_DataUtworzenia");
            entity.Property(e => e.CkeEmailTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKE_EmailTemat");
            entity.Property(e => e.CkeEmailTresc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKE_EmailTresc");
            entity.Property(e => e.CkeEtapBezKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_EtapBezKnt");
            entity.Property(e => e.CkeEtapNadzorowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_EtapNadzorowany");
            entity.Property(e => e.CkeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("CKE_GIDFirma");
            entity.Property(e => e.CkeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_GIDTyp");
            entity.Property(e => e.CkeKntKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("CKE_KntKoszt");
            entity.Property(e => e.CkeKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKE_Kod");
            entity.Property(e => e.CkeKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKE_Koszt");
            entity.Property(e => e.CkeKwotaKontraktu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKE_KwotaKontraktu");
            entity.Property(e => e.CkeKwotaWymagana)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_KwotaWymagana");
            entity.Property(e => e.CkeNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKE_Nazwa");
            entity.Property(e => e.CkeOpeFirmaA)
                .HasDefaultValue(0)
                .HasColumnName("CKE_OpeFirmaA");
            entity.Property(e => e.CkeOpeLpA)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_OpeLpA");
            entity.Property(e => e.CkeOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("CKE_OpeMNumer");
            entity.Property(e => e.CkeOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("CKE_OpeNumerA");
            entity.Property(e => e.CkeOpeTypA)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_OpeTypA");
            entity.Property(e => e.CkeOpeUnumer)
                .HasDefaultValue(0)
                .HasColumnName("CKE_OpeUNumer");
            entity.Property(e => e.CkeOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKE_Opis");
            entity.Property(e => e.CkePozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_Pozycja");
            entity.Property(e => e.CkePrzychodIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("CKE_PrzychodIlosc");
            entity.Property(e => e.CkePrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_Przypomnienie");
            entity.Property(e => e.CkeSzansa)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_Szansa");
            entity.Property(e => e.CkeTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_Terminarz");
            entity.Property(e => e.CkeTylkoAktywni)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_TylkoAktywni");
            entity.Property(e => e.CkeUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKE_Url");
            entity.Property(e => e.CkeWyliczKontrakt)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_WyliczKontrakt");
            entity.Property(e => e.CkeWymuszajTransakcje)
                .HasDefaultValue((short)0)
                .HasColumnName("CKE_WymuszajTransakcje");
            entity.Property(e => e.CkeZadaniaWymagane)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKE_ZadaniaWymagane");

            entity.HasOne(d => d.CkeGidnumerNavigation).WithMany(p => p.CrmkampEtapies)
                .HasForeignKey(d => d.CkeGidnumer)
                .HasConstraintName("FK_CkePrimary");
        });

        modelBuilder.Entity<CrmkampNag>(entity =>
        {
            entity.HasKey(e => e.CknGidnumer).HasName("CKN_Primary");

            entity.ToTable("CRMKampNag", "CDN", tb => tb.HasTrigger("CRMKampNag_DeleteHandler"));

            entity.HasIndex(e => e.CknDataUtw, "CKNDataUtw");

            entity.HasIndex(e => new { e.CknKod, e.CknGidtyp }, "CKNKod").IsUnique();

            entity.HasIndex(e => new { e.CknGidtyp, e.CknRok, e.CknMiesiac, e.CknSeria, e.CknNumer }, "CKNNumeracja").IsUnique();

            entity.HasIndex(e => new { e.CknNazwa, e.CknGidtyp }, "CknNazwa");

            entity.HasIndex(e => e.CknDataStart, "CknStart");

            entity.HasIndex(e => e.CknZakonczona, "CknZak");

            entity.Property(e => e.CknGidnumer).HasColumnName("CKN_GIDNumer");
            entity.Property(e => e.CknAntId)
                .HasDefaultValue(0)
                .HasColumnName("CKN_AntId");
            entity.Property(e => e.CknArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKN_Archiwalny");
            entity.Property(e => e.CknCyklKoniec)
                .HasDefaultValue(0)
                .HasColumnName("CKN_CyklKoniec");
            entity.Property(e => e.CknCyklTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_CyklTyp");
            entity.Property(e => e.CknCykliczna)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKN_Cykliczna");
            entity.Property(e => e.CknDataKoniec)
                .HasDefaultValue(0)
                .HasColumnName("CKN_DataKoniec");
            entity.Property(e => e.CknDataStart)
                .HasDefaultValue(0)
                .HasColumnName("CKN_DataStart");
            entity.Property(e => e.CknDataUtw)
                .HasDefaultValue(0)
                .HasColumnName("CKN_DataUtw");
            entity.Property(e => e.CknDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("CKN_DataZakonczenia");
            entity.Property(e => e.CknFrsId)
                .HasDefaultValue(0)
                .HasColumnName("CKN_FrsId");
            entity.Property(e => e.CknGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("CKN_GIDFirma");
            entity.Property(e => e.CknGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_GIDLp");
            entity.Property(e => e.CknGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_GIDTyp");
            entity.Property(e => e.CknIleEtapow)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_IleEtapow");
            entity.Property(e => e.CknIloscCykli)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_IloscCykli");
            entity.Property(e => e.CknIloscProspekt)
                .HasDefaultValue(0)
                .HasColumnName("CKN_IloscProspekt");
            entity.Property(e => e.CknInterwal)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_Interwal");
            entity.Property(e => e.CknJedenWatek)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_JedenWatek");
            entity.Property(e => e.CknKategoria).HasColumnName("CKN_Kategoria");
            entity.Property(e => e.CknKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKN_Kod");
            entity.Property(e => e.CknKontrolujIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKN_KontrolujIlosc");
            entity.Property(e => e.CknKopiujAtrybuty)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKN_KopiujAtrybuty");
            entity.Property(e => e.CknKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKN_Koszt");
            entity.Property(e => e.CknMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKN_Miesiac");
            entity.Property(e => e.CknNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKN_Nazwa");
            entity.Property(e => e.CknNumer)
                .HasDefaultValue(0)
                .HasColumnName("CKN_Numer");
            entity.Property(e => e.CknOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("CKN_OpeFirma");
            entity.Property(e => e.CknOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_OpeLp");
            entity.Property(e => e.CknOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("CKN_OpeMNumer");
            entity.Property(e => e.CknOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("CKN_OpeNumer");
            entity.Property(e => e.CknOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_OpeTyp");
            entity.Property(e => e.CknOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKN_Opis");
            entity.Property(e => e.CknPrzychodIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("CKN_PrzychodIlosc");
            entity.Property(e => e.CknPrzychodWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CKN_PrzychodWartosc");
            entity.Property(e => e.CknRok)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_Rok");
            entity.Property(e => e.CknRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("CKN_RokMiesiac");
            entity.Property(e => e.CknSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKN_Seria");
            entity.Property(e => e.CknTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("CKN_TwrNumer");
            entity.Property(e => e.CknTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_TwrTyp");
            entity.Property(e => e.CknUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CKN_Url");
            entity.Property(e => e.CknWielokrotneDodawanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKN_WielokrotneDodawanie");
            entity.Property(e => e.CknWyliczPrzychod)
                .HasDefaultValue((byte)0)
                .HasColumnName("CKN_WyliczPrzychod");
            entity.Property(e => e.CknWzNumer)
                .HasDefaultValue(0)
                .HasColumnName("CKN_WzNumer");
            entity.Property(e => e.CknZakonczona)
                .HasDefaultValue((short)0)
                .HasColumnName("CKN_Zakonczona");
        });

        modelBuilder.Entity<CrmkampTwr>(entity =>
        {
            entity.HasKey(e => e.CktId).HasName("CKT_Primary");

            entity.ToTable("CRMKampTwr", "CDN", tb =>
                {
                    tb.HasTrigger("CRMKampTwr_DeleteHandler");
                    tb.HasTrigger("CRMKampTwr_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.CktCknnumer, "CKTCKN");

            entity.HasIndex(e => new { e.CktTwrNumer, e.CktTwrTyp }, "CKTTwr");

            entity.Property(e => e.CktId).HasColumnName("CKT_ID");
            entity.Property(e => e.CktCknnumer)
                .HasDefaultValue(0)
                .HasColumnName("CKT_CKNNumer");
            entity.Property(e => e.CktPrzychodIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("CKT_PrzychodIlosc");
            entity.Property(e => e.CktTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("CKT_TwrNumer");
            entity.Property(e => e.CktTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CKT_TwrTyp");

            entity.HasOne(d => d.CktCknnumerNavigation).WithMany(p => p.CrmkampTwrs)
                .HasForeignKey(d => d.CktCknnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CKTCKN");
        });

        modelBuilder.Entity<CrmkntEtapy>(entity =>
        {
            entity.HasKey(e => e.CekId).HasName("CEK_Primary");

            entity.ToTable("CRMKntEtapy", "CDN", tb =>
                {
                    tb.HasTrigger("CRMKntEtapy_DeleteHandler");
                    tb.HasTrigger("CRMKntEtapy_InsertUpdateHandler");
                    tb.HasTrigger("CRMKntEtapy_ZakonczCEK");
                });

            entity.HasIndex(e => new { e.CekAkwNumer, e.CekAkwOsobaLp }, "CEKAkwOsoba");

            entity.HasIndex(e => e.CekAntId, "CEKAnkieta");

            entity.HasIndex(e => e.CekDataAkcji, "CEKDataAkcji");

            entity.HasIndex(e => new { e.CekCkenumer, e.CekCkelp, e.CekDataAkcji, e.CekKntNumer, e.CekNumerCyklu }, "CEKEtap");

            entity.HasIndex(e => new { e.CekKnAtyp, e.CekKnAnumer }, "CEKKnA");

            entity.HasIndex(e => e.CekFiaskoId, "CEKKodZak");

            entity.HasIndex(e => e.CekKntNumer, "CEKKontrahent");

            entity.HasIndex(e => new { e.CekKntNumer, e.CekKntOsobaLp }, "CEKOsoba");

            entity.HasIndex(e => e.CekTypKnt, "CEKTypKnt");

            entity.HasIndex(e => e.CekAntZadId, "CEKZadAnkieta");

            entity.HasIndex(e => new { e.CekStatus, e.CekOpeNumerA, e.CekDataAkcji, e.CekId }, "CekAkcja").IsUnique();

            entity.HasIndex(e => new { e.CekAkwNumer, e.CekDataAkcji }, "CekAkwizytor");

            entity.HasIndex(e => new { e.CekKntNumer, e.CekNumerCyklu }, "CekCykl");

            entity.HasIndex(e => new { e.CekStatus, e.CekOpeNumer, e.CekDataAkcji, e.CekId }, "CekOdpowiedzialny").IsUnique();

            entity.Property(e => e.CekId).HasColumnName("CEK_ID");
            entity.Property(e => e.CekAkcja)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CEK_Akcja");
            entity.Property(e => e.CekAkcjaWykonana)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_AkcjaWykonana");
            entity.Property(e => e.CekAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("CEK_AkwFirma");
            entity.Property(e => e.CekAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_AkwLp");
            entity.Property(e => e.CekAkwLpKoniec)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_AkwLpKoniec");
            entity.Property(e => e.CekAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("CEK_AkwNumer");
            entity.Property(e => e.CekAkwOsobaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_AkwOsobaLp");
            entity.Property(e => e.CekAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_AkwTyp");
            entity.Property(e => e.CekAntId)
                .HasDefaultValue(0)
                .HasColumnName("CEK_AntId");
            entity.Property(e => e.CekAntZadId)
                .HasDefaultValue(0)
                .HasColumnName("CEK_AntZadId");
            entity.Property(e => e.CekCkefirma)
                .HasDefaultValue(0)
                .HasColumnName("CEK_CKEFirma");
            entity.Property(e => e.CekCkelp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_CKELp");
            entity.Property(e => e.CekCkenumer)
                .HasDefaultValue(0)
                .HasColumnName("CEK_CKENumer");
            entity.Property(e => e.CekCketyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_CKETyp");
            entity.Property(e => e.CekCyklKoniec)
                .HasDefaultValue(0)
                .HasColumnName("CEK_CyklKoniec");
            entity.Property(e => e.CekCyklTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_CyklTyp");
            entity.Property(e => e.CekCykliczna)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_Cykliczna");
            entity.Property(e => e.CekCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("CEK_CzasPrzypomnienia");
            entity.Property(e => e.CekCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("CEK_CzasPrzypomnieniaJedn");
            entity.Property(e => e.CekCzkzrdId)
                .HasDefaultValue(0)
                .HasColumnName("CEK_CZKZrdID");
            entity.Property(e => e.CekDataAkcji)
                .HasDefaultValue(0)
                .HasColumnName("CEK_DataAkcji");
            entity.Property(e => e.CekDataKoniec)
                .HasDefaultValue(0)
                .HasColumnName("CEK_DataKoniec");
            entity.Property(e => e.CekDataStart)
                .HasDefaultValue(0)
                .HasColumnName("CEK_DataStart");
            entity.Property(e => e.CekDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("CEK_DataZakonczenia");
            entity.Property(e => e.CekFiaskoId)
                .HasDefaultValue(0)
                .HasColumnName("CEK_FiaskoID");
            entity.Property(e => e.CekIloscCykli)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_IloscCykli");
            entity.Property(e => e.CekInterwal)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_Interwal");
            entity.Property(e => e.CekKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("CEK_KnANumer");
            entity.Property(e => e.CekKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_KnATyp");
            entity.Property(e => e.CekKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("CEK_KntFirma");
            entity.Property(e => e.CekKntKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("CEK_KntKoszt");
            entity.Property(e => e.CekKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_KntLp");
            entity.Property(e => e.CekKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("CEK_KntNumer");
            entity.Property(e => e.CekKntOsobaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_KntOsobaLp");
            entity.Property(e => e.CekKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_KntTyp");
            entity.Property(e => e.CekKopiujAtrybuty)
                .HasDefaultValue((byte)0)
                .HasColumnName("CEK_KopiujAtrybuty");
            entity.Property(e => e.CekKopiujBinarne)
                .HasDefaultValue((byte)0)
                .HasColumnName("CEK_KopiujBinarne");
            entity.Property(e => e.CekKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CEK_Kwota");
            entity.Property(e => e.CekNotatki)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CEK_Notatki");
            entity.Property(e => e.CekNumerCyklu)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_NumerCyklu");
            entity.Property(e => e.CekOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("CEK_OpeFirma");
            entity.Property(e => e.CekOpeFirmaA)
                .HasDefaultValue(0)
                .HasColumnName("CEK_OpeFirmaA");
            entity.Property(e => e.CekOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("CEK_OpeFirmaM");
            entity.Property(e => e.CekOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_OpeLp");
            entity.Property(e => e.CekOpeLpA)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_OpeLpA");
            entity.Property(e => e.CekOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_OpeLpM");
            entity.Property(e => e.CekOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("CEK_OpeNumer");
            entity.Property(e => e.CekOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("CEK_OpeNumerA");
            entity.Property(e => e.CekOpeNumerD)
                .HasDefaultValue(0)
                .HasColumnName("CEK_OpeNumerD");
            entity.Property(e => e.CekOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("CEK_OpeNumerM");
            entity.Property(e => e.CekOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_OpeTyp");
            entity.Property(e => e.CekOpeTypA)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_OpeTypA");
            entity.Property(e => e.CekOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_OpeTypM");
            entity.Property(e => e.CekPrzeniesionyZ)
                .HasDefaultValue(0)
                .HasColumnName("CEK_PrzeniesionyZ");
            entity.Property(e => e.CekPrzychodIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("CEK_PrzychodIlosc");
            entity.Property(e => e.CekPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("CEK_Przypomnienie");
            entity.Property(e => e.CekSaZadania)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_SaZadania");
            entity.Property(e => e.CekStatus)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_Status");
            entity.Property(e => e.CekSzansa)
                .HasDefaultValue((short)0)
                .HasColumnName("CEK_Szansa");
            entity.Property(e => e.CekTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("CEK_Terminarz");
            entity.Property(e => e.CekTstampAkt)
                .HasDefaultValue(0)
                .HasColumnName("CEK_TStampAkt");
            entity.Property(e => e.CekTypKnt)
                .HasDefaultValue(0)
                .HasColumnName("CEK_TypKnt");
            entity.Property(e => e.CekUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CEK_Url");
            entity.Property(e => e.CekWyliczKwote)
                .HasDefaultValue((byte)0)
                .HasColumnName("CEK_WyliczKwote");
        });

        modelBuilder.Entity<CrmkntEtapyTwr>(entity =>
        {
            entity.HasKey(e => e.CptId).HasName("CPT_Primary");

            entity.ToTable("CRMKntEtapyTwr", "CDN");

            entity.HasIndex(e => e.CptCekid, "CPTCEK");

            entity.HasIndex(e => e.CptCktid, "CPTCKT");

            entity.Property(e => e.CptId).HasColumnName("CPT_ID");
            entity.Property(e => e.CptCekid)
                .HasDefaultValue(0)
                .HasColumnName("CPT_CEKId");
            entity.Property(e => e.CptCktid)
                .HasDefaultValue(0)
                .HasColumnName("CPT_CKTId");
            entity.Property(e => e.CptPrzychodIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("CPT_PrzychodIlosc");

            entity.HasOne(d => d.CptCek).WithMany(p => p.CrmkntEtapyTwrs)
                .HasForeignKey(d => d.CptCekid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CPTCEK");

            entity.HasOne(d => d.CptCkt).WithMany(p => p.CrmkntEtapyTwrs)
                .HasForeignKey(d => d.CptCktid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CPTCKT");
        });

        modelBuilder.Entity<CrmraportyDef>(entity =>
        {
            entity.HasKey(e => e.CrdId).HasName("CRD_Primary");

            entity.ToTable("CRMRaportyDef", "CDN", tb =>
                {
                    tb.HasTrigger("CRMRaportyDef_CzasModyfikacjiC");
                    tb.HasTrigger("CRMRaportyDef_DeleteHandler");
                });

            entity.HasIndex(e => e.CrdKod, "CRDKod").IsUnique();

            entity.Property(e => e.CrdId).HasColumnName("CRD_Id");
            entity.Property(e => e.CrdCena)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_Cena");
            entity.Property(e => e.CrdCzasArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("CRD_CzasArchiwizacji");
            entity.Property(e => e.CrdCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("CRD_CzasModyfikacji");
            entity.Property(e => e.CrdCzasModyfikacjiC)
                .HasDefaultValue(0)
                .HasColumnName("CRD_CzasModyfikacjiC");
            entity.Property(e => e.CrdCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("CRD_CzasUtworzenia");
            entity.Property(e => e.CrdDostawca)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_Dostawca");
            entity.Property(e => e.CrdEkspozycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_Ekspozycja");
            entity.Property(e => e.CrdFacing)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_Facing");
            entity.Property(e => e.CrdIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_Ilosc");
            entity.Property(e => e.CrdKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CRD_Kod");
            entity.Property(e => e.CrdNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CRD_Nazwa");
            entity.Property(e => e.CrdOddzialowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_Oddzialowy");
            entity.Property(e => e.CrdOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("CRD_OpeNumerA");
            entity.Property(e => e.CrdOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("CRD_OpeNumerM");
            entity.Property(e => e.CrdOpeNumerU)
                .HasDefaultValue(0)
                .HasColumnName("CRD_OpeNumerU");
            entity.Property(e => e.CrdTwrElem)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_TwrElem");
            entity.Property(e => e.CrdTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRD_Typ");

            entity.HasMany(d => d.CrtTwrNumers).WithMany(p => p.CrtCrds)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmraportyTwr",
                    r => r.HasOne<TwrKarty>().WithMany()
                        .HasForeignKey("CrtTwrNumer")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CRTTowar"),
                    l => l.HasOne<CrmraportyDef>().WithMany()
                        .HasForeignKey("CrtCrdid")
                        .HasConstraintName("FK_CRTPrimary"),
                    j =>
                    {
                        j.HasKey("CrtCrdid", "CrtTwrNumer").HasName("CRT_Primary");
                        j.ToTable("CRMRaportyTwr", "CDN");
                        j.HasIndex(new[] { "CrtTwrNumer" }, "CRTTowar");
                        j.IndexerProperty<int>("CrtCrdid").HasColumnName("CRT_CRDId");
                        j.IndexerProperty<int>("CrtTwrNumer").HasColumnName("CRT_TwrNumer");
                    });
        });

        modelBuilder.Entity<CrmraportyKolumny>(entity =>
        {
            entity.HasKey(e => e.CrkId).HasName("CRK_Primary");

            entity.ToTable("CRMRaportyKolumny", "CDN");

            entity.HasIndex(e => e.CrkAtKid, "CRKAtKID");

            entity.HasIndex(e => e.CrkCrdid, "CRKCRDId");

            entity.HasIndex(e => new { e.CrkCrdid, e.CrkPozycja }, "CRKPozycja");

            entity.Property(e => e.CrkId).HasColumnName("CRK_Id");
            entity.Property(e => e.CrkAtKid)
                .HasDefaultValue(0)
                .HasColumnName("CRK_AtKID");
            entity.Property(e => e.CrkCrdid)
                .HasDefaultValue(0)
                .HasColumnName("CRK_CRDId");
            entity.Property(e => e.CrkPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("CRK_Pozycja");
            entity.Property(e => e.CrkWymagana)
                .HasDefaultValue((byte)0)
                .HasColumnName("CRK_Wymagana");

            entity.HasOne(d => d.CrkAtK).WithMany(p => p.CrmraportyKolumnies)
                .HasForeignKey(d => d.CrkAtKid)
                .HasConstraintName("FK_CRKAtKID");

            entity.HasOne(d => d.CrkCrd).WithMany(p => p.CrmraportyKolumnies)
                .HasForeignKey(d => d.CrkCrdid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CRKCRDId");
        });

        modelBuilder.Entity<CrmsrsKontrahenci>(entity =>
        {
            entity.HasKey(e => new { e.CskSseNumer, e.CskSseLp, e.CskKnSnumer, e.CskKnSlp }).HasName("CSK_Primary");

            entity.ToTable("CRMSrsKontrahenci", "CDN", tb => tb.HasTrigger("CRMSrsKontrahenci_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.CskKnSnumer, e.CskKnSlp }, "CSKKontrahent");

            entity.Property(e => e.CskSseNumer).HasColumnName("CSK_SseNumer");
            entity.Property(e => e.CskSseLp).HasColumnName("CSK_SseLp");
            entity.Property(e => e.CskKnSnumer).HasColumnName("CSK_KnSNumer");
            entity.Property(e => e.CskKnSlp).HasColumnName("CSK_KnSLp");

            entity.HasOne(d => d.SrsElem).WithMany(p => p.CrmsrsKontrahencis)
                .HasForeignKey(d => new { d.CskSseNumer, d.CskSseLp })
                .HasConstraintName("FK_CSKPrimary");
        });

        modelBuilder.Entity<CrmwizytyAnkiety>(entity =>
        {
            entity.HasKey(e => new { e.CwaCwenumer, e.CwaCwelp, e.CwaCwetyp, e.CwaAntid, e.CwaZadId, e.CwaTwrnumer, e.CwaTwrtyp }).HasName("CWA_Primary");

            entity.ToTable("CRMWizytyAnkiety", "CDN", tb =>
                {
                    tb.HasTrigger("CRMWizytyAnkiety_Delete");
                    tb.HasTrigger("CRMWizytyAnkiety_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.CwaAntid, "CWAANTId");

            entity.HasIndex(e => e.CwaTwrnumer, "CWATWR");

            entity.Property(e => e.CwaCwenumer).HasColumnName("CWA_CWENumer");
            entity.Property(e => e.CwaCwelp).HasColumnName("CWA_CWELp");
            entity.Property(e => e.CwaCwetyp).HasColumnName("CWA_CWETyp");
            entity.Property(e => e.CwaAntid).HasColumnName("CWA_ANTId");
            entity.Property(e => e.CwaZadId).HasColumnName("CWA_ZadId");
            entity.Property(e => e.CwaTwrnumer).HasColumnName("CWA_TWRNumer");
            entity.Property(e => e.CwaTwrtyp).HasColumnName("CWA_TWRTyp");
        });

        modelBuilder.Entity<CrmwizytyDokTwr>(entity =>
        {
            entity.HasKey(e => new { e.CdtCwenumer, e.CdtCwelp, e.CdtCwetyp, e.CdtTwrNumer }).HasName("CDT_Primary");

            entity.ToTable("CRMWizytyDokTwr", "CDN");

            entity.HasIndex(e => e.CdtTwrNumer, "CDTTowar");

            entity.Property(e => e.CdtCwenumer).HasColumnName("CDT_CWENumer");
            entity.Property(e => e.CdtCwelp).HasColumnName("CDT_CWELp");
            entity.Property(e => e.CdtCwetyp).HasColumnName("CDT_CWETyp");
            entity.Property(e => e.CdtTwrNumer).HasColumnName("CDT_TwrNumer");
            entity.Property(e => e.CdtIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("CDT_Ilosc");
            entity.Property(e => e.CdtWymagaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("CDT_Wymagaj");

            entity.HasOne(d => d.CdtTwrNumerNavigation).WithMany(p => p.CrmwizytyDokTwrs)
                .HasForeignKey(d => d.CdtTwrNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDTTowar");

            entity.HasOne(d => d.CrmwizytyElem).WithMany(p => p.CrmwizytyDokTwrs)
                .HasForeignKey(d => new { d.CdtCwenumer, d.CdtCwelp, d.CdtCwetyp })
                .HasConstraintName("FK_CDTPrimary");
        });

        modelBuilder.Entity<CrmwizytyElem>(entity =>
        {
            entity.HasKey(e => new { e.CweGidNumer, e.CweGidLp, e.CweGidTyp }).HasName("CWE_Primary");

            entity.ToTable("CRMWizytyElem", "CDN", tb =>
                {
                    tb.HasTrigger("CRMWizytyElem_CzasModyfikacjiC");
                    tb.HasTrigger("CRMWizytyElem_DeleteHandler");
                    tb.HasTrigger("CRMWizytyElem_DeletePrzenumeruj");
                    tb.HasTrigger("CRMWizytyElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.CweGidTyp, e.CweGidNumer, e.CwePozycja }, "CWEPozycja");

            entity.HasIndex(e => new { e.CweGidNumer, e.CweGidTyp }, "CWERelacja");

            entity.HasIndex(e => e.CweRodzajId, "CWERodzajId");

            entity.Property(e => e.CweGidNumer).HasColumnName("CWE_GidNumer");
            entity.Property(e => e.CweGidLp).HasColumnName("CWE_GidLp");
            entity.Property(e => e.CweGidTyp).HasColumnName("CWE_GidTyp");
            entity.Property(e => e.CweCzasArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("CWE_CzasArchiwizacji");
            entity.Property(e => e.CweCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("CWE_CzasModyfikacji");
            entity.Property(e => e.CweCzasModyfikacjiC)
                .HasDefaultValue(0)
                .HasColumnName("CWE_CzasModyfikacjiC");
            entity.Property(e => e.CweDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("CWE_DataUtworzenia");
            entity.Property(e => e.CweGidFirma)
                .HasDefaultValue(0)
                .HasColumnName("CWE_GidFirma");
            entity.Property(e => e.CweKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWE_Kod");
            entity.Property(e => e.CweNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWE_Nazwa");
            entity.Property(e => e.CweOddzialowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWE_Oddzialowy");
            entity.Property(e => e.CweOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("CWE_OpeNumerA");
            entity.Property(e => e.CweOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("CWE_OpeNumerM");
            entity.Property(e => e.CweOpeNumerU)
                .HasDefaultValue(0)
                .HasColumnName("CWE_OpeNumerU");
            entity.Property(e => e.CweOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWE_Opis");
            entity.Property(e => e.CweOpisWykonania)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("CWE_OpisWykonania");
            entity.Property(e => e.CwePowodNiewykonania)
                .HasMaxLength(49)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWE_PowodNiewykonania");
            entity.Property(e => e.CwePowodNiewykonaniaId)
                .HasDefaultValue(0)
                .HasColumnName("CWE_PowodNiewykonaniaId");
            entity.Property(e => e.CwePozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("CWE_Pozycja");
            entity.Property(e => e.CwePrzypisz)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWE_Przypisz");
            entity.Property(e => e.CwePrzypiszPo)
                .HasDefaultValue(0)
                .HasColumnName("CWE_PrzypiszPo");
            entity.Property(e => e.CwePrzypiszPrzed)
                .HasDefaultValue(0)
                .HasColumnName("CWE_PrzypiszPrzed");
            entity.Property(e => e.CweRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("CWE_RodzajId");
            entity.Property(e => e.CweUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWE_Url");
            entity.Property(e => e.CweWykonano)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWE_Wykonano");
            entity.Property(e => e.CweWymagany)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWE_Wymagany");
        });

        modelBuilder.Entity<CrmwizytyElemDok>(entity =>
        {
            entity.HasKey(e => new { e.CwdCwenumer, e.CwdCwelp, e.CwdCwetyp, e.CwdDokTyp }).HasName("CWD_Primary");

            entity.ToTable("CRMWizytyElemDok", "CDN");

            entity.HasIndex(e => e.CwdDokTyp, "CWDDok");

            entity.Property(e => e.CwdCwenumer).HasColumnName("CWD_CWENumer");
            entity.Property(e => e.CwdCwelp).HasColumnName("CWD_CWELp");
            entity.Property(e => e.CwdCwetyp).HasColumnName("CWD_CWETyp");
            entity.Property(e => e.CwdDokTyp).HasColumnName("CWD_DokTyp");

            entity.HasOne(d => d.CrmwizytyElem).WithMany(p => p.CrmwizytyElemDoks)
                .HasForeignKey(d => new { d.CwdCwenumer, d.CwdCwelp, d.CwdCwetyp })
                .HasConstraintName("FK_CWDPrimary");
        });

        modelBuilder.Entity<CrmwizytyElemObiekty>(entity =>
        {
            entity.HasKey(e => new { e.CwoCwenumer, e.CwoCwelp, e.CwoCwetyp, e.CwoObiTyp, e.CwoObiNumer, e.CwoObiLp }).HasName("CWO_Primary");

            entity.ToTable("CRMWizytyElemObiekty", "CDN", tb =>
                {
                    tb.HasTrigger("CRMWizytyElemObiekty_DeleteHandler");
                    tb.HasTrigger("CRMWizytyElemObiekty_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.CwoObiNumer, e.CwoObiLp }, "CWOObiNumerLp");

            entity.Property(e => e.CwoCwenumer).HasColumnName("CWO_CWENumer");
            entity.Property(e => e.CwoCwelp).HasColumnName("CWO_CWELp");
            entity.Property(e => e.CwoCwetyp).HasColumnName("CWO_CWETyp");
            entity.Property(e => e.CwoObiTyp).HasColumnName("CWO_ObiTyp");
            entity.Property(e => e.CwoObiNumer).HasColumnName("CWO_ObiNumer");
            entity.Property(e => e.CwoObiLp).HasColumnName("CWO_ObiLp");

            entity.HasOne(d => d.CrmwizytyElem).WithMany(p => p.CrmwizytyElemObiekties)
                .HasForeignKey(d => new { d.CwoCwenumer, d.CwoCwelp, d.CwoCwetyp })
                .HasConstraintName("FK_CWOPrimary");
        });

        modelBuilder.Entity<CrmwizytyNag>(entity =>
        {
            entity.HasKey(e => e.CwnId).HasName("CWN_Primary");

            entity.ToTable("CRMWizytyNag", "CDN", tb =>
                {
                    tb.HasTrigger("CRMWizytyNagAlias_DeleteHandler");
                    tb.HasTrigger("CRMWizytyNag_CzasModyfikacjiC");
                    tb.HasTrigger("CRMWizytyNag_DeleteHandler");
                    tb.HasTrigger("CRMWizytyNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.CwnKnAnumer, "CWNAdres");

            entity.HasIndex(e => new { e.CwnDgetyp, e.CwnDgenumer, e.CwnDgelp }, "CWNDelegacja");

            entity.HasIndex(e => e.CwnFrsId, "CWNFrsID");

            entity.HasIndex(e => e.CwnKntNumer, "CWNKontrahent");

            entity.HasIndex(e => e.CwnNazwa, "CWNNazwa");

            entity.HasIndex(e => new { e.CwnRok, e.CwnMiesiac, e.CwnSeria, e.CwnNumer }, "CWNNumer").IsUnique();

            entity.HasIndex(e => e.CwnObsluga, "CWNObsluga");

            entity.HasIndex(e => e.CwnOpiekun, "CWNOpiekun");

            entity.HasIndex(e => new { e.CwnKntTyp, e.CwnKntNumer, e.CwnKntOsobaLp }, "CWNOsoba");

            entity.HasIndex(e => e.CwnTerminOd, "CWNTermin");

            entity.HasIndex(e => e.CwnTsNid, "CWNTrasa");

            entity.HasIndex(e => e.CwnTypId, "CWNTypId");

            entity.HasIndex(e => e.CwnWzNumer, "CWNWzorzec");

            entity.Property(e => e.CwnId).HasColumnName("CWN_ID");
            entity.Property(e => e.CwnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("CWN_Aktywny");
            entity.Property(e => e.CwnCalyDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWN_CalyDzien");
            entity.Property(e => e.CwnCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("CWN_CzasModyfikacji");
            entity.Property(e => e.CwnCzasModyfikacjiC)
                .HasDefaultValue(0)
                .HasColumnName("CWN_CzasModyfikacjiC");
            entity.Property(e => e.CwnDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("CWN_DataWystawienia");
            entity.Property(e => e.CwnDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("CWN_DataZakonczenia");
            entity.Property(e => e.CwnDataZakonczeniaOd)
                .HasDefaultValue(0)
                .HasColumnName("CWN_DataZakonczeniaOd");
            entity.Property(e => e.CwnDgefirma)
                .HasDefaultValue(0)
                .HasColumnName("CWN_DGEFirma");
            entity.Property(e => e.CwnDgelp)
                .HasDefaultValue((short)0)
                .HasColumnName("CWN_DGELp");
            entity.Property(e => e.CwnDgenumer)
                .HasDefaultValue(0)
                .HasColumnName("CWN_DGENumer");
            entity.Property(e => e.CwnDgetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CWN_DGETyp");
            entity.Property(e => e.CwnFrsId)
                .HasDefaultValue(0)
                .HasColumnName("CWN_FrsId");
            entity.Property(e => e.CwnJednorazowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWN_Jednorazowa");
            entity.Property(e => e.CwnKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("CWN_KnANumer");
            entity.Property(e => e.CwnKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CWN_KnATyp");
            entity.Property(e => e.CwnKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("CWN_KntNumer");
            entity.Property(e => e.CwnKntOsobaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CWN_KntOsobaLp");
            entity.Property(e => e.CwnKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CWN_KntTyp");
            entity.Property(e => e.CwnMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWN_Miesiac");
            entity.Property(e => e.CwnNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWN_Nazwa");
            entity.Property(e => e.CwnNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("CWN_NrKursu");
            entity.Property(e => e.CwnNumer)
                .HasDefaultValue(0)
                .HasColumnName("CWN_Numer");
            entity.Property(e => e.CwnObsluga)
                .HasDefaultValue(0)
                .HasColumnName("CWN_Obsluga");
            entity.Property(e => e.CwnOpeNumerK)
                .HasDefaultValue(0)
                .HasColumnName("CWN_OpeNumerK");
            entity.Property(e => e.CwnOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("CWN_OpeNumerM");
            entity.Property(e => e.CwnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("CWN_OpeNumerW");
            entity.Property(e => e.CwnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("CWN_OpeNumerZ");
            entity.Property(e => e.CwnOpiekun)
                .HasDefaultValue(0)
                .HasColumnName("CWN_Opiekun");
            entity.Property(e => e.CwnOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWN_Opis");
            entity.Property(e => e.CwnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("CWN_Rok");
            entity.Property(e => e.CwnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWN_Seria");
            entity.Property(e => e.CwnStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWN_Stan");
            entity.Property(e => e.CwnTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("CWN_TerminDo");
            entity.Property(e => e.CwnTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("CWN_TerminOd");
            entity.Property(e => e.CwnTsNid)
                .HasDefaultValue(0)
                .HasColumnName("CWN_TsNId");
            entity.Property(e => e.CwnTypId)
                .HasDefaultValue(0)
                .HasColumnName("CWN_TypId");
            entity.Property(e => e.CwnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWN_URL");
            entity.Property(e => e.CwnWzNumer)
                .HasDefaultValue(0)
                .HasColumnName("CWN_WzNumer");
            entity.Property(e => e.CwnZakonczono)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWN_Zakonczono");
            entity.Property(e => e.CwnZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("CWN_ZewnetrznyId");
            entity.Property(e => e.CwnZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("CWN_ZewnetrznySys");
        });

        modelBuilder.Entity<CrmwizytyRptKolumny>(entity =>
        {
            entity.HasKey(e => new { e.CwrkCwenumer, e.CwrkCwelp, e.CwrkCwetyp, e.CwrkCrdid }).HasName("CWRK_Primary");

            entity.ToTable("CRMWizytyRptKolumny", "CDN", tb => tb.HasTrigger("CRMWizytyRptKolumny_InsertUpdateHandler"));

            entity.HasIndex(e => e.CwrkCrdid, "CWRKRaport");

            entity.Property(e => e.CwrkCwenumer).HasColumnName("CWRK_CWENumer");
            entity.Property(e => e.CwrkCwelp).HasColumnName("CWRK_CWELp");
            entity.Property(e => e.CwrkCwetyp).HasColumnName("CWRK_CWETyp");
            entity.Property(e => e.CwrkCrdid).HasColumnName("CWRK_CRDId");
            entity.Property(e => e.CwrkAtKid1)
                .HasDefaultValue(0)
                .HasColumnName("CWRK_AtKID1");
            entity.Property(e => e.CwrkAtKid2)
                .HasDefaultValue(0)
                .HasColumnName("CWRK_AtKID2");
            entity.Property(e => e.CwrkAtKid3)
                .HasDefaultValue(0)
                .HasColumnName("CWRK_AtKID3");
            entity.Property(e => e.CwrkAtKid4)
                .HasDefaultValue(0)
                .HasColumnName("CWRK_AtKID4");
            entity.Property(e => e.CwrkAtKid5)
                .HasDefaultValue(0)
                .HasColumnName("CWRK_AtKID5");
            entity.Property(e => e.CwrkWymagana1)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWRK_Wymagana1");
            entity.Property(e => e.CwrkWymagana2)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWRK_Wymagana2");
            entity.Property(e => e.CwrkWymagana3)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWRK_Wymagana3");
            entity.Property(e => e.CwrkWymagana4)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWRK_Wymagana4");
            entity.Property(e => e.CwrkWymagana5)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWRK_Wymagana5");
        });

        modelBuilder.Entity<CrmwizytyRptTwr>(entity =>
        {
            entity.HasKey(e => new { e.CwtCwenumer, e.CwtCwelp, e.CwtCwetyp, e.CwtCrdid, e.CwtTwrNumer }).HasName("CWT_Primary");

            entity.ToTable("CRMWizytyRptTwr", "CDN", tb => tb.HasTrigger("CRMWizytyRptTwr_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.CwtKntTyp, e.CwtKntNumer }, "CWTDostawca");

            entity.HasIndex(e => e.CwtEkspozycja, "CWTEkspozycja");

            entity.HasIndex(e => e.CwtCrdid, "CWTRaport");

            entity.HasIndex(e => e.CwtTwrNumer, "CWTTowar");

            entity.Property(e => e.CwtCwenumer).HasColumnName("CWT_CWENumer");
            entity.Property(e => e.CwtCwelp).HasColumnName("CWT_CWELp");
            entity.Property(e => e.CwtCwetyp).HasColumnName("CWT_CWETyp");
            entity.Property(e => e.CwtCrdid).HasColumnName("CWT_CRDId");
            entity.Property(e => e.CwtTwrNumer).HasColumnName("CWT_TwrNumer");
            entity.Property(e => e.CwtCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CWT_Cena");
            entity.Property(e => e.CwtCrkwartosc1)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWT_CRKWartosc1");
            entity.Property(e => e.CwtCrkwartosc2)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWT_CRKWartosc2");
            entity.Property(e => e.CwtCrkwartosc3)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWT_CRKWartosc3");
            entity.Property(e => e.CwtCrkwartosc4)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWT_CRKWartosc4");
            entity.Property(e => e.CwtCrkwartosc5)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWT_CRKWartosc5");
            entity.Property(e => e.CwtEkspozycja)
                .HasDefaultValue(0)
                .HasColumnName("CWT_Ekspozycja");
            entity.Property(e => e.CwtFacing)
                .HasDefaultValue((short)0)
                .HasColumnName("CWT_Facing");
            entity.Property(e => e.CwtIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("CWT_Ilosc");
            entity.Property(e => e.CwtJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWT_Jm");
            entity.Property(e => e.CwtKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("CWT_KntNumer");
            entity.Property(e => e.CwtKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("CWT_KntTyp");
            entity.Property(e => e.CwtObecny)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWT_Obecny");

            entity.HasOne(d => d.CwtTwrNumerNavigation).WithMany(p => p.CrmwizytyRptTwrs)
                .HasForeignKey(d => d.CwtTwrNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CWTTowar");
        });

        modelBuilder.Entity<CrmwzorceWizyt>(entity =>
        {
            entity.HasKey(e => e.CwwId).HasName("CWW_Primary");

            entity.ToTable("CRMWzorceWizyt", "CDN", tb =>
                {
                    tb.HasTrigger("CRMWzorceWizyt_CzasModyfikacjiC");
                    tb.HasTrigger("CRMWzorceWizyt_DeleteHandler");
                    tb.HasTrigger("CRMWzorceWizyt_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.CwwKod, "CWWKod").IsUnique();

            entity.HasIndex(e => e.CwwTypId, "CWWTypId");

            entity.Property(e => e.CwwId).HasColumnName("CWW_Id");
            entity.Property(e => e.CwwCalyDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWW_CalyDzien");
            entity.Property(e => e.CwwCzasArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("CWW_CzasArchiwizacji");
            entity.Property(e => e.CwwCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("CWW_CzasModyfikacji");
            entity.Property(e => e.CwwCzasModyfikacjiC)
                .HasDefaultValue(0)
                .HasColumnName("CWW_CzasModyfikacjiC");
            entity.Property(e => e.CwwCzasRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("CWW_CzasRealizacji");
            entity.Property(e => e.CwwDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("CWW_DataWystawienia");
            entity.Property(e => e.CwwKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWW_Kod");
            entity.Property(e => e.CwwNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWW_Nazwa");
            entity.Property(e => e.CwwOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("CWW_OpeNumerA");
            entity.Property(e => e.CwwOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("CWW_OpeNumerM");
            entity.Property(e => e.CwwOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("CWW_OpeNumerW");
            entity.Property(e => e.CwwOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWW_Opis");
            entity.Property(e => e.CwwRodzajeZdefinicji)
                .HasDefaultValue((byte)0)
                .HasColumnName("CWW_RodzajeZDefinicji");
            entity.Property(e => e.CwwTypId)
                .HasDefaultValue(0)
                .HasColumnName("CWW_TypId");
            entity.Property(e => e.CwwUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CWW_URL");

            entity.HasMany(d => d.CwrRodzajs).WithMany(p => p.CwrCwws)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmwzorceRodzajeKnt",
                    r => r.HasOne<Slowniki>().WithMany()
                        .HasForeignKey("CwrRodzajId")
                        .HasConstraintName("FK_CWRRodzaj"),
                    l => l.HasOne<CrmwzorceWizyt>().WithMany()
                        .HasForeignKey("CwrCwwid")
                        .HasConstraintName("FK_CWRPrimary"),
                    j =>
                    {
                        j.HasKey("CwrCwwid", "CwrRodzajId").HasName("CWR_Primary");
                        j.ToTable("CRMWzorceRodzajeKnt", "CDN");
                        j.IndexerProperty<int>("CwrCwwid").HasColumnName("CWR_CWWId");
                        j.IndexerProperty<int>("CwrRodzajId").HasColumnName("CWR_RodzajId");
                    });
        });

        modelBuilder.Entity<CrmzadaniaObiekty>(entity =>
        {
            entity.HasKey(e => new { e.CzoCdzId, e.CzoSseNumer, e.CzoSseLp, e.CzoObiTyp, e.CzoObiNumer }).HasName("CZO_Primary");

            entity.ToTable("CRMZadaniaObiekty", "CDN", tb => tb.HasTrigger("CRMZadaniaObiekty_InsertUpdateHandler"));

            entity.Property(e => e.CzoCdzId).HasColumnName("CZO_CdzId");
            entity.Property(e => e.CzoSseNumer).HasColumnName("CZO_SseNumer");
            entity.Property(e => e.CzoSseLp).HasColumnName("CZO_SseLP");
            entity.Property(e => e.CzoObiTyp).HasColumnName("CZO_ObiTyp");
            entity.Property(e => e.CzoObiNumer).HasColumnName("CZO_ObiNumer");
            entity.Property(e => e.CzoDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("CZO_DataUtworzenia");
        });

        modelBuilder.Entity<CrmzwiazaneKamp>(entity =>
        {
            entity.HasKey(e => e.CzkId).HasName("CZK_Primary");

            entity.ToTable("CRMZwiazaneKamp", "CDN", tb =>
                {
                    tb.HasTrigger("CRMZwiazaneKamp_DeleteHandler");
                    tb.HasTrigger("CRMZwiazaneKamp_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.CzkCknzwNumer, e.CzkCknzwLp }, "CZKKampZwiazana");

            entity.HasIndex(e => new { e.CzkCknnumer, e.CzkCknlp }, "CZKKampania");

            entity.Property(e => e.CzkId).HasColumnName("CZK_ID");
            entity.Property(e => e.CzkCknlp)
                .HasDefaultValue((short)0)
                .HasColumnName("CZK_CKNLp");
            entity.Property(e => e.CzkCknnumer)
                .HasDefaultValue(0)
                .HasColumnName("CZK_CKNNumer");
            entity.Property(e => e.CzkCknzwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("CZK_CKNZwLp");
            entity.Property(e => e.CzkCknzwNumer)
                .HasDefaultValue(0)
                .HasColumnName("CZK_CKNZwNumer");
            entity.Property(e => e.CzkData)
                .HasDefaultValue(0)
                .HasColumnName("CZK_Data");
            entity.Property(e => e.CzkDataMod)
                .HasDefaultValue(0)
                .HasColumnName("CZK_DataMod");
            entity.Property(e => e.CzkFiaskoId)
                .HasDefaultValue(0)
                .HasColumnName("CZK_FiaskoID");
            entity.Property(e => e.CzkStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("CZK_Status");
            entity.Property(e => e.CzkTermin)
                .HasDefaultValue(0)
                .HasColumnName("CZK_Termin");
            entity.Property(e => e.CzkWarunek)
                .HasDefaultValue((byte)0)
                .HasColumnName("CZK_Warunek");

            entity.HasOne(d => d.CzkCknnumerNavigation).WithMany(p => p.CrmzwiazaneKampCzkCknnumerNavigations)
                .HasForeignKey(d => d.CzkCknnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CZKKampania");

            entity.HasOne(d => d.CzkCknzwNumerNavigation).WithMany(p => p.CrmzwiazaneKampCzkCknzwNumerNavigations)
                .HasForeignKey(d => d.CzkCknzwNumer)
                .HasConstraintName("FK_CZKKampZwiazana");
        });

        modelBuilder.Entity<DaneBinarne>(entity =>
        {
            entity.HasKey(e => new { e.DabId, e.DabCzasArchiwizacji }).HasName("DAB_Primary");

            entity.ToTable("DaneBinarne", "CDN", tb =>
                {
                    tb.HasTrigger("DaneBinarneCzyMoznaUsunac");
                    tb.HasTrigger("DaneBinarne_DeleteAtrybutyHist");
                    tb.HasTrigger("DaneBinarne_DeleteHandler");
                    tb.HasTrigger("DaneBinarne_InsertUpdateHandler");
                    tb.HasTrigger("DaneBinarne_PicoUsuniete");
                    tb.HasTrigger("DaneBinarne_UzupelnijTlumaczenie");
                });

            entity.HasIndex(e => new { e.DabCzasArchiwizacji, e.DabCzasDodania, e.DabKod, e.DabId }, "DABDataKod");

            entity.HasIndex(e => new { e.DabCzasArchiwizacji, e.DabKod, e.DabId }, "DABKod").IsUnique();

            entity.HasIndex(e => e.DabOpeNumerD, "DABOpeUtworzyl");

            entity.HasIndex(e => new { e.DabCzasArchiwizacji, e.DabProcId, e.DabKod }, "DABProcID");

            entity.HasIndex(e => new { e.DabTlumaczenie, e.DabJezyk, e.DabCzasArchiwizacji }, "DABTlumaczenia").IsUnique();

            entity.Property(e => e.DabId)
                .ValueGeneratedOnAdd()
                .HasColumnName("DAB_ID");
            entity.Property(e => e.DabCzasArchiwizacji).HasColumnName("DAB_CzasArchiwizacji");
            entity.Property(e => e.DabAktywny)
                .HasDefaultValue(0)
                .HasColumnName("DAB_Aktywny");
            entity.Property(e => e.DabArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_Archiwalny");
            entity.Property(e => e.DabBi)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_BI");
            entity.Property(e => e.DabCzasDodania)
                .HasDefaultValue(0)
                .HasColumnName("DAB_CzasDodania");
            entity.Property(e => e.DabCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("DAB_CzasModyfikacji");
            entity.Property(e => e.DabDane)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("DAB_Dane");
            entity.Property(e => e.DabDbgid)
                .HasDefaultValue(0)
                .HasColumnName("DAB_DBGId");
            entity.Property(e => e.DabESklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_eSklep");
            entity.Property(e => e.DabESklepTypDanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_eSklepTypDanych");
            entity.Property(e => e.DabGpsdataPobrania)
                .HasDefaultValue(0)
                .HasColumnName("DAB_GPSDataPobrania");
            entity.Property(e => e.DabGpsdl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("DAB_GPSDl");
            entity.Property(e => e.DabGpsgodzinaPobrania)
                .HasDefaultValue(0)
                .HasColumnName("DAB_GPSGodzinaPobrania");
            entity.Property(e => e.DabGpssz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("DAB_GPSSz");
            entity.Property(e => e.DabIMall)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_iMall");
            entity.Property(e => e.DabJezyk)
                .HasDefaultValue(0)
                .HasColumnName("DAB_Jezyk");
            entity.Property(e => e.DabKod)
                .HasMaxLength(99)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_Kod");
            entity.Property(e => e.DabMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_MobSpr");
            entity.Property(e => e.DabNazwa)
                .HasMaxLength(99)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_Nazwa");
            entity.Property(e => e.DabOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("DAB_OpeNumer");
            entity.Property(e => e.DabOpeNumerD)
                .HasDefaultValue(0)
                .HasColumnName("DAB_OpeNumerD");
            entity.Property(e => e.DabOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_Opis");
            entity.Property(e => e.DabOpisArchiwizacji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_OpisArchiwizacji");
            entity.Property(e => e.DabPkprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_PKPrawa");
            entity.Property(e => e.DabPpprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_PPPrawa");
            entity.Property(e => e.DabProcId)
                .HasDefaultValue(0)
                .HasColumnName("DAB_ProcID");
            entity.Property(e => e.DabRetail)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_Retail");
            entity.Property(e => e.DabRozmiar)
                .HasDefaultValue(0)
                .HasColumnName("DAB_Rozmiar");
            entity.Property(e => e.DabRozszerzenie)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_Rozszerzenie");
            entity.Property(e => e.DabSystemowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_Systemowa");
            entity.Property(e => e.DabTlumaczenie)
                .HasDefaultValue(0)
                .HasColumnName("DAB_Tlumaczenie");
            entity.Property(e => e.DabTypId)
                .HasDefaultValue(0)
                .HasColumnName("DAB_TypId");
            entity.Property(e => e.DabUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_URL");
            entity.Property(e => e.DabUsuwac)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_Usuwac");
            entity.Property(e => e.DabWmsmagazynier)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_WMSMagazynier");
            entity.Property(e => e.DabWmszarzadzanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_WMSZarzadzanie");
            entity.Property(e => e.DabWszystkoPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAB_WszystkoPl");
            entity.Property(e => e.DabWszystkoPlLink)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DAB_WszystkoPlLink");
            entity.Property(e => e.DabZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("DAB_ZewnetrznyId");
            entity.Property(e => e.DabZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("DAB_ZewnetrznySys");
            entity.Property(e => e.DabZewnetrznyTyp)
                .HasDefaultValue(0)
                .HasColumnName("DAB_ZewnetrznyTyp");

            entity.HasOne(d => d.DabDbg).WithMany(p => p.DaneBinarnes)
                .HasForeignKey(d => d.DabDbgid)
                .HasConstraintName("FK_DABDBGId");
        });

        modelBuilder.Entity<DaneBinarneGrupy>(entity =>
        {
            entity.HasKey(e => e.DbgId).HasName("DBG_Primary");

            entity.ToTable("DaneBinarneGrupy", "CDN", tb =>
                {
                    tb.HasTrigger("DaneBinarneGrupyAlias_DeleteHandler");
                    tb.HasTrigger("DaneBinarneGrupy_Delete");
                    tb.HasTrigger("DaneBinarneGrupy_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.DbgOjciec, e.DbgNazwa }, "DBGNazwaOjciec").IsUnique();

            entity.Property(e => e.DbgId).HasColumnName("DBG_Id");
            entity.Property(e => e.DbgNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DBG_Nazwa");
            entity.Property(e => e.DbgOjciec)
                .HasDefaultValue(0)
                .HasColumnName("DBG_Ojciec");
            entity.Property(e => e.DbgOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DBG_Opis");
        });

        modelBuilder.Entity<DaneBinarneWydruki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DaneBinarneWydruki", "CDN");

            entity.Property(e => e.DbwDataDokumentu).HasColumnName("DBW_DataDokumentu");
            entity.Property(e => e.DbwDataWydruku).HasColumnName("DBW_DataWydruku");
            entity.Property(e => e.DbwDokTyp).HasColumnName("DBW_DokTyp");
            entity.Property(e => e.DbwFrsId).HasColumnName("DBW_FrsId");
            entity.Property(e => e.DbwId).HasColumnName("DBW_Id");
            entity.Property(e => e.DbwKod)
                .HasMaxLength(99)
                .IsUnicode(false)
                .HasColumnName("DBW_Kod");
            entity.Property(e => e.DbwNazwa)
                .HasMaxLength(99)
                .IsUnicode(false)
                .HasColumnName("DBW_Nazwa");
            entity.Property(e => e.DbwNumerDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DBW_NumerDokumentu");
            entity.Property(e => e.DbwObiLp).HasColumnName("DBW_ObiLp");
            entity.Property(e => e.DbwObiNumer).HasColumnName("DBW_ObiNumer");
            entity.Property(e => e.DbwObiTyp).HasColumnName("DBW_ObiTyp");
            entity.Property(e => e.DbwOpeIdent)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DBW_OpeIdent");
            entity.Property(e => e.DbwPodmiot)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DBW_Podmiot");
            entity.Property(e => e.DbwPodmiot2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DBW_Podmiot2");
            entity.Property(e => e.DbwPodmiotFirma).HasColumnName("DBW_PodmiotFirma");
            entity.Property(e => e.DbwPodmiotLp).HasColumnName("DBW_PodmiotLp");
            entity.Property(e => e.DbwPodmiotNumer).HasColumnName("DBW_PodmiotNumer");
            entity.Property(e => e.DbwPodmiotTyp).HasColumnName("DBW_PodmiotTyp");
            entity.Property(e => e.DbwProcId).HasColumnName("DBW_ProcID");
            entity.Property(e => e.DbwRodzaj).HasColumnName("DBW_Rodzaj");
            entity.Property(e => e.DbwRozmiar).HasColumnName("DBW_Rozmiar");
            entity.Property(e => e.DbwSystemowa).HasColumnName("DBW_Systemowa");
        });

        modelBuilder.Entity<DaneKlientaTryb1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DaneKlientaTryb1", "CDN");

            entity.Property(e => e.Dk1Kntakronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DK1_kntakronim");
            entity.Property(e => e.Dk1Kntnumer)
                .HasDefaultValue(0)
                .HasColumnName("DK1_kntnumer");
            entity.Property(e => e.Dk1Prawa)
                .HasDefaultValue(0)
                .HasColumnName("DK1_Prawa");
            entity.Property(e => e.Dk1Priorytet)
                .HasDefaultValue(0)
                .HasColumnName("DK1_Priorytet");
            entity.Property(e => e.Dk1Slwwartoscs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DK1_slwwartoscs");
            entity.Property(e => e.Dk1Ssknumer)
                .HasDefaultValue(0)
                .HasColumnName("DK1_ssknumer");
        });

        modelBuilder.Entity<DaneKlientaTryb2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DaneKlientaTryb2", "CDN");

            entity.Property(e => e.Dk2Kntakronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DK2_kntakronim");
            entity.Property(e => e.Dk2Kntnumer)
                .HasDefaultValue(0)
                .HasColumnName("DK2_kntnumer");
            entity.Property(e => e.Dk2OsgopeCccid)
                .HasDefaultValue(0)
                .HasColumnName("DK2_osgopeCCCID");
            entity.Property(e => e.Dk2Osgskillgrupa)
                .HasDefaultValue(0)
                .HasColumnName("DK2_osgskillgrupa");
            entity.Property(e => e.Dk2Prawa)
                .HasDefaultValue(0)
                .HasColumnName("DK2_Prawa");
            entity.Property(e => e.Dk2Priorytet)
                .HasDefaultValue(0)
                .HasColumnName("DK2_Priorytet");
            entity.Property(e => e.Dk2Slwwartoscs)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DK2_slwwartoscs");
            entity.Property(e => e.Dk2Ssnnumer)
                .HasDefaultValue(0)
                .HasColumnName("DK2_ssnnumer");
        });

        modelBuilder.Entity<DaneObiekty>(entity =>
        {
            entity.HasKey(e => new { e.DaoDabid, e.DaoObiTyp, e.DaoObiNumer, e.DaoObiLp, e.DaoObiSubLp }).HasName("DAO_Primary");

            entity.ToTable("DaneObiekty", "CDN", tb =>
                {
                    tb.HasTrigger("DaneObiektyAlias_InsertUpdateHandler");
                    tb.HasTrigger("DaneObiektyCzyMoznaUsunac");
                    tb.HasTrigger("DaneObiekty_CzasModyfikacji");
                    tb.HasTrigger("DaneObiekty_InsertUpdateHandler");
                    tb.HasTrigger("DaneObiekty_PicoUsuniete");
                    tb.HasTrigger("DaneObiekty_UaktualnijDAB");
                });

            entity.HasIndex(e => new { e.DaoObiTyp, e.DaoObiNumer, e.DaoObiLp, e.DaoObiSubLp }, "DAOObiekt");

            entity.HasIndex(e => e.DaoZalId, "DAO_ZalID").IsUnique();

            entity.Property(e => e.DaoDabid).HasColumnName("DAO_DABId");
            entity.Property(e => e.DaoObiTyp).HasColumnName("DAO_ObiTyp");
            entity.Property(e => e.DaoObiNumer).HasColumnName("DAO_ObiNumer");
            entity.Property(e => e.DaoObiLp).HasColumnName("DAO_ObiLp");
            entity.Property(e => e.DaoObiSubLp).HasColumnName("DAO_ObiSubLp");
            entity.Property(e => e.DaoBi)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_BI");
            entity.Property(e => e.DaoBlokada)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_Blokada");
            entity.Property(e => e.DaoCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("DAO_CzasModyfikacji");
            entity.Property(e => e.DaoDomyslna)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_Domyslna");
            entity.Property(e => e.DaoESklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_eSklep");
            entity.Property(e => e.DaoIMall)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_iMall");
            entity.Property(e => e.DaoMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_MobSpr");
            entity.Property(e => e.DaoPkprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_PKPrawa");
            entity.Property(e => e.DaoPozycja)
                .HasDefaultValue(0)
                .HasColumnName("DAO_Pozycja");
            entity.Property(e => e.DaoPpprawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_PPPrawa");
            entity.Property(e => e.DaoRetail)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_Retail");
            entity.Property(e => e.DaoSystemowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_Systemowa");
            entity.Property(e => e.DaoWmsmagazynier)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_WMSMagazynier");
            entity.Property(e => e.DaoWmszarzadzanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_WMSZarzadzanie");
            entity.Property(e => e.DaoWszystkoPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("DAO_WszystkoPl");
            entity.Property(e => e.DaoZalId)
                .ValueGeneratedOnAdd()
                .HasColumnName("DAO_ZalID");
        });

        modelBuilder.Entity<DaneRynkowe>(entity =>
        {
            entity.HasKey(e => e.DrkId).HasName("DRK_Primary");

            entity.ToTable("DaneRynkowe", "CDN");

            entity.HasIndex(e => e.DrkDrnId, "DRKSesja");

            entity.HasIndex(e => e.DrkSlwId, "DRKSlownik");

            entity.Property(e => e.DrkId).HasColumnName("DRK_ID");
            entity.Property(e => e.DrkCenaLp)
                .HasDefaultValue(0)
                .HasColumnName("DRK_CenaLp");
            entity.Property(e => e.DrkDrnId)
                .HasDefaultValue(0)
                .HasColumnName("DRK_DRN_ID");
            entity.Property(e => e.DrkKomentarz)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DRK_Komentarz");
            entity.Property(e => e.DrkOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("DRK_OpeFirmaM");
            entity.Property(e => e.DrkOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("DRK_OpeLpM");
            entity.Property(e => e.DrkOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("DRK_OpeNumerM");
            entity.Property(e => e.DrkOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("DRK_OpeTypM");
            entity.Property(e => e.DrkSlwId)
                .HasDefaultValue(0)
                .HasColumnName("DRK_SlwID");
            entity.Property(e => e.DrkTsdata)
                .HasDefaultValue(0)
                .HasColumnName("DRK_TSData");

            entity.HasOne(d => d.DrkDrn).WithMany(p => p.DaneRynkowes)
                .HasForeignKey(d => d.DrkDrnId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DRKSesja");
        });

        modelBuilder.Entity<DaneRynkoweCeny>(entity =>
        {
            entity.HasKey(e => new { e.DrcDrkId, e.DrcNumerCeny }).HasName("DRC_Primary");

            entity.ToTable("DaneRynkoweCeny", "CDN");

            entity.Property(e => e.DrcDrkId).HasColumnName("DRC_DRK_ID");
            entity.Property(e => e.DrcNumerCeny).HasColumnName("DRC_NumerCeny");
            entity.Property(e => e.DrcCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DRC_Cena");
            entity.Property(e => e.DrcCenaWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DRC_CenaWal");
            entity.Property(e => e.DrcKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("DRC_KursL");
            entity.Property(e => e.DrcKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DRC_KursM");
            entity.Property(e => e.DrcNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("DRC_NrKursu");
            entity.Property(e => e.DrcWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DRC_Waluta");

            entity.HasOne(d => d.DrcDrk).WithMany(p => p.DaneRynkoweCenies)
                .HasForeignKey(d => d.DrcDrkId)
                .HasConstraintName("FK_DRCPrimary");
        });

        modelBuilder.Entity<DaneRynkoweNotowanium>(entity =>
        {
            entity.HasKey(e => e.DrnId).HasName("DRN_Primary");

            entity.ToTable("DaneRynkoweNotowania", "CDN");

            entity.Property(e => e.DrnId).HasColumnName("DRN_ID");
            entity.Property(e => e.DrnAktywny)
                .HasDefaultValue((short)0)
                .HasColumnName("DRN_Aktywny");
            entity.Property(e => e.DrnFlagaZapisu)
                .HasDefaultValue((short)0)
                .HasColumnName("DRN_FlagaZapisu");
            entity.Property(e => e.DrnOpeFirmaO)
                .HasDefaultValue(0)
                .HasColumnName("DRN_OpeFirmaO");
            entity.Property(e => e.DrnOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("DRN_OpeFirmaZ");
            entity.Property(e => e.DrnOpeLpO)
                .HasDefaultValue((short)0)
                .HasColumnName("DRN_OpeLpO");
            entity.Property(e => e.DrnOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("DRN_OpeLpZ");
            entity.Property(e => e.DrnOpeNumerO)
                .HasDefaultValue(0)
                .HasColumnName("DRN_OpeNumerO");
            entity.Property(e => e.DrnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("DRN_OpeNumerZ");
            entity.Property(e => e.DrnOpeTypO)
                .HasDefaultValue((short)0)
                .HasColumnName("DRN_OpeTypO");
            entity.Property(e => e.DrnOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("DRN_OpeTypZ");
            entity.Property(e => e.DrnOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DRN_Opis");
            entity.Property(e => e.DrnTsotwarcie)
                .HasDefaultValue(0)
                .HasColumnName("DRN_TSOtwarcie");
            entity.Property(e => e.DrnTszamkniecie)
                .HasDefaultValue(0)
                .HasColumnName("DRN_TSZamkniecie");
        });

        modelBuilder.Entity<DefNieobecnosci>(entity =>
        {
            entity.HasKey(e => e.DnbId).HasName("DNB_Primary");

            entity.ToTable("DefNieobecnosci", "CDN", tb =>
                {
                    tb.HasTrigger("DefNieobecnosci_DeleteHandler");
                    tb.HasTrigger("DefNieobecnosci_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.DnbKod, "DNBKod").IsUnique();

            entity.HasIndex(e => e.DnbNazwa, "DNBNazwa").IsUnique();

            entity.Property(e => e.DnbId).HasColumnName("DNB_Id");
            entity.Property(e => e.DnbArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_Archiwalny");
            entity.Property(e => e.DnbKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DNB_Kod");
            entity.Property(e => e.DnbKodRca)
                .HasDefaultValue(0)
                .HasColumnName("DNB_KodRCA");
            entity.Property(e => e.DnbKodRsa)
                .HasDefaultValue(0)
                .HasColumnName("DNB_KodRSA");
            entity.Property(e => e.DnbLimitNieobecnosci)
                .HasDefaultValue(0)
                .HasColumnName("DNB_LimitNieobecnosci");
            entity.Property(e => e.DnbNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DNB_Nazwa");
            entity.Property(e => e.DnbNieCzasPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_NieCzasPracy");
            entity.Property(e => e.DnbNieStazPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_NieStazPracy");
            entity.Property(e => e.DnbPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_Predefiniowany");
            entity.Property(e => e.DnbPrzyczyna)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_Przyczyna");
            entity.Property(e => e.DnbRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_Rodzaj");
            entity.Property(e => e.DnbRozliczenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_Rozliczenie");
            entity.Property(e => e.DnbTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_Typ");
            entity.Property(e => e.DnbWynagrodzenieNieobecnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_WynagrodzenieNieobecnosci");
            entity.Property(e => e.DnbWynagrodzeniePewid)
                .HasDefaultValue(0)
                .HasColumnName("DNB_WynagrodzeniePEWId");
            entity.Property(e => e.DnbWynagrodzeniePomniejszac)
                .HasDefaultValue((byte)0)
                .HasColumnName("DNB_WynagrodzeniePomniejszac");
        });

        modelBuilder.Entity<DefPodElem>(entity =>
        {
            entity.HasKey(e => new { e.DpeDpnid, e.DpeLp }).HasName("DPE_Primary");

            entity.ToTable("DefPodElem", "CDN");

            entity.Property(e => e.DpeDpnid).HasColumnName("DPE_DPNID");
            entity.Property(e => e.DpeLp).HasColumnName("DPE_Lp");
            entity.Property(e => e.DpeAgreguj)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_Agreguj");
            entity.Property(e => e.DpeBezwzgledne)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_Bezwzgledne");
            entity.Property(e => e.DpeCzcionka)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_Czcionka");
            entity.Property(e => e.DpeDefiniowalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_Definiowalne");
            entity.Property(e => e.DpeDfnid)
                .HasDefaultValue(0)
                .HasColumnName("DPE_DFNID");
            entity.Property(e => e.DpeDfnkwotaWmr)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_DFNKwotaWmr");
            entity.Property(e => e.DpeId)
                .HasDefaultValue(0)
                .HasColumnName("DPE_ID");
            entity.Property(e => e.DpeKolejnoscWyliczen)
                .HasDefaultValue(0)
                .HasColumnName("DPE_KolejnoscWyliczen");
            entity.Property(e => e.DpeKolor)
                .HasDefaultValue(0)
                .HasColumnName("DPE_Kolor");
            entity.Property(e => e.DpeNazwa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_Nazwa");
            entity.Property(e => e.DpeNieLiczGdyNieaktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_NieLiczGdyNieaktywne");
            entity.Property(e => e.DpeNieZapisuj)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_NieZapisuj");
            entity.Property(e => e.DpeNieaktywne)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_Nieaktywne");
            entity.Property(e => e.DpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("DPE_Numer");
            entity.Property(e => e.DpeOblicz)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_Oblicz");
            entity.Property(e => e.DpeOgraniczenie)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_Ograniczenie");
            entity.Property(e => e.DpeOgraniczenieDolne)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_OgraniczenieDolne");
            entity.Property(e => e.DpeOpisCzcionka)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_OpisCzcionka");
            entity.Property(e => e.DpeOpisKolor)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisKolor");
            entity.Property(e => e.DpeOpisNrPodpoziomu)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_OpisNrPodpoziomu");
            entity.Property(e => e.DpeOpisRozmiar)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisRozmiar");
            entity.Property(e => e.DpeOpisStyl)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisStyl");
            entity.Property(e => e.DpeOpisSzerokosc)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisSzerokosc");
            entity.Property(e => e.DpeOpisWspX)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisWspX");
            entity.Property(e => e.DpeOpisWspXpoleNumer)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisWspXPoleNumer");
            entity.Property(e => e.DpeOpisWspY)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisWspY");
            entity.Property(e => e.DpeOpisWysokosc)
                .HasDefaultValue(0)
                .HasColumnName("DPE_OpisWysokosc");
            entity.Property(e => e.DpePlatnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_Platnosc");
            entity.Property(e => e.DpePoleNaSchemacieKsiegowym)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_PoleNaSchemacieKsiegowym");
            entity.Property(e => e.DpePrecyzja)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_Precyzja");
            entity.Property(e => e.DpePrecyzjaWyrazenie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_PrecyzjaWyrazenie");
            entity.Property(e => e.DpePusteGdy0)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_PusteGdy0");
            entity.Property(e => e.DpeRozmiar)
                .HasDefaultValue(0)
                .HasColumnName("DPE_Rozmiar");
            entity.Property(e => e.DpeStrona)
                .HasDefaultValue((short)0)
                .HasColumnName("DPE_Strona");
            entity.Property(e => e.DpeStyl)
                .HasDefaultValue(0)
                .HasColumnName("DPE_Styl");
            entity.Property(e => e.DpeSzerokosc)
                .HasDefaultValue(0)
                .HasColumnName("DPE_Szerokosc");
            entity.Property(e => e.DpeTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_Typ");
            entity.Property(e => e.DpeTypOgraniczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_TypOgraniczenia");
            entity.Property(e => e.DpeUkryte)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_Ukryte");
            entity.Property(e => e.DpeWspX)
                .HasDefaultValue(0)
                .HasColumnName("DPE_WspX");
            entity.Property(e => e.DpeWspXpoleNumer)
                .HasDefaultValue(0)
                .HasColumnName("DPE_WspXPoleNumer");
            entity.Property(e => e.DpeWspY)
                .HasDefaultValue(0)
                .HasColumnName("DPE_WspY");
            entity.Property(e => e.DpeWymagane)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_Wymagane");
            entity.Property(e => e.DpeWyrazenie)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_Wyrazenie");
            entity.Property(e => e.DpeWysokosc)
                .HasDefaultValue(0)
                .HasColumnName("DPE_Wysokosc");
            entity.Property(e => e.DpeXmllp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_XMLLp");
            entity.Property(e => e.DpeXmlnieDodawajGalezi)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_XMLNieDodawajGalezi");
            entity.Property(e => e.DpeXmlparTagNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_XMLParTagNazwa");
            entity.Property(e => e.DpeXmlpominGdyPuste)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_XMLPominGdyPuste");
            entity.Property(e => e.DpeXmlpusteGdyBrakRownoleglychElem)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPE_XMLPusteGdyBrakRownoleglychElem");
            entity.Property(e => e.DpeXmlrekordTagAtrybuty)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_XMLRekordTagAtrybuty");
            entity.Property(e => e.DpeXmlrekordTagNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_XMLRekordTagNazwa");
            entity.Property(e => e.DpeXmltagAtrybuty)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_XMLTagAtrybuty");
            entity.Property(e => e.DpeXmltagNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_XMLTagNazwa");
            entity.Property(e => e.DpeXmlwarunekRekordu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPE_XMLWarunekRekordu");

            entity.HasOne(d => d.DpeDpn).WithMany(p => p.DefPodElems)
                .HasForeignKey(d => d.DpeDpnid)
                .HasConstraintName("FK_DPEPrimary");
        });

        modelBuilder.Entity<DefPodElemKolumny>(entity =>
        {
            entity.HasKey(e => new { e.DpkDpnid, e.DpkDpelp, e.DpkId }).HasName("DPK_Primary");

            entity.ToTable("DefPodElemKolumny", "CDN");

            entity.Property(e => e.DpkDpnid).HasColumnName("DPK_DPNId");
            entity.Property(e => e.DpkDpelp).HasColumnName("DPK_DPELp");
            entity.Property(e => e.DpkId).HasColumnName("DPK_Id");
            entity.Property(e => e.DpkKluczGlowny)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPK_KluczGlowny");
            entity.Property(e => e.DpkNazwaNaglowka)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPK_NazwaNaglowka");
            entity.Property(e => e.DpkNazwaPola)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPK_NazwaPola");
            entity.Property(e => e.DpkNrKolumny)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPK_NrKolumny");
            entity.Property(e => e.DpkParentDpelp)
                .HasDefaultValue(0)
                .HasColumnName("DPK_ParentDPELp");
            entity.Property(e => e.DpkParentDpkid)
                .HasDefaultValue(0)
                .HasColumnName("DPK_ParentDPKId");
            entity.Property(e => e.DpkPicture)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPK_Picture");
            entity.Property(e => e.DpkPominKolumne)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPK_PominKolumne");
            entity.Property(e => e.DpkPrezentujWartoscWyr)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPK_PrezentujWartoscWyr");
            entity.Property(e => e.DpkPusteGdy0)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPK_PusteGdy0");
            entity.Property(e => e.DpkSortowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPK_Sortowanie");
            entity.Property(e => e.DpkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DPK_Typ");
            entity.Property(e => e.DpkUkryta)
                .HasDefaultValue((short)0)
                .HasColumnName("DPK_Ukryta");
            entity.Property(e => e.DpkXmllp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPK_XMLLp");
            entity.Property(e => e.DpkXmltagAtrybuty)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPK_XMLTagAtrybuty");
            entity.Property(e => e.DpkXmltagNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPK_XMLTagNazwa");

            entity.HasOne(d => d.DefPodElem).WithMany(p => p.DefPodElemKolumnies)
                .HasForeignKey(d => new { d.DpkDpnid, d.DpkDpelp })
                .HasConstraintName("FK_DPKPrimary");
        });

        modelBuilder.Entity<DefPodElemWyrazenium>(entity =>
        {
            entity.HasKey(e => new { e.DpewDpnid, e.DpewDpelp, e.DpewTypSerwera }).HasName("DPEW_Primary");

            entity.ToTable("DefPodElemWyrazenia", "CDN");

            entity.Property(e => e.DpewDpnid).HasColumnName("DPEW_DPNId");
            entity.Property(e => e.DpewDpelp).HasColumnName("DPEW_DPELp");
            entity.Property(e => e.DpewTypSerwera).HasColumnName("DPEW_TypSerwera");
            entity.Property(e => e.DpewNieZapisuj)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_NieZapisuj");
            entity.Property(e => e.DpewNieaktywne)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_Nieaktywne");
            entity.Property(e => e.DpewOgraniczenie)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_Ograniczenie");
            entity.Property(e => e.DpewOgraniczenieDolne)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_OgraniczenieDolne");
            entity.Property(e => e.DpewPrecyzjaWyrazenie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_PrecyzjaWyrazenie");
            entity.Property(e => e.DpewUkryte)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_Ukryte");
            entity.Property(e => e.DpewWymagane)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_Wymagane");
            entity.Property(e => e.DpewWyrazenie)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_Wyrazenie");
            entity.Property(e => e.DpewXmlnieDodawajGalezi)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_XMLNieDodawajGalezi");
            entity.Property(e => e.DpewXmlwarunekRekordu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPEW_XMLWarunekRekordu");

            entity.HasOne(d => d.DefPodElem).WithMany(p => p.DefPodElemWyrazenia)
                .HasForeignKey(d => new { d.DpewDpnid, d.DpewDpelp })
                .HasConstraintName("FK_DPEWPrimary");
        });

        modelBuilder.Entity<DefPodNag>(entity =>
        {
            entity.HasKey(e => e.DpnId).HasName("DPN_Primary");

            entity.ToTable("DefPodNag", "CDN", tb => tb.HasTrigger("DefPodNag_DeleteHandler"));

            entity.HasIndex(e => new { e.DpnSymbol, e.DpnWersja }, "DPNWersja").IsUnique();

            entity.Property(e => e.DpnId).HasColumnName("DPN_ID");
            entity.Property(e => e.DpnDataDo)
                .HasDefaultValue(0)
                .HasColumnName("DPN_DataDo");
            entity.Property(e => e.DpnDataOd)
                .HasDefaultValue(0)
                .HasColumnName("DPN_DataOd");
            entity.Property(e => e.DpnIloscStron)
                .HasDefaultValue((short)0)
                .HasColumnName("DPN_IloscStron");
            entity.Property(e => e.DpnKoniecOkresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_KoniecOkresu");
            entity.Property(e => e.DpnKoniecPodOkresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_KoniecPodOkresu");
            entity.Property(e => e.DpnKsiegowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_Ksiegowanie");
            entity.Property(e => e.DpnKsiegowanieWyrazenie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_KsiegowanieWyrazenie");
            entity.Property(e => e.DpnLp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_Lp");
            entity.Property(e => e.DpnNadrzedna)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_Nadrzedna");
            entity.Property(e => e.DpnNrPozIloscPodpoziomow)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_NrPozIloscPodpoziomow");
            entity.Property(e => e.DpnPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_Platnosci");
            entity.Property(e => e.DpnPlatnosciWyrazenie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_PlatnosciWyrazenie");
            entity.Property(e => e.DpnPoczatekOkresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_PoczatekOkresu");
            entity.Property(e => e.DpnPoczatekPodOkresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_PoczatekPodOkresu");
            entity.Property(e => e.DpnSumaKontrolna)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_SumaKontrolna");
            entity.Property(e => e.DpnSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_Symbol");
            entity.Property(e => e.DpnTypDeklaracji)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_TypDeklaracji");
            entity.Property(e => e.DpnTypPodatku)
                .HasDefaultValue((short)0)
                .HasColumnName("DPN_TypPodatku");
            entity.Property(e => e.DpnTypUrzedu)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_TypUrzedu");
            entity.Property(e => e.DpnWersja)
                .HasDefaultValue((short)0)
                .HasColumnName("DPN_Wersja");
            entity.Property(e => e.DpnWersjaNadrzednej)
                .HasDefaultValue(0)
                .HasColumnName("DPN_WersjaNadrzednej");
            entity.Property(e => e.DpnWersjaSilnika)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_WersjaSilnika");
            entity.Property(e => e.DpnWersjaWewn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_WersjaWewn");
            entity.Property(e => e.DpnXlwersjaDo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_XLWersjaDo");
            entity.Property(e => e.DpnXlwersjaOd)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_XLWersjaOd");
            entity.Property(e => e.DpnXmltagAtrybuty)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_XMLTagAtrybuty");
            entity.Property(e => e.DpnXmltagNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DPN_XMLTagNazwa");
            entity.Property(e => e.DpnZalacznik)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_Zalacznik");
            entity.Property(e => e.DpnZalacznikOkresDef)
                .HasDefaultValue((byte)0)
                .HasColumnName("DPN_ZalacznikOkresDef");
        });

        modelBuilder.Entity<DefinicjeKolumn>(entity =>
        {
            entity.HasKey(e => e.DfkId).HasName("DFK_Primary");

            entity.ToTable("DefinicjeKolumn", "CDN");

            entity.HasIndex(e => new { e.DfkIdlisty, e.DfkIdformatki, e.DfkKontekst, e.DfkAktywny }, "DFKLista");

            entity.Property(e => e.DfkId).HasColumnName("DFK_ID");
            entity.Property(e => e.DfkAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFK_Aktywny");
            entity.Property(e => e.DfkCzyDx)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFK_CzyDX");
            entity.Property(e => e.DfkFormat)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFK_Format");
            entity.Property(e => e.DfkIdformatki)
                .HasDefaultValue(0)
                .HasColumnName("DFK_IDFormatki");
            entity.Property(e => e.DfkIdlisty)
                .HasDefaultValue(0)
                .HasColumnName("DFK_IDListy");
            entity.Property(e => e.DfkKontekst)
                .HasDefaultValue(0)
                .HasColumnName("DFK_Kontekst");
            entity.Property(e => e.DfkNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFK_Nazwa");
            entity.Property(e => e.DfkSql)
                .HasMaxLength(7999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFK_SQL");
        });

        modelBuilder.Entity<Dekrety>(entity =>
        {
            entity.HasKey(e => new { e.DtGidnumer, e.DtGidlp, e.DtWalutaObca, e.DtDc }).HasName("DT_Primary");

            entity.ToTable("Dekrety", "CDN", tb =>
                {
                    tb.HasTrigger("Dekrety_AktualizujDateZapisuZnak");
                    tb.HasTrigger("Dekrety_AktualizujStany");
                    tb.HasTrigger("Dekrety_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.DtBufor, "DTBufor");

            entity.HasIndex(e => new { e.DtBufor, e.DtDziennik }, "DTBuforDziennik");

            entity.HasIndex(e => new { e.DtKonto, e.DtRok, e.DtMiesiac, e.DtDzien }, "DTData");

            entity.HasIndex(e => e.DtKksnumer, "DTKonto");

            entity.HasIndex(e => new { e.DtKksnumer, e.DtDataDekr }, "DTKontoData");

            entity.HasIndex(e => e.DtDziennik, "DTOnlyDziennik");

            entity.Property(e => e.DtGidnumer).HasColumnName("DT_GIDNumer");
            entity.Property(e => e.DtGidlp).HasColumnName("DT_GIDLp");
            entity.Property(e => e.DtWalutaObca).HasColumnName("DT_WalutaObca");
            entity.Property(e => e.DtDc).HasColumnName("DT_DC");
            entity.Property(e => e.DtBezKontroli)
                .HasDefaultValue((byte)0)
                .HasColumnName("DT_BezKontroli");
            entity.Property(e => e.DtBufor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DT_Bufor");
            entity.Property(e => e.DtDataCentrali)
                .HasDefaultValue(0)
                .HasColumnName("DT_DataCentrali");
            entity.Property(e => e.DtDataDekr)
                .HasDefaultValue(0)
                .HasColumnName("DT_DataDekr");
            entity.Property(e => e.DtDataOddzialu)
                .HasDefaultValue(0)
                .HasColumnName("DT_DataOddzialu");
            entity.Property(e => e.DtDataRozliczenia)
                .HasDefaultValue(0)
                .HasColumnName("DT_DataRozliczenia");
            entity.Property(e => e.DtDzien)
                .HasDefaultValue((short)0)
                .HasColumnName("DT_Dzien");
            entity.Property(e => e.DtDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DT_Dziennik");
            entity.Property(e => e.DtFirmaKonta)
                .HasDefaultValue(0)
                .HasColumnName("DT_FirmaKonta");
            entity.Property(e => e.DtGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("DT_GIDFirma");
            entity.Property(e => e.DtGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DT_GIDTyp");
            entity.Property(e => e.DtKksnumer)
                .HasDefaultValue(0)
                .HasColumnName("DT_KKSNumer");
            entity.Property(e => e.DtKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DT_Konto");
            entity.Property(e => e.DtKorektaBo)
                .HasDefaultValue((byte)0)
                .HasColumnName("DT_KorektaBO");
            entity.Property(e => e.DtKursKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(29, 10)")
                .HasColumnName("DT_KursKwota");
            entity.Property(e => e.DtKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DT_Kwota");
            entity.Property(e => e.DtMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("DT_Miesiac");
            entity.Property(e => e.DtNierozliczony)
                .HasDefaultValue((byte)0)
                .HasColumnName("DT_Nierozliczony");
            entity.Property(e => e.DtNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("DT_NrKursu");
            entity.Property(e => e.DtPozostaje)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DT_Pozostaje");
            entity.Property(e => e.DtRok)
                .HasDefaultValue((short)0)
                .HasColumnName("DT_Rok");
            entity.Property(e => e.DtRozliczony)
                .HasDefaultValue((byte)0)
                .HasColumnName("DT_Rozliczony");
            entity.Property(e => e.DtTermin)
                .HasDefaultValue(0)
                .HasColumnName("DT_Termin");
            entity.Property(e => e.DtWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DT_Waluta");
            entity.Property(e => e.DtZnak)
                .HasDefaultValue((byte)0)
                .HasColumnName("DT_Znak");

            entity.HasOne(d => d.DziennikElem).WithMany(p => p.Dekreties)
                .HasForeignKey(d => new { d.DtGidnumer, d.DtGidlp })
                .HasConstraintName("FK_DTPrimary");
        });

        modelBuilder.Entity<DekretyFiltryElem>(entity =>
        {
            entity.HasKey(e => new { e.DfeDfnid, e.DfeId }).HasName("DFE_Primary");

            entity.ToTable("DekretyFiltryElem", "CDN");

            entity.HasIndex(e => e.DfePole, "DFEPole");

            entity.Property(e => e.DfeDfnid).HasColumnName("DFE_DFNID");
            entity.Property(e => e.DfeId).HasColumnName("DFE_ID");
            entity.Property(e => e.DfeArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFE_Archiwalny");
            entity.Property(e => e.DfeGrupa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFE_Grupa");
            entity.Property(e => e.DfeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("DFE_Lp");
            entity.Property(e => e.DfeOperator)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFE_Operator");
            entity.Property(e => e.DfeParId)
                .HasDefaultValue(0)
                .HasColumnName("DFE_ParID");
            entity.Property(e => e.DfePole)
                .HasDefaultValue(0)
                .HasColumnName("DFE_Pole");
            entity.Property(e => e.DfePoleTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFE_PoleTyp");
            entity.Property(e => e.DfePoziom)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFE_Poziom");
            entity.Property(e => e.DfeTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFE_Typ");
            entity.Property(e => e.DfeWartosc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFE_Wartosc");
            entity.Property(e => e.DfeWartoscElement)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFE_WartoscElement");
            entity.Property(e => e.DfeWartoscId)
                .HasDefaultValue(0)
                .HasColumnName("DFE_WartoscID");
            entity.Property(e => e.DfeWartoscNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFE_WartoscNazwa");
            entity.Property(e => e.DfeZnak)
                .HasDefaultValue((byte)0)
                .HasColumnName("DFE_Znak");

            entity.HasOne(d => d.DfeDfn).WithMany(p => p.DekretyFiltryElems)
                .HasForeignKey(d => d.DfeDfnid)
                .HasConstraintName("FK_DFEPrimary");
        });

        modelBuilder.Entity<DekretyFiltryNag>(entity =>
        {
            entity.HasKey(e => e.DfnId).HasName("DFN_Primary");

            entity.ToTable("DekretyFiltryNag", "CDN");

            entity.HasIndex(e => new { e.DfnOpeNumer, e.DfnObiTyp, e.DfnObiNumer, e.DfnObiLp }, "DFNObi");

            entity.Property(e => e.DfnId).HasColumnName("DFN_ID");
            entity.Property(e => e.DfnFiltrAtrSql)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFN_FiltrAtrSQL");
            entity.Property(e => e.DfnFiltrSql)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFN_FiltrSQL");
            entity.Property(e => e.DfnFiltrWmrSql)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFN_FiltrWmrSQL");
            entity.Property(e => e.DfnObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("DFN_ObiFirma");
            entity.Property(e => e.DfnObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("DFN_ObiLp");
            entity.Property(e => e.DfnObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("DFN_ObiNumer");
            entity.Property(e => e.DfnObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DFN_ObiTyp");
            entity.Property(e => e.DfnOpeNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DFN_OpeNumer");
            entity.Property(e => e.DfnTs)
                .HasDefaultValue(0)
                .HasColumnName("DFN_TS");
        });

        modelBuilder.Entity<Delegacje>(entity =>
        {
            entity.HasKey(e => e.DlgGidnumer).HasName("DLG_Primary");

            entity.ToTable("Delegacje", "CDN", tb =>
                {
                    tb.HasTrigger("Delegacje_AktualizujWnioski");
                    tb.HasTrigger("Delegacje_DeleteHandler");
                    tb.HasTrigger("Delegacje_InsertUpdateHandler");
                    tb.HasTrigger("EP_SyncFramework_XL_Delegacje");
                });

            entity.HasIndex(e => e.DlgTstampWpr, "DLGKeyDataWpr");

            entity.HasIndex(e => e.DlgFrscentrumNumer, "DLGKeyFrsIDCentrum");

            entity.HasIndex(e => e.DlgFrswlascicielNumer, "DLGKeyFrsIDWlasciciel");

            entity.HasIndex(e => new { e.DlgGidtyp, e.DlgRok, e.DlgMiesiac, e.DlgSeria, e.DlgNumer }, "DLGKeyNumer").IsUnique();

            entity.HasIndex(e => e.DlgPrcnumer, "DLGKeyPrcNumer");

            entity.HasIndex(e => new { e.DlgPrjnumer, e.DlgPrjtyp }, "DLGKeyPrjNumer");

            entity.HasIndex(e => e.DlgStan, "DLGKeyStan");

            entity.Property(e => e.DlgGidnumer).HasColumnName("DLG_GIDNumer");
            entity.Property(e => e.DlgAktywny)
                .HasDefaultValue(0)
                .HasColumnName("DLG_Aktywny");
            entity.Property(e => e.DlgCel)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Cel");
            entity.Property(e => e.DlgDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("DLG_DataKsiegowania");
            entity.Property(e => e.DlgDoWyplaty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLG_DoWyplaty");
            entity.Property(e => e.DlgDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Dziennik");
            entity.Property(e => e.DlgFrscentrumNumer)
                .HasDefaultValue(0)
                .HasColumnName("DLG_FRSCentrumNumer");
            entity.Property(e => e.DlgFrswlascicielNumer)
                .HasDefaultValue(0)
                .HasColumnName("DLG_FRSWlascicielNumer");
            entity.Property(e => e.DlgGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("DLG_GIDFirma");
            entity.Property(e => e.DlgGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_GIDLp");
            entity.Property(e => e.DlgGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_GIDTyp");
            entity.Property(e => e.DlgId)
                .HasDefaultValue(0)
                .HasColumnName("DLG_ID");
            entity.Property(e => e.DlgImie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Imie");
            entity.Property(e => e.DlgKomentarz)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Komentarz");
            entity.Property(e => e.DlgKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DLG_Kwota");
            entity.Property(e => e.DlgMiejsce)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Miejsce");
            entity.Property(e => e.DlgMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_Miesiac");
            entity.Property(e => e.DlgNazwisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Nazwisko");
            entity.Property(e => e.DlgNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_NieKsiegowac");
            entity.Property(e => e.DlgNumer)
                .HasDefaultValue(0)
                .HasColumnName("DLG_Numer");
            entity.Property(e => e.DlgOpeNumerWprdoAkcept)
                .HasDefaultValue(0)
                .HasColumnName("DLG_OpeNumerWPRDoAkcept");
            entity.Property(e => e.DlgOpenumerAkcept)
                .HasDefaultValue(0)
                .HasColumnName("DLG_OPENumerAkcept");
            entity.Property(e => e.DlgOpenumerAkceptWpr)
                .HasDefaultValue(0)
                .HasColumnName("DLG_OPENumerAkceptWPR");
            entity.Property(e => e.DlgOpenumerAnul)
                .HasDefaultValue(0)
                .HasColumnName("DLG_OPENumerAnul");
            entity.Property(e => e.DlgOpenumerMod)
                .HasDefaultValue(0)
                .HasColumnName("DLG_OPENumerMod");
            entity.Property(e => e.DlgOpenumerWpr)
                .HasDefaultValue(0)
                .HasColumnName("DLG_OPENumerWpr");
            entity.Property(e => e.DlgOpenumerZatw)
                .HasDefaultValue(0)
                .HasColumnName("DLG_OPENumerZatw");
            entity.Property(e => e.DlgPokazKomentarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_PokazKomentarz");
            entity.Property(e => e.DlgPrcNumerAkcept)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PrcNumerAkcept");
            entity.Property(e => e.DlgPrcNumerAkceptWpr)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PrcNumerAkceptWPR");
            entity.Property(e => e.DlgPrcNumerAnul)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PrcNumerAnul");
            entity.Property(e => e.DlgPrcNumerMod)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PrcNumerMod");
            entity.Property(e => e.DlgPrcNumerWpr)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PrcNumerWpr");
            entity.Property(e => e.DlgPrcNumerWprdoAkcept)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PrcNumerWPRDoAkcept");
            entity.Property(e => e.DlgPrcNumerZatw)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PrcNumerZatw");
            entity.Property(e => e.DlgPrcnumer)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PRCNumer");
            entity.Property(e => e.DlgPrjnumer)
                .HasDefaultValue(0)
                .HasColumnName("DLG_PRJNumer");
            entity.Property(e => e.DlgPrjtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_PRJTyp");
            entity.Property(e => e.DlgRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_Rodzaj");
            entity.Property(e => e.DlgRok)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_Rok");
            entity.Property(e => e.DlgSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("DLG_SCHNumer");
            entity.Property(e => e.DlgSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_SCHTyp");
            entity.Property(e => e.DlgSeria)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Seria");
            entity.Property(e => e.DlgSposobGenPlatnosci)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_SposobGenPlatnosci");
            entity.Property(e => e.DlgStan)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_Stan");
            entity.Property(e => e.DlgTrybWstawiania)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_TrybWstawiania");
            entity.Property(e => e.DlgTstampAkcept)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampAkcept");
            entity.Property(e => e.DlgTstampAkceptWpr)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampAkceptWPR");
            entity.Property(e => e.DlgTstampAnul)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampAnul");
            entity.Property(e => e.DlgTstampMod)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampMod");
            entity.Property(e => e.DlgTstampRozl)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampRozl");
            entity.Property(e => e.DlgTstampRozp)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampRozp");
            entity.Property(e => e.DlgTstampWpr)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampWpr");
            entity.Property(e => e.DlgTstampWprdoAkcept)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampWPRDoAkcept");
            entity.Property(e => e.DlgTstampZak)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampZak");
            entity.Property(e => e.DlgTstampZatw)
                .HasDefaultValue(0)
                .HasColumnName("DLG_TStampZatw");
            entity.Property(e => e.DlgWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_Waluta");
            entity.Property(e => e.DlgWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DLG_WsDziennik");
            entity.Property(e => e.DlgWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("DLG_WsSCHNumer");
            entity.Property(e => e.DlgWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_WsSCHTyp");
            entity.Property(e => e.DlgWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_WsStosujDziennik");
            entity.Property(e => e.DlgWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_WsStosujSchemat");
            entity.Property(e => e.DlgWyjazdZmiejscaZam)
                .HasDefaultValue((short)0)
                .HasColumnName("DLG_WyjazdZMiejscaZam");
            entity.Property(e => e.DlgZaakceptowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_Zaakceptowana");
            entity.Property(e => e.DlgZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_Zaksiegowano");
            entity.Property(e => e.DlgZatwierdzona)
                .HasDefaultValue((byte)0)
                .HasColumnName("DLG_Zatwierdzona");

            entity.HasMany(d => d.DlrKaznumers).WithMany(p => p.DlrDlgnumers)
                .UsingEntity<Dictionary<string, object>>(
                    "DelegacjeRozlZapisy",
                    r => r.HasOne<Zapisy>().WithMany()
                        .HasForeignKey("DlrKaznumer")
                        .HasConstraintName("FK_DLRKAZNumer"),
                    l => l.HasOne<Delegacje>().WithMany()
                        .HasForeignKey("DlrDlgnumer")
                        .HasConstraintName("FK_DLRPrimary"),
                    j =>
                    {
                        j.HasKey("DlrDlgnumer", "DlrKaznumer").HasName("DLR_Primary");
                        j.ToTable("DelegacjeRozlZapisy", "CDN");
                        j.HasIndex(new[] { "DlrKaznumer" }, "DLRKAZNumer");
                        j.IndexerProperty<int>("DlrDlgnumer").HasColumnName("DLR_DLGNumer");
                        j.IndexerProperty<int>("DlrKaznumer").HasColumnName("DLR_KAZNumer");
                    });
        });

        modelBuilder.Entity<DelegacjeElem>(entity =>
        {
            entity.HasKey(e => new { e.DgeGidnumer, e.DgeGidlp }).HasName("DGE_Primary");

            entity.ToTable("DelegacjeElem", "CDN", tb =>
                {
                    tb.HasTrigger("DelegacjeElem_DeleteHandler");
                    tb.HasTrigger("DelegacjeElem_InsertUpdateHandler");
                });

            entity.Property(e => e.DgeGidnumer).HasColumnName("DGE_GIDNumer");
            entity.Property(e => e.DgeGidlp).HasColumnName("DGE_GIDLp");
            entity.Property(e => e.DgeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("DGE_GIDFirma");
            entity.Property(e => e.DgeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DGE_GIDTyp");
            entity.Property(e => e.DgeKomentarz)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGE_Komentarz");
            entity.Property(e => e.DgeKraj)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGE_Kraj");
            entity.Property(e => e.DgeKwotaDiety)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGE_KwotaDiety");
            entity.Property(e => e.DgeKwotaRyczaltDojazd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGE_KwotaRyczaltDojazd");
            entity.Property(e => e.DgeKwotaRyczaltNocleg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGE_KwotaRyczaltNocleg");
            entity.Property(e => e.DgeLiczbaKolacji)
                .HasDefaultValue(0)
                .HasColumnName("DGE_LiczbaKolacji");
            entity.Property(e => e.DgeLiczbaObiadow)
                .HasDefaultValue(0)
                .HasColumnName("DGE_LiczbaObiadow");
            entity.Property(e => e.DgeLiczbaSniadan)
                .HasDefaultValue(0)
                .HasColumnName("DGE_LiczbaSniadan");
            entity.Property(e => e.DgePokazKomentarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("DGE_PokazKomentarz");
            entity.Property(e => e.DgeRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("DGE_Rodzaj");
            entity.Property(e => e.DgeStawkaNumer)
                .HasDefaultValue(0)
                .HasColumnName("DGE_StawkaNumer");
            entity.Property(e => e.DgeTstampRozp)
                .HasDefaultValue(0)
                .HasColumnName("DGE_TStampRozp");
            entity.Property(e => e.DgeTstampZak)
                .HasDefaultValue(0)
                .HasColumnName("DGE_TStampZak");
            entity.Property(e => e.DgeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGE_Waluta");
        });

        modelBuilder.Entity<DelegacjeStawki>(entity =>
        {
            entity.HasKey(e => e.DgsId).HasName("DGS_Primary");

            entity.ToTable("DelegacjeStawki", "CDN");

            entity.Property(e => e.DgsId).HasColumnName("DGS_Id");
            entity.Property(e => e.DgsDataO)
                .HasDefaultValue(0)
                .HasColumnName("DGS_DataO");
            entity.Property(e => e.DgsDieta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGS_Dieta");
            entity.Property(e => e.DgsKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGS_Kraj");
            entity.Property(e => e.DgsLimitNaNocleg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGS_LimitNaNocleg");
            entity.Property(e => e.DgsRyczaltZaDojazdDworzec)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGS_RyczaltZaDojazdDworzec");
            entity.Property(e => e.DgsRyczaltZaNocleg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGS_RyczaltZaNocleg");
            entity.Property(e => e.DgsRyczaltZaPrzejazd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DGS_RyczaltZaPrzejazd");
            entity.Property(e => e.DgsStrefa)
                .HasDefaultValue((byte)0)
                .HasColumnName("DGS_Strefa");
            entity.Property(e => e.DgsStrefaNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGS_StrefaNazwa");
            entity.Property(e => e.DgsStrefaNumer)
                .HasDefaultValue((short)0)
                .HasColumnName("DGS_StrefaNumer");
            entity.Property(e => e.DgsTypNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGS_TypNazwa");
            entity.Property(e => e.DgsTypNumer)
                .HasDefaultValue((short)0)
                .HasColumnName("DGS_TypNumer");
            entity.Property(e => e.DgsWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGS_Waluta");
        });

        modelBuilder.Entity<DelegacjeTransport>(entity =>
        {
            entity.HasKey(e => e.DgtId).HasName("DGT_Primary");

            entity.ToTable("DelegacjeTransport", "CDN", tb => tb.HasTrigger("DelegacjeTransport_InsertUpdateHandler"));

            entity.HasIndex(e => e.DgtDlgnumer, "DGTDlg");

            entity.HasIndex(e => e.DgtSamId, "DGTSamID");

            entity.HasIndex(e => e.DgtSrodekTransId, "DGTSrodekTransID");

            entity.Property(e => e.DgtId).HasColumnName("DGT_ID");
            entity.Property(e => e.DgtDlgnumer)
                .HasDefaultValue(0)
                .HasColumnName("DGT_DLGNumer");
            entity.Property(e => e.DgtNrRejOpis)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DGT_NrRejOpis");
            entity.Property(e => e.DgtSamId)
                .HasDefaultValue(0)
                .HasColumnName("DGT_SamID");
            entity.Property(e => e.DgtSrodekTransId)
                .HasDefaultValue(0)
                .HasColumnName("DGT_SrodekTransID");
        });

        modelBuilder.Entity<DoDimensionCondition>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DO_DimensionCondition", "CDN");

            entity.HasIndex(e => new { e.DodcUserName, e.DodcExists, e.DodcDimension, e.DodcCmdshortcut }, "I_DO_DimensionCondition_1");

            entity.Property(e => e.DodcAddName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_AddName");
            entity.Property(e => e.DodcCmdshortcut)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DODC_CMDShortcut");
            entity.Property(e => e.DodcDcdid).HasColumnName("DODC_DCDId");
            entity.Property(e => e.DodcDimension).HasColumnName("DODC_Dimension");
            entity.Property(e => e.DodcExists).HasColumnName("DODC_Exists");
            entity.Property(e => e.DodcFullName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DODC_FullName");
            entity.Property(e => e.DodcKksaccount)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_KKSAccount");
            entity.Property(e => e.DodcKksname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_KKSName");
            entity.Property(e => e.DodcRootName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DODC_RootName");
            entity.Property(e => e.DodcSqldescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_SQLDescription");
            entity.Property(e => e.DodcSqlvar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_SQLVar");
            entity.Property(e => e.DodcUserName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_UserName");
            entity.Property(e => e.DodcWmraccount)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_WMRAccount");
            entity.Property(e => e.DodcWmrdescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_WMRDescription");
            entity.Property(e => e.DodcWmrname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DODC_WMRName");
        });

        modelBuilder.Entity<DoDimensionsBuffer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DO_DimensionsBuffer", "CDN");

            entity.HasIndex(e => new { e.DateCreated, e.DateDimActive, e.DimId }, "I_DO_DimensionsBuffer").IsClustered();

            entity.Property(e => e.Elementname)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.KksKonto)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("KKS_Konto");
            entity.Property(e => e.KksNazwa)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("KKS_Nazwa");
            entity.Property(e => e.Name)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Rnazwa)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RNazwa");
            entity.Property(e => e.Val1)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Val2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Val3)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.WmrKonto)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("WMR_Konto");
            entity.Property(e => e.WmrNazwa)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("WMR_Nazwa");
            entity.Property(e => e.WmrOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("WMR_Opis");
            entity.Property(e => e.WmrParId).HasColumnName("WMR_ParID");
            entity.Property(e => e.WmrTyp).HasColumnName("WMR_Typ");
        });

        modelBuilder.Entity<DokDefinicje>(entity =>
        {
            entity.HasKey(e => e.DokId).HasName("Dok_Primary");

            entity.ToTable("DokDefinicje", "CDN", tb =>
                {
                    tb.HasTrigger("DokDefinicje_DeleteHandler");
                    tb.HasTrigger("DokDefinicje_PrzepiszParametry");
                });

            entity.HasIndex(e => new { e.DokFrsId, e.DokGidtyp }, "DOKDokument").IsUnique();

            entity.Property(e => e.DokId).HasColumnName("Dok_Id");
            entity.Property(e => e.DokAdnotacjaNaNiezatwierdzonym)
                .HasDefaultValue(0)
                .HasColumnName("Dok_AdnotacjaNaNiezatwierdzonym");
            entity.Property(e => e.DokAktualizujCenySpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujCenySpr");
            entity.Property(e => e.DokAktualizujCenyZak)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujCenyZak");
            entity.Property(e => e.DokAktualizujPoDaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujPoDaty");
            entity.Property(e => e.DokAktualizujPoKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujPoKnt");
            entity.Property(e => e.DokAktualizujPoMagazynie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujPoMagazynie");
            entity.Property(e => e.DokAktualizujPoPlatnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujPoPlatnosc");
            entity.Property(e => e.DokAktualizujPoSpDost)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujPoSpDost");
            entity.Property(e => e.DokAktualizujPoWlascicielu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AktualizujPoWlascicielu");
            entity.Property(e => e.DokAnulPrawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AnulPrawo");
            entity.Property(e => e.DokAnulPrawoZpotwParam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AnulPrawoZPotwParam");
            entity.Property(e => e.DokAutoGenerowanieDokKdz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoGenerowanieDokKDZ");
            entity.Property(e => e.DokAutoGenerowaniePkj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoGenerowaniePKJ");
            entity.Property(e => e.DokAutoKaucje)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoKaucje");
            entity.Property(e => e.DokAutoMagazynowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoMagazynowe");
            entity.Property(e => e.DokAutoPotwierdzanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoPotwierdzanie");
            entity.Property(e => e.DokAutoPrzeplanujNizsze)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoPrzeplanujNizsze");
            entity.Property(e => e.DokAutoRozliczZal)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoRozliczZal");
            entity.Property(e => e.DokAutoWydruk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoWydruk");
            entity.Property(e => e.DokAutoWydrukPytaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoWydrukPytaj");
            entity.Property(e => e.DokAutoWydrukPytajZapis)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoWydrukPytajZapis");
            entity.Property(e => e.DokAutoWyposazenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutoWyposazenie");
            entity.Property(e => e.DokAutomatyczneKompensaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutomatyczneKompensaty");
            entity.Property(e => e.DokAutomatyczneMmp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_AutomatyczneMMP");
            entity.Property(e => e.DokBlokadaZatwZniezgodnymNip)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_BlokadaZatwZNiezgodnymNIP");
            entity.Property(e => e.DokBstOptymalizacjaZam)
                .HasDefaultValue((byte)1)
                .HasColumnName("Dok_BstOptymalizacjaZam");
            entity.Property(e => e.DokBstpominPowiazane)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_BSTPominPowiazane");
            entity.Property(e => e.DokCenaBazowa)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_CenaBazowa");
            entity.Property(e => e.DokCentrum)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_Centrum");
            entity.Property(e => e.DokCenyRabatyPrawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_CenyRabatyPrawo");
            entity.Property(e => e.DokChronologiaRezerwacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ChronologiaRezerwacji");
            entity.Property(e => e.DokCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Dok_CzasModyfikacji");
            entity.Property(e => e.DokCzasPodniesienia)
                .HasDefaultValue(0)
                .HasColumnName("Dok_CzasPodniesienia");
            entity.Property(e => e.DokCzasPomniejszeniaDaty)
                .HasDefaultValue(0)
                .HasColumnName("Dok_CzasPomniejszeniaDaty");
            entity.Property(e => e.DokCzasPomniejszeniaDatyUstalonej)
                .HasDefaultValue(0)
                .HasColumnName("Dok_CzasPomniejszeniaDatyUstalonej");
            entity.Property(e => e.DokDataControllingowa)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_DataControllingowa");
            entity.Property(e => e.DokDataKsiegowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DataKsiegowania");
            entity.Property(e => e.DokDataMod)
                .HasDefaultValue(0)
                .HasColumnName("Dok_DataMod");
            entity.Property(e => e.DokDataNaSpinaczu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DataNaSpinaczu");
            entity.Property(e => e.DokDataOperacjiKdz)
                .HasDefaultValue((byte)3)
                .HasColumnName("Dok_DataOperacjiKDZ");
            entity.Property(e => e.DokDataPromocji)
                .HasDefaultValue((byte)1)
                .HasColumnName("Dok_DataPromocji");
            entity.Property(e => e.DokDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("Dok_DataRealizacji");
            entity.Property(e => e.DokDataZal)
                .HasDefaultValue(0)
                .HasColumnName("Dok_DataZal");
            entity.Property(e => e.DokDataZmagazynowego)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DataZMagazynowego");
            entity.Property(e => e.DokDataZmagazynowegoTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DataZMagazynowegoTyp");
            entity.Property(e => e.DokDefZnadrzednego)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DefZNadrzednego");
            entity.Property(e => e.DokDokPrzyjeciaPoDokWydania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DokPrzyjeciaPoDokWydania");
            entity.Property(e => e.DokDostepDoWzorcow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DostepDoWzorcow");
            entity.Property(e => e.DokDostepDoWzorcowAnalitPodrz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DostepDoWzorcowAnalitPodrz");
            entity.Property(e => e.DokDozwolonyOpisDokWbuforze)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DozwolonyOpisDokWBuforze");
            entity.Property(e => e.DokDzielWzwm)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_DzielWZWM");
            entity.Property(e => e.DokDziennik)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dok_Dziennik");
            entity.Property(e => e.DokDziennikOkreslonyWschemacie)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_DziennikOkreslonyWSchemacie");
            entity.Property(e => e.DokEdycjaKategorii)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_EdycjaKategorii");
            entity.Property(e => e.DokEdycjaPoUruchProd)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_EdycjaPoUruchProd");
            entity.Property(e => e.DokElementyNaKorektach)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ElementyNaKorektach");
            entity.Property(e => e.DokFrsId)
                .HasDefaultValue(0)
                .HasColumnName("Dok_FrsId");
            entity.Property(e => e.DokGenerowKdzpodczasKorygowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerowKDZPodczasKorygowania");
            entity.Property(e => e.DokGenerowanieDokFws)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerowanieDokFWS");
            entity.Property(e => e.DokGenerowanieDokFwz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerowanieDokFWZ");
            entity.Property(e => e.DokGenerowanieZamowienia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerowanieZamowienia");
            entity.Property(e => e.DokGenerujFaktAvistaEbc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerujFaktAVistaEBC");
            entity.Property(e => e.DokGenerujJednNaWieleMag)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerujJednNaWieleMag");
            entity.Property(e => e.DokGenerujPwpodczasRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerujPWPodczasRealizacji");
            entity.Property(e => e.DokGenerujRwpodczasRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerujRWPodczasRealizacji");
            entity.Property(e => e.DokGenerujZapisWterminarzu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerujZapisWTerminarzu");
            entity.Property(e => e.DokGenerujZatwPrzyZamykaniuZp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerujZatwPrzyZamykaniuZP");
            entity.Property(e => e.DokGenerujZleceniaPrzyPlanowaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_GenerujZleceniaPrzyPlanowaniu");
            entity.Property(e => e.DokGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_GIDTyp");
            entity.Property(e => e.DokIleDniKurs)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_IleDniKurs");
            entity.Property(e => e.DokIloscElemKor)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_IloscElemKor");
            entity.Property(e => e.DokIloscXcena)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_IloscXCena");
            entity.Property(e => e.DokJedenMagazyn)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_JedenMagazyn");
            entity.Property(e => e.DokJedenSkladnikRobocizna)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_JedenSkladnikRobocizna");
            entity.Property(e => e.DokKategoriaFin)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KategoriaFin");
            entity.Property(e => e.DokKntLimitPrawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KntLimitPrawo");
            entity.Property(e => e.DokKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_KntNumer");
            entity.Property(e => e.DokKntOgolne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KntOgolne");
            entity.Property(e => e.DokKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_KntTyp");
            entity.Property(e => e.DokKontrahentDoc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KontrahentDoc");
            entity.Property(e => e.DokKontrolujIlosciPrzyGenZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KontrolujIlosciPrzyGenZam");
            entity.Property(e => e.DokKosztUslugi)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KosztUslugi");
            entity.Property(e => e.DokKosztUstalony)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KosztUstalony");
            entity.Property(e => e.DokKseFautomatycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KSeFAutomatycznie");
            entity.Property(e => e.DokKseFczyWysylac)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KSeFCzyWysylac");
            entity.Property(e => e.DokKseFpobierajUpo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KSeFPobierajUpo");
            entity.Property(e => e.DokKseFweryfikuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KSeFWeryfikuj");
            entity.Property(e => e.DokKursDlaDostawy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_KursDlaDostawy");
            entity.Property(e => e.DokKursLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_KursLp");
            entity.Property(e => e.DokLaczPozycjeMag)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_LaczPozycjeMag");
            entity.Property(e => e.DokLaczPozycjeWprodukcji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_LaczPozycjeWProdukcji");
            entity.Property(e => e.DokLimitUwzglDokBezPlat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_LimitUwzglDokBezPlat");
            entity.Property(e => e.DokLimitUwzglSaldoKntGlownego)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_LimitUwzglSaldoKntGlownego");
            entity.Property(e => e.DokLimitUwzglZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_LimitUwzglZam");
            entity.Property(e => e.DokLokalizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_Lokalizacja");
            entity.Property(e => e.DokMagDfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagDFirma");
            entity.Property(e => e.DokMagDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_MagDLp");
            entity.Property(e => e.DokMagDnumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagDNumer");
            entity.Property(e => e.DokMagDoRnumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagDoRNumer");
            entity.Property(e => e.DokMagDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_MagDTyp");
            entity.Property(e => e.DokMagKfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagKFirma");
            entity.Property(e => e.DokMagKlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_MagKLp");
            entity.Property(e => e.DokMagKnumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagKNumer");
            entity.Property(e => e.DokMagKtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_MagKTyp");
            entity.Property(e => e.DokMagPoRnumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagPoRNumer");
            entity.Property(e => e.DokMagPreferowane)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_MagPreferowane");
            entity.Property(e => e.DokMagRemNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagRemNumer");
            entity.Property(e => e.DokMagZfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagZFirma");
            entity.Property(e => e.DokMagZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_MagZLp");
            entity.Property(e => e.DokMagZnumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_MagZNumer");
            entity.Property(e => e.DokMagZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_MagZTyp");
            entity.Property(e => e.DokModyfikacjaKwotVataVista)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ModyfikacjaKwotVATaVista");
            entity.Property(e => e.DokNaliczajPunktyLojal)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_NaliczajPunktyLojal");
            entity.Property(e => e.DokNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dok_Nazwa");
            entity.Property(e => e.DokNettoBrutto)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_NettoBrutto");
            entity.Property(e => e.DokNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_NieKsiegowac");
            entity.Property(e => e.DokNieSprzedawajPonizejMarzy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_NieSprzedawajPonizejMarzy");
            entity.Property(e => e.DokNumerAnulowanego)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_NumerAnulowanego");
            entity.Property(e => e.DokObslugaSad)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ObslugaSAD");
            entity.Property(e => e.DokOdliczanieFaZal)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_OdliczanieFaZal");
            entity.Property(e => e.DokOkresPlanistycznyIloscOkresow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_OkresPlanistycznyIloscOkresow");
            entity.Property(e => e.DokOkresPlanistycznyZpp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_OkresPlanistycznyZPP");
            entity.Property(e => e.DokOpeModFirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_OpeModFirma");
            entity.Property(e => e.DokOpeModLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_OpeModLp");
            entity.Property(e => e.DokOpeModNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_OpeModNumer");
            entity.Property(e => e.DokOpeModTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_OpeModTyp");
            entity.Property(e => e.DokOpeZalFirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_OpeZalFirma");
            entity.Property(e => e.DokOpeZalLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_OpeZalLp");
            entity.Property(e => e.DokOpeZalNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_OpeZalNumer");
            entity.Property(e => e.DokOpeZalTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_OpeZalTyp");
            entity.Property(e => e.DokOpisZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_OpisZRodzica");
            entity.Property(e => e.DokOsobneElementyDostawZdp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_OsobneElementyDostawZDP");
            entity.Property(e => e.DokPanelPomocniczy)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PanelPomocniczy");
            entity.Property(e => e.DokPlacePomniejszenieProporcjonalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlacePomniejszenieProporcjonalne");
            entity.Property(e => e.DokPlacePomniejszenieUrlopMies)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlacePomniejszenieUrlopMies");
            entity.Property(e => e.DokPlacePomniejszenieZus)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlacePomniejszenieZUS");
            entity.Property(e => e.DokPlacePozaNorma)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlacePozaNorma");
            entity.Property(e => e.DokPlanCzasTrwania)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PlanCzasTrwania");
            entity.Property(e => e.DokPlanCzasTrwaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlanCzasTrwaniaJedn");
            entity.Property(e => e.DokPlanDomyslne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlanDomyslne");
            entity.Property(e => e.DokPlanDostepneMetody)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PlanDostepneMetody");
            entity.Property(e => e.DokPlanProdukcjiOkresPlanistycznyCzasTrwJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlanProdukcjiOkresPlanistycznyCzasTrwJedn");
            entity.Property(e => e.DokPlanProdukcjiOkresPlanistycznyCzasTrwania)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PlanProdukcjiOkresPlanistycznyCzasTrwania");
            entity.Property(e => e.DokPlanProdukcjiOkresPlanistycznyOd)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PlanProdukcjiOkresPlanistycznyOd");
            entity.Property(e => e.DokPlanRozpocznijOd)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PlanRozpocznijOd");
            entity.Property(e => e.DokPlanWskazaneZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlanWskazaneZasoby");
            entity.Property(e => e.DokPlanZgrubne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlanZgrubne");
            entity.Property(e => e.DokPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_Platnosci");
            entity.Property(e => e.DokPlatnosciRozszerzone)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PlatnosciRozszerzone");
            entity.Property(e => e.DokPltData)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PltData");
            entity.Property(e => e.DokPltWaluta)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PltWaluta");
            entity.Property(e => e.DokPodglPrawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PodglPrawo");
            entity.Property(e => e.DokPodmianaMaterialow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PodmianaMaterialow");
            entity.Property(e => e.DokPodzialPzi)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PodzialPZI");
            entity.Property(e => e.DokPolaczOperacjeTpZpolprod)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PolaczOperacjeTpZPolprod");
            entity.Property(e => e.DokPominAkcyze)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PominAkcyze");
            entity.Property(e => e.DokPominClo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PominClo");
            entity.Property(e => e.DokPominKosztK)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PominKosztK");
            entity.Property(e => e.DokPominKosztZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PominKosztZ");
            entity.Property(e => e.DokPoprzednieTrNprawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PoprzednieTrNPrawo");
            entity.Property(e => e.DokPoprzednieZaNprawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PoprzednieZaNPrawo");
            entity.Property(e => e.DokPosTerminRozpRls)
                .HasDefaultValue((short)14)
                .HasColumnName("Dok_PosTerminRozpRLS");
            entity.Property(e => e.DokPowielaniePozycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PowielaniePozycji");
            entity.Property(e => e.DokPpldoProdukcjiPodst)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLDoProdukcjiPodst");
            entity.Property(e => e.DokPpldoZamowieniaPodst)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLDoZamowieniaPodst");
            entity.Property(e => e.DokPpliloscOgolnieDostepna)
                .HasDefaultValue((byte)1)
                .HasColumnName("Dok_PPLIloscOgolnieDostepna");
            entity.Property(e => e.DokPpliloscWdrodze)
                .HasDefaultValue((byte)1)
                .HasColumnName("Dok_PPLIloscWDrodze");
            entity.Property(e => e.DokPploptymalizacjaDoProdukcji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLOptymalizacjaDoProdukcji");
            entity.Property(e => e.DokPploptymalizacjaDoZamowienia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLOptymalizacjaDoZamowienia");
            entity.Property(e => e.DokPplproduktyZdefTechnologia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLProduktyZdefTechnologia");
            entity.Property(e => e.DokPplprzeliczajPotwierdzony)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLPrzeliczajPotwierdzony");
            entity.Property(e => e.DokPplskladnikiMps)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PPLSkladnikiMPS");
            entity.Property(e => e.DokPplsposobPrzeliczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLSposobPrzeliczenia");
            entity.Property(e => e.DokPpluwzglednijBom)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PPLUwzglednijBOM");
            entity.Property(e => e.DokPrecyzjaCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrecyzjaCeny");
            entity.Property(e => e.DokProdPrzyOtwOknaZawijajDrzewoOperacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ProdPrzyOtwOknaZawijajDrzewoOperacji");
            entity.Property(e => e.DokProdZakonczenieWgPlanu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ProdZakonczenieWgPlanu");
            entity.Property(e => e.DokProduktOdSkladnikow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ProduktOdSkladnikow");
            entity.Property(e => e.DokProjekt)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_Projekt");
            entity.Property(e => e.DokProstaAvista)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ProstaAVISTA");
            entity.Property(e => e.DokProwizjaTaxFree)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Dok_ProwizjaTaxFree");
            entity.Property(e => e.DokPrzeliczDomyslne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzeliczDomyslne");
            entity.Property(e => e.DokPrzeliczajAktualizowaneCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzeliczajAktualizowaneCeny");
            entity.Property(e => e.DokPrzepisujOpisZlecenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzepisujOpisZlecenia");
            entity.Property(e => e.DokPrzeplanDomyslne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzeplanDomyslne");
            entity.Property(e => e.DokPrzepnijZasoby)
                .HasDefaultValue(0)
                .HasColumnName("Dok_PrzepnijZasoby");
            entity.Property(e => e.DokPrzesunNaZwolnionych)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzesunNaZwolnionych");
            entity.Property(e => e.DokPrzesunOperacjePoRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzesunOperacjePoRealizacji");
            entity.Property(e => e.DokPrzydzialReczny)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzydzialReczny");
            entity.Property(e => e.DokPrzydzielDoRezerwacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzydzielDoRezerwacji");
            entity.Property(e => e.DokPrzywracajRezerwacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PrzywracajRezerwacje");
            entity.Property(e => e.DokPustaLista)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_PustaLista");
            entity.Property(e => e.DokRabatOdWartKsieg)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RabatOdWartKsieg");
            entity.Property(e => e.DokRealizacja)
                .HasDefaultValue(0)
                .HasColumnName("Dok_Realizacja");
            entity.Property(e => e.DokRealizacjaRejestruj)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_RealizacjaRejestruj");
            entity.Property(e => e.DokRealizacjaUruchamiaj)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_RealizacjaUruchamiaj");
            entity.Property(e => e.DokRealizacjaWgPlanu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RealizacjaWgPlanu");
            entity.Property(e => e.DokRealizujWcalosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RealizujWCalosci");
            entity.Property(e => e.DokReklUwzgledniajMag)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ReklUwzgledniajMag");
            entity.Property(e => e.DokRezDataAkt)
                .HasDefaultValue(0)
                .HasColumnName("Dok_RezDataAkt");
            entity.Property(e => e.DokRezDataWaznosci)
                .HasDefaultValue(0)
                .HasColumnName("Dok_RezDataWaznosci");
            entity.Property(e => e.DokRezZasTylkoAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RezZasTylkoAktywne");
            entity.Property(e => e.DokRezerwacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_Rezerwacje");
            entity.Property(e => e.DokRezerwacjeNiepotw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RezerwacjeNiepotw");
            entity.Property(e => e.DokRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RezerwujZasoby");
            entity.Property(e => e.DokRodzajDatyKursu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RodzajDatyKursu");
            entity.Property(e => e.DokRodzajKategorii)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RodzajKategorii");
            entity.Property(e => e.DokRodzajKategoriiKw)
                .HasDefaultValue(0)
                .HasColumnName("Dok_RodzajKategoriiKW");
            entity.Property(e => e.DokRodzajPaczki)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_RodzajPaczki");
            entity.Property(e => e.DokSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SchNumer");
            entity.Property(e => e.DokSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SchTyp");
            entity.Property(e => e.DokSczfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SCZFirma");
            entity.Property(e => e.DokSczlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SCZLp");
            entity.Property(e => e.DokScznumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SCZNumer");
            entity.Property(e => e.DokScztyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SCZTyp");
            entity.Property(e => e.DokSerFirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SerFirma");
            entity.Property(e => e.DokSerKfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SerKFirma");
            entity.Property(e => e.DokSerKlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SerKLp");
            entity.Property(e => e.DokSerKnumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SerKNumer");
            entity.Property(e => e.DokSerKtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SerKTyp");
            entity.Property(e => e.DokSerLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SerLp");
            entity.Property(e => e.DokSerNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SerNumer");
            entity.Property(e => e.DokSerPfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SerPFirma");
            entity.Property(e => e.DokSerPlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SerPLp");
            entity.Property(e => e.DokSerPnumer)
                .HasDefaultValue(0)
                .HasColumnName("Dok_SerPNumer");
            entity.Property(e => e.DokSerPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SerPTyp");
            entity.Property(e => e.DokSerTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SerTyp");
            entity.Property(e => e.DokSpiCenaMarza)
                .HasDefaultValue((short)0)
                .HasColumnName("Dok_SpiCenaMarza");
            entity.Property(e => e.DokSpiCenaWartosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_SpiCenaWartosc");
            entity.Property(e => e.DokSpiKontrolaMarzy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_SpiKontrolaMarzy");
            entity.Property(e => e.DokSpiKoryguj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_SpiKoryguj");
            entity.Property(e => e.DokSpiNieKsiegujSpiete)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_SpiNieKsiegujSpiete");
            entity.Property(e => e.DokSpiZgodnoscKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_SpiZgodnoscKnt");
            entity.Property(e => e.DokSpiZgodnoscKursu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_SpiZgodnoscKursu");
            entity.Property(e => e.DokSposobLaczeniaDoPaczki)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_SposobLaczeniaDoPaczki");
            entity.Property(e => e.DokStopkaWydruku)
                .HasDefaultValue(0)
                .HasColumnName("Dok_StopkaWydruku");
            entity.Property(e => e.DokStosujPromocjePakietowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_StosujPromocjePakietowe");
            entity.Property(e => e.DokSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dok_Symbol");
            entity.Property(e => e.DokTylkoKraj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_TylkoKraj");
            entity.Property(e => e.DokTypCenyNabycia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_TypCenyNabycia");
            entity.Property(e => e.DokTypRozbiciaKwot)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_TypRozbiciaKwot");
            entity.Property(e => e.DokUjecieDwuT)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_UjecieDwuT");
            entity.Property(e => e.DokUjecieJednoT)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_UjecieJednoT");
            entity.Property(e => e.DokUsunNiesparowane)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_UsunNiesparowane");
            entity.Property(e => e.DokUwzgJednLogMaterialy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_UwzgJednLogMaterialy");
            entity.Property(e => e.DokUwzgJednLogProdukty)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_UwzgJednLogProdukty");
            entity.Property(e => e.DokUwzgledniajRezerwacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_UwzgledniajRezerwacje");
            entity.Property(e => e.DokVatEksportowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_VatEksportowy");
            entity.Property(e => e.DokWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dok_Waluta");
            entity.Property(e => e.DokWiazanieZamowien)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WiazanieZamowien");
            entity.Property(e => e.DokWsteczOdDatyRz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WsteczOdDatyRZ");
            entity.Property(e => e.DokWsteczOdDatyUstalonej)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WsteczOdDatyUstalonej");
            entity.Property(e => e.DokWyborMagazynuNaPozycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WyborMagazynuNaPozycji");
            entity.Property(e => e.DokWymagajPodaniaStanuOperacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WymagajPodaniaStanuOperacji");
            entity.Property(e => e.DokWymagajZgodnejJednostki)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WymagajZgodnejJednostki");
            entity.Property(e => e.DokWymiaryZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WymiaryZRodzica");
            entity.Property(e => e.DokWystPrawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WystPrawo");
            entity.Property(e => e.DokWyszukiwanieWlasciciela)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_WyszukiwanieWlasciciela");
            entity.Property(e => e.DokZakresRezerwacjiDlaProduktow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZakresRezerwacjiDlaProduktow");
            entity.Property(e => e.DokZamPrzeliczWart)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZamPrzeliczWart");
            entity.Property(e => e.DokZatwBezDanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZatwBezDanych");
            entity.Property(e => e.DokZatwPrawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZatwPrawo");
            entity.Property(e => e.DokZerowaIloscRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZerowaIloscRealizacji");
            entity.Property(e => e.DokZeroweWartosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZeroweWartosci");
            entity.Property(e => e.DokZgodnaWaluta)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZgodnaWaluta");
            entity.Property(e => e.DokZlcCenaNaPw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZlcCenaNaPW");
            entity.Property(e => e.DokZlcPrzezDokMag)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZlcPrzezDokMag");
            entity.Property(e => e.DokZmianaDatElem)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZmianaDatElem");
            entity.Property(e => e.DokZrodloTowarow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dok_ZrodloTowarow");

            entity.HasOne(d => d.DokFrs).WithMany(p => p.DokDefinicjes)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.DokFrsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DOKDokument");

            entity.HasMany(d => d.DoWWyms).WithMany(p => p.DoWs)
                .UsingEntity<Dictionary<string, object>>(
                    "DokWymiary",
                    r => r.HasOne<Wymiary>().WithMany()
                        .HasForeignKey("DoWWymId")
                        .HasConstraintName("FK_DowWymiar"),
                    l => l.HasOne<DokDefinicje>().WithMany()
                        .HasForeignKey("DoWId")
                        .HasConstraintName("FK_DowPrimary"),
                    j =>
                    {
                        j.HasKey("DoWId", "DoWWymId").HasName("DoW_Primary");
                        j.ToTable("DokWymiary", "CDN");
                        j.IndexerProperty<int>("DoWId").HasColumnName("DoW_ID");
                        j.IndexerProperty<int>("DoWWymId").HasColumnName("DoW_WymID");
                    });
        });

        modelBuilder.Entity<DokMagazyny>(entity =>
        {
            entity.HasKey(e => new { e.DokmDokId, e.DokmMagNumer, e.DokmRodzaj }).HasName("DOKM_Primary");

            entity.ToTable("DokMagazyny", "CDN", tb => tb.HasTrigger("DokMagazyny_InsertUpdateHandler"));

            entity.Property(e => e.DokmDokId).HasColumnName("DOKM_DokId");
            entity.Property(e => e.DokmMagNumer).HasColumnName("DOKM_MagNumer");
            entity.Property(e => e.DokmRodzaj).HasColumnName("DOKM_Rodzaj");

            entity.HasOne(d => d.DokmMagNumerNavigation).WithMany(p => p.DokMagazynies)
                .HasForeignKey(d => d.DokmMagNumer)
                .HasConstraintName("FK_DOKM_Magazyn");
        });

        modelBuilder.Entity<DokRelacje>(entity =>
        {
            entity.HasKey(e => new { e.DoRId, e.DoRMstyp, e.DoRMsnumer }).HasName("DoR_Primary");

            entity.ToTable("DokRelacje", "CDN", tb =>
                {
                    tb.HasTrigger("DokRelacje_InsertUpdateHandler");
                    tb.HasTrigger("MagLinkiDeleteDokRelacje");
                    tb.HasTrigger("MagLinkiInsertDokRelacje");
                });

            entity.Property(e => e.DoRId).HasColumnName("DoR_ID");
            entity.Property(e => e.DoRMstyp).HasColumnName("DoR_MSTyp");
            entity.Property(e => e.DoRMsnumer).HasColumnName("DoR_MSNumer");
            entity.Property(e => e.DoRMsfirma)
                .HasDefaultValue(0)
                .HasColumnName("DoR_MSFirma");
            entity.Property(e => e.DoRMslp)
                .HasDefaultValue((short)0)
                .HasColumnName("DoR_MSLp");

            entity.HasOne(d => d.DoR).WithMany(p => p.DokRelacjes)
                .HasForeignKey(d => d.DoRId)
                .HasConstraintName("FK_DoRPrimary");
        });

        modelBuilder.Entity<DokZwiazane>(entity =>
        {
            entity.HasKey(e => new { e.DozZrdnumer, e.DozZrdlp, e.DozZrdtyp, e.DozDoknumer, e.DozDoklp, e.DozDoktyp }).HasName("DOZ_Primary");

            entity.ToTable("DokZwiazane", "CDN", tb =>
                {
                    tb.HasTrigger("DokZwiazaneAlias_InsertUpdateHandler");
                    tb.HasTrigger("DokZwiazane_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.DozDoknumer, e.DozDoklp, e.DozDoktyp, e.DozZrdnumer, e.DozZrdlp, e.DozZrdtyp }, "DoZZwiazany");

            entity.Property(e => e.DozZrdnumer).HasColumnName("DOZ_ZRDNumer");
            entity.Property(e => e.DozZrdlp).HasColumnName("DOZ_ZRDLp");
            entity.Property(e => e.DozZrdtyp).HasColumnName("DOZ_ZRDTyp");
            entity.Property(e => e.DozDoknumer).HasColumnName("DOZ_DOKNumer");
            entity.Property(e => e.DozDoklp).HasColumnName("DOZ_DOKLp");
            entity.Property(e => e.DozDoktyp).HasColumnName("DOZ_DOKTyp");
            entity.Property(e => e.DozDataZwiazania)
                .HasDefaultValue(0)
                .HasColumnName("DOZ_DataZwiazania");
            entity.Property(e => e.DozDokfirma)
                .HasDefaultValue(0)
                .HasColumnName("DOZ_DOKFirma");
            entity.Property(e => e.DozPobierzWymiarAnalit)
                .HasDefaultValue((byte)0)
                .HasColumnName("DOZ_PobierzWymiarAnalit");
            entity.Property(e => e.DozZrdfirma)
                .HasDefaultValue(0)
                .HasColumnName("DOZ_ZRDFirma");
        });

        modelBuilder.Entity<Dostawy>(entity =>
        {
            entity.HasKey(e => e.DstGidnumer).HasName("Dst_Primary");

            entity.ToTable("Dostawy", "CDN", tb =>
                {
                    tb.HasTrigger("DostawyEAN_InsertUpdateHandler");
                    tb.HasTrigger("Dostawy_DeleteHandler");
                    tb.HasTrigger("Dostawy_DeleteOrphaned_TwrPartie");
                    tb.HasTrigger("Dostawy_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.DstEan, "DstEan");

            entity.HasIndex(e => new { e.DstTwrNumer, e.DstDstTstamp }, "DstTowar");

            entity.HasIndex(e => e.DstTpAid, "DstTpA");

            entity.HasIndex(e => new { e.DstTrnTyp, e.DstTrnNumer, e.DstTrnLp, e.DstSubTrnLp }, "DstTransakcja").IsUnique();

            entity.HasIndex(e => new { e.DstZewnetrznyId, e.DstZewnetrznySys }, "DstZewnetrzny");

            entity.Property(e => e.DstGidnumer).HasColumnName("Dst_GIDNumer");
            entity.Property(e => e.DstCckfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dst_CCKFirma");
            entity.Property(e => e.DstCcklp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_CCKLp");
            entity.Property(e => e.DstCcknumer)
                .HasDefaultValue(0)
                .HasColumnName("Dst_CCKNumer");
            entity.Property(e => e.DstCcktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_CCKTyp");
            entity.Property(e => e.DstCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dst_Cecha");
            entity.Property(e => e.DstDataW)
                .HasDefaultValue(0)
                .HasColumnName("Dst_DataW");
            entity.Property(e => e.DstDstTstamp)
                .HasDefaultValue(0)
                .HasColumnName("Dst_DstTStamp");
            entity.Property(e => e.DstEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dst_Ean");
            entity.Property(e => e.DstGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Dst_GIDFirma");
            entity.Property(e => e.DstGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_GIDLp");
            entity.Property(e => e.DstGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_GIDTyp");
            entity.Property(e => e.DstIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Dst_Ilosc");
            entity.Property(e => e.DstKosztKsiegowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Dst_KosztKsiegowy");
            entity.Property(e => e.DstKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Dst_KosztRzeczywisty");
            entity.Property(e => e.DstKosztUstalono)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dst_KosztUstalono");
            entity.Property(e => e.DstKsiegowaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Dst_KsiegowaBrutto");
            entity.Property(e => e.DstKsiegowaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Dst_KsiegowaNetto");
            entity.Property(e => e.DstOplataSpozFlaga)
                .HasDefaultValue((byte)0)
                .HasColumnName("Dst_OplataSpozFlaga");
            entity.Property(e => e.DstPolozenie)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Dst_Polozenie");
            entity.Property(e => e.DstRzeczywistaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Dst_RzeczywistaNetto");
            entity.Property(e => e.DstSubTrnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_SubTrnLp");
            entity.Property(e => e.DstTpAid)
                .HasDefaultValue(0)
                .HasColumnName("Dst_TpAId");
            entity.Property(e => e.DstTrnFirma)
                .HasDefaultValue(0)
                .HasColumnName("Dst_TrnFirma");
            entity.Property(e => e.DstTrnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_TrnLp");
            entity.Property(e => e.DstTrnNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dst_TrnNumer");
            entity.Property(e => e.DstTrnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_TrnTyp");
            entity.Property(e => e.DstTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("Dst_TwrFirma");
            entity.Property(e => e.DstTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_TwrLp");
            entity.Property(e => e.DstTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("Dst_TwrNumer");
            entity.Property(e => e.DstTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Dst_TwrTyp");
            entity.Property(e => e.DstWspFin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("Dst_WspFin");
            entity.Property(e => e.DstZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("Dst_ZewnetrznyId");
            entity.Property(e => e.DstZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("Dst_ZewnetrznySys");
        });

        modelBuilder.Entity<DstOpisy>(entity =>
        {
            entity.HasKey(e => new { e.DsODstNumer, e.DsODstLp }).HasName("DsO_Primary");

            entity.ToTable("DstOpisy", "CDN");

            entity.Property(e => e.DsODstNumer).HasColumnName("DsO_DstNumer");
            entity.Property(e => e.DsODstLp).HasColumnName("DsO_DstLp");
            entity.Property(e => e.DsODstFirma)
                .HasDefaultValue(0)
                .HasColumnName("DsO_DstFirma");
            entity.Property(e => e.DsODstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DsO_DstTyp");
            entity.Property(e => e.DsOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DsO_Opis");
            entity.Property(e => e.DsOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DsO_Typ");

            entity.HasOne(d => d.DsODstNumerNavigation).WithMany(p => p.DstOpisies)
                .HasForeignKey(d => d.DsODstNumer)
                .HasConstraintName("FK_DsOPrimary");
        });

        modelBuilder.Entity<DtsDeklaracjeElem>(entity =>
        {
            entity.HasKey(e => e.DdeId).HasName("DDE_Primary");

            entity.ToTable("DtsDeklaracjeElem", "CDN");

            entity.HasIndex(e => new { e.DdeDdNid, e.DdeId }, "DDENaglowek").IsUnique();

            entity.Property(e => e.DdeId).HasColumnName("DDE_Id");
            entity.Property(e => e.DdeDdNid)
                .HasDefaultValue(0)
                .HasColumnName("DDE_DdNId");
            entity.Property(e => e.DdeKwotaL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DDE_KwotaL");
            entity.Property(e => e.DdeKwotaM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DDE_KwotaM");
            entity.Property(e => e.DdeNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDE_Nazwa");
            entity.Property(e => e.DdeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DDE_Opis");
            entity.Property(e => e.DdePozycja)
                .HasDefaultValue(0)
                .HasColumnName("DDE_Pozycja");

            entity.HasOne(d => d.DdeDdN).WithMany(p => p.DtsDeklaracjeElems)
                .HasForeignKey(d => d.DdeDdNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DDENaglowek");
        });

        modelBuilder.Entity<DtsDeklaracjeNag>(entity =>
        {
            entity.HasKey(e => e.DdnId).HasName("DDN_Primary");

            entity.ToTable("DtsDeklaracjeNag", "CDN");

            entity.Property(e => e.DdnId).HasColumnName("DDN_ID");
            entity.Property(e => e.DdnDkNid)
                .HasDefaultValue(0)
                .HasColumnName("DDN_DkNId");
            entity.Property(e => e.DdnIdentyfikator)
                .HasDefaultValue(0)
                .HasColumnName("DDN_Identyfikator");
            entity.Property(e => e.DdnProgramId)
                .HasDefaultValue(0)
                .HasColumnName("DDN_ProgramId");
            entity.Property(e => e.DdnRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("DDN_RokMiesiac");
            entity.Property(e => e.DdnTstamp)
                .HasDefaultValue(0)
                .HasColumnName("DDN_TStamp");
            entity.Property(e => e.DdnTypDeklar)
                .HasDefaultValue((short)0)
                .HasColumnName("DDN_TypDeklar");
            entity.Property(e => e.DdnWersja)
                .HasDefaultValue((byte)0)
                .HasColumnName("DDN_Wersja");
            entity.Property(e => e.DdnXl)
                .HasDefaultValue((byte)0)
                .HasColumnName("DDN_XL");
        });

        modelBuilder.Entity<DtsWsady>(entity =>
        {
            entity.HasKey(e => e.DwsId).HasName("DWS_Primary");

            entity.ToTable("DtsWsady", "CDN", tb => tb.HasTrigger("DtsWsady_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.DwsDzeid, e.DwsId }, "DWSZestaw").IsUnique();

            entity.Property(e => e.DwsId).HasColumnName("DWS_ID");
            entity.Property(e => e.DwsDzeid)
                .HasDefaultValue(0)
                .HasColumnName("DWS_DZEID");
            entity.Property(e => e.DwsKoniec)
                .HasDefaultValue(0)
                .HasColumnName("DWS_Koniec");
            entity.Property(e => e.DwsLog)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("DWS_Log");
            entity.Property(e => e.DwsNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWS_Nazwa");
            entity.Property(e => e.DwsStart)
                .HasDefaultValue(0)
                .HasColumnName("DWS_Start");
            entity.Property(e => e.DwsStatus)
                .HasDefaultValue(0)
                .HasColumnName("DWS_Status");
        });

        modelBuilder.Entity<DtsWyplaty>(entity =>
        {
            entity.HasKey(e => e.DwpId).HasName("DWp_Primary");

            entity.ToTable("DtsWyplaty", "CDN");

            entity.HasIndex(e => new { e.DwpProgramId, e.DwpOpis, e.DwpListaId, e.DwpId }, "DwpLista").IsUnique();

            entity.Property(e => e.DwpId).HasColumnName("DWp_ID");
            entity.Property(e => e.DwpData)
                .HasDefaultValue(0)
                .HasColumnName("DWp_Data");
            entity.Property(e => e.DwpDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("DWp_DataWyst");
            entity.Property(e => e.DwpDzlId)
                .HasDefaultValue(0)
                .HasColumnName("DWp_DzlId");
            entity.Property(e => e.DwpDzlKod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_DzlKod");
            entity.Property(e => e.DwpImie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_Imie");
            entity.Property(e => e.DwpKategoria)
                .HasDefaultValue((byte)0)
                .HasColumnName("DWp_Kategoria");
            entity.Property(e => e.DwpKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_Kod");
            entity.Property(e => e.DwpKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("DWp_KursL");
            entity.Property(e => e.DwpKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("DWp_KursM");
            entity.Property(e => e.DwpListaId)
                .HasDefaultValue(0)
                .HasColumnName("DWp_ListaID");
            entity.Property(e => e.DwpLpParentId)
                .HasDefaultValue(0)
                .HasColumnName("DWp_LpParentID");
            entity.Property(e => e.DwpLpTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("DWp_LpTryb");
            entity.Property(e => e.DwpMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("DWp_Miesiac");
            entity.Property(e => e.DwpNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_Nazwa");
            entity.Property(e => e.DwpNazwisko)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_Nazwisko");
            entity.Property(e => e.DwpOddelegowani)
                .HasDefaultValue((short)0)
                .HasColumnName("DWp_Oddelegowani");
            entity.Property(e => e.DwpOpis)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_Opis");
            entity.Property(e => e.DwpProgramId)
                .HasDefaultValue((byte)0)
                .HasColumnName("DWp_ProgramID");
            entity.Property(e => e.DwpRok)
                .HasDefaultValue((short)0)
                .HasColumnName("DWp_Rok");
            entity.Property(e => e.DwpTstamp)
                .HasDefaultValue(0)
                .HasColumnName("DWp_TStamp");
            entity.Property(e => e.DwpWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_Waluta");
            entity.Property(e => e.DwpWypParentId)
                .HasDefaultValue(0)
                .HasColumnName("DWp_WypParentID");
            entity.Property(e => e.DwpWypTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("DWp_WypTryb");
            entity.Property(e => e.DwpXl)
                .HasDefaultValue((byte)0)
                .HasColumnName("DWp_XL");
            entity.Property(e => e.DwpZnacznik)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWp_Znacznik");
        });

        modelBuilder.Entity<DtsWyplatyKwoty>(entity =>
        {
            entity.HasKey(e => e.DwkId).HasName("DWK_Primary");

            entity.ToTable("DtsWyplatyKwoty", "CDN");

            entity.HasIndex(e => new { e.DwkDwpId, e.DwkId }, "DWKNaglowek").IsUnique();

            entity.Property(e => e.DwkId).HasColumnName("DWK_ID");
            entity.Property(e => e.DwkDwpId)
                .HasDefaultValue(0)
                .HasColumnName("DWK_DwpID");
            entity.Property(e => e.DwkKategoria)
                .HasDefaultValue((short)0)
                .HasColumnName("DWK_Kategoria");
            entity.Property(e => e.DwkKosztFirma)
                .HasDefaultValue((short)0)
                .HasColumnName("DWK_KosztFirma");
            entity.Property(e => e.DwkKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWK_Kwota");
            entity.Property(e => e.DwkRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("DWK_Rodzaj");
            entity.Property(e => e.DwkRodzajFis)
                .HasDefaultValue((short)0)
                .HasColumnName("DWK_RodzajFIS");
            entity.Property(e => e.DwkUbztyuId)
                .HasDefaultValue(0)
                .HasColumnName("DWK_UBZTyuId");

            entity.HasOne(d => d.DwkDwp).WithMany(p => p.DtsWyplatyKwoties)
                .HasForeignKey(d => d.DwkDwpId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DWKNaglowek");
        });

        modelBuilder.Entity<DtsWyplatyOpi>(entity =>
        {
            entity.HasKey(e => e.DwoId).HasName("DWO_Primary");

            entity.ToTable("DtsWyplatyOpis", "CDN");

            entity.HasIndex(e => new { e.DwoDwpId, e.DwoId }, "DWONaglowek").IsUnique();

            entity.Property(e => e.DwoId).HasColumnName("DWO_Id");
            entity.Property(e => e.DwoBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_Brutto");
            entity.Property(e => e.DwoDwpId)
                .HasDefaultValue(0)
                .HasColumnName("DWO_DwpId");
            entity.Property(e => e.DwoDzlId)
                .HasDefaultValue(0)
                .HasColumnName("DWO_DzlId");
            entity.Property(e => e.DwoDzlKod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWO_DzlKod");
            entity.Property(e => e.DwoLokId)
                .HasDefaultValue(0)
                .HasColumnName("DWO_LokId");
            entity.Property(e => e.DwoLokKod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWO_LokKod");
            entity.Property(e => e.DwoNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_Netto");
            entity.Property(e => e.DwoPpkf)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_PPKF");
            entity.Property(e => e.DwoPpkp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_PPKP");
            entity.Property(e => e.DwoPrjId)
                .HasDefaultValue(0)
                .HasColumnName("DWO_PrjId");
            entity.Property(e => e.DwoPrjKod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DWO_PrjKod");
            entity.Property(e => e.DwoProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_Procent");
            entity.Property(e => e.DwoZalFis)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_ZalFIS");
            entity.Property(e => e.DwoZdrow)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_Zdrow");
            entity.Property(e => e.DwoZusf)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_ZUSF");
            entity.Property(e => e.DwoZusp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DWO_ZUSP");

            entity.HasOne(d => d.DwoDwp).WithMany(p => p.DtsWyplatyOpis)
                .HasForeignKey(d => d.DwoDwpId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DWONaglowek");
        });

        modelBuilder.Entity<DtsZestawy>(entity =>
        {
            entity.HasKey(e => e.DzeId).HasName("DZE_Primary");

            entity.ToTable("DtsZestawy", "CDN", tb =>
                {
                    tb.HasTrigger("DtsZestawy_DeleteHandler");
                    tb.HasTrigger("DtsZestawy_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.DzeNazwaZestawu, "DZENazwa").IsUnique();

            entity.Property(e => e.DzeId).HasColumnName("DZE_ID");
            entity.Property(e => e.DzeAdresaci)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Adresaci");
            entity.Property(e => e.DzeAplikacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Aplikacja");
            entity.Property(e => e.DzeBaza)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Baza");
            entity.Property(e => e.DzeEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Email");
            entity.Property(e => e.DzeHaslo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Haslo");
            entity.Property(e => e.DzeHasloProfilu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_HasloProfilu");
            entity.Property(e => e.DzeLoginZintegrowany)
                .HasDefaultValue((short)0)
                .HasColumnName("DZE_LoginZintegrowany");
            entity.Property(e => e.DzeNadpisujLog)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZE_NadpisujLog");
            entity.Property(e => e.DzeNazwaZestawu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_NazwaZestawu");
            entity.Property(e => e.DzeNazwisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Nazwisko");
            entity.Property(e => e.DzeOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Opis");
            entity.Property(e => e.DzePolozenieDts)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_PolozenieDTS");
            entity.Property(e => e.DzePolozenieDtsrun)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_PolozenieDTSRUN");
            entity.Property(e => e.DzePolozeniePlikuIni)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_PolozeniePlikuIni");
            entity.Property(e => e.DzePolozeniePlikuLog)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_PolozeniePlikuLog");
            entity.Property(e => e.DzePrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("DZE_PrcFirma");
            entity.Property(e => e.DzePrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZE_PrcLp");
            entity.Property(e => e.DzePrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("DZE_PrcNumer");
            entity.Property(e => e.DzePrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZE_PrcTyp");
            entity.Property(e => e.DzeProfil)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Profil");
            entity.Property(e => e.DzeSerwer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Serwer");
            entity.Property(e => e.DzeSmtpautoryzacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZE_SMTPAutoryzacja");
            entity.Property(e => e.DzeSmtpport)
                .HasDefaultValue(25)
                .HasColumnName("DZE_SMTPPort");
            entity.Property(e => e.DzeSmtpserwer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_SMTPSerwer");
            entity.Property(e => e.DzeUzytkownik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZE_Uzytkownik");
            entity.Property(e => e.DzeUzywajSmtp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZE_UzywajSMTP");
            entity.Property(e => e.DzeWysylajRaport)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZE_WysylajRaport");
            entity.Property(e => e.DzeZkonfiguracji)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZE_ZKonfiguracji");
        });

        modelBuilder.Entity<DtsZmienne>(entity =>
        {
            entity.HasKey(e => e.DzmId).HasName("DZM_Primary");

            entity.ToTable("DtsZmienne", "CDN", tb => tb.HasTrigger("DtsZmienne_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.DzmDzeid, e.DzmNazwaParametru }, "DZENazwa").IsUnique();

            entity.Property(e => e.DzmId).HasColumnName("DZM_ID");
            entity.Property(e => e.DzmDzeid)
                .HasDefaultValue(0)
                .HasColumnName("DZM_DZEID");
            entity.Property(e => e.DzmFormatParametru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZM_FormatParametru");
            entity.Property(e => e.DzmNazwaParametru)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZM_NazwaParametru");
            entity.Property(e => e.DzmOpisParametru)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZM_OpisParametru");
            entity.Property(e => e.DzmTypParametru)
                .HasDefaultValue((short)1)
                .HasColumnName("DZM_TypParametru");
            entity.Property(e => e.DzmWartoscParametru)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZM_WartoscParametru");
        });

        modelBuilder.Entity<Dziennik>(entity =>
        {
            entity.HasKey(e => e.DzkGidnumer).HasName("DZK_Primary");

            entity.ToTable("Dziennik", "CDN", tb =>
                {
                    tb.HasTrigger("Dziennik_AktualizujDateZapisu");
                    tb.HasTrigger("Dziennik_DeleteHandler");
                    tb.HasTrigger("Dziennik_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.DzkDziennik, e.DzkRok, e.DzkMiesiac, e.DzkOkrPoczatek, e.DzkRmnumer }, "DZKAuto").IsUnique();

            entity.HasIndex(e => new { e.DzkBufor, e.DzkDziennik }, "DZKBuforDziennik");

            entity.HasIndex(e => new { e.DzkRok, e.DzkMiesiac, e.DzkDzien }, "DZKData");

            entity.HasIndex(e => e.DzkDataDekr, "DZKDataDekr");

            entity.HasIndex(e => new { e.DzkBufor, e.DzkRok, e.DzkMiesiac, e.DzkIdentyfikator }, "DZKIdentKS");

            entity.HasIndex(e => new { e.DzkRok, e.DzkMiesiac, e.DzkIdentyfikator }, "DZKIdentKSbezBuf");

            entity.HasIndex(e => e.DzkIdentyfikator, "DZKIdentyfikator");

            entity.HasIndex(e => new { e.DzkBufor, e.DzkRok, e.DzkMiesiac, e.DzkOkrPoczatek, e.DzkNumerDokumentu }, "DZKNumerDokumentu");

            entity.HasIndex(e => e.DzkTyp, "DZKTyp");

            entity.Property(e => e.DzkGidnumer).HasColumnName("DZK_GIDNumer");
            entity.Property(e => e.DzkAktywny)
                .HasDefaultValue(0)
                .HasColumnName("DZK_Aktywny");
            entity.Property(e => e.DzkBufor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_Bufor");
            entity.Property(e => e.DzkDataDekr)
                .HasDefaultValue(0)
                .HasColumnName("DZK_DataDekr");
            entity.Property(e => e.DzkDataOper)
                .HasDefaultValue(0)
                .HasColumnName("DZK_DataOper");
            entity.Property(e => e.DzkDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("DZK_DataWyst");
            entity.Property(e => e.DzkDokumentZrodlowy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_DokumentZrodlowy");
            entity.Property(e => e.DzkDzien)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_Dzien");
            entity.Property(e => e.DzkDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_Dziennik");
            entity.Property(e => e.DzkGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("DZK_GIDFirma");
            entity.Property(e => e.DzkGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_GIDLp");
            entity.Property(e => e.DzkGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_GIDTyp");
            entity.Property(e => e.DzkIdentyfikator)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_Identyfikator");
            entity.Property(e => e.DzkKomentarz)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_Komentarz");
            entity.Property(e => e.DzkKseFnumer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_KSeFNumer");
            entity.Property(e => e.DzkMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_Miesiac");
            entity.Property(e => e.DzkNumerDokumentu)
                .HasDefaultValue(0)
                .HasColumnName("DZK_NumerDokumentu");
            entity.Property(e => e.DzkOkrPoczatek)
                .HasDefaultValue(0)
                .HasColumnName("DZK_OkrPoczatek");
            entity.Property(e => e.DzkOkrSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_OkrSymbol");
            entity.Property(e => e.DzkOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("DZK_OpeMNumer");
            entity.Property(e => e.DzkOpewfirma)
                .HasDefaultValue(0)
                .HasColumnName("DZK_OPEWFirma");
            entity.Property(e => e.DzkOpewlp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_OPEWLp");
            entity.Property(e => e.DzkOpewnumer)
                .HasDefaultValue(0)
                .HasColumnName("DZK_OPEWNumer");
            entity.Property(e => e.DzkOpewtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_OPEWTyp");
            entity.Property(e => e.DzkOpezfirma)
                .HasDefaultValue(0)
                .HasColumnName("DZK_OPEZFirma");
            entity.Property(e => e.DzkOpezlp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_OPEZLp");
            entity.Property(e => e.DzkOpeznumer)
                .HasDefaultValue(0)
                .HasColumnName("DZK_OPEZNumer");
            entity.Property(e => e.DzkOpeztyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_OPEZTyp");
            entity.Property(e => e.DzkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DZK_Opis");
            entity.Property(e => e.DzkOrgNumer)
                .HasDefaultValue(0)
                .HasColumnName("DZK_OrgNumer");
            entity.Property(e => e.DzkProsty)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZK_Prosty");
            entity.Property(e => e.DzkRmnumer)
                .HasDefaultValue(0)
                .HasColumnName("DZK_RMNumer");
            entity.Property(e => e.DzkRok)
                .HasDefaultValue((short)0)
                .HasColumnName("DZK_Rok");
            entity.Property(e => e.DzkStorno)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZK_Storno");
            entity.Property(e => e.DzkSumaCt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DZK_SumaCT");
            entity.Property(e => e.DzkSumaDt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("DZK_SumaDT");
            entity.Property(e => e.DzkTs)
                .HasDefaultValue(0)
                .HasColumnName("DZK_TS");
            entity.Property(e => e.DzkTsmodyf)
                .HasDefaultValue(0)
                .HasColumnName("DZK_TSModyf");
            entity.Property(e => e.DzkTszatw)
                .HasDefaultValue(0)
                .HasColumnName("DZK_TSZatw");
            entity.Property(e => e.DzkTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("DZK_Typ");
        });

        modelBuilder.Entity<DziennikElem>(entity =>
        {
            entity.HasKey(e => new { e.DelGidnumer, e.DelGidlp }).HasName("DEL_Primary");

            entity.ToTable("DziennikElem", "CDN", tb =>
                {
                    tb.HasTrigger("DziennikElemAlias_DeleteHandler");
                    tb.HasTrigger("DziennikElem_DeleteHandler");
                });

            entity.HasIndex(e => new { e.DelKpddelnumer, e.DelKpddellp }, "DELKPDDEL");

            entity.HasIndex(e => new { e.DelGidnumer, e.DelPozycja }, "DELPozycja").IsUnique();

            entity.Property(e => e.DelGidnumer).HasColumnName("DEL_GIDNumer");
            entity.Property(e => e.DelGidlp).HasColumnName("DEL_GIDLp");
            entity.Property(e => e.DelDataOper)
                .HasDefaultValue(0)
                .HasColumnName("DEL_DataOper");
            entity.Property(e => e.DelDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("DEL_DataWyst");
            entity.Property(e => e.DelDokumentZrodlowy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DEL_DokumentZrodlowy");
            entity.Property(e => e.DelGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("DEL_GIDFirma");
            entity.Property(e => e.DelGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("DEL_GIDTyp");
            entity.Property(e => e.DelKpddeldc)
                .HasDefaultValue((byte)0)
                .HasColumnName("DEL_KPDDELDC");
            entity.Property(e => e.DelKpddellp)
                .HasDefaultValue((short)0)
                .HasColumnName("DEL_KPDDELLp");
            entity.Property(e => e.DelKpddellpKpd)
                .HasDefaultValue((short)0)
                .HasColumnName("DEL_KPDDELLpKPD");
            entity.Property(e => e.DelKpddelnumer)
                .HasDefaultValue(0)
                .HasColumnName("DEL_KPDDELNumer");
            entity.Property(e => e.DelOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("DEL_OpeMNumer");
            entity.Property(e => e.DelOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("DEL_OpeWNumer");
            entity.Property(e => e.DelOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("DEL_OpeZNumer");
            entity.Property(e => e.DelOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DEL_Opis");
            entity.Property(e => e.DelPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("DEL_Pozycja");
            entity.Property(e => e.DelTs)
                .HasDefaultValue(0)
                .HasColumnName("DEL_TS");
            entity.Property(e => e.DelTsmodyf)
                .HasDefaultValue(0)
                .HasColumnName("DEL_TSModyf");
            entity.Property(e => e.DelTypKwoty)
                .HasDefaultValue((short)0)
                .HasColumnName("DEL_TypKwoty");
            entity.Property(e => e.DelWycenaParId)
                .HasDefaultValue(0)
                .HasColumnName("DEL_WycenaParID");

            entity.HasOne(d => d.DelGidnumerNavigation).WithMany(p => p.DziennikElems)
                .HasForeignKey(d => d.DelGidnumer)
                .HasConstraintName("FK_DELPrimary");
        });

        modelBuilder.Entity<DziennikView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DziennikView", "CDN");

            entity.Property(e => e.CtDataRozliczenia).HasColumnName("CT_DataRozliczenia");
            entity.Property(e => e.CtKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CT_Konto");
            entity.Property(e => e.CtKwota)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("CT_Kwota");
            entity.Property(e => e.CtNierozliczony).HasColumnName("CT_Nierozliczony");
            entity.Property(e => e.CtNrKursu).HasColumnName("CT_NrKursu");
            entity.Property(e => e.CtPozostaje)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("CT_Pozostaje");
            entity.Property(e => e.CtRozliczony).HasColumnName("CT_Rozliczony");
            entity.Property(e => e.CtTermin).HasColumnName("CT_Termin");
            entity.Property(e => e.CtWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CT_Waluta");
            entity.Property(e => e.DelOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DEL_Opis");
            entity.Property(e => e.DtBezKontroli).HasColumnName("DT_BezKontroli");
            entity.Property(e => e.DtDataCentrali).HasColumnName("DT_DataCentrali");
            entity.Property(e => e.DtDataOddzialu).HasColumnName("DT_DataOddzialu");
            entity.Property(e => e.DtDataRozliczenia).HasColumnName("DT_DataRozliczenia");
            entity.Property(e => e.DtKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DT_Konto");
            entity.Property(e => e.DtKorektaBo).HasColumnName("DT_KorektaBO");
            entity.Property(e => e.DtKwota)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DT_Kwota");
            entity.Property(e => e.DtNierozliczony).HasColumnName("DT_Nierozliczony");
            entity.Property(e => e.DtNrKursu).HasColumnName("DT_NrKursu");
            entity.Property(e => e.DtPozostaje)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DT_Pozostaje");
            entity.Property(e => e.DtRozliczony).HasColumnName("DT_Rozliczony");
            entity.Property(e => e.DtTermin).HasColumnName("DT_Termin");
            entity.Property(e => e.DtWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DT_Waluta");
            entity.Property(e => e.DzkAktywny).HasColumnName("DZK_Aktywny");
            entity.Property(e => e.DzkBufor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DZK_Bufor");
            entity.Property(e => e.DzkDataDekr).HasColumnName("DZK_DataDekr");
            entity.Property(e => e.DzkDataOper).HasColumnName("DZK_DataOper");
            entity.Property(e => e.DzkDataWyst).HasColumnName("DZK_DataWyst");
            entity.Property(e => e.DzkDokumentZrodlowy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DZK_DokumentZrodlowy");
            entity.Property(e => e.DzkDzien).HasColumnName("DZK_Dzien");
            entity.Property(e => e.DzkDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DZK_Dziennik");
            entity.Property(e => e.DzkGidfirma).HasColumnName("DZK_GIDFirma");
            entity.Property(e => e.DzkGidlp).HasColumnName("DZK_GIDLp");
            entity.Property(e => e.DzkGidnumer).HasColumnName("DZK_GIDNumer");
            entity.Property(e => e.DzkGidtyp).HasColumnName("DZK_GIDTyp");
            entity.Property(e => e.DzkIdentyfikator)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DZK_Identyfikator");
            entity.Property(e => e.DzkKomentarz)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DZK_Komentarz");
            entity.Property(e => e.DzkMiesiac).HasColumnName("DZK_Miesiac");
            entity.Property(e => e.DzkNumerDokumentu).HasColumnName("DZK_NumerDokumentu");
            entity.Property(e => e.DzkOkrPoczatek).HasColumnName("DZK_OkrPoczatek");
            entity.Property(e => e.DzkOkrSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DZK_OkrSymbol");
            entity.Property(e => e.DzkOpeWfirma).HasColumnName("DZK_OpeWFirma");
            entity.Property(e => e.DzkOpeWlp).HasColumnName("DZK_OpeWLp");
            entity.Property(e => e.DzkOpeWnumer).HasColumnName("DZK_OpeWNumer");
            entity.Property(e => e.DzkOpeWtyp).HasColumnName("DZK_OpeWTyp");
            entity.Property(e => e.DzkOpeZfirma).HasColumnName("DZK_OpeZFirma");
            entity.Property(e => e.DzkOpeZlp).HasColumnName("DZK_OpeZLp");
            entity.Property(e => e.DzkOpeZnumer).HasColumnName("DZK_OpeZNumer");
            entity.Property(e => e.DzkOpeZtyp).HasColumnName("DZK_OpeZTyp");
            entity.Property(e => e.DzkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DZK_Opis");
            entity.Property(e => e.DzkProsty).HasColumnName("DZK_Prosty");
            entity.Property(e => e.DzkRmnumer).HasColumnName("DZK_RMNumer");
            entity.Property(e => e.DzkRok).HasColumnName("DZK_Rok");
            entity.Property(e => e.DzkStorno).HasColumnName("DZK_Storno");
            entity.Property(e => e.DzkTs).HasColumnName("DZK_TS");
        });

        modelBuilder.Entity<EpDelegacjeView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EP_DelegacjeView", "CDN");

            entity.Property(e => e.AkceptacjaData).HasColumnType("datetime");
            entity.Property(e => e.Cel)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DataPowrotu).HasColumnType("datetime");
            entity.Property(e => e.DataWyjazdu).HasColumnType("datetime");
            entity.Property(e => e.Komentarz)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Miejsce)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Numer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PracownikAkronim)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PracownikImie)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PracownikNazwisko)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Zaliczka).HasColumnType("decimal(38, 2)");
        });

        modelBuilder.Entity<Fakty>(entity =>
        {
            entity.HasKey(e => e.FakId).HasName("Fak_Primary");

            entity.ToTable("Fakty", "CDN");

            entity.Property(e => e.FakId).HasColumnName("Fak_ID");
            entity.Property(e => e.FakBiid)
                .HasDefaultValue(0)
                .HasColumnName("Fak_BIID");
            entity.Property(e => e.FakInternalName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Fak_InternalName");
            entity.Property(e => e.FakTranslationId)
                .HasDefaultValue(0)
                .HasColumnName("Fak_TranslationID");
        });

        modelBuilder.Entity<Filtry>(entity =>
        {
            entity.HasKey(e => new { e.FilProcId, e.FilListaId, e.FilLp, e.FilStaTyp, e.FilStaNumer }).HasName("FIL_Primary");

            entity.ToTable("Filtry", "CDN");

            entity.Property(e => e.FilProcId).HasColumnName("FIL_ProcID");
            entity.Property(e => e.FilListaId).HasColumnName("FIL_ListaID");
            entity.Property(e => e.FilLp).HasColumnName("FIL_Lp");
            entity.Property(e => e.FilStaTyp).HasColumnName("FIL_StaTyp");
            entity.Property(e => e.FilStaNumer).HasColumnName("FIL_StaNumer");
            entity.Property(e => e.FilDomyslny).HasColumnName("FIL_Domyslny");
            entity.Property(e => e.FilFiltrIsam)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FIL_FiltrISAM");
            entity.Property(e => e.FilFiltrSql)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FIL_FiltrSQL");
            entity.Property(e => e.FilFiltrSym)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FIL_FiltrSym");
            entity.Property(e => e.FilNazwa)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FIL_Nazwa");
            entity.Property(e => e.FilStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("FIL_StaFirma");
            entity.Property(e => e.FilStaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("FIL_StaLp");
            entity.Property(e => e.FilZapisujHistorie)
                .HasDefaultValue((byte)0)
                .HasColumnName("FIL_ZapisujHistorie");
        });

        modelBuilder.Entity<Firma>(entity =>
        {
            entity.HasKey(e => e.FrmGidNumer).HasName("Frm_Primary");

            entity.ToTable("Firma", "CDN", tb =>
                {
                    tb.HasTrigger("Firma_DeleteHandler");
                    tb.HasTrigger("Firma_InsertUpdateHandler");
                });

            entity.Property(e => e.FrmGidNumer).HasColumnName("Frm_GidNumer");
            entity.Property(e => e.FrmAdres1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Adres1");
            entity.Property(e => e.FrmCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Frm_CzasModyfikacji");
            entity.Property(e => e.FrmDataArc)
                .HasDefaultValue(0)
                .HasColumnName("Frm_DataArc");
            entity.Property(e => e.FrmDdataRej)
                .HasDefaultValue(0)
                .HasColumnName("Frm_DDataRej");
            entity.Property(e => e.FrmDdataRozp)
                .HasDefaultValue(0)
                .HasColumnName("Frm_DDataRozp");
            entity.Property(e => e.FrmDdokNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DDokNumer");
            entity.Property(e => e.FrmDdokTozsamosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("Frm_DDokTozsamosci");
            entity.Property(e => e.FrmDemailP)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DEmailP");
            entity.Property(e => e.FrmDemailPfron)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DEmailPFRON");
            entity.Property(e => e.FrmDemailSekretariat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DEmailSekretariat");
            entity.Property(e => e.FrmDgmina)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DGmina");
            entity.Property(e => e.FrmDimieP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DImieP");
            entity.Property(e => e.FrmDkapitalWplacony)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("Frm_DKapitalWplacony");
            entity.Property(e => e.FrmDkapitalZakladowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("Frm_DKapitalZakladowy");
            entity.Property(e => e.FrmDkodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DKodP");
            entity.Property(e => e.FrmDkraj)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DKraj");
            entity.Property(e => e.FrmDlugoscGeo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DlugoscGeo");
            entity.Property(e => e.FrmDmiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DMiasto");
            entity.Property(e => e.FrmDmiesiace)
                .HasDefaultValue((byte)0)
                .HasColumnName("Frm_DMiesiace");
            entity.Property(e => e.FrmDnazwa)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNazwa");
            entity.Property(e => e.FrmDnazwaRej)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNazwaRej");
            entity.Property(e => e.FrmDnazwaSkr)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNazwaSkr");
            entity.Property(e => e.FrmDnazwaSkrPfron)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNazwaSkrPFRON");
            entity.Property(e => e.FrmDnazwaSkrZus)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNazwaSkrZUS");
            entity.Property(e => e.FrmDnazwiskoP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNazwiskoP");
            entity.Property(e => e.FrmDnrDomu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNrDomu");
            entity.Property(e => e.FrmDnrLokalu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNrLokalu");
            entity.Property(e => e.FrmDnumerGios)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNumerGIOS");
            entity.Property(e => e.FrmDnumerRej)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DNumerRej");
            entity.Property(e => e.FrmDorganRej)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DOrganRej");
            entity.Property(e => e.FrmDosobaPfron)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DOsobaPFRON");
            entity.Property(e => e.FrmDpoczta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DPoczta");
            entity.Property(e => e.FrmDpowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DPowiat");
            entity.Property(e => e.FrmDregon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DRegon");
            entity.Property(e => e.FrmDrodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Frm_DRodzaj");
            entity.Property(e => e.FrmDskrP)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DSkrP");
            entity.Property(e => e.FrmDtelP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DTelP");
            entity.Property(e => e.FrmDtelPfron)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DTelPFRON");
            entity.Property(e => e.FrmDtelefax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DTelefax");
            entity.Property(e => e.FrmDtelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DTelefon");
            entity.Property(e => e.FrmDtelex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DTelex");
            entity.Property(e => e.FrmDulica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DUlica");
            entity.Property(e => e.FrmDwalutaKapitalu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DWalutaKapitalu");
            entity.Property(e => e.FrmDwojewodztwo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_DWojewodztwo");
            entity.Property(e => e.FrmEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Email");
            entity.Property(e => e.FrmFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Fax");
            entity.Property(e => e.FrmGidFirma)
                .HasDefaultValue(0)
                .HasColumnName("Frm_GidFirma");
            entity.Property(e => e.FrmGidLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Frm_GidLp");
            entity.Property(e => e.FrmGidTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Frm_GidTyp");
            entity.Property(e => e.FrmGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_GLN");
            entity.Property(e => e.FrmGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Gmina");
            entity.Property(e => e.FrmGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("Frm_GUID");
            entity.Property(e => e.FrmGuiddane)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("Frm_GUIDdane");
            entity.Property(e => e.FrmGusemail)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_GUSEmail");
            entity.Property(e => e.FrmGusimieNazwisko)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_GUSImieNazwisko");
            entity.Property(e => e.FrmGustelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_GUSTelefon");
            entity.Property(e => e.FrmKarfirma)
                .HasDefaultValue(0)
                .HasColumnName("Frm_KARFirma");
            entity.Property(e => e.FrmKarlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Frm_KARLp");
            entity.Property(e => e.FrmKarnumer)
                .HasDefaultValue(0)
                .HasColumnName("Frm_KARNumer");
            entity.Property(e => e.FrmKartyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Frm_KARTyp");
            entity.Property(e => e.FrmKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("Frm_KntFirma");
            entity.Property(e => e.FrmKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Frm_KntLp");
            entity.Property(e => e.FrmKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("Frm_KntNumer");
            entity.Property(e => e.FrmKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Frm_KntTyp");
            entity.Property(e => e.FrmKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_KodP");
            entity.Property(e => e.FrmKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Kraj");
            entity.Property(e => e.FrmKrajDzialalnosci)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_KrajDzialalnosci");
            entity.Property(e => e.FrmKseFtoken)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_KSeFToken");
            entity.Property(e => e.FrmMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Miasto");
            entity.Property(e => e.FrmModem)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Modem");
            entity.Property(e => e.FrmNazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Nazwa1");
            entity.Property(e => e.FrmNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Nazwa2");
            entity.Property(e => e.FrmNazwa3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Nazwa3");
            entity.Property(e => e.FrmNazwa4)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Nazwa4");
            entity.Property(e => e.FrmNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_NIP");
            entity.Property(e => e.FrmNipPrefiks)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_NipPrefiks");
            entity.Property(e => e.FrmNumerBdo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_NumerBDO");
            entity.Property(e => e.FrmOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Opis");
            entity.Property(e => e.FrmOsobaDane)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_OsobaDane");
            entity.Property(e => e.FrmOsobaObliczenie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_OsobaObliczenie");
            entity.Property(e => e.FrmOsobaObliczeniePitimie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_OsobaObliczeniePITImie");
            entity.Property(e => e.FrmOsobaObliczeniePitnazwisko)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_OsobaObliczeniePITNazwisko");
            entity.Property(e => e.FrmPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Pesel");
            entity.Property(e => e.FrmPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Powiat");
            entity.Property(e => e.FrmPozycja)
                .HasDefaultValue(0)
                .HasColumnName("Frm_Pozycja");
            entity.Property(e => e.FrmRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Regon");
            entity.Property(e => e.FrmSymbolPkd2007)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_SymbolPKD2007");
            entity.Property(e => e.FrmSzerokoscGeo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_SzerokoscGeo");
            entity.Property(e => e.FrmTelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Telefon1");
            entity.Property(e => e.FrmTelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Telefon2");
            entity.Property(e => e.FrmTelex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Telex");
            entity.Property(e => e.FrmUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Ulica");
            entity.Property(e => e.FrmUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_URL");
            entity.Property(e => e.FrmUrzNumer)
                .HasDefaultValue(0)
                .HasColumnName("Frm_UrzNumer");
            entity.Property(e => e.FrmUrzNumerPit8)
                .HasDefaultValue(0)
                .HasColumnName("Frm_UrzNumerPIT8");
            entity.Property(e => e.FrmUrzNumerVat)
                .HasDefaultValue(0)
                .HasColumnName("Frm_UrzNumerVAT");
            entity.Property(e => e.FrmUrzNumerViudo)
                .HasDefaultValue(0)
                .HasColumnName("Frm_UrzNumerVIUDO");
            entity.Property(e => e.FrmUrzadSk)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_UrzadSk");
            entity.Property(e => e.FrmUrzadSkPit8)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_UrzadSkPIT8");
            entity.Property(e => e.FrmUrzadSkVat)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_UrzadSkVAT");
            entity.Property(e => e.FrmUrzadSkViudo)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_UrzadSkVIUDO");
            entity.Property(e => e.FrmWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Frm_Wojewodztwo");
        });

        modelBuilder.Entity<FktVWm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FKT_vWMS");

            entity.Property(e => e.WmsfAlokacjaOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_AlokacjaOrgID");
            entity.Property(e => e.WmsfBudzetOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_BudzetOrgID");
            entity.Property(e => e.WmsfCzderorgId).HasColumnName("WMSF_CZDEROrgID");
            entity.Property(e => e.WmsfCzdeworgId).HasColumnName("WMSF_CZDEWOrgID");
            entity.Property(e => e.WmsfCzdorgId).HasColumnName("WMSF_CZDOrgID");
            entity.Property(e => e.WmsfCzdzorgId).HasColumnName("WMSF_CZDZOrgID");
            entity.Property(e => e.WmsfDataRealizacjiElementu)
                .HasColumnType("datetime")
                .HasColumnName("WMSF_DataRealizacjiElementu");
            entity.Property(e => e.WmsfDataUtworzeniaElementu)
                .HasColumnType("datetime")
                .HasColumnName("WMSF_DataUtworzeniaElementu");
            entity.Property(e => e.WmsfDokNumerErporgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_DokNumerERPOrgID");
            entity.Property(e => e.WmsfDokNumerOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_DokNumerOrgID");
            entity.Property(e => e.WmsfDokumentWms)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_DokumentWMS");
            entity.Property(e => e.WmsfItemState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_ItemState");
            entity.Property(e => e.WmsfJednostkaLogistyczna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_JednostkaLogistyczna");
            entity.Property(e => e.WmsfJednostkaLogistycznaDocelowa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_JednostkaLogistycznaDocelowa");
            entity.Property(e => e.WmsfKntOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_KntOrgID");
            entity.Property(e => e.WmsfLoginOperatora)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("WMSF_LoginOperatora");
            entity.Property(e => e.WmsfMilosc)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("WMSF_MIlosc");
            entity.Property(e => e.WmsfMiloscPoczatkowa)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("WMSF_MIloscPoczatkowa");
            entity.Property(e => e.WmsfMiloscZrealizowana)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("WMSF_MIloscZrealizowana");
            entity.Property(e => e.WmsfMprocentRealizacjiPozycji).HasColumnName("WMSF_MProcentRealizacjiPozycji");
            entity.Property(e => e.WmsfMwagaBrutto)
                .HasColumnType("decimal(27, 10)")
                .HasColumnName("WMSF_MWagaBrutto");
            entity.Property(e => e.WmsfMwagaNetto)
                .HasColumnType("decimal(27, 10)")
                .HasColumnName("WMSF_MWagaNetto");
            entity.Property(e => e.WmsfOpeeporgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_OPEEPOrgID");
            entity.Property(e => e.WmsfOpeorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_OPEOrgID");
            entity.Property(e => e.WmsfOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WMSF_Opis");
            entity.Property(e => e.WmsfOrgId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WMSF_OrgID");
            entity.Property(e => e.WmsfProdOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_ProdOrgID");
            entity.Property(e => e.WmsfProjektOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_ProjektOrgID");
            entity.Property(e => e.WmsfStatuspozycjiId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("WMSF_StatuspozycjiID");
            entity.Property(e => e.WmsfStrFrmOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_StrFrmOrgID");
            entity.Property(e => e.WmsfTypDyspozycjiId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("WMSF_TypDyspozycjiID");
            entity.Property(e => e.WmsfUntid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_UNTID");
            entity.Property(e => e.WmsfWmsmcorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSMCOrgID");
            entity.Property(e => e.WmsfWmsmeorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSMEOrgID");
            entity.Property(e => e.WmsfWmsmorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSMOrgID");
            entity.Property(e => e.WmsfWmsmsorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSMSOrgID");
            entity.Property(e => e.WmsfWmssdorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSSDOrgID");
            entity.Property(e => e.WmsfWmssnadOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSSNadOrgID");
            entity.Property(e => e.WmsfWmssorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSSOrgID");
            entity.Property(e => e.WmsfWmsssorgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSF_WMSSSOrgID");
        });

        modelBuilder.Entity<FormBanElem>(entity =>
        {
            entity.HasKey(e => e.FbeId).HasName("FBE_Primary");

            entity.ToTable("FormBanElem", "CDN");

            entity.HasIndex(e => new { e.FbeFbnid, e.FbeId }, "FBENaglowek").IsUnique();

            entity.Property(e => e.FbeId).HasColumnName("FBE_ID");
            entity.Property(e => e.FbeFbnid)
                .HasDefaultValue(0)
                .HasColumnName("FBE_FBNID");
            entity.Property(e => e.FbeFormatRachunku)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBE_FormatRachunku");
            entity.Property(e => e.FbeLaczZpoprzednim)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBE_LaczZPoprzednim");
            entity.Property(e => e.FbeNumer)
                .HasDefaultValue(0)
                .HasColumnName("FBE_Numer");
            entity.Property(e => e.FbeRecNag)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBE_RecNag");
            entity.Property(e => e.FbeRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("FBE_Rodzaj");
            entity.Property(e => e.FbeSzerokosc)
                .HasDefaultValue((short)0)
                .HasColumnName("FBE_Szerokosc");
            entity.Property(e => e.FbeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FBE_Typ");
            entity.Property(e => e.FbeUzupelnijZnakiem)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBE_UzupelnijZnakiem");
            entity.Property(e => e.FbeWartosc)
                .HasMaxLength(5999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBE_Wartosc");
            entity.Property(e => e.FbeZnakUzup)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBE_ZnakUzup");

            entity.HasOne(d => d.FbeFbn).WithMany(p => p.FormBanElems)
                .HasForeignKey(d => d.FbeFbnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FBENaglowek");
        });

        modelBuilder.Entity<FormBanKryt>(entity =>
        {
            entity.HasKey(e => e.FbkId).HasName("FBK_Primary");

            entity.ToTable("FormBanKryt", "CDN");

            entity.HasIndex(e => e.FbkFbnid, "FBKNaglowek");

            entity.Property(e => e.FbkId).HasColumnName("FBK_ID");
            entity.Property(e => e.FbkFbeid)
                .HasDefaultValue(0)
                .HasColumnName("FBK_FBEID");
            entity.Property(e => e.FbkFbnid)
                .HasDefaultValue(0)
                .HasColumnName("FBK_FBNID");
            entity.Property(e => e.FbkOperator)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBK_Operator");
            entity.Property(e => e.FbkOperatorLog)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBK_OperatorLog");
            entity.Property(e => e.FbkRodzaj)
                .HasDefaultValue((byte)1)
                .HasColumnName("FBK_Rodzaj");
            entity.Property(e => e.FbkWartosc)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBK_Wartosc");

            entity.HasOne(d => d.FbkFbe).WithMany(p => p.FormBanKryts)
                .HasForeignKey(d => d.FbkFbeid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FBKElement");
        });

        modelBuilder.Entity<FormBanNag>(entity =>
        {
            entity.HasKey(e => e.FbnId).HasName("FBN_Primary");

            entity.ToTable("FormBanNag", "CDN");

            entity.HasIndex(e => e.FbnNazwa, "FBNNazwa").IsUnique();

            entity.Property(e => e.FbnId).HasColumnName("FBN_Id");
            entity.Property(e => e.FbnCdc)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBN_CDC");
            entity.Property(e => e.FbnCdcadres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_CDCAdres");
            entity.Property(e => e.FbnCdceditable)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBN_CDCEditable");
            entity.Property(e => e.FbnCdctypBanku)
                .HasDefaultValue((short)0)
                .HasColumnName("FBN_CDCTypBanku");
            entity.Property(e => e.FbnCdcwaitingForFunds)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBN_CDCWaitingForFunds");
            entity.Property(e => e.FbnFormatDaty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_FormatDaty");
            entity.Property(e => e.FbnNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_Nazwa");
            entity.Property(e => e.FbnOddzielajPola)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBN_OddzielajPola");
            entity.Property(e => e.FbnOgrTekst)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_OgrTekst");
            entity.Property(e => e.FbnOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_Opis");
            entity.Property(e => e.FbnPodzWier)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_PodzWier");
            entity.Property(e => e.FbnRozszerzenie)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_Rozszerzenie");
            entity.Property(e => e.FbnSeparPol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_SeparPol");
            entity.Property(e => e.FbnSeparTys)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_SeparTys");
            entity.Property(e => e.FbnSeparTytulem)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_SeparTytulem");
            entity.Property(e => e.FbnStronaKodowa)
                .HasDefaultValue(0)
                .HasColumnName("FBN_StronaKodowa");
            entity.Property(e => e.FbnTrim)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBN_Trim");
            entity.Property(e => e.FbnWielkieLitery)
                .HasDefaultValue((byte)0)
                .HasColumnName("FBN_WielkieLitery");
            entity.Property(e => e.FbnZamianaOgrTekst)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_ZamianaOgrTekst");
            entity.Property(e => e.FbnZnakDzies)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FBN_ZnakDzies");
        });

        modelBuilder.Entity<FormatyList>(entity =>
        {
            entity.HasKey(e => new { e.FlsProcedura, e.FlsIdoperatora, e.FlsIdkontrolki, e.FlsIdformatu }).HasName("FLS_Primary");

            entity.ToTable("FormatyList", "CDN");

            entity.Property(e => e.FlsProcedura)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FLS_Procedura");
            entity.Property(e => e.FlsIdoperatora).HasColumnName("FLS_IDOperatora");
            entity.Property(e => e.FlsIdkontrolki).HasColumnName("FLS_IDKontrolki");
            entity.Property(e => e.FlsIdformatu).HasColumnName("FLS_IDFormatu");
            entity.Property(e => e.FlsFlaga)
                .HasDefaultValue((byte)0)
                .HasColumnName("FLS_Flaga");
            entity.Property(e => e.FlsFormat)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FLS_Format");
            entity.Property(e => e.FlsModul)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FLS_Modul");
            entity.Property(e => e.FlsNazwaFormatu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FLS_NazwaFormatu");
            entity.Property(e => e.FlsVarLine)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FLS_VarLine");
        });

        modelBuilder.Entity<Frazy>(entity =>
        {
            entity.HasKey(e => e.FzyId).HasName("FZY_Primary");

            entity.ToTable("Frazy", "CDN");

            entity.HasIndex(e => e.FzyOryginal, "FZYOryginal");

            entity.Property(e => e.FzyId).HasColumnName("FZY_ID");
            entity.Property(e => e.FzyOryginal)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FZY_Oryginal");
        });

        modelBuilder.Entity<FrazyTlumaczenium>(entity =>
        {
            entity.HasKey(e => new { e.FztIdfrazy, e.FztIdjezyka }).HasName("FZT_Primary");

            entity.ToTable("FrazyTlumaczenia", "CDN");

            entity.HasIndex(e => e.FztIdfrazy, "FZTFraza");

            entity.HasIndex(e => e.FztIdjezyka, "FZTJezyk");

            entity.Property(e => e.FztIdfrazy).HasColumnName("FZT_IDFrazy");
            entity.Property(e => e.FztIdjezyka).HasColumnName("FZT_IDJezyka");
            entity.Property(e => e.FztTlumaczenie)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FZT_Tlumaczenie");

            entity.HasOne(d => d.FztIdfrazyNavigation).WithMany(p => p.FrazyTlumaczenia)
                .HasForeignKey(d => d.FztIdfrazy)
                .HasConstraintName("FK_FZTPrimary");

            entity.HasOne(d => d.FztIdjezykaNavigation).WithMany(p => p.FrazyTlumaczenia)
                .HasForeignKey(d => d.FztIdjezyka)
                .HasConstraintName("FK_FZTJezyk");
        });

        modelBuilder.Entity<FrmLinki>(entity =>
        {
            entity.HasKey(e => new { e.FrLGidtyp, e.FrLGidnumer, e.FrLGrOtyp, e.FrLGrOnumer, e.FrLGrOlp }).HasName("FrL_Primary");

            entity.ToTable("FrmLinki", "CDN", tb => tb.HasTrigger("FrmLinki_DeleteHandler"));

            entity.HasIndex(e => new { e.FrLGidnumer, e.FrLGidtyp }, "FrlOperator");

            entity.Property(e => e.FrLGidtyp).HasColumnName("FrL_GIDTyp");
            entity.Property(e => e.FrLGidnumer).HasColumnName("FrL_GIDNumer");
            entity.Property(e => e.FrLGrOtyp).HasColumnName("FrL_GrOTyp");
            entity.Property(e => e.FrLGrOnumer).HasColumnName("FrL_GrONumer");
            entity.Property(e => e.FrLGrOlp).HasColumnName("FrL_GrOLp");
            entity.Property(e => e.FrLGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("FrL_GIDFirma");
            entity.Property(e => e.FrLGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("FrL_GIDLp");
            entity.Property(e => e.FrLGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("FrL_GrOFirma");
            entity.Property(e => e.FrLLiczbaPowtorzen)
                .HasDefaultValue((short)0)
                .HasColumnName("FrL_LiczbaPowtorzen");
            entity.Property(e => e.FrLLisc)
                .HasDefaultValue((short)0)
                .HasColumnName("FrL_Lisc");
            entity.Property(e => e.FrLTstampDataMod)
                .HasDefaultValue(0)
                .HasColumnName("FrL_TStampDataMod");
        });

        modelBuilder.Entity<FrmObiekty>(entity =>
        {
            entity.HasKey(e => new { e.FroFrmid, e.FroGidtyp, e.FroGidnumer, e.FroGidlp }).HasName("FRO_Primary");

            entity.ToTable("FrmObiekty", "CDN", tb =>
                {
                    tb.HasTrigger("FrmObiekty_CzasModyfikacji");
                    tb.HasTrigger("FrmObiekty_DeleteHandler");
                    tb.HasTrigger("FrmObiekty_InsertUpdateHandler");
                    tb.HasTrigger("FrmObiekty_RejestrDomyslny");
                    tb.HasTrigger("MagLinkiDeleteFrmObiekty");
                    tb.HasTrigger("MagLinkiInsertFrmObiekty");
                });

            entity.HasIndex(e => e.FroMagProdId, "FroMagProd");

            entity.Property(e => e.FroFrmid).HasColumnName("FRO_FRMID");
            entity.Property(e => e.FroGidtyp).HasColumnName("FRO_GIDTyp");
            entity.Property(e => e.FroGidnumer).HasColumnName("FRO_GIDNumer");
            entity.Property(e => e.FroGidlp).HasColumnName("FRO_GIDLp");
            entity.Property(e => e.FroAutonomiczna)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRO_Autonomiczna");
            entity.Property(e => e.FroDlaDetalu)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRO_DlaDetalu");
            entity.Property(e => e.FroGid2firma)
                .HasDefaultValue(0)
                .HasColumnName("FRO_GID2Firma");
            entity.Property(e => e.FroGid2lp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRO_GID2Lp");
            entity.Property(e => e.FroGid2numer)
                .HasDefaultValue(0)
                .HasColumnName("FRO_GID2Numer");
            entity.Property(e => e.FroGid2typ)
                .HasDefaultValue((short)0)
                .HasColumnName("FRO_GID2Typ");
            entity.Property(e => e.FroGid3numer)
                .HasDefaultValue(0)
                .HasColumnName("FRO_GID3Numer");
            entity.Property(e => e.FroGid3typ)
                .HasDefaultValue((short)0)
                .HasColumnName("FRO_GID3Typ");
            entity.Property(e => e.FroGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("FRO_GIDFirma");
            entity.Property(e => e.FroKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("FRO_KnPNumer");
            entity.Property(e => e.FroKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRO_KnPTyp");
            entity.Property(e => e.FroMagProdId)
                .HasDefaultValue(0)
                .HasColumnName("FRO_MagProdId");
            entity.Property(e => e.FroNiedostepnaNaDok)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRO_NiedostepnaNaDok");

            entity.HasOne(d => d.FroFrm).WithMany(p => p.FrmObiekties)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.FroFrmid)
                .HasConstraintName("FK_FroID");
        });

        modelBuilder.Entity<FrmStruktura>(entity =>
        {
            entity.HasKey(e => new { e.FrsGidtyp, e.FrsGidnumer, e.FrsGrotyp, e.FrsGronumer, e.FrsGrolp, e.FrsAktywnyOd, e.FrsAktywnyDo }).HasName("FRS_Primary");

            entity.ToTable("FrmStruktura", "CDN", tb =>
                {
                    tb.HasTrigger("FrmLinkiDelete");
                    tb.HasTrigger("FrmLinkiInsert");
                    tb.HasTrigger("FrmLinkiUpdate");
                    tb.HasTrigger("FrmStrukturaAlias_DeleteHandler");
                    tb.HasTrigger("FrmStruktura_CzasModyfikacji");
                    tb.HasTrigger("FrmStruktura_DeleteHandler");
                    tb.HasTrigger("FrmStruktura_InsertUpdateHandler");
                    tb.HasTrigger("FrmStruktura_PrzepiszParametryProdukcja");
                    tb.HasTrigger("FrmStruktura_SprawdzOpisAnalityczny");
                    tb.HasTrigger("FrmStruktura_UaktualnijCentrumDom");
                    tb.HasTrigger("FrmStruktura_UaktualnijDaty");
                    tb.HasTrigger("FrmStruktura_UaktualnijProdZmianyGantta");
                    tb.HasTrigger("MagLinkiDeleteFrmStruktura");
                    tb.HasTrigger("MagLinkiInsertFrmStruktura");
                });

            entity.HasIndex(e => e.FrsFrmNumer, "FRSFirma");

            entity.HasIndex(e => e.FrsMagNumer, "FRSMagazyn");

            entity.HasIndex(e => new { e.FrsFormPlatNumer, e.FrsSprLp }, "FRSPlatnosciSpr");

            entity.HasIndex(e => new { e.FrsFormPlatNumer, e.FrsZakLp }, "FRSPlatnosciZakup");

            entity.HasIndex(e => e.FrsPrcNumer, "FRSPracownik");

            entity.HasIndex(e => e.FrsSernumer, "FRSSeria");

            entity.HasIndex(e => e.FrsScnumer, "FRSSkladCelny");

            entity.HasIndex(e => e.FrsId, "FrsID").IsUnique();

            entity.HasIndex(e => new { e.FrsGrotyp, e.FrsGronumer, e.FrsGrolp, e.FrsGidtyp, e.FrsWarstwa, e.FrsNazwa, e.FrsAktywnyOd, e.FrsAktywnyDo }, "FrsNazwa").IsUnique();

            entity.Property(e => e.FrsGidtyp).HasColumnName("FRS_GIDTyp");
            entity.Property(e => e.FrsGidnumer).HasColumnName("FRS_GIDNumer");
            entity.Property(e => e.FrsGrotyp).HasColumnName("FRS_GROTyp");
            entity.Property(e => e.FrsGronumer).HasColumnName("FRS_GRONumer");
            entity.Property(e => e.FrsGrolp).HasColumnName("FRS_GROLp");
            entity.Property(e => e.FrsAktywnyOd).HasColumnName("FRS_AktywnyOd");
            entity.Property(e => e.FrsAktywnyDo).HasColumnName("FRS_AktywnyDo");
            entity.Property(e => e.FrsArchiwalny).HasColumnName("FRS_Archiwalny");
            entity.Property(e => e.FrsBlokujDlaPozycjiZpw)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_BlokujDlaPozycjiZPW");
            entity.Property(e => e.FrsCenaDomyslna)
                .HasDefaultValue(0)
                .HasColumnName("FRS_CenaDomyslna");
            entity.Property(e => e.FrsCenyZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_CenyZRodzica");
            entity.Property(e => e.FrsCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("FRS_CzasModyfikacji");
            entity.Property(e => e.FrsDataPlanJakoPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DataPlanJakoPriorytet");
            entity.Property(e => e.FrsDetDokumentyZdni)
                .HasDefaultValue((short)10)
                .HasColumnName("FRS_DetDokumentyZDni");
            entity.Property(e => e.FrsDetDrukujParagon)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetDrukujParagon");
            entity.Property(e => e.FrsDetGenerujFs)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetGenerujFS");
            entity.Property(e => e.FrsDetGenerujRs)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetGenerujRS");
            entity.Property(e => e.FrsDetKnGnumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_DetKnGNumer");
            entity.Property(e => e.FrsDetKnGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_DetKnGTyp");
            entity.Property(e => e.FrsDetKntDocelowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetKntDocelowy");
            entity.Property(e => e.FrsDetKolektor)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetKolektor");
            entity.Property(e => e.FrsDetObslugaZestawow)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetObslugaZestawow");
            entity.Property(e => e.FrsDetPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetPlatnosci");
            entity.Property(e => e.FrsDetPokazujZerowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetPokazujZerowe");
            entity.Property(e => e.FrsDetPotwierdzenieIlosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetPotwierdzenieIlosci");
            entity.Property(e => e.FrsDetProponujDok)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetProponujDok");
            entity.Property(e => e.FrsDetRodzajAkwizytora)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DetRodzajAkwizytora");
            entity.Property(e => e.FrsDodatkiZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DodatkiZRodzica");
            entity.Property(e => e.FrsDokumentyZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_DokumentyZRodzica");
            entity.Property(e => e.FrsFormPlatNumer)
                .HasDefaultValue((short)736)
                .HasColumnName("FRS_FormPlatNumer");
            entity.Property(e => e.FrsFrSprawa)
                .HasDefaultValue(0)
                .HasColumnName("FRS_FrSPrawa");
            entity.Property(e => e.FrsFrmFirma)
                .HasDefaultValue(0)
                .HasColumnName("FRS_FrmFirma");
            entity.Property(e => e.FrsFrmLp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_FrmLp");
            entity.Property(e => e.FrsFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_FrmNumer");
            entity.Property(e => e.FrsFrmTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_FrmTyp");
            entity.Property(e => e.FrsGidfirma).HasColumnName("FRS_GIDFirma");
            entity.Property(e => e.FrsGidlp).HasColumnName("FRS_GIDLp");
            entity.Property(e => e.FrsGrofirma).HasColumnName("FRS_GROFirma");
            entity.Property(e => e.FrsId).HasColumnName("FRS_ID");
            entity.Property(e => e.FrsKaRnumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_KaRNumer");
            entity.Property(e => e.FrsKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FRS_Konto");
            entity.Property(e => e.FrsLokalizacja)
                .HasDefaultValue(0)
                .HasColumnName("FRS_Lokalizacja");
            entity.Property(e => e.FrsLsautoDruk)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_LSAutoDruk");
            entity.Property(e => e.FrsLsautoSpinacz)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_LSAutoSpinacz");
            entity.Property(e => e.FrsLsautoZamowienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_LSAutoZamowienie");
            entity.Property(e => e.FrsLsautoZaplata)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_LSAutoZaplata");
            entity.Property(e => e.FrsLskorzystaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_LSKorzystaj");
            entity.Property(e => e.FrsLszachowajKontrahenta)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_LSZachowajKontrahenta");
            entity.Property(e => e.FrsMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("FRS_MagFirma");
            entity.Property(e => e.FrsMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_MagLp");
            entity.Property(e => e.FrsMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_MagNumer");
            entity.Property(e => e.FrsMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_MagTyp");
            entity.Property(e => e.FrsMagZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_MagZwrNumer");
            entity.Property(e => e.FrsMagazynyZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MagazynyZRodzica");
            entity.Property(e => e.FrsMesautoPrzypisanieOperatora)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESAutoPrzypisanieOperatora");
            entity.Property(e => e.FrsMesblokujJesliNiezakonczone)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESBlokujJesliNiezakonczone");
            entity.Property(e => e.FrsMesblokujZeroweRealizacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESBlokujZeroweRealizacje");
            entity.Property(e => e.FrsMesgenerujDokumentyPotwierdzone)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESGenerujDokumentyPotwierdzone");
            entity.Property(e => e.FrsMesgenerujDokumentyWtle)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESGenerujDokumentyWTle");
            entity.Property(e => e.FrsMeskonfiguracjaList)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESKonfiguracjaList");
            entity.Property(e => e.FrsMesliczacOd)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESLiczacOd");
            entity.Property(e => e.FrsMesliczacOdCzas)
                .HasDefaultValue(0)
                .HasColumnName("FRS_MESLiczacOdCzas");
            entity.Property(e => e.FrsMesliczacOdCzasJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESLiczacOdCzasJedn");
            entity.Property(e => e.FrsMesopcjeRw)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESOpcjeRW");
            entity.Property(e => e.FrsMespokazTylkoPierwszaOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESPokazTylkoPierwszaOp");
            entity.Property(e => e.FrsMesprzeliczMaterialyPoZmianieOperacji)
                .HasDefaultValue((byte)1)
                .HasColumnName("FRS_MESPrzeliczMaterialyPoZmianieOperacji");
            entity.Property(e => e.FrsMessposobUruchamiania)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESSposobUruchamiania");
            entity.Property(e => e.FrsMessposobUruchamianiaWieleOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESSposobUruchamianiaWieleOp");
            entity.Property(e => e.FrsMesterminZakonczeniaWgPlanu)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESTerminZakonczeniaWgPlanu");
            entity.Property(e => e.FrsMestylkoWlasne)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESTylkoWlasne");
            entity.Property(e => e.FrsMestylkoZeZwolnionych)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESTylkoZeZwolnionych");
            entity.Property(e => e.FrsMesuruchamianieRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESUruchamianieRealizacji");
            entity.Property(e => e.FrsMesuruchamianieRealizacjiWieleOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESUruchamianieRealizacjiWieleOp");
            entity.Property(e => e.FrsMesuruchomZakonczPoWczytaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESUruchomZakonczPoWczytaniu");
            entity.Property(e => e.FrsMeswylogujPo)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESWylogujPo");
            entity.Property(e => e.FrsMeswylogujPoCzas)
                .HasDefaultValue(0)
                .HasColumnName("FRS_MESWylogujPoCzas");
            entity.Property(e => e.FrsMeswylogujPoJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESWylogujPoJedn");
            entity.Property(e => e.FrsMeswylogujPoUruchomieniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESWylogujPoUruchomieniu");
            entity.Property(e => e.FrsMeszakonczenieRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESZakonczenieRealizacji");
            entity.Property(e => e.FrsMeszakonczenieRealizacjiWieleOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESZakonczenieRealizacjiWieleOp");
            entity.Property(e => e.FrsMeszamykajDokumentyPrzyZatwierdzaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESZamykajDokumentyPrzyZatwierdzaniu");
            entity.Property(e => e.FrsMeszrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_MESZRodzica");
            entity.Property(e => e.FrsNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FRS_Nazwa");
            entity.Property(e => e.FrsOddzial)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_Oddzial");
            entity.Property(e => e.FrsOperacjeTylkoZeZwolnionych)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_OperacjeTylkoZeZwolnionych");
            entity.Property(e => e.FrsOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FRS_Opis");
            entity.Property(e => e.FrsOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("FRS_OptimaId");
            entity.Property(e => e.FrsPizrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_PIZRodzica");
            entity.Property(e => e.FrsPlatnosciZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_PlatnosciZRodzica");
            entity.Property(e => e.FrsPokazywacSeriePico)
                .HasDefaultValue(0)
                .HasColumnName("FRS_PokazywacSeriePico");
            entity.Property(e => e.FrsPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("FRS_PrcFirma");
            entity.Property(e => e.FrsPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_PrcLp");
            entity.Property(e => e.FrsPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_PrcNumer");
            entity.Property(e => e.FrsPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_PrcTyp");
            entity.Property(e => e.FrsPrezentujMagOddzial)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_PrezentujMagOddzial");
            entity.Property(e => e.FrsPrezentujMagZablok)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_PrezentujMagZablok");
            entity.Property(e => e.FrsProdAutoNadawanieStanow)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdAutoNadawanieStanow");
            entity.Property(e => e.FrsProdAutoWiazanieRw)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdAutoWiazanieRW");
            entity.Property(e => e.FrsProdAutoryzacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdAutoryzacja");
            entity.Property(e => e.FrsProdBlokadaZmniejszaniaIlosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdBlokadaZmniejszaniaIlosci");
            entity.Property(e => e.FrsProdCzasWyswietlania)
                .HasDefaultValue((short)15)
                .HasColumnName("FRS_ProdCzasWyswietlania");
            entity.Property(e => e.FrsProdGenerowanieZsrdlaPrzestoju)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdGenerowanieZSRDlaPrzestoju");
            entity.Property(e => e.FrsProdGenerujRwnaglowkowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdGenerujRWNaglowkowe");
            entity.Property(e => e.FrsProdListaKonfliktow)
                .HasDefaultValue(0)
                .HasColumnName("FRS_ProdListaKonfliktow");
            entity.Property(e => e.FrsProdPauza)
                .HasDefaultValue((byte)1)
                .HasColumnName("FRS_ProdPauza");
            entity.Property(e => e.FrsProdPokazPierwszeNiezrealizowane)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdPokazPierwszeNiezrealizowane");
            entity.Property(e => e.FrsProdPokazZadaniaOperatora)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdPokazZadaniaOperatora");
            entity.Property(e => e.FrsProdRealizacjaEtapu)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdRealizacjaEtapu");
            entity.Property(e => e.FrsProdRedukcjaNiezwiazanychIlosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdRedukcjaNiezwiazanychIlosci");
            entity.Property(e => e.FrsProdRozpocznijPoWczytaniu)
                .HasDefaultValue((byte)1)
                .HasColumnName("FRS_ProdRozpocznijPoWczytaniu");
            entity.Property(e => e.FrsProdTylkoWykonanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdTylkoWykonanie");
            entity.Property(e => e.FrsProdWykonanieBezEdycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdWykonanieBezEdycji");
            entity.Property(e => e.FrsProdZakonczenieWgPlanu)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdZakonczenieWgPlanu");
            entity.Property(e => e.FrsProdZaokraglanieMat)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdZaokraglanieMat");
            entity.Property(e => e.FrsProdZaokraglanieProdukt)
                .HasDefaultValue((byte)1)
                .HasColumnName("FRS_ProdZaokraglanieProdukt");
            entity.Property(e => e.FrsProdZsrkntFirma)
                .HasDefaultValue(0)
                .HasColumnName("FRS_ProdZSRKntFirma");
            entity.Property(e => e.FrsProdZsrkntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_ProdZSRKntLp");
            entity.Property(e => e.FrsProdZsrkntNumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_ProdZSRKntNumer");
            entity.Property(e => e.FrsProdZsrkntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_ProdZSRKntTyp");
            entity.Property(e => e.FrsProdukcjaZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_ProdukcjaZRodzica");
            entity.Property(e => e.FrsRaportyOlap)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FRS_RaportyOlap");
            entity.Property(e => e.FrsRejestryVatZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_RejestryVatZRodzica");
            entity.Property(e => e.FrsRejestryZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_RejestryZRodzica");
            entity.Property(e => e.FrsRodzajeBonowZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_RodzajeBonowZRodzica");
            entity.Property(e => e.FrsScfirma)
                .HasDefaultValue(0)
                .HasColumnName("FRS_SCFirma");
            entity.Property(e => e.FrsSclp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_SCLp");
            entity.Property(e => e.FrsScnumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_SCNumer");
            entity.Property(e => e.FrsSctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_SCTyp");
            entity.Property(e => e.FrsSerfirma)
                .HasDefaultValue(0)
                .HasColumnName("FRS_SERFirma");
            entity.Property(e => e.FrsSerieZrodzica)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_SerieZRodzica");
            entity.Property(e => e.FrsSerlp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_SERLp");
            entity.Property(e => e.FrsSernumer)
                .HasDefaultValue(0)
                .HasColumnName("FRS_SERNumer");
            entity.Property(e => e.FrsSertyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_SERTyp");
            entity.Property(e => e.FrsSprLp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_SprLp");
            entity.Property(e => e.FrsStrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_StrTyp");
            entity.Property(e => e.FrsSymbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FRS_Symbol");
            entity.Property(e => e.FrsUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FRS_URL");
            entity.Property(e => e.FrsWarstwa)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_Warstwa");
            entity.Property(e => e.FrsWykonujDlaPwwbuforze)
                .HasDefaultValue((byte)0)
                .HasColumnName("FRS_WykonujDlaPWWBuforze");
            entity.Property(e => e.FrsZakLp)
                .HasDefaultValue((short)0)
                .HasColumnName("FRS_ZakLp");
        });

        modelBuilder.Entity<FrmStrukturaTel>(entity =>
        {
            entity.HasKey(e => e.FrtelId).HasName("FRTEL_Primary");

            entity.ToTable("FrmStrukturaTel", "CDN");

            entity.Property(e => e.FrtelId).HasColumnName("FRTEL_ID");
            entity.Property(e => e.FrtelFrsid)
                .HasDefaultValue(0)
                .HasColumnName("FRTEL_FRSID");
            entity.Property(e => e.FrtelTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FRTEL_Telefon");

            entity.HasOne(d => d.FrtelFrs).WithMany(p => p.FrmStrukturaTels)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.FrtelFrsid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FRTelStruktura");
        });

        modelBuilder.Entity<FrsAplikacje>(entity =>
        {
            entity.HasKey(e => e.FrAId).HasName("FrA_Primary");

            entity.ToTable("FrsAplikacje", "CDN", tb =>
                {
                    tb.HasTrigger("FrsAplikacjeAlias1_DeleteHandler");
                    tb.HasTrigger("FrsAplikacje_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.FrAObiNumer, e.FrAObiTyp, e.FrATypAplikacji }, "FrAObiekt");

            entity.HasIndex(e => new { e.FrAFrsId, e.FrAObiNumer, e.FrAObiTyp, e.FrATypAplikacji }, "FrAObiektFrs").IsUnique();

            entity.Property(e => e.FrAId).HasColumnName("FrA_Id");
            entity.Property(e => e.FrAAdmin)
                .HasDefaultValue((byte)0)
                .HasColumnName("FrA_Admin");
            entity.Property(e => e.FrACenaDomyslna)
                .HasDefaultValue((short)0)
                .HasColumnName("FrA_CenaDomyslna");
            entity.Property(e => e.FrAFrsId)
                .HasDefaultValue(0)
                .HasColumnName("FrA_FrsId");
            entity.Property(e => e.FrANieWysylaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("FrA_NieWysylaj");
            entity.Property(e => e.FrAObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("FrA_ObiNumer");
            entity.Property(e => e.FrAObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("FrA_ObiTyp");
            entity.Property(e => e.FrATypAplikacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("FrA_TypAplikacji");
        });

        modelBuilder.Entity<FrsPromocje>(entity =>
        {
            entity.HasKey(e => e.FprId).HasName("FPR_Primary");

            entity.ToTable("FrsPromocje", "CDN", tb => tb.HasTrigger("FrsPromocje_LastMod_delete"));

            entity.HasIndex(e => new { e.FprFrsId, e.FprPrmId }, "FprFrS").IsUnique();

            entity.HasIndex(e => e.FprPrmId, "FprPrm");

            entity.Property(e => e.FprId).HasColumnName("FPR_Id");
            entity.Property(e => e.FprFrsId)
                .HasDefaultValue(0)
                .HasColumnName("FPR_FrsId");
            entity.Property(e => e.FprPrmId)
                .HasDefaultValue(0)
                .HasColumnName("FPR_PrmId");

            entity.HasOne(d => d.FprFrs).WithMany(p => p.FrsPromocjes)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.FprFrsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FprFrS");

            entity.HasOne(d => d.FprPrm).WithMany(p => p.FrsPromocjes)
                .HasForeignKey(d => d.FprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FprPrm");
        });

        modelBuilder.Entity<FrsZamienniki>(entity =>
        {
            entity.HasKey(e => e.FrzId).HasName("FRZ_Primary");

            entity.ToTable("FrsZamienniki", "CDN", tb =>
                {
                    tb.HasTrigger("PowiazaneTowaryDelete_PicoUsuniete");
                    tb.HasTrigger("PowiazaneTowaryInsertFrsZamienniki");
                });

            entity.HasIndex(e => new { e.FrzFrsId, e.FrzTwPid }, "FrzFrs").IsUnique();

            entity.HasIndex(e => e.FrzTwPid, "FrzTwP");

            entity.Property(e => e.FrzId).HasColumnName("FRZ_Id");
            entity.Property(e => e.FrzFrsId)
                .HasDefaultValue(0)
                .HasColumnName("FRZ_FrsId");
            entity.Property(e => e.FrzTwPid)
                .HasDefaultValue(0)
                .HasColumnName("FRZ_TwPId");

            entity.HasOne(d => d.FrzFrs).WithMany(p => p.FrsZamiennikis)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.FrzFrsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FrzFrs");

            entity.HasOne(d => d.FrzTwP).WithMany(p => p.FrsZamiennikis)
                .HasForeignKey(d => d.FrzTwPid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FrzTwP");
        });

        modelBuilder.Entity<FsfLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FSF_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_FSF_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FsfkosztLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FSFKOSZT_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_FSFKOSZT_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(8)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GratisyPromocje>(entity =>
        {
            entity.HasKey(e => e.GprId).HasName("GPR_Primary");

            entity.ToTable("GratisyPromocje", "CDN", tb =>
                {
                    tb.HasTrigger("GratisyPromocje_DeletePrzenumeruj");
                    tb.HasTrigger("GratisyPromocje_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.GprPrmId, "GPRPrm");

            entity.HasIndex(e => new { e.GprPrPid, e.GprPrmId }, "GPRProg");

            entity.HasIndex(e => new { e.GprTwrNumer, e.GprTwrTyp, e.GprPrmId, e.GprPrPid }, "GPRTowar").IsUnique();

            entity.Property(e => e.GprId).HasColumnName("GPR_Id");
            entity.Property(e => e.GprDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("GPR_Domyslny");
            entity.Property(e => e.GprFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GPR_FlagaNB");
            entity.Property(e => e.GprGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("GPR_GUID");
            entity.Property(e => e.GprIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("GPR_Ilosc");
            entity.Property(e => e.GprMnoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("GPR_Mnoz");
            entity.Property(e => e.GprNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GPR_Notatki");
            entity.Property(e => e.GprPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("GPR_Pozycja");
            entity.Property(e => e.GprPrPid)
                .HasDefaultValue(0)
                .HasColumnName("GPR_PrPID");
            entity.Property(e => e.GprPrmId)
                .HasDefaultValue(0)
                .HasColumnName("GPR_PrmId");
            entity.Property(e => e.GprTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("GPR_TwrNumer");
            entity.Property(e => e.GprTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("GPR_TwrTyp");
            entity.Property(e => e.GprTyp)
                .HasDefaultValue(0)
                .HasColumnName("GPR_Typ");
            entity.Property(e => e.GprWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GPR_Waluta");
            entity.Property(e => e.GprWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("GPR_Wartosc");

            entity.HasOne(d => d.GprPrm).WithMany(p => p.GratisyPromocjes)
                .HasForeignKey(d => d.GprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GPRPrm");
        });

        modelBuilder.Entity<GrupyKrajow>(entity =>
        {
            entity.HasKey(e => e.GkrId).HasName("GKr_Primary");

            entity.ToTable("GrupyKrajow", "CDN", tb => tb.HasTrigger("GrupyKrajow_DeleteHandler"));

            entity.HasIndex(e => e.GkrKod, "GKrKod").IsUnique();

            entity.Property(e => e.GkrId).HasColumnName("GKr_ID");
            entity.Property(e => e.GkrKod)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GKr_Kod");
            entity.Property(e => e.GkrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GKr_Nazwa");
            entity.Property(e => e.GkrPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("GKr_Predefiniowany");
        });

        modelBuilder.Entity<GrupyTemp>(entity =>
        {
            entity.HasKey(e => new { e.RpgGidtyp, e.RpgGidnumer, e.RpgGrupa, e.RpgSortowanie, e.RpgGidlp, e.RpgEleNumer }).HasName("RPG_Primary");

            entity.ToTable("GrupyTemp", "CDN");

            entity.HasIndex(e => new { e.RpgEleTyp, e.RpgEleNumer, e.RpgEleLp, e.RpgGidtyp, e.RpgGidnumer, e.RpgGidlp }, "RPGElement").IsUnique();

            entity.Property(e => e.RpgGidtyp).HasColumnName("RPG_GIDTyp");
            entity.Property(e => e.RpgGidnumer).HasColumnName("RPG_GIDNumer");
            entity.Property(e => e.RpgGrupa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RPG_Grupa");
            entity.Property(e => e.RpgSortowanie)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RPG_Sortowanie");
            entity.Property(e => e.RpgGidlp).HasColumnName("RPG_GIDLp");
            entity.Property(e => e.RpgEleNumer).HasColumnName("RPG_EleNumer");
            entity.Property(e => e.RpgEleFirma)
                .HasDefaultValue(0)
                .HasColumnName("RPG_EleFirma");
            entity.Property(e => e.RpgEleLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RPG_EleLp");
            entity.Property(e => e.RpgEleTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RPG_EleTyp");
            entity.Property(e => e.RpgGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("RPG_GIDFirma");
            entity.Property(e => e.RpgGroNumer)
                .HasDefaultValue(0)
                .HasColumnName("RPG_GroNumer");
        });

        modelBuilder.Entity<GtLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GT_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_GT_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(30)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HaspLog>(entity =>
        {
            entity.HasKey(e => e.HlgId).HasName("HLg_Primary");

            entity.ToTable("HaspLog", "CDN");

            entity.Property(e => e.HlgId).HasColumnName("HLg_ID");
            entity.Property(e => e.HlgCzas)
                .HasDefaultValue(0)
                .HasColumnName("HLg_Czas");
            entity.Property(e => e.HlgKod)
                .HasDefaultValue(0)
                .HasColumnName("HLg_Kod");
            entity.Property(e => e.HlgOperator)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HLg_Operator");
            entity.Property(e => e.HlgOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HLg_Opis");
            entity.Property(e => e.HlgParametr)
                .HasDefaultValue(0)
                .HasColumnName("HLg_Parametr");
        });

        modelBuilder.Entity<HeatMapLog>(entity =>
        {
            entity.HasKey(e => e.HmlLogId).HasName("HML_Primary");

            entity.ToTable("HeatMapLog", "CDN");

            entity.Property(e => e.HmlLogId).HasColumnName("HML_LogId");
            entity.Property(e => e.HmlAction)
                .HasDefaultValue(0)
                .HasColumnName("HML_Action");
            entity.Property(e => e.HmlControlPath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HML_ControlPath");
            entity.Property(e => e.HmlMessage)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HML_Message");
            entity.Property(e => e.HmlMessageId)
                .HasDefaultValue(0)
                .HasColumnName("HML_MessageId");
            entity.Property(e => e.HmlOpeGuid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HML_OpeGuid");
            entity.Property(e => e.HmlOpeModules)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HML_OpeModules");
            entity.Property(e => e.HmlSessionGuid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HML_SessionGuid");
            entity.Property(e => e.HmlTime)
                .HasDefaultValue(0)
                .HasColumnName("HML_Time");
            entity.Property(e => e.HmlViewName)
                .HasMaxLength(49)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HML_ViewName");
        });

        modelBuilder.Entity<HistoriaUruchomien>(entity =>
        {
            entity.HasKey(e => e.HtUId).HasName("HtU_Primary");

            entity.ToTable("HistoriaUruchomien", "CDN", tb => tb.HasTrigger("HistoriaUruchomien_InsertUpdateHandler"));

            entity.HasIndex(e => e.HtUNazwa, "HtUNazwa");

            entity.HasIndex(e => e.HtUOperator, "HtUOpe");

            entity.HasIndex(e => e.HtUOpeNumer, "HtUOperatorNumer");

            entity.Property(e => e.HtUId).HasColumnName("HtU_Id");
            entity.Property(e => e.HtUAkcja)
                .HasDefaultValue(0)
                .HasColumnName("HtU_Akcja");
            entity.Property(e => e.HtUCzasPrzetwarzania)
                .HasDefaultValue(0)
                .HasColumnName("HtU_CzasPrzetwarzania");
            entity.Property(e => e.HtUData)
                .HasDefaultValue(0)
                .HasColumnName("HtU_Data");
            entity.Property(e => e.HtUElement)
                .HasDefaultValue((byte)0)
                .HasColumnName("HtU_Element");
            entity.Property(e => e.HtUFiltr)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HtU_Filtr");
            entity.Property(e => e.HtUFormatId)
                .HasDefaultValue(0)
                .HasColumnName("HtU_FormatID");
            entity.Property(e => e.HtUFormatka)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HtU_Formatka");
            entity.Property(e => e.HtUGidFirma)
                .HasDefaultValue(0)
                .HasColumnName("HtU_GidFirma");
            entity.Property(e => e.HtUGidLp)
                .HasDefaultValue((short)0)
                .HasColumnName("HtU_GidLp");
            entity.Property(e => e.HtUGidNumer)
                .HasDefaultValue(0)
                .HasColumnName("HtU_GidNumer");
            entity.Property(e => e.HtUGidTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("HtU_GidTyp");
            entity.Property(e => e.HtUNazwa)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HtU_Nazwa");
            entity.Property(e => e.HtUObiekt)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HtU_Obiekt");
            entity.Property(e => e.HtUOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("HtU_OpeNumer");
            entity.Property(e => e.HtUOperator)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HtU_Operator");
            entity.Property(e => e.HtUWydruk)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HtU_Wydruk");
            entity.Property(e => e.HtUWydrukId)
                .HasDefaultValue(0)
                .HasColumnName("HtU_WydrukID");
            entity.Property(e => e.HtUZrodloId)
                .HasDefaultValue(0)
                .HasColumnName("HtU_ZrodloID");
        });

        modelBuilder.Entity<HistoriaZmian>(entity =>
        {
            entity.HasKey(e => e.HisId).HasName("HIS_Primary");

            entity.ToTable("HistoriaZmian", "CDN");

            entity.HasIndex(e => new { e.HisObiTyp, e.HisObiNumer }, "HISObi");

            entity.Property(e => e.HisId).HasColumnName("HIS_ID");
            entity.Property(e => e.HisCzasZmian)
                .HasDefaultValue(0)
                .HasColumnName("HIS_CzasZmian");
            entity.Property(e => e.HisCzasZmianDb)
                .HasDefaultValue(0)
                .HasColumnName("HIS_CzasZmianDB");
            entity.Property(e => e.HisKolumna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HIS_Kolumna");
            entity.Property(e => e.HisNowaWartosc)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HIS_NowaWartosc");
            entity.Property(e => e.HisObiLp1)
                .HasDefaultValue(0)
                .HasColumnName("HIS_ObiLp1");
            entity.Property(e => e.HisObiLp2)
                .HasDefaultValue(0)
                .HasColumnName("HIS_ObiLp2");
            entity.Property(e => e.HisObiLp3)
                .HasDefaultValue(0)
                .HasColumnName("HIS_ObiLp3");
            entity.Property(e => e.HisObiNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HIS_ObiNazwa");
            entity.Property(e => e.HisObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("HIS_ObiNumer");
            entity.Property(e => e.HisObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("HIS_ObiTyp");
            entity.Property(e => e.HisOpeIdent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HIS_OpeIdent");
            entity.Property(e => e.HisStaraWartosc)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("HIS_StaraWartosc");
            entity.Property(e => e.HisTabelaId)
                .HasDefaultValue((short)0)
                .HasColumnName("HIS_TabelaID");
            entity.Property(e => e.HisTypZmiany)
                .HasDefaultValue((byte)0)
                .HasColumnName("HIS_TypZmiany");
        });

        modelBuilder.Entity<ImpElem>(entity =>
        {
            entity.HasKey(e => new { e.ImEGidnumer, e.ImEGidlp }).HasName("ImE_Primary");

            entity.ToTable("ImpElem", "CDN", tb =>
                {
                    tb.HasTrigger("ImpElemAlias_DeleteHandler");
                    tb.HasTrigger("ImpElem_DeleteHandler");
                    tb.HasTrigger("ImpElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.ImEKntNumer, e.ImETstamp }, "ImEKontrah");

            entity.HasIndex(e => e.ImESentId, "ImESent");

            entity.HasIndex(e => new { e.ImETwrNumer, e.ImETstamp }, "ImETowar");

            entity.HasIndex(e => new { e.ImETwrKod, e.ImEGidnumer, e.ImEGidlp }, "ImETwrKod").IsUnique();

            entity.HasIndex(e => new { e.ImEGidtyp, e.ImETstamp }, "ImETypData");

            entity.HasIndex(e => new { e.ImEZwrTyp, e.ImEZwrNumer, e.ImEZwrLp }, "ImEZwrot");

            entity.Property(e => e.ImEGidnumer).HasColumnName("ImE_GIDNumer");
            entity.Property(e => e.ImEGidlp).HasColumnName("ImE_GIDLp");
            entity.Property(e => e.ImECena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ImE_Cena");
            entity.Property(e => e.ImEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImE_GIDFirma");
            entity.Property(e => e.ImEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_GIDTyp");
            entity.Property(e => e.ImEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ImE_Ilosc");
            entity.Property(e => e.ImEJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImE_JmFormat");
            entity.Property(e => e.ImEJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImE_JmFormatZ");
            entity.Property(e => e.ImEJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImE_JmZ");
            entity.Property(e => e.ImEKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImE_KntFirma");
            entity.Property(e => e.ImEKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_KntLp");
            entity.Property(e => e.ImEKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImE_KntNumer");
            entity.Property(e => e.ImEKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_KntTyp");
            entity.Property(e => e.ImEKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImE_KrajPoch");
            entity.Property(e => e.ImEOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImE_Opis");
            entity.Property(e => e.ImEPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImE_PCN");
            entity.Property(e => e.ImEPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_Pozycja");
            entity.Property(e => e.ImEPrecyzjaCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImE_PrecyzjaCeny");
            entity.Property(e => e.ImEPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ImE_PrzeliczL");
            entity.Property(e => e.ImEPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ImE_PrzeliczM");
            entity.Property(e => e.ImERownanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImE_Rownanie");
            entity.Property(e => e.ImESentElemId)
                .HasDefaultValue(0)
                .HasColumnName("ImE_SentElemId");
            entity.Property(e => e.ImESentId)
                .HasDefaultValue(0)
                .HasColumnName("ImE_SentId");
            entity.Property(e => e.ImETrnFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImE_TrnFirma");
            entity.Property(e => e.ImETrnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_TrnLp");
            entity.Property(e => e.ImETrnNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImE_TrnNumer");
            entity.Property(e => e.ImETrnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_TrnTyp");
            entity.Property(e => e.ImETstamp)
                .HasDefaultValue(0)
                .HasColumnName("ImE_TStamp");
            entity.Property(e => e.ImETwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImE_TwrFirma");
            entity.Property(e => e.ImETwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImE_TwrKod");
            entity.Property(e => e.ImETwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_TwrLp");
            entity.Property(e => e.ImETwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImE_TwrNazwa");
            entity.Property(e => e.ImETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImE_TwrNumer");
            entity.Property(e => e.ImETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_TwrTyp");
            entity.Property(e => e.ImETypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImE_TypJm");
            entity.Property(e => e.ImETypTwr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImE_TypTwr");
            entity.Property(e => e.ImEWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ImE_Wartosc");
            entity.Property(e => e.ImEZaEfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImE_ZaEFirma");
            entity.Property(e => e.ImEZaElp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_ZaELp");
            entity.Property(e => e.ImEZaEnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImE_ZaENumer");
            entity.Property(e => e.ImEZaEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_ZaETyp");
            entity.Property(e => e.ImEZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_ZwrLp");
            entity.Property(e => e.ImEZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImE_ZwrNumer");
            entity.Property(e => e.ImEZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImE_ZwrTyp");

            entity.HasOne(d => d.ImEGidnumerNavigation).WithMany(p => p.ImpElems)
                .HasForeignKey(d => d.ImEGidnumer)
                .HasConstraintName("FK_ImEPrimary");
        });

        modelBuilder.Entity<ImpNag>(entity =>
        {
            entity.HasKey(e => e.ImNGidnumer).HasName("ImN_Primary");

            entity.ToTable("ImpNag", "CDN", tb =>
                {
                    tb.HasTrigger("ImpNag_DeleteAtrybutyHist");
                    tb.HasTrigger("ImpNag_DeleteHandler");
                    tb.HasTrigger("ImpNag_InsertUpdateHandler");
                    tb.HasTrigger("ImpNag_SprawdzSesje");
                });

            entity.HasIndex(e => e.ImNAkwNumer, "ImNAkwizytor");

            entity.HasIndex(e => new { e.ImNKntNumer, e.ImNDataZakupu, e.ImNGidtyp, e.ImNGidnumer }, "ImNKontrah").IsUnique();

            entity.HasIndex(e => e.ImNKnAnumer, "ImNKontrahAdr");

            entity.HasIndex(e => e.ImNAdwNumer, "ImNKontrahAdw");

            entity.HasIndex(e => e.ImNKnPnumer, "ImNPlatnik");

            entity.HasIndex(e => new { e.ImNImNtyp, e.ImNRokMiesiac, e.ImNImNrok, e.ImNImNmiesiac, e.ImNImNseria, e.ImNImNnumer, e.ImNImNlp }, "ImNRokMiesiac");

            entity.HasIndex(e => new { e.ImNSaNtyp, e.ImNSaNnumer, e.ImNGidtyp, e.ImNGidnumer }, "ImNSad").IsUnique();

            entity.HasIndex(e => new { e.ImNImNtyp, e.ImNImNrok, e.ImNImNmiesiac, e.ImNImNseria, e.ImNImNnumer, e.ImNImNlp }, "ImNTransakcja").IsUnique();

            entity.HasIndex(e => new { e.ImNZaNtyp, e.ImNZaNnumer }, "ImNZamowienie");

            entity.Property(e => e.ImNGidnumer).HasColumnName("ImN_GIDNumer");
            entity.Property(e => e.ImNAdPnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_AdPNumer");
            entity.Property(e => e.ImNAdwFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_AdwFirma");
            entity.Property(e => e.ImNAdwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_AdwLp");
            entity.Property(e => e.ImNAdwNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_AdwNumer");
            entity.Property(e => e.ImNAdwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_AdwTyp");
            entity.Property(e => e.ImNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("ImN_Aktywny");
            entity.Property(e => e.ImNAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_AkwFirma");
            entity.Property(e => e.ImNAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_AkwLp");
            entity.Property(e => e.ImNAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_AkwNumer");
            entity.Property(e => e.ImNAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_AkwTyp");
            entity.Property(e => e.ImNCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_CechaOpis");
            entity.Property(e => e.ImNDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("ImN_DataKsiegowania");
            entity.Property(e => e.ImNDataRoz)
                .HasDefaultValue(0)
                .HasColumnName("ImN_DataRoz");
            entity.Property(e => e.ImNDataWplywu)
                .HasDefaultValue(0)
                .HasColumnName("ImN_DataWplywu");
            entity.Property(e => e.ImNDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("ImN_DataWystawienia");
            entity.Property(e => e.ImNDataZakupu)
                .HasDefaultValue(0)
                .HasColumnName("ImN_DataZakupu");
            entity.Property(e => e.ImNDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_DokumentObcy");
            entity.Property(e => e.ImNDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_Dziennik");
            entity.Property(e => e.ImNExpoNorm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_ExpoNorm");
            entity.Property(e => e.ImNFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_FormaNazwa");
            entity.Property(e => e.ImNFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_FormaNr");
            entity.Property(e => e.ImNFormatkaCyr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_FormatkaCyr");
            entity.Property(e => e.ImNFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_FrmNumer");
            entity.Property(e => e.ImNFrsId)
                .HasDefaultValue(0)
                .HasColumnName("ImN_FrsID");
            entity.Property(e => e.ImNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_GIDFirma");
            entity.Property(e => e.ImNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_GIDLp");
            entity.Property(e => e.ImNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_GIDTyp");
            entity.Property(e => e.ImNImNlp)
                .HasDefaultValue((short)127)
                .HasColumnName("ImN_ImNLp");
            entity.Property(e => e.ImNImNmiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_ImNMiesiac");
            entity.Property(e => e.ImNImNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_ImNNumer");
            entity.Property(e => e.ImNImNrok)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_ImNRok");
            entity.Property(e => e.ImNImNseria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_ImNSeria");
            entity.Property(e => e.ImNImNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_ImNTyp");
            entity.Property(e => e.ImNIncotermsMiejsce)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_IncotermsMiejsce");
            entity.Property(e => e.ImNIncotermsSymbol)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_IncotermsSymbol");
            entity.Property(e => e.ImNJpkfa)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_JPKFA");
            entity.Property(e => e.ImNKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnAFirma");
            entity.Property(e => e.ImNKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnALp");
            entity.Property(e => e.ImNKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnANumer");
            entity.Property(e => e.ImNKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnATyp");
            entity.Property(e => e.ImNKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnDFirma");
            entity.Property(e => e.ImNKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnDLp");
            entity.Property(e => e.ImNKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnDNumer");
            entity.Property(e => e.ImNKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnDTyp");
            entity.Property(e => e.ImNKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnPNumer");
            entity.Property(e => e.ImNKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnPTyp");
            entity.Property(e => e.ImNKnSfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnSFirma");
            entity.Property(e => e.ImNKnSfirmaD)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnSFirmaD");
            entity.Property(e => e.ImNKnSfirmaP)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnSFirmaP");
            entity.Property(e => e.ImNKnSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnSLp");
            entity.Property(e => e.ImNKnSlpD)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnSLpD");
            entity.Property(e => e.ImNKnSlpP)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnSLpP");
            entity.Property(e => e.ImNKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnSNumer");
            entity.Property(e => e.ImNKnSnumerD)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnSNumerD");
            entity.Property(e => e.ImNKnSnumerP)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KnSNumerP");
            entity.Property(e => e.ImNKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnSTyp");
            entity.Property(e => e.ImNKnStypD)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnSTypD");
            entity.Property(e => e.ImNKnStypP)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KnSTypP");
            entity.Property(e => e.ImNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KntFirma");
            entity.Property(e => e.ImNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KntLp");
            entity.Property(e => e.ImNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_KntNumer");
            entity.Property(e => e.ImNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_KntTyp");
            entity.Property(e => e.ImNKodRodzajuTransakcji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_KodRodzajuTransakcji");
            entity.Property(e => e.ImNKodRodzajuTransportu)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_KodRodzajuTransportu");
            entity.Property(e => e.ImNKrajWysylki)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_KrajWysylki");
            entity.Property(e => e.ImNKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("ImN_KursL");
            entity.Property(e => e.ImNKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ImN_KursM");
            entity.Property(e => e.ImNNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_NieKsiegowac");
            entity.Property(e => e.ImNNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_NrKursu");
            entity.Property(e => e.ImNOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeFirmaM");
            entity.Property(e => e.ImNOpeFirmaR)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeFirmaR");
            entity.Property(e => e.ImNOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeFirmaW");
            entity.Property(e => e.ImNOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeFirmaZ");
            entity.Property(e => e.ImNOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeLpM");
            entity.Property(e => e.ImNOpeLpR)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeLpR");
            entity.Property(e => e.ImNOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeLpW");
            entity.Property(e => e.ImNOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeLpZ");
            entity.Property(e => e.ImNOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeNumerM");
            entity.Property(e => e.ImNOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeNumerR");
            entity.Property(e => e.ImNOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeNumerW");
            entity.Property(e => e.ImNOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeNumerZ");
            entity.Property(e => e.ImNOpeNumerZfr)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeNumerZFR");
            entity.Property(e => e.ImNOpeNumerZm)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpeNumerZM");
            entity.Property(e => e.ImNOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeTypM");
            entity.Property(e => e.ImNOpeTypR)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeTypR");
            entity.Property(e => e.ImNOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeTypW");
            entity.Property(e => e.ImNOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeTypZ");
            entity.Property(e => e.ImNOpeTypZfr)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeTypZFR");
            entity.Property(e => e.ImNOpeTypZm)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpeTypZM");
            entity.Property(e => e.ImNOpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpiFirma");
            entity.Property(e => e.ImNOpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpiLp");
            entity.Property(e => e.ImNOpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_OpiNumer");
            entity.Property(e => e.ImNOpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_OpiTyp");
            entity.Property(e => e.ImNOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_Opis");
            entity.Property(e => e.ImNProceduraUproszcz)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_ProceduraUproszcz");
            entity.Property(e => e.ImNPzifirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_PZIFirma");
            entity.Property(e => e.ImNPzilp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_PZILp");
            entity.Property(e => e.ImNPzinumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_PZINumer");
            entity.Property(e => e.ImNPzityp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_PZITyp");
            entity.Property(e => e.ImNRabatP)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ImN_RabatP");
            entity.Property(e => e.ImNRabatW)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ImN_RabatW");
            entity.Property(e => e.ImNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("ImN_RokMiesiac");
            entity.Property(e => e.ImNSaNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_SaNFirma");
            entity.Property(e => e.ImNSaNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_SaNLp");
            entity.Property(e => e.ImNSaNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_SaNNumer");
            entity.Property(e => e.ImNSaNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_SaNTyp");
            entity.Property(e => e.ImNSchFirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_SchFirma");
            entity.Property(e => e.ImNSchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_SchLp");
            entity.Property(e => e.ImNSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_SchNumer");
            entity.Property(e => e.ImNSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_SchTyp");
            entity.Property(e => e.ImNSposobDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_SposobDostawy");
            entity.Property(e => e.ImNStan)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_Stan");
            entity.Property(e => e.ImNTermin)
                .HasDefaultValue(0)
                .HasColumnName("ImN_Termin");
            entity.Property(e => e.ImNTstampM)
                .HasDefaultValue(0)
                .HasColumnName("ImN_TStampM");
            entity.Property(e => e.ImNTstampU)
                .HasDefaultValue(0)
                .HasColumnName("ImN_TStampU");
            entity.Property(e => e.ImNTstampZfr)
                .HasDefaultValue(0)
                .HasColumnName("ImN_TStampZFR");
            entity.Property(e => e.ImNTstampZm)
                .HasDefaultValue(0)
                .HasColumnName("ImN_TStampZM");
            entity.Property(e => e.ImNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_Url");
            entity.Property(e => e.ImNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_Waluta");
            entity.Property(e => e.ImNWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ImN_Wartosc");
            entity.Property(e => e.ImNWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ImN_WsDziennik");
            entity.Property(e => e.ImNWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_WsSCHNumer");
            entity.Property(e => e.ImNWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_WsSCHTyp");
            entity.Property(e => e.ImNWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_WsStosujDziennik");
            entity.Property(e => e.ImNWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_WsStosujSchemat");
            entity.Property(e => e.ImNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_Wsk");
            entity.Property(e => e.ImNZaNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ImN_ZaNFirma");
            entity.Property(e => e.ImNZaNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_ZaNLp");
            entity.Property(e => e.ImNZaNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_ZaNNumer");
            entity.Property(e => e.ImNZaNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_ZaNTyp");
            entity.Property(e => e.ImNZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_Zaksiegowano");
            entity.Property(e => e.ImNZatwFormalnoRach)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_ZatwFormalnoRach");
            entity.Property(e => e.ImNZatwMerytorycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ImN_ZatwMerytorycznie");
            entity.Property(e => e.ImNZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ImN_ZwrNumer");
            entity.Property(e => e.ImNZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ImN_ZwrTyp");
        });

        modelBuilder.Entity<ImportWyciagowBankowych>(entity =>
        {
            entity.HasKey(e => new { e.IwbThreadId, e.IwbLp }).HasName("IWB_Primary");

            entity.ToTable("ImportWyciagowBankowych", "CDN");

            entity.Property(e => e.IwbThreadId).HasColumnName("IWB_ThreadId");
            entity.Property(e => e.IwbLp).HasColumnName("IWB_LP");
            entity.Property(e => e.IwbAdres)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_Adres");
            entity.Property(e => e.IwbDodatkowaKol1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol1");
            entity.Property(e => e.IwbDodatkowaKol2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol2");
            entity.Property(e => e.IwbDodatkowaKol3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol3");
            entity.Property(e => e.IwbDodatkowaKol4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol4");
            entity.Property(e => e.IwbDodatkowaKol5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol5");
            entity.Property(e => e.IwbDodatkowaKol6)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol6");
            entity.Property(e => e.IwbDodatkowaKol7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol7");
            entity.Property(e => e.IwbDodatkowaKol8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol8");
            entity.Property(e => e.IwbDodatkowaKol9)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_DodatkowaKol9");
            entity.Property(e => e.IwbKodOperacji)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_KodOperacji");
            entity.Property(e => e.IwbLokata)
                .HasDefaultValue((short)0)
                .HasColumnName("IWB_Lokata");
            entity.Property(e => e.IwbNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_Nazwa");
            entity.Property(e => e.IwbOperacja)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_Operacja");
            entity.Property(e => e.IwbPrzychod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IWB_Przychod");
            entity.Property(e => e.IwbRejestr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_Rejestr");
            entity.Property(e => e.IwbRozchod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IWB_Rozchod");
            entity.Property(e => e.IwbTresc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IWB_Tresc");
        });

        modelBuilder.Entity<ImtArkusze>(entity =>
        {
            entity.HasKey(e => e.ItaId).HasName("ITA_Primary");

            entity.ToTable("ImtArkusze", "CDN");

            entity.HasIndex(e => new { e.ItaItnid, e.ItaLp }, "ITANag").IsUnique();

            entity.HasIndex(e => new { e.ItaItnid, e.ItaNazwa }, "ITANazwa").IsUnique();

            entity.Property(e => e.ItaId).HasColumnName("ITA_ID");
            entity.Property(e => e.ItaDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("ITA_DataUtworzenia");
            entity.Property(e => e.ItaItnid)
                .HasDefaultValue(0)
                .HasColumnName("ITA_ITNId");
            entity.Property(e => e.ItaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ITA_Lp");
            entity.Property(e => e.ItaNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITA_Nazwa");
            entity.Property(e => e.ItaOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("ITA_OpeWNumer");
            entity.Property(e => e.ItaOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITA_Opis");
            entity.Property(e => e.ItaRodzajOdczytow)
                .HasDefaultValue((byte)0)
                .HasColumnName("ITA_RodzajOdczytow");
            entity.Property(e => e.ItaTorLp)
                .HasDefaultValue((byte)1)
                .HasColumnName("ITA_TorLp");

            entity.HasOne(d => d.ItaItn).WithMany(p => p.ImtArkuszes)
                .HasForeignKey(d => d.ItaItnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ITANag");
        });

        modelBuilder.Entity<ImtArkuszeElem>(entity =>
        {
            entity.HasKey(e => new { e.IaeItaid, e.IaeLp }).HasName("IAE_Primary");

            entity.ToTable("ImtArkuszeElem", "CDN", tb =>
                {
                    tb.HasTrigger("ImtArkuszeElem_DeleteHandler");
                    tb.HasTrigger("ImtArkuszeElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.IaePrcNumerSpis, "IAEPrcSpis");

            entity.HasIndex(e => e.IaeSrtNumer, "IAESrodek");

            entity.Property(e => e.IaeItaid).HasColumnName("IAE_ITAId");
            entity.Property(e => e.IaeLp).HasColumnName("IAE_Lp");
            entity.Property(e => e.IaeIloscEwidencja)
                .HasDefaultValue((byte)0)
                .HasColumnName("IAE_IloscEwidencja");
            entity.Property(e => e.IaeIloscSpis)
                .HasDefaultValue((byte)0)
                .HasColumnName("IAE_IloscSpis");
            entity.Property(e => e.IaeMiejsceEwidencja)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IAE_MiejsceEwidencja");
            entity.Property(e => e.IaeMiejsceSpis)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IAE_MiejsceSpis");
            entity.Property(e => e.IaePrcNumerEwidencja)
                .HasDefaultValue(0)
                .HasColumnName("IAE_PrcNumerEwidencja");
            entity.Property(e => e.IaePrcNumerSpis)
                .HasDefaultValue(0)
                .HasColumnName("IAE_PrcNumerSpis");
            entity.Property(e => e.IaeSrtNumer)
                .HasDefaultValue(0)
                .HasColumnName("IAE_SrtNumer");
            entity.Property(e => e.IaeUwagi)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IAE_Uwagi");
            entity.Property(e => e.IaeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IAE_Waluta");
            entity.Property(e => e.IaeWartoscBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IAE_WartoscBrutto");
            entity.Property(e => e.IaeWartoscBruttoSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IAE_WartoscBruttoSys");
            entity.Property(e => e.IaeWartoscNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IAE_WartoscNetto");
            entity.Property(e => e.IaeWartoscNettoSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IAE_WartoscNettoSys");
            entity.Property(e => e.IaeWartoscPoczatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IAE_WartoscPoczatkowa");
            entity.Property(e => e.IaeWartoscPoczatkowaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IAE_WartoscPoczatkowaSys");

            entity.HasOne(d => d.IaeIta).WithMany(p => p.ImtArkuszeElems)
                .HasForeignKey(d => d.IaeItaid)
                .HasConstraintName("FK_IAEPrimary");

            entity.HasOne(d => d.IaeSrtNumerNavigation).WithMany(p => p.ImtArkuszeElems)
                .HasForeignKey(d => d.IaeSrtNumer)
                .HasConstraintName("FK_IAESrodek");
        });

        modelBuilder.Entity<ImtNag>(entity =>
        {
            entity.HasKey(e => e.ItnId).HasName("ITN_Primary");

            entity.ToTable("ImtNag", "CDN", tb => tb.HasTrigger("ImtNag_DeleteHandler"));

            entity.HasIndex(e => new { e.ItnRok, e.ItnSeria, e.ItnNumer }, "ITNNumer").IsUnique();

            entity.Property(e => e.ItnId).HasColumnName("ITN_ID");
            entity.Property(e => e.ItnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("ITN_Aktywny");
            entity.Property(e => e.ItnCzasOtwarcia)
                .HasDefaultValue(0)
                .HasColumnName("ITN_CzasOtwarcia");
            entity.Property(e => e.ItnCzasZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("ITN_CzasZamkniecia");
            entity.Property(e => e.ItnDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITN_Dokument");
            entity.Property(e => e.ItnGenerowanieDokData)
                .HasDefaultValue((byte)0)
                .HasColumnName("ITN_GenerowanieDokData");
            entity.Property(e => e.ItnGenerujArkuszeWg)
                .HasDefaultValue((byte)0)
                .HasColumnName("ITN_GenerujArkuszeWg");
            entity.Property(e => e.ItnInwBlokujeModyfikacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("ITN_InwBlokujeModyfikacje");
            entity.Property(e => e.ItnNumer)
                .HasDefaultValue(0)
                .HasColumnName("ITN_Numer");
            entity.Property(e => e.ItnOpeOnumer)
                .HasDefaultValue(0)
                .HasColumnName("ITN_OpeONumer");
            entity.Property(e => e.ItnOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("ITN_OpeZNumer");
            entity.Property(e => e.ItnOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITN_Opis");
            entity.Property(e => e.ItnRodzajOdczytow)
                .HasDefaultValue((byte)0)
                .HasColumnName("ITN_RodzajOdczytow");
            entity.Property(e => e.ItnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("ITN_Rok");
            entity.Property(e => e.ItnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITN_Seria");
        });

        modelBuilder.Entity<ImtOdczyty>(entity =>
        {
            entity.HasKey(e => e.ItoId).HasName("ITO_Primary");

            entity.ToTable("ImtOdczyty", "CDN");

            entity.HasIndex(e => new { e.ItoItaid, e.ItoLp }, "ITOArkusz").IsUnique();

            entity.HasIndex(e => new { e.ItoItaid, e.ItoNazwa }, "ITONazwa").IsUnique();

            entity.Property(e => e.ItoId).HasColumnName("ITO_ID");
            entity.Property(e => e.ItoCzasOdczytu)
                .HasDefaultValue(0)
                .HasColumnName("ITO_CzasOdczytu");
            entity.Property(e => e.ItoItaid)
                .HasDefaultValue(0)
                .HasColumnName("ITO_ITAId");
            entity.Property(e => e.ItoLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ITO_Lp");
            entity.Property(e => e.ItoNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITO_Nazwa");
            entity.Property(e => e.ItoOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("ITO_OpeWNumer");
            entity.Property(e => e.ItoOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ITO_Opis");
            entity.Property(e => e.ItoZamkniety)
                .HasDefaultValue((byte)0)
                .HasColumnName("ITO_Zamkniety");

            entity.HasOne(d => d.ItoIta).WithMany(p => p.ImtOdczyties)
                .HasForeignKey(d => d.ItoItaid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ITOArkusz");
        });

        modelBuilder.Entity<ImtOdczytyElem>(entity =>
        {
            entity.HasKey(e => new { e.IoeItoid, e.IoeLp }).HasName("IOE_Primary");

            entity.ToTable("ImtOdczytyElem", "CDN", tb => tb.HasTrigger("ImtOdczytyElem_InsertUpdateHandler"));

            entity.HasIndex(e => e.IoePrcNumer, "IOEPracownik");

            entity.HasIndex(e => e.IoeSrtNumer, "IOESrodek");

            entity.Property(e => e.IoeItoid).HasColumnName("IOE_ITOId");
            entity.Property(e => e.IoeLp).HasColumnName("IOE_Lp");
            entity.Property(e => e.IoeIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("IOE_Ilosc");
            entity.Property(e => e.IoeMiejsce)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IOE_Miejsce");
            entity.Property(e => e.IoePrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("IOE_PrcNumer");
            entity.Property(e => e.IoeSrtNumer)
                .HasDefaultValue(0)
                .HasColumnName("IOE_SrtNumer");
            entity.Property(e => e.IoeUwagi)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IOE_Uwagi");

            entity.HasOne(d => d.IoeIto).WithMany(p => p.ImtOdczytyElems)
                .HasForeignKey(d => d.IoeItoid)
                .HasConstraintName("FK_IOEPrimary");
        });

        modelBuilder.Entity<InboxView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InboxView", "CDN");

            entity.Property(e => e.Gidlp).HasColumnName("GIDLp");
            entity.Property(e => e.Gidnumer).HasColumnName("GIDNumer");
            entity.Property(e => e.Gidtyp).HasColumnName("GIDTyp");
            entity.Property(e => e.Kwota).HasColumnType("decimal(37, 18)");
            entity.Property(e => e.Numer)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InwArk>(entity =>
        {
            entity.HasKey(e => e.InAId).HasName("InA_Primary");

            entity.ToTable("InwArk", "CDN", tb =>
                {
                    tb.HasTrigger("InwArk_CzasModyfikacji");
                    tb.HasTrigger("InwArk_DeleteHandler");
                    tb.HasTrigger("InwArk_InsertUpdateHandler");
                    tb.HasTrigger("InwArk_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.InAInNid, e.InAId }, "InANaglowek").IsUnique();

            entity.HasIndex(e => new { e.InAInNid, e.InANazwa }, "InANazwa");

            entity.HasIndex(e => new { e.InAInNid, e.InATstamp }, "InATStamp");

            entity.Property(e => e.InAId).HasColumnName("InA_Id");
            entity.Property(e => e.InAAktywny)
                .HasDefaultValue(0)
                .HasColumnName("InA_Aktywny");
            entity.Property(e => e.InACzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("InA_CzasModyfikacji");
            entity.Property(e => e.InAExtId)
                .HasDefaultValue(0)
                .HasColumnName("InA_ExtID");
            entity.Property(e => e.InAGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("InA_GUID");
            entity.Property(e => e.InAInNid)
                .HasDefaultValue(0)
                .HasColumnName("InA_InNId");
            entity.Property(e => e.InAMgAidDo)
                .HasDefaultValue(0)
                .HasColumnName("InA_MgAIdDo");
            entity.Property(e => e.InAMgAidOd)
                .HasDefaultValue(0)
                .HasColumnName("InA_MgAIdOd");
            entity.Property(e => e.InAMgOid)
                .HasDefaultValue(0)
                .HasColumnName("InA_MgOId");
            entity.Property(e => e.InAMultiEdycjaOdcz)
                .HasDefaultValue((byte)0)
                .HasColumnName("InA_MultiEdycjaOdcz");
            entity.Property(e => e.InANazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InA_Nazwa");
            entity.Property(e => e.InAOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("InA_OpeFirma");
            entity.Property(e => e.InAOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("InA_OpeLp");
            entity.Property(e => e.InAOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("InA_OpeNumer");
            entity.Property(e => e.InAOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("InA_OpeTyp");
            entity.Property(e => e.InAOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InA_Opis");
            entity.Property(e => e.InAPowielanieTwr)
                .HasDefaultValue((byte)0)
                .HasColumnName("InA_PowielanieTwr");
            entity.Property(e => e.InAPrzyrostowa)
                .HasDefaultValue((short)0)
                .HasColumnName("InA_Przyrostowa");
            entity.Property(e => e.InAPsAid)
                .HasDefaultValue(0)
                .HasColumnName("InA_PsAID");
            entity.Property(e => e.InARealizujWwms)
                .HasDefaultValue((byte)0)
                .HasColumnName("InA_RealizujWWMS");
            entity.Property(e => e.InAStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("InA_Stan");
            entity.Property(e => e.InATstamp)
                .HasDefaultValue(0)
                .HasColumnName("InA_TStamp");
            entity.Property(e => e.InATylkoJlogWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("InA_TylkoJLogWMS");
            entity.Property(e => e.InATylkoNiezerowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("InA_TylkoNiezerowe");
            entity.Property(e => e.InAWtrakcieOdczytu)
                .HasDefaultValue((byte)0)
                .HasColumnName("InA_WTrakcieOdczytu");

            entity.HasOne(d => d.InAInN).WithMany(p => p.InwArks)
                .HasForeignKey(d => d.InAInNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InANaglowek");
        });

        modelBuilder.Entity<InwArkTwr>(entity =>
        {
            entity.HasKey(e => e.IatId).HasName("IAT_Primary");

            entity.ToTable("InwArkTwr", "CDN", tb => tb.HasTrigger("InwArkTwr_DeletePrzenumeruj"));

            entity.HasIndex(e => new { e.IatInTid, e.IatInAid }, "IATInwTwr").IsUnique();

            entity.HasIndex(e => new { e.IatInAid, e.IatInAlp }, "IATLp").IsUnique();

            entity.HasIndex(e => new { e.IatInAid, e.IatId }, "IATNaglowek").IsUnique();

            entity.Property(e => e.IatId).HasColumnName("IAT_Id");
            entity.Property(e => e.IatIloscInw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("IAT_IloscInw");
            entity.Property(e => e.IatInAid)
                .HasDefaultValue(0)
                .HasColumnName("IAT_InAId");
            entity.Property(e => e.IatInAlp)
                .HasDefaultValue(0)
                .HasColumnName("IAT_InALp");
            entity.Property(e => e.IatInTid)
                .HasDefaultValue(0)
                .HasColumnName("IAT_InTId");

            entity.HasOne(d => d.IatInA).WithMany(p => p.InwArkTwrs)
                .HasForeignKey(d => d.IatInAid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_IATNaglowek");
        });

        modelBuilder.Entity<InwMag>(entity =>
        {
            entity.HasKey(e => e.InMId).HasName("InM_Primary");

            entity.ToTable("InwMag", "CDN", tb =>
                {
                    tb.HasTrigger("InwMag_DeletePrzenumeruj");
                    tb.HasTrigger("InwMag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.InMInNid, "InMInN");

            entity.HasIndex(e => new { e.InMMagNumer, e.InMId }, "InMMagazyn");

            entity.HasIndex(e => e.InMPwnumer, "InMPW");

            entity.HasIndex(e => new { e.InMInNid, e.InMPozycja }, "InMPozycja");

            entity.HasIndex(e => e.InMRwnumer, "InMRW");

            entity.Property(e => e.InMId).HasColumnName("InM_Id");
            entity.Property(e => e.InMInNid)
                .HasDefaultValue(0)
                .HasColumnName("InM_InNId");
            entity.Property(e => e.InMMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("InM_MagFirma");
            entity.Property(e => e.InMMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("InM_MagLp");
            entity.Property(e => e.InMMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("InM_MagNumer");
            entity.Property(e => e.InMMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("InM_MagTyp");
            entity.Property(e => e.InMMpnumer)
                .HasDefaultValue(0)
                .HasColumnName("InM_MPNumer");
            entity.Property(e => e.InMPmnumer)
                .HasDefaultValue(0)
                .HasColumnName("InM_PMNumer");
            entity.Property(e => e.InMPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("InM_Pozycja");
            entity.Property(e => e.InMPwfirma)
                .HasDefaultValue(0)
                .HasColumnName("InM_PWFirma");
            entity.Property(e => e.InMPwlp)
                .HasDefaultValue((short)0)
                .HasColumnName("InM_PWLp");
            entity.Property(e => e.InMPwnumer)
                .HasDefaultValue(0)
                .HasColumnName("InM_PWNumer");
            entity.Property(e => e.InMPwtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("InM_PWTyp");
            entity.Property(e => e.InMRwfirma)
                .HasDefaultValue(0)
                .HasColumnName("InM_RWFirma");
            entity.Property(e => e.InMRwlp)
                .HasDefaultValue((short)0)
                .HasColumnName("InM_RWLp");
            entity.Property(e => e.InMRwnumer)
                .HasDefaultValue(0)
                .HasColumnName("InM_RWNumer");
            entity.Property(e => e.InMRwtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("InM_RWTyp");
            entity.Property(e => e.InMWmnumer)
                .HasDefaultValue(0)
                .HasColumnName("InM_WMNumer");

            entity.HasOne(d => d.InMInN).WithMany(p => p.InwMags)
                .HasForeignKey(d => d.InMInNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InMInN");

            entity.HasOne(d => d.InMMagNumerNavigation).WithMany(p => p.InwMags)
                .HasForeignKey(d => d.InMMagNumer)
                .HasConstraintName("FK_InMMagazyn");
        });

        modelBuilder.Entity<InwMagTwr>(entity =>
        {
            entity.HasKey(e => new { e.ImtInTid, e.ImtMagNumer }).HasName("IMT_Primary");

            entity.ToTable("InwMagTwr", "CDN", tb => tb.HasTrigger("InwMagTwr_InsertUpdateHandler"));

            entity.HasIndex(e => e.ImtInTid, "IMTInT");

            entity.HasIndex(e => e.ImtMagNumer, "IMTMagazyn");

            entity.HasIndex(e => e.ImtTpaIdMag, "IMTTPaIdNad");

            entity.Property(e => e.ImtInTid).HasColumnName("IMT_InTId");
            entity.Property(e => e.ImtMagNumer).HasColumnName("IMT_MagNumer");
            entity.Property(e => e.ImtCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("IMT_Cena");
            entity.Property(e => e.ImtIloscInw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("IMT_IloscInw");
            entity.Property(e => e.ImtIloscMag)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("IMT_IloscMag");
            entity.Property(e => e.ImtTpaIdMag)
                .HasDefaultValue(0)
                .HasColumnName("IMT_TPaIdMag");

            entity.HasOne(d => d.ImtInT).WithMany(p => p.InwMagTwrs)
                .HasForeignKey(d => d.ImtInTid)
                .HasConstraintName("FK_IMTInT");

            entity.HasOne(d => d.ImtMagNumerNavigation).WithMany(p => p.InwMagTwrs)
                .HasForeignKey(d => d.ImtMagNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMTMagazyn");
        });

        modelBuilder.Entity<InwNag>(entity =>
        {
            entity.HasKey(e => e.InNId).HasName("InN_Primary");

            entity.ToTable("InwNag", "CDN", tb =>
                {
                    tb.HasTrigger("InwNag_CzasModyfikacji");
                    tb.HasTrigger("InwNag_DeleteHandler");
                });

            entity.Property(e => e.InNId).HasColumnName("InN_Id");
            entity.Property(e => e.InNCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("InN_CzasModyfikacji");
            entity.Property(e => e.InNDzielNaPartie)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_DzielNaPartie");
            entity.Property(e => e.InNExtId)
                .HasDefaultValue(0)
                .HasColumnName("InN_ExtID");
            entity.Property(e => e.InNGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("InN_GUID");
            entity.Property(e => e.InNNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InN_Nazwa");
            entity.Property(e => e.InNOddzielnieMag)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_OddzielnieMag");
            entity.Property(e => e.InNOpeFirmaO)
                .HasDefaultValue(0)
                .HasColumnName("InN_OpeFirmaO");
            entity.Property(e => e.InNOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("InN_OpeFirmaZ");
            entity.Property(e => e.InNOpeLpO)
                .HasDefaultValue((short)0)
                .HasColumnName("InN_OpeLpO");
            entity.Property(e => e.InNOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("InN_OpeLpZ");
            entity.Property(e => e.InNOpeNumerO)
                .HasDefaultValue(0)
                .HasColumnName("InN_OpeNumerO");
            entity.Property(e => e.InNOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("InN_OpeNumerZ");
            entity.Property(e => e.InNOpeTypO)
                .HasDefaultValue((short)0)
                .HasColumnName("InN_OpeTypO");
            entity.Property(e => e.InNOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("InN_OpeTypZ");
            entity.Property(e => e.InNOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InN_Opis");
            entity.Property(e => e.InNPolozenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_Polozenie");
            entity.Property(e => e.InNPostypId)
                .HasDefaultValue(0)
                .HasColumnName("InN_POSTypId");
            entity.Property(e => e.InNPrzyrostowa)
                .HasDefaultValue((short)0)
                .HasColumnName("InN_Przyrostowa");
            entity.Property(e => e.InNRealizujWpos)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_RealizujWPOS");
            entity.Property(e => e.InNRodzajBlokady)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_RodzajBlokady");
            entity.Property(e => e.InNRodzajIlosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_RodzajIlosci");
            entity.Property(e => e.InNTstampOtw)
                .HasDefaultValue(0)
                .HasColumnName("InN_TStampOtw");
            entity.Property(e => e.InNTstampZam)
                .HasDefaultValue(0)
                .HasColumnName("InN_TStampZam");
            entity.Property(e => e.InNTylkoNiezerowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_TylkoNiezerowe");
            entity.Property(e => e.InNWycenaNadwyzek)
                .HasDefaultValue((byte)0)
                .HasColumnName("InN_WycenaNadwyzek");
        });

        modelBuilder.Entity<InwNagSesje>(entity =>
        {
            entity.HasKey(e => e.InSId).HasName("InS_Primary");

            entity.ToTable("InwNagSesje", "CDN", tb => tb.HasTrigger("InwNagSesje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.InSInNid, e.InSTyp }, "InSInwNag");

            entity.Property(e => e.InSId).HasColumnName("InS_Id");
            entity.Property(e => e.InSInNid)
                .HasDefaultValue(0)
                .HasColumnName("InS_InNId");
            entity.Property(e => e.InSSesjaId)
                .HasDefaultValue(0)
                .HasColumnName("InS_SesjaID");
            entity.Property(e => e.InSTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("InS_Typ");
        });

        modelBuilder.Entity<InwOdc>(entity =>
        {
            entity.HasKey(e => e.InOId).HasName("InO_Primary");

            entity.ToTable("InwOdc", "CDN", tb => tb.HasTrigger("InwOdc_DeleteHandler"));

            entity.HasIndex(e => new { e.InOInAid, e.InOId }, "InONaglowek").IsUnique();

            entity.HasIndex(e => new { e.InOInAid, e.InONazwa }, "InONazwa");

            entity.HasIndex(e => new { e.InOInAid, e.InOTstamp }, "InOTStamp");

            entity.Property(e => e.InOId).HasColumnName("InO_Id");
            entity.Property(e => e.InOGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("InO_GUID");
            entity.Property(e => e.InOInAid)
                .HasDefaultValue(0)
                .HasColumnName("InO_InAId");
            entity.Property(e => e.InONazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InO_Nazwa");
            entity.Property(e => e.InOOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("InO_OpeFirma");
            entity.Property(e => e.InOOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("InO_OpeLp");
            entity.Property(e => e.InOOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("InO_OpeNumer");
            entity.Property(e => e.InOOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("InO_OpeTyp");
            entity.Property(e => e.InOOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InO_Opis");
            entity.Property(e => e.InOStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("InO_Stan");
            entity.Property(e => e.InOTstamp)
                .HasDefaultValue(0)
                .HasColumnName("InO_TStamp");
            entity.Property(e => e.InOZewnetrzneId)
                .HasDefaultValue(0)
                .HasColumnName("InO_ZewnetrzneId");
            entity.Property(e => e.InOZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("InO_ZewnetrznySys");

            entity.HasOne(d => d.InOInA).WithMany(p => p.InwOdcs)
                .HasForeignKey(d => d.InOInAid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InONaglowek");
        });

        modelBuilder.Entity<InwOdcTwr>(entity =>
        {
            entity.HasKey(e => e.IotId).HasName("IOT_Primary");

            entity.ToTable("InwOdcTwr", "CDN", tb =>
                {
                    tb.HasTrigger("InwOdcTwr_DeletePrzenumeruj");
                    tb.HasTrigger("InwOdcTwr_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.IotInTid, "IOTInwTwr");

            entity.HasIndex(e => new { e.IotInOid, e.IotInOlp }, "IOTLp").IsUnique();

            entity.HasIndex(e => new { e.IotInOid, e.IotId }, "IOTNaglowek").IsUnique();

            entity.HasIndex(e => e.IotTwrNumer, "IOTTowar");

            entity.Property(e => e.IotId).HasColumnName("IOT_Id");
            entity.Property(e => e.IotCckFirma)
                .HasDefaultValue(0)
                .HasColumnName("IOT_CCkFirma");
            entity.Property(e => e.IotCckLp)
                .HasDefaultValue((short)0)
                .HasColumnName("IOT_CCkLp");
            entity.Property(e => e.IotCckNumer)
                .HasDefaultValue(0)
                .HasColumnName("IOT_CCkNumer");
            entity.Property(e => e.IotCckTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("IOT_CCkTyp");
            entity.Property(e => e.IotCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IOT_Cecha");
            entity.Property(e => e.IotIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("IOT_Ilosc");
            entity.Property(e => e.IotInOid)
                .HasDefaultValue(0)
                .HasColumnName("IOT_InOId");
            entity.Property(e => e.IotInOlp)
                .HasDefaultValue(0)
                .HasColumnName("IOT_InOLp");
            entity.Property(e => e.IotInTid)
                .HasDefaultValue(0)
                .HasColumnName("IOT_InTId");
            entity.Property(e => e.IotTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("IOT_TwrFirma");
            entity.Property(e => e.IotTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("IOT_TwrLp");
            entity.Property(e => e.IotTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("IOT_TwrNumer");
            entity.Property(e => e.IotTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("IOT_TwrTyp");

            entity.HasOne(d => d.IotInO).WithMany(p => p.InwOdcTwrs)
                .HasForeignKey(d => d.IotInOid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_IOTNaglowek");

            entity.HasOne(d => d.IotInT).WithMany(p => p.InwOdcTwrs)
                .HasForeignKey(d => d.IotInTid)
                .HasConstraintName("FK_IOTInwTwr");
        });

        modelBuilder.Entity<InwTwr>(entity =>
        {
            entity.HasKey(e => e.InTId).HasName("InT_Primary");

            entity.ToTable("InwTwr", "CDN", tb =>
                {
                    tb.HasTrigger("InwTwr_DeleteTwrPartie");
                    tb.HasTrigger("InwTwr_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.InTInNid, e.InTId }, "InTNaglowek").IsUnique();

            entity.HasIndex(e => e.InTTwrNumer, "InTTowar");

            entity.HasIndex(e => new { e.InTInNid, e.InTTwrNumer, e.InTTpaId, e.InTMgaId }, "IntPartiaAdres").IsUnique();

            entity.HasIndex(e => e.InTTpaId, "IntTpaId");

            entity.Property(e => e.InTId).HasColumnName("InT_Id");
            entity.Property(e => e.InTCckFirma)
                .HasDefaultValue(0)
                .HasColumnName("InT_CCkFirma");
            entity.Property(e => e.InTCckLp)
                .HasDefaultValue((short)0)
                .HasColumnName("InT_CCkLp");
            entity.Property(e => e.InTCckNumer)
                .HasDefaultValue(0)
                .HasColumnName("InT_CCkNumer");
            entity.Property(e => e.InTCckTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("InT_CCkTyp");
            entity.Property(e => e.InTCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InT_Cecha");
            entity.Property(e => e.InTCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("InT_Cena");
            entity.Property(e => e.InTGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("InT_GUID");
            entity.Property(e => e.InTIloscMag)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("InT_IloscMag");
            entity.Property(e => e.InTInNid)
                .HasDefaultValue(0)
                .HasColumnName("InT_InNId");
            entity.Property(e => e.InTMgaId)
                .HasDefaultValue(0)
                .HasColumnName("InT_MgaId");
            entity.Property(e => e.InTTpaId)
                .HasDefaultValue(0)
                .HasColumnName("InT_TpaId");
            entity.Property(e => e.InTTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("InT_TwrFirma");
            entity.Property(e => e.InTTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("InT_TwrLp");
            entity.Property(e => e.InTTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("InT_TwrNumer");
            entity.Property(e => e.InTTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("InT_TwrTyp");

            entity.HasOne(d => d.InTInN).WithMany(p => p.InwTwrs)
                .HasForeignKey(d => d.InTInNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InTNaglowek");
        });

        modelBuilder.Entity<IstElem>(entity =>
        {
            entity.HasKey(e => new { e.IsEGidnumer, e.IsEGidlp }).HasName("IsE_Primary");

            entity.ToTable("IstElem", "CDN");

            entity.HasIndex(e => new { e.IsEGidtyp, e.IsEGidnumer, e.IsEKodCn, e.IsEKrajPoch, e.IsEKrajWysPrzez, e.IsEKodRodzajuTransakcji, e.IsEWarunkiDostawy, e.IsEKodRodzajuTransportu, e.IsENip }, "IsEAgregacja").IsUnique();

            entity.Property(e => e.IsEGidnumer).HasColumnName("IsE_GIDNumer");
            entity.Property(e => e.IsEGidlp).HasColumnName("IsE_GIDLp");
            entity.Property(e => e.IsEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("IsE_GIDFirma");
            entity.Property(e => e.IsEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsE_GIDTyp");
            entity.Property(e => e.IsEIloscJmuzup)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("IsE_IloscJMUzup");
            entity.Property(e => e.IsEKodCn)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_KodCN");
            entity.Property(e => e.IsEKodRodzajuTransakcji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_KodRodzajuTransakcji");
            entity.Property(e => e.IsEKodRodzajuTransportu)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_KodRodzajuTransportu");
            entity.Property(e => e.IsEKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_KrajPoch");
            entity.Property(e => e.IsEKrajWysPrzez)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_KrajWysPrzez");
            entity.Property(e => e.IsEMasaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("IsE_MasaNetto");
            entity.Property(e => e.IsENip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_NIP");
            entity.Property(e => e.IsEOpisTowaru)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_OpisTowaru");
            entity.Property(e => e.IsEPozDo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_PozDo");
            entity.Property(e => e.IsEPozycja)
                .HasDefaultValue(0)
                .HasColumnName("IsE_Pozycja");
            entity.Property(e => e.IsERodzajKorekty)
                .HasDefaultValue((byte)0)
                .HasColumnName("IsE_RodzajKorekty");
            entity.Property(e => e.IsETypEdycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("IsE_TypEdycji");
            entity.Property(e => e.IsEWartoscFakt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("IsE_WartoscFakt");
            entity.Property(e => e.IsEWartoscStat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("IsE_WartoscStat");
            entity.Property(e => e.IsEWarunkiDostawy)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsE_WarunkiDostawy");

            entity.HasOne(d => d.IsEGidnumerNavigation).WithMany(p => p.IstElems)
                .HasForeignKey(d => d.IsEGidnumer)
                .HasConstraintName("FK_IsEPrimary");
        });

        modelBuilder.Entity<IstNag>(entity =>
        {
            entity.HasKey(e => e.IsNGidnumer).HasName("IsN_Primary");

            entity.ToTable("IstNag", "CDN", tb =>
                {
                    tb.HasTrigger("IstNag_InsertUpdateHandler");
                    tb.HasTrigger("IstNag_SprawdzSesje");
                });

            entity.HasIndex(e => e.IsNKntNumer, "IsNKontrah");

            entity.HasIndex(e => new { e.IsNTyp, e.IsNRok, e.IsNMiesiac, e.IsNNumer, e.IsNWersja }, "IsNNumer").IsUnique();

            entity.HasIndex(e => e.IsNUrzNumer, "IsNUrzad");

            entity.Property(e => e.IsNGidnumer).HasColumnName("IsN_GIDNumer");
            entity.Property(e => e.IsNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("IsN_Aktywny");
            entity.Property(e => e.IsNData)
                .HasDefaultValue(0)
                .HasColumnName("IsN_Data");
            entity.Property(e => e.IsNEmail)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_EMail");
            entity.Property(e => e.IsNEmailZwr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_EMailZwr");
            entity.Property(e => e.IsNFaks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_Faks");
            entity.Property(e => e.IsNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("IsN_GIDFirma");
            entity.Property(e => e.IsNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_GIDLp");
            entity.Property(e => e.IsNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_GIDTyp");
            entity.Property(e => e.IsNGrupujDrobne)
                .HasDefaultValue((byte)0)
                .HasColumnName("IsN_GrupujDrobne");
            entity.Property(e => e.IsNIloscPozycji)
                .HasDefaultValue(0)
                .HasColumnName("IsN_IloscPozycji");
            entity.Property(e => e.IsNImie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_Imie");
            entity.Property(e => e.IsNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("IsN_KntFirma");
            entity.Property(e => e.IsNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_KntLp");
            entity.Property(e => e.IsNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("IsN_KntNumer");
            entity.Property(e => e.IsNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_KntTyp");
            entity.Property(e => e.IsNMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_Miasto");
            entity.Property(e => e.IsNMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_Miesiac");
            entity.Property(e => e.IsNNazwisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_Nazwisko");
            entity.Property(e => e.IsNNumer)
                .HasDefaultValue(0)
                .HasColumnName("IsN_Numer");
            entity.Property(e => e.IsNOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("IsN_OpeFirmaM");
            entity.Property(e => e.IsNOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("IsN_OpeFirmaW");
            entity.Property(e => e.IsNOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("IsN_OpeFirmaZ");
            entity.Property(e => e.IsNOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_OpeLpM");
            entity.Property(e => e.IsNOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_OpeLpW");
            entity.Property(e => e.IsNOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_OpeLpZ");
            entity.Property(e => e.IsNOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("IsN_OpeNumerM");
            entity.Property(e => e.IsNOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("IsN_OpeNumerW");
            entity.Property(e => e.IsNOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("IsN_OpeNumerZ");
            entity.Property(e => e.IsNOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_OpeTypM");
            entity.Property(e => e.IsNOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_OpeTypW");
            entity.Property(e => e.IsNOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_OpeTypZ");
            entity.Property(e => e.IsNRodzaj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_Rodzaj");
            entity.Property(e => e.IsNRok)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_Rok");
            entity.Property(e => e.IsNStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("IsN_Stan");
            entity.Property(e => e.IsNSzczegolowosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("IsN_Szczegolowosc");
            entity.Property(e => e.IsNTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_Telefon");
            entity.Property(e => e.IsNTyp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsN_Typ");
            entity.Property(e => e.IsNUrzFirma)
                .HasDefaultValue(0)
                .HasColumnName("IsN_UrzFirma");
            entity.Property(e => e.IsNUrzLp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_UrzLp");
            entity.Property(e => e.IsNUrzNumer)
                .HasDefaultValue(0)
                .HasColumnName("IsN_UrzNumer");
            entity.Property(e => e.IsNUrzTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsN_UrzTyp");
            entity.Property(e => e.IsNWartoscFakt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("IsN_WartoscFakt");
            entity.Property(e => e.IsNWartoscStat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("IsN_WartoscStat");
            entity.Property(e => e.IsNWersja)
                .HasDefaultValue(0)
                .HasColumnName("IsN_Wersja");
        });

        modelBuilder.Entity<IstSelem>(entity =>
        {
            entity.HasKey(e => new { e.IsSGidnumer, e.IsSGidlp, e.IsSSubGidlp }).HasName("IsS_Primary");

            entity.ToTable("IstSElem", "CDN");

            entity.Property(e => e.IsSGidnumer).HasColumnName("IsS_GIDNumer");
            entity.Property(e => e.IsSGidlp).HasColumnName("IsS_GIDLp");
            entity.Property(e => e.IsSSubGidlp).HasColumnName("IsS_SubGIDLp");
            entity.Property(e => e.IsSDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("IsS_DokFirma");
            entity.Property(e => e.IsSDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsS_DokLp");
            entity.Property(e => e.IsSDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("IsS_DokNumer");
            entity.Property(e => e.IsSDokStan)
                .HasDefaultValue((short)0)
                .HasColumnName("IsS_DokStan");
            entity.Property(e => e.IsSDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("IsS_DokTyp");
            entity.Property(e => e.IsSGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("IsS_GIDFirma");
            entity.Property(e => e.IsSGidtyp).HasColumnName("IsS_GIDTyp");
            entity.Property(e => e.IsSIloscJmuzup)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("IsS_IloscJMUzup");
            entity.Property(e => e.IsSJmu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IsS_JMU");
            entity.Property(e => e.IsSMasaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 3)")
                .HasColumnName("IsS_MasaNetto");
            entity.Property(e => e.IsSTrNkosztUstalono)
                .HasDefaultValue((byte)0)
                .HasColumnName("IsS_TrNKosztUstalono");
            entity.Property(e => e.IsSWartoscFakt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IsS_WartoscFakt");
            entity.Property(e => e.IsSWartoscStat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IsS_WartoscStat");

            entity.HasOne(d => d.IstElem).WithMany(p => p.IstSelems)
                .HasForeignKey(d => new { d.IsSGidnumer, d.IsSGidlp })
                .HasConstraintName("FK_IsSPrimary");
        });

        modelBuilder.Entity<IstotneObiekty>(entity =>
        {
            entity.HasKey(e => new { e.IstGidtyp, e.IstGidnumer, e.IstGidlp, e.IstOpeNumer }).HasName("Ist_Primary");

            entity.ToTable("IstotneObiekty", "CDN");

            entity.HasIndex(e => new { e.IstOpeNumer, e.IstLicznik }, "IstOstatnie");

            entity.Property(e => e.IstGidtyp).HasColumnName("Ist_GIDTyp");
            entity.Property(e => e.IstGidnumer).HasColumnName("Ist_GIDNumer");
            entity.Property(e => e.IstGidlp).HasColumnName("Ist_GIDLp");
            entity.Property(e => e.IstOpeNumer).HasColumnName("Ist_OpeNumer");
            entity.Property(e => e.IstDataUzycia)
                .HasDefaultValue(0)
                .HasColumnName("Ist_DataUzycia");
            entity.Property(e => e.IstIkona)
                .HasMaxLength(49)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ist_Ikona");
            entity.Property(e => e.IstLicznik)
                .HasDefaultValue(0)
                .HasColumnName("Ist_Licznik");
            entity.Property(e => e.IstNazwa)
                .HasMaxLength(99)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ist_Nazwa");
            entity.Property(e => e.IstTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ist_Tryb");
        });

        modelBuilder.Entity<IstotneOpcje>(entity =>
        {
            entity.HasKey(e => new { e.IopIdprocedury, e.IopNazwaKontrolki, e.IopIdoperatora, e.IopNazwaOpcji }).HasName("IOP_Primary");

            entity.ToTable("IstotneOpcje", "CDN");

            entity.Property(e => e.IopIdprocedury)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IOP_IDProcedury");
            entity.Property(e => e.IopNazwaKontrolki)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IOP_NazwaKontrolki");
            entity.Property(e => e.IopIdoperatora).HasColumnName("IOP_IDOperatora");
            entity.Property(e => e.IopNazwaOpcji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("IOP_NazwaOpcji");
            entity.Property(e => e.IopLicznik)
                .HasDefaultValue(0)
                .HasColumnName("IOP_Licznik");

            entity.HasOne(d => d.IopIdoperatoraNavigation).WithMany(p => p.IstotneOpcjes)
                .HasForeignKey(d => d.IopIdoperatora)
                .HasConstraintName("FK_IOPPrimary");
        });

        modelBuilder.Entity<KadrSlowniki>(entity =>
        {
            entity.HasKey(e => e.KslId).HasName("KSl_Primary");

            entity.ToTable("KadrSlowniki", "CDN", tb =>
                {
                    tb.HasTrigger("KadrSlownikiAlias1_DeleteHandler");
                    tb.HasTrigger("KadrSlownikiAlias2_DeleteHandler");
                    tb.HasTrigger("KadrSlownikiAlias3_DeleteHandler");
                    tb.HasTrigger("KadrSlowniki_DeleteHandler");
                });

            entity.HasIndex(e => new { e.KslTyp, e.KslNazwa }, "KSlNazwa").IsUnique();

            entity.Property(e => e.KslId).HasColumnName("KSl_Id");
            entity.Property(e => e.KslArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSl_Archiwalny");
            entity.Property(e => e.KslCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KSl_CzasModyfikacji");
            entity.Property(e => e.KslCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("KSl_CzasWprowadzenia");
            entity.Property(e => e.KslData)
                .HasDefaultValue(0)
                .HasColumnName("KSl_Data");
            entity.Property(e => e.KslFlaga1)
                .HasDefaultValue(0)
                .HasColumnName("KSl_Flaga1");
            entity.Property(e => e.KslFlaga2)
                .HasDefaultValue(0)
                .HasColumnName("KSl_Flaga2");
            entity.Property(e => e.KslFlaga3)
                .HasDefaultValue(0)
                .HasColumnName("KSl_Flaga3");
            entity.Property(e => e.KslKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSl_Kod");
            entity.Property(e => e.KslNazwa)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSl_Nazwa");
            entity.Property(e => e.KslOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSl_OpeMNumer");
            entity.Property(e => e.KslOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSl_OpeWNumer");
            entity.Property(e => e.KslOpis)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSl_Opis");
            entity.Property(e => e.KslPredefiniowany)
                .HasDefaultValue(0)
                .HasColumnName("KSl_Predefiniowany");
            entity.Property(e => e.KslSymbol)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSl_Symbol");
            entity.Property(e => e.KslTyp)
                .HasDefaultValue(0)
                .HasColumnName("KSl_Typ");
            entity.Property(e => e.KslWartoscN1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("KSl_WartoscN1");
            entity.Property(e => e.KslWartoscN2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("KSl_WartoscN2");
            entity.Property(e => e.KslWartoscS1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSl_WartoscS1");
        });

        modelBuilder.Entity<KadrStaSlowniki>(entity =>
        {
            entity.HasKey(e => new { e.KssKstId, e.KssSlwTyp, e.KssSlwId, e.KssZakresZnajomosci }).HasName("KSS_Primary");

            entity.ToTable("KadrStaSlowniki", "CDN", tb => tb.HasTrigger("KadrStaSlowniki_InsertUpdateHandler"));

            entity.Property(e => e.KssKstId).HasColumnName("KSS_KStId");
            entity.Property(e => e.KssSlwTyp).HasColumnName("KSS_SlwTyp");
            entity.Property(e => e.KssSlwId).HasColumnName("KSS_SlwId");
            entity.Property(e => e.KssZakresZnajomosci).HasColumnName("KSS_ZakresZnajomosci");
            entity.Property(e => e.KssStopienZnajomosci)
                .HasDefaultValue(0)
                .HasColumnName("KSS_StopienZnajomosci");

            entity.HasOne(d => d.KssKst).WithMany(p => p.KadrStaSlownikis)
                .HasForeignKey(d => d.KssKstId)
                .HasConstraintName("FK_KSSPrimary");
        });

        modelBuilder.Entity<KadrStanowiska>(entity =>
        {
            entity.HasKey(e => e.KstId).HasName("KSt_Primary");

            entity.ToTable("KadrStanowiska", "CDN", tb =>
                {
                    tb.HasTrigger("KadrStanowiska_DeleteHandler");
                    tb.HasTrigger("KadrStanowiska_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.KstNazwa, "KStNazwa").IsUnique();

            entity.Property(e => e.KstId).HasColumnName("KSt_Id");
            entity.Property(e => e.KstArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_Archiwalny");
            entity.Property(e => e.KstBranza)
                .HasDefaultValue(0)
                .HasColumnName("KSt_Branza");
            entity.Property(e => e.KstCentrumPodleglosci)
                .HasDefaultValue(0)
                .HasColumnName("KSt_CentrumPodleglosci");
            entity.Property(e => e.KstHarmonogram)
                .HasDefaultValue(0)
                .HasColumnName("KSt_Harmonogram");
            entity.Property(e => e.KstKierunek)
                .HasDefaultValue(0)
                .HasColumnName("KSt_Kierunek");
            entity.Property(e => e.KstKodZawodu)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_KodZawodu");
            entity.Property(e => e.KstKontrolaStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_KontrolaStawki");
            entity.Property(e => e.KstKslId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_KSlId");
            entity.Property(e => e.KstMinimalneWynagrodzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_MinimalneWynagrodzenie");
            entity.Property(e => e.KstNazwa)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_Nazwa");
            entity.Property(e => e.KstNazwaZaszeregowania)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_NazwaZaszeregowania");
            entity.Property(e => e.KstNrKategorii)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_NrKategorii");
            entity.Property(e => e.KstOpis)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_Opis");
            entity.Property(e => e.KstOpisDodatkowy)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_OpisDodatkowy");
            entity.Property(e => e.KstProporDoEtatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_ProporDoEtatu");
            entity.Property(e => e.KstRodzajUmowy)
                .HasDefaultValue(0)
                .HasColumnName("KSt_RodzajUmowy");
            entity.Property(e => e.KstSpecjalizacja)
                .HasDefaultValue(0)
                .HasColumnName("KSt_Specjalizacja");
            entity.Property(e => e.KstStanowiskoRobotnicze)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_StanowiskoRobotnicze");
            entity.Property(e => e.KstStawkaPropMiesGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_StawkaPropMiesGodz");
            entity.Property(e => e.KstStawkaProponowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSt_StawkaProponowana");
            entity.Property(e => e.KstStawkaZakresDo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSt_StawkaZakresDo");
            entity.Property(e => e.KstStawkaZakresMiesGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_StawkaZakresMiesGodz");
            entity.Property(e => e.KstStawkaZakresOd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSt_StawkaZakresOd");
            entity.Property(e => e.KstStazWymagany)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_StazWymagany");
            entity.Property(e => e.KstSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSt_Symbol");
            entity.Property(e => e.KstSzczegolneWarunki)
                .HasDefaultValue(0)
                .HasColumnName("KSt_SzczegolneWarunki");
            entity.Property(e => e.KstTypStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_TypStawki");
            entity.Property(e => e.KstWymPozWyksztalcenia)
                .HasDefaultValue(0)
                .HasColumnName("KSt_WymPozWyksztalcenia");
            entity.Property(e => e.KstWymiarEtatuL)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_WymiarEtatuL");
            entity.Property(e => e.KstWymiarEtatuM)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSt_WymiarEtatuM");
            entity.Property(e => e.KstZaszeregowania)
                .HasDefaultValue(0)
                .HasColumnName("KSt_Zaszeregowania");
        });

        modelBuilder.Entity<KadrZaszeregowanium>(entity =>
        {
            entity.HasKey(e => e.KzaId).HasName("KZa_Primary");

            entity.ToTable("KadrZaszeregowania", "CDN", tb => tb.HasTrigger("KadrZaszeregowania_DeleteHandler"));

            entity.HasIndex(e => e.KzaNrKategorii, "KZaNrKategorii").IsUnique();

            entity.Property(e => e.KzaId).HasColumnName("KZa_Id");
            entity.Property(e => e.KzaArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_Archiwalny");
            entity.Property(e => e.KzaCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KZa_CzasModyfikacji");
            entity.Property(e => e.KzaCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("KZa_CzasWprowadzenia");
            entity.Property(e => e.KzaKontrolaStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_KontrolaStawki");
            entity.Property(e => e.KzaMnoznik)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("KZa_Mnoznik");
            entity.Property(e => e.KzaNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KZa_Nazwa");
            entity.Property(e => e.KzaNrKategorii)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KZa_NrKategorii");
            entity.Property(e => e.KzaOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("KZa_OpeMNumer");
            entity.Property(e => e.KzaOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("KZa_OpeWNumer");
            entity.Property(e => e.KzaProporDoEtatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_ProporDoEtatu");
            entity.Property(e => e.KzaStawkaPodstMiesGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_StawkaPodstMiesGodz");
            entity.Property(e => e.KzaStawkaPodstawowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KZa_StawkaPodstawowa");
            entity.Property(e => e.KzaStawkaPropMiesGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_StawkaPropMiesGodz");
            entity.Property(e => e.KzaStawkaProponowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KZa_StawkaProponowana");
            entity.Property(e => e.KzaStawkaZakresDo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KZa_StawkaZakresDo");
            entity.Property(e => e.KzaStawkaZakresMiesGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_StawkaZakresMiesGodz");
            entity.Property(e => e.KzaStawkaZakresOd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KZa_StawkaZakresOd");
            entity.Property(e => e.KzaTypStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_TypStawki");
            entity.Property(e => e.KzaWynagrodzenieMin)
                .HasDefaultValue((byte)0)
                .HasColumnName("KZa_WynagrodzenieMin");
        });

        modelBuilder.Entity<KatGrupyTwr>(entity =>
        {
            entity.HasKey(e => e.KgtId).HasName("KGT_Primary");

            entity.ToTable("KatGrupyTwr", "CDN", tb => tb.HasTrigger("KatGrupyTwr_DeleteHandler"));

            entity.HasIndex(e => new { e.KgtWszystkoPlId, e.KgtOjciecId }, "KGTDrzewo");

            entity.HasIndex(e => new { e.KgtOjciecId, e.KgtIdM, e.KgtId }, "KGTListaTwrOpt");

            entity.HasIndex(e => e.KgtNazwa, "KGTNazwa");

            entity.Property(e => e.KgtId).HasColumnName("KGT_Id");
            entity.Property(e => e.KgtCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KGT_CzasModyfikacji");
            entity.Property(e => e.KgtIdM)
                .HasDefaultValue(0)
                .HasColumnName("KGT_IdM");
            entity.Property(e => e.KgtLisc)
                .HasDefaultValue((byte)0)
                .HasColumnName("KGT_Lisc");
            entity.Property(e => e.KgtNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KGT_Nazwa");
            entity.Property(e => e.KgtOjciecId)
                .HasDefaultValue(0)
                .HasColumnName("KGT_OjciecId");
            entity.Property(e => e.KgtPoziom)
                .HasDefaultValue((byte)0)
                .HasColumnName("KGT_Poziom");
            entity.Property(e => e.KgtSciezka)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KGT_Sciezka");
            entity.Property(e => e.KgtWszystkoPlCennik)
                .HasDefaultValue(0)
                .HasColumnName("KGT_WszystkoPlCennik");
            entity.Property(e => e.KgtWszystkoPlCzasR)
                .HasDefaultValue(0)
                .HasColumnName("KGT_WszystkoPlCzasR");
            entity.Property(e => e.KgtWszystkoPlId)
                .HasDefaultValue(0)
                .HasColumnName("KGT_WszystkoPlId");
            entity.Property(e => e.KgtWszystkoPlJm)
                .HasDefaultValue(0)
                .HasColumnName("KGT_WszystkoPlJM");
            entity.Property(e => e.KgtWszystkoPlWarGw)
                .HasDefaultValue(0)
                .HasColumnName("KGT_WszystkoPlWarGw");
            entity.Property(e => e.KgtWszystkoPlWarRekl)
                .HasDefaultValue(0)
                .HasColumnName("KGT_WszystkoPlWarRekl");
            entity.Property(e => e.KgtWszystkoPlWarZwr)
                .HasDefaultValue(0)
                .HasColumnName("KGT_WszystkoPlWarZwr");
        });

        modelBuilder.Entity<KategorieCelne>(entity =>
        {
            entity.HasKey(e => e.KcId).HasName("KC_Primary");

            entity.ToTable("KategorieCelne", "CDN", tb => tb.HasTrigger("KategorieCelne_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KcKraj, e.KcNazwa }, "KCNazwa").IsUnique();

            entity.Property(e => e.KcId).HasColumnName("KC_ID");
            entity.Property(e => e.KcAkcyza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KC_Akcyza");
            entity.Property(e => e.KcClo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KC_Clo");
            entity.Property(e => e.KcFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("KC_FlagaVat");
            entity.Property(e => e.KcGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KC_GrupaPod");
            entity.Property(e => e.KcKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KC_Kraj");
            entity.Property(e => e.KcNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KC_Nazwa");
            entity.Property(e => e.KcPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KC_PCN");
            entity.Property(e => e.KcStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KC_StawkaPod");
            entity.Property(e => e.KcZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KC_Zrodlowa");
        });

        modelBuilder.Entity<KazTrpView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KazTrpView", "CDN");

            entity.Property(e => e.Gidfirma).HasColumnName("GIDFirma");
            entity.Property(e => e.Gidlp).HasColumnName("GIDLp");
            entity.Property(e => e.Gidnumer).HasColumnName("GIDNumer");
            entity.Property(e => e.Gidtyp).HasColumnName("GIDTyp");
            entity.Property(e => e.Kwota).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<Kbnelem>(entity =>
        {
            entity.HasKey(e => new { e.KbneKbnnid, e.KbneLp }).HasName("KBNE_Primary");

            entity.ToTable("KBNElem", "CDN", tb =>
                {
                    tb.HasTrigger("KBNElem_Dodaj");
                    tb.HasTrigger("KBNElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.KbnePwtyp, e.KbnePwnumer, e.KbnePwlp }, "KBNEPW");

            entity.HasIndex(e => new { e.KbneRwtyp, e.KbneRwnumer, e.KbneRwlp }, "KBNERW");

            entity.Property(e => e.KbneKbnnid).HasColumnName("KBNE_KBNNId");
            entity.Property(e => e.KbneLp).HasColumnName("KBNE_Lp");
            entity.Property(e => e.KbneCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KBNE_Cena");
            entity.Property(e => e.KbneCenaPw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KBNE_CenaPW");
            entity.Property(e => e.KbneCenaRw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KBNE_CenaRW");
            entity.Property(e => e.KbneIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("KBNE_Ilosc");
            entity.Property(e => e.KbneMagNumerPw)
                .HasDefaultValue(0)
                .HasColumnName("KBNE_MagNumerPW");
            entity.Property(e => e.KbneMagNumerRw)
                .HasDefaultValue(0)
                .HasColumnName("KBNE_MagNumerRW");
            entity.Property(e => e.KbnePwfirma)
                .HasDefaultValue(0)
                .HasColumnName("KBNE_PWFirma");
            entity.Property(e => e.KbnePwlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNE_PWLp");
            entity.Property(e => e.KbnePwnumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNE_PWNumer");
            entity.Property(e => e.KbnePwtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNE_PWTyp");
            entity.Property(e => e.KbneRoznica)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNE_Roznica");
            entity.Property(e => e.KbneRwfirma)
                .HasDefaultValue(0)
                .HasColumnName("KBNE_RWFirma");
            entity.Property(e => e.KbneRwlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNE_RWLp");
            entity.Property(e => e.KbneRwnumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNE_RWNumer");
            entity.Property(e => e.KbneRwtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNE_RWTyp");
            entity.Property(e => e.KbneWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNE_Wartosc");
            entity.Property(e => e.KbneWartoscPw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNE_WartoscPW");
            entity.Property(e => e.KbneWartoscRw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNE_WartoscRW");
            entity.Property(e => e.KbneZawiniony)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNE_Zawiniony");

            entity.HasOne(d => d.KbneKbnn).WithMany(p => p.Kbnelems)
                .HasForeignKey(d => d.KbneKbnnid)
                .HasConstraintName("FK_KBNEPrimary");
        });

        modelBuilder.Entity<Kbnnag>(entity =>
        {
            entity.HasKey(e => e.KbnnId).HasName("KBNN_Primary");

            entity.ToTable("KBNNag", "CDN", tb => tb.HasTrigger("KBNNag_DeleteHandler"));

            entity.HasIndex(e => new { e.KbnnRok, e.KbnnMiesiac, e.KbnnSeria, e.KbnnNumer }, "KBNNNumer").IsUnique();

            entity.Property(e => e.KbnnId).HasColumnName("KBNN_Id");
            entity.Property(e => e.KbnnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_Aktywny");
            entity.Property(e => e.KbnnCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KBNN_CechaOpis");
            entity.Property(e => e.KbnnDataDo)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_DataDo");
            entity.Property(e => e.KbnnDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_DataKsiegowania");
            entity.Property(e => e.KbnnDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_DataModyfikacji");
            entity.Property(e => e.KbnnDataOd)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_DataOd");
            entity.Property(e => e.KbnnDataPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_DataPotwierdzenia");
            entity.Property(e => e.KbnnDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_DataWystawienia");
            entity.Property(e => e.KbnnDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KBNN_Dziennik");
            entity.Property(e => e.KbnnFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KBNN_FormaNazwa");
            entity.Property(e => e.KbnnFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_FormaNr");
            entity.Property(e => e.KbnnFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_FrmNumer");
            entity.Property(e => e.KbnnFrsId)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_FrsId");
            entity.Property(e => e.KbnnKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_KarNumer");
            entity.Property(e => e.KbnnMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_Miesiac");
            entity.Property(e => e.KbnnNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_NieKsiegowac");
            entity.Property(e => e.KbnnNumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_Numer");
            entity.Property(e => e.KbnnOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_OpeNumerM");
            entity.Property(e => e.KbnnOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_OpeNumerR");
            entity.Property(e => e.KbnnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_OpeNumerW");
            entity.Property(e => e.KbnnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_OpeNumerZ");
            entity.Property(e => e.KbnnOpeNumerZfr)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_OpeNumerZFR");
            entity.Property(e => e.KbnnOpeNumerZm)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_OpeNumerZM");
            entity.Property(e => e.KbnnOpeTypZfr)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNN_OpeTypZFR");
            entity.Property(e => e.KbnnOpeTypZm)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNN_OpeTypZM");
            entity.Property(e => e.KbnnOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KBNN_Opis");
            entity.Property(e => e.KbnnPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_Platnosci");
            entity.Property(e => e.KbnnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNN_Rok");
            entity.Property(e => e.KbnnRoznica)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNN_Roznica");
            entity.Property(e => e.KbnnRoznicaPw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNN_RoznicaPW");
            entity.Property(e => e.KbnnRoznicaRw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNN_RoznicaRW");
            entity.Property(e => e.KbnnSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_SchNumer");
            entity.Property(e => e.KbnnSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNN_SchTyp");
            entity.Property(e => e.KbnnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KBNN_Seria");
            entity.Property(e => e.KbnnStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_Stan");
            entity.Property(e => e.KbnnTerminPlatnosci)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_TerminPlatnosci");
            entity.Property(e => e.KbnnTstampZfr)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_TStampZFR");
            entity.Property(e => e.KbnnTstampZm)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_TStampZM");
            entity.Property(e => e.KbnnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KBNN_URL");
            entity.Property(e => e.KbnnWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNN_Wartosc");
            entity.Property(e => e.KbnnWartoscBrakow)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNN_WartoscBrakow");
            entity.Property(e => e.KbnnWartoscBrakowZawinionych)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNN_WartoscBrakowZawinionych");
            entity.Property(e => e.KbnnWartoscNadwyzek)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KBNN_WartoscNadwyzek");
            entity.Property(e => e.KbnnWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KBNN_WsDziennik");
            entity.Property(e => e.KbnnWsSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNN_WsSchNumer");
            entity.Property(e => e.KbnnWsSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KBNN_WsSchTyp");
            entity.Property(e => e.KbnnWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_WsStosujDziennik");
            entity.Property(e => e.KbnnWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_WsStosujSchemat");
            entity.Property(e => e.KbnnZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_Zaksiegowano");
            entity.Property(e => e.KbnnZatwFormalnoRach)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_ZatwFormalnoRach");
            entity.Property(e => e.KbnnZatwMerytorycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KBNN_ZatwMerytorycznie");

            entity.HasMany(d => d.KbnmMagNumers).WithMany(p => p.KbnmKbnns)
                .UsingEntity<Dictionary<string, object>>(
                    "Kbnmagazyny",
                    r => r.HasOne<Magazyny>().WithMany()
                        .HasForeignKey("KbnmMagNumer")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_KBNMMagazyn"),
                    l => l.HasOne<Kbnnag>().WithMany()
                        .HasForeignKey("KbnmKbnnid")
                        .HasConstraintName("FK_KBNMKBNNag"),
                    j =>
                    {
                        j.HasKey("KbnmKbnnid", "KbnmMagNumer").HasName("KBNM_Primary");
                        j.ToTable("KBNMagazyny", "CDN");
                        j.HasIndex(new[] { "KbnmKbnnid" }, "KBNMKBNNag");
                        j.IndexerProperty<int>("KbnmKbnnid").HasColumnName("KBNM_KBNNId");
                        j.IndexerProperty<int>("KbnmMagNumer").HasColumnName("KBNM_MagNumer");
                    });

            entity.HasMany(d => d.KbnsSerNazwas).WithMany(p => p.KbnsKbnns)
                .UsingEntity<Dictionary<string, object>>(
                    "Kbnserie",
                    r => r.HasOne<Serie>().WithMany()
                        .HasPrincipalKey("SerNazwa")
                        .HasForeignKey("KbnsSerNazwa")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_KBNSSeria"),
                    l => l.HasOne<Kbnnag>().WithMany()
                        .HasForeignKey("KbnsKbnnid")
                        .HasConstraintName("FK_KBNSKBNNag"),
                    j =>
                    {
                        j.HasKey("KbnsKbnnid", "KbnsSerNazwa").HasName("KBNS_Primary");
                        j.ToTable("KBNSerie", "CDN");
                        j.HasIndex(new[] { "KbnsKbnnid" }, "KBNSKBNNag");
                        j.IndexerProperty<int>("KbnsKbnnid").HasColumnName("KBNS_KBNNId");
                        j.IndexerProperty<string>("KbnsSerNazwa")
                            .HasMaxLength(5)
                            .IsUnicode(false)
                            .HasDefaultValue("")
                            .HasColumnName("KBNS_SerNazwa");
                    });
        });

        modelBuilder.Entity<Kbnodpowiedzialni>(entity =>
        {
            entity.HasKey(e => e.KbnoId).HasName("KBNO_Primary");

            entity.ToTable("KBNOdpowiedzialni", "CDN", tb => tb.HasTrigger("KBNOdpowiedzialni_InsertUpdateHandler"));

            entity.HasIndex(e => e.KbnoKbnnid, "KBNOKBNN");

            entity.HasIndex(e => e.KbnoMagNumer, "KBNOMag");

            entity.HasIndex(e => e.KbnoPrcNumer, "KBNOPrc");

            entity.Property(e => e.KbnoId).HasColumnName("KBNO_Id");
            entity.Property(e => e.KbnoDataDo)
                .HasDefaultValue(0)
                .HasColumnName("KBNO_DataDo");
            entity.Property(e => e.KbnoDataOd)
                .HasDefaultValue(0)
                .HasColumnName("KBNO_DataOd");
            entity.Property(e => e.KbnoKbnnid)
                .HasDefaultValue(0)
                .HasColumnName("KBNO_KBNNId");
            entity.Property(e => e.KbnoMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNO_MagNumer");
            entity.Property(e => e.KbnoPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("KBNO_PrcNumer");
            entity.Property(e => e.KbnoProcentOdpowiedzialnosci)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KBNO_ProcentOdpowiedzialnosci");

            entity.HasOne(d => d.KbnoKbnn).WithMany(p => p.Kbnodpowiedzialnis)
                .HasForeignKey(d => d.KbnoKbnnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KBNOKBNN");
        });

        modelBuilder.Entity<KgtParametr>(entity =>
        {
            entity.HasKey(e => e.KparId).HasName("KPar_Primary");

            entity.ToTable("KgtParametr", "CDN");

            entity.HasIndex(e => e.KparWszystkoPlId, "KeyWszystkoPlId").IsUnique();

            entity.Property(e => e.KparId).HasColumnName("KPar_Id");
            entity.Property(e => e.KparNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPar_Nazwa");
            entity.Property(e => e.KparTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPar_Typ");
            entity.Property(e => e.KparWszystkoPlId)
                .HasDefaultValue(0)
                .HasColumnName("KPar_WszystkoPlId");
        });

        modelBuilder.Entity<KgtParametryKategorii>(entity =>
        {
            entity.HasKey(e => e.KpkId).HasName("KPK_Primary");

            entity.ToTable("KgtParametryKategorii", "CDN");

            entity.HasIndex(e => new { e.KpkKategoriaId, e.KpkParametrId }, "KPKParamKateg").IsUnique();

            entity.Property(e => e.KpkId).HasColumnName("KPK_Id");
            entity.Property(e => e.KpkCzyZakres)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPK_CzyZakres");
            entity.Property(e => e.KpkIleWybracZwielu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPK_IleWybracZWielu");
            entity.Property(e => e.KpkJednostka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPK_Jednostka");
            entity.Property(e => e.KpkKategoriaId)
                .HasDefaultValue(0)
                .HasColumnName("KPK_KategoriaId");
            entity.Property(e => e.KpkMaksimum)
                .HasDefaultValue(0)
                .HasColumnName("KPK_Maksimum");
            entity.Property(e => e.KpkMinimum)
                .HasDefaultValue(0)
                .HasColumnName("KPK_Minimum");
            entity.Property(e => e.KpkParametrId)
                .HasDefaultValue(0)
                .HasColumnName("KPK_ParametrId");
            entity.Property(e => e.KpkPrecyzja)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPK_Precyzja");
            entity.Property(e => e.KpkWielowartosciowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPK_Wielowartosciowy");
            entity.Property(e => e.KpkWszystkoPlId)
                .HasDefaultValue(0)
                .HasColumnName("KPK_WszystkoPlId");
            entity.Property(e => e.KpkWymagany)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPK_Wymagany");

            entity.HasOne(d => d.KpkKategoria).WithMany(p => p.KgtParametryKategoriis)
                .HasForeignKey(d => d.KpkKategoriaId)
                .HasConstraintName("FK_KPKParamKateg");

            entity.HasOne(d => d.KpkParametr).WithMany(p => p.KgtParametryKategoriis)
                .HasForeignKey(d => d.KpkParametrId)
                .HasConstraintName("FK_KPKParam");
        });

        modelBuilder.Entity<KgtSlownik>(entity =>
        {
            entity.HasKey(e => e.KsloId).HasName("KSlo_Primary");

            entity.ToTable("KgtSlownik", "CDN");

            entity.HasIndex(e => e.KsloWszystkoPlId, "KeyWszystkoPlId").IsUnique();

            entity.Property(e => e.KsloId).HasColumnName("KSlo_Id");
            entity.Property(e => e.KsloWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSlo_Wartosc");
            entity.Property(e => e.KsloWszystkoPlId)
                .HasDefaultValue(0)
                .HasColumnName("KSlo_WszystkoPlId");
        });

        modelBuilder.Entity<KgtSlownikiParametruKategorii>(entity =>
        {
            entity.HasKey(e => e.KspkId).HasName("KSPK_Primary");

            entity.ToTable("KgtSlownikiParametruKategorii", "CDN");

            entity.HasIndex(e => new { e.KspkParametrKategoriiId, e.KspkSlownikId }, "KSPKSlownParamKateg").IsUnique();

            entity.Property(e => e.KspkId).HasColumnName("KSPK_Id");
            entity.Property(e => e.KspkParametrKategoriiId)
                .HasDefaultValue(0)
                .HasColumnName("KSPK_ParametrKategoriiId");
            entity.Property(e => e.KspkSlownikId)
                .HasDefaultValue(0)
                .HasColumnName("KSPK_SlownikId");

            entity.HasOne(d => d.KspkParametrKategorii).WithMany(p => p.KgtSlownikiParametruKategoriis)
                .HasForeignKey(d => d.KspkParametrKategoriiId)
                .HasConstraintName("FK_KSPKSlownParamKateg");

            entity.HasOne(d => d.KspkSlownik).WithMany(p => p.KgtSlownikiParametruKategoriis)
                .HasForeignKey(d => d.KspkSlownikId)
                .HasConstraintName("FK_KSPKSlown");
        });

        modelBuilder.Entity<KgtWartoscParametrDlaTowaru>(entity =>
        {
            entity.HasKey(e => e.KwptId).HasName("KWPT_Primary");

            entity.ToTable("KgtWartoscParametrDlaTowaru", "CDN");

            entity.HasIndex(e => new { e.KwptTwrNumer, e.KwptParametrKategoriiId }, "KWPTParamKategTwr").IsUnique();

            entity.Property(e => e.KwptId).HasColumnName("KWPT_Id");
            entity.Property(e => e.KwptIdWartosci)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KWPT_IdWartosci");
            entity.Property(e => e.KwptParametrKategoriiId)
                .HasDefaultValue(0)
                .HasColumnName("KWPT_ParametrKategoriiId");
            entity.Property(e => e.KwptTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("KWPT_TwrNumer");
            entity.Property(e => e.KwptWartosc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KWPT_Wartosc");

            entity.HasOne(d => d.KwptParametrKategorii).WithMany(p => p.KgtWartoscParametrDlaTowarus)
                .HasForeignKey(d => d.KwptParametrKategoriiId)
                .HasConstraintName("FK_KWPTParamKateg");

            entity.HasOne(d => d.KwptTwrNumerNavigation).WithMany(p => p.KgtWartoscParametrDlaTowarus)
                .HasForeignKey(d => d.KwptTwrNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KWPTParamKategTwr");
        });

        modelBuilder.Entity<KksGrupyElem>(entity =>
        {
            entity.HasKey(e => new { e.KgeKgnid, e.KgeKonto }).HasName("KGE_Primary");

            entity.ToTable("KksGrupyElem", "CDN");

            entity.HasIndex(e => new { e.KgeOkres, e.KgeKonto }, "KGEKonto");

            entity.Property(e => e.KgeKgnid).HasColumnName("KGE_KGNID");
            entity.Property(e => e.KgeKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KGE_Konto");
            entity.Property(e => e.KgeOkres)
                .HasDefaultValue(0)
                .HasColumnName("KGE_Okres");
            entity.Property(e => e.KgePomin)
                .HasDefaultValue((byte)0)
                .HasColumnName("KGE_Pomin");

            entity.HasOne(d => d.KgeKgn).WithMany(p => p.KksGrupyElems)
                .HasForeignKey(d => d.KgeKgnid)
                .HasConstraintName("FK_KGEPrimary");
        });

        modelBuilder.Entity<KksGrupyNag>(entity =>
        {
            entity.HasKey(e => e.KgnId).HasName("KGN_Primary");

            entity.ToTable("KksGrupyNag", "CDN");

            entity.HasIndex(e => e.KgnNazwa, "KGNNazwa").IsUnique();

            entity.Property(e => e.KgnId).HasColumnName("KGN_ID");
            entity.Property(e => e.KgnAktywna)
                .HasDefaultValue((byte)1)
                .HasColumnName("KGN_Aktywna");
            entity.Property(e => e.KgnNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KGN_Nazwa");
            entity.Property(e => e.KgnOkres)
                .HasDefaultValue(0)
                .HasColumnName("KGN_Okres");
        });

        modelBuilder.Entity<KluczeElem>(entity =>
        {
            entity.HasKey(e => e.KleId).HasName("KLE_Primary");

            entity.ToTable("KluczeElem", "CDN");

            entity.HasIndex(e => new { e.KleKlnid, e.KleNazwa }, "KLENazwa").IsUnique();

            entity.Property(e => e.KleId).HasColumnName("KLE_ID");
            entity.Property(e => e.KleKlnid)
                .HasDefaultValue(0)
                .HasColumnName("KLE_KLNID");
            entity.Property(e => e.KleNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLE_Nazwa");
            entity.Property(e => e.KleNazwa2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLE_Nazwa2");
            entity.Property(e => e.KleWspolczynnik)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KLE_Wspolczynnik");

            entity.HasOne(d => d.KleKln).WithMany(p => p.KluczeElems)
                .HasForeignKey(d => d.KleKlnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KLENazwa");
        });

        modelBuilder.Entity<KluczeNag>(entity =>
        {
            entity.HasKey(e => e.KlnId).HasName("KLN_Primary");

            entity.ToTable("KluczeNag", "CDN", tb => tb.HasTrigger("KluczeNag_DeleteHandler"));

            entity.HasIndex(e => e.KlnNazwa, "KLNNazwa").IsUnique();

            entity.Property(e => e.KlnId).HasColumnName("KLN_ID");
            entity.Property(e => e.KlnArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KLN_Archiwalny");
            entity.Property(e => e.KlnDefinicja)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLN_Definicja");
            entity.Property(e => e.KlnNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLN_Nazwa");
            entity.Property(e => e.KlnOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLN_Opis");
            entity.Property(e => e.KlnTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KLN_Typ");
        });

        modelBuilder.Entity<KluczeParametry>(entity =>
        {
            entity.HasKey(e => e.KlpId).HasName("KLP_Primary");

            entity.ToTable("KluczeParametry", "CDN");

            entity.HasIndex(e => new { e.KlpKlnid, e.KlpNazwa }, "KLPNazwa").IsUnique();

            entity.Property(e => e.KlpId).HasColumnName("KLP_ID");
            entity.Property(e => e.KlpKlnid)
                .HasDefaultValue(0)
                .HasColumnName("KLP_KLNID");
            entity.Property(e => e.KlpNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLP_Nazwa");

            entity.HasOne(d => d.KlpKln).WithMany(p => p.KluczeParametries)
                .HasForeignKey(d => d.KlpKlnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KLPNazwa");
        });

        modelBuilder.Entity<KmStawki>(entity =>
        {
            entity.HasKey(e => e.KmSId).HasName("KmS_Primary");

            entity.ToTable("KmStawki", "CDN", tb => tb.HasTrigger("KmStawki_InsertUpdateHandler"));

            entity.HasIndex(e => e.KmSTstamp, "KmSData");

            entity.HasIndex(e => e.KmSSlwId, "KmSSlownik");

            entity.Property(e => e.KmSId).HasColumnName("KmS_Id");
            entity.Property(e => e.KmSSlwId)
                .HasDefaultValue(0)
                .HasColumnName("KmS_SlwId");
            entity.Property(e => e.KmSStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("KmS_Stawka");
            entity.Property(e => e.KmSTstamp)
                .HasDefaultValue(0)
                .HasColumnName("KmS_TStamp");
        });

        modelBuilder.Entity<KntAdresy>(entity =>
        {
            entity.HasKey(e => e.KnAGidnumer).HasName("KnA_Primary");

            entity.ToTable("KntAdresy", "CDN", tb =>
                {
                    tb.HasTrigger("KnAFlagaDomyslny_Trg");
                    tb.HasTrigger("KntAdresyAlias1_DeleteHandler");
                    tb.HasTrigger("KntAdresyAlias_DeleteHandler");
                    tb.HasTrigger("KntAdresy_DeleteHandler");
                    tb.HasTrigger("KntAdresy_HistoriaZmian");
                    tb.HasTrigger("KntAdresy_InsertUpdateHandler");
                    tb.HasTrigger("KntAdresy_PicoUsuniete");
                });

            entity.HasIndex(e => e.KnAAkronim, "KnAAkronim");

            entity.HasIndex(e => new { e.KnABnkTyp, e.KnABnkNumer }, "KnABank");

            entity.HasIndex(e => new { e.KnAKntNumer, e.KnAKntTyp }, "KnAKontrah");

            entity.HasIndex(e => new { e.KnAKntTyp, e.KnAKntNumer, e.KnADataArc, e.KnAGidtyp, e.KnAGidnumer }, "KnAKontrahArc").IsUnique();

            entity.Property(e => e.KnAGidnumer).HasColumnName("KnA_GIDNumer");
            entity.Property(e => e.KnAAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Adres");
            entity.Property(e => e.KnAAdresBank)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnA_AdresBank");
            entity.Property(e => e.KnAAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Akronim");
            entity.Property(e => e.KnAAnonim)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnA_Anonim");
            entity.Property(e => e.KnABnkFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnA_BnkFirma");
            entity.Property(e => e.KnABnkLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_BnkLp");
            entity.Property(e => e.KnABnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnA_BnkNumer");
            entity.Property(e => e.KnABnkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_BnkTyp");
            entity.Property(e => e.KnACharsetAnsi)
                .HasDefaultValue((byte)238)
                .HasColumnName("KnA_CharsetANSI");
            entity.Property(e => e.KnADataArc)
                .HasDefaultValue(0)
                .HasColumnName("KnA_DataArc");
            entity.Property(e => e.KnADataWydania)
                .HasDefaultValue(0)
                .HasColumnName("KnA_DataWydania");
            entity.Property(e => e.KnADokumentTozsamosci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_DokumentTozsamosci");
            entity.Property(e => e.KnADomyslny)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_Domyslny");
            entity.Property(e => e.KnAEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_EMail");
            entity.Property(e => e.KnAFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Fax");
            entity.Property(e => e.KnAGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnA_GIDFirma");
            entity.Property(e => e.KnAGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_GIDLp");
            entity.Property(e => e.KnAGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_GIDTyp");
            entity.Property(e => e.KnAGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_GLN");
            entity.Property(e => e.KnAGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Gmina");
            entity.Property(e => e.KnAGpsdataPobrania)
                .HasDefaultValue(0)
                .HasColumnName("KnA_GPSDataPobrania");
            entity.Property(e => e.KnAGpsdl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("KnA_GPSDl");
            entity.Property(e => e.KnAGpsgodzinaPobrania)
                .HasDefaultValue(0)
                .HasColumnName("KnA_GPSGodzinaPobrania");
            entity.Property(e => e.KnAGpssz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("KnA_GPSSz");
            entity.Property(e => e.KnAGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KnA_GUID");
            entity.Property(e => e.KnAGuiddane)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KnA_GUIDdane");
            entity.Property(e => e.KnAGuidemail)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KnA_GUIDEmail");
            entity.Property(e => e.KnAGuidtelefon)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KnA_GUIDTelefon");
            entity.Property(e => e.KnAKnaArchiwizowanego)
                .HasDefaultValue(0)
                .HasColumnName("KnA_KnaArchiwizowanego");
            entity.Property(e => e.KnAKnaPierwotny)
                .HasDefaultValue(0)
                .HasColumnName("KnA_KnaPierwotny");
            entity.Property(e => e.KnAKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnA_KntFirma");
            entity.Property(e => e.KnAKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_KntLp");
            entity.Property(e => e.KnAKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnA_KntNumer");
            entity.Property(e => e.KnAKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_KntTyp");
            entity.Property(e => e.KnAKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_KodP");
            entity.Property(e => e.KnAKodPcdc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_KodPCDC");
            entity.Property(e => e.KnAKontoDostawcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_KontoDostawcy");
            entity.Property(e => e.KnAKontoOdbiorcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_KontoOdbiorcy");
            entity.Property(e => e.KnAKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Kraj");
            entity.Property(e => e.KnAKrajCdc)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_KrajCDC");
            entity.Property(e => e.KnAKrajSiedziby)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_KrajSiedziby");
            entity.Property(e => e.KnALastModL)
                .HasDefaultValue(0)
                .HasColumnName("KnA_LastModL");
            entity.Property(e => e.KnAMetodaKasowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnA_MetodaKasowa");
            entity.Property(e => e.KnAMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Miasto");
            entity.Property(e => e.KnAMiastoCdc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_MiastoCDC");
            entity.Property(e => e.KnAModem)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Modem");
            entity.Property(e => e.KnANazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Nazwa1");
            entity.Property(e => e.KnANazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Nazwa2");
            entity.Property(e => e.KnANazwa3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Nazwa3");
            entity.Property(e => e.KnANiePublikuj)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_NiePublikuj");
            entity.Property(e => e.KnANip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Nip");
            entity.Property(e => e.KnANipE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_NipE");
            entity.Property(e => e.KnANipPrefiks)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_NipPrefiks");
            entity.Property(e => e.KnANrDomuCdc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_NrDomuCDC");
            entity.Property(e => e.KnANrMieszkaniaCdc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_NrMieszkaniaCDC");
            entity.Property(e => e.KnANrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_NrRachunku");
            entity.Property(e => e.KnANrb)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_NRB");
            entity.Property(e => e.KnAOdleglosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("KnA_Odleglosc");
            entity.Property(e => e.KnAOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Opis");
            entity.Property(e => e.KnAOrganWydajacy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_OrganWydajacy");
            entity.Property(e => e.KnAOsoba)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_Osoba");
            entity.Property(e => e.KnAPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Pesel");
            entity.Property(e => e.KnAPlatnikVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnA_PlatnikVat");
            entity.Property(e => e.KnAPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Powiat");
            entity.Property(e => e.KnARegionCdc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_RegionCDC");
            entity.Property(e => e.KnARegionCrm)
                .HasDefaultValue(0)
                .HasColumnName("KnA_RegionCRM");
            entity.Property(e => e.KnARegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Regon");
            entity.Property(e => e.KnARolnikRyczaltowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnA_RolnikRyczaltowy");
            entity.Property(e => e.KnAStanPostep)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnA_StanPostep");
            entity.Property(e => e.KnATelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Telefon1");
            entity.Property(e => e.KnATelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Telefon2");
            entity.Property(e => e.KnATelex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Telex");
            entity.Property(e => e.KnATypPos)
                .HasDefaultValue((short)0)
                .HasColumnName("KnA_TypPOS");
            entity.Property(e => e.KnAUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Ulica");
            entity.Property(e => e.KnAUlicaCdc)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_UlicaCdc");
            entity.Property(e => e.KnAVatDataOdmowy)
                .HasDefaultValue(0)
                .HasColumnName("KnA_VatDataOdmowy");
            entity.Property(e => e.KnAVatDataPrzywrocenia)
                .HasDefaultValue(0)
                .HasColumnName("KnA_VatDataPrzywrocenia");
            entity.Property(e => e.KnAVatDataRejestracji)
                .HasDefaultValue(0)
                .HasColumnName("KnA_VatDataRejestracji");
            entity.Property(e => e.KnAVatDataSprawdzenia)
                .HasDefaultValue(0)
                .HasColumnName("KnA_VatDataSprawdzenia");
            entity.Property(e => e.KnAVatDataUsuniecia)
                .HasDefaultValue(0)
                .HasColumnName("KnA_VatDataUsuniecia");
            entity.Property(e => e.KnAWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnA_Wojewodztwo");
            entity.Property(e => e.KnAWysylkowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnA_Wysylkowy");
        });

        modelBuilder.Entity<KntAplikacje>(entity =>
        {
            entity.HasKey(e => new { e.KapKntNumer, e.KapKntTyp }).HasName("KAp_Primary");

            entity.ToTable("KntAplikacje", "CDN", tb => tb.HasTrigger("KntAplikacje_InsertUpdateHandler"));

            entity.HasIndex(e => e.KapMagNumer, "KApMagazyn");

            entity.HasIndex(e => e.KapMagMsnumer, "KApMagazynMS");

            entity.HasIndex(e => e.KapOpeNumer, "KApOperator");

            entity.HasIndex(e => e.KapOpeOnumer, "KApOperatorO");

            entity.Property(e => e.KapKntNumer).HasColumnName("KAp_KntNumer");
            entity.Property(e => e.KapKntTyp).HasColumnName("KAp_KntTyp");
            entity.Property(e => e.KapCzyPotwierdzone)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAp_CzyPotwierdzone");
            entity.Property(e => e.KapMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("KAp_MagFirma");
            entity.Property(e => e.KapMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAp_MagLp");
            entity.Property(e => e.KapMagMsfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAp_MagMSFirma");
            entity.Property(e => e.KapMagMslp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAp_MagMSLp");
            entity.Property(e => e.KapMagMsnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAp_MagMSNumer");
            entity.Property(e => e.KapMagMstyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAp_MagMSTyp");
            entity.Property(e => e.KapMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("KAp_MagNumer");
            entity.Property(e => e.KapMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAp_MagTyp");
            entity.Property(e => e.KapOpeHaslo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAp_OpeHaslo");
            entity.Property(e => e.KapOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KAp_OpeNumer");
            entity.Property(e => e.KapOpeOnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAp_OpeONumer");
            entity.Property(e => e.KapPrefiksObcy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAp_PrefiksObcy");
            entity.Property(e => e.KapSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAp_Seria");
            entity.Property(e => e.KapTwrGrupaNumer)
                .HasDefaultValue(0)
                .HasColumnName("KAp_TwrGrupaNumer");
        });

        modelBuilder.Entity<KntAplikacjeObiekty>(entity =>
        {
            entity.HasKey(e => e.KobId).HasName("KOb_Primary");

            entity.ToTable("KntAplikacjeObiekty", "CDN", tb => tb.HasTrigger("KntAplikacjeObiekty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KobKntNumer, e.KobKntTyp }, "KObKnt");

            entity.HasIndex(e => new { e.KobObiNumer, e.KobObiTyp, e.KobObiLp, e.KobKntNumer, e.KobKntTyp }, "KObKntObi").IsUnique();

            entity.Property(e => e.KobId).HasColumnName("KOb_Id");
            entity.Property(e => e.KobKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("KOb_KntNumer");
            entity.Property(e => e.KobKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOb_KntTyp");
            entity.Property(e => e.KobObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("KOb_ObiFirma");
            entity.Property(e => e.KobObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOb_ObiLp");
            entity.Property(e => e.KobObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("KOb_ObiNumer");
            entity.Property(e => e.KobObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOb_ObiTyp");

            entity.HasOne(d => d.KntAplikacje).WithMany(p => p.KntAplikacjeObiekties)
                .HasForeignKey(d => new { d.KobKntNumer, d.KobKntTyp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KObKnt");
        });

        modelBuilder.Entity<KntAtrybuty>(entity =>
        {
            entity.HasKey(e => new { e.KnXGidtyp, e.KnXGidnumer, e.KnXGidlp }).HasName("KnX_Primary");

            entity.ToTable("KntAtrybuty", "CDN");

            entity.HasIndex(e => new { e.KnXGidtyp, e.KnXGidnumer, e.KnXAtrybut }, "KnXAtrybut").IsUnique();

            entity.HasIndex(e => new { e.KnXGidtyp, e.KnXGidlp, e.KnXAtrybut, e.KnXNumer }, "KnXNazwy").IsUnique();

            entity.Property(e => e.KnXGidtyp).HasColumnName("KnX_GIDTyp");
            entity.Property(e => e.KnXGidnumer).HasColumnName("KnX_GIDNumer");
            entity.Property(e => e.KnXGidlp).HasColumnName("KnX_GIDLp");
            entity.Property(e => e.KnXAtrybut)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnX_Atrybut");
            entity.Property(e => e.KnXFormatA)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnX_FormatA");
            entity.Property(e => e.KnXGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnX_GIDFirma");
            entity.Property(e => e.KnXNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnX_Numer");
        });

        modelBuilder.Entity<KntGrupy>(entity =>
        {
            entity.HasKey(e => new { e.KnGGidtyp, e.KnGGidnumer, e.KnGGrOtyp, e.KnGGrOnumer }).HasName("KnG_Primary");

            entity.ToTable("KntGrupy", "CDN", tb =>
                {
                    tb.HasTrigger("KntGrupyDelete_CzasModyfikacji");
                    tb.HasTrigger("KntGrupyInsertUpdate_CzasModyfikacji");
                    tb.HasTrigger("KntGrupy_DeleteHandler");
                    tb.HasTrigger("KntGrupy_HistoriaZmian_KntKarty");
                    tb.HasTrigger("KntGrupy_InsertUpdateHandler");
                    tb.HasTrigger("KntGrupy_PicoUsuniete");
                    tb.HasTrigger("KntLinkiDelete");
                    tb.HasTrigger("KntLinkiInsert");
                    tb.HasTrigger("KntLinkiUpdate");
                });

            entity.HasIndex(e => new { e.KnGGrOtyp, e.KnGGrOnumer, e.KnGGidtyp, e.KnGAkronim }, "KnGAkronim").IsUnique();

            entity.Property(e => e.KnGGidtyp).HasColumnName("KnG_GIDTyp");
            entity.Property(e => e.KnGGidnumer).HasColumnName("KnG_GIDNumer");
            entity.Property(e => e.KnGGrOtyp).HasColumnName("KnG_GrOTyp");
            entity.Property(e => e.KnGGrOnumer).HasColumnName("KnG_GrONumer");
            entity.Property(e => e.KnGAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnG_Akronim");
            entity.Property(e => e.KnGCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KnG_CzasModyfikacji");
            entity.Property(e => e.KnGCzasZalozenia)
                .HasDefaultValue(0)
                .HasColumnName("KnG_CzasZalozenia");
            entity.Property(e => e.KnGGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnG_GIDFirma");
            entity.Property(e => e.KnGGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnG_GIDLp");
            entity.Property(e => e.KnGGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnG_GrOFirma");
            entity.Property(e => e.KnGGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnG_GrOLp");
            entity.Property(e => e.KnGOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnG_OpeNumer");
            entity.Property(e => e.KnGSyncId)
                .ValueGeneratedOnAdd()
                .HasColumnName("KnG_SyncId");
        });

        modelBuilder.Entity<KntGrupyDom>(entity =>
        {
            entity.HasKey(e => new { e.KgdGidtyp, e.KgdGidnumer }).HasName("KGD_Primary");

            entity.ToTable("KntGrupyDom", "CDN", tb => tb.HasTrigger("KntGrupyDom_DeleteHandler"));

            entity.HasIndex(e => new { e.KgdGidtyp, e.KgdGidnumer, e.KgdGrOtyp, e.KgdGrOnumer }, "KGDOjciec").IsUnique();

            entity.Property(e => e.KgdGidtyp).HasColumnName("KGD_GIDTyp");
            entity.Property(e => e.KgdGidnumer).HasColumnName("KGD_GIDNumer");
            entity.Property(e => e.KgdGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KGD_GIDFirma");
            entity.Property(e => e.KgdGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KGD_GIDLp");
            entity.Property(e => e.KgdGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("KGD_GrOFirma");
            entity.Property(e => e.KgdGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KGD_GrOLp");
            entity.Property(e => e.KgdGrOnumer)
                .HasDefaultValue(0)
                .HasColumnName("KGD_GrONumer");
            entity.Property(e => e.KgdGrOtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KGD_GrOTyp");
            entity.Property(e => e.KgdKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KGD_Kod");
        });

        modelBuilder.Entity<KntKarty>(entity =>
        {
            entity.HasKey(e => e.KntGidnumer).HasName("Knt_Primary");

            entity.ToTable("KntKarty", "CDN", tb =>
                {
                    tb.HasTrigger("KntKartyAlias1_DeleteHandler");
                    tb.HasTrigger("KntKartyAlias2_DeleteHandler");
                    tb.HasTrigger("KntKartyAlias2_InsertUpdateHandler");
                    tb.HasTrigger("KntKartyAlias3_DeleteHandler");
                    tb.HasTrigger("KntKartyAlias4_DeleteHandler");
                    tb.HasTrigger("KntKartyAlias_DeleteHandler");
                    tb.HasTrigger("KntKartyAlias_InsertUpdateHandler");
                    tb.HasTrigger("KntKarty_DeleteAtrybutyHist");
                    tb.HasTrigger("KntKarty_DeleteHandler");
                    tb.HasTrigger("KntKarty_HistoriaZmian");
                    tb.HasTrigger("KntKarty_InsertUpdateHandler");
                    tb.HasTrigger("KntKarty_InsertUpdatePunkty");
                    tb.HasTrigger("KntKarty_POS");
                    tb.HasTrigger("KntKarty_SprawdzOpisAnalityczny");
                    tb.HasTrigger("KntKarty_ZmianaRabatu");
                    tb.HasTrigger("KntLastModC");
                    tb.HasTrigger("LimityKredytoweUpdateKntLimitTerminowy_PicoUsuniete");
                });

            entity.HasIndex(e => e.KntAkronim, "KntAkronim").IsUnique();

            entity.HasIndex(e => new { e.KntAkwTyp, e.KntAkwNumer }, "KntAkwizytor");

            entity.HasIndex(e => new { e.KntAkwizytor, e.KntAkronim }, "KntAkwizytorFlaga");

            entity.HasIndex(e => new { e.KntBnkTyp, e.KntBnkNumer }, "KntBank");

            entity.HasIndex(e => new { e.KntKnCnumer, e.KntKnCtyp, e.KntAkronim }, "KntCentrala");

            entity.HasIndex(e => new { e.KntEan, e.KntObcaKarta }, "KntEan");

            entity.HasIndex(e => e.KntKalendarzDst, "KntKalendarzDst");

            entity.HasIndex(e => e.KntKalendarzWys, "KntKalendarzWys");

            entity.HasIndex(e => e.KntKnGnumer, "KntKontrahentG");

            entity.HasIndex(e => new { e.KntNip, e.KntGidtyp, e.KntGidnumer }, "KntNip").IsUnique();

            entity.HasIndex(e => new { e.KntPrcTyp, e.KntPrcNumer }, "KntOpiekun");

            entity.HasIndex(e => e.KntKnPnumer, "KntPlatnik");

            entity.HasIndex(e => e.KntRegionCrm, "KntRejon");

            entity.HasIndex(e => e.KntSoundex, "KntSoundex");

            entity.HasIndex(e => e.KntSpedytor, "KntSpedytor");

            entity.HasIndex(e => e.KntTyp, "KntTyp");

            entity.Property(e => e.KntGidnumer).HasColumnName("Knt_GIDNumer");
            entity.Property(e => e.KntAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Adres");
            entity.Property(e => e.KntAdresNieAktualny)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_AdresNieAktualny");
            entity.Property(e => e.KntAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Akronim");
            entity.Property(e => e.KntAkronimFormat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_AkronimFormat");
            entity.Property(e => e.KntAktywna)
                .HasDefaultValue(0)
                .HasColumnName("Knt_Aktywna");
            entity.Property(e => e.KntAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_AkwFirma");
            entity.Property(e => e.KntAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_AkwLp");
            entity.Property(e => e.KntAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_AkwNumer");
            entity.Property(e => e.KntAkwProwizja)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("Knt_AkwProwizja");
            entity.Property(e => e.KntAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_AkwTyp");
            entity.Property(e => e.KntAkwizytor)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_Akwizytor");
            entity.Property(e => e.KntAnonim)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Anonim");
            entity.Property(e => e.KntArchiwalny)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_Archiwalny");
            entity.Property(e => e.KntAtrybut1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Atrybut1");
            entity.Property(e => e.KntAtrybut2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Atrybut2");
            entity.Property(e => e.KntAtrybut3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Atrybut3");
            entity.Property(e => e.KntAutoZatw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_AutoZatw");
            entity.Property(e => e.KntBigApfinoVycOczekiwanie)
                .HasDefaultValue(0)
                .HasColumnName("Knt_BigApfinoVycOczekiwanie");
            entity.Property(e => e.KntBigApfinoVycWynik)
                .HasDefaultValue(0)
                .HasColumnName("Knt_BigApfinoVycWynik");
            entity.Property(e => e.KntBigApfinoVycWynikData)
                .HasDefaultValue(0)
                .HasColumnName("Knt_BigApfinoVycWynikData");
            entity.Property(e => e.KntBlokadaTransakcji)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_BlokadaTransakcji");
            entity.Property(e => e.KntBlokadaZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_BlokadaZam");
            entity.Property(e => e.KntBlokadaZamTs)
                .HasDefaultValue(0)
                .HasColumnName("Knt_BlokadaZamTS");
            entity.Property(e => e.KntBnkFirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_BnkFirma");
            entity.Property(e => e.KntBnkLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_BnkLp");
            entity.Property(e => e.KntBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_BnkNumer");
            entity.Property(e => e.KntBnkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_BnkTyp");
            entity.Property(e => e.KntBranza)
                .HasDefaultValue(0)
                .HasColumnName("Knt_Branza");
            entity.Property(e => e.KntCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_CechaOpis");
            entity.Property(e => e.KntCena)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_Cena");
            entity.Property(e => e.KntCharsetAnsi)
                .HasDefaultValue((byte)238)
                .HasColumnName("Knt_CharsetANSI");
            entity.Property(e => e.KntControlling)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Controlling");
            entity.Property(e => e.KntDataDoLoj)
                .HasDefaultValue(0)
                .HasColumnName("Knt_DataDoLoj");
            entity.Property(e => e.KntDataKarty)
                .HasDefaultValue(0)
                .HasColumnName("Knt_DataKarty");
            entity.Property(e => e.KntDataOdLoj)
                .HasDefaultValue(0)
                .HasColumnName("Knt_DataOdLoj");
            entity.Property(e => e.KntDataPromocji)
                .HasDefaultValue((byte)1)
                .HasColumnName("Knt_DataPromocji");
            entity.Property(e => e.KntDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("Knt_DataUtworzenia");
            entity.Property(e => e.KntDataW)
                .HasDefaultValue(0)
                .HasColumnName("Knt_DataW");
            entity.Property(e => e.KntDataWydania)
                .HasDefaultValue(0)
                .HasColumnName("Knt_DataWydania");
            entity.Property(e => e.KntDataWygasniecia)
                .HasDefaultValue(0)
                .HasColumnName("Knt_DataWygasniecia");
            entity.Property(e => e.KntDewizowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Dewizowe");
            entity.Property(e => e.KntDokumentTozsamosci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_DokumentTozsamosci");
            entity.Property(e => e.KntDzialalnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Dzialalnosc");
            entity.Property(e => e.KntEan)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Ean");
            entity.Property(e => e.KntEfaVatAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_EFaVatAktywne");
            entity.Property(e => e.KntEfaVatDataDo)
                .HasDefaultValue(0)
                .HasColumnName("Knt_EFaVatDataDo");
            entity.Property(e => e.KntEfaVatEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_EFaVatEMail");
            entity.Property(e => e.KntEfaVatOsw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_EFaVatOsw");
            entity.Property(e => e.KntEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_EMail");
            entity.Property(e => e.KntEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_ESklep");
            entity.Property(e => e.KntExpoKraj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_ExpoKraj");
            entity.Property(e => e.KntFaVatosw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_FaVATOsw");
            entity.Property(e => e.KntFavatdata)
                .HasDefaultValue(0)
                .HasColumnName("Knt_FAVATData");
            entity.Property(e => e.KntFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Fax");
            entity.Property(e => e.KntFormaPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_FormaPl");
            entity.Property(e => e.KntFormaPlKa)
                .HasDefaultValue(0)
                .HasColumnName("Knt_FormaPlKa");
            entity.Property(e => e.KntFormaPlZak)
                .HasDefaultValue(0)
                .HasColumnName("Knt_FormaPlZak");
            entity.Property(e => e.KntFormat1)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Format1");
            entity.Property(e => e.KntFormat2)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Format2");
            entity.Property(e => e.KntFormat3)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Format3");
            entity.Property(e => e.KntFppKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_FppKod");
            entity.Property(e => e.KntFrsId)
                .HasDefaultValue(0)
                .HasColumnName("Knt_FrsID");
            entity.Property(e => e.KntGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_GIDFirma");
            entity.Property(e => e.KntGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_GIDLp");
            entity.Property(e => e.KntGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_GIDTyp");
            entity.Property(e => e.KntGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_GLN");
            entity.Property(e => e.KntGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Gmina");
            entity.Property(e => e.KntGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("Knt_GUID");
            entity.Property(e => e.KntGuiddane)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("Knt_GUIDdane");
            entity.Property(e => e.KntGuidkarta)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("Knt_GUIDKarta");
            entity.Property(e => e.KntHasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_HasloChk");
            entity.Property(e => e.KntHasloKontrahent)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_HasloKontrahent");
            entity.Property(e => e.KntKalendarzDst)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KalendarzDst");
            entity.Property(e => e.KntKalendarzWys)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KalendarzWys");
            entity.Property(e => e.KntKarFirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KarFirma");
            entity.Property(e => e.KntKarLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_KarLp");
            entity.Property(e => e.KntKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KarNumer");
            entity.Property(e => e.KntKarTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_KarTyp");
            entity.Property(e => e.KntKartaLoj)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_KartaLoj");
            entity.Property(e => e.KntKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KnAFirma");
            entity.Property(e => e.KntKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_KnALp");
            entity.Property(e => e.KntKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KnANumer");
            entity.Property(e => e.KntKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_KnATyp");
            entity.Property(e => e.KntKnCnumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KnCNumer");
            entity.Property(e => e.KntKnCtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_KnCTyp");
            entity.Property(e => e.KntKnGnumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KnGNumer");
            entity.Property(e => e.KntKnGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_KnGTyp");
            entity.Property(e => e.KntKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_KnPNumer");
            entity.Property(e => e.KntKnPparam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_KnPParam");
            entity.Property(e => e.KntKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_KnPTyp");
            entity.Property(e => e.KntKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_KodP");
            entity.Property(e => e.KntKontoDostawcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_KontoDostawcy");
            entity.Property(e => e.KntKontoOdbiorcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_KontoOdbiorcy");
            entity.Property(e => e.KntKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Kraj");
            entity.Property(e => e.KntKrajSiedziby)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_KrajSiedziby");
            entity.Property(e => e.KntKseFwyslij)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_KSeFWyslij");
            entity.Property(e => e.KntKseFzrodlowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_KSeFZrodlowy");
            entity.Property(e => e.KntKurier)
                .HasDefaultValue(0)
                .HasColumnName("Knt_Kurier");
            entity.Property(e => e.KntLastModC)
                .HasDefaultValue(0)
                .HasColumnName("Knt_LastModC");
            entity.Property(e => e.KntLastModL)
                .HasDefaultValue(0)
                .HasColumnName("Knt_LastModL");
            entity.Property(e => e.KntLastModO)
                .HasDefaultValue(0)
                .HasColumnName("Knt_LastModO");
            entity.Property(e => e.KntLastTransLockDate)
                .HasDefaultValue(0)
                .HasColumnName("Knt_LastTransLockDate");
            entity.Property(e => e.KntLimitOkres)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_LimitOkres");
            entity.Property(e => e.KntLimitPoTerminie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Knt_LimitPoTerminie");
            entity.Property(e => e.KntLimitTerminowy)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_LimitTerminowy");
            entity.Property(e => e.KntLimitWart)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Knt_LimitWart");
            entity.Property(e => e.KntMarza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Knt_Marza");
            entity.Property(e => e.KntMaxDniPoTerminie)
                .HasDefaultValue(0)
                .HasColumnName("Knt_MaxDniPoTerminie");
            entity.Property(e => e.KntMaxLimitWart)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Knt_MaxLimitWart");
            entity.Property(e => e.KntMaxTerminPlSpr)
                .HasDefaultValue(0)
                .HasColumnName("Knt_MaxTerminPlSpr");
            entity.Property(e => e.KntMaxTerminPlZak)
                .HasDefaultValue(0)
                .HasColumnName("Knt_MaxTerminPlZak");
            entity.Property(e => e.KntMetodaKasowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_MetodaKasowa");
            entity.Property(e => e.KntMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Miasto");
            entity.Property(e => e.KntModem)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Modem");
            entity.Property(e => e.KntMstwrGrupaNumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_MSTwrGrupaNumer");
            entity.Property(e => e.KntNazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Nazwa1");
            entity.Property(e => e.KntNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Nazwa2");
            entity.Property(e => e.KntNazwa3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Nazwa3");
            entity.Property(e => e.KntNieaktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Nieaktywny");
            entity.Property(e => e.KntNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Nip");
            entity.Property(e => e.KntNipE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_NipE");
            entity.Property(e => e.KntNipPrefiks)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_NipPrefiks");
            entity.Property(e => e.KntNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_NrKursu");
            entity.Property(e => e.KntNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_NrRachunku");
            entity.Property(e => e.KntNrb)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_NRB");
            entity.Property(e => e.KntNumerKarty)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_NumerKarty");
            entity.Property(e => e.KntObcaKarta)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_ObcaKarta");
            entity.Property(e => e.KntOddzialowy)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_Oddzialowy");
            entity.Property(e => e.KntOdleglosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Knt_Odleglosc");
            entity.Property(e => e.KntOpZfirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OpZFirma");
            entity.Property(e => e.KntOpZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_OpZLp");
            entity.Property(e => e.KntOpZnumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OpZNumer");
            entity.Property(e => e.KntOpZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_OpZTyp");
            entity.Property(e => e.KntOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OpeFirma");
            entity.Property(e => e.KntOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OpeFirmaM");
            entity.Property(e => e.KntOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_OpeLp");
            entity.Property(e => e.KntOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_OpeLpM");
            entity.Property(e => e.KntOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OpeNumer");
            entity.Property(e => e.KntOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OpeNumerM");
            entity.Property(e => e.KntOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_OpeTyp");
            entity.Property(e => e.KntOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_OpeTypM");
            entity.Property(e => e.KntOplataSpozSprzedaz)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OplataSpozSprzedaz");
            entity.Property(e => e.KntOplataSpozZakup)
                .HasDefaultValue(0)
                .HasColumnName("Knt_OplataSpozZakup");
            entity.Property(e => e.KntOrganWydajacy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_OrganWydajacy");
            entity.Property(e => e.KntOsoba)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_Osoba");
            entity.Property(e => e.KntOutlookUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_OutlookUrl");
            entity.Property(e => e.KntPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Pesel");
            entity.Property(e => e.KntPin)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_PIN");
            entity.Property(e => e.KntPlatnikVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_PlatnikVat");
            entity.Property(e => e.KntPlatnoscKaucji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_PlatnoscKaucji");
            entity.Property(e => e.KntPodatnikiemNabywca)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_PodatnikiemNabywca");
            entity.Property(e => e.KntPodzialPlat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_PodzialPlat");
            entity.Property(e => e.KntPojedynczeDokDoZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_PojedynczeDokDoZam");
            entity.Property(e => e.KntPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Powiat");
            entity.Property(e => e.KntPowiazany)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Powiazany");
            entity.Property(e => e.KntPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_PrcFirma");
            entity.Property(e => e.KntPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_PrcLp");
            entity.Property(e => e.KntPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_PrcNumer");
            entity.Property(e => e.KntPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_PrcTyp");
            entity.Property(e => e.KntPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("Knt_Priorytet");
            entity.Property(e => e.KntPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_PriorytetRez");
            entity.Property(e => e.KntProcTrnJpk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_ProcTrnJpk");
            entity.Property(e => e.KntPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("Knt_Punkty");
            entity.Property(e => e.KntPunktyKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Knt_PunktyKorekta");
            entity.Property(e => e.KntPunktyNalicz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("Knt_PunktyNalicz");
            entity.Property(e => e.KntPunktyOdebr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("Knt_PunktyOdebr");
            entity.Property(e => e.KntRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Knt_Rabat");
            entity.Property(e => e.KntRegionCrm)
                .HasDefaultValue(0)
                .HasColumnName("Knt_RegionCRM");
            entity.Property(e => e.KntRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Regon");
            entity.Property(e => e.KntRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("Knt_Rodzaj");
            entity.Property(e => e.KntRolaPartnera)
                .HasDefaultValue(0)
                .HasColumnName("Knt_RolaPartnera");
            entity.Property(e => e.KntRolnikRyczaltowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_RolnikRyczaltowy");
            entity.Property(e => e.KntSeriaFa)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_SeriaFa");
            entity.Property(e => e.KntSoundex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Soundex");
            entity.Property(e => e.KntSpTerminPlRk)
                .HasDefaultValue(0)
                .HasColumnName("Knt_SpTerminPlRK");
            entity.Property(e => e.KntSpTerminPlSpr)
                .HasDefaultValue(0)
                .HasColumnName("Knt_SpTerminPlSpr");
            entity.Property(e => e.KntSpTerminPlZak)
                .HasDefaultValue(0)
                .HasColumnName("Knt_SpTerminPlZak");
            entity.Property(e => e.KntSpedytor)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Spedytor");
            entity.Property(e => e.KntSplitPayment)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_SplitPayment");
            entity.Property(e => e.KntSposobDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_SposobDostawy");
            entity.Property(e => e.KntStanPostep)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_StanPostep");
            entity.Property(e => e.KntStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Status");
            entity.Property(e => e.KntSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Symbol");
            entity.Property(e => e.KntTelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Telefon1");
            entity.Property(e => e.KntTelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Telefon2");
            entity.Property(e => e.KntTelex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Telex");
            entity.Property(e => e.KntTerminPlKa)
                .HasDefaultValue(0)
                .HasColumnName("Knt_TerminPlKa");
            entity.Property(e => e.KntTerminPlZak)
                .HasDefaultValue(0)
                .HasColumnName("Knt_TerminPlZak");
            entity.Property(e => e.KntTerminRozliczeniaKaucji)
                .HasDefaultValue(0)
                .HasColumnName("Knt_TerminRozliczeniaKaucji");
            entity.Property(e => e.KntTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Typ");
            entity.Property(e => e.KntTypDok)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_TypDok");
            entity.Property(e => e.KntTypDokZs)
                .HasDefaultValue(0)
                .HasColumnName("Knt_TypDokZS");
            entity.Property(e => e.KntTypDokZz)
                .HasDefaultValue(0)
                .HasColumnName("Knt_TypDokZZ");
            entity.Property(e => e.KntTypKarty)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_TypKarty");
            entity.Property(e => e.KntUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Ulica");
            entity.Property(e => e.KntUmowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Umowa");
            entity.Property(e => e.KntUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_URL");
            entity.Property(e => e.KntVatDataOdmowy)
                .HasDefaultValue(0)
                .HasColumnName("Knt_VatDataOdmowy");
            entity.Property(e => e.KntVatDataPrzywrocenia)
                .HasDefaultValue(0)
                .HasColumnName("Knt_VatDataPrzywrocenia");
            entity.Property(e => e.KntVatDataRejestracji)
                .HasDefaultValue(0)
                .HasColumnName("Knt_VatDataRejestracji");
            entity.Property(e => e.KntVatDataUsuniecia)
                .HasDefaultValue(0)
                .HasColumnName("Knt_VatDataUsuniecia");
            entity.Property(e => e.KntVatWalSys)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_VatWalSys");
            entity.Property(e => e.KntWartosc1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Wartosc1");
            entity.Property(e => e.KntWartosc2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Wartosc2");
            entity.Property(e => e.KntWartosc3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Wartosc3");
            entity.Property(e => e.KntWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Knt_Wojewodztwo");
            entity.Property(e => e.KntWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_Wsk");
            entity.Property(e => e.KntWsto)
                .HasDefaultValue((byte)0)
                .HasColumnName("Knt_WSTO");
            entity.Property(e => e.KntZrodlo)
                .HasDefaultValue(0)
                .HasColumnName("Knt_Zrodlo");
            entity.Property(e => e.KntZtrFirma)
                .HasDefaultValue(0)
                .HasColumnName("Knt_ZTrFirma");
            entity.Property(e => e.KntZtrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_ZTrLp");
            entity.Property(e => e.KntZtrNumer)
                .HasDefaultValue(0)
                .HasColumnName("Knt_ZTrNumer");
            entity.Property(e => e.KntZtrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Knt_ZTrTyp");
        });

        modelBuilder.Entity<KntKody>(entity =>
        {
            entity.HasKey(e => e.KnPId).HasName("KnP_Primary");

            entity.ToTable("KntKody", "CDN", tb =>
                {
                    tb.HasTrigger("KntKody_NazwyMiastTR");
                    tb.HasTrigger("KntKody_ZmianaRejonu");
                });

            entity.HasIndex(e => new { e.KnPKodP, e.KnPMiasto }, "KnPKodP").IsUnique();

            entity.HasIndex(e => new { e.KnPMiasto, e.KnPKodP }, "KnPMiasto").IsUnique();

            entity.HasIndex(e => e.KnPRegion, "KnPRegion");

            entity.Property(e => e.KnPId).HasColumnName("KnP_Id");
            entity.Property(e => e.KnPDlugGeog)
                .HasDefaultValue(0)
                .HasColumnName("KnP_DlugGeog");
            entity.Property(e => e.KnPGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnP_Gmina");
            entity.Property(e => e.KnPKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnP_KodP");
            entity.Property(e => e.KnPKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnP_Kraj");
            entity.Property(e => e.KnPMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnP_Miasto");
            entity.Property(e => e.KnPPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnP_Powiat");
            entity.Property(e => e.KnPRegion)
                .HasDefaultValue(0)
                .HasColumnName("KnP_Region");
            entity.Property(e => e.KnPSzerGeog)
                .HasDefaultValue(0)
                .HasColumnName("KnP_SzerGeog");
            entity.Property(e => e.KnPWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnP_Wojewodztwo");

            entity.HasMany(d => d.KkrRejons).WithMany(p => p.KkrKnPs)
                .UsingEntity<Dictionary<string, object>>(
                    "KnPrejony",
                    r => r.HasOne<Rejony>().WithMany()
                        .HasForeignKey("KkrRejon")
                        .HasConstraintName("FK_KKRRejon"),
                    l => l.HasOne<KntKody>().WithMany()
                        .HasForeignKey("KkrKnPid")
                        .HasConstraintName("FK_KKRKodP"),
                    j =>
                    {
                        j.HasKey("KkrKnPid", "KkrRejon").HasName("KKR_Primary");
                        j.ToTable("KnPRejony", "CDN");
                        j.HasIndex(new[] { "KkrKnPid" }, "KKRKodP");
                        j.HasIndex(new[] { "KkrRejon" }, "KKRRejon");
                        j.IndexerProperty<int>("KkrKnPid").HasColumnName("KKR_KnPId");
                        j.IndexerProperty<int>("KkrRejon").HasColumnName("KKR_Rejon");
                    });
        });

        modelBuilder.Entity<KntKoncesje>(entity =>
        {
            entity.HasKey(e => e.KkoId).HasName("KKo_Primary");

            entity.ToTable("KntKoncesje", "CDN", tb => tb.HasTrigger("KntKoncesje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KkoKntNumer, e.KkoKntTyp, e.KkoKoncesja }, "KKoKntKoncesja").IsUnique();

            entity.HasIndex(e => e.KkoKoncesja, "KKoKoncesja");

            entity.Property(e => e.KkoId).HasColumnName("KKo_Id");
            entity.Property(e => e.KkoCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KKo_CzasModyfikacji");
            entity.Property(e => e.KkoCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("KKo_CzasUtworzenia");
            entity.Property(e => e.KkoKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("KKo_KntNumer");
            entity.Property(e => e.KkoKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KKo_KntTyp");
            entity.Property(e => e.KkoKoncesja)
                .HasDefaultValue(0)
                .HasColumnName("KKo_Koncesja");
            entity.Property(e => e.KkoOpeModyfikowal)
                .HasDefaultValue(0)
                .HasColumnName("KKo_OpeModyfikowal");
            entity.Property(e => e.KkoOpeUtworzyl)
                .HasDefaultValue(0)
                .HasColumnName("KKo_OpeUtworzyl");
            entity.Property(e => e.KkoWaznaDo)
                .HasDefaultValue(0)
                .HasColumnName("KKo_WaznaDo");
        });

        modelBuilder.Entity<KntKontakty>(entity =>
        {
            entity.HasKey(e => new { e.KnKKntTyp, e.KnKKntNumer, e.KnKKntLp }).HasName("KnK_Primary");

            entity.ToTable("KntKontakty", "CDN", tb => tb.HasTrigger("KntKontakty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KnKOpeTyp, e.KnKOpeNumer }, "KnKOperator");

            entity.HasIndex(e => new { e.KnKZakonczone, e.KnKTermin, e.KnKPriorytet }, "KnKTermin");

            entity.Property(e => e.KnKKntTyp).HasColumnName("KnK_KntTyp");
            entity.Property(e => e.KnKKntNumer).HasColumnName("KnK_KntNumer");
            entity.Property(e => e.KnKKntLp).HasColumnName("KnK_KntLp");
            entity.Property(e => e.KnKKnSfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnK_KnSFirma");
            entity.Property(e => e.KnKKnSlp)
                .HasDefaultValue(0)
                .HasColumnName("KnK_KnSLp");
            entity.Property(e => e.KnKKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("KnK_KnSNumer");
            entity.Property(e => e.KnKKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnK_KnSTyp");
            entity.Property(e => e.KnKKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnK_KntFirma");
            entity.Property(e => e.KnKKontaktJc)
                .HasDefaultValue((byte)1)
                .HasColumnName("KnK_KontaktJC");
            entity.Property(e => e.KnKKontaktZa)
                .HasDefaultValue((short)0)
                .HasColumnName("KnK_KontaktZa");
            entity.Property(e => e.KnKLicznik)
                .HasDefaultValue((short)1)
                .HasColumnName("KnK_Licznik");
            entity.Property(e => e.KnKNotatki)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnK_Notatki");
            entity.Property(e => e.KnKOkresowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnK_Okresowy");
            entity.Property(e => e.KnKOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnK_OpeFirma");
            entity.Property(e => e.KnKOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnK_OpeLp");
            entity.Property(e => e.KnKOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnK_OpeNumer");
            entity.Property(e => e.KnKOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnK_OpeTyp");
            entity.Property(e => e.KnKPriorytet)
                .HasDefaultValue((short)1)
                .HasColumnName("KnK_Priorytet");
            entity.Property(e => e.KnKTermin)
                .HasDefaultValue(0)
                .HasColumnName("KnK_Termin");
            entity.Property(e => e.KnKZakonczone)
                .HasDefaultValue((short)0)
                .HasColumnName("KnK_Zakonczone");

            entity.HasOne(d => d.KnKOpeNumerNavigation).WithMany(p => p.KntKontakties)
                .HasForeignKey(d => d.KnKOpeNumer)
                .HasConstraintName("FK_KnKOperator");
        });

        modelBuilder.Entity<KntKontum>(entity =>
        {
            entity.HasKey(e => new { e.KktKntTyp, e.KktKntNumer, e.KktOkresId, e.KktSmkid }).HasName("KKT_Primary");

            entity.ToTable("KntKonta", "CDN", tb =>
                {
                    tb.HasTrigger("KntKonta_AktTozsamych");
                    tb.HasTrigger("KntKonta_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.KktSmkid, "KKTSymbol");

            entity.HasIndex(e => e.KktKksnumer, "KktKksNumer");

            entity.Property(e => e.KktKntTyp).HasColumnName("KKT_KntTyp");
            entity.Property(e => e.KktKntNumer).HasColumnName("KKT_KntNumer");
            entity.Property(e => e.KktOkresId).HasColumnName("KKT_OkresID");
            entity.Property(e => e.KktSmkid).HasColumnName("KKT_SMKID");
            entity.Property(e => e.KktKksnumer)
                .HasDefaultValue(0)
                .HasColumnName("KKT_KKSNumer");
            entity.Property(e => e.KktKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKT_Konto");
            entity.Property(e => e.KktZalozKonto)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKT_ZalozKonto");

            entity.HasOne(d => d.KktSmk).WithMany(p => p.KntKonta)
                .HasForeignKey(d => d.KktSmkid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KKTSymbol");
        });

        modelBuilder.Entity<KntLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KNT_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_KNT_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<KntLimity>(entity =>
        {
            entity.HasKey(e => new { e.KlsKntNumer, e.KlsFrsId }).HasName("KLS_Primary");

            entity.ToTable("KntLimityS", "CDN", tb =>
                {
                    tb.HasTrigger("KntLimityS_InsertUpdateHandler");
                    tb.HasTrigger("LimityKredytoweAkw_PicoUsuniete");
                });

            entity.HasIndex(e => e.KlsFrsId, "KlsFrs");

            entity.Property(e => e.KlsKntNumer).HasColumnName("KLS_KntNumer");
            entity.Property(e => e.KlsFrsId).HasColumnName("KLS_FrsID");
            entity.Property(e => e.KlsKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KLS_KntFirma");
            entity.Property(e => e.KlsKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KLS_KntLp");
            entity.Property(e => e.KlsKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KLS_KntTyp");
            entity.Property(e => e.KlsKwotaLimitu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KLS_KwotaLimitu");

            entity.HasOne(d => d.KlsFrs).WithMany(p => p.KntLimities)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.KlsFrsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KlsFrs");
        });

        modelBuilder.Entity<KntLimityK>(entity =>
        {
            entity.HasKey(e => e.KlkId).HasName("KLK_Primary");

            entity.ToTable("KntLimityK", "CDN", tb =>
                {
                    tb.HasTrigger("KntLimityK_HistoriaZmian");
                    tb.HasTrigger("KntLimityK_InsertUpdateHandler");
                    tb.HasTrigger("LimityKredytoweKnt_PicoUsuniete");
                });

            entity.HasIndex(e => new { e.KlkKntTyp, e.KlkKntNumer }, "KlkKnt");

            entity.Property(e => e.KlkId).HasColumnName("KLK_Id");
            entity.Property(e => e.KlkCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KLK_CzasModyfikacji");
            entity.Property(e => e.KlkCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("KLK_CzasUtworzenia");
            entity.Property(e => e.KlkDataDo)
                .HasDefaultValue(0)
                .HasColumnName("KLK_DataDo");
            entity.Property(e => e.KlkDataOd)
                .HasDefaultValue(0)
                .HasColumnName("KLK_DataOd");
            entity.Property(e => e.KlkKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("KLK_KntNumer");
            entity.Property(e => e.KlkKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KLK_KntTyp");
            entity.Property(e => e.KlkKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("KLK_KursL");
            entity.Property(e => e.KlkKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("KLK_KursM");
            entity.Property(e => e.KlkLimitPoTerminie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KLK_LimitPoTerminie");
            entity.Property(e => e.KlkMaxLimitWart)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KLK_MaxLimitWart");
            entity.Property(e => e.KlkNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("KLK_NrKursu");
            entity.Property(e => e.KlkOpeModyfikowal)
                .HasDefaultValue(0)
                .HasColumnName("KLK_OpeModyfikowal");
            entity.Property(e => e.KlkOpeUtworzyl)
                .HasDefaultValue(0)
                .HasColumnName("KLK_OpeUtworzyl");
            entity.Property(e => e.KlkPrzeliczajWg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLK_PrzeliczajWg");
            entity.Property(e => e.KlkPrzeliczajWgTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KLK_PrzeliczajWgTyp");
            entity.Property(e => e.KlkWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLK_Waluta");
        });

        modelBuilder.Entity<KntLinki>(entity =>
        {
            entity.HasKey(e => new { e.KnLGidtyp, e.KnLGidnumer, e.KnLGrOtyp, e.KnLGrOnumer }).HasName("KnL_Primary");

            entity.ToTable("KntLinki", "CDN");

            entity.Property(e => e.KnLGidtyp).HasColumnName("KnL_GIDTyp");
            entity.Property(e => e.KnLGidnumer).HasColumnName("KnL_GIDNumer");
            entity.Property(e => e.KnLGrOtyp).HasColumnName("KnL_GrOTyp");
            entity.Property(e => e.KnLGrOnumer).HasColumnName("KnL_GrONumer");
            entity.Property(e => e.KnLGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnL_GIDFirma");
            entity.Property(e => e.KnLGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnL_GIDLp");
            entity.Property(e => e.KnLGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnL_GrOFirma");
            entity.Property(e => e.KnLGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnL_GrOLp");
            entity.Property(e => e.KnLGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KnL_GUID");
            entity.Property(e => e.KnLId)
                .ValueGeneratedOnAdd()
                .HasColumnName("KnL_ID");
            entity.Property(e => e.KnLLiczbaPowtorzen)
                .HasDefaultValue((short)0)
                .HasColumnName("KnL_LiczbaPowtorzen");
            entity.Property(e => e.KnLLisc)
                .HasDefaultValue((short)0)
                .HasColumnName("KnL_Lisc");
            entity.Property(e => e.KnLTstampDataMod)
                .HasDefaultValue(0)
                .HasColumnName("KnL_TStampDataMod");
        });

        modelBuilder.Entity<KntMagazyny>(entity =>
        {
            entity.HasKey(e => new { e.KnMKntTyp, e.KnMKntNumer, e.KnMMagNumer }).HasName("KnM_Primary");

            entity.ToTable("KntMagazyny", "CDN", tb =>
                {
                    tb.HasTrigger("KntMagazynyAlias_DeleteHandler");
                    tb.HasTrigger("KntMagazyny_DeleteHandler");
                    tb.HasTrigger("KntMagazyny_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.KnMKntTyp, e.KnMKntNumer }, "KnMKontrah");

            entity.HasIndex(e => e.KnMMagNumer, "KnMMagazyn");

            entity.Property(e => e.KnMKntTyp).HasColumnName("KnM_KntTyp");
            entity.Property(e => e.KnMKntNumer).HasColumnName("KnM_KntNumer");
            entity.Property(e => e.KnMMagNumer).HasColumnName("KnM_MagNumer");
            entity.Property(e => e.KnMMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnM_MobSpr");
            entity.Property(e => e.KnMPulpitKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnM_PulpitKnt");

            entity.HasOne(d => d.KnMMagNumerNavigation).WithMany(p => p.KntMagazynies)
                .HasForeignKey(d => d.KnMMagNumer)
                .HasConstraintName("FK_KnMMagazyn");
        });

        modelBuilder.Entity<KntOpiekun>(entity =>
        {
            entity.HasKey(e => new { e.KtOKntNumer, e.KtOKntTyp, e.KtOKntLp }).HasName("KtO_Primary");

            entity.ToTable("KntOpiekun", "CDN", tb =>
                {
                    tb.HasTrigger("KntOpiekun_HistoriaZmian");
                    tb.HasTrigger("KntOpiekun_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.KtOKntNumer, e.KtOKntTyp }, "KtOKnt");

            entity.Property(e => e.KtOKntNumer).HasColumnName("KtO_KntNumer");
            entity.Property(e => e.KtOKntTyp).HasColumnName("KtO_KntTyp");
            entity.Property(e => e.KtOKntLp).HasColumnName("KtO_KntLp");
            entity.Property(e => e.KtOCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KtO_CzasModyfikacji");
            entity.Property(e => e.KtOCzasPrzypisania)
                .HasDefaultValue(0)
                .HasColumnName("KtO_CzasPrzypisania");
            entity.Property(e => e.KtODataDo).HasColumnName("KtO_DataDo");
            entity.Property(e => e.KtODataOd).HasColumnName("KtO_DataOd");
            entity.Property(e => e.KtOGlowny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KtO_Glowny");
            entity.Property(e => e.KtOOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("KtO_OpeFirma");
            entity.Property(e => e.KtOOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("KtO_OpeFirmaM");
            entity.Property(e => e.KtOOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KtO_OpeLp");
            entity.Property(e => e.KtOOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("KtO_OpeLpM");
            entity.Property(e => e.KtOOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KtO_OpeNumer");
            entity.Property(e => e.KtOOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("KtO_OpeNumerM");
            entity.Property(e => e.KtOOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KtO_OpeTyp");
            entity.Property(e => e.KtOOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("KtO_OpeTypM");
            entity.Property(e => e.KtOPrcNumer).HasColumnName("KtO_PrcNumer");
            entity.Property(e => e.KtOUwagi)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KtO_Uwagi");
        });

        modelBuilder.Entity<KntOpisy>(entity =>
        {
            entity.HasKey(e => new { e.KnOKntNumer, e.KnOKntLp }).HasName("KnO_Primary");

            entity.ToTable("KntOpisy", "CDN", tb => tb.HasTrigger("KntOpisy_InsertUpdateHandler"));

            entity.Property(e => e.KnOKntNumer).HasColumnName("KnO_KntNumer");
            entity.Property(e => e.KnOKntLp).HasColumnName("KnO_KntLp");
            entity.Property(e => e.KnOCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KnO_CzasModyfikacji");
            entity.Property(e => e.KnOKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnO_KntFirma");
            entity.Property(e => e.KnOKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnO_KntTyp");
            entity.Property(e => e.KnOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnO_Opis");
            entity.Property(e => e.KnOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnO_Typ");
        });

        modelBuilder.Entity<KntOsoby>(entity =>
        {
            entity.HasKey(e => new { e.KnSKntTyp, e.KnSKntNumer, e.KnSKntLp }).HasName("KnS_Primary");

            entity.ToTable("KntOsoby", "CDN", tb =>
                {
                    tb.HasTrigger("KntOsobyAlias1_DeleteHandler");
                    tb.HasTrigger("KntOsobyAlias2_DeleteHandler");
                    tb.HasTrigger("KntOsobyAlias_DeleteHandler");
                    tb.HasTrigger("KntOsoby_DeleteHandler");
                    tb.HasTrigger("KntOsoby_HistoriaZmian");
                    tb.HasTrigger("KntOsoby_InsertUpdateHandler");
                    tb.HasTrigger("KntOsoby_PozycjaDelete");
                });

            entity.HasIndex(e => e.KnSSyncId, "KnSSyncID");

            entity.Property(e => e.KnSKntTyp).HasColumnName("KnS_KntTyp");
            entity.Property(e => e.KnSKntNumer).HasColumnName("KnS_KntNumer");
            entity.Property(e => e.KnSKntLp).HasColumnName("KnS_KntLp");
            entity.Property(e => e.KnSAdminEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_AdminESklep");
            entity.Property(e => e.KnSAdresId)
                .HasDefaultValue(0)
                .HasColumnName("KnS_AdresId");
            entity.Property(e => e.KnSAnonim)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_Anonim");
            entity.Property(e => e.KnSArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_Archiwalny");
            entity.Property(e => e.KnSCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KnS_CzasModyfikacji");
            entity.Property(e => e.KnSCzyEmailUpom)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_CzyEMailUpom");
            entity.Property(e => e.KnSDzial)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_Dzial");
            entity.Property(e => e.KnSEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_EMail");
            entity.Property(e => e.KnSEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_ESklep");
            entity.Property(e => e.KnSFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_Fax");
            entity.Property(e => e.KnSGuid)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KnS_GUID");
            entity.Property(e => e.KnSGuid2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KnS_GUID2");
            entity.Property(e => e.KnSHasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_HasloChk");
            entity.Property(e => e.KnSHasloOsoby)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_HasloOsoby");
            entity.Property(e => e.KnSKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnS_KntFirma");
            entity.Property(e => e.KnSNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_Nazwa");
            entity.Property(e => e.KnSNotatki)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_Notatki");
            entity.Property(e => e.KnSOdpWindykacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_OdpWindykacja");
            entity.Property(e => e.KnSPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("KnS_Pozycja");
            entity.Property(e => e.KnSPreferowanyJezyk)
                .HasDefaultValue(0)
                .HasColumnName("KnS_PreferowanyJezyk");
            entity.Property(e => e.KnSRolaDecyzyjna)
                .HasDefaultValue(0)
                .HasColumnName("KnS_RolaDecyzyjna");
            entity.Property(e => e.KnSStanowisko)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_Stanowisko");
            entity.Property(e => e.KnSSyncId)
                .ValueGeneratedOnAdd()
                .HasColumnName("KnS_SyncID");
            entity.Property(e => e.KnSTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_Telefon");
            entity.Property(e => e.KnSTelefonK)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_TelefonK");
            entity.Property(e => e.KnSTytul)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnS_Tytul");
            entity.Property(e => e.KnSUpoDoK)
                .HasDefaultValue((short)0)
                .HasColumnName("KnS_UpoDoK");
            entity.Property(e => e.KnSUpowazniona)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_Upowazniona");
            entity.Property(e => e.KnSUpowaznionaZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnS_UpowaznionaZam");
        });

        modelBuilder.Entity<KntOsobyKomunikatory>(entity =>
        {
            entity.HasKey(e => e.KoKId).HasName("KoK_Primary");

            entity.ToTable("KntOsobyKomunikatory", "CDN", tb => tb.HasTrigger("KntOsobyKomunikatory_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KoKKnSnumer, e.KoKKnSlp, e.KoKRodzajId }, "KoKOsobaRodzaj");

            entity.HasIndex(e => e.KoKRodzajId, "KoKRodzaj");

            entity.Property(e => e.KoKId).HasColumnName("KoK_ID");
            entity.Property(e => e.KoKKnSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KoK_KnSLp");
            entity.Property(e => e.KoKKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("KoK_KnSNumer");
            entity.Property(e => e.KoKKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KoK_KnSTyp");
            entity.Property(e => e.KoKNumer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KoK_Numer");
            entity.Property(e => e.KoKRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("KoK_RodzajId");
        });

        modelBuilder.Entity<KntOsobyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KntOsobyView", "CDN");

            entity.Property(e => e.KnSvAdresId).HasColumnName("KnSV_AdresId");
            entity.Property(e => e.KnSvArchiwalny).HasColumnName("KnSV_Archiwalny");
            entity.Property(e => e.KnSvEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("KnSV_EMail");
            entity.Property(e => e.KnSvKntLp).HasColumnName("KnSV_KntLp");
            entity.Property(e => e.KnSvKntNumer).HasColumnName("KnSV_KntNumer");
            entity.Property(e => e.KnSvKntTyp).HasColumnName("KnSV_KntTyp");
            entity.Property(e => e.KnSvNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("KnSV_Nazwa");
            entity.Property(e => e.KnSvPozycja).HasColumnName("KnSV_Pozycja");
            entity.Property(e => e.KnSvStanowisko)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("KnSV_Stanowisko");
            entity.Property(e => e.KnSvTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("KnSV_Telefon");
            entity.Property(e => e.KnSvTelefonK)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("KnSV_TelefonK");
            entity.Property(e => e.KnSvZewnetrznyId).HasColumnName("KnSV_ZewnetrznyId");
            entity.Property(e => e.KnSvZrodlo).HasColumnName("KnSV_Zrodlo");
        });

        modelBuilder.Entity<KntPromocje>(entity =>
        {
            entity.HasKey(e => e.KprId).HasName("KPR_Primary");

            entity.ToTable("KntPromocje", "CDN", tb =>
                {
                    tb.HasTrigger("KntPromocje_HistoriaZmian");
                    tb.HasTrigger("KntPromocje_InsertUpdateHandler");
                    tb.HasTrigger("KntPromocje_UsuwaniePrmKnu");
                });

            entity.HasIndex(e => new { e.KprKntTyp, e.KprKntNumer, e.KprKngTyp, e.KprKngNumer, e.KprPrmId }, "KprKontrahent").IsUnique();

            entity.HasIndex(e => e.KprPrmId, "KprPrm");

            entity.Property(e => e.KprId).HasColumnName("KPR_Id");
            entity.Property(e => e.KprGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KPR_GUID");
            entity.Property(e => e.KprKngFirma)
                .HasDefaultValue(0)
                .HasColumnName("KPR_KngFirma");
            entity.Property(e => e.KprKngLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPR_KngLp");
            entity.Property(e => e.KprKngNumer)
                .HasDefaultValue(0)
                .HasColumnName("KPR_KngNumer");
            entity.Property(e => e.KprKngTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPR_KngTyp");
            entity.Property(e => e.KprKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KPR_KntFirma");
            entity.Property(e => e.KprKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPR_KntLp");
            entity.Property(e => e.KprKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("KPR_KntNumer");
            entity.Property(e => e.KprKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPR_KntTyp");
            entity.Property(e => e.KprOkresTransakcjiDo)
                .HasDefaultValue(0)
                .HasColumnName("KPR_OkresTransakcjiDo");
            entity.Property(e => e.KprOkresTransakcjiOd)
                .HasDefaultValue(0)
                .HasColumnName("KPR_OkresTransakcjiOd");
            entity.Property(e => e.KprPrmId)
                .HasDefaultValue(0)
                .HasColumnName("KPR_PrmId");
            entity.Property(e => e.KprPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("KPR_Punkty");
            entity.Property(e => e.KprTyp)
                .HasDefaultValue(0)
                .HasColumnName("KPR_Typ");
            entity.Property(e => e.KprWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KPR_Wartosc");

            entity.HasOne(d => d.KprPrm).WithMany(p => p.KntPromocjes)
                .HasForeignKey(d => d.KprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KprPrm");
        });

        modelBuilder.Entity<KntRejestr>(entity =>
        {
            entity.HasKey(e => e.KrjId).HasName("KRj_Primary");

            entity.ToTable("KntRejestr", "CDN", tb => tb.HasTrigger("KntRejestr_InsertUpdateHandler"));

            entity.HasIndex(e => e.KrjKarNumer, "KRjKar");

            entity.HasIndex(e => new { e.KrjObiNumer, e.KrjObiTyp }, "KRjObi");

            entity.Property(e => e.KrjId).HasColumnName("KRj_Id");
            entity.Property(e => e.KrjCzasArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("KRj_CzasArchiwizacji");
            entity.Property(e => e.KrjKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("KRj_KarNumer");
            entity.Property(e => e.KrjNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRj_NrRachunku");
            entity.Property(e => e.KrjObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("KRj_ObiFirma");
            entity.Property(e => e.KrjObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KRj_ObiLp");
            entity.Property(e => e.KrjObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("KRj_ObiNumer");
            entity.Property(e => e.KrjObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KRj_ObiTyp");
            entity.Property(e => e.KrjPrzypiszDoPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRj_PrzypiszDoPlatnosci");
            entity.Property(e => e.KrjTypRejestru)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRj_TypRejestru");
            entity.Property(e => e.KrjUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRj_Uwagi");
            entity.Property(e => e.KrjWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRj_Waluta");
        });

        modelBuilder.Entity<KntRejony>(entity =>
        {
            entity.HasKey(e => new { e.KnRKntTyp, e.KnRKntNumer, e.KnRRejon }).HasName("KnR_Primary");

            entity.ToTable("KntRejony", "CDN");

            entity.HasIndex(e => new { e.KnRKntTyp, e.KnRKntNumer }, "KnRKnt");

            entity.HasIndex(e => e.KnRKntNumer, "KnRKontrah");

            entity.HasIndex(e => e.KnRRejon, "KnRRejon");

            entity.Property(e => e.KnRKntTyp).HasColumnName("KnR_KntTyp");
            entity.Property(e => e.KnRKntNumer).HasColumnName("KnR_KntNumer");
            entity.Property(e => e.KnRRejon).HasColumnName("KnR_Rejon");
            entity.Property(e => e.KnRCzasPrzypisania)
                .HasDefaultValue(0)
                .HasColumnName("KnR_CzasPrzypisania");

            entity.HasOne(d => d.KnRKntNumerNavigation).WithMany(p => p.KntRejonies)
                .HasForeignKey(d => d.KnRKntNumer)
                .HasConstraintName("FK_KnRKontrah");

            entity.HasOne(d => d.KnRRejonNavigation).WithMany(p => p.KntRejonies)
                .HasForeignKey(d => d.KnRRejon)
                .HasConstraintName("FK_KnRRejon");
        });

        modelBuilder.Entity<KntTowary>(entity =>
        {
            entity.HasKey(e => new { e.KtwKntTyp, e.KtwKntNumer, e.KtwTwrTyp, e.KtwTwrNumer }).HasName("KTw_Primary");

            entity.ToTable("KntTowary", "CDN", tb => tb.HasTrigger("KntTowary_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KtwTwrTyp, e.KtwTwrNumer, e.KtwIlosc, e.KtwTstamp }, "KTwIlosc");

            entity.HasIndex(e => new { e.KtwKntTyp, e.KtwKntNumer, e.KtwTstamp }, "KTwKontrah");

            entity.Property(e => e.KtwKntTyp).HasColumnName("KTw_KntTyp");
            entity.Property(e => e.KtwKntNumer).HasColumnName("KTw_KntNumer");
            entity.Property(e => e.KtwTwrTyp).HasColumnName("KTw_TwrTyp");
            entity.Property(e => e.KtwTwrNumer).HasColumnName("KTw_TwrNumer");
            entity.Property(e => e.KtwIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("KTw_Ilosc");
            entity.Property(e => e.KtwKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KTw_KntFirma");
            entity.Property(e => e.KtwKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KTw_KntLp");
            entity.Property(e => e.KtwTstamp)
                .HasDefaultValue(0)
                .HasColumnName("KTw_TStamp");
            entity.Property(e => e.KtwTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("KTw_TwrFirma");
            entity.Property(e => e.KtwTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KTw_TwrLp");

            entity.HasOne(d => d.KtwTwrNumerNavigation).WithMany(p => p.KntTowaries)
                .HasForeignKey(d => d.KtwTwrNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KTwIlosc");
        });

        modelBuilder.Entity<KntUpusty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("KntUpusty", "CDN");

            entity.Property(e => e.KnUFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("KnU_FlagaNB");
            entity.Property(e => e.KnUKntFirma).HasColumnName("KnU_KntFirma");
            entity.Property(e => e.KnUKntLp).HasColumnName("KnU_KntLp");
            entity.Property(e => e.KnUKntNumer).HasColumnName("KnU_KntNumer");
            entity.Property(e => e.KnUKntTyp).HasColumnName("KnU_KntTyp");
            entity.Property(e => e.KnUNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("KnU_Notatki");
            entity.Property(e => e.KnUNrKursu).HasColumnName("KnU_NrKursu");
            entity.Property(e => e.KnUSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("KnU_Symbol");
            entity.Property(e => e.KnUTprid).HasColumnName("KnU_TPRID");
            entity.Property(e => e.KnUTwgFirma).HasColumnName("KnU_TwgFirma");
            entity.Property(e => e.KnUTwgLp).HasColumnName("KnU_TwgLp");
            entity.Property(e => e.KnUTwgNumer).HasColumnName("KnU_TwgNumer");
            entity.Property(e => e.KnUTwgTyp).HasColumnName("KnU_TwgTyp");
            entity.Property(e => e.KnUTyp).HasColumnName("KnU_Typ");
            entity.Property(e => e.KnUUpust)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("KnU_Upust");
            entity.Property(e => e.KnUUpustWzor)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("KnU_UpustWzor");
        });

        modelBuilder.Entity<KntVat>(entity =>
        {
            entity.HasKey(e => e.KnVNumer).HasName("KnV_Primary");

            entity.ToTable("KntVAT", "CDN");

            entity.HasIndex(e => new { e.KnVKnAnumer, e.KnVNip, e.KnVData }, "KnVAdres");

            entity.HasIndex(e => new { e.KnVKnAnumer, e.KnVVatwynik, e.KnVData }, "KnVWynik");

            entity.Property(e => e.KnVNumer).HasColumnName("KnV_Numer");
            entity.Property(e => e.KnVData)
                .HasDefaultValue(0)
                .HasColumnName("KnV_Data");
            entity.Property(e => e.KnVKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnV_KnAFirma");
            entity.Property(e => e.KnVKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnV_KnALp");
            entity.Property(e => e.KnVKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("KnV_KnANumer");
            entity.Property(e => e.KnVKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnV_KnATyp");
            entity.Property(e => e.KnVNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnV_Nip");
            entity.Property(e => e.KnVRequestId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnV_RequestId");
            entity.Property(e => e.KnVVatwynik)
                .HasDefaultValue((short)0)
                .HasColumnName("KnV_VATWynik");
        });

        modelBuilder.Entity<KntWzUpusty>(entity =>
        {
            entity.HasKey(e => new { e.WkuGrpTyp, e.WkuGrpNumer, e.WkuGrpLp }).HasName("WKU_Primary");

            entity.ToTable("KntWzUpusty", "CDN", tb => tb.HasTrigger("KntWzUpusty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.WkuTwGtyp, e.WkuTwGnumer, e.WkuGrpTyp, e.WkuGrpNumer }, "WKUTowar").IsUnique();

            entity.Property(e => e.WkuGrpTyp).HasColumnName("WKU_GrpTyp");
            entity.Property(e => e.WkuGrpNumer).HasColumnName("WKU_GrpNumer");
            entity.Property(e => e.WkuGrpLp).HasColumnName("WKU_GrpLp");
            entity.Property(e => e.WkuFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WKU_FlagaNB");
            entity.Property(e => e.WkuGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("WKU_GrpFirma");
            entity.Property(e => e.WkuNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("WKU_NrKursu");
            entity.Property(e => e.WkuSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WKU_Symbol");
            entity.Property(e => e.WkuTwGfirma)
                .HasDefaultValue(0)
                .HasColumnName("WKU_TwGFirma");
            entity.Property(e => e.WkuTwGlp)
                .HasDefaultValue((short)0)
                .HasColumnName("WKU_TwGLp");
            entity.Property(e => e.WkuTwGnumer)
                .HasDefaultValue(0)
                .HasColumnName("WKU_TwGNumer");
            entity.Property(e => e.WkuTwGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WKU_TwGTyp");
            entity.Property(e => e.WkuUpust)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WKU_Upust");
            entity.Property(e => e.WkuUpustWzor)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WKU_UpustWzor");

            entity.HasOne(d => d.KntWzorce).WithMany(p => p.KntWzUpusties)
                .HasForeignKey(d => new { d.WkuGrpTyp, d.WkuGrpNumer })
                .HasConstraintName("FK_WKUGrupa");
        });

        modelBuilder.Entity<KntWzorce>(entity =>
        {
            entity.HasKey(e => new { e.KnWGrpTyp, e.KnWGrpNumer }).HasName("KnW_Primary");

            entity.ToTable("KntWzorce", "CDN", tb =>
                {
                    tb.HasTrigger("KntWzorce_DeleteHandler");
                    tb.HasTrigger("KntWzorce_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.KnWBnkTyp, e.KnWBnkNumer }, "KnWBank");

            entity.HasIndex(e => e.KnWKalendarzDst, "KnWKalendarzDst");

            entity.HasIndex(e => e.KnWKalendarzWys, "KnWKalendarzWys");

            entity.Property(e => e.KnWGrpTyp).HasColumnName("KnW_GrpTyp");
            entity.Property(e => e.KnWGrpNumer).HasColumnName("KnW_GrpNumer");
            entity.Property(e => e.KnWAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Adres");
            entity.Property(e => e.KnWAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Akronim");
            entity.Property(e => e.KnWAkronimFormat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_AkronimFormat");
            entity.Property(e => e.KnWAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnW_AkwFirma");
            entity.Property(e => e.KnWAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_AkwLp");
            entity.Property(e => e.KnWAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_AkwNumer");
            entity.Property(e => e.KnWAkwProwizja)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KnW_AkwProwizja");
            entity.Property(e => e.KnWAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_AkwTyp");
            entity.Property(e => e.KnWAkwizytor)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_Akwizytor");
            entity.Property(e => e.KnWArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Archiwalny");
            entity.Property(e => e.KnWAtrybut1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Atrybut1");
            entity.Property(e => e.KnWAtrybut2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Atrybut2");
            entity.Property(e => e.KnWAtrybut3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Atrybut3");
            entity.Property(e => e.KnWAutoAkronim)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_AutoAkronim");
            entity.Property(e => e.KnWBnkFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnW_BnkFirma");
            entity.Property(e => e.KnWBnkLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_BnkLp");
            entity.Property(e => e.KnWBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_BnkNumer");
            entity.Property(e => e.KnWBnkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_BnkTyp");
            entity.Property(e => e.KnWBranza)
                .HasDefaultValue(0)
                .HasColumnName("KnW_Branza");
            entity.Property(e => e.KnWCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_CechaOpis");
            entity.Property(e => e.KnWCena)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_Cena");
            entity.Property(e => e.KnWControlling)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Controlling");
            entity.Property(e => e.KnWCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KnW_CzasModyfikacji");
            entity.Property(e => e.KnWDataPromocji)
                .HasDefaultValue((byte)1)
                .HasColumnName("KnW_DataPromocji");
            entity.Property(e => e.KnWDataWygasniecia)
                .HasDefaultValue(0)
                .HasColumnName("KnW_DataWygasniecia");
            entity.Property(e => e.KnWDewizowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Dewizowe");
            entity.Property(e => e.KnWEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_ESklep");
            entity.Property(e => e.KnWExpoKraj)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_ExpoKraj");
            entity.Property(e => e.KnWFormaPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_FormaPl");
            entity.Property(e => e.KnWFormaPlZak)
                .HasDefaultValue(0)
                .HasColumnName("KnW_FormaPlZak");
            entity.Property(e => e.KnWFormat1)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Format1");
            entity.Property(e => e.KnWFormat2)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Format2");
            entity.Property(e => e.KnWFormat3)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Format3");
            entity.Property(e => e.KnWGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Gmina");
            entity.Property(e => e.KnWGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnW_GrpFirma");
            entity.Property(e => e.KnWGrpLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_GrpLp");
            entity.Property(e => e.KnWKalendarzDst)
                .HasDefaultValue(0)
                .HasColumnName("KnW_KalendarzDst");
            entity.Property(e => e.KnWKalendarzWys)
                .HasDefaultValue(0)
                .HasColumnName("KnW_KalendarzWys");
            entity.Property(e => e.KnWKarFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnW_KarFirma");
            entity.Property(e => e.KnWKarLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_KarLp");
            entity.Property(e => e.KnWKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_KarNumer");
            entity.Property(e => e.KnWKarTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_KarTyp");
            entity.Property(e => e.KnWKnCnumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_KnCNumer");
            entity.Property(e => e.KnWKnCtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_KnCTyp");
            entity.Property(e => e.KnWKnGnumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_KnGNumer");
            entity.Property(e => e.KnWKnGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_KnGTyp");
            entity.Property(e => e.KnWKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_KnPNumer");
            entity.Property(e => e.KnWKnPparam)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_KnPParam");
            entity.Property(e => e.KnWKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_KnPTyp");
            entity.Property(e => e.KnWKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_KodP");
            entity.Property(e => e.KnWKontoDostawcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_KontoDostawcy");
            entity.Property(e => e.KnWKontoOdbiorcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_KontoOdbiorcy");
            entity.Property(e => e.KnWKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Kraj");
            entity.Property(e => e.KnWKrajSiedziby)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_KrajSiedziby");
            entity.Property(e => e.KnWKseFwyslij)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_KSeFWyslij");
            entity.Property(e => e.KnWKseFzrodlowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_KSeFZrodlowy");
            entity.Property(e => e.KnWLimitOkres)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_LimitOkres");
            entity.Property(e => e.KnWLimitPoTerminie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KnW_LimitPoTerminie");
            entity.Property(e => e.KnWLimitTerminowy)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_LimitTerminowy");
            entity.Property(e => e.KnWMaxDniPoTerminie)
                .HasDefaultValue(0)
                .HasColumnName("KnW_MaxDniPoTerminie");
            entity.Property(e => e.KnWMaxLimitWart)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KnW_MaxLimitWart");
            entity.Property(e => e.KnWMetodaKasowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_MetodaKasowa");
            entity.Property(e => e.KnWMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Miasto");
            entity.Property(e => e.KnWMstwrGrupaNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_MSTwrGrupaNumer");
            entity.Property(e => e.KnWNazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Nazwa1");
            entity.Property(e => e.KnWNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Nazwa2");
            entity.Property(e => e.KnWNazwa3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Nazwa3");
            entity.Property(e => e.KnWNieaktywny)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_Nieaktywny");
            entity.Property(e => e.KnWNipE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_NipE");
            entity.Property(e => e.KnWNipPrefiks)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_NipPrefiks");
            entity.Property(e => e.KnWNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_NrKursu");
            entity.Property(e => e.KnWOplataSpozSprzedaz)
                .HasDefaultValue(0)
                .HasColumnName("KnW_OplataSpozSprzedaz");
            entity.Property(e => e.KnWOplataSpozZakup)
                .HasDefaultValue(0)
                .HasColumnName("KnW_OplataSpozZakup");
            entity.Property(e => e.KnWOutlookUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_OutlookURL");
            entity.Property(e => e.KnWPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Pesel");
            entity.Property(e => e.KnWPlatnikVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_PlatnikVat");
            entity.Property(e => e.KnWPlatnoscKaucji)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_PlatnoscKaucji");
            entity.Property(e => e.KnWPodatnikiemNabywca)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_PodatnikiemNabywca");
            entity.Property(e => e.KnWPodzialPlat)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_PodzialPlat");
            entity.Property(e => e.KnWPojedynczeDokDoZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_PojedynczeDokDoZam");
            entity.Property(e => e.KnWPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Powiat");
            entity.Property(e => e.KnWPowiazany)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Powiazany");
            entity.Property(e => e.KnWPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnW_PrcFirma");
            entity.Property(e => e.KnWPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_PrcLp");
            entity.Property(e => e.KnWPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnW_PrcNumer");
            entity.Property(e => e.KnWPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_PrcTyp");
            entity.Property(e => e.KnWPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_PriorytetRez");
            entity.Property(e => e.KnWProcTrnJpk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_ProcTrnJpk");
            entity.Property(e => e.KnWRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("KnW_Rabat");
            entity.Property(e => e.KnWRegionCrm)
                .HasDefaultValue(0)
                .HasColumnName("KnW_RegionCRM");
            entity.Property(e => e.KnWRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Regon");
            entity.Property(e => e.KnWRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("KnW_Rodzaj");
            entity.Property(e => e.KnWRolaPartnera)
                .HasDefaultValue(0)
                .HasColumnName("KnW_RolaPartnera");
            entity.Property(e => e.KnWRolnikRyczaltowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_RolnikRyczaltowy");
            entity.Property(e => e.KnWSeriaFa)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_SeriaFa");
            entity.Property(e => e.KnWSpTerminPlZak)
                .HasDefaultValue(0)
                .HasColumnName("KnW_SpTerminPlZak");
            entity.Property(e => e.KnWSpTerminSpr)
                .HasDefaultValue(0)
                .HasColumnName("KnW_SpTerminSpr");
            entity.Property(e => e.KnWSpedytor)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Spedytor");
            entity.Property(e => e.KnWSplitPayment)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_SplitPayment");
            entity.Property(e => e.KnWSposobDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_SposobDostawy");
            entity.Property(e => e.KnWStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Status");
            entity.Property(e => e.KnWSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Symbol");
            entity.Property(e => e.KnWTerminPlZak)
                .HasDefaultValue(0)
                .HasColumnName("KnW_TerminPlZak");
            entity.Property(e => e.KnWTerminRozliczeniaKaucji)
                .HasDefaultValue(0)
                .HasColumnName("KnW_TerminRozliczeniaKaucji");
            entity.Property(e => e.KnWTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_Typ");
            entity.Property(e => e.KnWTypDok)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_TypDok");
            entity.Property(e => e.KnWTypDokZs)
                .HasDefaultValue(0)
                .HasColumnName("KnW_TypDokZS");
            entity.Property(e => e.KnWTypDokZz)
                .HasDefaultValue(0)
                .HasColumnName("KnW_TypDokZZ");
            entity.Property(e => e.KnWTypKarty)
                .HasDefaultValue((short)0)
                .HasColumnName("KnW_TypKarty");
            entity.Property(e => e.KnWUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Ulica");
            entity.Property(e => e.KnWVatWalSys)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_VatWalSys");
            entity.Property(e => e.KnWWartosc1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Wartosc1");
            entity.Property(e => e.KnWWartosc2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Wartosc2");
            entity.Property(e => e.KnWWartosc3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Wartosc3");
            entity.Property(e => e.KnWWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KnW_Wojewodztwo");
            entity.Property(e => e.KnWWsto)
                .HasDefaultValue((byte)0)
                .HasColumnName("KnW_WSTO");
            entity.Property(e => e.KnWZrodlo)
                .HasDefaultValue(0)
                .HasColumnName("KnW_Zrodlo");
        });

        modelBuilder.Entity<KntZasoby>(entity =>
        {
            entity.HasKey(e => new { e.KnZKntTyp, e.KnZKntNumer, e.KnZDstTyp, e.KnZDstNumer }).HasName("KnZ_Primary");

            entity.ToTable("KntZasoby", "CDN", tb => tb.HasTrigger("KntZasoby_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KnZDoZwrotu, e.KnZTerminZwrotu }, "KnZDoZwrotu");

            entity.HasIndex(e => new { e.KnZKntTyp, e.KnZKntNumer, e.KnZTwrTyp, e.KnZTwrNumer, e.KnZTstamp }, "KnZTStamp");

            entity.HasIndex(e => new { e.KnZTwrTyp, e.KnZTwrNumer, e.KnZDoZwrotu, e.KnZTerminZwrotu }, "KnZTowarDZwr");

            entity.Property(e => e.KnZKntTyp).HasColumnName("KnZ_KntTyp");
            entity.Property(e => e.KnZKntNumer).HasColumnName("KnZ_KntNumer");
            entity.Property(e => e.KnZDstTyp).HasColumnName("KnZ_DstTyp");
            entity.Property(e => e.KnZDstNumer).HasColumnName("KnZ_DstNumer");
            entity.Property(e => e.KnZDoZwrotu)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_DoZwrotu");
            entity.Property(e => e.KnZDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_DstFirma");
            entity.Property(e => e.KnZDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_DstLp");
            entity.Property(e => e.KnZIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("KnZ_Ilosc");
            entity.Property(e => e.KnZKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_KntFirma");
            entity.Property(e => e.KnZKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_KntLp");
            entity.Property(e => e.KnZKsiegowaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KnZ_KsiegowaNetto");
            entity.Property(e => e.KnZMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_MagFirma");
            entity.Property(e => e.KnZMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_MagLp");
            entity.Property(e => e.KnZMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_MagNumer");
            entity.Property(e => e.KnZMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_MagTyp");
            entity.Property(e => e.KnZRzeczywistaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KnZ_RzeczywistaNetto");
            entity.Property(e => e.KnZTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_TerminZwrotu");
            entity.Property(e => e.KnZTrEfirma)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_TrEFirma");
            entity.Property(e => e.KnZTrElp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_TrELp");
            entity.Property(e => e.KnZTrEnumer)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_TrENumer");
            entity.Property(e => e.KnZTrEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_TrETyp");
            entity.Property(e => e.KnZTstamp)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_TStamp");
            entity.Property(e => e.KnZTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_TwrFirma");
            entity.Property(e => e.KnZTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_TwrLp");
            entity.Property(e => e.KnZTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("KnZ_TwrNumer");
            entity.Property(e => e.KnZTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KnZ_TwrTyp");

            entity.HasOne(d => d.KntTowary).WithMany(p => p.KntZasobies)
                .HasForeignKey(d => new { d.KnZKntTyp, d.KnZKntNumer, d.KnZTwrTyp, d.KnZTwrNumer })
                .HasConstraintName("FK_KnZTStamp");
        });

        modelBuilder.Entity<KodyCn>(entity =>
        {
            entity.HasKey(e => e.KcnId).HasName("KCN_Primary");

            entity.ToTable("KodyCN", "CDN", tb => tb.HasTrigger("KodyCN_DeleteHandler"));

            entity.HasIndex(e => e.KcnKod, "KCNKod").IsUnique();

            entity.Property(e => e.KcnId).HasColumnName("KCN_ID");
            entity.Property(e => e.KcnBezMasy)
                .HasDefaultValue((short)0)
                .HasColumnName("KCN_BezMasy");
            entity.Property(e => e.KcnFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("KCN_FlagaVAT");
            entity.Property(e => e.KcnJedSent)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCN_JedSENT");
            entity.Property(e => e.KcnJedUzup)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCN_JedUzup");
            entity.Property(e => e.KcnKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCN_Kod");
            entity.Property(e => e.KcnOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCN_Opis");
            entity.Property(e => e.KcnSent)
                .HasDefaultValue((byte)0)
                .HasColumnName("KCN_SENT");
            entity.Property(e => e.KcnStawkaVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("KCN_StawkaVAT");
        });

        modelBuilder.Entity<KodyCnjednostkiSent>(entity =>
        {
            entity.HasKey(e => e.KcnjId).HasName("KCNJ_Primary");

            entity.ToTable("KodyCNJednostkiSent", "CDN", tb => tb.HasTrigger("KodyCNJednostkiSent_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KcnjKcnid, e.KcnjJm }, "KCNJKodJm").IsUnique();

            entity.Property(e => e.KcnjId).HasColumnName("KCNJ_Id");
            entity.Property(e => e.KcnjJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KCNJ_Jm");
            entity.Property(e => e.KcnjKcnid)
                .HasDefaultValue(0)
                .HasColumnName("KCNJ_KCNId");

            entity.HasOne(d => d.KcnjKcn).WithMany(p => p.KodyCnjednostkiSents)
                .HasForeignKey(d => d.KcnjKcnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KCNJKodJm");
        });

        modelBuilder.Entity<KolDokumenty>(entity =>
        {
            entity.HasKey(e => e.KdoId).HasName("KDO_Primary");

            entity.ToTable("KolDokumenty", "CDN");

            entity.HasIndex(e => new { e.KdoDokNumer, e.KdoDokTyp }, "KDODokument");

            entity.Property(e => e.KdoId).HasColumnName("KDO_Id");
            entity.Property(e => e.KdoCzasOddania)
                .HasDefaultValue(0)
                .HasColumnName("KDO_CzasOddania");
            entity.Property(e => e.KdoCzasWyslania)
                .HasDefaultValue(0)
                .HasColumnName("KDO_CzasWyslania");
            entity.Property(e => e.KdoDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("KDO_DokNumer");
            entity.Property(e => e.KdoDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KDO_DokTyp");
            entity.Property(e => e.KdoOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KDO_OpeNumer");
            entity.Property(e => e.KdoOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KDO_OpeTyp");
            entity.Property(e => e.KdoStan)
                .HasDefaultValue((short)0)
                .HasColumnName("KDO_Stan");
        });

        modelBuilder.Entity<KompElem>(entity =>
        {
            entity.HasKey(e => new { e.KmeKmnid, e.KmeKmelp }).HasName("KME_Primary");

            entity.ToTable("KompElem", "CDN");

            entity.Property(e => e.KmeKmnid).HasColumnName("KME_KMNID");
            entity.Property(e => e.KmeKmelp).HasColumnName("KME_KMELp");
            entity.Property(e => e.KmeDodOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KME_DodOpeNumer");
            entity.Property(e => e.KmeKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KME_Kwota");
            entity.Property(e => e.KmeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KME_Lp");
            entity.Property(e => e.KmeNalFirma)
                .HasDefaultValue(0)
                .HasColumnName("KME_NalFirma");
            entity.Property(e => e.KmeNalLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KME_NalLp");
            entity.Property(e => e.KmeNalNumer)
                .HasDefaultValue(0)
                .HasColumnName("KME_NalNumer");
            entity.Property(e => e.KmeNalTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KME_NalTyp");
            entity.Property(e => e.KmeOdrzucona)
                .HasDefaultValue((byte)0)
                .HasColumnName("KME_Odrzucona");
            entity.Property(e => e.KmeStatData)
                .HasDefaultValue(0)
                .HasColumnName("KME_StatData");
            entity.Property(e => e.KmeStatOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KME_StatOpeNumer");
            entity.Property(e => e.KmeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KME_Waluta");
            entity.Property(e => e.KmeZobFirma)
                .HasDefaultValue(0)
                .HasColumnName("KME_ZobFirma");
            entity.Property(e => e.KmeZobLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KME_ZobLp");
            entity.Property(e => e.KmeZobNumer)
                .HasDefaultValue(0)
                .HasColumnName("KME_ZobNumer");
            entity.Property(e => e.KmeZobTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KME_ZobTyp");

            entity.HasOne(d => d.KmeKmn).WithMany(p => p.KompElems)
                .HasForeignKey(d => d.KmeKmnid)
                .HasConstraintName("FK_KMEPrimary");
        });

        modelBuilder.Entity<KompElemPlatnosci>(entity =>
        {
            entity.HasKey(e => new { e.KmpKmeid, e.KmpKmelp, e.KmpKmpsubLp }).HasName("KMP_Primary");

            entity.ToTable("KompElemPlatnosci", "CDN", tb =>
                {
                    tb.HasTrigger("KompElemPlatnosciAlias_DeleteHandler");
                    tb.HasTrigger("KompElemPlatnosci_DeleteHandler");
                });

            entity.HasIndex(e => new { e.KmpKmeid, e.KmpNalTrplp }, "KMPNalTRP").IsUnique();

            entity.HasIndex(e => new { e.KmpKmeid, e.KmpZobTrplp }, "KMPZobTRP").IsUnique();

            entity.Property(e => e.KmpKmeid).HasColumnName("KMP_KMEID");
            entity.Property(e => e.KmpKmelp).HasColumnName("KMP_KMELp");
            entity.Property(e => e.KmpKmpsubLp).HasColumnName("KMP_KMPSubLp");
            entity.Property(e => e.KmpNalTrplp)
                .HasDefaultValue((short)0)
                .HasColumnName("KMP_NalTRPLp");
            entity.Property(e => e.KmpZobTrplp)
                .HasDefaultValue((short)0)
                .HasColumnName("KMP_ZobTRPLp");

            entity.HasOne(d => d.KompElem).WithMany(p => p.KompElemPlatnoscis)
                .HasForeignKey(d => new { d.KmpKmeid, d.KmpKmelp })
                .HasConstraintName("FK_KMPPrimary");
        });

        modelBuilder.Entity<KompNag>(entity =>
        {
            entity.HasKey(e => e.KmnId).HasName("KMN_Primary");

            entity.ToTable("KompNag", "CDN", tb => tb.HasTrigger("KompNag_DeleteHandler"));

            entity.HasIndex(e => e.KmnDataKompensaty, "KMNData");

            entity.HasIndex(e => new { e.KmnRok, e.KmnSeria, e.KmnNumer }, "KMNNumer").IsUnique();

            entity.HasIndex(e => e.KmnStatus, "KMNStatus");

            entity.Property(e => e.KmnId).HasColumnName("KMN_ID");
            entity.Property(e => e.KmnAkcjaGenerowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KMN_AkcjaGenerowanie");
            entity.Property(e => e.KmnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("KMN_Aktywny");
            entity.Property(e => e.KmnBylaProponowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("KMN_BylaProponowana");
            entity.Property(e => e.KmnCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KMN_CechaOpis");
            entity.Property(e => e.KmnDataDokumentu)
                .HasDefaultValue(0)
                .HasColumnName("KMN_DataDokumentu");
            entity.Property(e => e.KmnDataKompensaty)
                .HasDefaultValue(0)
                .HasColumnName("KMN_DataKompensaty");
            entity.Property(e => e.KmnDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("KMN_DataKsiegowania");
            entity.Property(e => e.KmnDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KMN_Dziennik");
            entity.Property(e => e.KmnKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("KMN_KNTNumer");
            entity.Property(e => e.KmnKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KMN_KNTTyp");
            entity.Property(e => e.KmnNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("KMN_NieKsiegowac");
            entity.Property(e => e.KmnNumer)
                .HasDefaultValue(0)
                .HasColumnName("KMN_Numer");
            entity.Property(e => e.KmnNumerDokumentu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KMN_NumerDokumentu");
            entity.Property(e => e.KmnOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("KMN_OpeMNumer");
            entity.Property(e => e.KmnOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("KMN_OpeWNumer");
            entity.Property(e => e.KmnOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("KMN_OpeZNumer");
            entity.Property(e => e.KmnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("KMN_Rok");
            entity.Property(e => e.KmnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KMN_Seria");
            entity.Property(e => e.KmnStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("KMN_Status");
            entity.Property(e => e.KmnTresc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KMN_Tresc");
            entity.Property(e => e.KmnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KMN_Url");
            entity.Property(e => e.KmnUwagi)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KMN_Uwagi");
            entity.Property(e => e.KmnZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("KMN_Zaksiegowano");
        });

        modelBuilder.Entity<Komunikaty>(entity =>
        {
            entity.HasKey(e => e.KomId).HasName("Kom_Primary");

            entity.ToTable("Komunikaty", "CDN", tb => tb.HasTrigger("Komunikaty_InsertUpdateHandler"));

            entity.HasIndex(e => e.KomFrsId, "KomFrsID");

            entity.Property(e => e.KomId).HasColumnName("Kom_Id");
            entity.Property(e => e.KomCzas)
                .HasDefaultValue(0)
                .HasColumnName("Kom_Czas");
            entity.Property(e => e.KomFrsId)
                .HasDefaultValue(0)
                .HasColumnName("Kom_FrsId");
            entity.Property(e => e.KomIdKom)
                .HasDefaultValue(0)
                .HasColumnName("Kom_IdKom");
            entity.Property(e => e.KomModul)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kom_Modul");
            entity.Property(e => e.KomObraz)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("Kom_Obraz");
            entity.Property(e => e.KomOpeIdent)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kom_OpeIdent");
            entity.Property(e => e.KomRozmiar)
                .HasDefaultValue(0)
                .HasColumnName("Kom_Rozmiar");
            entity.Property(e => e.KomSciezka)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kom_Sciezka");
            entity.Property(e => e.KomSzczegoly)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kom_Szczegoly");
            entity.Property(e => e.KomTresc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kom_Tresc");
            entity.Property(e => e.KomTypKom)
                .HasDefaultValue((short)0)
                .HasColumnName("Kom_TypKom");
        });

        modelBuilder.Entity<KonfProdElem>(entity =>
        {
            entity.HasKey(e => e.KpeId).HasName("KPE_Primary");

            entity.ToTable("KonfProdElem", "CDN", tb => tb.HasTrigger("KonfProdElem_InsertUpdateHandler"));

            entity.HasIndex(e => e.KpeAtkId, "KPEAtK");

            entity.HasIndex(e => e.KpeKpnid, "KPEKPN");

            entity.HasIndex(e => new { e.KpeObiNumer, e.KpeObiTyp }, "KPEObi");

            entity.Property(e => e.KpeId).HasColumnName("KPE_Id");
            entity.Property(e => e.KpeAtkId)
                .HasDefaultValue(0)
                .HasColumnName("KPE_AtkId");
            entity.Property(e => e.KpeEdycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPE_Edycja");
            entity.Property(e => e.KpeKopiuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPE_Kopiuj");
            entity.Property(e => e.KpeKpnid)
                .HasDefaultValue(0)
                .HasColumnName("KPE_KPNId");
            entity.Property(e => e.KpeObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("KPE_ObiFirma");
            entity.Property(e => e.KpeObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPE_ObiLp");
            entity.Property(e => e.KpeObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("KPE_ObiNumer");
            entity.Property(e => e.KpeObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPE_ObiTyp");
            entity.Property(e => e.KpeOdpFirma)
                .HasDefaultValue(0)
                .HasColumnName("KPE_OdpFirma");
            entity.Property(e => e.KpeOdpLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPE_OdpLp");
            entity.Property(e => e.KpeOdpNumer)
                .HasDefaultValue(0)
                .HasColumnName("KPE_OdpNumer");
            entity.Property(e => e.KpeOdpTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPE_OdpTyp");
            entity.Property(e => e.KpeOdpowiedz)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPE_Odpowiedz");
            entity.Property(e => e.KpePozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("KPE_Pozycja");
            entity.Property(e => e.KpeTresc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPE_Tresc");
            entity.Property(e => e.KpeTypPytania)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPE_TypPytania");
            entity.Property(e => e.KpeWymagaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("KPE_Wymagaj");

            entity.HasOne(d => d.KpeKpn).WithMany(p => p.KonfProdElems)
                .HasForeignKey(d => d.KpeKpnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KPEKPN");
        });

        modelBuilder.Entity<KonfProdGrupy>(entity =>
        {
            entity.HasKey(e => e.KpgId).HasName("KPG_Primary");

            entity.ToTable("KonfProdGrupy", "CDN");

            entity.Property(e => e.KpgId).HasColumnName("KPG_Id");
            entity.Property(e => e.KpgNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPG_Nazwa");
            entity.Property(e => e.KpgOpis)
                .HasMaxLength(1025)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPG_Opis");
        });

        modelBuilder.Entity<KonfProdGrupyElem>(entity =>
        {
            entity.HasKey(e => new { e.KegKpgid, e.KegTwGtyp, e.KegTwGnumer }).HasName("KEG_Primary");

            entity.ToTable("KonfProdGrupyElem", "CDN", tb => tb.HasTrigger("KonfProdGrupyElem_InsertUpdateHandler"));

            entity.HasIndex(e => e.KegKpgid, "KEGKPG");

            entity.HasIndex(e => new { e.KegTwGnumer, e.KegTwGtyp }, "KEGTwG");

            entity.Property(e => e.KegKpgid).HasColumnName("KEG_KPGId");
            entity.Property(e => e.KegTwGtyp).HasColumnName("KEG_TwGTyp");
            entity.Property(e => e.KegTwGnumer).HasColumnName("KEG_TwGNumer");
            entity.Property(e => e.KegLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KEG_Lp");
            entity.Property(e => e.KegTwGfirma)
                .HasDefaultValue(0)
                .HasColumnName("KEG_TwGFirma");
            entity.Property(e => e.KegTwGlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KEG_TwGLp");

            entity.HasOne(d => d.KegKpg).WithMany(p => p.KonfProdGrupyElems)
                .HasForeignKey(d => d.KegKpgid)
                .HasConstraintName("FK_KEGKPG");
        });

        modelBuilder.Entity<KonfProdGrupyStruktura>(entity =>
        {
            entity.HasKey(e => e.KgsId).HasName("KGS_Primary");

            entity.ToTable("KonfProdGrupyStruktura", "CDN", tb =>
                {
                    tb.HasTrigger("KonfProdGrupyStrukturaAlias_InsertUpdateHandler");
                    tb.HasTrigger("KonfProdGrupyStruktura_DeleteHandler");
                    tb.HasTrigger("KonfProdGrupyStruktura_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.KgsKpgid, "KGSKPG");

            entity.HasIndex(e => e.KgsRodzicId, "KGSNadrzedny");

            entity.HasIndex(e => new { e.KgsTwrNumer, e.KgsRodzicId, e.KgsKpgid }, "KGSTwr").IsUnique();

            entity.Property(e => e.KgsId).HasColumnName("KGS_Id");
            entity.Property(e => e.KgsKpgid)
                .HasDefaultValue(0)
                .HasColumnName("KGS_KPGId");
            entity.Property(e => e.KgsRodzicId)
                .HasDefaultValue(0)
                .HasColumnName("KGS_RodzicId");
            entity.Property(e => e.KgsTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("KGS_TwrFirma");
            entity.Property(e => e.KgsTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KGS_TwrLp");
            entity.Property(e => e.KgsTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("KGS_TwrNumer");
            entity.Property(e => e.KgsTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KGS_TwrTyp");

            entity.HasOne(d => d.KgsKpg).WithMany(p => p.KonfProdGrupyStrukturas)
                .HasForeignKey(d => d.KgsKpgid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KGSKPG");
        });

        modelBuilder.Entity<KonfProdLinki>(entity =>
        {
            entity.HasKey(e => new { e.KplKpgid, e.KplPteid }).HasName("KPL_Primary");

            entity.ToTable("KonfProdLinki", "CDN", tb => tb.HasTrigger("KonfProdLinki_InsertUpdateHandler"));

            entity.HasIndex(e => e.KplKpgid, "KPLKPG");

            entity.HasIndex(e => e.KplPteid, "KPLPTE");

            entity.Property(e => e.KplKpgid).HasColumnName("KPL_KPGId");
            entity.Property(e => e.KplPteid).HasColumnName("KPL_PTEId");
            entity.Property(e => e.KplPtetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPL_PTETyp");

            entity.HasOne(d => d.KplKpg).WithMany(p => p.KonfProdLinkis)
                .HasForeignKey(d => d.KplKpgid)
                .HasConstraintName("FK_KPLKPG");
        });

        modelBuilder.Entity<KonfProdNag>(entity =>
        {
            entity.HasKey(e => e.KpnId).HasName("KPN_Primary");

            entity.ToTable("KonfProdNag", "CDN", tb =>
                {
                    tb.HasTrigger("KonfProdNag_DeleteZmienProdTech");
                    tb.HasTrigger("KonfProdNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.KpnDokTyp, e.KpnDokNumer, e.KpnDokLp }, "KPNDok").IsUnique();

            entity.HasIndex(e => e.KpnKtpid, "KPNKTP");

            entity.HasIndex(e => new { e.KpnPrdNumer, e.KpnPrdTyp }, "KPNPrd");

            entity.HasIndex(e => e.KpnPteid, "KPNTPE");

            entity.HasIndex(e => new { e.KpnTwGnumer, e.KpnTwGtyp }, "KPNTwG");

            entity.Property(e => e.KpnId).HasColumnName("KPN_Id");
            entity.Property(e => e.KpnCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KPN_CzasModyfikacji");
            entity.Property(e => e.KpnDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("KPN_DokFirma");
            entity.Property(e => e.KpnDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPN_DokLp");
            entity.Property(e => e.KpnDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("KPN_DokNumer");
            entity.Property(e => e.KpnDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPN_DokTyp");
            entity.Property(e => e.KpnKtpid)
                .HasDefaultValue(0)
                .HasColumnName("KPN_KTPId");
            entity.Property(e => e.KpnOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("KPN_OpeNumerM");
            entity.Property(e => e.KpnPrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("KPN_PrdNumer");
            entity.Property(e => e.KpnPrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPN_PrdTyp");
            entity.Property(e => e.KpnPteid)
                .HasDefaultValue(0)
                .HasColumnName("KPN_PTEId");
            entity.Property(e => e.KpnTwGnumer)
                .HasDefaultValue(0)
                .HasColumnName("KPN_TwGNumer");
            entity.Property(e => e.KpnTwGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KPN_TwGTyp");
        });

        modelBuilder.Entity<Konfig>(entity =>
        {
            entity.HasKey(e => new { e.KonNumer, e.KonLp }).HasName("Kon_Primary");

            entity.ToTable("Konfig", "CDN", tb =>
                {
                    tb.HasTrigger("Kon_CzasModyfikacji");
                    tb.HasTrigger("Konfig_DeleteHandler");
                    tb.HasTrigger("Konfig_UsuwanieIstotneOpcje");
                    tb.HasTrigger("Konfig_UsuwaniePltPromocje");
                    tb.HasTrigger("Konfig_ZmianaRabatu");
                });

            entity.Property(e => e.KonNumer).HasColumnName("Kon_Numer");
            entity.Property(e => e.KonLp).HasColumnName("Kon_Lp");
            entity.Property(e => e.KonArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("Kon_Archiwalny");
            entity.Property(e => e.KonCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Kon_CzasModyfikacji");
            entity.Property(e => e.KonKomentarz)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kon_Komentarz");
            entity.Property(e => e.KonPozycja)
                .HasDefaultValue(0)
                .HasColumnName("Kon_Pozycja");
            entity.Property(e => e.KonStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("Kon_Status");
            entity.Property(e => e.KonSystem)
                .HasDefaultValue((byte)0)
                .HasColumnName("Kon_System");
            entity.Property(e => e.KonWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kon_Wartosc");
        });

        modelBuilder.Entity<KontaLinki>(entity =>
        {
            entity.HasKey(e => new { e.KklSynNumer, e.KklKksnumer }).HasName("KKL_Primary");

            entity.ToTable("KontaLinki", "CDN");

            entity.Property(e => e.KklSynNumer).HasColumnName("KKL_SynNumer");
            entity.Property(e => e.KklKksnumer).HasColumnName("KKL_KKSNumer");
            entity.Property(e => e.KklAnalityka)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKL_Analityka");
        });

        modelBuilder.Entity<KontaListaWybrane>(entity =>
        {
            entity.HasKey(e => new { e.KlwOpeNumer, e.KlwKkskonto }).HasName("KLW_Primary");

            entity.ToTable("KontaListaWybrane", "CDN");

            entity.HasIndex(e => new { e.KlwOpeNumer, e.KlwKkskontoOrd }, "KLWKontoOrd").IsUnique();

            entity.HasIndex(e => new { e.KlwOpeNumer, e.KlwTs }, "KLWOpeTS");

            entity.Property(e => e.KlwOpeNumer).HasColumnName("KLW_OpeNumer");
            entity.Property(e => e.KlwKkskonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLW_KKSKonto");
            entity.Property(e => e.KlwKkskontoOrd)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KLW_KKSKontoOrd");
            entity.Property(e => e.KlwTs)
                .HasDefaultValue(0)
                .HasColumnName("KLW_TS");
        });

        modelBuilder.Entity<KontaMapowaniePom>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KontaMapowaniePom", "CDN");

            entity.Property(e => e.MkksBiezacyOkresgidNumer).HasColumnName("MKKS_BiezacyOkresgidNumer");
            entity.Property(e => e.MkksGidNumer).HasColumnName("MKKS_GidNumer");
        });

        modelBuilder.Entity<KontaNastLinki>(entity =>
        {
            entity.HasKey(e => new { e.KliNastNumer, e.KliPoprzNumer }).HasName("KLI_Primary");

            entity.ToTable("KontaNastLinki", "CDN");

            entity.HasIndex(e => new { e.KliPoprzNumer, e.KliNastNumer }, "KLIPoprzNastNumer");

            entity.Property(e => e.KliNastNumer).HasColumnName("KLI_NastNumer");
            entity.Property(e => e.KliPoprzNumer).HasColumnName("KLI_PoprzNumer");
            entity.Property(e => e.KliPoprzOkresId)
                .HasDefaultValue(0)
                .HasColumnName("KLI_PoprzOkresID");
        });

        modelBuilder.Entity<KontaNazwy>(entity =>
        {
            entity.HasKey(e => new { e.KkzKksNumer, e.KkzCharSet }).HasName("KKZ_Primary");

            entity.ToTable("KontaNazwy", "CDN");

            entity.Property(e => e.KkzKksNumer).HasColumnName("KKZ_KksNumer");
            entity.Property(e => e.KkzCharSet).HasColumnName("KKZ_CharSet");
            entity.Property(e => e.KkzNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKZ_Nazwa");

            entity.HasOne(d => d.KkzKksNumerNavigation).WithMany(p => p.KontaNazwies)
                .HasForeignKey(d => d.KkzKksNumer)
                .HasConstraintName("FK_KKZKksNumer");
        });

        modelBuilder.Entity<KontaSegmentyNumeru>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KontaSegmentyNumeru", "CDN");

            entity.Property(e => e.KsnKontogidnumer).HasColumnName("ksn_kontogidnumer");
            entity.Property(e => e.KsnKontogidtyp).HasColumnName("ksn_kontogidtyp");
            entity.Property(e => e.KsnKontonumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ksn_kontonumer");
            entity.Property(e => e.KsnKontopargidnumer).HasColumnName("ksn_kontopargidnumer");
            entity.Property(e => e.KsnPoziom).HasColumnName("ksn_poziom");
            entity.Property(e => e.KsnPoziomseg).HasColumnName("ksn_poziomseg");
            entity.Property(e => e.KsnSegment0)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ksn_segment0");
            entity.Property(e => e.KsnSegment1)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment1");
            entity.Property(e => e.KsnSegment2)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment2");
            entity.Property(e => e.KsnSegment3)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment3");
            entity.Property(e => e.KsnSegment4)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment4");
            entity.Property(e => e.KsnSegment5)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment5");
            entity.Property(e => e.KsnSegment6)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment6");
            entity.Property(e => e.KsnSegment7)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment7");
            entity.Property(e => e.KsnSegment8)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("ksn_segment8");
        });

        modelBuilder.Entity<Kontum>(entity =>
        {
            entity.HasKey(e => e.KksGidnumer).HasName("KKS_Primary");

            entity.ToTable("Konta", "CDN", tb =>
                {
                    tb.HasTrigger("KontaAlias_DeleteHandler");
                    tb.HasTrigger("Konta_DeleteAtrybutyHist");
                    tb.HasTrigger("Konta_DeleteHandler");
                    tb.HasTrigger("Konta_HistoriaZmian");
                    tb.HasTrigger("Konta_InsertUpdate");
                    tb.HasTrigger("Konta_InsertUpdateHandler");
                    tb.HasTrigger("Konta_KontoDelete");
                });

            entity.HasIndex(e => e.KksKkzdkksnumer, "KKSKKZDKKSNumer");

            entity.HasIndex(e => new { e.KksKlasa, e.KksKonto }, "KKSKlasa");

            entity.HasIndex(e => e.KksKonto, "KKSKonto");

            entity.HasIndex(e => new { e.KksOkresId, e.KksKonto }, "KKSKontoFirma").IsUnique();

            entity.HasIndex(e => new { e.KksOkresId, e.KksKontoOrd, e.KksGidnumer }, "KKSKontoOrd").IsUnique();

            entity.HasIndex(e => new { e.KksOkresId, e.KksKzkonto, e.KksWaluta }, "KKSKontoZwiazane");

            entity.HasIndex(e => new { e.KksKntnumer, e.KksKnttyp, e.KksKonto }, "KKSKontrahent");

            entity.HasIndex(e => e.KksNastNumer, "KKSNastNumer");

            entity.HasIndex(e => new { e.KksOkresId, e.KksNazwa }, "KKSNazwaFirma");

            entity.HasIndex(e => e.KksSynNumer, "KKSSynNumer");

            entity.Property(e => e.KksGidnumer).HasColumnName("KKS_GIDNumer");
            entity.Property(e => e.KksAktualizujPodrz)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_AktualizujPodrz");
            entity.Property(e => e.KksAktywny)
                .HasDefaultValue(0)
                .HasColumnName("KKS_Aktywny");
            entity.Property(e => e.KksAnalityka)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_Analityka");
            entity.Property(e => e.KksArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_Archiwalny");
            entity.Property(e => e.KksBocredit)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("KKS_BOCredit");
            entity.Property(e => e.KksBodebet)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("KKS_BODebet");
            entity.Property(e => e.KksCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KKS_CzasModyfikacji");
            entity.Property(e => e.KksDataZal)
                .HasDefaultValue(0)
                .HasColumnName("KKS_DataZal");
            entity.Property(e => e.KksGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KKS_GIDFirma");
            entity.Property(e => e.KksGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KKS_GIDLp");
            entity.Property(e => e.KksGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KKS_GIDTyp");
            entity.Property(e => e.KksKkzdkksnumer)
                .HasDefaultValue(0)
                .HasColumnName("KKS_KKZDKKSNumer");
            entity.Property(e => e.KksKlasa)
                .HasDefaultValue((short)0)
                .HasColumnName("KKS_Klasa");
            entity.Property(e => e.KksKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("KKS_KNTFirma");
            entity.Property(e => e.KksKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KKS_KNTLp");
            entity.Property(e => e.KksKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("KKS_KNTNumer");
            entity.Property(e => e.KksKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KKS_KNTTyp");
            entity.Property(e => e.KksKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_Konto");
            entity.Property(e => e.KksKontoOrd)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_KontoOrd");
            entity.Property(e => e.KksKontrola)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_Kontrola");
            entity.Property(e => e.KksKzkonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_KZKonto");
            entity.Property(e => e.KksLokalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_Lokalne");
            entity.Property(e => e.KksMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("KKS_Miesiac");
            entity.Property(e => e.KksNastKonto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_NastKonto");
            entity.Property(e => e.KksNastNumer)
                .HasDefaultValue(0)
                .HasColumnName("KKS_NastNumer");
            entity.Property(e => e.KksNastTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_NastTyp");
            entity.Property(e => e.KksNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_Nazwa");
            entity.Property(e => e.KksNazwa2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_Nazwa2");
            entity.Property(e => e.KksOkresId)
                .HasDefaultValue(0)
                .HasColumnName("KKS_OkresID");
            entity.Property(e => e.KksOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("KKS_OpeNumer");
            entity.Property(e => e.KksOpeZaklNumer)
                .HasDefaultValue(0)
                .HasColumnName("KKS_OpeZaklNumer");
            entity.Property(e => e.KksPozabilansowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_Pozabilansowe");
            entity.Property(e => e.KksPoziom)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_Poziom");
            entity.Property(e => e.KksPoziomUprawnien)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_PoziomUprawnien");
            entity.Property(e => e.KksRok)
                .HasDefaultValue((short)0)
                .HasColumnName("KKS_Rok");
            entity.Property(e => e.KksRozrachunkowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_Rozrachunkowe");
            entity.Property(e => e.KksSaldoWgObr)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_SaldoWgObr");
            entity.Property(e => e.KksSubKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_SubKonto");
            entity.Property(e => e.KksSynNumer)
                .HasDefaultValue(0)
                .HasColumnName("KKS_SynNumer");
            entity.Property(e => e.KksTstamp)
                .HasDefaultValue(0)
                .HasColumnName("KKS_TStamp");
            entity.Property(e => e.KksTypKonta)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKS_TypKonta");
            entity.Property(e => e.KksWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKS_Waluta");
            entity.Property(e => e.KksZestZnacznik1)
                .HasDefaultValue(0)
                .HasColumnName("KKS_ZestZnacznik1");
            entity.Property(e => e.KksZestZnacznik2)
                .HasDefaultValue(0)
                .HasColumnName("KKS_ZestZnacznik2");
            entity.Property(e => e.KksZestZnacznikPod)
                .HasDefaultValue(0)
                .HasColumnName("KKS_ZestZnacznikPod");

            entity.HasOne(d => d.KksOkres).WithMany(p => p.Konta)
                .HasForeignKey(d => d.KksOkresId)
                .HasConstraintName("FK_KKSKontoFirma");
        });

        modelBuilder.Entity<Konwersacje>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Konwersacje", "CDN", tb => tb.HasTrigger("Konwersacje_InsertUpdateHandler"));

            entity.HasIndex(e => e.KxlId, "KXLKonwersacja");

            entity.Property(e => e.KxlDataiCzas)
                .HasDefaultValue(0)
                .HasColumnName("KXL_DataiCzas");
            entity.Property(e => e.KxlId)
                .HasDefaultValue(0)
                .HasColumnName("KXL_ID");
            entity.Property(e => e.KxlIdwiadomosci)
                .ValueGeneratedOnAdd()
                .HasColumnName("KXL_IDWiadomosci");
            entity.Property(e => e.KxlOpeId)
                .HasDefaultValue(0)
                .HasColumnName("KXL_OpeID");
            entity.Property(e => e.KxlTresc)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KXL_Tresc");
        });

        modelBuilder.Entity<Konwersja30>(entity =>
        {
            entity.HasKey(e => e.KowId).HasName("KOW_Primary");

            entity.ToTable("Konwersja30", "CDN");

            entity.HasIndex(e => e.KowFrSid, "KowFrsid");

            entity.HasIndex(e => e.KowStaNazwa, "KowStaNazwa");

            entity.Property(e => e.KowId).HasColumnName("KOW_ID");
            entity.Property(e => e.KowAutoPotwierdzanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KOW_AutoPotwierdzanie");
            entity.Property(e => e.KowFrSfirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_FrSFirma");
            entity.Property(e => e.KowFrSid)
                .HasDefaultValue(0)
                .HasColumnName("KOW_FrSId");
            entity.Property(e => e.KowFrSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_FrSLp");
            entity.Property(e => e.KowFrSnumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_FrSNumer");
            entity.Property(e => e.KowFrStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_FrSTyp");
            entity.Property(e => e.KowFrsNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KOW_FrsNazwa");
            entity.Property(e => e.KowJedenMagazyn)
                .HasDefaultValue((byte)0)
                .HasColumnName("KOW_JedenMagazyn");
            entity.Property(e => e.KowLsautoDruk)
                .HasDefaultValue((byte)0)
                .HasColumnName("KOW_LSAutoDruk");
            entity.Property(e => e.KowLsautoSpinacz)
                .HasDefaultValue((byte)0)
                .HasColumnName("KOW_LSAutoSpinacz");
            entity.Property(e => e.KowLsautoZaplata)
                .HasDefaultValue((byte)0)
                .HasColumnName("KOW_LSAutoZaplata");
            entity.Property(e => e.KowLskorzystaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("KOW_LSKorzystaj");
            entity.Property(e => e.KowMagDfirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagDFirma");
            entity.Property(e => e.KowMagDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagDLp");
            entity.Property(e => e.KowMagDnumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagDNumer");
            entity.Property(e => e.KowMagDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagDTyp");
            entity.Property(e => e.KowMagDzlcFirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagDZlcFirma");
            entity.Property(e => e.KowMagDzlcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagDZlcLp");
            entity.Property(e => e.KowMagDzlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagDZlcNumer");
            entity.Property(e => e.KowMagDzlcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagDZlcTyp");
            entity.Property(e => e.KowMagZfirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagZFirma");
            entity.Property(e => e.KowMagZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagZLp");
            entity.Property(e => e.KowMagZnumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagZNumer");
            entity.Property(e => e.KowMagZsrwFirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagZSrwFirma");
            entity.Property(e => e.KowMagZsrwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagZSrwLp");
            entity.Property(e => e.KowMagZsrwNumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagZSrwNumer");
            entity.Property(e => e.KowMagZsrwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagZSrwTyp");
            entity.Property(e => e.KowMagZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagZTyp");
            entity.Property(e => e.KowMagZzlcFirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagZZlcFirma");
            entity.Property(e => e.KowMagZzlcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagZZlcLp");
            entity.Property(e => e.KowMagZzlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_MagZZlcNumer");
            entity.Property(e => e.KowMagZzlcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_MagZZlcTyp");
            entity.Property(e => e.KowScfirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_SCFirma");
            entity.Property(e => e.KowSclp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_SCLp");
            entity.Property(e => e.KowScnumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_SCNumer");
            entity.Property(e => e.KowSctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_SCTyp");
            entity.Property(e => e.KowSerFirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_SerFirma");
            entity.Property(e => e.KowSerLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_SerLp");
            entity.Property(e => e.KowSerNumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_SerNumer");
            entity.Property(e => e.KowSerTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_SerTyp");
            entity.Property(e => e.KowStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("KOW_StaFirma");
            entity.Property(e => e.KowStaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_StaLp");
            entity.Property(e => e.KowStaNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KOW_StaNazwa");
            entity.Property(e => e.KowStaNumer)
                .HasDefaultValue(0)
                .HasColumnName("KOW_StaNumer");
            entity.Property(e => e.KowStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOW_StaTyp");
        });

        modelBuilder.Entity<Kostki>(entity =>
        {
            entity.HasKey(e => e.KosId).HasName("Kos_Primary");

            entity.ToTable("Kostki", "CDN");

            entity.Property(e => e.KosId).HasColumnName("Kos_ID");
            entity.Property(e => e.KosBiid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kos_BIID");
            entity.Property(e => e.KosInternalName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Kos_InternalName");
            entity.Property(e => e.KosTranslationId)
                .HasDefaultValue(0)
                .HasColumnName("Kos_TranslationID");
        });

        modelBuilder.Entity<KosztyDodDok>(entity =>
        {
            entity.HasKey(e => new { e.KddGidtyp, e.KddGidnumer, e.KddGidlp }).HasName("KDD_Primary");

            entity.ToTable("KosztyDodDok", "CDN");

            entity.HasIndex(e => e.KddId, "KDDID").IsUnique();

            entity.HasIndex(e => new { e.KddObiTyp, e.KddObiNumer, e.KddObiLp, e.KddObiDtdc, e.KddObiDtwo }, "KDDObiekt");

            entity.Property(e => e.KddGidtyp).HasColumnName("KDD_GIDTyp");
            entity.Property(e => e.KddGidnumer).HasColumnName("KDD_GIDNumer");
            entity.Property(e => e.KddGidlp).HasColumnName("KDD_GIDLp");
            entity.Property(e => e.KddData)
                .HasDefaultValue(0)
                .HasColumnName("KDD_Data");
            entity.Property(e => e.KddGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KDD_GIDFirma");
            entity.Property(e => e.KddId)
                .ValueGeneratedOnAdd()
                .HasColumnName("KDD_Id");
            entity.Property(e => e.KddKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KDD_Kod");
            entity.Property(e => e.KddMagazyn)
                .HasDefaultValue((byte)0)
                .HasColumnName("KDD_Magazyn");
            entity.Property(e => e.KddNaliczono)
                .HasDefaultValue((byte)0)
                .HasColumnName("KDD_Naliczono");
            entity.Property(e => e.KddNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KDD_Nazwa");
            entity.Property(e => e.KddObiDtdc)
                .HasDefaultValue((byte)0)
                .HasColumnName("KDD_ObiDTDC");
            entity.Property(e => e.KddObiDtwo)
                .HasDefaultValue((byte)0)
                .HasColumnName("KDD_ObiDTWO");
            entity.Property(e => e.KddObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("KDD_ObiFirma");
            entity.Property(e => e.KddObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KDD_ObiLp");
            entity.Property(e => e.KddObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("KDD_ObiNumer");
            entity.Property(e => e.KddObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KDD_ObiTyp");
            entity.Property(e => e.KddRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("KDD_Rodzaj");
            entity.Property(e => e.KddWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KDD_Waluta");
            entity.Property(e => e.KddWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KDD_Wartosc");
        });

        modelBuilder.Entity<Kpdzrodla>(entity =>
        {
            entity.HasKey(e => new { e.KpdTrPtyp, e.KpdTrPnumer, e.KpdTrPlp, e.KpdDzknumer }).HasName("KPD_Primary");

            entity.ToTable("KPDZrodla", "CDN");

            entity.HasIndex(e => e.KpdDzknumer, "KPDDzkNumer");

            entity.HasIndex(e => e.KpdR2parId, "KPDR2ParID");

            entity.Property(e => e.KpdTrPtyp).HasColumnName("KPD_TrPTyp");
            entity.Property(e => e.KpdTrPnumer).HasColumnName("KPD_TrPNumer");
            entity.Property(e => e.KpdTrPlp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPD_TrPLp");
            entity.Property(e => e.KpdDzknumer).HasColumnName("KPD_DZKNumer");
            entity.Property(e => e.KpdR2parId)
                .HasDefaultValue(0)
                .HasColumnName("KPD_R2ParID");

            entity.HasOne(d => d.KpdDzknumerNavigation).WithMany(p => p.Kpdzrodlas)
                .HasForeignKey(d => d.KpdDzknumer)
                .HasConstraintName("FK_KPDDzkNumer");
        });

        modelBuilder.Entity<KrajeCelne>(entity =>
        {
            entity.HasKey(e => e.KpcKod).HasName("KPC_Primary");

            entity.ToTable("KrajeCelne", "CDN", tb =>
                {
                    tb.HasTrigger("KrajeCelne_DeleteHandler");
                    tb.HasTrigger("KrajeCelne_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.KpcGkrId, e.KpcNazwaPl }, "KPCGRKID");

            entity.HasIndex(e => e.KpcId, "KPCId").IsUnique();

            entity.HasIndex(e => e.KpcNazwaPl, "KPCNazwaPL");

            entity.Property(e => e.KpcKod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPC_Kod");
            entity.Property(e => e.KpcGkrId)
                .HasDefaultValue(0)
                .HasColumnName("KPC_GKrID");
            entity.Property(e => e.KpcId)
                .ValueGeneratedOnAdd()
                .HasColumnName("KPC_Id");
            entity.Property(e => e.KpcNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPC_Nazwa");
            entity.Property(e => e.KpcNazwaPl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KPC_NazwaPL");
        });

        modelBuilder.Entity<KreatorKodowElem>(entity =>
        {
            entity.HasKey(e => e.KrEId).HasName("KrE_Primary");

            entity.ToTable("KreatorKodowElem", "CDN", tb => tb.HasTrigger("KreatorKodowElem_PozycjaDelete"));

            entity.HasIndex(e => new { e.KrEKrnId, e.KrEPozycja }, "KrENaglowek");

            entity.Property(e => e.KrEId).HasColumnName("KrE_Id");
            entity.Property(e => e.KrECzasMod)
                .HasDefaultValue(0)
                .HasColumnName("KrE_CzasMod");
            entity.Property(e => e.KrEKrnId)
                .HasDefaultValue(0)
                .HasColumnName("KrE_KrnId");
            entity.Property(e => e.KrEObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("KrE_ObiFirma");
            entity.Property(e => e.KrEObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KrE_ObiLp");
            entity.Property(e => e.KrEObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("KrE_ObiNumer");
            entity.Property(e => e.KrEObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KrE_ObiTyp");
            entity.Property(e => e.KrEOpeMod)
                .HasDefaultValue(0)
                .HasColumnName("KrE_OpeMod");
            entity.Property(e => e.KrEPobierzDoNazwy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KrE_PobierzDoNazwy");
            entity.Property(e => e.KrEPozycja)
                .HasDefaultValue(0)
                .HasColumnName("KrE_Pozycja");

            entity.HasOne(d => d.KrEKrn).WithMany(p => p.KreatorKodowElems)
                .HasForeignKey(d => d.KrEKrnId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KrENaglowek");
        });

        modelBuilder.Entity<KreatorKodowNag>(entity =>
        {
            entity.HasKey(e => e.KrNId).HasName("KrN_Primary");

            entity.ToTable("KreatorKodowNag", "CDN", tb => tb.HasTrigger("KreatorKodowNag_DeleteHandler"));

            entity.HasIndex(e => e.KrNKod, "KrNKod").IsUnique();

            entity.Property(e => e.KrNId).HasColumnName("KrN_Id");
            entity.Property(e => e.KrNAutonumerIloscCyfr)
                .HasDefaultValue((byte)0)
                .HasColumnName("KrN_AutonumerIloscCyfr");
            entity.Property(e => e.KrNAutonumerPoczatkowy)
                .HasDefaultValue(0)
                .HasColumnName("KrN_AutonumerPoczatkowy");
            entity.Property(e => e.KrNAutonumerTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KrN_AutonumerTyp");
            entity.Property(e => e.KrNBrakSeparatora)
                .HasDefaultValue((byte)0)
                .HasColumnName("KrN_BrakSeparatora");
            entity.Property(e => e.KrNCzasMod)
                .HasDefaultValue(0)
                .HasColumnName("KrN_CzasMod");
            entity.Property(e => e.KrNKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KrN_Kod");
            entity.Property(e => e.KrNNazwa)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KrN_Nazwa");
            entity.Property(e => e.KrNOpeMod)
                .HasDefaultValue(0)
                .HasColumnName("KrN_OpeMod");
            entity.Property(e => e.KrNOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KrN_Opis");
            entity.Property(e => e.KrNSeparator)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KrN_Separator");
        });

        modelBuilder.Entity<KregiKosztowElem>(entity =>
        {
            entity.HasKey(e => new { e.KkeKknid, e.KkeLp }).HasName("KKE_Primary");

            entity.ToTable("KregiKosztowElem", "CDN");

            entity.Property(e => e.KkeKknid).HasColumnName("KKE_KKNID");
            entity.Property(e => e.KkeLp).HasColumnName("KKE_Lp");
            entity.Property(e => e.KkeFiltr)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKE_Filtr");
            entity.Property(e => e.KkeMaskaKonta)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKE_MaskaKonta");
            entity.Property(e => e.KkeNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKE_Nazwa");
            entity.Property(e => e.KkeStronaPrzeciwna)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKE_StronaPrzeciwna");

            entity.HasOne(d => d.KkeKkn).WithMany(p => p.KregiKosztowElems)
                .HasForeignKey(d => d.KkeKknid)
                .HasConstraintName("FK_KKEPrimary");
        });

        modelBuilder.Entity<KregiKosztowNag>(entity =>
        {
            entity.HasKey(e => e.KknId).HasName("KKN_Primary");

            entity.ToTable("KregiKosztowNag", "CDN");

            entity.HasIndex(e => e.KknNazwa, "KKNNazwa").IsUnique();

            entity.Property(e => e.KknId).HasColumnName("KKN_ID");
            entity.Property(e => e.KknArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKN_Archiwalny");
            entity.Property(e => e.KknDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKN_Dziennik");
            entity.Property(e => e.KknNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KKN_Nazwa");
            entity.Property(e => e.KknOkres)
                .HasDefaultValue(0)
                .HasColumnName("KKN_Okres");
            entity.Property(e => e.KknReakcja)
                .HasDefaultValue((byte)1)
                .HasColumnName("KKN_Reakcja");
            entity.Property(e => e.KknUwzgledniaStrony)
                .HasDefaultValue((byte)0)
                .HasColumnName("KKN_UwzgledniaStrony");
        });

        modelBuilder.Entity<KseFdokumenty>(entity =>
        {
            entity.HasKey(e => e.KsfId).HasName("KSF_Primary");

            entity.ToTable("KSeFDokumenty", "CDN", tb => tb.HasTrigger("KSeFDokumenty_Duplikacje"));

            entity.HasIndex(e => new { e.KsfDokTyp, e.KsfDokNumer }, "KSFDokument");

            entity.Property(e => e.KsfId).HasColumnName("KSF_ID");
            entity.Property(e => e.KsfDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("KSF_DokNumer");
            entity.Property(e => e.KsfDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSF_DokTyp");
            entity.Property(e => e.KsfDokumentObcy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_DokumentObcy");
            entity.Property(e => e.KsfFrsId)
                .HasDefaultValue(0)
                .HasColumnName("KSF_FrsID");
            entity.Property(e => e.KsfKodPocztowySprzedawcy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_KodPocztowySprzedawcy");
            entity.Property(e => e.KsfKwalifikacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSF_Kwalifikacja");
            entity.Property(e => e.KsfMiejscowoscSprzedawcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_MiejscowoscSprzedawcy");
            entity.Property(e => e.KsfNazwaSprzedawcy)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_NazwaSprzedawcy");
            entity.Property(e => e.KsfNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSF_Netto");
            entity.Property(e => e.KsfNipnabywcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_NIPNabywcy");
            entity.Property(e => e.KsfNipsprzedawcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_NIPSprzedawcy");
            entity.Property(e => e.KsfNrDomuSprzedawcy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_NrDomuSprzedawcy");
            entity.Property(e => e.KsfNrLokaluSprzedawcy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_NrLokaluSprzedawcy");
            entity.Property(e => e.KsfNrRefDokumentu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_NrRefDokumentu");
            entity.Property(e => e.KsfNrRefSesji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_NrRefSesji");
            entity.Property(e => e.KsfNumer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_Numer");
            entity.Property(e => e.KsfOdrzucony)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSF_Odrzucony");
            entity.Property(e => e.KsfOpeUpo)
                .HasDefaultValue(0)
                .HasColumnName("KSF_OpeUPO");
            entity.Property(e => e.KsfOpeWys)
                .HasDefaultValue(0)
                .HasColumnName("KSF_OpeWys");
            entity.Property(e => e.KsfOpis)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_Opis");
            entity.Property(e => e.KsfPocztaSprzedawcy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_PocztaSprzedawcy");
            entity.Property(e => e.KsfRodzajFaktury)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_RodzajFaktury");
            entity.Property(e => e.KsfStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSF_Status");
            entity.Property(e => e.KsfStatusWysylki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_StatusWysylki");
            entity.Property(e => e.KsfTstampPrzyjecia)
                .HasDefaultValue(0)
                .HasColumnName("KSF_TStampPrzyjecia");
            entity.Property(e => e.KsfTstampUpo)
                .HasDefaultValue(0)
                .HasColumnName("KSF_TStampUPO");
            entity.Property(e => e.KsfTstampWyslania)
                .HasDefaultValue(0)
                .HasColumnName("KSF_TStampWyslania");
            entity.Property(e => e.KsfTypOperacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSF_TypOperacji");
            entity.Property(e => e.KsfUlicaSprzedawcy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_UlicaSprzedawcy");
            entity.Property(e => e.KsfVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSF_VAT");
            entity.Property(e => e.KsfWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSF_Waluta");
        });

        modelBuilder.Entity<KsoElem>(entity =>
        {
            entity.HasKey(e => new { e.KseGidnumer, e.KseGidlp }).HasName("KSE_Primary");

            entity.ToTable("KsoElem", "CDN", tb =>
                {
                    tb.HasTrigger("KsoElem_DeleteHandler");
                    tb.HasTrigger("KsoElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.KseDelnumer, e.KseDellp }, "KSEDEL");

            entity.HasIndex(e => e.KseKlnid, "KSEKlucz");

            entity.HasIndex(e => e.KseSidnumer, "KSESIS");

            entity.Property(e => e.KseGidnumer).HasColumnName("KSE_GIDNumer");
            entity.Property(e => e.KseGidlp).HasColumnName("KSE_GIDLp");
            entity.Property(e => e.KseAtrybuty)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_Atrybuty");
            entity.Property(e => e.KseBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_Bufor");
            entity.Property(e => e.KseCoIle)
                .HasDefaultValue((short)0)
                .HasColumnName("KSE_CoIle");
            entity.Property(e => e.KseDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("KSE_DataCzasM");
            entity.Property(e => e.KseDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("KSE_DataCzasW");
            entity.Property(e => e.KseDataKoncowa)
                .HasDefaultValue(0)
                .HasColumnName("KSE_DataKoncowa");
            entity.Property(e => e.KseDataNast)
                .HasDefaultValue(0)
                .HasColumnName("KSE_DataNast");
            entity.Property(e => e.KseDataOstatnia)
                .HasDefaultValue(0)
                .HasColumnName("KSE_DataOstatnia");
            entity.Property(e => e.KseDataPoczatkowa)
                .HasDefaultValue(0)
                .HasColumnName("KSE_DataPoczatkowa");
            entity.Property(e => e.KseDellp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSE_DELLp");
            entity.Property(e => e.KseDelnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSE_DELNumer");
            entity.Property(e => e.KseDzkopis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSE_DZKOpis");
            entity.Property(e => e.KseFiltrSql)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_FiltrSQL");
            entity.Property(e => e.KseGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KSE_GIDFirma");
            entity.Property(e => e.KseGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSE_GIDTyp");
            entity.Property(e => e.KseHarmoTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_HarmoTyp");
            entity.Property(e => e.KseJednostka)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_Jednostka");
            entity.Property(e => e.KseKcwyrazenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_KCWyrazenie");
            entity.Property(e => e.KseKdwyrazenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_KDWyrazenie");
            entity.Property(e => e.KseKlnid)
                .HasDefaultValue(0)
                .HasColumnName("KSE_KLNID");
            entity.Property(e => e.KseKolejnosc)
                .HasDefaultValue(0)
                .HasColumnName("KSE_Kolejnosc");
            entity.Property(e => e.KseKoniecMiesiaca)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_KoniecMiesiaca");
            entity.Property(e => e.KseKontoCredit)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSE_KontoCredit");
            entity.Property(e => e.KseKontoDebet)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSE_KontoDebet");
            entity.Property(e => e.KseKwota)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("KSE_Kwota");
            entity.Property(e => e.KseKwotaTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_KwotaTyp");
            entity.Property(e => e.KseMaskaKonta)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSE_MaskaKonta");
            entity.Property(e => e.KseOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSE_OpeMNumer");
            entity.Property(e => e.KseOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSE_OpeWNumer");
            entity.Property(e => e.KseOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSE_Opis");
            entity.Property(e => e.KseRozKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSE_RozKwota");
            entity.Property(e => e.KseRozKwotaPozostaje)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSE_RozKwotaPozostaje");
            entity.Property(e => e.KseRozKwotaZaksiegowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSE_RozKwotaZaksiegowana");
            entity.Property(e => e.KseSidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KSE_SIDFirma");
            entity.Property(e => e.KseSidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSE_SIDLp");
            entity.Property(e => e.KseSidnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSE_SIDNumer");
            entity.Property(e => e.KseSidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSE_SIDTyp");
            entity.Property(e => e.KseWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSE_Waluta");
            entity.Property(e => e.KseZalozKontoCredit)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_ZalozKontoCredit");
            entity.Property(e => e.KseZalozKontoDebet)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSE_ZalozKontoDebet");

            entity.HasOne(d => d.KseGidnumerNavigation).WithMany(p => p.KsoElems)
                .HasForeignKey(d => d.KseGidnumer)
                .HasConstraintName("FK_KSEPrimary");
        });

        modelBuilder.Entity<KsoNag>(entity =>
        {
            entity.HasKey(e => e.KsnGidnumer).HasName("KSN_Primary");

            entity.ToTable("KsoNag", "CDN", tb => tb.HasTrigger("KsoNag_DeleteHandler"));

            entity.HasIndex(e => new { e.KsnDataNast, e.KsnKolejnosc, e.KsnGidtyp, e.KsnGidnumer }, "KSNData").IsUnique();

            entity.HasIndex(e => new { e.KsnDataNast, e.KsnKolejnosc }, "KSNKolejnosc");

            entity.HasIndex(e => new { e.KsnNazwa, e.KsnGidtyp, e.KsnGidnumer }, "KSNNazwa").IsUnique();

            entity.Property(e => e.KsnGidnumer).HasColumnName("KSN_GIDNumer");
            entity.Property(e => e.KsnAkcjaKsiegowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_AkcjaKsiegowania");
            entity.Property(e => e.KsnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("KSN_Aktywny");
            entity.Property(e => e.KsnArchiwalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_Archiwalne");
            entity.Property(e => e.KsnAtrybuty)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_Atrybuty");
            entity.Property(e => e.KsnBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_Bufor");
            entity.Property(e => e.KsnCoile)
                .HasDefaultValue((short)0)
                .HasColumnName("KSN_Coile");
            entity.Property(e => e.KsnDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("KSN_DataCzasM");
            entity.Property(e => e.KsnDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("KSN_DataCzasW");
            entity.Property(e => e.KsnDataKoncowa)
                .HasDefaultValue(0)
                .HasColumnName("KSN_DataKoncowa");
            entity.Property(e => e.KsnDataNast)
                .HasDefaultValue(0)
                .HasColumnName("KSN_DataNast");
            entity.Property(e => e.KsnDataOstatnia)
                .HasDefaultValue(0)
                .HasColumnName("KSN_DataOstatnia");
            entity.Property(e => e.KsnDataPoczatkowa)
                .HasDefaultValue(0)
                .HasColumnName("KSN_DataPoczatkowa");
            entity.Property(e => e.KsnDokumentZrodlowy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSN_DokumentZrodlowy");
            entity.Property(e => e.KsnDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSN_Dziennik");
            entity.Property(e => e.KsnDzkopis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSN_DZKOpis");
            entity.Property(e => e.KsnGenerujUnm)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_GenerujUNM");
            entity.Property(e => e.KsnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KSN_GIDFirma");
            entity.Property(e => e.KsnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSN_GIDLp");
            entity.Property(e => e.KsnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSN_GIDTyp");
            entity.Property(e => e.KsnJednostka)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_Jednostka");
            entity.Property(e => e.KsnKolejnosc)
                .HasDefaultValue(0)
                .HasColumnName("KSN_Kolejnosc");
            entity.Property(e => e.KsnNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSN_Nazwa");
            entity.Property(e => e.KsnOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSN_OpeMNumer");
            entity.Property(e => e.KsnOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSN_OpeWNumer");
            entity.Property(e => e.KsnOpis)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSN_Opis");
            entity.Property(e => e.KsnPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_Przypomnienie");
            entity.Property(e => e.KsnSposob)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_Sposob");
            entity.Property(e => e.KsnTstamp)
                .HasDefaultValue(0)
                .HasColumnName("KSN_TStamp");
            entity.Property(e => e.KsnWgHarmoPozycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSN_WgHarmoPozycji");
            entity.Property(e => e.KsnZadId)
                .HasDefaultValue(0)
                .HasColumnName("KSN_ZadID");
        });

        modelBuilder.Entity<KsoParametry>(entity =>
        {
            entity.HasKey(e => new { e.KspGidnumer, e.KspGidlp, e.KspKlpid }).HasName("KSP_Primary");

            entity.ToTable("KsoParametry", "CDN");

            entity.Property(e => e.KspGidnumer).HasColumnName("KSP_GIDNumer");
            entity.Property(e => e.KspGidlp).HasColumnName("KSP_GIDLp");
            entity.Property(e => e.KspKlpid).HasColumnName("KSP_KLPID");
            entity.Property(e => e.KspGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KSP_GIDFirma");
            entity.Property(e => e.KspGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSP_GIDTyp");
            entity.Property(e => e.KspWyrazenie)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KSP_Wyrazenie");

            entity.HasOne(d => d.KspKlp).WithMany(p => p.KsoParametries)
                .HasForeignKey(d => d.KspKlpid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KSPParametr");

            entity.HasOne(d => d.KsoElem).WithMany(p => p.KsoParametries)
                .HasForeignKey(d => new { d.KspGidnumer, d.KspGidlp })
                .HasConstraintName("FK_KSPPrimary");
        });

        modelBuilder.Entity<KsoRaty>(entity =>
        {
            entity.HasKey(e => e.KsrId).HasName("KSR_Primary");

            entity.ToTable("KsoRaty", "CDN");

            entity.HasIndex(e => new { e.KsrDelnumer, e.KsrDellp }, "KSRDEL");

            entity.HasIndex(e => new { e.KsrKsenumer, e.KsrKselp }, "KSRKSE");

            entity.Property(e => e.KsrId).HasColumnName("KSR_ID");
            entity.Property(e => e.KsrDataKsiegowaniaPlan)
                .HasDefaultValue(0)
                .HasColumnName("KSR_DataKsiegowaniaPlan");
            entity.Property(e => e.KsrDellp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSR_DELLp");
            entity.Property(e => e.KsrDelnumer)
                .HasDefaultValue(0)
                .HasColumnName("KSR_DELNumer");
            entity.Property(e => e.KsrKselp)
                .HasDefaultValue((short)0)
                .HasColumnName("KSR_KSELp");
            entity.Property(e => e.KsrKsenumer)
                .HasDefaultValue(0)
                .HasColumnName("KSR_KSENumer");
            entity.Property(e => e.KsrKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KSR_Kwota");
            entity.Property(e => e.KsrZmodyfikowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("KSR_Zmodyfikowana");

            entity.HasOne(d => d.KsoElem).WithMany(p => p.KsoRaties)
                .HasForeignKey(d => new { d.KsrKsenumer, d.KsrKselp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KSRKSE");
        });

        modelBuilder.Entity<ListyPlac>(entity =>
        {
            entity.HasKey(e => e.LplId).HasName("LPL_Primary");

            entity.ToTable("ListyPlac", "CDN");

            entity.HasIndex(e => new { e.LplTyp, e.LplRok, e.LplMiesiac, e.LplSeria, e.LplNumer }, "LPLNumer").IsUnique();

            entity.Property(e => e.LplId).HasColumnName("LPL_Id");
            entity.Property(e => e.LplAktywny)
                .HasDefaultValue(0)
                .HasColumnName("LPL_Aktywny");
            entity.Property(e => e.LplCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_CechaOpis");
            entity.Property(e => e.LplDataDo)
                .HasDefaultValue(0)
                .HasColumnName("LPL_DataDo");
            entity.Property(e => e.LplDataOd)
                .HasDefaultValue(0)
                .HasColumnName("LPL_DataOd");
            entity.Property(e => e.LplDataWyp)
                .HasDefaultValue(0)
                .HasColumnName("LPL_DataWyp");
            entity.Property(e => e.LplDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_DokumentObcy");
            entity.Property(e => e.LplDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_Dziennik");
            entity.Property(e => e.LplFrsId)
                .HasDefaultValue(0)
                .HasColumnName("LPL_FrsId");
            entity.Property(e => e.LplMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("LPL_Miesiac");
            entity.Property(e => e.LplModyfData)
                .HasDefaultValue(0)
                .HasColumnName("LPL_ModyfData");
            entity.Property(e => e.LplModyfOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("LPL_ModyfOpeNumer");
            entity.Property(e => e.LplNumer)
                .HasDefaultValue(0)
                .HasColumnName("LPL_Numer");
            entity.Property(e => e.LplOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_Opis");
            entity.Property(e => e.LplPdnnumer)
                .HasDefaultValue(0)
                .HasColumnName("LPL_PDNNumer");
            entity.Property(e => e.LplPdntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("LPL_PDNTyp");
            entity.Property(e => e.LplPitMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("LPL_PitMiesiac");
            entity.Property(e => e.LplPitRok)
                .HasDefaultValue((short)0)
                .HasColumnName("LPL_PitRok");
            entity.Property(e => e.LplRok)
                .HasDefaultValue((short)0)
                .HasColumnName("LPL_Rok");
            entity.Property(e => e.LplSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("LPL_SCHNumer");
            entity.Property(e => e.LplSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("LPL_SCHTyp");
            entity.Property(e => e.LplSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_Seria");
            entity.Property(e => e.LplStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("LPL_Status");
            entity.Property(e => e.LplTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("LPL_Typ");
            entity.Property(e => e.LplWprData)
                .HasDefaultValue(0)
                .HasColumnName("LPL_WprData");
            entity.Property(e => e.LplWprOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("LPL_WprOpeNumer");
            entity.Property(e => e.LplWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LPL_WsDziennik");
            entity.Property(e => e.LplWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("LPL_WsSCHNumer");
            entity.Property(e => e.LplWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("LPL_WsSCHTyp");
            entity.Property(e => e.LplWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("LPL_WsStosujDziennik");
            entity.Property(e => e.LplWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("LPL_WsStosujSchemat");
            entity.Property(e => e.LplWydzial)
                .HasDefaultValue(0)
                .HasColumnName("LPL_Wydzial");
            entity.Property(e => e.LplZusMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("LPL_ZusMiesiac");
            entity.Property(e => e.LplZusRok)
                .HasDefaultValue((short)0)
                .HasColumnName("LPL_ZusRok");
        });

        modelBuilder.Entity<Loginy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Loginy", "CDN");

            entity.HasIndex(e => e.LgnTyp, "LgnTyp").IsUnique();

            entity.Property(e => e.LgnHaslo)
                .HasMaxLength(256)
                .HasColumnName("Lgn_Haslo");
            entity.Property(e => e.LgnLogin)
                .HasMaxLength(99)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Lgn_Login");
            entity.Property(e => e.LgnTyp).HasColumnName("Lgn_Typ");
        });

        modelBuilder.Entity<LokalizacjeDok>(entity =>
        {
            entity.HasKey(e => e.LoDId).HasName("LoD_Primary");

            entity.ToTable("LokalizacjeDok", "CDN");

            entity.HasIndex(e => new { e.LoDDokTyp, e.LoDDokNumer }, "LoDDokument");

            entity.Property(e => e.LoDId).HasColumnName("LoD_Id");
            entity.Property(e => e.LoDDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("LoD_DokFirma");
            entity.Property(e => e.LoDDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("LoD_DokLp");
            entity.Property(e => e.LoDDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("LoD_DokNumer");
            entity.Property(e => e.LoDDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("LoD_DokTyp");
            entity.Property(e => e.LoDOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LoD_Opis");
            entity.Property(e => e.LoDUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LoD_URL");

            entity.HasOne(d => d.LoDDokNumerNavigation).WithMany(p => p.LokalizacjeDoks)
                .HasForeignKey(d => d.LoDDokNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_LoDDokument");
        });

        modelBuilder.Entity<MaNopisy>(entity =>
        {
            entity.HasKey(e => new { e.MnOMaNnumer, e.MnOMaNlp }).HasName("MnO_Primary");

            entity.ToTable("MaNOpisy", "CDN");

            entity.Property(e => e.MnOMaNnumer).HasColumnName("MnO_MaNNumer");
            entity.Property(e => e.MnOMaNlp).HasColumnName("MnO_MaNLp");
            entity.Property(e => e.MnOMaNfirma)
                .HasDefaultValue(0)
                .HasColumnName("MnO_MaNFirma");
            entity.Property(e => e.MnOMaNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MnO_MaNTyp");
            entity.Property(e => e.MnOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MnO_Opis");
            entity.Property(e => e.MnOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("MnO_Typ");

            entity.HasOne(d => d.MnOMaNnumerNavigation).WithMany(p => p.MaNopisies)
                .HasForeignKey(d => d.MnOMaNnumer)
                .HasConstraintName("FK_MnOPrimary");
        });

        modelBuilder.Entity<MagAdresy>(entity =>
        {
            entity.HasKey(e => e.MgAId).HasName("MgA_Primary");

            entity.ToTable("MagAdresy", "CDN", tb =>
                {
                    tb.HasTrigger("MagAdresyAlias_DeleteHandler");
                    tb.HasTrigger("MagAdresy_DeleteHandler");
                    tb.HasTrigger("MagAdresy_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.MgAMgOid, e.MgASegment1, e.MgASegment2, e.MgASegment3, e.MgASegment4 }, "MgAAdres").IsUnique();

            entity.Property(e => e.MgAId).HasColumnName("MgA_Id");
            entity.Property(e => e.MgACzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("MgA_CzasModyfikacji");
            entity.Property(e => e.MgAMgOid)
                .HasDefaultValue(0)
                .HasColumnName("MgA_MgOId");
            entity.Property(e => e.MgAMpaid)
                .HasDefaultValue(0)
                .HasColumnName("MgA_MPAId");
            entity.Property(e => e.MgAOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("MgA_OpeMNumer");
            entity.Property(e => e.MgAOpis)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgA_Opis");
            entity.Property(e => e.MgASegment1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgA_Segment1");
            entity.Property(e => e.MgASegment2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgA_Segment2");
            entity.Property(e => e.MgASegment3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgA_Segment3");
            entity.Property(e => e.MgASegment4)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgA_Segment4");
        });

        modelBuilder.Entity<MagElem>(entity =>
        {
            entity.HasKey(e => new { e.MaEGidnumer, e.MaEGidlp }).HasName("MaE_Primary");

            entity.ToTable("MagElem", "CDN", tb =>
                {
                    tb.HasTrigger("MagElem_DeleteHandler");
                    tb.HasTrigger("MagElem_DeleteOrphaned_TwrPartie");
                    tb.HasTrigger("MagElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.MaETpaId, "MaEPartia");

            entity.HasIndex(e => e.MaETwrNumer, "MaETowar");

            entity.HasIndex(e => new { e.MaETwrKod, e.MaEGidnumer, e.MaEGidlp }, "MaETwrKod").IsUnique();

            entity.Property(e => e.MaEGidnumer).HasColumnName("MaE_GIDNumer");
            entity.Property(e => e.MaEGidlp).HasColumnName("MaE_GIDLp");
            entity.Property(e => e.MaECck2numer)
                .HasDefaultValue(0)
                .HasColumnName("MaE_CCK2Numer");
            entity.Property(e => e.MaECck2typ)
                .HasDefaultValue((short)0)
                .HasColumnName("MaE_CCK2Typ");
            entity.Property(e => e.MaECcknumer)
                .HasDefaultValue(0)
                .HasColumnName("MaE_CCKNumer");
            entity.Property(e => e.MaECcktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaE_CCKTyp");
            entity.Property(e => e.MaECecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaE_Cecha");
            entity.Property(e => e.MaECecha2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaE_Cecha2");
            entity.Property(e => e.MaEDataW)
                .HasDefaultValue(0)
                .HasColumnName("MaE_DataW");
            entity.Property(e => e.MaEEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaE_Ean");
            entity.Property(e => e.MaEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaE_GIDTyp");
            entity.Property(e => e.MaEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("MaE_Ilosc");
            entity.Property(e => e.MaEIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("MaE_IloscMax");
            entity.Property(e => e.MaEIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("MaE_IloscMin");
            entity.Property(e => e.MaEJednostkaLog)
                .HasDefaultValue(0)
                .HasColumnName("MaE_JednostkaLog");
            entity.Property(e => e.MaEJlogWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaE_JLogWMS");
            entity.Property(e => e.MaEJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaE_JmFormat");
            entity.Property(e => e.MaEJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaE_JmFormatZ");
            entity.Property(e => e.MaEJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaE_JmZ");
            entity.Property(e => e.MaEOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaE_OpeFirma");
            entity.Property(e => e.MaEOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaE_OpeLp");
            entity.Property(e => e.MaEOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaE_OpeNumer");
            entity.Property(e => e.MaEOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaE_OpeTyp");
            entity.Property(e => e.MaEOpis)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaE_Opis");
            entity.Property(e => e.MaEPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("MaE_Pozycja");
            entity.Property(e => e.MaEPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("MaE_PrzeliczL");
            entity.Property(e => e.MaEPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("MaE_PrzeliczM");
            entity.Property(e => e.MaEStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaE_Status");
            entity.Property(e => e.MaETpaId)
                .HasDefaultValue(0)
                .HasColumnName("MaE_TPaId");
            entity.Property(e => e.MaETwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaE_TwrKod");
            entity.Property(e => e.MaETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaE_TwrNumer");
            entity.Property(e => e.MaETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaE_TwrTyp");
            entity.Property(e => e.MaETypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaE_TypJm");

            entity.HasOne(d => d.MaEGidnumerNavigation).WithMany(p => p.MagElems)
                .HasForeignKey(d => d.MaEGidnumer)
                .HasConstraintName("FK_MaEPrimary");
        });

        modelBuilder.Entity<MagLelem>(entity =>
        {
            entity.HasKey(e => new { e.MaLMaEnumer, e.MaLMaElp, e.MaLPobid }).HasName("MaL_Primary");

            entity.ToTable("MagLElem", "CDN");

            entity.HasIndex(e => new { e.MaLPobid, e.MaLMaEnumer, e.MaLMaElp }, "MaLPOBID").IsUnique();

            entity.Property(e => e.MaLMaEnumer).HasColumnName("MaL_MaENumer");
            entity.Property(e => e.MaLMaElp).HasColumnName("MaL_MaELp");
            entity.Property(e => e.MaLPobid).HasColumnName("MaL_POBID");
            entity.Property(e => e.MaLMaEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaL_MaETyp");

            entity.HasOne(d => d.MaLPob).WithMany(p => p.MagLelems)
                .HasForeignKey(d => d.MaLPobid)
                .HasConstraintName("FK_MaLPOBID");

            entity.HasOne(d => d.MagElem).WithMany(p => p.MagLelems)
                .HasForeignKey(d => new { d.MaLMaEnumer, d.MaLMaElp })
                .HasConstraintName("FK_MaLPrimary");
        });

        modelBuilder.Entity<MagLinki>(entity =>
        {
            entity.HasKey(e => new { e.MgLFrsId, e.MgLDokTyp, e.MgLMagNumer }).HasName("MgL_Primary");

            entity.ToTable("MagLinki", "CDN");

            entity.Property(e => e.MgLFrsId).HasColumnName("MgL_FrsId");
            entity.Property(e => e.MgLDokTyp).HasColumnName("MgL_DokTyp");
            entity.Property(e => e.MgLMagNumer).HasColumnName("MgL_MagNumer");
        });

        modelBuilder.Entity<MagNag>(entity =>
        {
            entity.HasKey(e => e.MaNGidnumer).HasName("MaN_Primary");

            entity.ToTable("MagNag", "CDN", tb =>
                {
                    tb.HasTrigger("MagNagAlias1_DeleteHandler");
                    tb.HasTrigger("MagNagAlias_DeleteHandler");
                    tb.HasTrigger("MagNag_DeleteAtrybutyHist");
                    tb.HasTrigger("MagNag_DeleteHandler");
                    tb.HasTrigger("MagNag_InsertUpdateHandler");
                    tb.HasTrigger("MagNag_LastMod_OFFL");
                    tb.HasTrigger("MagNag_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.MaNTrMnumer, e.MaNTrNtyp, e.MaNRokMiesiac, e.MaNTrNrok, e.MaNTrNmiesiac, e.MaNTrNseria, e.MaNTrNnumer, e.MaNTrNlp }, "MaNData").IsUnique();

            entity.HasIndex(e => e.MaNData3, "MaNDataWystawienia");

            entity.HasIndex(e => new { e.MaNKntNumer, e.MaNKntTyp }, "MaNKontrah");

            entity.HasIndex(e => e.MaNKnAnumer, "MaNKontrahAdr");

            entity.HasIndex(e => new { e.MaNTrMnumer, e.MaNTrNtyp, e.MaNTrNrok, e.MaNTrNmiesiac, e.MaNTrNseria, e.MaNTrNnumer, e.MaNTrNlp }, "MaNMagazyn").IsUnique();

            entity.HasIndex(e => e.MaNMagDnumer, "MaNMagazynD");

            entity.HasIndex(e => new { e.MaNStan, e.MaNZewnetrzneId, e.MaNLastMod }, "MaNOptymalizacjaMOS");

            entity.HasIndex(e => new { e.MaNZaNtyp, e.MaNZaNnumer }, "MaNZamowienie");

            entity.HasIndex(e => new { e.MaNZrdTyp, e.MaNZrdNumer }, "MaNZrodlo");

            entity.HasIndex(e => e.MaNTrasaId, "ManTrasa");

            entity.Property(e => e.MaNGidnumer).HasColumnName("MaN_GIDNumer");
            entity.Property(e => e.MaNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("MaN_Aktywny");
            entity.Property(e => e.MaNCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaN_CechaOpis");
            entity.Property(e => e.MaNData3)
                .HasDefaultValue(0)
                .HasColumnName("MaN_Data3");
            entity.Property(e => e.MaNDataDo)
                .HasDefaultValue(0)
                .HasColumnName("MaN_DataDo");
            entity.Property(e => e.MaNDataOd)
                .HasDefaultValue(0)
                .HasColumnName("MaN_DataOd");
            entity.Property(e => e.MaNDataZatwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("MaN_DataZatwierdzenia");
            entity.Property(e => e.MaNFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_FrmNumer");
            entity.Property(e => e.MaNFrsId)
                .HasDefaultValue(0)
                .HasColumnName("MaN_FrsID");
            entity.Property(e => e.MaNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_GIDFirma");
            entity.Property(e => e.MaNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_GIDLp");
            entity.Property(e => e.MaNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_GIDTyp");
            entity.Property(e => e.MaNKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_KnAFirma");
            entity.Property(e => e.MaNKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_KnALp");
            entity.Property(e => e.MaNKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_KnANumer");
            entity.Property(e => e.MaNKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_KnATyp");
            entity.Property(e => e.MaNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_KntFirma");
            entity.Property(e => e.MaNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_KntLp");
            entity.Property(e => e.MaNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_KntNumer");
            entity.Property(e => e.MaNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_KntTyp");
            entity.Property(e => e.MaNKolejnoscZal)
                .HasDefaultValue(0)
                .HasColumnName("MaN_KolejnoscZal");
            entity.Property(e => e.MaNLaczPozycje)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_LaczPozycje");
            entity.Property(e => e.MaNLastMod)
                .HasDefaultValue(0)
                .HasColumnName("MaN_LastMod");
            entity.Property(e => e.MaNLicznikKopii)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_LicznikKopii");
            entity.Property(e => e.MaNMagDfirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_MagDFirma");
            entity.Property(e => e.MaNMagDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_MagDLp");
            entity.Property(e => e.MaNMagDnumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_MagDNumer");
            entity.Property(e => e.MaNMagDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_MagDTyp");
            entity.Property(e => e.MaNOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_OpeFirma");
            entity.Property(e => e.MaNOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("MaN_OpeFirmaM");
            entity.Property(e => e.MaNOpeFirmaR)
                .HasDefaultValue(0)
                .HasColumnName("MaN_OpeFirmaR");
            entity.Property(e => e.MaNOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_OpeLp");
            entity.Property(e => e.MaNOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_OpeLpM");
            entity.Property(e => e.MaNOpeLpR)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_OpeLpR");
            entity.Property(e => e.MaNOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_OpeNumer");
            entity.Property(e => e.MaNOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("MaN_OpeNumerM");
            entity.Property(e => e.MaNOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("MaN_OpeNumerR");
            entity.Property(e => e.MaNOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_OpeTyp");
            entity.Property(e => e.MaNOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_OpeTypM");
            entity.Property(e => e.MaNOpeTypR)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_OpeTypR");
            entity.Property(e => e.MaNPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_Priorytet");
            entity.Property(e => e.MaNRealizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_Realizacja");
            entity.Property(e => e.MaNRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_RezerwujZasoby");
            entity.Property(e => e.MaNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("MaN_RokMiesiac");
            entity.Property(e => e.MaNSpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_SpeFirma");
            entity.Property(e => e.MaNSpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_SpeLp");
            entity.Property(e => e.MaNSpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_SpeNumer");
            entity.Property(e => e.MaNSpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_SpeTyp");
            entity.Property(e => e.MaNSposobDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaN_SposobDostawy");
            entity.Property(e => e.MaNStan)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_Stan");
            entity.Property(e => e.MaNStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_Status");
            entity.Property(e => e.MaNTrMfirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_TrMFirma");
            entity.Property(e => e.MaNTrMlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_TrMLp");
            entity.Property(e => e.MaNTrMnumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_TrMNumer");
            entity.Property(e => e.MaNTrMtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_TrMTyp");
            entity.Property(e => e.MaNTrNlp)
                .HasDefaultValue((short)127)
                .HasColumnName("MaN_TrNLp");
            entity.Property(e => e.MaNTrNmiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_TrNMiesiac");
            entity.Property(e => e.MaNTrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_TrNNumer");
            entity.Property(e => e.MaNTrNrok)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_TrNRok");
            entity.Property(e => e.MaNTrNseria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MaN_TrNSeria");
            entity.Property(e => e.MaNTrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_TrNTyp");
            entity.Property(e => e.MaNTrasaId)
                .HasDefaultValue(0)
                .HasColumnName("MaN_TrasaId");
            entity.Property(e => e.MaNTypZrd)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_TypZrd");
            entity.Property(e => e.MaNWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_WMS");
            entity.Property(e => e.MaNWmsdokWewn)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_WMSDokWewn");
            entity.Property(e => e.MaNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_Wsk");
            entity.Property(e => e.MaNWzwmpelneJpom)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_WZWMPelneJPom");
            entity.Property(e => e.MaNZaNfirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_ZaNFirma");
            entity.Property(e => e.MaNZaNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_ZaNLp");
            entity.Property(e => e.MaNZaNnumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_ZaNNumer");
            entity.Property(e => e.MaNZaNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_ZaNTyp");
            entity.Property(e => e.MaNZewnetrzneId)
                .HasDefaultValue(0)
                .HasColumnName("MaN_ZewnetrzneId");
            entity.Property(e => e.MaNZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("MaN_ZewnetrznySys");
            entity.Property(e => e.MaNZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaN_ZrdFirma");
            entity.Property(e => e.MaNZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_ZrdLp");
            entity.Property(e => e.MaNZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaN_ZrdNumer");
            entity.Property(e => e.MaNZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaN_ZrdTyp");
            entity.Property(e => e.MaNZrodlo)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaN_Zrodlo");
        });

        modelBuilder.Entity<MagObszary>(entity =>
        {
            entity.HasKey(e => e.MgOId).HasName("MgO_Primary");

            entity.ToTable("MagObszary", "CDN", tb =>
                {
                    tb.HasTrigger("MagObszary_DeleteHandler");
                    tb.HasTrigger("MagObszary_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.MgOMagNumer, e.MgOKod }, "MgOKod").IsUnique();

            entity.Property(e => e.MgOId).HasColumnName("MgO_Id");
            entity.Property(e => e.MgOCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("MgO_CzasModyfikacji");
            entity.Property(e => e.MgOKod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgO_Kod");
            entity.Property(e => e.MgOMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("MgO_MagNumer");
            entity.Property(e => e.MgOMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MgO_MagTyp");
            entity.Property(e => e.MgONazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgO_Nazwa");
            entity.Property(e => e.MgOOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("MgO_OpeMNumer");
            entity.Property(e => e.MgOTowary)
                .HasDefaultValue((byte)0)
                .HasColumnName("MgO_Towary");
        });

        modelBuilder.Entity<MagOsobyOdpowiedzialne>(entity =>
        {
            entity.HasKey(e => e.MooId).HasName("MOO_Primary");

            entity.ToTable("MagOsobyOdpowiedzialne", "CDN", tb =>
                {
                    tb.HasTrigger("MagOsobyOdpowiedzialne_DodajAktualizujMOO");
                    tb.HasTrigger("MagOsobyOdpowiedzialne_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.MooMagNumer, "MOOMag");

            entity.HasIndex(e => e.MooPrcNumer, "MOOPrc");

            entity.Property(e => e.MooId).HasColumnName("MOO_Id");
            entity.Property(e => e.MooDataDo)
                .HasDefaultValue(0)
                .HasColumnName("MOO_DataDo");
            entity.Property(e => e.MooDataOd)
                .HasDefaultValue(0)
                .HasColumnName("MOO_DataOd");
            entity.Property(e => e.MooMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("MOO_MagNumer");
            entity.Property(e => e.MooPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("MOO_PrcNumer");
            entity.Property(e => e.MooProcentOdpowiedzialnosci)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MOO_ProcentOdpowiedzialnosci");

            entity.HasOne(d => d.MooMagNumerNavigation).WithMany(p => p.MagOsobyOdpowiedzialnes)
                .HasForeignKey(d => d.MooMagNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MOOMag");
        });

        modelBuilder.Entity<MagParAdr>(entity =>
        {
            entity.HasKey(e => e.MpaId).HasName("MPA_Primary");

            entity.ToTable("MagParAdr", "CDN", tb => tb.HasTrigger("MagParAdr_DeleteHandler"));

            entity.HasIndex(e => e.MpaKod, "MPAKod").IsUnique();

            entity.Property(e => e.MpaId).HasColumnName("MPA_Id");
            entity.Property(e => e.MpaCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("MPA_CzasModyfikacji");
            entity.Property(e => e.MpaDlugosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MPA_Dlugosc");
            entity.Property(e => e.MpaKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MPA_Kod");
            entity.Property(e => e.MpaNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MPA_Nazwa");
            entity.Property(e => e.MpaNosnosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(6, 0)")
                .HasColumnName("MPA_Nosnosc");
            entity.Property(e => e.MpaOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("MPA_OpeMNumer");
            entity.Property(e => e.MpaPriorytetP)
                .HasDefaultValue((byte)0)
                .HasColumnName("MPA_PriorytetP");
            entity.Property(e => e.MpaPriorytetS)
                .HasDefaultValue((byte)0)
                .HasColumnName("MPA_PriorytetS");
            entity.Property(e => e.MpaRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("MPA_Rodzaj");
            entity.Property(e => e.MpaSzerokosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MPA_Szerokosc");
            entity.Property(e => e.MpaWysokosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MPA_Wysokosc");
        });

        modelBuilder.Entity<MagParJednostki>(entity =>
        {
            entity.HasKey(e => new { e.MpjMpaid, e.MpjJednostkaLog }).HasName("MPJ_Primary");

            entity.ToTable("MagParJednostki", "CDN", tb => tb.HasTrigger("MagParJednostki_InsertUpdateHandler"));

            entity.Property(e => e.MpjMpaid).HasColumnName("MPJ_MPAId");
            entity.Property(e => e.MpjJednostkaLog).HasColumnName("MPJ_JednostkaLog");
            entity.Property(e => e.MpjIloscMaks)
                .HasDefaultValue(0)
                .HasColumnName("MPJ_IloscMaks");

            entity.HasOne(d => d.MpjMpa).WithMany(p => p.MagParJednostkis)
                .HasForeignKey(d => d.MpjMpaid)
                .HasConstraintName("FK_MPJPrimary");
        });

        modelBuilder.Entity<MagPelem>(entity =>
        {
            entity.HasKey(e => new { e.MaPGidnumer, e.MaPGidlp, e.MaPSubGidlp }).HasName("MaP_Primary");

            entity.ToTable("MagPElem", "CDN", tb =>
                {
                    tb.HasTrigger("MagPElem_DeleteHandler");
                    tb.HasTrigger("MagPElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.MaPMgAid, "MaPMgA");

            entity.Property(e => e.MaPGidnumer).HasColumnName("MaP_GIDNumer");
            entity.Property(e => e.MaPGidlp).HasColumnName("MaP_GIDLp");
            entity.Property(e => e.MaPSubGidlp).HasColumnName("MaP_SubGIDLp");
            entity.Property(e => e.MaPDlugosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MaP_Dlugosc");
            entity.Property(e => e.MaPGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaP_GIDTyp");
            entity.Property(e => e.MaPIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("MaP_Ilosc");
            entity.Property(e => e.MaPJednostkaLog)
                .HasDefaultValue(0)
                .HasColumnName("MaP_JednostkaLog");
            entity.Property(e => e.MaPMgAid)
                .HasDefaultValue(0)
                .HasColumnName("MaP_MgAId");
            entity.Property(e => e.MaPSzerokosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MaP_Szerokosc");
            entity.Property(e => e.MaPTzMlp)
                .HasDefaultValue(0)
                .HasColumnName("MaP_TzMLp");
            entity.Property(e => e.MaPWysokosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MaP_Wysokosc");
        });

        modelBuilder.Entity<MagPelemArc>(entity =>
        {
            entity.HasKey(e => new { e.AmaPGidnumer, e.AmaPGidlp, e.AmaPSubGidlp }).HasName("AMaP_Primary");

            entity.ToTable("MagPElemArc", "CDN");

            entity.HasIndex(e => e.AmaPMgAid, "AMaPMgA");

            entity.Property(e => e.AmaPGidnumer).HasColumnName("AMaP_GIDNumer");
            entity.Property(e => e.AmaPGidlp).HasColumnName("AMaP_GIDLp");
            entity.Property(e => e.AmaPSubGidlp).HasColumnName("AMaP_SubGIDLp");
            entity.Property(e => e.AmaPDlugosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("AMaP_Dlugosc");
            entity.Property(e => e.AmaPGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaP_GIDTyp");
            entity.Property(e => e.AmaPIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("AMaP_Ilosc");
            entity.Property(e => e.AmaPJednostkaLog)
                .HasDefaultValue(0)
                .HasColumnName("AMaP_JednostkaLog");
            entity.Property(e => e.AmaPMgAid)
                .HasDefaultValue(0)
                .HasColumnName("AMaP_MgAId");
            entity.Property(e => e.AmaPSzerokosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("AMaP_Szerokosc");
            entity.Property(e => e.AmaPTzMlp)
                .HasDefaultValue(0)
                .HasColumnName("AMaP_TzMLp");
            entity.Property(e => e.AmaPWysokosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("AMaP_Wysokosc");

            entity.HasOne(d => d.MagElem).WithMany(p => p.MagPelemArcs)
                .HasForeignKey(d => new { d.AmaPGidnumer, d.AmaPGidlp })
                .HasConstraintName("FK_AMaPPrimary");
        });

        modelBuilder.Entity<MagPromocje>(entity =>
        {
            entity.HasKey(e => e.MprId).HasName("MPR_Primary");

            entity.ToTable("MagPromocje", "CDN", tb => tb.HasTrigger("MagPromocje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.MprMagNumer, e.MprMagTyp, e.MprPrmId }, "MprMag").IsUnique();

            entity.HasIndex(e => e.MprPrmId, "MprPrmId");

            entity.Property(e => e.MprId).HasColumnName("MPR_Id");
            entity.Property(e => e.MprMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("MPR_MagNumer");
            entity.Property(e => e.MprMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MPR_MagTyp");
            entity.Property(e => e.MprPrmId)
                .HasDefaultValue(0)
                .HasColumnName("MPR_PrmId");

            entity.HasOne(d => d.MprPrm).WithMany(p => p.MagPromocjes)
                .HasForeignKey(d => d.MprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MprPrmId");
        });

        modelBuilder.Entity<MagPromocjeView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MagPromocjeView", "CDN");

            entity.Property(e => e.MprvId).HasColumnName("MPRV_Id");
            entity.Property(e => e.MprvMagKod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MPRV_MagKod");
            entity.Property(e => e.MprvMagNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MPRV_MagNazwa");
            entity.Property(e => e.MprvMagNumer).HasColumnName("MPRV_MagNumer");
            entity.Property(e => e.MprvMagTyp).HasColumnName("MPRV_MagTyp");
            entity.Property(e => e.MprvPrmId).HasColumnName("MPRV_PrmId");
        });

        modelBuilder.Entity<MagSelem>(entity =>
        {
            entity.HasKey(e => new { e.MaSGidnumer, e.MaSGidlp, e.MaSSubGidlp }).HasName("MaS_Primary");

            entity.ToTable("MagSElem", "CDN", tb =>
                {
                    tb.HasTrigger("MagSElem_DeleteHandler");
                    tb.HasTrigger("MagSElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.MaSDstNumer, e.MaSTrnTstamp, e.MaSGidtyp, e.MaSGidnumer, e.MaSGidlp, e.MaSSubGidlp }, "MaSDostawa").IsUnique();

            entity.HasIndex(e => new { e.MaSTwrNumer, e.MaSTrnTstamp, e.MaSGidtyp, e.MaSGidnumer, e.MaSGidlp, e.MaSSubGidlp }, "MaSTowar").IsUnique();

            entity.HasIndex(e => new { e.MaSZlcNumer, e.MaSZlcLp, e.MaSZlcTyp }, "MaSZlecenie");

            entity.HasIndex(e => new { e.MaSZrdTyp, e.MaSZrdNumer, e.MaSZrdLp, e.MaSSubZrdLp, e.MaSTrnTstamp, e.MaSGidtyp, e.MaSGidnumer, e.MaSGidlp, e.MaSSubGidlp }, "MaSZrodlo").IsUnique();

            entity.HasIndex(e => e.MaSZrdNumer, "MaSZrodlowy");

            entity.HasIndex(e => e.MaSMagNumer, "MasMag");

            entity.Property(e => e.MaSGidnumer).HasColumnName("MaS_GIDNumer");
            entity.Property(e => e.MaSGidlp).HasColumnName("MaS_GIDLp");
            entity.Property(e => e.MaSSubGidlp).HasColumnName("MaS_SubGIDLp");
            entity.Property(e => e.MaSDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaS_DstFirma");
            entity.Property(e => e.MaSDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_DstLp");
            entity.Property(e => e.MaSDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaS_DstNumer");
            entity.Property(e => e.MaSDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_DstTyp");
            entity.Property(e => e.MaSGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MaS_GIDFirma");
            entity.Property(e => e.MaSGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_GIDTyp");
            entity.Property(e => e.MaSIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("MaS_Ilosc");
            entity.Property(e => e.MaSMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaS_MagFirma");
            entity.Property(e => e.MaSMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_MagLp");
            entity.Property(e => e.MaSMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaS_MagNumer");
            entity.Property(e => e.MaSMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_MagTyp");
            entity.Property(e => e.MaSRezerwacjaZasobu)
                .HasDefaultValue((byte)0)
                .HasColumnName("MaS_RezerwacjaZasobu");
            entity.Property(e => e.MaSSubZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_SubZrdLp");
            entity.Property(e => e.MaSTrnTstamp)
                .HasDefaultValue(0)
                .HasColumnName("MaS_TrnTStamp");
            entity.Property(e => e.MaSTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaS_TwrFirma");
            entity.Property(e => e.MaSTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_TwrLp");
            entity.Property(e => e.MaSTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaS_TwrNumer");
            entity.Property(e => e.MaSTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_TwrTyp");
            entity.Property(e => e.MaSZlcFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaS_ZlcFirma");
            entity.Property(e => e.MaSZlcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_ZlcLp");
            entity.Property(e => e.MaSZlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaS_ZlcNumer");
            entity.Property(e => e.MaSZlcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_ZlcTyp");
            entity.Property(e => e.MaSZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("MaS_ZrdFirma");
            entity.Property(e => e.MaSZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_ZrdLp");
            entity.Property(e => e.MaSZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("MaS_ZrdNumer");
            entity.Property(e => e.MaSZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MaS_ZrdTyp");
        });

        modelBuilder.Entity<MagSelemArc>(entity =>
        {
            entity.HasKey(e => new { e.AmaSGidnumer, e.AmaSGidlp, e.AmaSSubGidlp }).HasName("AMaS_Primary");

            entity.ToTable("MagSElemArc", "CDN");

            entity.HasIndex(e => new { e.AmaSDstNumer, e.AmaSTrnTstamp, e.AmaSGidtyp, e.AmaSGidnumer, e.AmaSGidlp, e.AmaSSubGidlp }, "AMaSDostawa").IsUnique();

            entity.HasIndex(e => new { e.AmaSTwrNumer, e.AmaSTrnTstamp, e.AmaSGidtyp, e.AmaSGidnumer, e.AmaSGidlp, e.AmaSSubGidlp }, "AMaSTowar").IsUnique();

            entity.HasIndex(e => new { e.AmaSZlcNumer, e.AmaSZlcLp, e.AmaSZlcTyp }, "AMaSZlecenie");

            entity.HasIndex(e => new { e.AmaSZrdNumer, e.AmaSZrdLp, e.AmaSSubZrdLp, e.AmaSTrnTstamp, e.AmaSGidtyp, e.AmaSGidnumer, e.AmaSGidlp, e.AmaSSubGidlp }, "AMaSZrodlo").IsUnique();

            entity.Property(e => e.AmaSGidnumer).HasColumnName("AMaS_GIDNumer");
            entity.Property(e => e.AmaSGidlp).HasColumnName("AMaS_GIDLp");
            entity.Property(e => e.AmaSSubGidlp).HasColumnName("AMaS_SubGIDLp");
            entity.Property(e => e.AmaSDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_DstFirma");
            entity.Property(e => e.AmaSDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_DstLp");
            entity.Property(e => e.AmaSDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_DstNumer");
            entity.Property(e => e.AmaSDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_DstTyp");
            entity.Property(e => e.AmaSGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_GIDFirma");
            entity.Property(e => e.AmaSGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_GIDTyp");
            entity.Property(e => e.AmaSIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("AMaS_Ilosc");
            entity.Property(e => e.AmaSMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_MagFirma");
            entity.Property(e => e.AmaSMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_MagLp");
            entity.Property(e => e.AmaSMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_MagNumer");
            entity.Property(e => e.AmaSMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_MagTyp");
            entity.Property(e => e.AmaSSubZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_SubZrdLp");
            entity.Property(e => e.AmaSTrnTstamp)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_TrnTStamp");
            entity.Property(e => e.AmaSTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_TwrFirma");
            entity.Property(e => e.AmaSTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_TwrLp");
            entity.Property(e => e.AmaSTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_TwrNumer");
            entity.Property(e => e.AmaSTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_TwrTyp");
            entity.Property(e => e.AmaSZlcFirma)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_ZlcFirma");
            entity.Property(e => e.AmaSZlcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_ZlcLp");
            entity.Property(e => e.AmaSZlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_ZlcNumer");
            entity.Property(e => e.AmaSZlcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_ZlcTyp");
            entity.Property(e => e.AmaSZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_ZrdFirma");
            entity.Property(e => e.AmaSZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_ZrdLp");
            entity.Property(e => e.AmaSZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("AMaS_ZrdNumer");
            entity.Property(e => e.AmaSZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("AMaS_ZrdTyp");

            entity.HasOne(d => d.MagElem).WithMany(p => p.MagSelemArcs)
                .HasForeignKey(d => new { d.AmaSGidnumer, d.AmaSGidlp })
                .HasConstraintName("FK_AMaSPrimary");
        });

        modelBuilder.Entity<MagStruktura>(entity =>
        {
            entity.HasKey(e => new { e.MgSMgOid, e.MgSSegment }).HasName("MgS_Primary");

            entity.ToTable("MagStruktura", "CDN", tb => tb.HasTrigger("MagStruktura_InsertUpdateHandler"));

            entity.Property(e => e.MgSMgOid).HasColumnName("MgS_MgOId");
            entity.Property(e => e.MgSSegment)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MgS_Segment");
            entity.Property(e => e.MgSOrientacja)
                .HasDefaultValue((short)0)
                .HasColumnName("MgS_Orientacja");
            entity.Property(e => e.MgSStronaDostepu)
                .HasDefaultValue((byte)0)
                .HasColumnName("MgS_StronaDostepu");
            entity.Property(e => e.MgSX)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MgS_X");
            entity.Property(e => e.MgSY)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MgS_Y");
        });

        modelBuilder.Entity<MagTwrObszary>(entity =>
        {
            entity.HasKey(e => new { e.MtoMgOid, e.MtoTwrNumer, e.MtoTwrTyp }).HasName("MTO_Primary");

            entity.ToTable("MagTwrObszary", "CDN", tb => tb.HasTrigger("MagTwrObszary_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.MtoTwrNumer, e.MtoTwrTyp }, "MTOTowar");

            entity.Property(e => e.MtoMgOid).HasColumnName("MTO_MgOId");
            entity.Property(e => e.MtoTwrNumer).HasColumnName("MTO_TwrNumer");
            entity.Property(e => e.MtoTwrTyp).HasColumnName("MTO_TwrTyp");

            entity.HasOne(d => d.MtoMgO).WithMany(p => p.MagTwrObszaries)
                .HasForeignKey(d => d.MtoMgOid)
                .HasConstraintName("FK_MTOPrimary");
        });

        modelBuilder.Entity<MagWybor>(entity =>
        {
            entity.HasKey(e => new { e.MgWSesjaId, e.MgWWatek, e.MgWMagTyp, e.MgWLp }).HasName("MgW_Primary");

            entity.ToTable("MagWybor", "CDN");

            entity.HasIndex(e => new { e.MgWMagTyp, e.MgWMagNumer }, "MGWMagazyn");

            entity.Property(e => e.MgWSesjaId).HasColumnName("MgW_SesjaID");
            entity.Property(e => e.MgWWatek).HasColumnName("MgW_Watek");
            entity.Property(e => e.MgWMagTyp).HasColumnName("MgW_MagTyp");
            entity.Property(e => e.MgWLp).HasColumnName("MgW_Lp");
            entity.Property(e => e.MgWMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("MgW_MagFirma");
            entity.Property(e => e.MgWMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MgW_MagLp");
            entity.Property(e => e.MgWMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("MgW_MagNumer");

            entity.HasOne(d => d.MgWMagNumerNavigation).WithMany(p => p.MagWybors)
                .HasForeignKey(d => d.MgWMagNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MGWMagazyn");
        });

        modelBuilder.Entity<MagazynId>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MagazynID");
        });

        modelBuilder.Entity<Magazyny>(entity =>
        {
            entity.HasKey(e => e.MagGidnumer).HasName("MAG_Primary");

            entity.ToTable("Magazyny", "CDN", tb =>
                {
                    tb.HasTrigger("MagLinkiDeleteMagazyny");
                    tb.HasTrigger("MagLinkiInsertMagazyny");
                    tb.HasTrigger("MagazynyAlias_DeleteHandler");
                    tb.HasTrigger("Magazyny_DeleteHandler");
                    tb.HasTrigger("Magazyny_HistoriaZmian");
                    tb.HasTrigger("Magazyny_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.MagKod, "MagKod").IsUnique();

            entity.HasIndex(e => new { e.MagKntTyp, e.MagKntNumer }, "MagKontrahent");

            entity.HasIndex(e => e.MagNazwa, "MagNazwa");

            entity.HasIndex(e => e.MagPcKid, "MagPOSAgent");

            entity.Property(e => e.MagGidnumer).HasColumnName("MAG_GIDNumer");
            entity.Property(e => e.MagAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Adres");
            entity.Property(e => e.MagAnalizaA)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MAG_AnalizaA");
            entity.Property(e => e.MagAnalizaAbcxyz)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_AnalizaABCXYZ");
            entity.Property(e => e.MagAnalizaB)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MAG_AnalizaB");
            entity.Property(e => e.MagAnalizaX)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MAG_AnalizaX");
            entity.Property(e => e.MagAnalizaY)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MAG_AnalizaY");
            entity.Property(e => e.MagCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("MAG_CzasModyfikacji");
            entity.Property(e => e.MagDataInw)
                .HasDefaultValue(0)
                .HasColumnName("MAG_DataInw");
            entity.Property(e => e.MagGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MAG_GIDFirma");
            entity.Property(e => e.MagGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MAG_GIDLp");
            entity.Property(e => e.MagGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MAG_GIDTyp");
            entity.Property(e => e.MagKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("MAG_KntFirma");
            entity.Property(e => e.MagKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MAG_KntLp");
            entity.Property(e => e.MagKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("MAG_KntNumer");
            entity.Property(e => e.MagKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MAG_KntTyp");
            entity.Property(e => e.MagKod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Kod");
            entity.Property(e => e.MagKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_KodP");
            entity.Property(e => e.MagKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Konto");
            entity.Property(e => e.MagKontoInw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_KontoInw");
            entity.Property(e => e.MagKontrolaIlosciWzwm)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_KontrolaIlosciWZWM");
            entity.Property(e => e.MagKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Kraj");
            entity.Property(e => e.MagMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Miasto");
            entity.Property(e => e.MagNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Nazwa");
            entity.Property(e => e.MagOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("MAG_OpeMNumer");
            entity.Property(e => e.MagOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Opis");
            entity.Property(e => e.MagPcKid)
                .HasDefaultValue(0)
                .HasColumnName("MAG_PcKId");
            entity.Property(e => e.MagPico)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_Pico");
            entity.Property(e => e.MagPojemnosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MAG_Pojemnosc");
            entity.Property(e => e.MagPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("MAG_PrcFirma");
            entity.Property(e => e.MagPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MAG_PrcLp");
            entity.Property(e => e.MagPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("MAG_PrcNumer");
            entity.Property(e => e.MagPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MAG_PrcTyp");
            entity.Property(e => e.MagRealizujTylkoRezZas)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_RealizujTylkoRezZas");
            entity.Property(e => e.MagRealizujwPos)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_RealizujwPOS");
            entity.Property(e => e.MagRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_RezerwujZasoby");
            entity.Property(e => e.MagSposobGenDokMagWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_SposobGenDokMagWMS");
            entity.Property(e => e.MagSposobPracyZwms)
                .HasDefaultValue((short)0)
                .HasColumnName("MAG_SposobPracyZWMS");
            entity.Property(e => e.MagUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MAG_Ulica");
            entity.Property(e => e.MagWewnetrzny)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_Wewnetrzny");
            entity.Property(e => e.MagWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_WMS");
            entity.Property(e => e.MagWmsnumer)
                .HasDefaultValue(0)
                .HasColumnName("MAG_WMSNumer");
            entity.Property(e => e.MagWmsrodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_WMSRodzaj");
            entity.Property(e => e.MagZablokowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_Zablokowany");
            entity.Property(e => e.MagZarzadzanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("MAG_Zarzadzanie");
        });

        modelBuilder.Entity<MemDokElem>(entity =>
        {
            entity.HasKey(e => new { e.MdeGidtyp, e.MdeGidnumer, e.MdeGidlp }).HasName("MDE_Primary");

            entity.ToTable("MemDokElem", "CDN");

            entity.Property(e => e.MdeGidtyp).HasColumnName("MDE_GIDTyp");
            entity.Property(e => e.MdeGidnumer).HasColumnName("MDE_GIDNumer");
            entity.Property(e => e.MdeGidlp).HasColumnName("MDE_GIDLp");
            entity.Property(e => e.MdeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MDE_GIDFirma");
            entity.Property(e => e.MdeKwotaWym)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDE_KwotaWym");
            entity.Property(e => e.MdeNieSumuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDE_NieSumuj");
            entity.Property(e => e.MdeOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MDE_Opis");
            entity.Property(e => e.MdePodmiotRodzaj)
                .HasDefaultValue((byte)1)
                .HasColumnName("MDE_PodmiotRodzaj");
            entity.Property(e => e.MdePodmiotWym)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MDE_PodmiotWym");
            entity.Property(e => e.MdeRodzajKosztu)
                .HasDefaultValue(0)
                .HasColumnName("MDE_RodzajKosztu");
            entity.Property(e => e.MdeSymbolId)
                .HasDefaultValue(0)
                .HasColumnName("MDE_SymbolID");

            entity.HasOne(d => d.MdeGidnumerNavigation).WithMany(p => p.MemDokElems)
                .HasForeignKey(d => d.MdeGidnumer)
                .HasConstraintName("FK_MdePrimaryNoType");

            entity.HasOne(d => d.MdeSymbol).WithMany(p => p.MemDokElems)
                .HasForeignKey(d => d.MdeSymbolId)
                .HasConstraintName("FK_MdeSymbol");
        });

        modelBuilder.Entity<MemDokNag>(entity =>
        {
            entity.HasKey(e => e.MdnGidnumer).HasName("MDN_Primary");

            entity.ToTable("MemDokNag", "CDN", tb => tb.HasTrigger("MemDokNag_DeleteHandler"));

            entity.HasIndex(e => e.MdnKod, "MdnKod").IsUnique();

            entity.Property(e => e.MdnGidnumer).HasColumnName("MDN_GIDNumer");
            entity.Property(e => e.MdnArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_Archiwalny");
            entity.Property(e => e.MdnBony)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_Bony");
            entity.Property(e => e.MdnDataControllingowa)
                .HasDefaultValue((short)0)
                .HasColumnName("MDN_DataControllingowa");
            entity.Property(e => e.MdnDataKsiegowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_DataKsiegowania");
            entity.Property(e => e.MdnDniPrzedData)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_DniPrzedData");
            entity.Property(e => e.MdnEdycjaKategorii)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_EdycjaKategorii");
            entity.Property(e => e.MdnEdycjaKwot)
                .HasDefaultValue((byte)1)
                .HasColumnName("MDN_EdycjaKwot");
            entity.Property(e => e.MdnGenerujRw)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_GenerujRW");
            entity.Property(e => e.MdnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MDN_GIDFirma");
            entity.Property(e => e.MdnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MDN_GIDLp");
            entity.Property(e => e.MdnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MDN_GIDTyp");
            entity.Property(e => e.MdnKdz)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_KDZ");
            entity.Property(e => e.MdnKod)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MDN_Kod");
            entity.Property(e => e.MdnLeasing)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_Leasing");
            entity.Property(e => e.MdnNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("MDN_NrKursu");
            entity.Property(e => e.MdnOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MDN_Opis");
            entity.Property(e => e.MdnPodmiotMiejsce)
                .HasDefaultValue((byte)1)
                .HasColumnName("MDN_PodmiotMiejsce");
            entity.Property(e => e.MdnPodmiotRodzaj)
                .HasDefaultValue((byte)1)
                .HasColumnName("MDN_PodmiotRodzaj");
            entity.Property(e => e.MdnPodmiotWym)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_PodmiotWym");
            entity.Property(e => e.MdnRodzajKategorii)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_RodzajKategorii");
            entity.Property(e => e.MdnSchfirma)
                .HasDefaultValue(0)
                .HasColumnName("MDN_SCHFirma");
            entity.Property(e => e.MdnSchlp)
                .HasDefaultValue(0)
                .HasColumnName("MDN_SCHLp");
            entity.Property(e => e.MdnSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("MDN_SCHNumer");
            entity.Property(e => e.MdnSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MDN_SCHTyp");
            entity.Property(e => e.MdnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MDN_Seria");
            entity.Property(e => e.MdnSumuj).HasColumnName("MDN_Sumuj");
            entity.Property(e => e.MdnTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_Typ");
            entity.Property(e => e.MdnTypDaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("MDN_TypDaty");
            entity.Property(e => e.MdnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MDN_Waluta");
        });

        modelBuilder.Entity<MemElem>(entity =>
        {
            entity.HasKey(e => new { e.MeeGidnumer, e.MeeGidlp }).HasName("MEE_Primary");

            entity.ToTable("MemElem", "CDN", tb =>
                {
                    tb.HasTrigger("MemElem_DeleteHandler");
                    tb.HasTrigger("MemElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.MeeBbonId, "MEEBbonID");

            entity.HasIndex(e => e.MeeSrtNumer, "MEESrt");

            entity.HasIndex(e => e.MeeUlrid, "MEEULR");

            entity.HasIndex(e => e.MeeKndnumer, "MeEDocelowy");

            entity.HasIndex(e => e.MeeKntnumer, "MeEKontrahent");

            entity.Property(e => e.MeeGidnumer).HasColumnName("MEE_GIDNumer");
            entity.Property(e => e.MeeGidlp).HasColumnName("MEE_GIDLp");
            entity.Property(e => e.MeeBbonId)
                .HasDefaultValue(0)
                .HasColumnName("MEE_BbonID");
            entity.Property(e => e.MeeCtkursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(29, 10)")
                .HasColumnName("MEE_CTKursL");
            entity.Property(e => e.MeeCtkursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(29, 10)")
                .HasColumnName("MEE_CTKursM");
            entity.Property(e => e.MeeDataDok)
                .HasDefaultValue(0)
                .HasColumnName("MEE_DataDok");
            entity.Property(e => e.MeeDataOper)
                .HasDefaultValue(0)
                .HasColumnName("MEE_DataOper");
            entity.Property(e => e.MeeDtkursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(29, 10)")
                .HasColumnName("MEE_DTKursL");
            entity.Property(e => e.MeeDtkursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(29, 10)")
                .HasColumnName("MEE_DTKursM");
            entity.Property(e => e.MeeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEE_GIDFirma");
            entity.Property(e => e.MeeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_GIDTyp");
            entity.Property(e => e.MeeKksnumerCt)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KKSNumerCT");
            entity.Property(e => e.MeeKksnumerCtwal)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KKSNumerCTWal");
            entity.Property(e => e.MeeKksnumerDt)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KKSNumerDT");
            entity.Property(e => e.MeeKksnumerDtwal)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KKSNumerDTWal");
            entity.Property(e => e.MeeKndfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KNDFirma");
            entity.Property(e => e.MeeKndlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_KNDLp");
            entity.Property(e => e.MeeKndnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KNDNumer");
            entity.Property(e => e.MeeKndtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_KNDTyp");
            entity.Property(e => e.MeeKnt2firma)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KNT2Firma");
            entity.Property(e => e.MeeKnt2lp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_KNT2Lp");
            entity.Property(e => e.MeeKnt2numer)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KNT2Numer");
            entity.Property(e => e.MeeKnt2typ)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_KNT2Typ");
            entity.Property(e => e.MeeKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KNTFirma");
            entity.Property(e => e.MeeKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_KNTLp");
            entity.Property(e => e.MeeKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEE_KNTNumer");
            entity.Property(e => e.MeeKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_KNTTyp");
            entity.Property(e => e.MeeKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MEE_Kwota");
            entity.Property(e => e.MeeKwotaCtwal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MEE_KwotaCTWal");
            entity.Property(e => e.MeeKwotaDtwal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MEE_KwotaDTWal");
            entity.Property(e => e.MeeKwotaWym)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEE_KwotaWym");
            entity.Property(e => e.MeeNieSumuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEE_NieSumuj");
            entity.Property(e => e.MeeNrKursuCt)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_NrKursuCT");
            entity.Property(e => e.MeeNrKursuDt)
                .HasDefaultValue((short)0)
                .HasColumnName("MEE_NrKursuDT");
            entity.Property(e => e.MeeNumerDokumentu)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEE_NumerDokumentu");
            entity.Property(e => e.MeeOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEE_Opis");
            entity.Property(e => e.MeePodmiotRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEE_PodmiotRodzaj");
            entity.Property(e => e.MeePodmiotWym)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEE_PodmiotWym");
            entity.Property(e => e.MeeRknid)
                .HasDefaultValue(0)
                .HasColumnName("MEE_RKNID");
            entity.Property(e => e.MeeRkstrona)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEE_RKStrona");
            entity.Property(e => e.MeeRodzajKosztu)
                .HasDefaultValue(0)
                .HasColumnName("MEE_RodzajKosztu");
            entity.Property(e => e.MeeSrtNumer)
                .HasDefaultValue(0)
                .HasColumnName("MEE_SrtNumer");
            entity.Property(e => e.MeeSymbolId)
                .HasDefaultValue(0)
                .HasColumnName("MEE_SymbolID");
            entity.Property(e => e.MeeTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEE_Typ");
            entity.Property(e => e.MeeUlrid)
                .HasDefaultValue(0)
                .HasColumnName("MEE_ULRID");
            entity.Property(e => e.MeeUlrstronaDc)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEE_ULRStronaDC");
            entity.Property(e => e.MeeWalutaCt)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEE_WalutaCT");
            entity.Property(e => e.MeeWalutaDt)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEE_WalutaDT");

            entity.HasOne(d => d.MeeGidnumerNavigation).WithMany(p => p.MemElems)
                .HasForeignKey(d => d.MeeGidnumer)
                .HasConstraintName("FK_MeePrimaryNoType");
        });

        modelBuilder.Entity<MemNag>(entity =>
        {
            entity.HasKey(e => e.MenGidnumer).HasName("MEN_Primary");

            entity.ToTable("MemNag", "CDN", tb =>
                {
                    tb.HasTrigger("MemNagAlias_InsertUpdateHandler");
                    tb.HasTrigger("MemNag_DeleteHandler");
                    tb.HasTrigger("MemNag_InsertUpdateHandler");
                    tb.HasTrigger("MemNag_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.MenGidtyp, e.MenGidnumer }, "MENGID").IsUnique();

            entity.HasIndex(e => e.MenKndnumer, "MeNDocelowy");

            entity.HasIndex(e => e.MenOrgnumer, "MeNORGNumer");

            entity.HasIndex(e => e.MenDataWprow, "MenData");

            entity.HasIndex(e => e.MenKntnumer, "MenKontrahent");

            entity.HasIndex(e => new { e.MenRokMiesiac, e.MenOkrPoczatek, e.MenSeria, e.MenNumer }, "MenNumer").IsUnique();

            entity.Property(e => e.MenGidnumer).HasColumnName("MEN_GIDNumer");
            entity.Property(e => e.MenAktywny)
                .HasDefaultValue(0)
                .HasColumnName("MEN_Aktywny");
            entity.Property(e => e.MenCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_CechaOpis");
            entity.Property(e => e.MenDataDok)
                .HasDefaultValue(0)
                .HasColumnName("MEN_DataDok");
            entity.Property(e => e.MenDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("MEN_DataKsiegowania");
            entity.Property(e => e.MenDataOper)
                .HasDefaultValue(0)
                .HasColumnName("MEN_DataOper");
            entity.Property(e => e.MenDataWprow)
                .HasDefaultValue(0)
                .HasColumnName("MEN_DataWprow");
            entity.Property(e => e.MenDokId)
                .HasDefaultValue(0)
                .HasColumnName("MEN_DokID");
            entity.Property(e => e.MenDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_Dziennik");
            entity.Property(e => e.MenGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEN_GIDFirma");
            entity.Property(e => e.MenGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_GIDLp");
            entity.Property(e => e.MenGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_GIDTyp");
            entity.Property(e => e.MenGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_GUID");
            entity.Property(e => e.MenKndfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEN_KNDFirma");
            entity.Property(e => e.MenKndlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_KNDLp");
            entity.Property(e => e.MenKndnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_KNDNumer");
            entity.Property(e => e.MenKndtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_KNDTyp");
            entity.Property(e => e.MenKnpnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_KNPNumer");
            entity.Property(e => e.MenKnptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_KNPTyp");
            entity.Property(e => e.MenKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEN_KNTFirma");
            entity.Property(e => e.MenKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_KNTLp");
            entity.Property(e => e.MenKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_KNTNumer");
            entity.Property(e => e.MenKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_KNTTyp");
            entity.Property(e => e.MenKorekta)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEN_Korekta");
            entity.Property(e => e.MenKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("MEN_KursL");
            entity.Property(e => e.MenKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("MEN_KursM");
            entity.Property(e => e.MenKwotaPrz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MEN_KwotaPrz");
            entity.Property(e => e.MenKwotaRoz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MEN_KwotaRoz");
            entity.Property(e => e.MenMdnfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEN_MDNFirma");
            entity.Property(e => e.MenMdnlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_MDNLp");
            entity.Property(e => e.MenMdnnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_MDNNumer");
            entity.Property(e => e.MenMdntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_MDNTyp");
            entity.Property(e => e.MenNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEN_NieKsiegowac");
            entity.Property(e => e.MenNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_NrKursu");
            entity.Property(e => e.MenNumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_Numer");
            entity.Property(e => e.MenNumerDokumentu)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_NumerDokumentu");
            entity.Property(e => e.MenOkrPoczatek)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OkrPoczatek");
            entity.Property(e => e.MenOkrSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_OkrSymbol");
            entity.Property(e => e.MenOpeNumerZfr)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OpeNumerZFR");
            entity.Property(e => e.MenOpeNumerZm)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OpeNumerZM");
            entity.Property(e => e.MenOpeTnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OpeTNumer");
            entity.Property(e => e.MenOpeTypZfr)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_OpeTypZFR");
            entity.Property(e => e.MenOpeTypZm)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_OpeTypZM");
            entity.Property(e => e.MenOpeWfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OpeWFirma");
            entity.Property(e => e.MenOpeWlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_OpeWLp");
            entity.Property(e => e.MenOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OpeWNumer");
            entity.Property(e => e.MenOpeWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_OpeWTyp");
            entity.Property(e => e.MenOpeZfirma)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OpeZFirma");
            entity.Property(e => e.MenOpeZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_OpeZLp");
            entity.Property(e => e.MenOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OpeZNumer");
            entity.Property(e => e.MenOpeZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_OpeZTyp");
            entity.Property(e => e.MenOperatorPos)
                .HasDefaultValue(0)
                .HasColumnName("MEN_OperatorPOS");
            entity.Property(e => e.MenOrgnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_ORGNumer");
            entity.Property(e => e.MenOrgtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_ORGTyp");
            entity.Property(e => e.MenRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("MEN_RokMiesiac");
            entity.Property(e => e.MenSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_SCHNumer");
            entity.Property(e => e.MenSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_SCHTyp");
            entity.Property(e => e.MenSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_Seria");
            entity.Property(e => e.MenStan)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_Stan");
            entity.Property(e => e.MenTresc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_Tresc");
            entity.Property(e => e.MenTstampZfr)
                .HasDefaultValue(0)
                .HasColumnName("MEN_TStampZFR");
            entity.Property(e => e.MenTstampZm)
                .HasDefaultValue(0)
                .HasColumnName("MEN_TStampZM");
            entity.Property(e => e.MenUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_Url");
            entity.Property(e => e.MenUwagi)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_Uwagi");
            entity.Property(e => e.MenWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_Waluta");
            entity.Property(e => e.MenWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MEN_WsDziennik");
            entity.Property(e => e.MenWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("MEN_WsSCHNumer");
            entity.Property(e => e.MenWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MEN_WsSCHTyp");
            entity.Property(e => e.MenWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEN_WsStosujDziennik");
            entity.Property(e => e.MenWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEN_WsStosujSchemat");
            entity.Property(e => e.MenZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEN_Zaksiegowano");
            entity.Property(e => e.MenZatwFormalnoRach)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEN_ZatwFormalnoRach");
            entity.Property(e => e.MenZatwMerytorycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("MEN_ZatwMerytorycznie");
        });

        modelBuilder.Entity<MemSymbole>(entity =>
        {
            entity.HasKey(e => e.MesSymbolId).HasName("MES_Primary");

            entity.ToTable("MemSymbole", "CDN", tb => tb.HasTrigger("MemSymbole_DeleteHandler"));

            entity.HasIndex(e => e.MesSymbol, "MesSymbol").IsUnique();

            entity.Property(e => e.MesSymbolId).HasColumnName("MES_SymbolID");
            entity.Property(e => e.MesOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MES_Opis");
            entity.Property(e => e.MesSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MES_Symbol");
            entity.Property(e => e.MesTyp)
                .HasDefaultValue((byte)1)
                .HasColumnName("MES_Typ");
        });

        modelBuilder.Entity<Mesprofile>(entity =>
        {
            entity.HasKey(e => e.MespId).HasName("MESP_Primary");

            entity.ToTable("MESProfile", "CDN", tb => tb.HasTrigger("MESProfile_DeleteHandler"));

            entity.Property(e => e.MespId).HasColumnName("MESP_Id");
            entity.Property(e => e.MespAktywny)
                .HasDefaultValue(0)
                .HasColumnName("MESP_Aktywny");
            entity.Property(e => e.MespCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("MESP_CzasModyfikacji");
            entity.Property(e => e.MespCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("MESP_CzasUtworzenia");
            entity.Property(e => e.MespKolorTla)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MESP_KolorTla");
            entity.Property(e => e.MespNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MESP_Nazwa");
            entity.Property(e => e.MespNazwaLogo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MESP_NazwaLogo");
            entity.Property(e => e.MespNazwaLogoNawigacji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MESP_NazwaLogoNawigacji");
            entity.Property(e => e.MespNazwaPlikuTla)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MESP_NazwaPlikuTla");
            entity.Property(e => e.MespOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("MESP_OpeMNumer");
            entity.Property(e => e.MespOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("MESP_OpeWNumer");
            entity.Property(e => e.MespOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MESP_Opis");
            entity.Property(e => e.MespProfilZrodlowyId)
                .HasDefaultValue(0)
                .HasColumnName("MESP_ProfilZrodlowyID");
        });

        modelBuilder.Entity<MesprofileOperatorzy>(entity =>
        {
            entity.HasKey(e => e.MespoId).HasName("MESPO_Primary");

            entity.ToTable("MESProfileOperatorzy", "CDN", tb => tb.HasTrigger("MESProfileOperatorzy_InsertUpdateHandler"));

            entity.HasIndex(e => e.MespoOpeGidNumer, "MESPOOperator");

            entity.HasIndex(e => new { e.MespoProfilId, e.MespoOpeGidNumer }, "MESPOOperatorUni").IsUnique();

            entity.HasIndex(e => e.MespoProfilId, "MESPOProfile");

            entity.Property(e => e.MespoId).HasColumnName("MESPO_ID");
            entity.Property(e => e.MespoDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("MESPO_Domyslny");
            entity.Property(e => e.MespoKodOperatora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MESPO_KodOperatora");
            entity.Property(e => e.MespoOpeGidNumer)
                .HasDefaultValue(0)
                .HasColumnName("MESPO_OpeGidNumer");
            entity.Property(e => e.MespoProfilId)
                .HasDefaultValue(0)
                .HasColumnName("MESPO_ProfilID");
        });

        modelBuilder.Entity<MskntAdresy>(entity =>
        {
            entity.HasKey(e => e.MsknAGidnumer).HasName("MSKnA_Primary");

            entity.ToTable("MSKntAdresy", "CDN");

            entity.Property(e => e.MsknAGidnumer).HasColumnName("MSKnA_GIDNumer");
            entity.Property(e => e.MsknAAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Adres");
            entity.Property(e => e.MsknAAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Akronim");
            entity.Property(e => e.MsknABnkFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_BnkFirma");
            entity.Property(e => e.MsknABnkLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_BnkLp");
            entity.Property(e => e.MsknABnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_BnkNumer");
            entity.Property(e => e.MsknABnkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_BnkTyp");
            entity.Property(e => e.MsknADataArc)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_DataArc");
            entity.Property(e => e.MsknADataWydania)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_DataWydania");
            entity.Property(e => e.MsknADokumentTozsamosci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_DokumentTozsamosci");
            entity.Property(e => e.MsknADomyslny)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_Domyslny");
            entity.Property(e => e.MsknAEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_EMail");
            entity.Property(e => e.MsknAFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Fax");
            entity.Property(e => e.MsknAGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_GIDFirma");
            entity.Property(e => e.MsknAGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_GIDLp");
            entity.Property(e => e.MsknAGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_GIDTyp");
            entity.Property(e => e.MsknAGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_GLN");
            entity.Property(e => e.MsknAGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Gmina");
            entity.Property(e => e.MsknAGpsdataPobrania)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_GPSDataPobrania");
            entity.Property(e => e.MsknAGpsdl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("MSKnA_GPSDl");
            entity.Property(e => e.MsknAGpsgodzinaPobrania)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_GPSGodzinaPobrania");
            entity.Property(e => e.MsknAGpssz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("MSKnA_GPSSz");
            entity.Property(e => e.MsknAKnaArchiwizowanego)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_KnaArchiwizowanego");
            entity.Property(e => e.MsknAKnaPierwotny)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_KnaPierwotny");
            entity.Property(e => e.MsknAKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_KntFirma");
            entity.Property(e => e.MsknAKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_KntLp");
            entity.Property(e => e.MsknAKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_KntNumer");
            entity.Property(e => e.MsknAKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_KntTyp");
            entity.Property(e => e.MsknAKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_KodP");
            entity.Property(e => e.MsknAKontoDostawcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_KontoDostawcy");
            entity.Property(e => e.MsknAKontoOdbiorcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_KontoOdbiorcy");
            entity.Property(e => e.MsknAKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Kraj");
            entity.Property(e => e.MsknALastModL)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_LastModL");
            entity.Property(e => e.MsknAMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Miasto");
            entity.Property(e => e.MsknAModem)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Modem");
            entity.Property(e => e.MsknANazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Nazwa1");
            entity.Property(e => e.MsknANazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Nazwa2");
            entity.Property(e => e.MsknANazwa3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Nazwa3");
            entity.Property(e => e.MsknANiePublikuj)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_NiePublikuj");
            entity.Property(e => e.MsknANip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Nip");
            entity.Property(e => e.MsknANipE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_NipE");
            entity.Property(e => e.MsknANipPrefiks)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_NipPrefiks");
            entity.Property(e => e.MsknANrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_NrRachunku");
            entity.Property(e => e.MsknANrb)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_NRB");
            entity.Property(e => e.MsknAOdleglosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("MSKnA_Odleglosc");
            entity.Property(e => e.MsknAOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Opis");
            entity.Property(e => e.MsknAOrganWydajacy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_OrganWydajacy");
            entity.Property(e => e.MsknAOsoba)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnA_Osoba");
            entity.Property(e => e.MsknAPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Pesel");
            entity.Property(e => e.MsknAPlatnikVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnA_PlatnikVat");
            entity.Property(e => e.MsknAPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Powiat");
            entity.Property(e => e.MsknARegionCrm)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_RegionCRM");
            entity.Property(e => e.MsknARegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Regon");
            entity.Property(e => e.MsknARolnikRyczaltowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnA_RolnikRyczaltowy");
            entity.Property(e => e.MsknAStanPostep)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnA_StanPostep");
            entity.Property(e => e.MsknATelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Telefon1");
            entity.Property(e => e.MsknATelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Telefon2");
            entity.Property(e => e.MsknATelex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Telex");
            entity.Property(e => e.MsknAUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Ulica");
            entity.Property(e => e.MsknAWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnA_Wojewodztwo");
            entity.Property(e => e.MsknAWysylkowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnA_Wysylkowy");
            entity.Property(e => e.MsknAZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("MSKnA_ZewnetrznyId");
        });

        modelBuilder.Entity<MskntKarty>(entity =>
        {
            entity.HasKey(e => e.MskntGidnumer).HasName("MSKnt_Primary");

            entity.ToTable("MSKntKarty", "CDN");

            entity.Property(e => e.MskntGidnumer).HasColumnName("MSKnt_GIDNumer");
            entity.Property(e => e.MskntAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Adres");
            entity.Property(e => e.MskntAdresNieAktualny)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_AdresNieAktualny");
            entity.Property(e => e.MskntAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Akronim");
            entity.Property(e => e.MskntAkronimFormat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_AkronimFormat");
            entity.Property(e => e.MskntAktywna)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_Aktywna");
            entity.Property(e => e.MskntAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_AkwFirma");
            entity.Property(e => e.MskntAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_AkwLp");
            entity.Property(e => e.MskntAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_AkwNumer");
            entity.Property(e => e.MskntAkwProwizja)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("MSKnt_AkwProwizja");
            entity.Property(e => e.MskntAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_AkwTyp");
            entity.Property(e => e.MskntAkwizytor)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_Akwizytor");
            entity.Property(e => e.MskntArchiwalny)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_Archiwalny");
            entity.Property(e => e.MskntAtrybut1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Atrybut1");
            entity.Property(e => e.MskntAtrybut2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Atrybut2");
            entity.Property(e => e.MskntAtrybut3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Atrybut3");
            entity.Property(e => e.MskntBlokadaTransakcji)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_BlokadaTransakcji");
            entity.Property(e => e.MskntBlokadaZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_BlokadaZam");
            entity.Property(e => e.MskntBlokadaZamTs)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_BlokadaZamTS");
            entity.Property(e => e.MskntBnkFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_BnkFirma");
            entity.Property(e => e.MskntBnkLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_BnkLp");
            entity.Property(e => e.MskntBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_BnkNumer");
            entity.Property(e => e.MskntBnkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_BnkTyp");
            entity.Property(e => e.MskntBranza)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_Branza");
            entity.Property(e => e.MskntCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_CechaOpis");
            entity.Property(e => e.MskntCena)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_Cena");
            entity.Property(e => e.MskntControlling)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Controlling");
            entity.Property(e => e.MskntDataKarty)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_DataKarty");
            entity.Property(e => e.MskntDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_DataUtworzenia");
            entity.Property(e => e.MskntDataW)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_DataW");
            entity.Property(e => e.MskntDataWydania)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_DataWydania");
            entity.Property(e => e.MskntDataWygasniecia)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_DataWygasniecia");
            entity.Property(e => e.MskntDewizowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Dewizowe");
            entity.Property(e => e.MskntDokumentTozsamosci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_DokumentTozsamosci");
            entity.Property(e => e.MskntDzialalnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Dzialalnosc");
            entity.Property(e => e.MskntEan)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Ean");
            entity.Property(e => e.MskntEfaVatAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_EFaVatAktywne");
            entity.Property(e => e.MskntEfaVatDataDo)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_EFaVatDataDo");
            entity.Property(e => e.MskntEfaVatEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_EFaVatEMail");
            entity.Property(e => e.MskntEfaVatOsw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_EFaVatOsw");
            entity.Property(e => e.MskntEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_EMail");
            entity.Property(e => e.MskntEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_ESklep");
            entity.Property(e => e.MskntExpoKraj)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_ExpoKraj");
            entity.Property(e => e.MskntFaVatosw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_FaVATOsw");
            entity.Property(e => e.MskntFavatdata)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_FAVATData");
            entity.Property(e => e.MskntFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Fax");
            entity.Property(e => e.MskntFormaPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_FormaPl");
            entity.Property(e => e.MskntFormaPlKa)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_FormaPlKa");
            entity.Property(e => e.MskntFormaPlZak)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_FormaPlZak");
            entity.Property(e => e.MskntFormat1)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Format1");
            entity.Property(e => e.MskntFormat2)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Format2");
            entity.Property(e => e.MskntFormat3)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Format3");
            entity.Property(e => e.MskntFppKod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_FppKod");
            entity.Property(e => e.MskntFrsId)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_FrsID");
            entity.Property(e => e.MskntGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_GIDFirma");
            entity.Property(e => e.MskntGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_GIDLp");
            entity.Property(e => e.MskntGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_GIDTyp");
            entity.Property(e => e.MskntGln)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_GLN");
            entity.Property(e => e.MskntGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Gmina");
            entity.Property(e => e.MskntGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_GUID");
            entity.Property(e => e.MskntGuiddane)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_GUIDdane");
            entity.Property(e => e.MskntHasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_HasloChk");
            entity.Property(e => e.MskntHasloKontrahent)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_HasloKontrahent");
            entity.Property(e => e.MskntKalendarzDst)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KalendarzDst");
            entity.Property(e => e.MskntKalendarzWys)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KalendarzWys");
            entity.Property(e => e.MskntKarFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KarFirma");
            entity.Property(e => e.MskntKarLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_KarLp");
            entity.Property(e => e.MskntKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KarNumer");
            entity.Property(e => e.MskntKarTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_KarTyp");
            entity.Property(e => e.MskntKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KnAFirma");
            entity.Property(e => e.MskntKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_KnALp");
            entity.Property(e => e.MskntKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KnANumer");
            entity.Property(e => e.MskntKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_KnATyp");
            entity.Property(e => e.MskntKnCnumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KnCNumer");
            entity.Property(e => e.MskntKnCtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_KnCTyp");
            entity.Property(e => e.MskntKnGnumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KnGNumer");
            entity.Property(e => e.MskntKnGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_KnGTyp");
            entity.Property(e => e.MskntKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_KnPNumer");
            entity.Property(e => e.MskntKnPparam)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_KnPParam");
            entity.Property(e => e.MskntKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_KnPTyp");
            entity.Property(e => e.MskntKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_KodP");
            entity.Property(e => e.MskntKontoDostawcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_KontoDostawcy");
            entity.Property(e => e.MskntKontoOdbiorcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_KontoOdbiorcy");
            entity.Property(e => e.MskntKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Kraj");
            entity.Property(e => e.MskntLastModC)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_LastModC");
            entity.Property(e => e.MskntLastModL)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_LastModL");
            entity.Property(e => e.MskntLastModO)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_LastModO");
            entity.Property(e => e.MskntLastTransLockDate)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_LastTransLockDate");
            entity.Property(e => e.MskntLimitOkres)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_LimitOkres");
            entity.Property(e => e.MskntLimitPoTerminie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MSKnt_LimitPoTerminie");
            entity.Property(e => e.MskntLimitTerminowy)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_LimitTerminowy");
            entity.Property(e => e.MskntLimitWart)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MSKnt_LimitWart");
            entity.Property(e => e.MskntMarza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MSKnt_Marza");
            entity.Property(e => e.MskntMaxDniPoTerminie)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_MaxDniPoTerminie");
            entity.Property(e => e.MskntMaxLimitWart)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("MSKnt_MaxLimitWart");
            entity.Property(e => e.MskntMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Miasto");
            entity.Property(e => e.MskntModem)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Modem");
            entity.Property(e => e.MskntMstwrGrupaNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_MSTwrGrupaNumer");
            entity.Property(e => e.MskntNazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Nazwa1");
            entity.Property(e => e.MskntNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Nazwa2");
            entity.Property(e => e.MskntNazwa3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Nazwa3");
            entity.Property(e => e.MskntNieaktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Nieaktywny");
            entity.Property(e => e.MskntNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Nip");
            entity.Property(e => e.MskntNipE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_NipE");
            entity.Property(e => e.MskntNipPrefiks)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_NipPrefiks");
            entity.Property(e => e.MskntNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_NrKursu");
            entity.Property(e => e.MskntNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_NrRachunku");
            entity.Property(e => e.MskntNrb)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_NRB");
            entity.Property(e => e.MskntNumerKarty)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_NumerKarty");
            entity.Property(e => e.MskntObcaKarta)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_ObcaKarta");
            entity.Property(e => e.MskntOddzialowy)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_Oddzialowy");
            entity.Property(e => e.MskntOdleglosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("MSKnt_Odleglosc");
            entity.Property(e => e.MskntOpZfirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_OpZFirma");
            entity.Property(e => e.MskntOpZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_OpZLp");
            entity.Property(e => e.MskntOpZnumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_OpZNumer");
            entity.Property(e => e.MskntOpZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_OpZTyp");
            entity.Property(e => e.MskntOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_OpeFirma");
            entity.Property(e => e.MskntOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_OpeFirmaM");
            entity.Property(e => e.MskntOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_OpeLp");
            entity.Property(e => e.MskntOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_OpeLpM");
            entity.Property(e => e.MskntOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_OpeNumer");
            entity.Property(e => e.MskntOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_OpeNumerM");
            entity.Property(e => e.MskntOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_OpeTyp");
            entity.Property(e => e.MskntOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_OpeTypM");
            entity.Property(e => e.MskntOrganWydajacy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_OrganWydajacy");
            entity.Property(e => e.MskntOsoba)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_Osoba");
            entity.Property(e => e.MskntOutlookUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_OutlookUrl");
            entity.Property(e => e.MskntPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Pesel");
            entity.Property(e => e.MskntPin)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_PIN");
            entity.Property(e => e.MskntPlatnikVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_PlatnikVat");
            entity.Property(e => e.MskntPlatnoscKaucji)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_PlatnoscKaucji");
            entity.Property(e => e.MskntPodatnikiemNabywca)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_PodatnikiemNabywca");
            entity.Property(e => e.MskntPojedynczeDokDoZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_PojedynczeDokDoZam");
            entity.Property(e => e.MskntPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Powiat");
            entity.Property(e => e.MskntPowiazany)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Powiazany");
            entity.Property(e => e.MskntPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_PrcFirma");
            entity.Property(e => e.MskntPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_PrcLp");
            entity.Property(e => e.MskntPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_PrcNumer");
            entity.Property(e => e.MskntPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_PrcTyp");
            entity.Property(e => e.MskntPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_Priorytet");
            entity.Property(e => e.MskntPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_PriorytetRez");
            entity.Property(e => e.MskntPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("MSKnt_Punkty");
            entity.Property(e => e.MskntRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("MSKnt_Rabat");
            entity.Property(e => e.MskntRegionCrm)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_RegionCRM");
            entity.Property(e => e.MskntRegon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Regon");
            entity.Property(e => e.MskntRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_Rodzaj");
            entity.Property(e => e.MskntRolaPartnera)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_RolaPartnera");
            entity.Property(e => e.MskntRolnikRyczaltowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_RolnikRyczaltowy");
            entity.Property(e => e.MskntSeriaFa)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_SeriaFa");
            entity.Property(e => e.MskntSoundex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Soundex");
            entity.Property(e => e.MskntSpTerminPlRk)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_SpTerminPlRK");
            entity.Property(e => e.MskntSpTerminPlSpr)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_SpTerminPlSpr");
            entity.Property(e => e.MskntSpTerminPlZak)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_SpTerminPlZak");
            entity.Property(e => e.MskntSpedytor)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Spedytor");
            entity.Property(e => e.MskntSposobDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_SposobDostawy");
            entity.Property(e => e.MskntStanPostep)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_StanPostep");
            entity.Property(e => e.MskntStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Status");
            entity.Property(e => e.MskntSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Symbol");
            entity.Property(e => e.MskntTelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Telefon1");
            entity.Property(e => e.MskntTelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Telefon2");
            entity.Property(e => e.MskntTelex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Telex");
            entity.Property(e => e.MskntTerminPlKa)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_TerminPlKa");
            entity.Property(e => e.MskntTerminPlZak)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_TerminPlZak");
            entity.Property(e => e.MskntTerminRozliczeniaKaucji)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_TerminRozliczeniaKaucji");
            entity.Property(e => e.MskntTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Typ");
            entity.Property(e => e.MskntTypDok)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_TypDok");
            entity.Property(e => e.MskntTypDokZs)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_TypDokZS");
            entity.Property(e => e.MskntTypDokZz)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_TypDokZZ");
            entity.Property(e => e.MskntTypKarty)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_TypKarty");
            entity.Property(e => e.MskntUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Ulica");
            entity.Property(e => e.MskntUmowa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Umowa");
            entity.Property(e => e.MskntUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_URL");
            entity.Property(e => e.MskntWartosc1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Wartosc1");
            entity.Property(e => e.MskntWartosc2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Wartosc2");
            entity.Property(e => e.MskntWartosc3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Wartosc3");
            entity.Property(e => e.MskntWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnt_Wojewodztwo");
            entity.Property(e => e.MskntWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnt_Wsk");
            entity.Property(e => e.MskntZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_ZewnetrznyId");
            entity.Property(e => e.MskntZrodlo)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_Zrodlo");
            entity.Property(e => e.MskntZtrFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_ZTrFirma");
            entity.Property(e => e.MskntZtrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_ZTrLp");
            entity.Property(e => e.MskntZtrNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnt_ZTrNumer");
            entity.Property(e => e.MskntZtrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnt_ZTrTyp");
        });

        modelBuilder.Entity<MskntOpisy>(entity =>
        {
            entity.HasKey(e => new { e.MsknOKntNumer, e.MsknOKntLp }).HasName("MSKnO_Primary");

            entity.ToTable("MSKntOpisy", "CDN");

            entity.Property(e => e.MsknOKntNumer).HasColumnName("MSKnO_KntNumer");
            entity.Property(e => e.MsknOKntLp).HasColumnName("MSKnO_KntLp");
            entity.Property(e => e.MsknOCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("MSKnO_CzasModyfikacji");
            entity.Property(e => e.MsknOKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnO_KntFirma");
            entity.Property(e => e.MsknOKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnO_KntTyp");
            entity.Property(e => e.MsknOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnO_Opis");
            entity.Property(e => e.MsknOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnO_Typ");
        });

        modelBuilder.Entity<MskntOsoby>(entity =>
        {
            entity.HasKey(e => e.MsknSId).HasName("MSKnS_Primary");

            entity.ToTable("MSKntOsoby", "CDN", tb =>
                {
                    tb.HasTrigger("MSKntOsoby_DodajModyfikuj");
                    tb.HasTrigger("MSKntOsoby_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.MsknSKntNumer, e.MsknSKntLp }, "MSKnSKontrah");

            entity.Property(e => e.MsknSId).HasColumnName("MSKnS_Id");
            entity.Property(e => e.MsknSAdresId)
                .HasDefaultValue(0)
                .HasColumnName("MSKnS_AdresId");
            entity.Property(e => e.MsknSArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnS_Archiwalny");
            entity.Property(e => e.MsknSCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("MSKnS_CzasModyfikacji");
            entity.Property(e => e.MsknSCzyDomyslna)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnS_CzyDomyslna");
            entity.Property(e => e.MsknSDzial)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_Dzial");
            entity.Property(e => e.MsknSEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_EMail");
            entity.Property(e => e.MsknSFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_Fax");
            entity.Property(e => e.MsknSHasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_HasloChk");
            entity.Property(e => e.MsknSHasloOsoby)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_HasloOsoby");
            entity.Property(e => e.MsknSKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("MSKnS_KntFirma");
            entity.Property(e => e.MsknSKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnS_KntLp");
            entity.Property(e => e.MsknSKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("MSKnS_KntNumer");
            entity.Property(e => e.MsknSKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnS_KntTyp");
            entity.Property(e => e.MsknSNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_Nazwa");
            entity.Property(e => e.MsknSNotatki)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_Notatki");
            entity.Property(e => e.MsknSOddzialId)
                .HasDefaultValue(0)
                .HasColumnName("MSKnS_OddzialId");
            entity.Property(e => e.MsknSPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnS_Pozycja");
            entity.Property(e => e.MsknSRolaDecyzyjna)
                .HasDefaultValue(0)
                .HasColumnName("MSKnS_RolaDecyzyjna");
            entity.Property(e => e.MsknSStanowisko)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_Stanowisko");
            entity.Property(e => e.MsknSTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_Telefon");
            entity.Property(e => e.MsknSTelefonK)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_TelefonK");
            entity.Property(e => e.MsknSTytul)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MSKnS_Tytul");
            entity.Property(e => e.MsknSUpoDoK)
                .HasDefaultValue((short)0)
                .HasColumnName("MSKnS_UpoDoK");
            entity.Property(e => e.MsknSUpowazniona)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnS_Upowazniona");
            entity.Property(e => e.MsknSUpowaznionaZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("MSKnS_UpowaznionaZam");
            entity.Property(e => e.MsknSZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("MSKnS_ZewnetrznyId");
        });

        modelBuilder.Entity<NazRelacje>(entity =>
        {
            entity.HasKey(e => new { e.NaRNazTyp, e.NaRNazLp, e.NaRObiTyp, e.NaRObiNumer, e.NaRObiLp }).HasName("NaR_Primary");

            entity.ToTable("NazRelacje", "CDN");

            entity.Property(e => e.NaRNazTyp).HasColumnName("NaR_NazTyp");
            entity.Property(e => e.NaRNazLp).HasColumnName("NaR_NazLp");
            entity.Property(e => e.NaRObiTyp).HasColumnName("NaR_ObiTyp");
            entity.Property(e => e.NaRObiNumer).HasColumnName("NaR_ObiNumer");
            entity.Property(e => e.NaRObiLp).HasColumnName("NaR_ObiLp");
            entity.Property(e => e.NaRObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("NaR_ObiFirma");
            entity.Property(e => e.NaRWartoscS)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NaR_WartoscS");

            entity.HasOne(d => d.Nazwy).WithMany(p => p.NazRelacjes)
                .HasForeignKey(d => new { d.NaRNazTyp, d.NaRNazLp })
                .HasConstraintName("FK_NaRPrimary");
        });

        modelBuilder.Entity<Nazwy>(entity =>
        {
            entity.HasKey(e => new { e.NazGidtyp, e.NazGidlp }).HasName("Naz_Primary");

            entity.ToTable("Nazwy", "CDN", tb =>
                {
                    tb.HasTrigger("Nazwy_CzasModyfikacji");
                    tb.HasTrigger("Nazwy_DeleteHandler");
                    tb.HasTrigger("Nazwy_PicoUsuniete");
                });

            entity.HasIndex(e => new { e.NazGidtyp, e.NazNazwa }, "NazNazwa").IsUnique();

            entity.Property(e => e.NazGidtyp).HasColumnName("Naz_GIDTyp");
            entity.Property(e => e.NazGidlp).HasColumnName("Naz_GIDLp");
            entity.Property(e => e.NazArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("Naz_Archiwalny");
            entity.Property(e => e.NazCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Naz_CzasModyfikacji");
            entity.Property(e => e.NazGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Naz_GIDFirma");
            entity.Property(e => e.NazGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("Naz_GIDNumer");
            entity.Property(e => e.NazNazwa)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Naz_Nazwa");
            entity.Property(e => e.NazNazwa1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Naz_Nazwa1");
            entity.Property(e => e.NazNazwa2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Naz_Nazwa2");
            entity.Property(e => e.NazOpis)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Naz_Opis");
            entity.Property(e => e.NazPredefiniowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("Naz_Predefiniowana");
        });

        modelBuilder.Entity<NtsElem>(entity =>
        {
            entity.HasKey(e => new { e.NtEGidnumer, e.NtEGidlp }).HasName("NtE_Primary");

            entity.ToTable("NtsElem", "CDN", tb => tb.HasTrigger("NtsElem_InsertUpdateHandler"));

            entity.HasIndex(e => e.NtETwrNumer, "NtETowar");

            entity.Property(e => e.NtEGidnumer).HasColumnName("NtE_GIDNumer");
            entity.Property(e => e.NtEGidlp).HasColumnName("NtE_GIDLp");
            entity.Property(e => e.NtECena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("NtE_Cena");
            entity.Property(e => e.NtEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("NtE_GIDFirma");
            entity.Property(e => e.NtEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtE_GIDTyp");
            entity.Property(e => e.NtEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NtE_Ilosc");
            entity.Property(e => e.NtERabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("NtE_Rabat");
            entity.Property(e => e.NtETwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("NtE_TwrFirma");
            entity.Property(e => e.NtETwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtE_TwrLp");
            entity.Property(e => e.NtETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("NtE_TwrNumer");
            entity.Property(e => e.NtETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtE_TwrTyp");

            entity.HasOne(d => d.NtEGidnumerNavigation).WithMany(p => p.NtsElems)
                .HasForeignKey(d => d.NtEGidnumer)
                .HasConstraintName("FK_NtEPrimaryNoType");
        });

        modelBuilder.Entity<NtsKnt>(entity =>
        {
            entity.HasKey(e => new { e.NtKNtNnumer, e.NtKLp }).HasName("NtK_Primary");

            entity.ToTable("NtsKnt", "CDN", tb => tb.HasTrigger("NtsKnt_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.NtKKntTyp, e.NtKKntNumer, e.NtKNtNnumer }, "NtKKnt").IsUnique();

            entity.Property(e => e.NtKNtNnumer).HasColumnName("NtK_NtNNumer");
            entity.Property(e => e.NtKLp).HasColumnName("NtK_Lp");
            entity.Property(e => e.NtKKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("NtK_KntNumer");
            entity.Property(e => e.NtKKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtK_KntTyp");

            entity.HasOne(d => d.NtKNtNnumerNavigation).WithMany(p => p.NtsKnts)
                .HasForeignKey(d => d.NtKNtNnumer)
                .HasConstraintName("FK_NtKPrimary");
        });

        modelBuilder.Entity<NtsNag>(entity =>
        {
            entity.HasKey(e => e.NtNGidnumer).HasName("NtN_Primary");

            entity.ToTable("NtsNag", "CDN", tb => tb.HasTrigger("NtsNag_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.NtNOpeNumer, e.NtNNazwa }, "NtNOperator").IsUnique();

            entity.Property(e => e.NtNGidnumer).HasColumnName("NtN_GIDNumer");
            entity.Property(e => e.NtNDodajProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("NtN_DodajProcent");
            entity.Property(e => e.NtNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("NtN_GIDFirma");
            entity.Property(e => e.NtNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtN_GIDLp");
            entity.Property(e => e.NtNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtN_GIDTyp");
            entity.Property(e => e.NtNMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("NtN_MagFirma");
            entity.Property(e => e.NtNMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtN_MagLp");
            entity.Property(e => e.NtNMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("NtN_MagNumer");
            entity.Property(e => e.NtNMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtN_MagTyp");
            entity.Property(e => e.NtNNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NtN_Nazwa");
            entity.Property(e => e.NtNOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("NtN_OpeFirma");
            entity.Property(e => e.NtNOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtN_OpeLp");
            entity.Property(e => e.NtNOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("NtN_OpeNumer");
            entity.Property(e => e.NtNOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("NtN_OpeTyp");
            entity.Property(e => e.NtNOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NtN_Opis");
            entity.Property(e => e.NtNSuma)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NtN_Suma");
            entity.Property(e => e.NtNTypDoc)
                .HasDefaultValue((short)0)
                .HasColumnName("NtN_TypDoc");
            entity.Property(e => e.NtNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NtN_Waluta");

            entity.HasOne(d => d.NtNOpeNumerNavigation).WithMany(p => p.NtsNags)
                .HasForeignKey(d => d.NtNOpeNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_NtNOperator");
        });

        modelBuilder.Entity<NumeryKier>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NumeryKier", "CDN");

            entity.Property(e => e.NrKKpckod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NrK_KPCKod");
            entity.Property(e => e.NrKNumer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NrK_Numer");
            entity.Property(e => e.NrKOpTelOrgId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NrK_OpTelOrgID");
            entity.Property(e => e.NrKOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NrK_Opis");
        });

        modelBuilder.Entity<NumeryRachunkow>(entity =>
        {
            entity.HasKey(e => e.NrbId).HasName("NRB_Primary");

            entity.ToTable("NumeryRachunkow", "CDN", tb => tb.HasTrigger("NumeryRachunkow_InsertUpdateHandler"));

            entity.HasIndex(e => e.NrbNrRachunkuZnorm, "NrBNrRach");

            entity.HasIndex(e => new { e.NrbObTyp, e.NrbObNumer }, "NrbKontrah");

            entity.Property(e => e.NrbId).HasColumnName("NRB_Id");
            entity.Property(e => e.NrbNrRachunkuZnorm)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRB_NrRachunkuZnorm");
            entity.Property(e => e.NrbObNumer)
                .HasDefaultValue(0)
                .HasColumnName("NRB_ObNumer");
            entity.Property(e => e.NrbObTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("NRB_ObTyp");
        });

        modelBuilder.Entity<ObiegNrDok>(entity =>
        {
            entity.HasKey(e => e.OndDokId).HasName("OND_Primary");

            entity.ToTable("ObiegNrDok", "CDN", tb => tb.HasTrigger("ObiegNrDok_DeleteHandler"));

            entity.Property(e => e.OndDokId).HasColumnName("OND_DokID");
            entity.Property(e => e.OndNumer)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OND_Numer");
        });

        modelBuilder.Entity<ObiegOpe>(entity =>
        {
            entity.HasKey(e => e.OgoGidNumer).HasName("OGO_Primary");

            entity.ToTable("ObiegOpe", "CDN");

            entity.Property(e => e.OgoGidNumer).HasColumnName("OGO_GidNumer");
            entity.Property(e => e.OgoGidTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OGO_GidTyp");
            entity.Property(e => e.OgoNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OGO_Nazwa");
        });

        modelBuilder.Entity<Obiekty>(entity =>
        {
            entity.HasKey(e => e.ObGidtyp).HasName("OB_Primary");

            entity.ToTable("Obiekty", "CDN");

            entity.Property(e => e.ObGidtyp).HasColumnName("OB_GIDTyp");
            entity.Property(e => e.ObNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OB_Nazwa");
            entity.Property(e => e.ObOpis)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OB_Opis");
            entity.Property(e => e.ObSkrot)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OB_Skrot");
        });

        modelBuilder.Entity<ObiektyCykl>(entity =>
        {
            entity.HasKey(e => e.ObCId).HasName("ObC_Primary");

            entity.ToTable("ObiektyCykl", "CDN");

            entity.HasIndex(e => new { e.ObCObiTyp, e.ObCObiFirma, e.ObCObiNumer, e.ObCObiLp }, "ObCObiekt").IsUnique();

            entity.Property(e => e.ObCId).HasColumnName("ObC_Id");
            entity.Property(e => e.ObCAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_Aktywny");
            entity.Property(e => e.ObCCzasTrwania)
                .HasDefaultValue(0)
                .HasColumnName("ObC_CzasTrwania");
            entity.Property(e => e.ObCDziennyTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_DziennyTyp");
            entity.Property(e => e.ObCGodzinaDo)
                .HasDefaultValue(0)
                .HasColumnName("ObC_GodzinaDo");
            entity.Property(e => e.ObCGodzinaOd)
                .HasDefaultValue(0)
                .HasColumnName("ObC_GodzinaOd");
            entity.Property(e => e.ObCMiesiecznyDataDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_MiesiecznyDataDzien");
            entity.Property(e => e.ObCMiesiecznyDzienJaki)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_MiesiecznyDzienJaki");
            entity.Property(e => e.ObCMiesiecznyDzienKtory)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_MiesiecznyDzienKtory");
            entity.Property(e => e.ObCMiesiecznyTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_MiesiecznyTyp");
            entity.Property(e => e.ObCMsdomyslnyWzorzec)
                .HasDefaultValue(0)
                .HasColumnName("ObC_MSDomyslnyWzorzec");
            entity.Property(e => e.ObCObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("ObC_ObiFirma");
            entity.Property(e => e.ObCObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ObC_ObiLp");
            entity.Property(e => e.ObCObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("ObC_ObiNumer");
            entity.Property(e => e.ObCObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ObC_ObiTyp");
            entity.Property(e => e.ObCPowtarzajCo)
                .HasDefaultValue(0)
                .HasColumnName("ObC_PowtarzajCo");
            entity.Property(e => e.ObCRocznyDataDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_RocznyDataDzien");
            entity.Property(e => e.ObCRocznyDzienJaki)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_RocznyDzienJaki");
            entity.Property(e => e.ObCRocznyDzienKtory)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_RocznyDzienKtory");
            entity.Property(e => e.ObCRocznyMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_RocznyMiesiac");
            entity.Property(e => e.ObCRocznyTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_RocznyTyp");
            entity.Property(e => e.ObCTygodniowyDniFlaga)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_TygodniowyDniFlaga");
            entity.Property(e => e.ObCWzorzecCykluTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_WzorzecCykluTyp");
            entity.Property(e => e.ObCZakresDoData)
                .HasDefaultValue(0)
                .HasColumnName("ObC_ZakresDoData");
            entity.Property(e => e.ObCZakresDoTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ObC_ZakresDoTyp");
            entity.Property(e => e.ObCZakresDoWystapienia)
                .HasDefaultValue(0)
                .HasColumnName("ObC_ZakresDoWystapienia");
            entity.Property(e => e.ObCZakresOdData)
                .HasDefaultValue(0)
                .HasColumnName("ObC_ZakresOdData");
        });

        modelBuilder.Entity<ObiektyDomyslne>(entity =>
        {
            entity.HasKey(e => new { e.ObDObiNumer, e.ObDObiTyp, e.ObDObiLp, e.ObDKontekstDomyslnego }).HasName("ObD_Primary");

            entity.ToTable("ObiektyDomyslne", "CDN", tb => tb.HasTrigger("ObiektyDomyslne_InsertUpdateHandler"));

            entity.Property(e => e.ObDObiNumer).HasColumnName("ObD_ObiNumer");
            entity.Property(e => e.ObDObiTyp).HasColumnName("ObD_ObiTyp");
            entity.Property(e => e.ObDObiLp).HasColumnName("ObD_ObiLp");
            entity.Property(e => e.ObDKontekstDomyslnego).HasColumnName("ObD_KontekstDomyslnego");
            entity.Property(e => e.ObDCzasDodania)
                .HasDefaultValue(0)
                .HasColumnName("ObD_CzasDodania");
            entity.Property(e => e.ObDCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("ObD_CzasModyfikacji");
            entity.Property(e => e.ObDDomFirma)
                .HasDefaultValue(0)
                .HasColumnName("ObD_DomFirma");
            entity.Property(e => e.ObDDomLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ObD_DomLp");
            entity.Property(e => e.ObDDomNumer)
                .HasDefaultValue(0)
                .HasColumnName("ObD_DomNumer");
            entity.Property(e => e.ObDDomTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ObD_DomTyp");
            entity.Property(e => e.ObDObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("ObD_ObiFirma");
            entity.Property(e => e.ObDOpeDodajacy)
                .HasDefaultValue(0)
                .HasColumnName("ObD_OpeDodajacy");
            entity.Property(e => e.ObDOpeModyfikujacy)
                .HasDefaultValue(0)
                .HasColumnName("ObD_OpeModyfikujacy");
        });

        modelBuilder.Entity<ObiektyLinki>(entity =>
        {
            entity.HasKey(e => new { e.OblId, e.OblLp }).HasName("OBL_Primary");

            entity.ToTable("ObiektyLinki", "CDN", tb =>
                {
                    tb.HasTrigger("ObiektyLinki_DeleteHandler");
                    tb.HasTrigger("ObiektyLinki_InsertHandler");
                    tb.HasTrigger("ObiektyLinki_UpdateHandler");
                });

            entity.HasIndex(e => new { e.OblGid1typ, e.OblGid1numer, e.OblGid1lp, e.OblGid1subLp, e.OblGid2typ, e.OblGid2numer, e.OblGid2lp, e.OblGid2subLp }, "OBLObiekty").IsUnique();

            entity.Property(e => e.OblId).HasColumnName("OBL_ID");
            entity.Property(e => e.OblLp).HasColumnName("OBL_LP");
            entity.Property(e => e.OblGid1firma)
                .HasDefaultValue(0)
                .HasColumnName("OBL_GID1Firma");
            entity.Property(e => e.OblGid1lp)
                .HasDefaultValue((short)0)
                .HasColumnName("OBL_GID1Lp");
            entity.Property(e => e.OblGid1numer)
                .HasDefaultValue(0)
                .HasColumnName("OBL_GID1Numer");
            entity.Property(e => e.OblGid1subLp)
                .HasDefaultValue(0)
                .HasColumnName("OBL_GID1SubLp");
            entity.Property(e => e.OblGid1typ)
                .HasDefaultValue((short)0)
                .HasColumnName("OBL_GID1Typ");
            entity.Property(e => e.OblGid2firma)
                .HasDefaultValue(0)
                .HasColumnName("OBL_GID2Firma");
            entity.Property(e => e.OblGid2lp)
                .HasDefaultValue((short)0)
                .HasColumnName("OBL_GID2Lp");
            entity.Property(e => e.OblGid2numer)
                .HasDefaultValue(0)
                .HasColumnName("OBL_GID2Numer");
            entity.Property(e => e.OblGid2subLp)
                .HasDefaultValue(0)
                .HasColumnName("OBL_GID2SubLp");
            entity.Property(e => e.OblGid2typ)
                .HasDefaultValue((short)0)
                .HasColumnName("OBL_GID2Typ");
            entity.Property(e => e.OblObltstamp)
                .HasDefaultValue(0)
                .HasColumnName("OBL_OBLTStamp");
            entity.Property(e => e.OblOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("OBL_OpeFirma");
            entity.Property(e => e.OblOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("OBL_OpeLp");
            entity.Property(e => e.OblOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("OBL_OpeNumer");
            entity.Property(e => e.OblOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OBL_OpeTyp");
            entity.Property(e => e.OblOpis)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OBL_Opis");
        });

        modelBuilder.Entity<ObiektyObce>(entity =>
        {
            entity.HasKey(e => e.OboIdObiektu).HasName("OBO_Primary");

            entity.ToTable("ObiektyObce", "CDN");

            entity.HasIndex(e => new { e.OboIdSesji, e.OboIdObiektu }, "ObOSesje").IsUnique();

            entity.Property(e => e.OboIdObiektu).HasColumnName("OBO_IdObiektu");
            entity.Property(e => e.OboGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("OBO_GIDFirma");
            entity.Property(e => e.OboGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("OBO_GIDLp");
            entity.Property(e => e.OboGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("OBO_GIDNumer");
            entity.Property(e => e.OboGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OBO_GIDTyp");
            entity.Property(e => e.OboIdApi)
                .HasDefaultValue((byte)0)
                .HasColumnName("OBO_IdAPI");
            entity.Property(e => e.OboIdSesji)
                .HasDefaultValue(0)
                .HasColumnName("OBO_IdSesji");
            entity.Property(e => e.OboTsotwarty)
                .HasDefaultValue(0)
                .HasColumnName("OBO_TSOtwarty");
        });

        modelBuilder.Entity<ObiektyZablok>(entity =>
        {
            entity.HasKey(e => new { e.ObZGidtyp, e.ObZGidnumer, e.ObZGidlp, e.ObZSesjaId }).HasName("ObZ_Primary");

            entity.ToTable("ObiektyZablok", "CDN");

            entity.Property(e => e.ObZGidtyp).HasColumnName("ObZ_GIDTyp");
            entity.Property(e => e.ObZGidnumer).HasColumnName("ObZ_GIDNumer");
            entity.Property(e => e.ObZGidlp).HasColumnName("ObZ_GIDLp");
            entity.Property(e => e.ObZSesjaId).HasColumnName("ObZ_SesjaId");
            entity.Property(e => e.ObZDataCzasZalozenia)
                .HasDefaultValue(0)
                .HasColumnName("ObZ_DataCzasZalozenia");
            entity.Property(e => e.ObZGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ObZ_GIDFirma");
            entity.Property(e => e.ObZNazwaFunkcji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ObZ_NazwaFunkcji");
        });

        modelBuilder.Entity<Odleglosci>(entity =>
        {
            entity.HasKey(e => e.OdlId).HasName("Odl_Primary");

            entity.ToTable("Odleglosci", "CDN", tb => tb.HasTrigger("Odleglosci_InsertUpdateHandler"));

            entity.HasIndex(e => e.OdlNazwa, "OdlNazwa").IsUnique();

            entity.HasIndex(e => new { e.OdlDoTyp, e.OdlDoNumer }, "OdlObiektDo");

            entity.HasIndex(e => new { e.OdlOdTyp, e.OdlOdNumer }, "OdlObiektOd");

            entity.Property(e => e.OdlId).HasColumnName("Odl_Id");
            entity.Property(e => e.OdlDoFirma)
                .HasDefaultValue(0)
                .HasColumnName("Odl_DoFirma");
            entity.Property(e => e.OdlDoLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Odl_DoLp");
            entity.Property(e => e.OdlDoNumer)
                .HasDefaultValue(0)
                .HasColumnName("Odl_DoNumer");
            entity.Property(e => e.OdlDoTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Odl_DoTyp");
            entity.Property(e => e.OdlNazwa)
                .HasMaxLength(44)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Odl_Nazwa");
            entity.Property(e => e.OdlOdFirma)
                .HasDefaultValue(0)
                .HasColumnName("Odl_OdFirma");
            entity.Property(e => e.OdlOdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Odl_OdLp");
            entity.Property(e => e.OdlOdNumer)
                .HasDefaultValue(0)
                .HasColumnName("Odl_OdNumer");
            entity.Property(e => e.OdlOdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Odl_OdTyp");
            entity.Property(e => e.OdlOdleglosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Odl_Odleglosc");
        });

        modelBuilder.Entity<OdpowiedziZadaniaWielokrotne>(entity =>
        {
            entity.HasKey(e => new { e.OzwZadId, e.OzwPytId, e.OzwOdpId }).HasName("OZW_Primary");

            entity.ToTable("OdpowiedziZadaniaWielokrotne", "CDN");

            entity.Property(e => e.OzwZadId).HasColumnName("OZW_ZadId");
            entity.Property(e => e.OzwPytId).HasColumnName("OZW_PytId");
            entity.Property(e => e.OzwOdpId).HasColumnName("OZW_OdpId");
            entity.Property(e => e.OzwTresc)
                .HasMaxLength(1025)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OZW_Tresc");

            entity.HasOne(d => d.OdpowiedziZadanium).WithMany(p => p.OdpowiedziZadaniaWielokrotnes)
                .HasForeignKey(d => new { d.OzwZadId, d.OzwPytId })
                .HasConstraintName("FK_OZWPrimary");
        });

        modelBuilder.Entity<OdpowiedziZadanium>(entity =>
        {
            entity.HasKey(e => new { e.OdzZadId, e.OdzPytId }).HasName("ODZ_Primary");

            entity.ToTable("OdpowiedziZadania", "CDN");

            entity.Property(e => e.OdzZadId).HasColumnName("ODZ_ZadId");
            entity.Property(e => e.OdzPytId).HasColumnName("ODZ_PytId");
            entity.Property(e => e.OdzAntId)
                .HasDefaultValue(0)
                .HasColumnName("ODZ_AntId");
            entity.Property(e => e.OdzGrupWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ODZ_GrupWaga");
            entity.Property(e => e.OdzOdpId)
                .HasDefaultValue(0)
                .HasColumnName("ODZ_OdpId");
            entity.Property(e => e.OdzOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ODZ_Opis");
            entity.Property(e => e.OdzPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ODZ_Punkty");
            entity.Property(e => e.OdzPunktyWazone)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ODZ_PunktyWazone");
            entity.Property(e => e.OdzPytWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ODZ_PytWaga");
            entity.Property(e => e.OdzRodpId)
                .HasDefaultValue(0)
                .HasColumnName("ODZ_RodpId");
            entity.Property(e => e.OdzTresc)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ODZ_Tresc");
            entity.Property(e => e.OdzZatwierdzona)
                .HasDefaultValue((short)0)
                .HasColumnName("ODZ_Zatwierdzona");

            entity.HasOne(d => d.OdzZad).WithMany(p => p.OdpowiedziZadania)
                .HasForeignKey(d => d.OdzZadId)
                .HasConstraintName("FK_OdzPrimary");
        });

        modelBuilder.Entity<Odsetki>(entity =>
        {
            entity.HasKey(e => new { e.OdsGidtyp, e.OdsGidnumer, e.OdsGidlp }).HasName("ODS_Primary");

            entity.ToTable("Odsetki", "CDN", tb =>
                {
                    tb.HasTrigger("Odsetki_InsertUpdateHandler");
                    tb.HasTrigger("Odsetki_Typ");
                });

            entity.HasIndex(e => new { e.OdsGidtyp, e.OdsGidnumer, e.OdsDataO, e.OdsTypOdsetek, e.OdsSlwTypOdsetek }, "ODSDataO");

            entity.Property(e => e.OdsGidtyp).HasColumnName("ODS_GIDTyp");
            entity.Property(e => e.OdsGidnumer).HasColumnName("ODS_GIDNumer");
            entity.Property(e => e.OdsGidlp).HasColumnName("ODS_GIDLp");
            entity.Property(e => e.OdsDataO)
                .HasDefaultValue(0)
                .HasColumnName("ODS_DataO");
            entity.Property(e => e.OdsGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ODS_GIDFirma");
            entity.Property(e => e.OdsProcOds)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ODS_ProcOds");
            entity.Property(e => e.OdsSlwTypOdsetek).HasColumnName("ODS_SlwTypOdsetek");
            entity.Property(e => e.OdsTstamp)
                .HasDefaultValue(0)
                .HasColumnName("ODS_Tstamp");
            entity.Property(e => e.OdsTypOdsetek).HasColumnName("ODS_TypOdsetek");
        });

        modelBuilder.Entity<OfertyDok>(entity =>
        {
            entity.HasKey(e => e.OfDOfDid).HasName("OfD_Primary");

            entity.ToTable("OfertyDok", "CDN");

            entity.HasIndex(e => e.OfDFaktId, "OfDFakt");

            entity.HasIndex(e => new { e.OfDNazwa, e.OfDOperator }, "OfDOferta").IsUnique();

            entity.Property(e => e.OfDOfDid).HasColumnName("OfD_OfDID");
            entity.Property(e => e.OfDBody)
                .HasDefaultValue("")
                .HasColumnType("ntext")
                .HasColumnName("OfD_Body");
            entity.Property(e => e.OfDFaktId)
                .HasDefaultValue(0)
                .HasColumnName("OfD_FaktID");
            entity.Property(e => e.OfDKntId)
                .HasDefaultValue(0)
                .HasColumnName("OfD_KntID");
            entity.Property(e => e.OfDNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfD_Nazwa");
            entity.Property(e => e.OfDOperator)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OfD_Operator");
        });

        modelBuilder.Entity<OfertyFrag>(entity =>
        {
            entity.HasKey(e => e.OfeOfeId).HasName("OFE_Primary");

            entity.ToTable("OfertyFrag", "CDN");

            entity.Property(e => e.OfeOfeId).HasColumnName("OFE_OfeID");
            entity.Property(e => e.OfeBody)
                .HasDefaultValue("")
                .HasColumnType("ntext")
                .HasColumnName("OFE_Body");
            entity.Property(e => e.OfeNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OFE_Nazwa");
            entity.Property(e => e.OfeTyp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OFE_Typ");
        });

        modelBuilder.Entity<Okresy>(entity =>
        {
            entity.HasKey(e => e.OkrId).HasName("OKR_Primary");

            entity.ToTable("Okresy", "CDN", tb =>
                {
                    tb.HasTrigger("Okresy_AktualizujMiesiace");
                    tb.HasTrigger("Okresy_DeleteHandler");
                });

            entity.HasIndex(e => e.OkrSymbol, "OKRSymbol").IsUnique();

            entity.Property(e => e.OkrId).HasColumnName("OKR_ID");
            entity.Property(e => e.OkrKoniec)
                .HasDefaultValue(0)
                .HasColumnName("OKR_Koniec");
            entity.Property(e => e.OkrOpeZgidnumer)
                .HasDefaultValue(0)
                .HasColumnName("OKR_OpeZGIDNumer");
            entity.Property(e => e.OkrOpis)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OKR_Opis");
            entity.Property(e => e.OkrPoczatek)
                .HasDefaultValue(0)
                .HasColumnName("OKR_Poczatek");
            entity.Property(e => e.OkrSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OKR_Symbol");
            entity.Property(e => e.OkrSymbolWnr)
                .HasDefaultValue((byte)0)
                .HasColumnName("OKR_SymbolWNr");
            entity.Property(e => e.OkrZamknietyDo)
                .HasDefaultValue(0)
                .HasColumnName("OKR_ZamknietyDo");
        });

        modelBuilder.Entity<OkresyMiesiace>(entity =>
        {
            entity.HasKey(e => new { e.OkmOkrId, e.OkmRok, e.OkmMiesiac }).HasName("OKM_Primary");

            entity.ToTable("OkresyMiesiace", "CDN");

            entity.Property(e => e.OkmOkrId).HasColumnName("OKM_OkrID");
            entity.Property(e => e.OkmRok).HasColumnName("OKM_Rok");
            entity.Property(e => e.OkmMiesiac).HasColumnName("OKM_Miesiac");
            entity.Property(e => e.OkmMiesiacDo)
                .HasDefaultValue(0)
                .HasColumnName("OKM_MiesiacDo");
            entity.Property(e => e.OkmMiesiacOd)
                .HasDefaultValue(0)
                .HasColumnName("OKM_MiesiacOd");

            entity.HasOne(d => d.OkmOkr).WithMany(p => p.OkresyMiesiaces)
                .HasForeignKey(d => d.OkmOkrId)
                .HasConstraintName("FK_OkMOkrID");
        });

        modelBuilder.Entity<OkresyZamkniete>(entity =>
        {
            entity.HasKey(e => e.OzaId).HasName("OZa_Primary");

            entity.ToTable("OkresyZamkniete", "CDN");

            entity.Property(e => e.OzaId).HasColumnName("OZa_ID");
            entity.Property(e => e.OzaDataDo)
                .HasDefaultValue(0)
                .HasColumnName("OZa_DataDo");
            entity.Property(e => e.OzaDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OZa_DataOd");
            entity.Property(e => e.OzaDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("OZa_DataZamkniecia");
            entity.Property(e => e.OzaOpeZfirma)
                .HasDefaultValue(0)
                .HasColumnName("OZa_OpeZFirma");
            entity.Property(e => e.OzaOpeZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("OZa_OpeZLp");
            entity.Property(e => e.OzaOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("OZa_OpeZNumer");
            entity.Property(e => e.OzaOpeZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OZa_OpeZTyp");
            entity.Property(e => e.OzaStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("OZa_Stan");
        });

        modelBuilder.Entity<OlapGrupy>(entity =>
        {
            entity.HasKey(e => e.OgrId).HasName("OGR_Primary");

            entity.ToTable("OlapGrupy", "CDN");

            entity.HasIndex(e => new { e.OgrWlaTyp, e.OgrWlaNumer, e.OgrNazwa }, "OgrNazwa").IsUnique();

            entity.Property(e => e.OgrId).HasColumnName("OGR_ID");
            entity.Property(e => e.OgrDataUtw)
                .HasDefaultValue(0)
                .HasColumnName("OGR_DataUtw");
            entity.Property(e => e.OgrHaslo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OGR_Haslo");
            entity.Property(e => e.OgrNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OGR_Nazwa");
            entity.Property(e => e.OgrPrcFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("OGR_PrcFirmaZ");
            entity.Property(e => e.OgrPrcLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("OGR_PrcLpZ");
            entity.Property(e => e.OgrPrcNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("OGR_PrcNumerZ");
            entity.Property(e => e.OgrPrcTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("OGR_PrcTypZ");
            entity.Property(e => e.OgrWlaFirma)
                .HasDefaultValue(0)
                .HasColumnName("OGR_WlaFirma");
            entity.Property(e => e.OgrWlaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("OGR_WlaLp");
            entity.Property(e => e.OgrWlaNumer)
                .HasDefaultValue(0)
                .HasColumnName("OGR_WlaNumer");
            entity.Property(e => e.OgrWlaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OGR_WlaTyp");
        });

        modelBuilder.Entity<OlapWidoki>(entity =>
        {
            entity.HasKey(e => e.OwiId).HasName("OWI_Primary");

            entity.ToTable("OlapWidoki", "CDN");

            entity.HasIndex(e => e.OwiNazwa, "OWINazwa").IsUnique();

            entity.Property(e => e.OwiId).HasColumnName("OWI_ID");
            entity.Property(e => e.OwiBazaOlap)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_BazaOLAP");
            entity.Property(e => e.OwiDataMod)
                .HasDefaultValue(0)
                .HasColumnName("OWI_DataMod");
            entity.Property(e => e.OwiDataUtw)
                .HasDefaultValue(0)
                .HasColumnName("OWI_DataUtw");
            entity.Property(e => e.OwiHaslo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_Haslo");
            entity.Property(e => e.OwiKostkaOlap)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_KostkaOLAP");
            entity.Property(e => e.OwiNazwa)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_Nazwa");
            entity.Property(e => e.OwiNiePublikuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWI_NiePublikuj");
            entity.Property(e => e.OwiOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_Opis");
            entity.Property(e => e.OwiPlikCub)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_PlikCUB");
            entity.Property(e => e.OwiPrcFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("OWI_PrcFirmaM");
            entity.Property(e => e.OwiPrcLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("OWI_PrcLpM");
            entity.Property(e => e.OwiPrcNumerM)
                .HasDefaultValue(0)
                .HasColumnName("OWI_PrcNumerM");
            entity.Property(e => e.OwiPrcTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("OWI_PrcTypM");
            entity.Property(e => e.OwiRodzajWidoku)
                .HasDefaultValue((short)0)
                .HasColumnName("OWI_RodzajWidoku");
            entity.Property(e => e.OwiSerwerOlap)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_SerwerOLAP");
            entity.Property(e => e.OwiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OWI_Typ");
            entity.Property(e => e.OwiTytul)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWI_Tytul");
            entity.Property(e => e.OwiWlaFirma)
                .HasDefaultValue(0)
                .HasColumnName("OWI_WlaFirma");
            entity.Property(e => e.OwiWlaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("OWI_WlaLp");
            entity.Property(e => e.OwiWlaNumer)
                .HasDefaultValue(0)
                .HasColumnName("OWI_WlaNumer");
            entity.Property(e => e.OwiWlaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OWI_WlaTyp");
            entity.Property(e => e.OwiZmianaOpisu)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWI_ZmianaOpisu");
        });

        modelBuilder.Entity<OlapWidokiLog>(entity =>
        {
            entity.HasKey(e => e.OwgId).HasName("OWG_Primary");

            entity.ToTable("OlapWidokiLog", "CDN");

            entity.Property(e => e.OwgId).HasColumnName("OWG_ID");
            entity.Property(e => e.OwgCzasUruchamiania)
                .HasDefaultValue(0)
                .HasColumnName("OWG_CzasUruchamiania");
            entity.Property(e => e.OwgIkr)
                .HasDefaultValue((short)0)
                .HasColumnName("OWG_IKR");
            entity.Property(e => e.OwgOwiid)
                .HasDefaultValue(0)
                .HasColumnName("OWG_OWIID");
            entity.Property(e => e.OwgPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("OWG_PrcNumer");
            entity.Property(e => e.OwgTstampUruchomienia)
                .HasDefaultValue(0)
                .HasColumnName("OWG_TStampUruchomienia");
        });

        modelBuilder.Entity<Olaplinki>(entity =>
        {
            entity.HasKey(e => new { e.OllOwiid, e.OllOgrid }).HasName("OLL_Primary");

            entity.ToTable("OLAPLinki", "CDN");

            entity.HasIndex(e => e.OllOgrid, "OLLGrupy");

            entity.Property(e => e.OllOwiid).HasColumnName("OLL_OWIID");
            entity.Property(e => e.OllOgrid).HasColumnName("OLL_OGRID");
            entity.Property(e => e.OllLp)
                .HasDefaultValue(0)
                .HasColumnName("OLL_Lp");

            entity.HasOne(d => d.OllOgr).WithMany(p => p.Olaplinkis)
                .HasForeignKey(d => d.OllOgrid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OLLGrupy");
        });

        modelBuilder.Entity<Olapxmldatum>(entity =>
        {
            entity.HasKey(e => new { e.OlxOwiid, e.OlxTyp, e.OlxId }).HasName("OLX_Primary");

            entity.ToTable("OLAPXMLData", "CDN");

            entity.Property(e => e.OlxOwiid).HasColumnName("OLX_OWIID");
            entity.Property(e => e.OlxTyp).HasColumnName("OLX_Typ");
            entity.Property(e => e.OlxId).HasColumnName("OLX_ID");
            entity.Property(e => e.OlxDefinicja)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("OLX_DEFINICJA");
            entity.Property(e => e.OlxDefinicjabin)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("OLX_DEFINICJABIN");

            entity.HasOne(d => d.OlxOwi).WithMany(p => p.Olapxmldata)
                .HasForeignKey(d => d.OlxOwiid)
                .HasConstraintName("FK_OLXPrimary");
        });

        modelBuilder.Entity<OpeCentra>(entity =>
        {
            entity.HasKey(e => new { e.OpCOpeNumer, e.OpCFrSid }).HasName("OpC_Primary");

            entity.ToTable("OpeCentra", "CDN");

            entity.HasIndex(e => e.OpCFrSid, "OpCStruktura");

            entity.Property(e => e.OpCOpeNumer).HasColumnName("OpC_OpeNumer");
            entity.Property(e => e.OpCFrSid).HasColumnName("OpC_FrSId");
            entity.Property(e => e.OpCOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("OpC_OpeFirma");
            entity.Property(e => e.OpCOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("OpC_OpeLp");
            entity.Property(e => e.OpCOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OpC_OpeTyp");

            entity.HasOne(d => d.OpCFrS).WithMany(p => p.OpeCentras)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.OpCFrSid)
                .HasConstraintName("FK_OpCStruktura");

            entity.HasOne(d => d.OpCOpeNumerNavigation).WithMany(p => p.OpeCentras)
                .HasForeignKey(d => d.OpCOpeNumer)
                .HasConstraintName("FK_OpCPrimary");
        });

        modelBuilder.Entity<OpeDefKol>(entity =>
        {
            entity.HasKey(e => new { e.OdkOpeId, e.OdkOpeTyp, e.OdkDefId }).HasName("ODK_Primary");

            entity.ToTable("OpeDefKol", "CDN", tb => tb.HasTrigger("OpeDefKol_InsertUpdateHandler"));

            entity.Property(e => e.OdkOpeId).HasColumnName("ODK_OpeID");
            entity.Property(e => e.OdkOpeTyp).HasColumnName("ODK_OpeTyp");
            entity.Property(e => e.OdkDefId).HasColumnName("ODK_DefID");

            entity.HasOne(d => d.OdkDef).WithMany(p => p.OpeDefKols)
                .HasForeignKey(d => d.OdkDefId)
                .HasConstraintName("FK_ODKDefinicjaKol");
        });

        modelBuilder.Entity<OpeKarty>(entity =>
        {
            entity.HasKey(e => e.OpeGidnumer).HasName("Ope_Primary");

            entity.ToTable("OpeKarty", "CDN", tb =>
                {
                    tb.HasTrigger("OpeKartyAlias_DeleteHandler");
                    tb.HasTrigger("OpeKartyArchiwizujacy_DeleteHandler");
                    tb.HasTrigger("OpeKartyModyfikujacy_DeleteHandler");
                    tb.HasTrigger("OpeKartyWystawiajacy_DeleteHandler");
                    tb.HasTrigger("OpeKartyZatwierdzajacy_DeleteHandler");
                    tb.HasTrigger("OpeKarty_BlokadaWMSAdmin");
                    tb.HasTrigger("OpeKarty_DeleteHandler");
                    tb.HasTrigger("OpeKarty_InsertUpdateHandler");
                    tb.HasTrigger("OpeKarty_PicoUsuniete");
                    tb.HasTrigger("OpeKarty_UaktualnijStruktureFirmy");
                });

            entity.HasIndex(e => e.OpeIdent, "OpeIdent").IsUnique();

            entity.HasIndex(e => e.OpeJezyk, "OpeJezyk");

            entity.HasIndex(e => e.OpeMesnrKartyAtkId, "OpeMESNrKartyAtkId");

            entity.HasIndex(e => new { e.OpePrcTyp, e.OpePrcNumer }, "OpePracownik");

            entity.HasIndex(e => e.OpeNtsid, "OpeSID");

            entity.HasIndex(e => new { e.OpeStaTyp, e.OpeStaNumer }, "OpeStan");

            entity.Property(e => e.OpeGidnumer).HasColumnName("Ope_GIDNumer");
            entity.Property(e => e.OpeAdministrator)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_Administrator");
            entity.Property(e => e.OpeAdministratorDo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AdministratorDO");
            entity.Property(e => e.OpeAkceptacjaPaczkiPrzelewow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AkceptacjaPaczkiPrzelewow");
            entity.Property(e => e.OpeAkceptacjaWydatkow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AkceptacjaWydatkow");
            entity.Property(e => e.OpeAktualizacjaAdresowKontrahenta)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AktualizacjaAdresowKontrahenta");
            entity.Property(e => e.OpeAktualizacjaCen)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AktualizacjaCen");
            entity.Property(e => e.OpeAktualizacjaInformacji)
                .HasDefaultValue(0)
                .HasColumnName("Ope_AktualizacjaInformacji");
            entity.Property(e => e.OpeAktualizacjaWszystkoPl)
                .HasDefaultValue(0)
                .HasColumnName("Ope_AktualizacjaWszystkoPL");
            entity.Property(e => e.OpeAktywnoscEiP)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AktywnoscEiP");
            entity.Property(e => e.OpeAnonimizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_Anonimizacja");
            entity.Property(e => e.OpeAnonimizujBezBlokad)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AnonimizujBezBlokad");
            entity.Property(e => e.OpeApfinoWindykacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ApfinoWindykacja");
            entity.Property(e => e.OpeAtrybutyWizytyOddzialowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AtrybutyWizytyOddzialowe");
            entity.Property(e => e.OpeAtrybutyZmianaKlawiatury)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_AtrybutyZmianaKlawiatury");
            entity.Property(e => e.OpeBezZmianyHasla)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_BezZmianyHasla");
            entity.Property(e => e.OpeBipointLogin)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_BIPointLogin");
            entity.Property(e => e.OpeBlokowanieDostaw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_BlokowanieDostaw");
            entity.Property(e => e.OpeBuforKasowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_BuforKasowy");
            entity.Property(e => e.OpeCenaPotwZs)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_CenaPotwZS");
            entity.Property(e => e.OpeCenaPotwZz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_CenaPotwZZ");
            entity.Property(e => e.OpeChatErp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ChatERP");
            entity.Property(e => e.OpeCofniecieZatwierdzeniaAkceptacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_CofniecieZatwierdzeniaAkceptacji");
            entity.Property(e => e.OpeCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Ope_CzasModyfikacji");
            entity.Property(e => e.OpeDataWprowadzeniaHasla)
                .HasDefaultValue(0)
                .HasColumnName("Ope_DataWprowadzeniaHasla");
            entity.Property(e => e.OpeDefiniowanieBudzetu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_DefiniowanieBudzetu");
            entity.Property(e => e.OpeDoczytujRekordy)
                .HasDefaultValue((byte)1)
                .HasColumnName("Ope_DoczytujRekordy");
            entity.Property(e => e.OpeDokNiepotwBst)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_DokNiepotwBST");
            entity.Property(e => e.OpeDokPotw)
                .HasDefaultValue(0)
                .HasColumnName("Ope_DokPotw");
            entity.Property(e => e.OpeDostepDoParamRejestrow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_DostepDoParamRejestrow");
            entity.Property(e => e.OpeDostepDoWzorcowAnalit)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_DostepDoWzorcowAnalit");
            entity.Property(e => e.OpeDostepDoWzorcowAnalitPodrz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_DostepDoWzorcowAnalitPodrz");
            entity.Property(e => e.OpeDyrektor)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_Dyrektor");
            entity.Property(e => e.OpeEdycjaBudzetu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaBudzetu");
            entity.Property(e => e.OpeEdycjaCenySpiElem)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaCenySpiElem");
            entity.Property(e => e.OpeEdycjaDatySpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaDatySpr");
            entity.Property(e => e.OpeEdycjaNrObcego)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaNrObcego");
            entity.Property(e => e.OpeEdycjaOplatySpoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaOplatySpoz");
            entity.Property(e => e.OpeEdycjaPcn)
                .HasDefaultValue(0)
                .HasColumnName("Ope_EdycjaPCN");
            entity.Property(e => e.OpeEdycjaPotwPkj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaPotwPKJ");
            entity.Property(e => e.OpeEdycjaStawkiVatnaSpi)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaStawkiVATNaSpi");
            entity.Property(e => e.OpeEdycjaWartosciBudzetu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaWartosciBudzetu");
            entity.Property(e => e.OpeEdycjaZatwierdzonychNot)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EdycjaZatwierdzonychNot");
            entity.Property(e => e.OpeEsprawozdaniaFinansowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_EsprawozdaniaFinansowe");
            entity.Property(e => e.OpeFiltryObowiazkowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_FiltryObowiazkowe");
            entity.Property(e => e.OpeFrSid)
                .HasDefaultValue(0)
                .HasColumnName("Ope_FrSId");
            entity.Property(e => e.OpeGenerowanieJpk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_GenerowanieJPK");
            entity.Property(e => e.OpeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Ope_GIDFirma");
            entity.Property(e => e.OpeGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_GIDLp");
            entity.Property(e => e.OpeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_GIDTyp");
            entity.Property(e => e.OpeGotowkaPotw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_GotowkaPotw");
            entity.Property(e => e.OpeHaslo)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_Haslo");
            entity.Property(e => e.OpeHasloBaza)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_Haslo_baza");
            entity.Property(e => e.OpeHasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_Haslo_chk");
            entity.Property(e => e.OpeIdent)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_Ident");
            entity.Property(e => e.OpeIdentBaza)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_Ident_baza");
            entity.Property(e => e.OpeInfoKoniecAkcjiAi)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_InfoKoniecAkcjiAI");
            entity.Property(e => e.OpeJezyk)
                .HasDefaultValue(0)
                .HasColumnName("Ope_Jezyk");
            entity.Property(e => e.OpeKaRfirma)
                .HasDefaultValue(0)
                .HasColumnName("Ope_KaRFirma");
            entity.Property(e => e.OpeKaRlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_KaRLp");
            entity.Property(e => e.OpeKaRnumer)
                .HasDefaultValue(0)
                .HasColumnName("Ope_KaRNumer");
            entity.Property(e => e.OpeKaRtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_KaRTyp");
            entity.Property(e => e.OpeKierownik)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_Kierownik");
            entity.Property(e => e.OpeKorektaDanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_KorektaDanych");
            entity.Property(e => e.OpeKorektyIlosciowoWartosciowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_KorektyIlosciowoWartosciowe");
            entity.Property(e => e.OpeKseFedycjaNumeru)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_KSeFEdycjaNumeru");
            entity.Property(e => e.OpeKseFpobieranieFaktur)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_KSeFPobieranieFaktur");
            entity.Property(e => e.OpeKseFtoken)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_KSeFToken");
            entity.Property(e => e.OpeKseFwysylanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_KSeFWysylanie");
            entity.Property(e => e.OpeLimitBezOgraniczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_LimitBezOgraniczenia");
            entity.Property(e => e.OpeLimitBezOgraniczeniaZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_LimitBezOgraniczeniaZam");
            entity.Property(e => e.OpeLimitKredytu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Ope_LimitKredytu");
            entity.Property(e => e.OpeLimitKredytuZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Ope_LimitKredytuZam");
            entity.Property(e => e.OpeLimitPoTerminie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Ope_LimitPoTerminie");
            entity.Property(e => e.OpeLogCoWyswietlac)
                .HasDefaultValue((byte)7)
                .HasColumnName("Ope_LogCoWyswietlac");
            entity.Property(e => e.OpeLogZamknij)
                .HasDefaultValue((byte)1)
                .HasColumnName("Ope_LogZamknij");
            entity.Property(e => e.OpeLogZapisujKomunikaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_LogZapisujKomunikaty");
            entity.Property(e => e.OpeLoginShipping)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_LoginShipping");
            entity.Property(e => e.OpeLokatorCzas)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("Ope_LokatorCzas");
            entity.Property(e => e.OpeLokatorTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_LokatorTyp");
            entity.Property(e => e.OpeMenuIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MenuIlosc");
            entity.Property(e => e.OpeMenuTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MenuTryb");
            entity.Property(e => e.OpeMesadministrator)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESAdministrator");
            entity.Property(e => e.OpeMesdodawanieIusuwanieParam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESDodawanieIUsuwanieParam");
            entity.Property(e => e.OpeMesdostepnosc)
                .HasDefaultValue(0)
                .HasColumnName("Ope_MESDostepnosc");
            entity.Property(e => e.OpeMesedycjaTerminowRealizacji)
                .HasDefaultValue((byte)1)
                .HasColumnName("Ope_MESEdycjaTerminowRealizacji");
            entity.Property(e => e.OpeMesgenerowanieDok)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESGenerowanieDok");
            entity.Property(e => e.OpeMeskontrolaJakosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESKontrolaJakosci");
            entity.Property(e => e.OpeMesnrKartyAtkId)
                .HasDefaultValue(0)
                .HasColumnName("Ope_MESNrKartyAtkId");
            entity.Property(e => e.OpeMesnrKartyWg)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESNrKartyWg");
            entity.Property(e => e.OpeMesobslugaCech)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESObslugaCech");
            entity.Property(e => e.OpeMesobslugaOpcje)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESObslugaOpcje");
            entity.Property(e => e.OpeMeswidokZalacznikow)
                .HasDefaultValue((byte)1)
                .HasColumnName("Ope_MESWidokZalacznikow");
            entity.Property(e => e.OpeMeszadaniaWgniazdachRoboczych)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MESZadaniaWGniazdachRoboczych");
            entity.Property(e => e.OpeMetodaKasowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MetodaKasowa");
            entity.Property(e => e.OpeModDatyKsiegowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ModDatyKsiegowania");
            entity.Property(e => e.OpeModPolecenWyjazdu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ModPolecenWyjazdu");
            entity.Property(e => e.OpeModuly)
                .HasDefaultValue(0)
                .HasColumnName("Ope_Moduly");
            entity.Property(e => e.OpeModuly2)
                .HasDefaultValue(0)
                .HasColumnName("Ope_Moduly2");
            entity.Property(e => e.OpeMultiLogowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_MultiLogowanie");
            entity.Property(e => e.OpeNazwisko)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_Nazwisko");
            entity.Property(e => e.OpeNieudaneLogowania)
                .HasDefaultValue(0)
                .HasColumnName("Ope_NieudaneLogowania");
            entity.Property(e => e.OpeNieudaneLogowanieCzas)
                .HasDefaultValue(0)
                .HasColumnName("Ope_NieudaneLogowanieCzas");
            entity.Property(e => e.OpeNieudaneLogowanieZrodlo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_NieudaneLogowanieZrodlo");
            entity.Property(e => e.OpeNrKasjera)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_NrKasjera");
            entity.Property(e => e.OpeNtkonto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_NTKonto");
            entity.Property(e => e.OpeNtlogin)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_NTLogin");
            entity.Property(e => e.OpeNtsid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_NTSid");
            entity.Property(e => e.OpeObslugaPropozycjiKompensat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ObslugaPropozycjiKompensat");
            entity.Property(e => e.OpeOdliczanieFaZalNaPotw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_OdliczanieFaZalNaPotw");
            entity.Property(e => e.OpeOdtwierdzanieOpisuAnalit)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_OdtwierdzanieOpisuAnalit");
            entity.Property(e => e.OpeOknaTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_OknaTryb");
            entity.Property(e => e.OpeOkresObrachunkowy)
                .HasDefaultValue(0)
                .HasColumnName("Ope_OkresObrachunkowy");
            entity.Property(e => e.OpeOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("Ope_OpeMNumer");
            entity.Property(e => e.OpeOperacjeNaPotwierdzonychZsr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_OperacjeNaPotwierdzonychZSR");
            entity.Property(e => e.OpeOpisAnalitycznyDokWbuforze)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_OpisAnalitycznyDokWBuforze");
            entity.Property(e => e.OpeOtwieranieOkresuRetro)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_OtwieranieOkresuRetro");
            entity.Property(e => e.OpeOtwieraniePotwierdzonychUmow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_OtwieraniePotwierdzonychUmow");
            entity.Property(e => e.OpeParametrWgRozliczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ParametrWgRozliczenia");
            entity.Property(e => e.OpePlatnosci)
                .HasDefaultValue(1)
                .HasColumnName("Ope_Platnosci");
            entity.Property(e => e.OpePlatnosciWzPz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PlatnosciWzPz");
            entity.Property(e => e.OpePlusyNaDrzewach)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PlusyNaDrzewach");
            entity.Property(e => e.OpePodgladDokumentow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PodgladDokumentow");
            entity.Property(e => e.OpePodsumowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_Podsumowania");
            entity.Property(e => e.OpePomiarCzasow)
                .HasDefaultValue(-1)
                .HasColumnName("Ope_PomiarCzasow");
            entity.Property(e => e.OpePotwierdzeniePrzejazdu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PotwierdzeniePrzejazdu");
            entity.Property(e => e.OpePracaTerminalowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PracaTerminalowa");
            entity.Property(e => e.OpePrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("Ope_PrcFirma");
            entity.Property(e => e.OpePrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_PrcLp");
            entity.Property(e => e.OpePrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("Ope_PrcNumer");
            entity.Property(e => e.OpePrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_PrcTyp");
            entity.Property(e => e.OpePrezentujInformacje)
                .HasDefaultValue(-1)
                .HasColumnName("Ope_PrezentujInformacje");
            entity.Property(e => e.OpePrezentujWszystkoPl)
                .HasDefaultValue(-1)
                .HasColumnName("Ope_PrezentujWszystkoPl");
            entity.Property(e => e.OpePriorytetRez)
                .HasDefaultValue((byte)1)
                .HasColumnName("Ope_PriorytetRez");
            entity.Property(e => e.OpePropozycjaPaczkiPrzelewow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PropozycjaPaczkiPrzelewow");
            entity.Property(e => e.OpePrzerywanieSesji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PrzerywanieSesji");
            entity.Property(e => e.OpePulpitOperatora)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PulpitOperatora");
            entity.Property(e => e.OpePytanieOpodzialPlat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_PytanieOPodzialPlat");
            entity.Property(e => e.OpeRabatOperatora)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Ope_RabatOperatora");
            entity.Property(e => e.OpeRabatOperatoraBezOgraniczen)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_RabatOperatoraBezOgraniczen");
            entity.Property(e => e.OpeRaportyAbcxyz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_RaportyABCXYZ");
            entity.Property(e => e.OpeRealizacjaUmpoPrzekroczeniuIlosciNaPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_RealizacjaUMPoPrzekroczeniuIlosciNaPoz");
            entity.Property(e => e.OpeRozdzielZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_RozdzielZasoby");
            entity.Property(e => e.OpeRozliczenieKampanii)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_RozliczenieKampanii");
            entity.Property(e => e.OpeRoznicowyVatnaFaKoncowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_RoznicowyVATNaFaKoncowe");
            entity.Property(e => e.OpeRozpoznawanieTwarzy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_RozpoznawanieTwarzy");
            entity.Property(e => e.OpeSerwerDrukarka)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_SerwerDrukarka");
            entity.Property(e => e.OpeSerwerWydr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_SerwerWydr");
            entity.Property(e => e.OpeSsologin)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_SSOLogin");
            entity.Property(e => e.OpeSsotoken)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_SSOToken");
            entity.Property(e => e.OpeStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("Ope_StaFirma");
            entity.Property(e => e.OpeStaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_StaLp");
            entity.Property(e => e.OpeStaNumer)
                .HasDefaultValue(0)
                .HasColumnName("Ope_StaNumer");
            entity.Property(e => e.OpeStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_StaTyp");
            entity.Property(e => e.OpeStrukturaKosztowDodZak)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_StrukturaKosztowDodZak");
            entity.Property(e => e.OpeStrukturaMagazynu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_StrukturaMagazynu");
            entity.Property(e => e.OpeTlumaczenie)
                .HasDefaultValue((byte)1)
                .HasColumnName("Ope_Tlumaczenie");
            entity.Property(e => e.OpeTransakcjaUjemnyStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_TransakcjaUjemnyStan");
            entity.Property(e => e.OpeTransakcjaWyplataSrodkow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_TransakcjaWyplataSrodkow");
            entity.Property(e => e.OpeUserGoogle)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_UserGoogle");
            entity.Property(e => e.OpeUserOutlook)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Ope_UserOutlook");
            entity.Property(e => e.OpeUzywajKomunikatora)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_UzywajKomunikatora");
            entity.Property(e => e.OpeWgladListaWno)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_WgladListaWno");
            entity.Property(e => e.OpeWidziCenyZakupu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_WidziCenyZakupu");
            entity.Property(e => e.OpeWidziKosztyZlecenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_WidziKosztyZlecenia");
            entity.Property(e => e.OpeWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_Wsk");
            entity.Property(e => e.OpeWylaczSynchr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_WylaczSynchr");
            entity.Property(e => e.OpeZaawansowaneParamKsiegowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZaawansowaneParamKsiegowe");
            entity.Property(e => e.OpeZablokowane)
                .HasDefaultValue((short)0)
                .HasColumnName("Ope_Zablokowane");
            entity.Property(e => e.OpeZamPotw)
                .HasDefaultValue(0)
                .HasColumnName("Ope_ZamPotw");
            entity.Property(e => e.OpeZamykanieDokumentowAwdZwm)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZamykanieDokumentowAWD_ZWM");
            entity.Property(e => e.OpeZamykanieOkresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZamykanieOkresu");
            entity.Property(e => e.OpeZarzadzaniePulpitami)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZarzadzaniePulpitami");
            entity.Property(e => e.OpeZarzadzanieWyglademList)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZarzadzanieWyglademList");
            entity.Property(e => e.OpeZatwierdzanieDelegacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZatwierdzanieDelegacji");
            entity.Property(e => e.OpeZatwierdzanieDokPodWzgledem)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZatwierdzanieDokPodWzgledem");
            entity.Property(e => e.OpeZezwalajNaOtwieranieZakonUmow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZezwalajNaOtwieranieZakonUmow");
            entity.Property(e => e.OpeZmFormPlatNaDom)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZmFormPlatNaDom");
            entity.Property(e => e.OpeZmianaPrzyczynyKorNaZatwDok)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZmianaPrzyczynyKorNaZatwDok");
            entity.Property(e => e.OpeZwijanieListyDokZwPoziom)
                .HasDefaultValue((byte)1)
                .HasColumnName("Ope_ZwijanieListyDokZwPoziom");
            entity.Property(e => e.OpeZwijanieListyDokZwTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Ope_ZwijanieListyDokZwTryb");
        });

        modelBuilder.Entity<OpeOpisy>(entity =>
        {
            entity.HasKey(e => new { e.OpOOpeNumer, e.OpOOpeLp }).HasName("OpO_Primary");

            entity.ToTable("OpeOpisy", "CDN");

            entity.Property(e => e.OpOOpeNumer).HasColumnName("OpO_OpeNumer");
            entity.Property(e => e.OpOOpeLp).HasColumnName("OpO_OpeLp");
            entity.Property(e => e.OpOOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("OpO_OpeFirma");
            entity.Property(e => e.OpOOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OpO_OpeTyp");
            entity.Property(e => e.OpOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OpO_Opis");
            entity.Property(e => e.OpOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("OpO_Typ");

            entity.HasOne(d => d.OpOOpeNumerNavigation).WithMany(p => p.OpeOpisies)
                .HasForeignKey(d => d.OpOOpeNumer)
                .HasConstraintName("FK_OpOPrimary");
        });

        modelBuilder.Entity<OpePromocje>(entity =>
        {
            entity.HasKey(e => e.OpmId).HasName("OPm_Primary");

            entity.ToTable("OpePromocje", "CDN", tb => tb.HasTrigger("OpePromocje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.OpmOpeNumer, e.OpmPrmId }, "OPmOpeNumer").IsUnique();

            entity.HasIndex(e => e.OpmPrmId, "OPmPrmId");

            entity.Property(e => e.OpmId).HasColumnName("OPm_Id");
            entity.Property(e => e.OpmOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("OPm_OpeNumer");
            entity.Property(e => e.OpmPrmId)
                .HasDefaultValue(0)
                .HasColumnName("OPm_PrmId");
            entity.Property(e => e.OpmWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("OPm_Wartosc");

            entity.HasOne(d => d.OpmPrm).WithMany(p => p.OpePromocjes)
                .HasForeignKey(d => d.OpmPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OPmPrmId");
        });

        modelBuilder.Entity<OpePulpity>(entity =>
        {
            entity.HasKey(e => e.XldId).HasName("XLD_Primary");

            entity.ToTable("OpePulpity", "CDN", tb => tb.HasTrigger("OpePulpity_InsertUpdateHandler"));

            entity.HasIndex(e => e.XldOpeNumer, "XLDOperator");

            entity.Property(e => e.XldId).HasColumnName("XLD_ID");
            entity.Property(e => e.XldDefinicja).HasColumnName("XLD_Definicja");
            entity.Property(e => e.XldDomyslnyWmodule)
                .HasDefaultValue(0)
                .HasColumnName("XLD_DomyslnyWModule");
            entity.Property(e => e.XldDomyslnyWmodule2)
                .HasDefaultValue(0)
                .HasColumnName("XLD_DomyslnyWModule2");
            entity.Property(e => e.XldModuly)
                .HasDefaultValue(0)
                .HasColumnName("XLD_Moduly");
            entity.Property(e => e.XldModuly2)
                .HasDefaultValue(0)
                .HasColumnName("XLD_Moduly2");
            entity.Property(e => e.XldNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("XLD_Nazwa");
            entity.Property(e => e.XldOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("XLD_OpeNumer");
            entity.Property(e => e.XldPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("XLD_Predefiniowany");
        });

        modelBuilder.Entity<OpeSkillGrupa>(entity =>
        {
            entity.HasKey(e => e.OsgId).HasName("OSG_Primary");

            entity.ToTable("OpeSkillGrupa", "CDN");

            entity.HasIndex(e => new { e.OsgOpeTyp, e.OsgOpeNumer }, "OsgOperator");

            entity.Property(e => e.OsgId).HasColumnName("OSG_ID");
            entity.Property(e => e.OsgNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OSG_Nazwa");
            entity.Property(e => e.OsgOpeCccid)
                .HasDefaultValue(0)
                .HasColumnName("OSG_OpeCCCID");
            entity.Property(e => e.OsgOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("OSG_OpeFirma");
            entity.Property(e => e.OsgOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("OSG_OpeNumer");
            entity.Property(e => e.OsgOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OSG_OpeTyp");
            entity.Property(e => e.OsgSkillGrupa)
                .HasDefaultValue(0)
                .HasColumnName("OSG_SkillGrupa");

            entity.HasOne(d => d.OsgOpeNumerNavigation).WithMany(p => p.OpeSkillGrupas)
                .HasForeignKey(d => d.OsgOpeNumer)
                .HasConstraintName("FK_OsgOperator");
        });

        modelBuilder.Entity<OpeZakazy>(entity =>
        {
            entity.HasKey(e => new { e.OpZOpeNumer, e.OpZProcId }).HasName("OpZ_Primary");

            entity.ToTable("OpeZakazy", "CDN");

            entity.Property(e => e.OpZOpeNumer).HasColumnName("OpZ_OpeNumer");
            entity.Property(e => e.OpZProcId).HasColumnName("OpZ_ProcID");
            entity.Property(e => e.OpZMaskaFormy)
                .HasDefaultValue((byte)0)
                .HasColumnName("OpZ_MaskaFormy");
            entity.Property(e => e.OpZMaskaFormyAtr)
                .HasDefaultValue((short)0)
                .HasColumnName("OpZ_MaskaFormyAtr");
            entity.Property(e => e.OpZMaskaFormyExp)
                .HasDefaultValue((short)0)
                .HasColumnName("OpZ_MaskaFormyExp");
            entity.Property(e => e.OpZOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("OpZ_OpeFirma");
            entity.Property(e => e.OpZOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("OpZ_OpeLp");
            entity.Property(e => e.OpZOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OpZ_OpeTyp");

            entity.HasOne(d => d.OpZOpeNumerNavigation).WithMany(p => p.OpeZakazies)
                .HasForeignKey(d => d.OpZOpeNumer)
                .HasConstraintName("FK_OpZPrimary");
        });

        modelBuilder.Entity<Operacje>(entity =>
        {
            entity.HasKey(e => new { e.KaoGidnumer, e.KaoGidlp }).HasName("KAO_Primary");

            entity.ToTable("Operacje", "CDN", tb =>
                {
                    tb.HasTrigger("Operacje_CzasModyfikacji");
                    tb.HasTrigger("Operacje_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.KaoKod, "KAOKod").IsUnique();

            entity.HasIndex(e => new { e.KaoSchtyp, e.KaoSchnumer }, "KAOSchemat");

            entity.Property(e => e.KaoGidnumer).HasColumnName("KAO_GIDNumer");
            entity.Property(e => e.KaoGidlp).HasColumnName("KAO_GIDLp");
            entity.Property(e => e.KaoAnulowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Anulowanie");
            entity.Property(e => e.KaoArchiwalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Archiwalne");
            entity.Property(e => e.KaoBony)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Bony");
            entity.Property(e => e.KaoCiagNumeracji)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAO_CiagNumeracji");
            entity.Property(e => e.KaoCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KAO_CzasModyfikacji");
            entity.Property(e => e.KaoDataControllingowa)
                .HasDefaultValue((short)0)
                .HasColumnName("KAO_DataControllingowa");
            entity.Property(e => e.KaoDataKsiegowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_DataKsiegowania");
            entity.Property(e => e.KaoDniPrzedData)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_DniPrzedData");
            entity.Property(e => e.KaoEdycjaKategorii)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_EdycjaKategorii");
            entity.Property(e => e.KaoGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAO_GIDFirma");
            entity.Property(e => e.KaoGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAO_GIDTyp");
            entity.Property(e => e.KaoKod)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAO_Kod");
            entity.Property(e => e.KaoKontoPrzec)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAO_KontoPrzec");
            entity.Property(e => e.KaoLokata)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Lokata");
            entity.Property(e => e.KaoNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAO_Nazwa");
            entity.Property(e => e.KaoNieRozliczaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_NieRozliczaj");
            entity.Property(e => e.KaoNumerKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("KAO_NumerKursu");
            entity.Property(e => e.KaoOddzial)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Oddzial");
            entity.Property(e => e.KaoRodzajKategorii)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_RodzajKategorii");
            entity.Property(e => e.KaoRodzajKursu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_RodzajKursu");
            entity.Property(e => e.KaoRp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_RP");
            entity.Property(e => e.KaoSchfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAO_SCHFirma");
            entity.Property(e => e.KaoSchlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAO_SCHLp");
            entity.Property(e => e.KaoSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAO_SCHNumer");
            entity.Property(e => e.KaoSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAO_SCHTyp");
            entity.Property(e => e.KaoSplitPayment)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_SplitPayment");
            entity.Property(e => e.KaoSymbolKonta)
                .HasDefaultValue(0)
                .HasColumnName("KAO_SymbolKonta");
            entity.Property(e => e.KaoTresc)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAO_Tresc");
            entity.Property(e => e.KaoTyp)
                .HasDefaultValue(0)
                .HasColumnName("KAO_Typ");
            entity.Property(e => e.KaoTypDaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_TypDaty");
            entity.Property(e => e.KaoTypPodmiotu)
                .HasDefaultValue((short)0)
                .HasColumnName("KAO_TypPodmiotu");
            entity.Property(e => e.KaoWplywaNaSrednia)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_WplywaNaSrednia");
            entity.Property(e => e.KaoWycWgKursuUstalonego)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_WycWgKursuUstalonego");
            entity.Property(e => e.KaoWynagrodzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Wynagrodzenie");
            entity.Property(e => e.KaoWyrazenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Wyrazenie");
            entity.Property(e => e.KaoZaliczka)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Zaliczka");
            entity.Property(e => e.KaoZalozKonto)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_ZalozKonto");
            entity.Property(e => e.KaoZerujaca)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAO_Zerujaca");
        });

        modelBuilder.Entity<OperatorTel>(entity =>
        {
            entity.HasKey(e => e.OptelOrgId).HasName("OPTel_Primary");

            entity.ToTable("OperatorTel", "CDN");

            entity.Property(e => e.OptelOrgId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OPTel_OrgID");
            entity.Property(e => e.OptelNazwa)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OPTel_Nazwa");
            entity.Property(e => e.OptelOrgParId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OPTel_OrgParID");
            entity.Property(e => e.OptelTyp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OPTel_Typ");
        });

        modelBuilder.Entity<OpisWarunki>(entity =>
        {
            entity.HasKey(e => e.OwrTabela).HasName("OWR_Primary");

            entity.ToTable("OpisWarunki", "CDN");

            entity.Property(e => e.OwrTabela).HasColumnName("OWR_Tabela");
            entity.Property(e => e.OwrAlternatywy)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWR_Alternatywy");
            entity.Property(e => e.OwrCzyProcedura)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWR_CzyProcedura");
            entity.Property(e => e.OwrCzyWarunek)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWR_CzyWarunek");
            entity.Property(e => e.OwrProcedura)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWR_Procedura");
            entity.Property(e => e.OwrWarunek)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWR_Warunek");
        });

        modelBuilder.Entity<OpisWymElem>(entity =>
        {
            entity.HasKey(e => new { e.OweGidtyp, e.OweGidnumer, e.OweGidlp }).HasName("OWE_Primary");

            entity.ToTable("OpisWymElem", "CDN", tb => tb.HasTrigger("UstalKierunek"));

            entity.Property(e => e.OweGidtyp).HasColumnName("OWE_GIDTyp");
            entity.Property(e => e.OweGidnumer).HasColumnName("OWE_GIDNumer");
            entity.Property(e => e.OweGidlp).HasColumnName("OWE_GIDLp");
            entity.Property(e => e.OweGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("OWE_GIDFirma");
            entity.Property(e => e.OweKierunek)
                .HasDefaultValue((short)0)
                .HasColumnName("OWE_Kierunek");
            entity.Property(e => e.OwePozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("OWE_Pozycja");
            entity.Property(e => e.OweProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("OWE_Procent");
            entity.Property(e => e.OweTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OWE_Typ");
            entity.Property(e => e.OweWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OWE_Wartosc");

            entity.HasOne(d => d.OpisWymNag).WithMany(p => p.OpisWymElems)
                .HasForeignKey(d => new { d.OweGidtyp, d.OweGidnumer })
                .HasConstraintName("FK_OWEPrimary");
        });

        modelBuilder.Entity<OpisWymNag>(entity =>
        {
            entity.HasKey(e => new { e.OwnGidtyp, e.OwnGidnumer }).HasName("OWN_Primary");

            entity.ToTable("OpisWymNag", "CDN", tb => tb.HasTrigger("OpisWymNag_InsertUpdateHandler"));

            entity.HasIndex(e => e.OwnGidnumer, "OWNPrimaryNoType");

            entity.Property(e => e.OwnGidtyp).HasColumnName("OWN_GIDTyp");
            entity.Property(e => e.OwnGidnumer).HasColumnName("OWN_GIDNumer");
            entity.Property(e => e.OwnDataControllingowa)
                .HasDefaultValue((short)0)
                .HasColumnName("OWN_DataControllingowa");
            entity.Property(e => e.OwnDataKsiegowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWN_DataKsiegowania");
            entity.Property(e => e.OwnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("OWN_GIDFirma");
            entity.Property(e => e.OwnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("OWN_GIDLp");
            entity.Property(e => e.OwnIloscElementow)
                .HasDefaultValue(0)
                .HasColumnName("OWN_IloscElementow");
            entity.Property(e => e.OwnKategoria)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWN_Kategoria");
            entity.Property(e => e.OwnOpeFirmaA)
                .HasDefaultValue(0)
                .HasColumnName("OWN_OpeFirmaA");
            entity.Property(e => e.OwnOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("OWN_OpeFirmaZ");
            entity.Property(e => e.OwnOpeLpA)
                .HasDefaultValue((short)0)
                .HasColumnName("OWN_OpeLpA");
            entity.Property(e => e.OwnOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("OWN_OpeLpZ");
            entity.Property(e => e.OwnOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("OWN_OpeNumerA");
            entity.Property(e => e.OwnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("OWN_OpeNumerZ");
            entity.Property(e => e.OwnOpeTypA)
                .HasDefaultValue((short)0)
                .HasColumnName("OWN_OpeTypA");
            entity.Property(e => e.OwnOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("OWN_OpeTypZ");
            entity.Property(e => e.OwnOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWN_Opis");
            entity.Property(e => e.OwnOwWid)
                .HasDefaultValue(0)
                .HasColumnName("OWN_OwWID");
            entity.Property(e => e.OwnTstampAkt)
                .HasDefaultValue(0)
                .HasColumnName("OWN_TStampAkt");
            entity.Property(e => e.OwnTstampZatw)
                .HasDefaultValue(0)
                .HasColumnName("OWN_TStampZatw");
            entity.Property(e => e.OwnZatwierdzono)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWN_Zatwierdzono");
        });

        modelBuilder.Entity<OpisWymSelem>(entity =>
        {
            entity.HasKey(e => new { e.OwsGidtyp, e.OwsGidnumer, e.OwsGidlp, e.OwsWmrid, e.OwsTypWymiaru }).HasName("OWS_Primary");

            entity.ToTable("OpisWymSElem", "CDN");

            entity.HasIndex(e => new { e.OwsWmrid, e.OwsTypWymiaru }, "OWSWmrId");

            entity.Property(e => e.OwsGidtyp).HasColumnName("OWS_GIDTyp");
            entity.Property(e => e.OwsGidnumer).HasColumnName("OWS_GIDNumer");
            entity.Property(e => e.OwsGidlp).HasColumnName("OWS_GIDLp");
            entity.Property(e => e.OwsWmrid).HasColumnName("OWS_WMRID");
            entity.Property(e => e.OwsTypWymiaru).HasColumnName("OWS_TypWymiaru");
            entity.Property(e => e.OwsElement)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWS_Element");
            entity.Property(e => e.OwsGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("OWS_GIDFirma");

            entity.HasOne(d => d.OpisWymElem).WithMany(p => p.OpisWymSelems)
                .HasForeignKey(d => new { d.OwsGidtyp, d.OwsGidnumer, d.OwsGidlp })
                .HasConstraintName("FK_OWSPrimary");
        });

        modelBuilder.Entity<OpisWzorce>(entity =>
        {
            entity.HasKey(e => e.OwwId).HasName("OWW_Primary");

            entity.ToTable("OpisWzorce", "CDN", tb =>
                {
                    tb.HasTrigger("OpisWzorce_DeleteHandler");
                    tb.HasTrigger("OpisWzorce_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.OwwKod, "OWWKod");

            entity.HasIndex(e => new { e.OwwObtnumer, e.OwwId }, "OWWObiekt").IsUnique();

            entity.HasIndex(e => e.OwwFrsId, "OwwFrSID");

            entity.Property(e => e.OwwId).HasColumnName("OWW_ID");
            entity.Property(e => e.OwwArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWW_Archiwalny");
            entity.Property(e => e.OwwDataModyf)
                .HasDefaultValue(0)
                .HasColumnName("OWW_DataModyf");
            entity.Property(e => e.OwwDataWpr)
                .HasDefaultValue(0)
                .HasColumnName("OWW_DataWpr");
            entity.Property(e => e.OwwFrsId)
                .HasDefaultValue(0)
                .HasColumnName("OWW_FrsID");
            entity.Property(e => e.OwwKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWW_Kod");
            entity.Property(e => e.OwwNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OWW_Nazwa");
            entity.Property(e => e.OwwObtnumer)
                .HasDefaultValue(0)
                .HasColumnName("OWW_OBTNumer");
            entity.Property(e => e.OwwObttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("OWW_OBTTyp");
            entity.Property(e => e.OwwOpeModyf)
                .HasDefaultValue(0)
                .HasColumnName("OWW_OpeModyf");
            entity.Property(e => e.OwwOpeWpr)
                .HasDefaultValue(0)
                .HasColumnName("OWW_OpeWpr");
            entity.Property(e => e.OwwPozycja)
                .HasDefaultValue(0)
                .HasColumnName("OWW_Pozycja");
            entity.Property(e => e.OwwRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("OWW_Rodzaj");
        });

        modelBuilder.Entity<OsoAdresy>(entity =>
        {
            entity.HasKey(e => e.OsAId).HasName("OsA_Primary");

            entity.ToTable("OsoAdresy", "CDN", tb => tb.HasTrigger("OsoAdresy_DeleteHandler"));

            entity.HasIndex(e => new { e.OsAOsoNumer, e.OsADataDo, e.OsADataOd }, "OsAOsoba");

            entity.Property(e => e.OsAId).HasColumnName("OsA_Id");
            entity.Property(e => e.OsADataDo)
                .HasDefaultValue(0)
                .HasColumnName("OsA_DataDo");
            entity.Property(e => e.OsADataOd)
                .HasDefaultValue(0)
                .HasColumnName("OsA_DataOd");
            entity.Property(e => e.OsAEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_Email");
            entity.Property(e => e.OsAKorespGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespGmina");
            entity.Property(e => e.OsAKorespKodGus)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespKodGUS");
            entity.Property(e => e.OsAKorespKodP)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespKodP");
            entity.Property(e => e.OsAKorespKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespKraj");
            entity.Property(e => e.OsAKorespMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespMiasto");
            entity.Property(e => e.OsAKorespNrDom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespNrDom");
            entity.Property(e => e.OsAKorespNrLokal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespNrLokal");
            entity.Property(e => e.OsAKorespPoczta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespPoczta");
            entity.Property(e => e.OsAKorespPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespPowiat");
            entity.Property(e => e.OsAKorespUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespUlica");
            entity.Property(e => e.OsAKorespWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_KorespWojewodztwo");
            entity.Property(e => e.OsAMeldunekGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekGmina");
            entity.Property(e => e.OsAMeldunekKodGus)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekKodGUS");
            entity.Property(e => e.OsAMeldunekKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekKodP");
            entity.Property(e => e.OsAMeldunekKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekKraj");
            entity.Property(e => e.OsAMeldunekMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekMiasto");
            entity.Property(e => e.OsAMeldunekNrDom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekNrDom");
            entity.Property(e => e.OsAMeldunekNrLokal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekNrLokal");
            entity.Property(e => e.OsAMeldunekPoczta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekPoczta");
            entity.Property(e => e.OsAMeldunekPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekPowiat");
            entity.Property(e => e.OsAMeldunekUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekUlica");
            entity.Property(e => e.OsAMeldunekWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MeldunekWojewodztwo");
            entity.Property(e => e.OsAMieszkaGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaGmina");
            entity.Property(e => e.OsAMieszkaKodGus)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaKodGUS");
            entity.Property(e => e.OsAMieszkaKodP)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaKodP");
            entity.Property(e => e.OsAMieszkaKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaKraj");
            entity.Property(e => e.OsAMieszkaMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaMiasto");
            entity.Property(e => e.OsAMieszkaNrDom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaNrDom");
            entity.Property(e => e.OsAMieszkaNrLokal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaNrLokal");
            entity.Property(e => e.OsAMieszkaPoczta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaPoczta");
            entity.Property(e => e.OsAMieszkaPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaPowiat");
            entity.Property(e => e.OsAMieszkaUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaUlica");
            entity.Property(e => e.OsAMieszkaWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_MieszkaWojewodztwo");
            entity.Property(e => e.OsAOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OsA_OsoNumer");
            entity.Property(e => e.OsATelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_Telefon1");
            entity.Property(e => e.OsATelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_Telefon2");
            entity.Property(e => e.OsAUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_Url");
            entity.Property(e => e.OsAWypadekAdres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_WypadekAdres");
            entity.Property(e => e.OsAWypadekOsoba)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_WypadekOsoba");
            entity.Property(e => e.OsAWypadekTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsA_WypadekTelefon");

            entity.HasOne(d => d.OsAOsoNumerNavigation).WithMany(p => p.OsoAdresies)
                .HasForeignKey(d => d.OsAOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OsAOsoba");
        });

        modelBuilder.Entity<OsoCzasPracy>(entity =>
        {
            entity.HasKey(e => e.OcpId).HasName("OCP_Primary");

            entity.ToTable("OsoCzasPracy", "CDN", tb => tb.HasTrigger("OsoCzasPracy_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.OcpOsoNumer, e.OcpOkresDo, e.OcpOkresOd }, "OCPOsoba");

            entity.Property(e => e.OcpId).HasColumnName("OCP_Id");
            entity.Property(e => e.OcpCzasPrzerwy)
                .HasDefaultValue(0)
                .HasColumnName("OCP_CzasPrzerwy");
            entity.Property(e => e.OcpNadgodziny)
                .HasDefaultValue((byte)0)
                .HasColumnName("OCP_Nadgodziny");
            entity.Property(e => e.OcpOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("OCP_OkresDo");
            entity.Property(e => e.OcpOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("OCP_OkresOd");
            entity.Property(e => e.OcpOsUnumer)
                .HasDefaultValue(0)
                .HasColumnName("OCP_OsUNumer");
            entity.Property(e => e.OcpOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OCP_OsoNumer");
            entity.Property(e => e.OcpRodzajPracy)
                .HasDefaultValue(0)
                .HasColumnName("OCP_RodzajPracy");

            entity.HasOne(d => d.OcpOsoNumerNavigation).WithMany(p => p.OsoCzasPracies)
                .HasForeignKey(d => d.OcpOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OCPOsoba");
        });

        modelBuilder.Entity<OsoCzasRazem>(entity =>
        {
            entity.HasKey(e => e.OcrId).HasName("OCR_Primary");

            entity.ToTable("OsoCzasRazem", "CDN", tb => tb.HasTrigger("OsoCzasRazem_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.OcrOsoNumer, e.OcrDataDo, e.OcrDataOd }, "OCROsoba");

            entity.Property(e => e.OcrId).HasColumnName("OCR_Id");
            entity.Property(e => e.OcrCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OCR_CzasModyfikacji");
            entity.Property(e => e.OcrDataDo)
                .HasDefaultValue(0)
                .HasColumnName("OCR_DataDo");
            entity.Property(e => e.OcrDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OCR_DataOd");
            entity.Property(e => e.OcrDniPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("OCR_DniPracy");
            entity.Property(e => e.OcrDniSwieta)
                .HasDefaultValue((byte)0)
                .HasColumnName("OCR_DniSwieta");
            entity.Property(e => e.OcrDniWolne)
                .HasDefaultValue((byte)0)
                .HasColumnName("OCR_DniWolne");
            entity.Property(e => e.OcrGodzinyNocne)
                .HasDefaultValue(0)
                .HasColumnName("OCR_GodzinyNocne");
            entity.Property(e => e.OcrNadgodziny100)
                .HasDefaultValue(0)
                .HasColumnName("OCR_Nadgodziny100");
            entity.Property(e => e.OcrNadgodziny50)
                .HasDefaultValue(0)
                .HasColumnName("OCR_Nadgodziny50");
            entity.Property(e => e.OcrNorma)
                .HasDefaultValue(0)
                .HasColumnName("OCR_Norma");
            entity.Property(e => e.OcrOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OCR_OpMNumer");
            entity.Property(e => e.OcrOsUnumer)
                .HasDefaultValue(0)
                .HasColumnName("OCR_OsUNumer");
            entity.Property(e => e.OcrOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OCR_OsoNumer");
            entity.Property(e => e.OcrPonad)
                .HasDefaultValue(0)
                .HasColumnName("OCR_Ponad");
            entity.Property(e => e.OcrPonizej)
                .HasDefaultValue(0)
                .HasColumnName("OCR_Ponizej");
            entity.Property(e => e.OcrPraca)
                .HasDefaultValue(0)
                .HasColumnName("OCR_Praca");
            entity.Property(e => e.OcrRodzajPracy)
                .HasDefaultValue(0)
                .HasColumnName("OCR_RodzajPracy");

            entity.HasOne(d => d.OcrOsoNumerNavigation).WithMany(p => p.OsoCzasRazems)
                .HasForeignKey(d => d.OcrOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OCROsoba");
        });

        modelBuilder.Entity<OsoDodatki>(entity =>
        {
            entity.HasKey(e => e.OsDId).HasName("OsD_Primary");

            entity.ToTable("OsoDodatki", "CDN", tb => tb.HasTrigger("OsoDodatki_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.OsDOsoNumer, e.OsDOsUnumer }, "UmDOsoba");

            entity.HasIndex(e => e.OsDOsUnumer, "UmDUmowy");

            entity.Property(e => e.OsDId).HasColumnName("OsD_Id");
            entity.Property(e => e.OsDCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OsD_CzasModyfikacji");
            entity.Property(e => e.OsDCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OsD_CzasWprowadzenia");
            entity.Property(e => e.OsDOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("OsD_OkresDo");
            entity.Property(e => e.OsDOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("OsD_OkresOd");
            entity.Property(e => e.OsDOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsD_OpeMNumer");
            entity.Property(e => e.OsDOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsD_OpeWNumer");
            entity.Property(e => e.OsDOsUnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsD_OsUNumer");
            entity.Property(e => e.OsDOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OsD_OsoNumer");
            entity.Property(e => e.OsDPewid)
                .HasDefaultValue(0)
                .HasColumnName("OsD_PEWId");
            entity.Property(e => e.OsDWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OsD_Wartosc");
            entity.Property(e => e.OsDWartoscWsk)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("OsD_WartoscWsk");
        });

        modelBuilder.Entity<OsoHistZatrudnienium>(entity =>
        {
            entity.HasKey(e => e.OhzId).HasName("OHZ_Primary");

            entity.ToTable("OsoHistZatrudnienia", "CDN", tb =>
                {
                    tb.HasTrigger("OsoHistZatrudnienia_DeleteHandler");
                    tb.HasTrigger("OsoHistZatrudnienia_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.OhzOsoNumer, e.OhzOkresDo, e.OhzOkresOd }, "OHZOsoba");

            entity.Property(e => e.OhzId).HasColumnName("OHZ_Id");
            entity.Property(e => e.OhzAdres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OHZ_Adres");
            entity.Property(e => e.OhzBranza)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_Branza");
            entity.Property(e => e.OhzCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_CzasModyfikacji");
            entity.Property(e => e.OhzCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_CzasWprowadzenia");
            entity.Property(e => e.OhzDataStazD)
                .HasDefaultValue((short)0)
                .HasColumnName("OHZ_DataStazD");
            entity.Property(e => e.OhzDataStazL)
                .HasDefaultValue((short)0)
                .HasColumnName("OHZ_DataStazL");
            entity.Property(e => e.OhzDataStazM)
                .HasDefaultValue((short)0)
                .HasColumnName("OHZ_DataStazM");
            entity.Property(e => e.OhzNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OHZ_Nazwa");
            entity.Property(e => e.OhzOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_OkresDo");
            entity.Property(e => e.OhzOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_OkresOd");
            entity.Property(e => e.OhzOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_OpeMNumer");
            entity.Property(e => e.OhzOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_OpeWNumer");
            entity.Property(e => e.OhzOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_OsoNumer");
            entity.Property(e => e.OhzOstStanowisko)
                .HasDefaultValue(0)
                .HasColumnName("OHZ_OstStanowisko");

            entity.HasOne(d => d.OhzOsoNumerNavigation).WithMany(p => p.OsoHistZatrudnienia)
                .HasForeignKey(d => d.OhzOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OHZOsoba");
        });

        modelBuilder.Entity<OsoKarty>(entity =>
        {
            entity.HasKey(e => e.OsoId).HasName("Oso_Primary");

            entity.ToTable("OsoKarty", "CDN", tb => tb.HasTrigger("OsoKarty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.OsoDataDo, e.OsoAkronim }, "OsoAkronim");

            entity.HasIndex(e => new { e.OsoDataDo, e.OsoNazwisko, e.OsoImie1 }, "OsoNazwisko");

            entity.HasIndex(e => new { e.OsoGidnumer, e.OsoDataDo, e.OsoDataOd }, "OsoOsoba");

            entity.HasIndex(e => e.OsoStanCywilny, "OsoStanCywilny");

            entity.Property(e => e.OsoId).HasColumnName("Oso_Id");
            entity.Property(e => e.OsoAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_Akronim");
            entity.Property(e => e.OsoAktaNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_AktaNumer");
            entity.Property(e => e.OsoDataDo)
                .HasDefaultValue(0)
                .HasColumnName("Oso_DataDo");
            entity.Property(e => e.OsoDataOd)
                .HasDefaultValue(0)
                .HasColumnName("Oso_DataOd");
            entity.Property(e => e.OsoDataSlubu)
                .HasDefaultValue(0)
                .HasColumnName("Oso_DataSlubu");
            entity.Property(e => e.OsoDataUrodzenia)
                .HasDefaultValue(0)
                .HasColumnName("Oso_DataUrodzenia");
            entity.Property(e => e.OsoDokDataDo)
                .HasDefaultValue(0)
                .HasColumnName("Oso_DokDataDo");
            entity.Property(e => e.OsoDokDataOd)
                .HasDefaultValue(0)
                .HasColumnName("Oso_DokDataOd");
            entity.Property(e => e.OsoDokMiejsce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_DokMiejsce");
            entity.Property(e => e.OsoDokNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_DokNumer");
            entity.Property(e => e.OsoDokTozsamosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("Oso_DokTozsamosci");
            entity.Property(e => e.OsoDokWystawil)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_DokWystawil");
            entity.Property(e => e.OsoGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("Oso_GIDNumer");
            entity.Property(e => e.OsoImie1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_Imie1");
            entity.Property(e => e.OsoImie2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_Imie2");
            entity.Property(e => e.OsoImieMatki)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_ImieMatki");
            entity.Property(e => e.OsoImieOjca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_ImieOjca");
            entity.Property(e => e.OsoMiejsceUrodzenia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_MiejsceUrodzenia");
            entity.Property(e => e.OsoNazwisko)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_Nazwisko");
            entity.Property(e => e.OsoNazwiskoMatki)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_NazwiskoMatki");
            entity.Property(e => e.OsoNazwiskoRodowe)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_NazwiskoRodowe");
            entity.Property(e => e.OsoNip)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_NIP");
            entity.Property(e => e.OsoNrAktuM)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_NrAktuM");
            entity.Property(e => e.OsoObywatelstwo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_Obywatelstwo");
            entity.Property(e => e.OsoObywatelstwoData)
                .HasDefaultValue(0)
                .HasColumnName("Oso_ObywatelstwoData");
            entity.Property(e => e.OsoObywatelstwoZmiana)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_ObywatelstwoZmiana");
            entity.Property(e => e.OsoPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_Pesel");
            entity.Property(e => e.OsoPlec)
                .HasDefaultValue((byte)0)
                .HasColumnName("Oso_Plec");
            entity.Property(e => e.OsoPropStanowisko)
                .HasDefaultValue(0)
                .HasColumnName("Oso_PropStanowisko");
            entity.Property(e => e.OsoRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("Oso_Rodzaj");
            entity.Property(e => e.OsoStanCywilny)
                .HasDefaultValue(0)
                .HasColumnName("Oso_StanCywilny");
            entity.Property(e => e.OsoUrzadStanuCywilnego)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Oso_UrzadStanuCywilnego");
        });

        modelBuilder.Entity<OsoKompZakre>(entity =>
        {
            entity.HasKey(e => new { e.OkzOsKid, e.OkzZakres }).HasName("OKZ_Primary");

            entity.ToTable("OsoKompZakres", "CDN", tb => tb.HasTrigger("OsoKompZakres_InsertUpdateHandler"));

            entity.Property(e => e.OkzOsKid).HasColumnName("OKZ_OsKId");
            entity.Property(e => e.OkzZakres).HasColumnName("OKZ_Zakres");
            entity.Property(e => e.OkzStopienZnajomosci)
                .HasDefaultValue(0)
                .HasColumnName("OKZ_StopienZnajomosci");
            entity.Property(e => e.OkzWymagane)
                .HasDefaultValue((byte)0)
                .HasColumnName("OKZ_Wymagane");
        });

        modelBuilder.Entity<OsoKompetencje>(entity =>
        {
            entity.HasKey(e => e.OsKId).HasName("OsK_Primary");

            entity.ToTable("OsoKompetencje", "CDN", tb =>
                {
                    tb.HasTrigger("OsoKompetencje_DeleteHandler");
                    tb.HasTrigger("OsoKompetencje_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.OsKKslid, "OsKKSlId");

            entity.HasIndex(e => new { e.OsKOsoNumer, e.OsKRodzaj }, "OsKOsoba");

            entity.Property(e => e.OsKId).HasColumnName("OsK_Id");
            entity.Property(e => e.OsKCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OsK_CzasModyfikacji");
            entity.Property(e => e.OsKCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OsK_CzasWprowadzenia");
            entity.Property(e => e.OsKDataDo)
                .HasDefaultValue(0)
                .HasColumnName("OsK_DataDo");
            entity.Property(e => e.OsKDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OsK_DataOd");
            entity.Property(e => e.OsKIdUprawnienia)
                .HasDefaultValue(0)
                .HasColumnName("OsK_IdUprawnienia");
            entity.Property(e => e.OsKKslid)
                .HasDefaultValue(0)
                .HasColumnName("OsK_KSLId");
            entity.Property(e => e.OsKNabyteUpr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsK_NabyteUpr");
            entity.Property(e => e.OsKNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsK_Nazwa");
            entity.Property(e => e.OsKNumerObcy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsK_NumerObcy");
            entity.Property(e => e.OsKOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsK_OpeMNumer");
            entity.Property(e => e.OsKOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsK_OpeWNumer");
            entity.Property(e => e.OsKOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OsK_OsoNumer");
            entity.Property(e => e.OsKRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsK_Rodzaj");
            entity.Property(e => e.OsKSkierowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsK_Skierowany");
            entity.Property(e => e.OsKStopienZnajomosci)
                .HasDefaultValue(0)
                .HasColumnName("OsK_StopienZnajomosci");
            entity.Property(e => e.OsKTermin)
                .HasDefaultValue(0)
                .HasColumnName("OsK_Termin");
            entity.Property(e => e.OsKUkonczone)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsK_Ukonczone");
            entity.Property(e => e.OsKWymagane)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsK_Wymagane");
            entity.Property(e => e.OsKZakres)
                .HasDefaultValue(0)
                .HasColumnName("OsK_Zakres");

            entity.HasOne(d => d.OsKOsoNumerNavigation).WithMany(p => p.OsoKompetencjes)
                .HasForeignKey(d => d.OsKOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OsKOsoba");
        });

        modelBuilder.Entity<OsoNieobecnosci>(entity =>
        {
            entity.HasKey(e => e.OnbId).HasName("ONB_Primary");

            entity.ToTable("OsoNieobecnosci", "CDN", tb => tb.HasTrigger("OsoNieobecnosci_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.OnbOsoNumer, e.OnbOkresDo, e.OnbOkresOd }, "ONBOsoba");

            entity.Property(e => e.OnbId).HasColumnName("ONB_Id");
            entity.Property(e => e.OnbCzas)
                .HasDefaultValue(0)
                .HasColumnName("ONB_Czas");
            entity.Property(e => e.OnbCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("ONB_CzasModyfikacji");
            entity.Property(e => e.OnbDefinicja)
                .HasDefaultValue(0)
                .HasColumnName("ONB_Definicja");
            entity.Property(e => e.OnbDni)
                .HasDefaultValue((short)0)
                .HasColumnName("ONB_Dni");
            entity.Property(e => e.OnbKodRca)
                .HasDefaultValue(0)
                .HasColumnName("ONB_KodRCA");
            entity.Property(e => e.OnbKodRsa)
                .HasDefaultValue(0)
                .HasColumnName("ONB_KodRSA");
            entity.Property(e => e.OnbKontynuowacZasilek)
                .HasDefaultValue((byte)0)
                .HasColumnName("ONB_KontynuowacZasilek");
            entity.Property(e => e.OnbNaZadanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ONB_NaZadanie");
            entity.Property(e => e.OnbOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("ONB_OkresDo");
            entity.Property(e => e.OnbOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("ONB_OkresOd");
            entity.Property(e => e.OnbOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("ONB_OpMNumer");
            entity.Property(e => e.OnbOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ONB_Opis");
            entity.Property(e => e.OnbOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("ONB_OsoNumer");
            entity.Property(e => e.OnbPrzedluzonyZasilek)
                .HasDefaultValue((byte)0)
                .HasColumnName("ONB_PrzedluzonyZasilek");
            entity.Property(e => e.OnbPrzyczyna)
                .HasDefaultValue(0)
                .HasColumnName("ONB_Przyczyna");
            entity.Property(e => e.OnbStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("ONB_Stan");
            entity.Property(e => e.OnbUmoNumer)
                .HasDefaultValue(0)
                .HasColumnName("ONB_UmoNumer");
            entity.Property(e => e.OnbZwolChoroba)
                .HasDefaultValue(0)
                .HasColumnName("ONB_ZwolChoroba");
            entity.Property(e => e.OnbZwolData)
                .HasDefaultValue(0)
                .HasColumnName("ONB_ZwolData");
            entity.Property(e => e.OnbZwolDostarczono)
                .HasDefaultValue(0)
                .HasColumnName("ONB_ZwolDostarczono");
            entity.Property(e => e.OnbZwolNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ONB_ZwolNumer");
            entity.Property(e => e.OnbZwolPomniejszaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("ONB_ZwolPomniejszaj");
            entity.Property(e => e.OnbZwolSeria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ONB_ZwolSeria");

            entity.HasOne(d => d.OnbOsoNumerNavigation).WithMany(p => p.OsoNieobecnoscis)
                .HasForeignKey(d => d.OnbOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ONBOsoba");
        });

        modelBuilder.Entity<OsoPlatElem>(entity =>
        {
            entity.HasKey(e => e.OseId).HasName("OSE_Primary");

            entity.ToTable("OsoPlatElem", "CDN");

            entity.HasIndex(e => e.OseOsnid, "OSEOsoba");

            entity.Property(e => e.OseId).HasColumnName("OSE_Id");
            entity.Property(e => e.OseBnKnumer)
                .HasDefaultValue(0)
                .HasColumnName("OSE_BnKNumer");
            entity.Property(e => e.OseCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OSE_CzasModyfikacji");
            entity.Property(e => e.OseCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OSE_CzasWprowadzenia");
            entity.Property(e => e.OseFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("OSE_FormaNr");
            entity.Property(e => e.OseKonto)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OSE_Konto");
            entity.Property(e => e.OseKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OSE_Kwota");
            entity.Property(e => e.OseLp)
                .HasDefaultValue((short)0)
                .HasColumnName("OSE_Lp");
            entity.Property(e => e.OseNrb)
                .HasDefaultValue((byte)0)
                .HasColumnName("OSE_NRB");
            entity.Property(e => e.OseOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OSE_OpeMNumer");
            entity.Property(e => e.OseOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OSE_OpeWNumer");
            entity.Property(e => e.OseOsnid)
                .HasDefaultValue(0)
                .HasColumnName("OSE_OSNId");
            entity.Property(e => e.OseProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OSE_Procent");
            entity.Property(e => e.OseRodzajListyPlac)
                .HasDefaultValue(0)
                .HasColumnName("OSE_RodzajListyPlac");
            entity.Property(e => e.OseWalutaNumer)
                .HasDefaultValue(0)
                .HasColumnName("OSE_WalutaNumer");

            entity.HasOne(d => d.OseOsn).WithMany(p => p.OsoPlatElems)
                .HasForeignKey(d => d.OseOsnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OSEOsoba");
        });

        modelBuilder.Entity<OsoPlatNag>(entity =>
        {
            entity.HasKey(e => e.OsnId).HasName("OSN_Primary");

            entity.ToTable("OsoPlatNag", "CDN");

            entity.HasIndex(e => new { e.OsnOsoNumer, e.OsnDataDo, e.OsnDataOd }, "OSNOsoba");

            entity.Property(e => e.OsnId).HasColumnName("OSN_Id");
            entity.Property(e => e.OsnBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("OSN_BnkNumer");
            entity.Property(e => e.OsnCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OSN_CzasModyfikacji");
            entity.Property(e => e.OsnCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OSN_CzasWprowadzenia");
            entity.Property(e => e.OsnDataDo)
                .HasDefaultValue(0)
                .HasColumnName("OSN_DataDo");
            entity.Property(e => e.OsnDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OSN_DataOd");
            entity.Property(e => e.OsnFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("OSN_FormaNr");
            entity.Property(e => e.OsnNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OSN_NrRachunku");
            entity.Property(e => e.OsnOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OSN_OpeMNumer");
            entity.Property(e => e.OsnOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OSN_OpeWNumer");
            entity.Property(e => e.OsnOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OSN_OsoNumer");
            entity.Property(e => e.OsnWalutaNumer)
                .HasDefaultValue(0)
                .HasColumnName("OSN_WalutaNumer");

            entity.HasOne(d => d.OsnOsoNumerNavigation).WithMany(p => p.OsoPlatNags)
                .HasForeignKey(d => d.OsnOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OSNOsoba");
        });

        modelBuilder.Entity<OsoPrzekPodstawy>(entity =>
        {
            entity.HasKey(e => e.OppId).HasName("OPP_Primary");

            entity.ToTable("OsoPrzekPodstawy", "CDN");

            entity.HasIndex(e => e.OppOsoNumer, "OPPOsoba");

            entity.Property(e => e.OppId).HasColumnName("OPP_Id");
            entity.Property(e => e.OppCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OPP_CzasModyfikacji");
            entity.Property(e => e.OppCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OPP_CzasWprowadzenia");
            entity.Property(e => e.OppInfoPrzekazana)
                .HasDefaultValue((byte)0)
                .HasColumnName("OPP_InfoPrzekazana");
            entity.Property(e => e.OppInterpretacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("OPP_Interpretacja");
            entity.Property(e => e.OppKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OPP_Kwota");
            entity.Property(e => e.OppOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OPP_OpeMNumer");
            entity.Property(e => e.OppOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OPP_OpeWNumer");
            entity.Property(e => e.OppOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OPP_OsoNumer");
            entity.Property(e => e.OppRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("OPP_RokMiesiac");

            entity.HasOne(d => d.OppOsoNumerNavigation).WithMany(p => p.OsoPrzekPodstawies)
                .HasForeignKey(d => d.OppOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OPPOsoba");
        });

        modelBuilder.Entity<OsoRodzajStaz>(entity =>
        {
            entity.HasKey(e => new { e.OrsOwznumer, e.OrsOwztyp, e.OrsRodzajStazu }).HasName("ORS_Primary");

            entity.ToTable("OsoRodzajStaz", "CDN", tb => tb.HasTrigger("OsoRodzajStaz_InsertUpdateHandler"));

            entity.Property(e => e.OrsOwznumer).HasColumnName("ORS_OWZNumer");
            entity.Property(e => e.OrsOwztyp).HasColumnName("ORS_OWZTyp");
            entity.Property(e => e.OrsRodzajStazu).HasColumnName("ORS_RodzajStazu");
        });

        modelBuilder.Entity<OsoRodzina>(entity =>
        {
            entity.HasKey(e => e.OsRId).HasName("OsR_Primary");

            entity.ToTable("OsoRodzina", "CDN", tb => tb.HasTrigger("OsoRodzina_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.OsROsoNumer, e.OsRDataDo, e.OsRDataOd }, "OsROsoba");

            entity.Property(e => e.OsRId).HasColumnName("OsR_Id");
            entity.Property(e => e.OsRCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OsR_CzasModyfikacji");
            entity.Property(e => e.OsRCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OsR_CzasWprowadzenia");
            entity.Property(e => e.OsRDataDo)
                .HasDefaultValue(0)
                .HasColumnName("OsR_DataDo");
            entity.Property(e => e.OsRDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OsR_DataOd");
            entity.Property(e => e.OsRDataUrodzenia)
                .HasDefaultValue(0)
                .HasColumnName("OsR_DataUrodzenia");
            entity.Property(e => e.OsRDokNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_DokNumer");
            entity.Property(e => e.OsRDokTozsamosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsR_DokTozsamosci");
            entity.Property(e => e.OsRGmina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Gmina");
            entity.Property(e => e.OsRImie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Imie");
            entity.Property(e => e.OsRKodNiepelnosprawnosci)
                .HasDefaultValue(0)
                .HasColumnName("OsR_KodNiepelnosprawnosci");
            entity.Property(e => e.OsRKodP)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_KodP");
            entity.Property(e => e.OsRKodPokrewienstwa)
                .HasDefaultValue(0)
                .HasColumnName("OsR_KodPokrewienstwa");
            entity.Property(e => e.OsRKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Kraj");
            entity.Property(e => e.OsRMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Miasto");
            entity.Property(e => e.OsRMiejsceUrodzenia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_MiejsceUrodzenia");
            entity.Property(e => e.OsRNazwisko)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Nazwisko");
            entity.Property(e => e.OsRNip)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_NIP");
            entity.Property(e => e.OsRNrDom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_NrDom");
            entity.Property(e => e.OsRNrLokal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_NrLokal");
            entity.Property(e => e.OsROkresUprDo)
                .HasDefaultValue(0)
                .HasColumnName("OsR_OkresUprDo");
            entity.Property(e => e.OsROkresUprOd)
                .HasDefaultValue(0)
                .HasColumnName("OsR_OkresUprOd");
            entity.Property(e => e.OsROpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsR_OpeMNumer");
            entity.Property(e => e.OsROpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsR_OpeWNumer");
            entity.Property(e => e.OsROsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OsR_OsoNumer");
            entity.Property(e => e.OsRPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Pesel");
            entity.Property(e => e.OsRPoczta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Poczta");
            entity.Property(e => e.OsRPowiat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Powiat");
            entity.Property(e => e.OsRPozostaje)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsR_Pozostaje");
            entity.Property(e => e.OsRUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Ulica");
            entity.Property(e => e.OsRWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsR_Wojewodztwo");

            entity.HasOne(d => d.OsROsoNumerNavigation).WithMany(p => p.OsoRodzinas)
                .HasForeignKey(d => d.OsROsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OsROsoba");
        });

        modelBuilder.Entity<OsoStaleRoczne>(entity =>
        {
            entity.HasKey(e => e.OroId).HasName("ORo_Primary");

            entity.ToTable("OsoStaleRoczne", "CDN", tb => tb.HasTrigger("OsoStaleRoczne_InsertUpdateHandler"));

            entity.HasIndex(e => e.OroKosztUzyskaniaZtytulu, "ORoKosztUzyskaniaZTytulu");

            entity.HasIndex(e => new { e.OroGidnumer, e.OroDataOd, e.OroDataDo }, "OUbUbezpiecznia").IsUnique();

            entity.Property(e => e.OroId).HasColumnName("ORo_Id");
            entity.Property(e => e.OroCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("ORo_CzasModyfikacji");
            entity.Property(e => e.OroCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("ORo_CzasWprowadzenia");
            entity.Property(e => e.OroDataDo)
                .HasDefaultValue(0)
                .HasColumnName("ORo_DataDo");
            entity.Property(e => e.OroDataOd)
                .HasDefaultValue(0)
                .HasColumnName("ORo_DataOd");
            entity.Property(e => e.OroGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("ORo_GIDNumer");
            entity.Property(e => e.OroKosztUzyskaniaZtytulu)
                .HasDefaultValue(0)
                .HasColumnName("ORo_KosztUzyskaniaZTytulu");
            entity.Property(e => e.OroMnoznikKosztu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 5)")
                .HasColumnName("ORo_MnoznikKosztu");
            entity.Property(e => e.OroMnoznikUlgi)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("ORo_MnoznikUlgi");
            entity.Property(e => e.OroOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("ORo_OpeMNumer");
            entity.Property(e => e.OroOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("ORo_OpeWNumer");
            entity.Property(e => e.OroOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("ORo_OsoNumer");
            entity.Property(e => e.OroProcentWynag)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("ORo_ProcentWynag");
            entity.Property(e => e.OroTypProgow)
                .HasDefaultValue(0)
                .HasColumnName("ORo_TypProgow");
            entity.Property(e => e.OroUrzad)
                .HasDefaultValue(0)
                .HasColumnName("ORo_Urzad");
        });

        modelBuilder.Entity<OsoUbezpieczenium>(entity =>
        {
            entity.HasKey(e => e.OubId).HasName("OUb_Primary");

            entity.ToTable("OsoUbezpieczenia", "CDN", tb => tb.HasTrigger("OsoUbezpieczenia_InsertUpdateHandler"));

            entity.HasIndex(e => e.OubKodWyksztalcenia, "OUbKodWyksztalcenia");

            entity.HasIndex(e => new { e.OubOsoNumer, e.OubDataOd, e.OubDataDo }, "OUbOsoba");

            entity.HasIndex(e => e.OubPrawoDoEmerRenty, "OUbPrawoDoEmerRenty");

            entity.HasIndex(e => new { e.OubGidnumer, e.OubDataOd, e.OubDataDo }, "OUbUbezpieczenia").IsUnique();

            entity.HasIndex(e => new { e.OubOsoNumer, e.OubUmowa, e.OubDataOd, e.OubDataDo }, "OUbUmowy");

            entity.Property(e => e.OubId).HasColumnName("OUb_Id");
            entity.Property(e => e.OubCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OUb_CzasModyfikacji");
            entity.Property(e => e.OubCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OUb_CzasWprowadzenia");
            entity.Property(e => e.OubDataDo)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DataDo");
            entity.Property(e => e.OubDataObowUbezpSpol)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DataObowUbezpSpol");
            entity.Property(e => e.OubDataObowUbezpZdr)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DataObowUbezpZdr");
            entity.Property(e => e.OubDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DataOd");
            entity.Property(e => e.OubDataOdPrzyWyrejestrowania)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DataOdPrzyWyrejestrowania");
            entity.Property(e => e.OubDataWiekuEmeryt)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DataWiekuEmeryt");
            entity.Property(e => e.OubDataZglDoDobUbezp)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DataZglDoDobUbezp");
            entity.Property(e => e.OubDobUbezpChorDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DobUbezpChorDataOd");
            entity.Property(e => e.OubDobUbezpEmDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DobUbezpEmDataOd");
            entity.Property(e => e.OubDobUbezpRentDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_DobUbezpRentDataOd");
            entity.Property(e => e.OubDobrowolneUbezp)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_DobrowolneUbezp");
            entity.Property(e => e.OubEmeryturaOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_EmeryturaOd");
            entity.Property(e => e.OubFep)
                .HasDefaultValue(0)
                .HasColumnName("OUb_FEP");
            entity.Property(e => e.OubFepokresDo)
                .HasDefaultValue(0)
                .HasColumnName("OUb_FEPOkresDo");
            entity.Property(e => e.OubFepokresOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_FEPOkresOd");
            entity.Property(e => e.OubGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("OUb_GIDNumer");
            entity.Property(e => e.OubKodNiepelnosprawnosci)
                .HasDefaultValue(0)
                .HasColumnName("OUb_KodNiepelnosprawnosci");
            entity.Property(e => e.OubKodPrWszczegolWarunkach)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_KodPrWSzczegolWarunkach");
            entity.Property(e => e.OubKodPrzyWyrejestrowania)
                .HasDefaultValue(0)
                .HasColumnName("OUb_KodPrzyWyrejestrowania");
            entity.Property(e => e.OubKodUbezpieczenia1Cz1)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_KodUbezpieczenia1Cz1");
            entity.Property(e => e.OubKodUbezpieczenia1Cz2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_KodUbezpieczenia1Cz2");
            entity.Property(e => e.OubKodUbezpieczenia1Cz3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_KodUbezpieczenia1Cz3");
            entity.Property(e => e.OubKodUbezpieczeniaCz1)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_KodUbezpieczeniaCz1");
            entity.Property(e => e.OubKodUbezpieczeniaCz2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_KodUbezpieczeniaCz2");
            entity.Property(e => e.OubKodUbezpieczeniaCz3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_KodUbezpieczeniaCz3");
            entity.Property(e => e.OubKodWyksztalcenia)
                .HasDefaultValue(0)
                .HasColumnName("OUb_KodWyksztalcenia");
            entity.Property(e => e.OubKwotaPierwszejSkl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OUb_KwotaPierwszejSkl");
            entity.Property(e => e.OubMiejsceZamieszkania)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_MiejsceZamieszkania");
            entity.Property(e => e.OubNieNaliczacFgsp)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_NieNaliczacFGSP");
            entity.Property(e => e.OubNieNaliczacFp)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_NieNaliczacFP");
            entity.Property(e => e.OubOddzialNfz)
                .HasDefaultValue(0)
                .HasColumnName("OUb_OddzialNFZ");
            entity.Property(e => e.OubOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("OUb_OkresDo");
            entity.Property(e => e.OubOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_OkresOd");
            entity.Property(e => e.OubOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OUb_OpeMNumer");
            entity.Property(e => e.OubOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OUb_OpeWNumer");
            entity.Property(e => e.OubOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OUb_OsoNumer");
            entity.Property(e => e.OubPodObowUbezpieczeniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_PodObowUbezpieczeniu");
            entity.Property(e => e.OubPrawoDoEmerRenty)
                .HasDefaultValue(0)
                .HasColumnName("OUb_PrawoDoEmerRenty");
            entity.Property(e => e.OubRentaDo)
                .HasDefaultValue(0)
                .HasColumnName("OUb_RentaDo");
            entity.Property(e => e.OubRentaOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_RentaOd");
            entity.Property(e => e.OubRownoczesnaUmowaOprc)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_RownoczesnaUmowaOPrc");
            entity.Property(e => e.OubSklZdrOgr)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_SklZdrOgr");
            entity.Property(e => e.OubSpoleczne)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_Spoleczne");
            entity.Property(e => e.OubTytulUbezpieczenia)
                .HasDefaultValue(0)
                .HasColumnName("OUb_TytulUbezpieczenia");
            entity.Property(e => e.OubTytulUbezpieczenia1)
                .HasDefaultValue(0)
                .HasColumnName("OUb_TytulUbezpieczenia1");
            entity.Property(e => e.OubUmowa)
                .HasDefaultValue(0)
                .HasColumnName("OUb_Umowa");
            entity.Property(e => e.OubWyrejestrowanieZm)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_WyrejestrowanieZm");
            entity.Property(e => e.OubZabiegiTytUbezpDo)
                .HasDefaultValue(0)
                .HasColumnName("OUb_ZabiegiTytUbezpDo");
            entity.Property(e => e.OubZabiegiTytUbezpOd)
                .HasDefaultValue(0)
                .HasColumnName("OUb_ZabiegiTytUbezpOd");
            entity.Property(e => e.OubZbiegiTytUbezp)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OUb_ZbiegiTytUbezp");
            entity.Property(e => e.OubZdrowotne)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_Zdrowotne");
            entity.Property(e => e.OubZmianaDanychDz)
                .HasDefaultValue((byte)0)
                .HasColumnName("OUb_ZmianaDanychDZ");

            entity.HasOne(d => d.OubOsoNumerNavigation).WithMany(p => p.OsoUbezpieczenia)
                .HasForeignKey(d => d.OubOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OUbOsoba");
        });

        modelBuilder.Entity<OsoUmowy>(entity =>
        {
            entity.HasKey(e => e.OsUId).HasName("OsU_Primary");

            entity.ToTable("OsoUmowy", "CDN", tb =>
                {
                    tb.HasTrigger("OsoUmowy_DeleteHandler");
                    tb.HasTrigger("OsoUmowy_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.OsUOsoNumer, e.OsUDataDo, e.OsUDataOd, e.OsUTypUmowy }, "OsUOsoba");

            entity.HasIndex(e => e.OsUTypPracownika, "OsUTypPracownika");

            entity.HasIndex(e => new { e.OsUGidnumer, e.OsUDataDo, e.OsUDataOd }, "OsUUmowa").IsUnique();

            entity.Property(e => e.OsUId).HasColumnName("OsU_Id");
            entity.Property(e => e.OsUAneks)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_Aneks");
            entity.Property(e => e.OsUCentrumKosztow)
                .HasDefaultValue(0)
                .HasColumnName("OsU_CentrumKosztow");
            entity.Property(e => e.OsUCentrumPodleglosci)
                .HasDefaultValue(0)
                .HasColumnName("OsU_CentrumPodleglosci");
            entity.Property(e => e.OsUCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OsU_CzasModyfikacji");
            entity.Property(e => e.OsUCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OsU_CzasWprowadzenia");
            entity.Property(e => e.OsUDataDo)
                .HasDefaultValue(0)
                .HasColumnName("OsU_DataDo");
            entity.Property(e => e.OsUDataKoniecZatr)
                .HasDefaultValue(0)
                .HasColumnName("OsU_DataKoniecZatr");
            entity.Property(e => e.OsUDataOd)
                .HasDefaultValue(0)
                .HasColumnName("OsU_DataOd");
            entity.Property(e => e.OsUDataRozpPracy)
                .HasDefaultValue(0)
                .HasColumnName("OsU_DataRozpPracy");
            entity.Property(e => e.OsUDataRozwUm)
                .HasDefaultValue(0)
                .HasColumnName("OsU_DataRozwUm");
            entity.Property(e => e.OsUDataZatrudnienia)
                .HasDefaultValue(0)
                .HasColumnName("OsU_DataZatrudnienia");
            entity.Property(e => e.OsUDataZawarciaUm)
                .HasDefaultValue(0)
                .HasColumnName("OsU_DataZawarciaUm");
            entity.Property(e => e.OsUDokumentObcy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsU_DokumentObcy");
            entity.Property(e => e.OsUFunkcja)
                .HasDefaultValue(0)
                .HasColumnName("OsU_Funkcja");
            entity.Property(e => e.OsUGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsU_GIDNumer");
            entity.Property(e => e.OsUGwarantProc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("OsU_GwarantProc");
            entity.Property(e => e.OsUHarmonogram)
                .HasDefaultValue(0)
                .HasColumnName("OsU_Harmonogram");
            entity.Property(e => e.OsUIndywLimitNadgodzin)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_IndywLimitNadgodzin");
            entity.Property(e => e.OsUKodZawodu)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsU_KodZawodu");
            entity.Property(e => e.OsUKoniecZatr)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_KoniecZatr");
            entity.Property(e => e.OsUKontrolaStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_KontrolaStawki");
            entity.Property(e => e.OsUKosztyUzyskaniaPrzychodu)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_KosztyUzyskaniaPrzychodu");
            entity.Property(e => e.OsUMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_Miesiac");
            entity.Property(e => e.OsUMinimalneWynagrodzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_MinimalneWynagrodzenie");
            entity.Property(e => e.OsUNumer)
                .HasDefaultValue(0)
                .HasColumnName("OsU_Numer");
            entity.Property(e => e.OsUOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OkresDo");
            entity.Property(e => e.OsUOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OkresOd");
            entity.Property(e => e.OsUOkresWypMiesiace)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OkresWypMiesiace");
            entity.Property(e => e.OsUOkresWypTygodnie)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OkresWypTygodnie");
            entity.Property(e => e.OsUOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OpeMNumer");
            entity.Property(e => e.OsUOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OpeWNumer");
            entity.Property(e => e.OsUOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsU_Opis");
            entity.Property(e => e.OsUOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OsoNumer");
            entity.Property(e => e.OsUOsobaZastepowana)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsU_OsobaZastepowana");
            entity.Property(e => e.OsUOsobaZastepowanaId)
                .HasDefaultValue(0)
                .HasColumnName("OsU_OsobaZastepowanaID");
            entity.Property(e => e.OsUPodlegaOpodatkowaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_PodlegaOpodatkowaniu");
            entity.Property(e => e.OsUPodpisana)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_Podpisana");
            entity.Property(e => e.OsUProcentKosztow)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("OsU_ProcentKosztow");
            entity.Property(e => e.OsUProcentPodatku)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("OsU_ProcentPodatku");
            entity.Property(e => e.OsUProgPodatkowy)
                .HasDefaultValue(0)
                .HasColumnName("OsU_ProgPodatkowy");
            entity.Property(e => e.OsUProporDoEtatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_ProporDoEtatu");
            entity.Property(e => e.OsUPrzyczynaRozwUm)
                .HasDefaultValue(0)
                .HasColumnName("OsU_PrzyczynaRozwUm");
            entity.Property(e => e.OsURcpregWygladzania)
                .HasDefaultValue(0)
                .HasColumnName("OsU_RCPRegWygladzania");
            entity.Property(e => e.OsURodzajUmowy)
                .HasDefaultValue(0)
                .HasColumnName("OsU_RodzajUmowy");
            entity.Property(e => e.OsURok)
                .HasDefaultValue((short)0)
                .HasColumnName("OsU_Rok");
            entity.Property(e => e.OsUSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsU_Seria");
            entity.Property(e => e.OsUSeriaListPlac)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsU_SeriaListPlac");
            entity.Property(e => e.OsUStanowisko)
                .HasDefaultValue(0)
                .HasColumnName("OsU_Stanowisko");
            entity.Property(e => e.OsUStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OsU_Stawka");
            entity.Property(e => e.OsUStawkaMiesGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_StawkaMiesGodz");
            entity.Property(e => e.OsUStawkaZakresDo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OsU_StawkaZakresDo");
            entity.Property(e => e.OsUStawkaZakresOd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OsU_StawkaZakresOd");
            entity.Property(e => e.OsUSysCzasuPracy)
                .HasDefaultValue(0)
                .HasColumnName("OsU_SysCzasuPracy");
            entity.Property(e => e.OsUTypPracownika)
                .HasDefaultValue(0)
                .HasColumnName("OsU_TypPracownika");
            entity.Property(e => e.OsUTypStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_TypStawki");
            entity.Property(e => e.OsUTypUmowy)
                .HasDefaultValue(0)
                .HasColumnName("OsU_TypUmowy");
            entity.Property(e => e.OsUTytulUmowy)
                .HasDefaultValue(0)
                .HasColumnName("OsU_TytulUmowy");
            entity.Property(e => e.OsUUmowaRata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OsU_UmowaRata");
            entity.Property(e => e.OsUWartoscBruttoNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("OsU_WartoscBruttoNetto");
            entity.Property(e => e.OsUWymUprawniajacy)
                .HasDefaultValue(0)
                .HasColumnName("OsU_WymUprawniajacy");
            entity.Property(e => e.OsUWymiarEtatuL)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_WymiarEtatuL");
            entity.Property(e => e.OsUWymiarEtatuM)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_WymiarEtatuM");
            entity.Property(e => e.OsUZakresMiesGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsU_ZakresMiesGodz");
            entity.Property(e => e.OsUZaszeregowanie)
                .HasDefaultValue(0)
                .HasColumnName("OsU_Zaszeregowanie");
        });

        modelBuilder.Entity<OsoWskazniki>(entity =>
        {
            entity.HasKey(e => e.OwkId).HasName("OWk_Primary");

            entity.ToTable("OsoWskazniki", "CDN");

            entity.Property(e => e.OwkId).HasColumnName("OWk_Id");
            entity.Property(e => e.OwkOroId)
                .HasDefaultValue(0)
                .HasColumnName("OWk_ORoId");
            entity.Property(e => e.OwkProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("OWk_Procent");
            entity.Property(e => e.OwkWartoscProgowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("OWk_WartoscProgowa");

            entity.HasOne(d => d.OwkOro).WithMany(p => p.OsoWskaznikis)
                .HasForeignKey(d => d.OwkOroId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OWkORoId");
        });

        modelBuilder.Entity<OsoWyksztalcenie>(entity =>
        {
            entity.HasKey(e => e.OsWId).HasName("OsW_Primary");

            entity.ToTable("OsoWyksztalcenie", "CDN", tb =>
                {
                    tb.HasTrigger("OsoWyksztalcenie_DeleteHandler");
                    tb.HasTrigger("OsoWyksztalcenie_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.OsWOsoNumer, e.OsWOkresDo, e.OsWOkresOd }, "OsWOsoba");

            entity.Property(e => e.OsWId).HasColumnName("OsW_Id");
            entity.Property(e => e.OsWAdres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsW_Adres");
            entity.Property(e => e.OsWCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("OsW_CzasModyfikacji");
            entity.Property(e => e.OsWCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("OsW_CzasWprowadzenia");
            entity.Property(e => e.OsWDataStazD)
                .HasDefaultValue((short)0)
                .HasColumnName("OsW_DataStazD");
            entity.Property(e => e.OsWDataStazL)
                .HasDefaultValue((short)0)
                .HasColumnName("OsW_DataStazL");
            entity.Property(e => e.OsWDataStazM)
                .HasDefaultValue((short)0)
                .HasColumnName("OsW_DataStazM");
            entity.Property(e => e.OsWDataUrlopuD)
                .HasDefaultValue((short)0)
                .HasColumnName("OsW_DataUrlopuD");
            entity.Property(e => e.OsWDataUrlopuL)
                .HasDefaultValue((short)0)
                .HasColumnName("OsW_DataUrlopuL");
            entity.Property(e => e.OsWDataUrlopuM)
                .HasDefaultValue((short)0)
                .HasColumnName("OsW_DataUrlopuM");
            entity.Property(e => e.OsWKierunek)
                .HasDefaultValue(0)
                .HasColumnName("OsW_Kierunek");
            entity.Property(e => e.OsWNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsW_Nazwa");
            entity.Property(e => e.OsWOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("OsW_OkresDo");
            entity.Property(e => e.OsWOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("OsW_OkresOd");
            entity.Property(e => e.OsWOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsW_OpeMNumer");
            entity.Property(e => e.OsWOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("OsW_OpeWNumer");
            entity.Property(e => e.OsWOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("OsW_OsoNumer");
            entity.Property(e => e.OsWSpecjalizacja)
                .HasDefaultValue(0)
                .HasColumnName("OsW_Specjalizacja");
            entity.Property(e => e.OsWStaz)
                .HasDefaultValue((byte)0)
                .HasColumnName("OsW_Staz");
            entity.Property(e => e.OsWStopienNaukowy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsW_StopienNaukowy");
            entity.Property(e => e.OsWTytul)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OsW_Tytul");

            entity.HasOne(d => d.OsWOsoNumerNavigation).WithMany(p => p.OsoWyksztalcenies)
                .HasForeignKey(d => d.OsWOsoNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OsWOsoba");
        });

        modelBuilder.Entity<Paczki>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("paczki");

            entity.Property(e => e.Idpaczki).HasColumnName("IDPaczki");
            entity.Property(e => e.ProcentZwysyłki)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("procentZWysyłki");
        });

        modelBuilder.Entity<ParamRozKonf>(entity =>
        {
            entity.HasKey(e => e.PrkId).HasName("PRK_Primary");

            entity.ToTable("ParamRozKonf", "CDN", tb => tb.HasTrigger("ParamRozKonf_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PrkObiTyp, e.PrkObiNumer, e.PrkObiLp, e.PrkObiSubLp, e.PrkAtkId }, "PRKObiAtkId").IsUnique();

            entity.Property(e => e.PrkId).HasColumnName("PRK_Id");
            entity.Property(e => e.PrkAtkId)
                .HasDefaultValue(0)
                .HasColumnName("PRK_AtkId");
            entity.Property(e => e.PrkDefPytId)
                .HasDefaultValue(0)
                .HasColumnName("PRK_DefPytId");
            entity.Property(e => e.PrkEdycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRK_Edycja");
            entity.Property(e => e.PrkKopiuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRK_Kopiuj");
            entity.Property(e => e.PrkObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("PRK_ObiFirma");
            entity.Property(e => e.PrkObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRK_ObiLp");
            entity.Property(e => e.PrkObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRK_ObiNumer");
            entity.Property(e => e.PrkObiSubLp)
                .HasDefaultValue((short)1)
                .HasColumnName("PRK_ObiSubLp");
            entity.Property(e => e.PrkObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRK_ObiTyp");
            entity.Property(e => e.PrkPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("PRK_Pozycja");
            entity.Property(e => e.PrkWymagaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRK_Wymagaj");
        });

        modelBuilder.Entity<Pdoadministratorzy>(entity =>
        {
            entity.HasKey(e => e.PdoaId).HasName("PDOA_Primary");

            entity.ToTable("PDOAdministratorzy", "CDN", tb => tb.HasTrigger("PDOAdministratorzy_InsertUpdateHandler"));

            entity.HasIndex(e => e.PdoaAdrNumer, "PDOAAdres");

            entity.HasIndex(e => new { e.PdoaObiNumer, e.PdoaObiTyp, e.PdoaTyp }, "PDOAObiekt").IsUnique();

            entity.HasIndex(e => new { e.PdoaObiNumer, e.PdoaObiLp }, "PDOAOsoba");

            entity.Property(e => e.PdoaId).HasColumnName("PDOA_Id");
            entity.Property(e => e.PdoaAdrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOA_AdrNumer");
            entity.Property(e => e.PdoaDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("PDOA_DataDodania");
            entity.Property(e => e.PdoaObiLp)
                .HasDefaultValue(0)
                .HasColumnName("PDOA_ObiLp");
            entity.Property(e => e.PdoaObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOA_ObiNumer");
            entity.Property(e => e.PdoaObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDOA_ObiTyp");
            entity.Property(e => e.PdoaTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDOA_Typ");
        });

        modelBuilder.Entity<Pdoczynnosci>(entity =>
        {
            entity.HasKey(e => e.PdocId).HasName("PDOC_Primary");

            entity.ToTable("PDOCzynnosci", "CDN", tb =>
                {
                    tb.HasTrigger("PDOCzynnosci_DeleteHandler");
                    tb.HasTrigger("PDOCzynnosci_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PdocAdminNumer, e.PdocAdminTyp }, "PDOCAdmin");

            entity.HasIndex(e => e.PdocAdminAdr, "PDOCAdminAdr");

            entity.HasIndex(e => new { e.PdocAdminNumer, e.PdocAdminLp }, "PDOCAdminOsoba");

            entity.HasIndex(e => new { e.PdocInspNumer, e.PdocInspTyp }, "PDOCInspektor");

            entity.HasIndex(e => e.PdocInspAdr, "PDOCInspektorAdr");

            entity.HasIndex(e => new { e.PdocInspNumer, e.PdocInspLp }, "PDOCInspektorOsoba");

            entity.HasIndex(e => e.PdocKategoria, "PDOCKategoria");

            entity.HasIndex(e => e.PdocOpeNumerM, "PDOCOpeM");

            entity.HasIndex(e => e.PdocOpeNumerW, "PDOCOpeW");

            entity.HasIndex(e => new { e.PdocPrzedstNumer, e.PdocPrzedstTyp }, "PDOCPrzedstawiciel");

            entity.HasIndex(e => e.PdocPrzedstAdr, "PDOCPrzedstawicielAdr");

            entity.HasIndex(e => new { e.PdocPrzedstNumer, e.PdocPrzedstLp }, "PDOCPrzedstawicielOsoba");

            entity.Property(e => e.PdocId).HasColumnName("PDOC_Id");
            entity.Property(e => e.PdocAdminAdr)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_AdminAdr");
            entity.Property(e => e.PdocAdminLp)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_AdminLp");
            entity.Property(e => e.PdocAdminNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_AdminNumer");
            entity.Property(e => e.PdocAdminTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDOC_AdminTyp");
            entity.Property(e => e.PdocArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDOC_Archiwalny");
            entity.Property(e => e.PdocCel)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOC_Cel");
            entity.Property(e => e.PdocCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_CzasModyfikacji");
            entity.Property(e => e.PdocCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_CzasUtworzenia");
            entity.Property(e => e.PdocDodatkowe)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOC_Dodatkowe");
            entity.Property(e => e.PdocInspAdr)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_InspAdr");
            entity.Property(e => e.PdocInspLp)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_InspLp");
            entity.Property(e => e.PdocInspNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_InspNumer");
            entity.Property(e => e.PdocInspTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDOC_InspTyp");
            entity.Property(e => e.PdocKategoria)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_Kategoria");
            entity.Property(e => e.PdocKategorieDo)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOC_KategorieDO");
            entity.Property(e => e.PdocKategorieOdbiorcow)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOC_KategorieOdbiorcow");
            entity.Property(e => e.PdocKategorieOsob)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOC_KategorieOsob");
            entity.Property(e => e.PdocOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_OpeNumerM");
            entity.Property(e => e.PdocOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_OpeNumerW");
            entity.Property(e => e.PdocPlanowaneTerminy)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOC_PlanowaneTerminy");
            entity.Property(e => e.PdocPrzedstAdr)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_PrzedstAdr");
            entity.Property(e => e.PdocPrzedstLp)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_PrzedstLp");
            entity.Property(e => e.PdocPrzedstNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOC_PrzedstNumer");
            entity.Property(e => e.PdocPrzedstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDOC_PrzedstTyp");
        });

        modelBuilder.Entity<PdoczynnosciKraje>(entity =>
        {
            entity.HasKey(e => e.PdockId).HasName("PDOCK_Primary");

            entity.ToTable("PDOCzynnosciKraje", "CDN", tb => tb.HasTrigger("PDOCzynnosciKraje_InsertUpdateHandler"));

            entity.HasIndex(e => e.PdockPdocid, "PDOCKCzynnosc");

            entity.HasIndex(e => e.PdockUzasadnienieId, "PDOCKUzasadnienie");

            entity.Property(e => e.PdockId).HasColumnName("PDOCK_Id");
            entity.Property(e => e.PdockKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOCK_Kraj");
            entity.Property(e => e.PdockPdocid)
                .HasDefaultValue(0)
                .HasColumnName("PDOCK_PDOCId");
            entity.Property(e => e.PdockUzasadnienieId)
                .HasDefaultValue(0)
                .HasColumnName("PDOCK_UzasadnienieId");

            entity.HasOne(d => d.PdockPdoc).WithMany(p => p.PdoczynnosciKrajes)
                .HasForeignKey(d => d.PdockPdocid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PDOCKCzynnosc");
        });

        modelBuilder.Entity<Pdonaruszenium>(entity =>
        {
            entity.HasKey(e => e.PdonId).HasName("PDON_Primary");

            entity.ToTable("PDONaruszenia", "CDN", tb =>
                {
                    tb.HasTrigger("PDONaruszenia_DeleteHandler");
                    tb.HasTrigger("PDONaruszenia_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PdonInsNumer, e.PdonInsTyp }, "PDONInspektor");

            entity.HasIndex(e => e.PdonOpeNumerM, "PDONOpeM");

            entity.HasIndex(e => e.PdonOpeNumerW, "PDONOpeW");

            entity.Property(e => e.PdonId).HasColumnName("PDON_Id");
            entity.Property(e => e.PdonCharakterNaruszenia)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDON_CharakterNaruszenia");
            entity.Property(e => e.PdonCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PDON_CzasModyfikacji");
            entity.Property(e => e.PdonCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("PDON_CzasUtworzenia");
            entity.Property(e => e.PdonDataNaruszenia)
                .HasDefaultValue(0)
                .HasColumnName("PDON_DataNaruszenia");
            entity.Property(e => e.PdonDataZgloszenia)
                .HasDefaultValue(0)
                .HasColumnName("PDON_DataZgloszenia");
            entity.Property(e => e.PdonInsNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDON_InsNumer");
            entity.Property(e => e.PdonInsTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDON_InsTyp");
            entity.Property(e => e.PdonKategoriaOsob)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDON_KategoriaOsob");
            entity.Property(e => e.PdonKonsekwencje)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDON_Konsekwencje");
            entity.Property(e => e.PdonLiczbaRekordow)
                .HasDefaultValue(0)
                .HasColumnName("PDON_LiczbaRekordow");
            entity.Property(e => e.PdonOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("PDON_OpeNumerM");
            entity.Property(e => e.PdonOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("PDON_OpeNumerW");
            entity.Property(e => e.PdonPrzyczyna)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDON_Przyczyna");
            entity.Property(e => e.PdonSzczegoly)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDON_Szczegoly");
            entity.Property(e => e.PdonZastosowaneSrodki)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDON_ZastosowaneSrodki");
        });

        modelBuilder.Entity<Pdoupowaznienium>(entity =>
        {
            entity.HasKey(e => e.PdouId).HasName("PDOU_Primary");

            entity.ToTable("PDOUpowaznienia", "CDN", tb =>
                {
                    tb.HasTrigger("PDOUpowaznienia_DeleteHandler");
                    tb.HasTrigger("PDOUpowaznienia_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PdouObiNumer, e.PdouObiLp, e.PdouObiTyp }, "PDOUObiekt");

            entity.HasIndex(e => e.PdouRodzajUpowaznieniaId, "PDOURodzajUpowaznienia");

            entity.Property(e => e.PdouId).HasColumnName("PDOU_Id");
            entity.Property(e => e.PdouAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDOU_Aktywne");
            entity.Property(e => e.PdouCzasArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_CzasArchiwizacji");
            entity.Property(e => e.PdouCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_CzasModyfikacji");
            entity.Property(e => e.PdouCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_CzasUtworzenia");
            entity.Property(e => e.PdouDataNadania)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_DataNadania");
            entity.Property(e => e.PdouDataUstania)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_DataUstania");
            entity.Property(e => e.PdouImieNazwisko)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOU_ImieNazwisko");
            entity.Property(e => e.PdouObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDOU_ObiLp");
            entity.Property(e => e.PdouObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_ObiNumer");
            entity.Property(e => e.PdouObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDOU_ObiTyp");
            entity.Property(e => e.PdouOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_OpeMNumer");
            entity.Property(e => e.PdouOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_OpeWNumer");
            entity.Property(e => e.PdouOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_OpeZNumer");
            entity.Property(e => e.PdouRodzajUpowaznieniaId)
                .HasDefaultValue(0)
                .HasColumnName("PDOU_RodzajUpowaznieniaId");
            entity.Property(e => e.PdouZakresUpowaznienia)
                .HasMaxLength(2054)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDOU_ZakresUpowaznienia");
        });

        modelBuilder.Entity<PicoCenniki>(entity =>
        {
            entity.HasKey(e => e.PcCId).HasName("PcC_Primary");

            entity.ToTable("PicoCenniki", "CDN", tb => tb.HasTrigger("PicoCenniki_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PcCTwCtwrTyp, e.PcCTwCtwrNumer, e.PcCTwCtwrLp }, "PcCCeny");

            entity.HasIndex(e => e.PcCPcKid, "PcCOddzial");

            entity.Property(e => e.PcCId).HasColumnName("PcC_ID");
            entity.Property(e => e.PcCPcKid).HasColumnName("PcC_PcKID");
            entity.Property(e => e.PcCTs)
                .HasDefaultValue(0)
                .HasColumnName("PcC_TS");
            entity.Property(e => e.PcCTwCtwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcC_TwCTwrLp");
            entity.Property(e => e.PcCTwCtwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PcC_TwCTwrNumer");
            entity.Property(e => e.PcCTwCtwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcC_TwCTwrTyp");

            entity.HasOne(d => d.PcCPcK).WithMany(p => p.PicoCennikis)
                .HasForeignKey(d => d.PcCPcKid)
                .HasConstraintName("FK_PcCOddzial");
        });

        modelBuilder.Entity<PicoDaneA>(entity =>
        {
            entity.HasKey(e => e.PcAId).HasName("PcA_Primary");

            entity.ToTable("PicoDaneAS", "CDN");

            entity.HasIndex(e => new { e.PcAPicoId, e.PcATyp }, "PcAPicoTyp");

            entity.Property(e => e.PcAId).HasColumnName("PcA_ID");
            entity.Property(e => e.PcADane)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("PcA_Dane");
            entity.Property(e => e.PcAData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("PcA_Data");
            entity.Property(e => e.PcAOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcA_Opis");
            entity.Property(e => e.PcAPicoId)
                .HasDefaultValue(0)
                .HasColumnName("PcA_PicoID");
            entity.Property(e => e.PcATyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcA_Typ");
        });

        modelBuilder.Entity<PicoKntRodzaje>(entity =>
        {
            entity.HasKey(e => new { e.PkrPcKid, e.PkrRodzajId }).HasName("PKR_Primary");

            entity.ToTable("PicoKntRodzaje", "CDN", tb => tb.HasTrigger("PicoKntRodzajeAlias_DeleteHandler"));

            entity.HasIndex(e => e.PkrPcKid, "PKROddzial");

            entity.HasIndex(e => e.PkrRodzajId, "PKRRodzaj");

            entity.Property(e => e.PkrPcKid).HasColumnName("PKR_PcKID");
            entity.Property(e => e.PkrRodzajId).HasColumnName("PKR_RodzajID");
            entity.Property(e => e.PkrImpPotwOfe)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKR_ImpPotwOfe");
            entity.Property(e => e.PkrImpPotwZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKR_ImpPotwZam");

            entity.HasOne(d => d.PkrPcK).WithMany(p => p.PicoKntRodzajes)
                .HasForeignKey(d => d.PkrPcKid)
                .HasConstraintName("FK_PKROddzial");

            entity.HasOne(d => d.PkrRodzaj).WithMany(p => p.PicoKntRodzajes)
                .HasForeignKey(d => d.PkrRodzajId)
                .HasConstraintName("FK_PKRRodzaj");
        });

        modelBuilder.Entity<PicoKonfig>(entity =>
        {
            entity.HasKey(e => e.PcKPicoId).HasName("PcK_Primary");

            entity.ToTable("PicoKonfig", "CDN", tb =>
                {
                    tb.HasTrigger("PicoKonfig_AktualizujPicoRelacje");
                    tb.HasTrigger("PicoKonfig_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PcKCentrumId, e.PcKTyp }, "PcKFrS");

            entity.HasIndex(e => e.PcKMagNumer, "PcKMag");

            entity.HasIndex(e => e.PcKMdNnumer, "PcKMdN");

            entity.HasIndex(e => new { e.PcKPicoId, e.PcKImpKntRodzajId }, "PcKPKR");

            entity.HasIndex(e => e.PcKKarnumer, "PcKRejestrNoType");

            entity.HasIndex(e => e.PcKSerNumer, "PcKSer");

            entity.Property(e => e.PcKPicoId).HasColumnName("PcK_PicoID");
            entity.Property(e => e.PcKAktualizacjaPlanowSprDo)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_AktualizacjaPlanowSprDo");
            entity.Property(e => e.PcKAs)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AS");
            entity.Property(e => e.PcKAskomp)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_ASKomp");
            entity.Property(e => e.PcKAsserwer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_ASSerwer");
            entity.Property(e => e.PcKAstermin)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ASTermin");
            entity.Property(e => e.PcKAsterminDo)
                .HasDefaultValue(0)
                .HasColumnName("PcK_ASTerminDo");
            entity.Property(e => e.PcKAsterminOd)
                .HasDefaultValue(0)
                .HasColumnName("PcK_ASTerminOd");
            entity.Property(e => e.PcKAutoExpCennik)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_AutoExpCennik");
            entity.Property(e => e.PcKAutoExpCennikStanyZerowe)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_AutoExpCennikStanyZerowe");
            entity.Property(e => e.PcKAutoExpCennikTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutoExpCennikTyp");
            entity.Property(e => e.PcKAutoExpGrup)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_AutoExpGrup");
            entity.Property(e => e.PcKAutoExpGrupTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_AutoExpGrupTyp");
            entity.Property(e => e.PcKAutoExpKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutoExpKnt");
            entity.Property(e => e.PcKAutoExpKntTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutoExpKntTyp");
            entity.Property(e => e.PcKAutoExpZalaczniki)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_AutoExpZalaczniki");
            entity.Property(e => e.PcKAutoExport)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_AutoExport");
            entity.Property(e => e.PcKAutoImport)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_AutoImport");
            entity.Property(e => e.PcKAutoPrzyjmijZaplate)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_AutoPrzyjmijZaplate");
            entity.Property(e => e.PcKAutoSerwer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_AutoSerwer");
            entity.Property(e => e.PcKAutoWydanieWszystkichZasobow)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutoWydanieWszystkichZasobow");
            entity.Property(e => e.PcKAutoZamykanieOkna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutoZamykanieOkna");
            entity.Property(e => e.PcKAutomatyczneMmw)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutomatyczneMMW");
            entity.Property(e => e.PcKAutomatyczneNaliczaniePp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutomatyczneNaliczaniePP");
            entity.Property(e => e.PcKAutomatycznePwrw)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_AutomatycznePWRW");
            entity.Property(e => e.PcKBlokadawieleDok)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_BlokadawieleDok");
            entity.Property(e => e.PcKBlokady)
                .HasDefaultValue(0)
                .HasColumnName("PcK_Blokady");
            entity.Property(e => e.PcKCenaZakupu)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_CenaZakupu");
            entity.Property(e => e.PcKCentrumId)
                .HasDefaultValue(0)
                .HasColumnName("PcK_CentrumID");
            entity.Property(e => e.PcKCertyfikat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_Certyfikat");
            entity.Property(e => e.PcKDniPrzedData)
                .HasDefaultValue(0)
                .HasColumnName("PcK_DniPrzedData");
            entity.Property(e => e.PcKEtapSynchronizacji)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_EtapSynchronizacji");
            entity.Property(e => e.PcKExpAktStanOferty)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpAktStanOferty");
            entity.Property(e => e.PcKExpCennik)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_ExpCennik");
            entity.Property(e => e.PcKExpCennikStanyZerowe)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_ExpCennikStanyZerowe");
            entity.Property(e => e.PcKExpCennikTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpCennikTyp");
            entity.Property(e => e.PcKExpGrup)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_ExpGrup");
            entity.Property(e => e.PcKExpGrupTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_ExpGrupTyp");
            entity.Property(e => e.PcKExpKnGnumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_ExpKnGNumer");
            entity.Property(e => e.PcKExpKnGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_ExpKnGTyp");
            entity.Property(e => e.PcKExpKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpKnt");
            entity.Property(e => e.PcKExpKntOpisy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpKntOpisy");
            entity.Property(e => e.PcKExpKntOsoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpKntOsoby");
            entity.Property(e => e.PcKExpKntPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpKntPlatnosci");
            entity.Property(e => e.PcKExpKntTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpKntTyp");
            entity.Property(e => e.PcKExpKntZobowiazania)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpKntZobowiazania");
            entity.Property(e => e.PcKExpPrm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpPrm");
            entity.Property(e => e.PcKExpPrmTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpPrmTyp");
            entity.Property(e => e.PcKExpPublikujOferty)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpPublikujOferty");
            entity.Property(e => e.PcKExpStanZamZamk)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_ExpStanZamZamk");
            entity.Property(e => e.PcKExpTwGnumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_ExpTwGNumer");
            entity.Property(e => e.PcKExpTwGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_ExpTwGTyp");
            entity.Property(e => e.PcKExpTwrOpisy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpTwrOpisy");
            entity.Property(e => e.PcKExpTwrZamienniki)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpTwrZamienniki");
            entity.Property(e => e.PcKExpTylkoCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpTylkoCeny");
            entity.Property(e => e.PcKExpUwzgledniajRezerwacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpUwzgledniajRezerwacje");
            entity.Property(e => e.PcKExpZalaczniki)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_ExpZalaczniki");
            entity.Property(e => e.PcKExpZanRealizacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ExpZanRealizacje");
            entity.Property(e => e.PcKFaDoPapoTerminie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_FaDoPAPoTerminie");
            entity.Property(e => e.PcKGenerujPwnaBraki)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_GenerujPWNaBraki");
            entity.Property(e => e.PcKGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_GUID");
            entity.Property(e => e.PcKIMallHash)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_iMallHash");
            entity.Property(e => e.PcKIMallHaslo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_iMallHaslo");
            entity.Property(e => e.PcKIMallId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_iMallID");
            entity.Property(e => e.PcKIMallSerwer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_iMallSerwer");
            entity.Property(e => e.PcKIMallWspolpraca)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_iMallWspolpraca");
            entity.Property(e => e.PcKISklepHash)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_iSklepHash");
            entity.Property(e => e.PcKISklepId)
                .HasDefaultValue(0)
                .HasColumnName("PcK_iSklepID");
            entity.Property(e => e.PcKIloscCenAutonomicznych)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_IloscCenAutonomicznych");
            entity.Property(e => e.PcKIloscDniFapa)
                .HasDefaultValue(0)
                .HasColumnName("PcK_IloscDniFAPA");
            entity.Property(e => e.PcKIloscPozycji)
                .HasDefaultValue(0)
                .HasColumnName("PcK_IloscPozycji");
            entity.Property(e => e.PcKImpKntDodawanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ImpKntDodawanie");
            entity.Property(e => e.PcKImpKntEdycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ImpKntEdycja");
            entity.Property(e => e.PcKImpKntRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("PcK_ImpKntRodzajID");
            entity.Property(e => e.PcKImpKntWymagajPotwierdzenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ImpKntWymagajPotwierdzenia");
            entity.Property(e => e.PcKImpKntWymagajPotwierdzeniaDodania)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ImpKntWymagajPotwierdzeniaDodania");
            entity.Property(e => e.PcKImpTwrRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("PcK_ImpTwrRodzajId");
            entity.Property(e => e.PcKImpZamXml)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ImpZamXML");
            entity.Property(e => e.PcKInwObs)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_InwObs");
            entity.Property(e => e.PcKInwOstDodawTwrNaDok)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_InwOstDodawTwrNaDok");
            entity.Property(e => e.PcKKarfirma)
                .HasDefaultValue(0)
                .HasColumnName("PcK_KARFirma");
            entity.Property(e => e.PcKKarlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_KARLp");
            entity.Property(e => e.PcKKarnumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_KARNumer");
            entity.Property(e => e.PcKKartyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_KARTyp");
            entity.Property(e => e.PcKKatalogArchiwum)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_KatalogArchiwum");
            entity.Property(e => e.PcKKnGenumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_KnGENumer");
            entity.Property(e => e.PcKKnGetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_KnGETyp");
            entity.Property(e => e.PcKKnGinumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_KnGINumer");
            entity.Property(e => e.PcKKnGityp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_KnGITyp");
            entity.Property(e => e.PcKKopiujIloscZzamSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_KopiujIloscZZamSpr");
            entity.Property(e => e.PcKKursRecznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_KursRecznie");
            entity.Property(e => e.PcKLimitKrMaksCzas)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_LimitKrMaksCzas");
            entity.Property(e => e.PcKLimitKrObs)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_LimitKrObs");
            entity.Property(e => e.PcKLimitKrPrez)
                .HasDefaultValue((byte)1)
                .HasColumnName("PcK_LimitKrPrez");
            entity.Property(e => e.PcKLogFlag)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_LogFlag");
            entity.Property(e => e.PcKLogowanieKarta)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_LogowanieKarta");
            entity.Property(e => e.PcKMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_MagNumer");
            entity.Property(e => e.PcKMagZamNumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_MagZamNumer");
            entity.Property(e => e.PcKMagZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_MagZwrNumer");
            entity.Property(e => e.PcKMapAktualizujDane)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_MapAktualizujDane");
            entity.Property(e => e.PcKMapKntEmail)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_MapKntEmail");
            entity.Property(e => e.PcKMapKntNip)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_MapKntNIP");
            entity.Property(e => e.PcKMdNnumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_MdNNumer");
            entity.Property(e => e.PcKMinimalizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_Minimalizacja");
            entity.Property(e => e.PcKMminfo).HasColumnName("PcK_MMInfo");
            entity.Property(e => e.PcKMobSeksportZamwBuforze)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_MobSEksportZamwBuforze");
            entity.Property(e => e.PcKMobSprzedstDniBlokada)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_MobSPrzedstDniBlokada");
            entity.Property(e => e.PcKMobSprzedstDniOstrzezenie)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_MobSPrzedstDniOstrzezenie");
            entity.Property(e => e.PcKMobSprzedstKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PcK_MobSPrzedstKwota");
            entity.Property(e => e.PcKNrCeny)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_NrCeny");
            entity.Property(e => e.PcKNrCenyDomyslnej)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_NrCenyDomyslnej");
            entity.Property(e => e.PcKNrCenyWzorcowej)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_NrCenyWzorcowej");
            entity.Property(e => e.PcKNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_NrKursu");
            entity.Property(e => e.PcKOpiekunImpDok)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_OpiekunImpDok");
            entity.Property(e => e.PcKPicoSmtp)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_PicoSMTP");
            entity.Property(e => e.PcKPodpLogowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_PodpLogowania");
            entity.Property(e => e.PcKPosagentGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_POSAgentGUID");
            entity.Property(e => e.PcKPosagentHost)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_POSAgentHost");
            entity.Property(e => e.PcKPosagentKod)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_POSAgentKod");
            entity.Property(e => e.PcKPosagentPort)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_POSAgentPort");
            entity.Property(e => e.PcKPosagentProfil)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_POSAgentProfil");
            entity.Property(e => e.PcKPrzeliczajBezPytania)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_PrzeliczajBezPytania");
            entity.Property(e => e.PcKRok)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_Rok");
            entity.Property(e => e.PcKSerNumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_SerNumer");
            entity.Property(e => e.PcKSeriaRak)
                .HasDefaultValue(0)
                .HasColumnName("PcK_SeriaRAK");
            entity.Property(e => e.PcKSposobPotwZamOfe)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_SposobPotwZamOfe");
            entity.Property(e => e.PcKSposobWyszukiwania)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_SposobWyszukiwania");
            entity.Property(e => e.PcKSprWroznychWalutach)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_SprWRoznychWalutach");
            entity.Property(e => e.PcKSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_SQL");
            entity.Property(e => e.PcKSsl)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_SSL");
            entity.Property(e => e.PcKStan).HasColumnName("PcK_Stan");
            entity.Property(e => e.PcKTssynchr)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchr");
            entity.Property(e => e.PcKTssynchrBin)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrBin");
            entity.Property(e => e.PcKTssynchrBinPtw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrBinPtw");
            entity.Property(e => e.PcKTssynchrGrup)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrGrup");
            entity.Property(e => e.PcKTssynchrGrupPtw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrGrupPtw");
            entity.Property(e => e.PcKTssynchrKnO)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrKnO");
            entity.Property(e => e.PcKTssynchrKnOptw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrKnOPtw");
            entity.Property(e => e.PcKTssynchrKnS)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrKnS");
            entity.Property(e => e.PcKTssynchrKnSptw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrKnSPtw");
            entity.Property(e => e.PcKTssynchrKnt)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrKnt");
            entity.Property(e => e.PcKTssynchrKntO)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrKntO");
            entity.Property(e => e.PcKTssynchrKntPtw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrKntPtw");
            entity.Property(e => e.PcKTssynchrPrm)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrPrm");
            entity.Property(e => e.PcKTssynchrPrmPtw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrPrmPtw");
            entity.Property(e => e.PcKTssynchrPtw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrPtw");
            entity.Property(e => e.PcKTssynchrTwC)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrTwC");
            entity.Property(e => e.PcKTssynchrTwCptw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrTwCPtw");
            entity.Property(e => e.PcKTssynchrTwO)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrTwO");
            entity.Property(e => e.PcKTssynchrTwOptw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrTwOPtw");
            entity.Property(e => e.PcKTssynchrTwr)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrTwr");
            entity.Property(e => e.PcKTssynchrTwrPtw)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSSynchrTwrPtw");
            entity.Property(e => e.PcKTszmianyGrupyEksportuKnt)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSZmianyGrupyEksportuKnt");
            entity.Property(e => e.PcKTszmianyGrupyEksportuTwr)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TSZmianyGrupyEksportuTwr");
            entity.Property(e => e.PcKTwGenumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TwGENumer");
            entity.Property(e => e.PcKTwGetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_TwGETyp");
            entity.Property(e => e.PcKTwGinumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TwGINumer");
            entity.Property(e => e.PcKTwGityp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_TwGITyp");
            entity.Property(e => e.PcKTwGnumer)
                .HasDefaultValue(0)
                .HasColumnName("PcK_TwGNumer");
            entity.Property(e => e.PcKTwGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_TwGTyp");
            entity.Property(e => e.PcKTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcK_Typ");
            entity.Property(e => e.PcKUjemnaKasaAutoryzacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_UjemnaKasaAutoryzacja");
            entity.Property(e => e.PcKWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_Waluta");
            entity.Property(e => e.PcKWszystkoPlaccessToken)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_WszystkoPLAccessToken");
            entity.Property(e => e.PcKWszystkoPldc)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_WszystkoPLDC");
            entity.Property(e => e.PcKWszystkoPllogin)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_WszystkoPLLogin");
            entity.Property(e => e.PcKWszystkoPlrefreshToken)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_WszystkoPLRefreshToken");
            entity.Property(e => e.PcKWszystkoPlserwer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcK_WszystkoPLSerwer");
            entity.Property(e => e.PcKWymPotwWizyt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_WymPotwWizyt");
            entity.Property(e => e.PcKZamPotwierdzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ZamPotwierdzaj");
            entity.Property(e => e.PcKZatwierdzanieZamPoPrzekrLimitu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcK_ZatwierdzanieZamPoPrzekrLimitu");
        });

        modelBuilder.Entity<PicoKontrahenci>(entity =>
        {
            entity.HasKey(e => new { e.PktPcKid, e.PktRodzajId }).HasName("PKT_Primary");

            entity.ToTable("PicoKontrahenci", "CDN");

            entity.HasIndex(e => e.PktPcKid, "PKTOddzial");

            entity.HasIndex(e => e.PktRodzajId, "PKTRodzaj");

            entity.Property(e => e.PktPcKid).HasColumnName("PKT_PcKID");
            entity.Property(e => e.PktRodzajId).HasColumnName("PKT_RodzajID");
            entity.Property(e => e.PktDodawanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKT_Dodawanie");
            entity.Property(e => e.PktEdycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKT_Edycja");

            entity.HasOne(d => d.PktPcK).WithMany(p => p.PicoKontrahencis)
                .HasForeignKey(d => d.PktPcKid)
                .HasConstraintName("FK_PKTOddzial");

            entity.HasOne(d => d.PktRodzaj).WithMany(p => p.PicoKontrahencis)
                .HasForeignKey(d => d.PktRodzajId)
                .HasConstraintName("FK_PKTRodzaj");
        });

        modelBuilder.Entity<PicoLog>(entity =>
        {
            entity.HasKey(e => e.PcLId).HasName("PcL_Primary");

            entity.ToTable("PicoLog", "CDN", tb =>
                {
                    tb.HasTrigger("PicoLog_InsertUpdateHandler");
                    tb.HasTrigger("PicoLog_TStamp");
                });

            entity.HasIndex(e => e.PcLObiektId, "PcLObiektID");

            entity.HasIndex(e => new { e.PcLObiNumer, e.PcLObiTyp, e.PcLPcKid }, "PcLObiektXL").IsUnique();

            entity.Property(e => e.PcLId).HasColumnName("PcL_ID");
            entity.Property(e => e.PcLInfo)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcL_Info");
            entity.Property(e => e.PcLKomentarz)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcL_Komentarz");
            entity.Property(e => e.PcLObiNumer).HasColumnName("PcL_ObiNumer");
            entity.Property(e => e.PcLObiTyp).HasColumnName("PcL_ObiTyp");
            entity.Property(e => e.PcLObiektGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcL_ObiektGUID");
            entity.Property(e => e.PcLObiektId).HasColumnName("PcL_ObiektID");
            entity.Property(e => e.PcLObiektTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcL_ObiektTyp");
            entity.Property(e => e.PcLPcKid).HasColumnName("PcL_PcKID");
            entity.Property(e => e.PcLTstamp)
                .HasDefaultValue(0)
                .HasColumnName("PcL_TStamp");

            entity.HasOne(d => d.PcLPcK).WithMany(p => p.PicoLogs)
                .HasForeignKey(d => d.PcLPcKid)
                .HasConstraintName("FK_PcLObiektXL");
        });

        modelBuilder.Entity<PicoLogElem>(entity =>
        {
            entity.HasKey(e => e.PcEId).HasName("PcE_Primary");

            entity.ToTable("PicoLogElem", "CDN");

            entity.HasIndex(e => e.PcEPcNid, "PcEPcNID");

            entity.Property(e => e.PcEId).HasColumnName("PcE_ID");
            entity.Property(e => e.PcEDataKoniec)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("PcE_DataKoniec");
            entity.Property(e => e.PcEDataStart)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("PcE_DataStart");
            entity.Property(e => e.PcEKod)
                .HasDefaultValue(0)
                .HasColumnName("PcE_Kod");
            entity.Property(e => e.PcEObiIdent)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcE_ObiIdent");
            entity.Property(e => e.PcEObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcE_ObiTyp");
            entity.Property(e => e.PcEOjciec)
                .HasDefaultValue(0)
                .HasColumnName("PcE_Ojciec");
            entity.Property(e => e.PcEOpis)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcE_Opis");
            entity.Property(e => e.PcEPcNid)
                .HasDefaultValue(0)
                .HasColumnName("PcE_PcNID");
            entity.Property(e => e.PcEStatus)
                .HasDefaultValue((short)0)
                .HasColumnName("PcE_Status");

            entity.HasOne(d => d.PcEPcN).WithMany(p => p.PicoLogElems)
                .HasForeignKey(d => d.PcEPcNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PcEPcNID");
        });

        modelBuilder.Entity<PicoLogNag>(entity =>
        {
            entity.HasKey(e => e.PcNId).HasName("PcN_Primary");

            entity.ToTable("PicoLogNag", "CDN");

            entity.HasIndex(e => e.PcNPcKid, "PcNPicoID");

            entity.Property(e => e.PcNId).HasColumnName("PcN_ID");
            entity.Property(e => e.PcNDataKoniec)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("PcN_DataKoniec");
            entity.Property(e => e.PcNDataStart)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("PcN_DataStart");
            entity.Property(e => e.PcNKomputer)
                .HasMaxLength(127)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcN_Komputer");
            entity.Property(e => e.PcNPcKid)
                .HasDefaultValue(0)
                .HasColumnName("PcN_PcKID");
            entity.Property(e => e.PcNPoziom)
                .HasDefaultValue(0)
                .HasColumnName("PcN_Poziom");
            entity.Property(e => e.PcNStatus)
                .HasDefaultValue((short)0)
                .HasColumnName("PcN_Status");
            entity.Property(e => e.PcNTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcN_Typ");
        });

        modelBuilder.Entity<PicoRelacje>(entity =>
        {
            entity.HasKey(e => new { e.PcRId, e.PcRObityp, e.PcRObinumer }).HasName("PcR_Primary");

            entity.ToTable("PicoRelacje", "CDN", tb => tb.HasTrigger("PicoRelacje_InsertUpdateHandler"));

            entity.Property(e => e.PcRId).HasColumnName("PcR_ID");
            entity.Property(e => e.PcRObityp).HasColumnName("PcR_OBITyp");
            entity.Property(e => e.PcRObinumer).HasColumnName("PcR_OBINumer");
            entity.Property(e => e.PcRDostepny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcR_Dostepny");
            entity.Property(e => e.PcRObi2numer)
                .HasDefaultValue(0)
                .HasColumnName("PcR_OBI2Numer");
            entity.Property(e => e.PcRObi2typ)
                .HasDefaultValue((short)0)
                .HasColumnName("PcR_OBI2Typ");

            entity.HasOne(d => d.PcR).WithMany(p => p.PicoRelacjes)
                .HasForeignKey(d => d.PcRId)
                .HasConstraintName("FK_PcRPrimary");
        });

        modelBuilder.Entity<PicoSposobyDst>(entity =>
        {
            entity.HasKey(e => new { e.PsdPicoId, e.PsdSposobTyp, e.PsdSposobLp }).HasName("PSD_Primary");

            entity.ToTable("PicoSposobyDst", "CDN");

            entity.HasIndex(e => e.PsdPicoId, "PSDOddzial");

            entity.HasIndex(e => new { e.PsdSposobTyp, e.PsdSposobLp }, "PSDSposob");

            entity.Property(e => e.PsdPicoId).HasColumnName("PSD_PicoId");
            entity.Property(e => e.PsdSposobTyp).HasColumnName("PSD_SposobTyp");
            entity.Property(e => e.PsdSposobLp).HasColumnName("PSD_SposobLp");
            entity.Property(e => e.PsdImpPotwOfe)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSD_ImpPotwOfe");
            entity.Property(e => e.PsdImpPotwZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSD_ImpPotwZam");

            entity.HasOne(d => d.PsdPico).WithMany(p => p.PicoSposobyDsts)
                .HasForeignKey(d => d.PsdPicoId)
                .HasConstraintName("FK_PSDOddzial");

            entity.HasOne(d => d.Nazwy).WithMany(p => p.PicoSposobyDsts)
                .HasForeignKey(d => new { d.PsdSposobTyp, d.PsdSposobLp })
                .HasConstraintName("FK_PSDSposob");
        });

        modelBuilder.Entity<PicoStanowiska>(entity =>
        {
            entity.HasKey(e => e.PsaId).HasName("PSa_Primary");

            entity.ToTable("PicoStanowiska", "CDN", tb => tb.HasTrigger("PicoStanowiska_DataDodania"));

            entity.HasIndex(e => e.PsaPcKid, "PSaOddzial");

            entity.Property(e => e.PsaId).HasColumnName("PSa_ID");
            entity.Property(e => e.PsaAutoZamkniecieDnia)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_AutoZamkniecieDnia");
            entity.Property(e => e.PsaBezWyplaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_BezWyplaty");
            entity.Property(e => e.PsaCzasZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("PSa_CzasZamkniecia");
            entity.Property(e => e.PsaDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("PSa_DataDodania");
            entity.Property(e => e.PsaDfiskWydruk)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_DfiskWydruk");
            entity.Property(e => e.PsaDrukarka)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSa_Drukarka");
            entity.Property(e => e.PsaGenKpKwOtwarcie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_GenKpKwOtwarcie");
            entity.Property(e => e.PsaGenKpKwZamkniecie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_GenKpKwZamkniecie");
            entity.Property(e => e.PsaGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSa_GUID");
            entity.Property(e => e.PsaKlawiaturaNumeryczna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_KlawiaturaNumeryczna");
            entity.Property(e => e.PsaKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSa_Kod");
            entity.Property(e => e.PsaLastSync)
                .HasDefaultValue(0)
                .HasColumnName("PSa_LastSync");
            entity.Property(e => e.PsaLicencja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_Licencja");
            entity.Property(e => e.PsaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSa_Nazwa");
            entity.Property(e => e.PsaOtwZamBezStanu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_OtwZamBezStanu");
            entity.Property(e => e.PsaOtwZamRapKasDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_OtwZamRapKasDzien");
            entity.Property(e => e.PsaOtwZamRapKasSesja)
                .HasDefaultValue((byte)1)
                .HasColumnName("PSa_OtwZamRapKasSesja");
            entity.Property(e => e.PsaPcKid)
                .HasDefaultValue(0)
                .HasColumnName("PSa_PcKID");
            entity.Property(e => e.PsaSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSa_Seria");
            entity.Property(e => e.PsaSzuflada)
                .HasDefaultValue(0)
                .HasColumnName("PSa_Szuflada");
            entity.Property(e => e.PsaSzufladaOtwPlatnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_SzufladaOtwPlatnosc");
            entity.Property(e => e.PsaSzufladaOtwWystawianie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_SzufladaOtwWystawianie");
            entity.Property(e => e.PsaSzufladaOtwZliczanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_SzufladaOtwZliczanie");
            entity.Property(e => e.PsaSzufladaOtwZmianaOtw)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_SzufladaOtwZmianaOtw");
            entity.Property(e => e.PsaSzufladaOtwZmianaZamk)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_SzufladaOtwZmianaZamk");
            entity.Property(e => e.PsaSzybkaSprzedaz)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_SzybkaSprzedaz");
            entity.Property(e => e.PsaTrybPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_TrybPracy");
            entity.Property(e => e.PsaTylkoDostepneTwr)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_TylkoDostepneTwr");
            entity.Property(e => e.PsaTypAplikacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_TypAplikacji");
            entity.Property(e => e.PsaUrzadzenieZew)
                .HasDefaultValue(0)
                .HasColumnName("PSa_UrzadzenieZew");
            entity.Property(e => e.PsaWydrukNaDomyslnejDrukarce)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSa_wydrukNaDOmyslnejDrukarce");

            entity.HasOne(d => d.PsaPcK).WithMany(p => p.PicoStanowiskas)
                .HasForeignKey(d => d.PsaPcKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PSaOddzial");
        });

        modelBuilder.Entity<PicoStanowiskaFormyPl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PicoStanowiskaFormyPl", "CDN", tb =>
                {
                    tb.HasTrigger("PicoStanowiskaFormyPl_CzasModyfikacji");
                    tb.HasTrigger("PicoStanowiskaFormyPl_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PfpKarnumer, "PFPRejestrNoType");

            entity.HasIndex(e => e.PfpPsaId, "PFPStanowisko");

            entity.Property(e => e.PfpBezKpKw)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFP_BezKpKw");
            entity.Property(e => e.PfpCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PFP_CzasModyfikacji");
            entity.Property(e => e.PfpCzyscPoZamknieciuSesji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFP_CzyscPoZamknieciuSesji");
            entity.Property(e => e.PfpFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFP_FormaNr");
            entity.Property(e => e.PfpKarfirma)
                .HasDefaultValue(0)
                .HasColumnName("PFP_KARFirma");
            entity.Property(e => e.PfpKarlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PFP_KARLp");
            entity.Property(e => e.PfpKarnumer)
                .HasDefaultValue(0)
                .HasColumnName("PFP_KARNumer");
            entity.Property(e => e.PfpKartyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PFP_KARTyp");
            entity.Property(e => e.PfpNazwaPos)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PFP_NazwaPOS");
            entity.Property(e => e.PfpPsaId)
                .HasDefaultValue(0)
                .HasColumnName("PFP_PSaID");

            entity.HasOne(d => d.PfpPsa).WithMany()
                .HasForeignKey(d => d.PfpPsaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PFPStanowisko");
        });

        modelBuilder.Entity<PicoStanowiskaOperatorzy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PicoStanowiskaOperatorzy", "CDN", tb => tb.HasTrigger("PicoStanowiskaOperatorzy_Haslo"));

            entity.HasIndex(e => e.PknOpeNumer, "PKnOperatorNoType");

            entity.HasIndex(e => e.PknPsaId, "PKnStanowisko");

            entity.Property(e => e.PknCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PKn_CzasModyfikacji");
            entity.Property(e => e.PknHaslo)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("PKn_haslo");
            entity.Property(e => e.PknOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("PKn_OpeFirma");
            entity.Property(e => e.PknOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKn_OpeLP");
            entity.Property(e => e.PknOpeNumer).HasColumnName("PKn_OpeNumer");
            entity.Property(e => e.PknOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKn_OpeTyp");
            entity.Property(e => e.PknPsaId).HasColumnName("PKn_PSaID");

            entity.HasOne(d => d.PknOpeNumerNavigation).WithMany()
                .HasForeignKey(d => d.PknOpeNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PKnOperatorNoType");

            entity.HasOne(d => d.PknPsa).WithMany()
                .HasForeignKey(d => d.PknPsaId)
                .HasConstraintName("FK_PKnStanowisko");
        });

        modelBuilder.Entity<PicoStanowiskaWydruki>(entity =>
        {
            entity.HasKey(e => e.PwrId).HasName("PWr_Primary");

            entity.ToTable("PicoStanowiskaWydruki", "CDN", tb => tb.HasTrigger("PicoStanowiskaWydruki_CzasModyfikacji"));

            entity.HasIndex(e => e.PwrIdDefinicji, "PWrDefinicja");

            entity.HasIndex(e => e.PwrPsaId, "PWrStanowisko");

            entity.Property(e => e.PwrId).HasColumnName("PWr_ID");
            entity.Property(e => e.PwrCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PWr_CzasModyfikacji");
            entity.Property(e => e.PwrDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWr_Domyslny");
            entity.Property(e => e.PwrIdDefinicji)
                .HasDefaultValue(0)
                .HasColumnName("PWr_IdDefinicji");
            entity.Property(e => e.PwrKopie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWr_Kopie");
            entity.Property(e => e.PwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWr_Nazwa");
            entity.Property(e => e.PwrNazwaPos)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWr_NazwaPos");
            entity.Property(e => e.PwrPsaId)
                .HasDefaultValue(0)
                .HasColumnName("PWr_PSaID");
            entity.Property(e => e.PwrRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("PWr_Rodzaj");
            entity.Property(e => e.PwrTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWr_Typ");
            entity.Property(e => e.PwrWysylaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWr_Wysylaj");

            entity.HasOne(d => d.PwrPsa).WithMany(p => p.PicoStanowiskaWydrukis)
                .HasForeignKey(d => d.PwrPsaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PWrStanowisko");
        });

        modelBuilder.Entity<PicoSzybkaSprzedaz>(entity =>
        {
            entity.HasKey(e => new { e.PssPicoId, e.PssTwgSyncId }).HasName("PSS_Primary");

            entity.ToTable("PicoSzybkaSprzedaz", "CDN", tb =>
                {
                    tb.HasTrigger("TwrGrupySzybkiejSprzedazy_CzasModyfikacji");
                    tb.HasTrigger("TwrGrupySzybkiejSprzedazy_CzasModyfikacjiDel");
                });

            entity.HasIndex(e => e.PssTwgSyncId, "PSSTwrGrupy");

            entity.Property(e => e.PssPicoId).HasColumnName("PSS_PicoID");
            entity.Property(e => e.PssTwgSyncId).HasColumnName("PSS_TwgSyncID");
            entity.Property(e => e.PssPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("PSS_Pozycja");

            entity.HasOne(d => d.PssPico).WithMany(p => p.PicoSzybkaSprzedazs)
                .HasForeignKey(d => d.PssPicoId)
                .HasConstraintName("FK_PSSPrimary");

            entity.HasOne(d => d.PssTwgSync).WithMany(p => p.PicoSzybkaSprzedazs)
                .HasPrincipalKey(p => p.TwGSyncId)
                .HasForeignKey(d => d.PssTwgSyncId)
                .HasConstraintName("FK_PSSTwrGrupy");
        });

        modelBuilder.Entity<PicoTimestamp>(entity =>
        {
            entity.HasKey(e => e.PcSId).HasName("PcS_Primary");

            entity.ToTable("PicoTimestamp", "CDN");

            entity.HasIndex(e => new { e.PcSObityp, e.PcSPcKid }, "PcSObiektOddzial").IsUnique();

            entity.HasIndex(e => e.PcSPcKid, "PcSOddzial");

            entity.Property(e => e.PcSId).HasColumnName("PcS_ID");
            entity.Property(e => e.PcSObityp)
                .HasDefaultValue((short)0)
                .HasColumnName("PcS_OBITyp");
            entity.Property(e => e.PcSOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcS_Opis");
            entity.Property(e => e.PcSPcKid)
                .HasDefaultValue(0)
                .HasColumnName("PcS_PcKID");
            entity.Property(e => e.PcSSkrot)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcS_Skrot");
            entity.Property(e => e.PcSTssynchr)
                .HasDefaultValue(0)
                .HasColumnName("PcS_TSSynchr");
            entity.Property(e => e.PcSTssynchrPtw)
                .HasDefaultValue(0)
                .HasColumnName("PcS_TSSynchrPtw");

            entity.HasOne(d => d.PcSPcK).WithMany(p => p.PicoTimestamps)
                .HasForeignKey(d => d.PcSPcKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PcSOddzial");
        });

        modelBuilder.Entity<PicoUlubioneTwr>(entity =>
        {
            entity.HasKey(e => new { e.PutPicoId, e.PutTwrNumer }).HasName("PUT_Primary");

            entity.ToTable("PicoUlubioneTwr", "CDN");

            entity.HasIndex(e => e.PutTwrNumer, "PUTTwr");

            entity.Property(e => e.PutPicoId).HasColumnName("PUT_PicoID");
            entity.Property(e => e.PutTwrNumer).HasColumnName("PUT_TwrNumer");
            entity.Property(e => e.PutPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("PUT_Pozycja");

            entity.HasOne(d => d.PutPico).WithMany(p => p.PicoUlubioneTwrs)
                .HasForeignKey(d => d.PutPicoId)
                .HasConstraintName("FK_PUTPrimary");

            entity.HasOne(d => d.PutTwrNumerNavigation).WithMany(p => p.PicoUlubioneTwrs)
                .HasForeignKey(d => d.PutTwrNumer)
                .HasConstraintName("FK_PUTTwr");
        });

        modelBuilder.Entity<PicoUsuniete>(entity =>
        {
            entity.HasKey(e => e.PcUId).HasName("PcU_Primary");

            entity.ToTable("PicoUsuniete", "CDN");

            entity.HasIndex(e => new { e.PcUObiNumer, e.PcUObiTyp, e.PcUPcKid, e.PcUPsaId }, "PcUObiekt").IsUnique();

            entity.HasIndex(e => new { e.PcUObiNumer, e.PcUObiTyp, e.PcUPcKid, e.PcUPsaId, e.PcUStan }, "PcUObiektStan").IsUnique();

            entity.HasIndex(e => new { e.PcUPcKid, e.PcUPsaId }, "PcUOddzial");

            entity.Property(e => e.PcUId).HasColumnName("PcU_ID");
            entity.Property(e => e.PcUIdent)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PcU_Ident");
            entity.Property(e => e.PcUObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PcU_ObiNumer");
            entity.Property(e => e.PcUObiTyp)
                .HasDefaultValue(0)
                .HasColumnName("PcU_ObiTyp");
            entity.Property(e => e.PcUObiektId)
                .HasDefaultValue(0)
                .HasColumnName("PcU_ObiektID");
            entity.Property(e => e.PcUObiektTyp)
                .HasDefaultValue(0)
                .HasColumnName("PcU_ObiektTyp");
            entity.Property(e => e.PcUPcKid)
                .HasDefaultValue(0)
                .HasColumnName("PcU_PcKId");
            entity.Property(e => e.PcUPsaId)
                .HasDefaultValue(0)
                .HasColumnName("PcU_PsaID");
            entity.Property(e => e.PcUStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("PcU_Stan");
            entity.Property(e => e.PcUTsusuniecia)
                .HasDefaultValue(0)
                .HasColumnName("PcU_TSUsuniecia");

            entity.HasOne(d => d.PcUPcK).WithMany(p => p.PicoUsunietes)
                .HasForeignKey(d => d.PcUPcKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PcUOddzial");
        });

        modelBuilder.Entity<PicoWaluty>(entity =>
        {
            entity.HasKey(e => e.PwLId).HasName("PwL_Primary");

            entity.ToTable("PicoWaluty", "CDN", tb =>
                {
                    tb.HasTrigger("PicoWaluty_CzasModyfikacji");
                    tb.HasTrigger("PicoWaluty_DeleteHandler");
                });

            entity.HasIndex(e => e.PwLPckId, "PwLOddzial");

            entity.HasIndex(e => new { e.PwLOpeMnumer, e.PwLOpeMtyp }, "PwLOperator");

            entity.Property(e => e.PwLId).HasColumnName("PwL_ID");
            entity.Property(e => e.PwLCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PwL_CzasModyfikacji");
            entity.Property(e => e.PwLKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("PwL_KursL");
            entity.Property(e => e.PwLKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PwL_KursM");
            entity.Property(e => e.PwLKursTs)
                .HasDefaultValue(0)
                .HasColumnName("PwL_KursTS");
            entity.Property(e => e.PwLLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PwL_Lp");
            entity.Property(e => e.PwLOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PwL_OpeMNumer");
            entity.Property(e => e.PwLOpeMtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PwL_OpeMTyp");
            entity.Property(e => e.PwLPckId)
                .HasDefaultValue(0)
                .HasColumnName("PwL_PckId");
            entity.Property(e => e.PwLSymbolL)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PwL_SymbolL");
            entity.Property(e => e.PwLSymbolM)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PwL_SymbolM");
            entity.Property(e => e.PwLTsarchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("PwL_TSArchiwizacji");

            entity.HasOne(d => d.PwLPck).WithMany(p => p.PicoWaluties)
                .HasForeignKey(d => d.PwLPckId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PwLOddzial");
        });

        modelBuilder.Entity<Pikelem>(entity =>
        {
            entity.HasKey(e => new { e.PieGidnumer, e.PieGidlp }).HasName("PIE_Primary");

            entity.ToTable("PIKElem", "CDN", tb => tb.HasTrigger("PIKElem_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PieGidnumer, e.PieZnacznik, e.PieKod, e.PieFrSid }, "PIEKod").IsUnique();

            entity.Property(e => e.PieGidnumer).HasColumnName("PIE_GIDNumer");
            entity.Property(e => e.PieGidlp).HasColumnName("PIE_GIDLp");
            entity.Property(e => e.PieFrSid)
                .HasDefaultValue(0)
                .HasColumnName("PIE_FrSId");
            entity.Property(e => e.PieGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PIE_GIDFirma");
            entity.Property(e => e.PieGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIE_GIDTyp");
            entity.Property(e => e.PieImie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIE_Imie");
            entity.Property(e => e.PieKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIE_Kod");
            entity.Property(e => e.PieNazwisko)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIE_Nazwisko");
            entity.Property(e => e.PieZnacznik)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIE_Znacznik");

            entity.HasOne(d => d.PieGidnumerNavigation).WithMany(p => p.Pikelems)
                .HasForeignKey(d => d.PieGidnumer)
                .HasConstraintName("FK_PIEPrimary");
        });

        modelBuilder.Entity<Pikkwoty>(entity =>
        {
            entity.HasKey(e => new { e.PikGidnumer, e.PikGidlp, e.PikRodzaj, e.PikPodRodzajId, e.PikSymbol, e.PikTypWyplaty }).HasName("PIK_Primary");

            entity.ToTable("PIKKwoty", "CDN");

            entity.Property(e => e.PikGidnumer).HasColumnName("PIK_GIDNumer");
            entity.Property(e => e.PikGidlp).HasColumnName("PIK_GIDLp");
            entity.Property(e => e.PikRodzaj).HasColumnName("PIK_Rodzaj");
            entity.Property(e => e.PikPodRodzajId).HasColumnName("PIK_PodRodzajID");
            entity.Property(e => e.PikSymbol).HasColumnName("PIK_Symbol");
            entity.Property(e => e.PikTypWyplaty).HasColumnName("PIK_TypWyplaty");
            entity.Property(e => e.PikGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PIK_GIDFirma");
            entity.Property(e => e.PikGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIK_GIDTyp");
            entity.Property(e => e.PikKosztFirma)
                .HasDefaultValue((short)0)
                .HasColumnName("PIK_KosztFirma");
            entity.Property(e => e.PikKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PIK_Kwota");
            entity.Property(e => e.PikKwotaUjemna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("PIK_KwotaUjemna");
            entity.Property(e => e.PikUbztyuId)
                .HasDefaultValue(0)
                .HasColumnName("PIK_UBZTyuId");

            entity.HasOne(d => d.Pikelem).WithMany(p => p.Pikkwoties)
                .HasForeignKey(d => new { d.PikGidnumer, d.PikGidlp })
                .HasConstraintName("FK_PIKPrimary");
        });

        modelBuilder.Entity<Piknag>(entity =>
        {
            entity.HasKey(e => e.PinGidnumer).HasName("PIN_Primary");

            entity.ToTable("PIKNag", "CDN", tb =>
                {
                    tb.HasTrigger("PIKNag_DeleteHandler");
                    tb.HasTrigger("PIKNag_InsertUpdateHandler");
                    tb.HasTrigger("PikNag_SprawdzSesje");
                });

            entity.HasIndex(e => e.PinIdentyfikator, "PINIdent").IsUnique();

            entity.HasIndex(e => new { e.PinRok, e.PinMiesiac, e.PinNumer }, "PINMiesiac").IsUnique();

            entity.Property(e => e.PinGidnumer).HasColumnName("PIN_GIDNumer");
            entity.Property(e => e.PinAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PIN_Aktywny");
            entity.Property(e => e.PinCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIN_CechaOpis");
            entity.Property(e => e.PinData)
                .HasDefaultValue(0)
                .HasColumnName("PIN_Data");
            entity.Property(e => e.PinDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("PIN_DataKsiegowania");
            entity.Property(e => e.PinDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("PIN_DataWyst");
            entity.Property(e => e.PinDokId)
                .HasDefaultValue(0)
                .HasColumnName("PIN_DokID");
            entity.Property(e => e.PinDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIN_Dziennik");
            entity.Property(e => e.PinGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PIN_GIDFirma");
            entity.Property(e => e.PinGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_GIDLp");
            entity.Property(e => e.PinGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_GIDTyp");
            entity.Property(e => e.PinIdentyfikator)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIN_Identyfikator");
            entity.Property(e => e.PinKategoria)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIN_Kategoria");
            entity.Property(e => e.PinKorektado)
                .HasDefaultValue(0)
                .HasColumnName("PIN_korektado");
            entity.Property(e => e.PinKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PIN_KursL");
            entity.Property(e => e.PinKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PIN_KursM");
            entity.Property(e => e.PinMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_Miesiac");
            entity.Property(e => e.PinNazwaFirmy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIN_NazwaFirmy");
            entity.Property(e => e.PinNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIN_NieKsiegowac");
            entity.Property(e => e.PinNumer)
                .HasDefaultValue(0)
                .HasColumnName("PIN_Numer");
            entity.Property(e => e.PinOddelegowani)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_Oddelegowani");
            entity.Property(e => e.PinOpis)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIN_Opis");
            entity.Property(e => e.PinOptima)
                .HasDefaultValue(0)
                .HasColumnName("PIN_Optima");
            entity.Property(e => e.PinPdnfirma)
                .HasDefaultValue(0)
                .HasColumnName("PIN_PDNFirma");
            entity.Property(e => e.PinPdnlp)
                .HasDefaultValue(0)
                .HasColumnName("PIN_PDNLp");
            entity.Property(e => e.PinPdnnumer)
                .HasDefaultValue(0)
                .HasColumnName("PIN_PDNNumer");
            entity.Property(e => e.PinPdntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_PDNTyp");
            entity.Property(e => e.PinRodzajOpisu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIN_RodzajOpisu");
            entity.Property(e => e.PinRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_Rok");
            entity.Property(e => e.PinSchfirma)
                .HasDefaultValue(0)
                .HasColumnName("PIN_SCHFirma");
            entity.Property(e => e.PinSchlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_SCHLp");
            entity.Property(e => e.PinSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("PIN_SCHNumer");
            entity.Property(e => e.PinSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_SCHTyp");
            entity.Property(e => e.PinTstamp)
                .HasDefaultValue(0)
                .HasColumnName("PIN_TStamp");
            entity.Property(e => e.PinWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIN_Waluta");
            entity.Property(e => e.PinWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIN_WsDziennik");
            entity.Property(e => e.PinWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("PIN_WsSCHNumer");
            entity.Property(e => e.PinWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIN_WsSCHTyp");
            entity.Property(e => e.PinWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIN_WsStosujDziennik");
            entity.Property(e => e.PinWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIN_WsStosujSchemat");
            entity.Property(e => e.PinWyplatySumarycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIN_WyplatySumarycznie");
            entity.Property(e => e.PinZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIN_Zaksiegowano");
        });

        modelBuilder.Entity<PlaceElementyGrupy>(entity =>
        {
            entity.HasKey(e => e.PegId).HasName("PEG_Primary");

            entity.ToTable("PlaceElementyGrupy", "CDN", tb => tb.HasTrigger("PlaceElementyGrupy_DeleteHandler"));

            entity.Property(e => e.PegId).HasColumnName("PEG_Id");
            entity.Property(e => e.PegKolejnosc)
                .HasDefaultValue((short)0)
                .HasColumnName("PEG_Kolejnosc");
            entity.Property(e => e.PegNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PEG_Nazwa");
        });

        modelBuilder.Entity<PlaceElementyProgi>(entity =>
        {
            entity.HasKey(e => new { e.PepPewid, e.PepStaz }).HasName("PEP_Primary");

            entity.ToTable("PlaceElementyProgi", "CDN");

            entity.Property(e => e.PepPewid).HasColumnName("PEP_PEWId");
            entity.Property(e => e.PepStaz).HasColumnName("PEP_Staz");
            entity.Property(e => e.PepProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("PEP_Procent");

            entity.HasOne(d => d.PepPew).WithMany(p => p.PlaceElementyProgis)
                .HasForeignKey(d => d.PepPewid)
                .HasConstraintName("FK_PEPPrimary");
        });

        modelBuilder.Entity<PlaceElementySkladniki>(entity =>
        {
            entity.HasKey(e => e.PesId).HasName("PES_Primary");

            entity.ToTable("PlaceElementySkladniki", "CDN", tb =>
                {
                    tb.HasTrigger("PlaceElementySkladniki_DeleteHandler");
                    tb.HasTrigger("PlaceElementySkladniki_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PesPewid, "PESElement");

            entity.HasIndex(e => new { e.PesLpltyp, e.PesNaliczPoElem }, "PESListaPlac");

            entity.Property(e => e.PesId).HasColumnName("PES_Id");
            entity.Property(e => e.PesKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PES_Kod");
            entity.Property(e => e.PesLp)
                .HasDefaultValue(0)
                .HasColumnName("PES_Lp");
            entity.Property(e => e.PesLpltyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PES_LPLTyp");
            entity.Property(e => e.PesNaliczPoElem)
                .HasDefaultValue((byte)0)
                .HasColumnName("PES_NaliczPoElem");
            entity.Property(e => e.PesNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PES_Nazwa");
            entity.Property(e => e.PesPewid)
                .HasDefaultValue(0)
                .HasColumnName("PES_PEWId");
            entity.Property(e => e.PesPredefiniowany)
                .HasDefaultValue(0)
                .HasColumnName("PES_Predefiniowany");
            entity.Property(e => e.PesSql)
                .HasMaxLength(7800)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PES_SQL");
            entity.Property(e => e.PesTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PES_Typ");
        });

        modelBuilder.Entity<PlaceElementyWyplat>(entity =>
        {
            entity.HasKey(e => e.PewId).HasName("PEW_Primary");

            entity.ToTable("PlaceElementyWyplat", "CDN", tb =>
                {
                    tb.HasTrigger("PlaceElementyWyplat_DeleteHandler");
                    tb.HasTrigger("PlaceElementyWyplat_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PewGidnumer, e.PewDataOd, e.PewDataDo }, "PEWElement").IsUnique();

            entity.HasIndex(e => e.PewNazwa, "PEWNazwa");

            entity.Property(e => e.PewId).HasColumnName("PEW_Id");
            entity.Property(e => e.PewAlgorytm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Algorytm");
            entity.Property(e => e.PewArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Archiwalny");
            entity.Property(e => e.PewDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PEW_DataDo");
            entity.Property(e => e.PewDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PEW_DataModyfikacji");
            entity.Property(e => e.PewDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PEW_DataOd");
            entity.Property(e => e.PewDataWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("PEW_DataWprowadzenia");
            entity.Property(e => e.PewDoWyplaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_DoWyplaty");
            entity.Property(e => e.PewDodajJesliZero)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_DodajJesliZero");
            entity.Property(e => e.PewEkwiwalentUrlopu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_EkwiwalentUrlopu");
            entity.Property(e => e.PewEkwiwalentUrlopuSt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_EkwiwalentUrlopuSt");
            entity.Property(e => e.PewEkwiwalentUrlopuTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_EkwiwalentUrlopuTyp");
            entity.Property(e => e.PewGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("PEW_GIDNumer");
            entity.Property(e => e.PewGotowka)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Gotowka");
            entity.Property(e => e.PewKolejnosc)
                .HasDefaultValue(0)
                .HasColumnName("PEW_Kolejnosc");
            entity.Property(e => e.PewKosztPracodawcy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_KosztPracodawcy");
            entity.Property(e => e.PewKosztyPrzychodu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_KosztyPrzychodu");
            entity.Property(e => e.PewKosztyWartosc)
                .HasDefaultValue((short)0)
                .HasColumnName("PEW_KosztyWartosc");
            entity.Property(e => e.PewKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PEW_Kwota");
            entity.Property(e => e.PewLpltyp)
                .HasDefaultValue(0)
                .HasColumnName("PEW_LPLTyp");
            entity.Property(e => e.PewNadgodziny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Nadgodziny");
            entity.Property(e => e.PewNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PEW_Nazwa");
            entity.Property(e => e.PewNbNieusp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_NbNieusp");
            entity.Property(e => e.PewNbUspNieplatna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_NbUspNieplatna");
            entity.Property(e => e.PewNbUspPlatna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_NbUspPlatna");
            entity.Property(e => e.PewNieobecnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Nieobecnosc");
            entity.Property(e => e.PewOdchylek)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Odchylek");
            entity.Property(e => e.PewOkresWyplaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_OkresWyplaty");
            entity.Property(e => e.PewOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("PEW_OpeNumerM");
            entity.Property(e => e.PewOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("PEW_OpeNumerW");
            entity.Property(e => e.PewPegid)
                .HasDefaultValue(0)
                .HasColumnName("PEW_PEGId");
            entity.Property(e => e.PewPfron)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_PFRON");
            entity.Property(e => e.PewPodatek)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Podatek");
            entity.Property(e => e.PewPodatekWartosc)
                .HasDefaultValue((short)0)
                .HasColumnName("PEW_PodatekWartosc");
            entity.Property(e => e.PewPomijajZasadnicze)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_PomijajZasadnicze");
            entity.Property(e => e.PewPorownajDoMinimalnego)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_PorownajDoMinimalnego");
            entity.Property(e => e.PewPozycjaPitfirmy)
                .HasDefaultValue(0)
                .HasColumnName("PEW_PozycjaPITFirmy");
            entity.Property(e => e.PewPozycjaPitpracownika)
                .HasDefaultValue(0)
                .HasColumnName("PEW_PozycjaPITPracownika");
            entity.Property(e => e.PewPozycjaRp7)
                .HasDefaultValue(0)
                .HasColumnName("PEW_PozycjaRp7");
            entity.Property(e => e.PewPozycjaZus)
                .HasDefaultValue(0)
                .HasColumnName("PEW_PozycjaZUS");
            entity.Property(e => e.PewPredefiniowany)
                .HasDefaultValue(0)
                .HasColumnName("PEW_Predefiniowany");
            entity.Property(e => e.PewProporcjonalnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Proporcjonalnosc");
            entity.Property(e => e.PewPswid)
                .HasDefaultValue(0)
                .HasColumnName("PEW_PSWId");
            entity.Property(e => e.PewSkladkaSpoleczna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_SkladkaSpoleczna");
            entity.Property(e => e.PewSkladkaZdrowotna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_SkladkaZdrowotna");
            entity.Property(e => e.PewSkrot)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PEW_Skrot");
            entity.Property(e => e.PewStazPierwszyDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_StazPierwszyDzien");
            entity.Property(e => e.PewTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Typ");
            entity.Property(e => e.PewUlga)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Ulga");
            entity.Property(e => e.PewUrlopWypoczynkowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_UrlopWypoczynkowy");
            entity.Property(e => e.PewUrlopWypoczynkowySt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_UrlopWypoczynkowySt");
            entity.Property(e => e.PewUrlopWypoczynkowyTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_UrlopWypoczynkowyTyp");
            entity.Property(e => e.PewWskTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_WskTyp");
            entity.Property(e => e.PewWskaznik)
                .HasDefaultValue(0)
                .HasColumnName("PEW_Wskaznik");
            entity.Property(e => e.PewWspLiczba)
                .HasDefaultValue(0)
                .HasColumnName("PEW_WspLiczba");
            entity.Property(e => e.PewWspNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PEW_WspNazwa");
            entity.Property(e => e.PewWspProcent)
                .HasDefaultValue(0)
                .HasColumnName("PEW_WspProcent");
            entity.Property(e => e.PewWspTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_WspTyp");
            entity.Property(e => e.PewWspUlamekL)
                .HasDefaultValue(0)
                .HasColumnName("PEW_WspUlamekL");
            entity.Property(e => e.PewWspUlamekM)
                .HasDefaultValue(0)
                .HasColumnName("PEW_WspUlamekM");
            entity.Property(e => e.PewWspUrlop)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_WspUrlop");
            entity.Property(e => e.PewWspUrlopWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("PEW_WspUrlopWartosc");
            entity.Property(e => e.PewWyliczacPrace)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_WyliczacPrace");
            entity.Property(e => e.PewWynagrodzeniaGus)
                .HasDefaultValue(0)
                .HasColumnName("PEW_WynagrodzeniaGUS");
            entity.Property(e => e.PewWzor)
                .HasMaxLength(6000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PEW_Wzor");
            entity.Property(e => e.PewZaokraglenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_Zaokraglenie");
            entity.Property(e => e.PewZaokraglenieSposob)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_ZaokraglenieSposob");
            entity.Property(e => e.PewZasilekChorobowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_ZasilekChorobowy");
            entity.Property(e => e.PewZwolnienieZus)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEW_ZwolnienieZUS");
        });

        modelBuilder.Entity<PlaceSkladkiWzorce>(entity =>
        {
            entity.HasKey(e => e.PswId).HasName("PSW_Primary");

            entity.ToTable("PlaceSkladkiWzorce", "CDN", tb => tb.HasTrigger("PlaceSkladkiWzorce_DeleteHandler"));

            entity.HasIndex(e => e.PswKod, "PSWKod").IsUnique();

            entity.HasIndex(e => e.PswNazwa, "PSWNazwa").IsUnique();

            entity.Property(e => e.PswId).HasColumnName("PSW_Id");
            entity.Property(e => e.PswArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_Archiwalny");
            entity.Property(e => e.PswDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PSW_DataModyfikacji");
            entity.Property(e => e.PswDataWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("PSW_DataWprowadzenia");
            entity.Property(e => e.PswKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSW_Kod");
            entity.Property(e => e.PswKosztyPrzychodu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_KosztyPrzychodu");
            entity.Property(e => e.PswKosztyPrzychoduP)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_KosztyPrzychoduP");
            entity.Property(e => e.PswKosztyWartosc)
                .HasDefaultValue((short)0)
                .HasColumnName("PSW_KosztyWartosc");
            entity.Property(e => e.PswNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSW_Nazwa");
            entity.Property(e => e.PswOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("PSW_OpeNumerM");
            entity.Property(e => e.PswOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("PSW_OpeNumerW");
            entity.Property(e => e.PswPodatek)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_Podatek");
            entity.Property(e => e.PswPodatekWartosc)
                .HasDefaultValue((short)0)
                .HasColumnName("PSW_PodatekWartosc");
            entity.Property(e => e.PswPodlegaOpodatkowaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_PodlegaOpodatkowaniu");
            entity.Property(e => e.PswSkladkaSpoleczna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_SkladkaSpoleczna");
            entity.Property(e => e.PswSkladkaZdrowotna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_SkladkaZdrowotna");
            entity.Property(e => e.PswStandardowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_Standardowy");
            entity.Property(e => e.PswUlga)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSW_Ulga");
        });

        modelBuilder.Entity<PlaceWskazniki>(entity =>
        {
            entity.HasKey(e => e.PwsId).HasName("PWs_Primary");

            entity.ToTable("PlaceWskazniki", "CDN");

            entity.HasIndex(e => new { e.PwsTyp, e.PwsKod, e.PwsDataOd, e.PwsDataDo }, "PWsNazwa").IsUnique();

            entity.Property(e => e.PwsId).HasColumnName("PWs_Id");
            entity.Property(e => e.PwsCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PWs_CzasModyfikacji");
            entity.Property(e => e.PwsCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("PWs_CzasWprowadzenia");
            entity.Property(e => e.PwsDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PWs_DataDo");
            entity.Property(e => e.PwsDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PWs_DataOd");
            entity.Property(e => e.PwsKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWs_Kod");
            entity.Property(e => e.PwsNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWs_Nazwa");
            entity.Property(e => e.PwsOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PWs_OpeMNumer");
            entity.Property(e => e.PwsOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PWs_OpeWNumer");
            entity.Property(e => e.PwsPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWs_Predefiniowany");
            entity.Property(e => e.PwsTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWs_Typ");
            entity.Property(e => e.PwsWartosc1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("PWs_Wartosc1");
            entity.Property(e => e.PwsWartosc2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("PWs_Wartosc2");
            entity.Property(e => e.PwsWartosc3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("PWs_Wartosc3");
            entity.Property(e => e.PwsWartoscS1)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWs_WartoscS1");
            entity.Property(e => e.PwsWartoscS2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWs_WartoscS2");
        });

        modelBuilder.Entity<PlanElem>(entity =>
        {
            entity.HasKey(e => e.PleId).HasName("PLE_Primary");

            entity.ToTable("PlanElem", "CDN", tb =>
                {
                    tb.HasTrigger("PlanElem_DeleteHandler");
                    tb.HasTrigger("PlanElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PleOkres, "PLEOkres");

            entity.HasIndex(e => new { e.PlePlan, e.PleOkres, e.PleTwrTyp, e.PleTwrNumer }, "PLEPlanOkres").IsUnique();

            entity.HasIndex(e => new { e.PleTwrNumer, e.PleTwrTyp }, "PLETowar");

            entity.Property(e => e.PleId).HasColumnName("PLE_Id");
            entity.Property(e => e.PleIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PLE_Ilosc");
            entity.Property(e => e.PleIloscPoprzednia)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PLE_IloscPoprzednia");
            entity.Property(e => e.PleJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PLE_JmFormat");
            entity.Property(e => e.PleJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("PLE_JmFormatZ");
            entity.Property(e => e.PleJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PLE_JmZ");
            entity.Property(e => e.PleOkres)
                .HasDefaultValue(0)
                .HasColumnName("PLE_Okres");
            entity.Property(e => e.PlePlan)
                .HasDefaultValue(0)
                .HasColumnName("PLE_Plan");
            entity.Property(e => e.PlePrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("PLE_PrzeliczL");
            entity.Property(e => e.PlePrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("PLE_PrzeliczM");
            entity.Property(e => e.PleTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("PLE_Technologia");
            entity.Property(e => e.PleTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PLE_TwrNumer");
            entity.Property(e => e.PleTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PLE_TwrTyp");
            entity.Property(e => e.PleTypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PLE_TypJm");
        });

        modelBuilder.Entity<PlanNag>(entity =>
        {
            entity.HasKey(e => e.PlnId).HasName("PLN_Primary");

            entity.ToTable("PlanNag", "CDN", tb =>
                {
                    tb.HasTrigger("PlanNagAlias_DeleteHandler");
                    tb.HasTrigger("PlanNag_DeleteHandler");
                    tb.HasTrigger("PlanNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PlnDataUtworz, e.PlnId }, "PLNData").IsUnique();

            entity.HasIndex(e => new { e.PlnRok, e.PlnMiesiac, e.PlnSeria, e.PlnNumer, e.PlnAnulowano }, "PLNNumer").IsUnique();

            entity.HasIndex(e => new { e.PlnOpeNumerW, e.PlnId }, "PLNOperatorW").IsUnique();

            entity.Property(e => e.PlnId).HasColumnName("PLN_Id");
            entity.Property(e => e.PlnAnulowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("PLN_Anulowano");
            entity.Property(e => e.PlnDataUtworz)
                .HasDefaultValue(0)
                .HasColumnName("PLN_DataUtworz");
            entity.Property(e => e.PlnDataZatw)
                .HasDefaultValue(0)
                .HasColumnName("PLN_DataZatw");
            entity.Property(e => e.PlnFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("PLN_FrmNumer");
            entity.Property(e => e.PlnFrsid)
                .HasDefaultValue(0)
                .HasColumnName("PLN_FRSID");
            entity.Property(e => e.PlnMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PLN_Miesiac");
            entity.Property(e => e.PlnNumer)
                .HasDefaultValue(0)
                .HasColumnName("PLN_Numer");
            entity.Property(e => e.PlnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("PLN_OpeNumerW");
            entity.Property(e => e.PlnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("PLN_OpeNumerZ");
            entity.Property(e => e.PlnOpis)
                .HasMaxLength(3999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PLN_Opis");
            entity.Property(e => e.PlnPlanZrodlowy)
                .HasDefaultValue(0)
                .HasColumnName("PLN_PlanZrodlowy");
            entity.Property(e => e.PlnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PLN_Rok");
            entity.Property(e => e.PlnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PLN_Seria");
            entity.Property(e => e.PlnStan)
                .HasDefaultValue((short)0)
                .HasColumnName("PLN_Stan");
        });

        modelBuilder.Entity<PlanOkre>(entity =>
        {
            entity.HasKey(e => e.PloId).HasName("PLO_Primary");

            entity.ToTable("PlanOkres", "CDN", tb =>
                {
                    tb.HasTrigger("PlanOkres_DeleteHandler");
                    tb.HasTrigger("PlanOkres_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PloPlan, e.PloNazwa }, "PLONazwa");

            entity.HasIndex(e => e.PloPlan, "PLOPlan");

            entity.Property(e => e.PloId).HasColumnName("PLO_Id");
            entity.Property(e => e.PloNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PLO_Nazwa");
            entity.Property(e => e.PloOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("PLO_OkresDo");
            entity.Property(e => e.PloOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("PLO_OkresOd");
            entity.Property(e => e.PloPlan)
                .HasDefaultValue(0)
                .HasColumnName("PLO_Plan");
        });

        modelBuilder.Entity<PlanSprzedazy>(entity =>
        {
            entity.HasKey(e => e.PspId).HasName("PSp_Primary");

            entity.ToTable("PlanSprzedazy", "CDN");

            entity.HasIndex(e => new { e.PspNazwa, e.PspTyp, e.PspStan, e.PspDataOd, e.PspDataDo }, "PSpLista");

            entity.Property(e => e.PspId).HasColumnName("PSp_ID");
            entity.Property(e => e.PspAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PSp_Aktywny");
            entity.Property(e => e.PspCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PSp_CzasModyfikacji");
            entity.Property(e => e.PspDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PSp_DataDo");
            entity.Property(e => e.PspDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PSp_DataOd");
            entity.Property(e => e.PspDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("PSp_DataUtworzenia");
            entity.Property(e => e.PspDataZrodlPozaOkres)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSp_DataZrodlPozaOkres");
            entity.Property(e => e.PspNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSp_Nazwa");
            entity.Property(e => e.PspOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("PSp_OpeNumerM");
            entity.Property(e => e.PspOpeNumerU)
                .HasDefaultValue(0)
                .HasColumnName("PSp_OpeNumerU");
            entity.Property(e => e.PspOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSp_Opis");
            entity.Property(e => e.PspStan)
                .HasDefaultValue((short)0)
                .HasColumnName("PSp_Stan");
            entity.Property(e => e.PspTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSp_Typ");
        });

        modelBuilder.Entity<PlanSprzedazyKnt>(entity =>
        {
            entity.HasKey(e => new { e.PskPspId, e.PskKntTyp, e.PskKntNumer }).HasName("PSK_Primary");

            entity.ToTable("PlanSprzedazyKnt", "CDN", tb => tb.HasTrigger("PlanSprzedazyKnt_InsertUpdateHandler"));

            entity.Property(e => e.PskPspId).HasColumnName("PSK_PSpID");
            entity.Property(e => e.PskKntTyp).HasColumnName("PSK_KntTyp");
            entity.Property(e => e.PskKntNumer).HasColumnName("PSK_KntNumer");

            entity.HasOne(d => d.PskPsp).WithMany(p => p.PlanSprzedazyKnts)
                .HasForeignKey(d => d.PskPspId)
                .HasConstraintName("FK_PSKPrimary");
        });

        modelBuilder.Entity<PlanSprzedazyRej>(entity =>
        {
            entity.HasKey(e => new { e.PsrPspId, e.PsrRejId }).HasName("PSR_Primary");

            entity.ToTable("PlanSprzedazyRej", "CDN");

            entity.Property(e => e.PsrPspId).HasColumnName("PSR_PSpID");
            entity.Property(e => e.PsrRejId).HasColumnName("PSR_RejID");
            entity.Property(e => e.PsrWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("PSR_Wartosc");

            entity.HasOne(d => d.PsrPsp).WithMany(p => p.PlanSprzedazyRejs)
                .HasForeignKey(d => d.PsrPspId)
                .HasConstraintName("FK_PSRPrimary");

            entity.HasOne(d => d.PsrRej).WithMany(p => p.PlanSprzedazyRejs)
                .HasForeignKey(d => d.PsrRejId)
                .HasConstraintName("FK_PSRRejID");
        });

        modelBuilder.Entity<PlanSprzedazyTwr>(entity =>
        {
            entity.HasKey(e => new { e.PstPspId, e.PstTwrTyp, e.PstTwrNumer }).HasName("PST_Primary");

            entity.ToTable("PlanSprzedazyTwr", "CDN", tb => tb.HasTrigger("PlanSprzedazyTwr_InsertUpdateHandler"));

            entity.Property(e => e.PstPspId).HasColumnName("PST_PSpID");
            entity.Property(e => e.PstTwrTyp).HasColumnName("PST_TwrTyp");
            entity.Property(e => e.PstTwrNumer).HasColumnName("PST_TwrNumer");

            entity.HasOne(d => d.PstPsp).WithMany(p => p.PlanSprzedazyTwrs)
                .HasForeignKey(d => d.PstPspId)
                .HasConstraintName("FK_PSTPrimary");
        });

        modelBuilder.Entity<PlanyElementyProdukty>(entity =>
        {
            entity.HasKey(e => e.PgpId).HasName("PGP_Primary");

            entity.ToTable("PlanyElementyProdukty", "CDN", tb => tb.HasTrigger("PlanyElementyProdukty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PgpObiNumer, e.PgpObiTyp }, "PGPObiekt");

            entity.HasIndex(e => e.PgpPgsid, "PGPPGS");

            entity.Property(e => e.PgpId).HasColumnName("PGP_Id");
            entity.Property(e => e.PgpIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PGP_Ilosc");
            entity.Property(e => e.PgpJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PGP_Jm");
            entity.Property(e => e.PgpObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PGP_ObiNumer");
            entity.Property(e => e.PgpObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PGP_ObiTyp");
            entity.Property(e => e.PgpPgsid)
                .HasDefaultValue(0)
                .HasColumnName("PGP_PGSId");

            entity.HasOne(d => d.PgpPgs).WithMany(p => p.PlanyElementyProdukties)
                .HasForeignKey(d => d.PgpPgsid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PGPPGS");
        });

        modelBuilder.Entity<PlanyElementySkladnikow>(entity =>
        {
            entity.HasKey(e => e.PgsId).HasName("PGS_Primary");

            entity.ToTable("PlanyElementySkladnikow", "CDN", tb => tb.HasTrigger("PlanyElementySkladnikow_InsertUpdateHandler"));

            entity.HasIndex(e => e.PgsPfuId, "PGSPFu");

            entity.HasIndex(e => e.PgsPsoid, "PGSPSO");

            entity.Property(e => e.PgsId).HasColumnName("PGS_Id");
            entity.Property(e => e.PgsPfuId)
                .HasDefaultValue(0)
                .HasColumnName("PGS_PFuId");
            entity.Property(e => e.PgsPsoid)
                .HasDefaultValue(0)
                .HasColumnName("PGS_PSOId");
            entity.Property(e => e.PgsPtoiteracja)
                .HasDefaultValue(0)
                .HasColumnName("PGS_PTOIteracja");
            entity.Property(e => e.PgsWartoscObciazenia)
                .HasDefaultValue(0)
                .HasColumnName("PGS_WartoscObciazenia");

            entity.HasOne(d => d.PgsPso).WithMany(p => p.PlanyElementySkladnikows)
                .HasForeignKey(d => d.PgsPsoid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PGSPSO");
        });

        modelBuilder.Entity<PlanyObciazeniaGniazd>(entity =>
        {
            entity.HasKey(e => e.PogId).HasName("POG_Primary");

            entity.ToTable("PlanyObciazeniaGniazd", "CDN", tb =>
                {
                    tb.HasTrigger("PlanyObciazeniaGniazd_DeleteHandler");
                    tb.HasTrigger("PlanyObciazeniaGniazd_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PogFrsId, "POGFRS");

            entity.HasIndex(e => new { e.PogRok, e.PogMiesiac, e.PogSeria, e.PogNumer }, "POGNumer").IsUnique();

            entity.HasIndex(e => e.PogOpeMnumer, "POGOpeM");

            entity.HasIndex(e => e.PogOpeWnumer, "POGOpeW");

            entity.HasIndex(e => e.PogPtoid, "POGPTO");

            entity.Property(e => e.PogId).HasColumnName("POG_Id");
            entity.Property(e => e.PogAktywny)
                .HasDefaultValue(0)
                .HasColumnName("POG_Aktywny");
            entity.Property(e => e.PogArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("POG_Archiwalny");
            entity.Property(e => e.PogDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("POG_DataModyfikacji");
            entity.Property(e => e.PogDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("POG_DataUtworzenia");
            entity.Property(e => e.PogFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("POG_FrmNumer");
            entity.Property(e => e.PogFrsId)
                .HasDefaultValue(0)
                .HasColumnName("POG_FrsId");
            entity.Property(e => e.PogGlowny)
                .HasDefaultValue((byte)0)
                .HasColumnName("POG_Glowny");
            entity.Property(e => e.PogGlownyOd)
                .HasDefaultValue(0)
                .HasColumnName("POG_GlownyOd");
            entity.Property(e => e.PogMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("POG_Miesiac");
            entity.Property(e => e.PogNumer)
                .HasDefaultValue(0)
                .HasColumnName("POG_Numer");
            entity.Property(e => e.PogOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("POG_OpeMNumer");
            entity.Property(e => e.PogOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("POG_OpeWNumer");
            entity.Property(e => e.PogOpis)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POG_Opis");
            entity.Property(e => e.PogPtoid)
                .HasDefaultValue(0)
                .HasColumnName("POG_PTOId");
            entity.Property(e => e.PogRok)
                .HasDefaultValue((short)0)
                .HasColumnName("POG_Rok");
            entity.Property(e => e.PogSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POG_Seria");
        });

        modelBuilder.Entity<PlanyObciazeniaPozycje>(entity =>
        {
            entity.HasKey(e => e.PpoId).HasName("PPO_Primary");

            entity.ToTable("PlanyObciazeniaPozycje", "CDN", tb => tb.HasTrigger("PlanyObciazeniaPozycje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PpoDokZrdNumer, e.PpoTwrNumer }, "PPOBstElem");

            entity.HasIndex(e => new { e.PpoDokZrdNumer, e.PpoDokZrdLp, e.PpoDokZrdTyp }, "PPOElemDokZrd");

            entity.HasIndex(e => new { e.PpoPogid, e.PpoLp }, "PPOPOG").IsUnique();

            entity.HasIndex(e => e.PpoTwrNumer, "PPOTwr");

            entity.Property(e => e.PpoId).HasColumnName("PPO_Id");
            entity.Property(e => e.PpoDokZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("PPO_DokZrdFirma");
            entity.Property(e => e.PpoDokZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPO_DokZrdLp");
            entity.Property(e => e.PpoDokZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPO_DokZrdNumer");
            entity.Property(e => e.PpoDokZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPO_DokZrdTyp");
            entity.Property(e => e.PpoIloscDoProdukcji)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PPO_IloscDoProdukcji");
            entity.Property(e => e.PpoIloscMps)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PPO_IloscMPS");
            entity.Property(e => e.PpoLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPO_Lp");
            entity.Property(e => e.PpoPogid)
                .HasDefaultValue(0)
                .HasColumnName("PPO_POGId");
            entity.Property(e => e.PpoTerminMps)
                .HasDefaultValue(0)
                .HasColumnName("PPO_TerminMPS");
            entity.Property(e => e.PpoTerminWgObciazenia)
                .HasDefaultValue(0)
                .HasColumnName("PPO_TerminWgObciazenia");
            entity.Property(e => e.PpoTerminWgZp)
                .HasDefaultValue(0)
                .HasColumnName("PPO_TerminWgZP");
            entity.Property(e => e.PpoTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPO_TwrNumer");
            entity.Property(e => e.PpoTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPO_TwrTyp");

            entity.HasOne(d => d.PpoPog).WithMany(p => p.PlanyObciazeniaPozycjes)
                .HasForeignKey(d => d.PpoPogid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPOPOG");
        });

        modelBuilder.Entity<PlanyPozycjeSkladniki>(entity =>
        {
            entity.HasKey(e => new { e.PpsPpoid, e.PpsPsoid }).HasName("PPS_Primary");

            entity.ToTable("PlanyPozycjeSkladniki", "CDN", tb => tb.HasTrigger("PlanyPozycjeSkladniki_Delete"));

            entity.HasIndex(e => e.PpsPsoid, "PPSPSO");

            entity.Property(e => e.PpsPpoid).HasColumnName("PPS_PPOId");
            entity.Property(e => e.PpsPsoid).HasColumnName("PPS_PSOId");

            entity.HasOne(d => d.PpsPpo).WithMany(p => p.PlanyPozycjeSkladnikis)
                .HasForeignKey(d => d.PpsPpoid)
                .HasConstraintName("FK_PPSPrimary");
        });

        modelBuilder.Entity<PlanySkladnikiObciazenium>(entity =>
        {
            entity.HasKey(e => e.PsoId).HasName("PSO_Primary");

            entity.ToTable("PlanySkladnikiObciazenia", "CDN", tb =>
                {
                    tb.HasTrigger("PlanySkladnikiObciazenia_Delete");
                    tb.HasTrigger("PlanySkladnikiObciazenia_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PsoObiNumer, "PSOObiekt");

            entity.HasIndex(e => e.PsoPogid, "PSOPOG");

            entity.Property(e => e.PsoId).HasColumnName("PSO_Id");
            entity.Property(e => e.PsoObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PSO_ObiNumer");
            entity.Property(e => e.PsoObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PSO_ObiTyp");
            entity.Property(e => e.PsoPogid)
                .HasDefaultValue(0)
                .HasColumnName("PSO_POGId");

            entity.HasOne(d => d.PsoPog).WithMany(p => p.PlanySkladnikiObciazenia)
                .HasForeignKey(d => d.PsoPogid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PSOPOG");
        });

        modelBuilder.Entity<PlanyTypyOkresow>(entity =>
        {
            entity.HasKey(e => e.PtoId).HasName("PTO_Primary");

            entity.ToTable("PlanyTypyOkresow", "CDN", tb => tb.HasTrigger("PlanyTypyOkresow_DeleteHandler"));

            entity.Property(e => e.PtoId).HasColumnName("PTO_Id");
            entity.Property(e => e.PtoFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PTO_FrsId");
            entity.Property(e => e.PtoJednostka)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTO_Jednostka");
            entity.Property(e => e.PtoPowtarzacCo)
                .HasDefaultValue(0)
                .HasColumnName("PTO_PowtarzacCo");
            entity.Property(e => e.PtoTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("PTO_TerminOd");
        });

        modelBuilder.Entity<PlatnosciNaDzien>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PlatnosciNaDzien", "CDN");

            entity.Property(e => e.PndDzien).HasColumnName("PND_Dzien");
            entity.Property(e => e.PndGidLp).HasColumnName("PND_GidLp");
            entity.Property(e => e.PndGidNumer).HasColumnName("PND_GidNumer");
            entity.Property(e => e.PndGidTyp).HasColumnName("PND_GidTyp");
            entity.Property(e => e.PndRazem)
                .HasColumnType("numeric(28, 10)")
                .HasColumnName("PND_Razem");
            entity.Property(e => e.PndRazemW)
                .HasColumnType("numeric(28, 10)")
                .HasColumnName("PND_RazemW");
            entity.Property(e => e.PndSpiNumer).HasColumnName("PND_SpiNumer");
            entity.Property(e => e.PndSpiTyp).HasColumnName("PND_SpiTyp");
            entity.Property(e => e.PndTyp).HasColumnName("PND_Typ");
            entity.Property(e => e.PndWaluta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PND_Waluta");
        });

        modelBuilder.Entity<PltPromocje>(entity =>
        {
            entity.HasKey(e => e.PprId).HasName("PPr_Primary");

            entity.ToTable("PltPromocje", "CDN");

            entity.HasIndex(e => e.PprPrmId, "PprPrmId");

            entity.Property(e => e.PprId).HasColumnName("PPr_ID");
            entity.Property(e => e.PprDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PPr_DataDo");
            entity.Property(e => e.PprDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PPr_DataOd");
            entity.Property(e => e.PprPltId)
                .HasDefaultValue(0)
                .HasColumnName("PPr_PltID");
            entity.Property(e => e.PprPrmId)
                .HasDefaultValue(0)
                .HasColumnName("PPr_PrmID");
            entity.Property(e => e.PprTerminMaks)
                .HasDefaultValue(0)
                .HasColumnName("PPr_TerminMaks");
            entity.Property(e => e.PprTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPr_Typ");
            entity.Property(e => e.PprWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPr_Wartosc");

            entity.HasOne(d => d.PprPrm).WithMany(p => p.PltPromocjes)
                .HasForeignKey(d => d.PprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PprPrmId");
        });

        modelBuilder.Entity<PobLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("POB_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_POB_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PodElem>(entity =>
        {
            entity.HasKey(e => new { e.PoeGidtyp, e.PoeGidnumer, e.PoeGidlp }).HasName("POE_Primary");

            entity.ToTable("PodElem", "CDN");

            entity.HasIndex(e => new { e.PoeTypPodatku, e.PoeGidlp, e.PoeRok, e.PoeMiesiac }, "POEChronologicznie");

            entity.HasIndex(e => new { e.PoeGidtyp, e.PoeGidnumer, e.PoePozycja, e.PoeSubPozycja }, "POEPozycja").IsUnique();

            entity.Property(e => e.PoeGidtyp).HasColumnName("POE_GIDTyp");
            entity.Property(e => e.PoeGidnumer).HasColumnName("POE_GIDNumer");
            entity.Property(e => e.PoeGidlp).HasColumnName("POE_GIDLp");
            entity.Property(e => e.PoeBylKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("POE_BylKNT");
            entity.Property(e => e.PoeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("POE_GIDFirma");
            entity.Property(e => e.PoeKnaid)
                .HasDefaultValue(0)
                .HasColumnName("POE_KNAId");
            entity.Property(e => e.PoeKnaidGrupy)
                .HasDefaultValue(0)
                .HasColumnName("POE_KNAIdGrupy");
            entity.Property(e => e.PoeKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("POE_KNTNumer");
            entity.Property(e => e.PoeKwotaL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("POE_KwotaL");
            entity.Property(e => e.PoeKwotaM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("POE_KwotaM");
            entity.Property(e => e.PoeMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("POE_Miesiac");
            entity.Property(e => e.PoeNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POE_Nazwa");
            entity.Property(e => e.PoeOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POE_Opis");
            entity.Property(e => e.PoePozycja)
                .HasDefaultValue(0)
                .HasColumnName("POE_Pozycja");
            entity.Property(e => e.PoeRok)
                .HasDefaultValue((short)0)
                .HasColumnName("POE_Rok");
            entity.Property(e => e.PoeSubPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("POE_SubPozycja");
            entity.Property(e => e.PoeTypPodatku)
                .HasDefaultValue((short)0)
                .HasColumnName("POE_TypPodatku");
            entity.Property(e => e.PoeWlafirma)
                .HasDefaultValue(0)
                .HasColumnName("POE_WLAFirma");
            entity.Property(e => e.PoeWlalp)
                .HasDefaultValue((short)0)
                .HasColumnName("POE_WLALp");
            entity.Property(e => e.PoeWlanumer)
                .HasDefaultValue(0)
                .HasColumnName("POE_WLANumer");
            entity.Property(e => e.PoeWlatyp)
                .HasDefaultValue((short)0)
                .HasColumnName("POE_WLATyp");
            entity.Property(e => e.PoeWyswietlajZero)
                .HasDefaultValue((byte)0)
                .HasColumnName("POE_WyswietlajZero");

            entity.HasOne(d => d.PoeGidnumerNavigation).WithMany(p => p.PodElems)
                .HasForeignKey(d => d.PoeGidnumer)
                .HasConstraintName("FK_POEPrimary");
        });

        modelBuilder.Entity<PodElemDok>(entity =>
        {
            entity.HasKey(e => new { e.PedPonnumer, e.PedLp }).HasName("PED_Primary");

            entity.ToTable("PodElemDok", "CDN", tb => tb.HasTrigger("PodElemDok_InsertUpdateHandler"));

            entity.HasIndex(e => e.PedKntNumer, "PEDKontrahent");

            entity.HasIndex(e => e.PedKnAnumer, "PEDKontrahentArd");

            entity.HasIndex(e => new { e.PedTrptyp, e.PedTrpnumer, e.PedTrplp }, "PEVPlatnosci");

            entity.Property(e => e.PedPonnumer).HasColumnName("PED_PONNumer");
            entity.Property(e => e.PedLp).HasColumnName("PED_Lp");
            entity.Property(e => e.PedDataStanuRozliczen)
                .HasDefaultValue(0)
                .HasColumnName("PED_DataStanuRozliczen");
            entity.Property(e => e.PedDataWystZd)
                .HasDefaultValue(0)
                .HasColumnName("PED_DataWystZD");
            entity.Property(e => e.PedDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("PED_DataWystawienia");
            entity.Property(e => e.PedKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("PED_KnANumer");
            entity.Property(e => e.PedKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("PED_KntNumer");
            entity.Property(e => e.PedNrFaktury)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PED_NrFaktury");
            entity.Property(e => e.PedStronaWd)
                .HasDefaultValue((byte)0)
                .HasColumnName("PED_StronaWD");
            entity.Property(e => e.PedTerminPlat)
                .HasDefaultValue(0)
                .HasColumnName("PED_TerminPlat");
            entity.Property(e => e.PedTrpfirma)
                .HasDefaultValue(0)
                .HasColumnName("PED_TRPFirma");
            entity.Property(e => e.PedTrplp)
                .HasDefaultValue((short)0)
                .HasColumnName("PED_TRPLp");
            entity.Property(e => e.PedTrpnumer)
                .HasDefaultValue(0)
                .HasColumnName("PED_TRPNumer");
            entity.Property(e => e.PedTrptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PED_TRPTyp");

            entity.HasOne(d => d.PedKnAnumerNavigation).WithMany(p => p.PodElemDoks)
                .HasForeignKey(d => d.PedKnAnumer)
                .HasConstraintName("FK_PEDKontrahentArd");

            entity.HasOne(d => d.PedKntNumerNavigation).WithMany(p => p.PodElemDoks)
                .HasForeignKey(d => d.PedKntNumer)
                .HasConstraintName("FK_PEDKontrahent");

            entity.HasOne(d => d.TraPlat).WithMany(p => p.PodElemDoks)
                .HasForeignKey(d => new { d.PedTrptyp, d.PedTrpnumer, d.PedTrplp })
                .HasConstraintName("FK_PEVPlatnosci");
        });

        modelBuilder.Entity<PodElemDokVat>(entity =>
        {
            entity.HasKey(e => new { e.PevPonnumer, e.PevPedlp, e.PevLp }).HasName("PEV_Primary");

            entity.ToTable("PodElemDokVat", "CDN");

            entity.HasIndex(e => new { e.PevPonnumer, e.PevPedlp, e.PevStawkaPod, e.PevFlagaVat, e.PevRodzajZakupu, e.PevOdliczeniaVat, e.PevStruktura }, "PEVPozycja").IsUnique();

            entity.Property(e => e.PevPonnumer).HasColumnName("PEV_PONNumer");
            entity.Property(e => e.PevPedlp).HasColumnName("PEV_PEDLp");
            entity.Property(e => e.PevLp).HasColumnName("PEV_Lp");
            entity.Property(e => e.PevExpoNorm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEV_ExpoNorm");
            entity.Property(e => e.PevFlagaVat)
                .HasDefaultValue((short)0)
                .HasColumnName("PEV_FlagaVat");
            entity.Property(e => e.PevNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PEV_Netto");
            entity.Property(e => e.PevOdliczeniaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEV_OdliczeniaVat");
            entity.Property(e => e.PevRodzajZakupu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEV_RodzajZakupu");
            entity.Property(e => e.PevStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PEV_StawkaPod");
            entity.Property(e => e.PevStruktura)
                .HasDefaultValue((byte)0)
                .HasColumnName("PEV_Struktura");
            entity.Property(e => e.PevVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PEV_Vat");

            entity.HasOne(d => d.PodElemDok).WithMany(p => p.PodElemDokVats)
                .HasForeignKey(d => new { d.PevPonnumer, d.PevPedlp })
                .HasConstraintName("FK_PRIMARY");
        });

        modelBuilder.Entity<PodElemListy>(entity =>
        {
            entity.HasKey(e => new { e.PelPontyp, e.PelPonnumer, e.PelPoelp, e.PelPenid, e.PelDpkid }).HasName("PEL_Primary");

            entity.ToTable("PodElemListy", "CDN");

            entity.HasIndex(e => new { e.PelPontyp, e.PelPonnumer, e.PelPoelp, e.PelWartoscString }, "PELWartosc");

            entity.Property(e => e.PelPontyp).HasColumnName("PEL_PONTyp");
            entity.Property(e => e.PelPonnumer).HasColumnName("PEL_PONNumer");
            entity.Property(e => e.PelPoelp).HasColumnName("PEL_POELp");
            entity.Property(e => e.PelPenid).HasColumnName("PEL_PENId");
            entity.Property(e => e.PelDpkid).HasColumnName("PEL_DPKId");
            entity.Property(e => e.PelLpKolumny)
                .HasDefaultValue((short)0)
                .HasColumnName("PEL_LpKolumny");
            entity.Property(e => e.PelWartoscString)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PEL_WartoscString");

            entity.HasOne(d => d.PodElemNagListy).WithMany(p => p.PodElemListies)
                .HasForeignKey(d => new { d.PelPontyp, d.PelPonnumer, d.PelPoelp, d.PelPenid })
                .HasConstraintName("FK_PELPrimary");
        });

        modelBuilder.Entity<PodElemNagListy>(entity =>
        {
            entity.HasKey(e => new { e.PenPontyp, e.PenPonnumer, e.PenPoelp, e.PenId }).HasName("PEN_Primary");

            entity.ToTable("PodElemNagListy", "CDN");

            entity.Property(e => e.PenPontyp).HasColumnName("PEN_PONTyp");
            entity.Property(e => e.PenPonnumer).HasColumnName("PEN_PONNumer");
            entity.Property(e => e.PenPoelp).HasColumnName("PEN_POELp");
            entity.Property(e => e.PenId).HasColumnName("PEN_Id");
            entity.Property(e => e.PenObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PEN_ObiLp");
            entity.Property(e => e.PenObiLp1)
                .HasDefaultValue((short)0)
                .HasColumnName("PEN_ObiLp1");
            entity.Property(e => e.PenObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PEN_ObiNumer");
            entity.Property(e => e.PenObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PEN_ObiTyp");

            entity.HasOne(d => d.PodElem).WithMany(p => p.PodElemNagListies)
                .HasForeignKey(d => new { d.PenPontyp, d.PenPonnumer, d.PenPoelp })
                .HasConstraintName("FK_PENPrimary");
        });

        modelBuilder.Entity<PodElemVuegrupy>(entity =>
        {
            entity.HasKey(e => new { e.PvgPoetyp, e.PvgPoenumer, e.PvgPoelp, e.PvgId }).HasName("PVG_Primary");

            entity.ToTable("PodElemVUEGrupy", "CDN");

            entity.Property(e => e.PvgPoetyp).HasColumnName("PVG_POETyp");
            entity.Property(e => e.PvgPoenumer).HasColumnName("PVG_POENumer");
            entity.Property(e => e.PvgPoelp).HasColumnName("PVG_POELp");
            entity.Property(e => e.PvgId).HasColumnName("PVG_Id");
            entity.Property(e => e.PvgByloJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVG_ByloJest");
            entity.Property(e => e.PvgKnAakronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KnAAkronimBylo");
            entity.Property(e => e.PvgKnAakronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KnAAkronimJest");
            entity.Property(e => e.PvgKnAnipbylo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KnANIPBylo");
            entity.Property(e => e.PvgKnAnipjest)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KnANIPJest");
            entity.Property(e => e.PvgKntAkronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KntAkronimBylo");
            entity.Property(e => e.PvgKntAkronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KntAkronimJest");
            entity.Property(e => e.PvgKodKrajuBylo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KodKrajuBylo");
            entity.Property(e => e.PvgKodKrajuJest)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_KodKrajuJest");
            entity.Property(e => e.PvgKwotaLbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVG_KwotaLBylo");
            entity.Property(e => e.PvgKwotaLjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVG_KwotaLJest");
            entity.Property(e => e.PvgKwotaMbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVG_KwotaMBylo");
            entity.Property(e => e.PvgKwotaMjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVG_KwotaMJest");
            entity.Property(e => e.PvgOpis)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_Opis");
            entity.Property(e => e.PvgPowrotnePrzemBylo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVG_PowrotnePrzemBylo");
            entity.Property(e => e.PvgPowrotnePrzemJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVG_PowrotnePrzemJest");
            entity.Property(e => e.PvgZastKnAakronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKnAAkronimBylo");
            entity.Property(e => e.PvgZastKnAakronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKnAAkronimJest");
            entity.Property(e => e.PvgZastKnAnipbylo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKnANIPBylo");
            entity.Property(e => e.PvgZastKnAnipjest)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKnANIPJest");
            entity.Property(e => e.PvgZastKntAkronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKntAkronimBylo");
            entity.Property(e => e.PvgZastKntAkronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKntAkronimJest");
            entity.Property(e => e.PvgZastKodKrajuBylo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKodKrajuBylo");
            entity.Property(e => e.PvgZastKodKrajuJest)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVG_ZastKodKrajuJest");
            entity.Property(e => e.PvgZastKwotaLbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVG_ZastKwotaLBylo");
            entity.Property(e => e.PvgZastKwotaLjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVG_ZastKwotaLJest");
            entity.Property(e => e.PvgZastKwotaMbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVG_ZastKwotaMBylo");
            entity.Property(e => e.PvgZastKwotaMjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVG_ZastKwotaMJest");
            entity.Property(e => e.PvgZastPowrotnePrzemBylo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVG_ZastPowrotnePrzemBylo");
            entity.Property(e => e.PvgZastPowrotnePrzemJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVG_ZastPowrotnePrzemJest");

            entity.HasOne(d => d.PodElem).WithMany(p => p.PodElemVuegrupies)
                .HasForeignKey(d => new { d.PvgPoetyp, d.PvgPoenumer, d.PvgPoelp })
                .HasConstraintName("FK_PVGPrimary");
        });

        modelBuilder.Entity<PodElemVuepozycje>(entity =>
        {
            entity.HasKey(e => new { e.PvpPoetyp, e.PvpPoenumer, e.PvpPoelp, e.PvpId }).HasName("PVP_Primary");

            entity.ToTable("PodElemVUEPozycje", "CDN");

            entity.Property(e => e.PvpPoetyp).HasColumnName("PVP_POETyp");
            entity.Property(e => e.PvpPoenumer).HasColumnName("PVP_POENumer");
            entity.Property(e => e.PvpPoelp).HasColumnName("PVP_POELp");
            entity.Property(e => e.PvpId).HasColumnName("PVP_Id");
            entity.Property(e => e.PvpBylKntBylo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_BylKntBylo");
            entity.Property(e => e.PvpBylKntJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_BylKntJest");
            entity.Property(e => e.PvpByloJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_ByloJest");
            entity.Property(e => e.PvpKnAakronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KnAAkronimBylo");
            entity.Property(e => e.PvpKnAakronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KnAAkronimJest");
            entity.Property(e => e.PvpKnAnipbylo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KnANIPBylo");
            entity.Property(e => e.PvpKnAnipjest)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KnANIPJest");
            entity.Property(e => e.PvpKnaIdBylo)
                .HasDefaultValue(0)
                .HasColumnName("PVP_KnaIdBylo");
            entity.Property(e => e.PvpKnaIdGrupyBylo)
                .HasDefaultValue(0)
                .HasColumnName("PVP_KnaIdGrupyBylo");
            entity.Property(e => e.PvpKnaIdGrupyJest)
                .HasDefaultValue(0)
                .HasColumnName("PVP_KnaIdGrupyJest");
            entity.Property(e => e.PvpKnaIdJest)
                .HasDefaultValue(0)
                .HasColumnName("PVP_KnaIdJest");
            entity.Property(e => e.PvpKntAkronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KntAkronimBylo");
            entity.Property(e => e.PvpKntAkronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KntAkronimJest");
            entity.Property(e => e.PvpKntNumerBylo)
                .HasDefaultValue(0)
                .HasColumnName("PVP_KntNumerBylo");
            entity.Property(e => e.PvpKntNumerJest)
                .HasDefaultValue(0)
                .HasColumnName("PVP_KntNumerJest");
            entity.Property(e => e.PvpKodKrajuBylo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KodKrajuBylo");
            entity.Property(e => e.PvpKodKrajuJest)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_KodKrajuJest");
            entity.Property(e => e.PvpKwotaLbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVP_KwotaLBylo");
            entity.Property(e => e.PvpKwotaLjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVP_KwotaLJest");
            entity.Property(e => e.PvpKwotaMbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVP_KwotaMBylo");
            entity.Property(e => e.PvpKwotaMjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVP_KwotaMJest");
            entity.Property(e => e.PvpOpis)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_Opis");
            entity.Property(e => e.PvpPowrotnePrzemBylo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_PowrotnePrzemBylo");
            entity.Property(e => e.PvpPowrotnePrzemJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_PowrotnePrzemJest");
            entity.Property(e => e.PvpPvgid)
                .HasDefaultValue(0)
                .HasColumnName("PVP_PVGId");
            entity.Property(e => e.PvpZastBylKntBylo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_ZastBylKntBylo");
            entity.Property(e => e.PvpZastBylKntJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_ZastBylKntJest");
            entity.Property(e => e.PvpZastKnAakronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKnAAkronimBylo");
            entity.Property(e => e.PvpZastKnAakronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKnAAkronimJest");
            entity.Property(e => e.PvpZastKnAnipbylo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKnANIPBylo");
            entity.Property(e => e.PvpZastKnAnipjest)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKnANIPJest");
            entity.Property(e => e.PvpZastKnaIdBylo)
                .HasDefaultValue(0)
                .HasColumnName("PVP_ZastKnaIdBylo");
            entity.Property(e => e.PvpZastKnaIdGrupyBylo)
                .HasDefaultValue(0)
                .HasColumnName("PVP_ZastKnaIdGrupyBylo");
            entity.Property(e => e.PvpZastKnaIdGrupyJest)
                .HasDefaultValue(0)
                .HasColumnName("PVP_ZastKnaIdGrupyJest");
            entity.Property(e => e.PvpZastKnaIdJest)
                .HasDefaultValue(0)
                .HasColumnName("PVP_ZastKnaIdJest");
            entity.Property(e => e.PvpZastKntAkronimBylo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKntAkronimBylo");
            entity.Property(e => e.PvpZastKntAkronimJest)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKntAkronimJest");
            entity.Property(e => e.PvpZastKntNumerBylo)
                .HasDefaultValue(0)
                .HasColumnName("PVP_ZastKntNumerBylo");
            entity.Property(e => e.PvpZastKntNumerJest)
                .HasDefaultValue(0)
                .HasColumnName("PVP_ZastKntNumerJest");
            entity.Property(e => e.PvpZastKodKrajuBylo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKodKrajuBylo");
            entity.Property(e => e.PvpZastKodKrajuJest)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PVP_ZastKodKrajuJest");
            entity.Property(e => e.PvpZastKwotaLbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVP_ZastKwotaLBylo");
            entity.Property(e => e.PvpZastKwotaLjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PVP_ZastKwotaLJest");
            entity.Property(e => e.PvpZastKwotaMbylo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVP_ZastKwotaMBylo");
            entity.Property(e => e.PvpZastKwotaMjest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PVP_ZastKwotaMJest");
            entity.Property(e => e.PvpZastPowrotnePrzemBylo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_ZastPowrotnePrzemBylo");
            entity.Property(e => e.PvpZastPowrotnePrzemJest)
                .HasDefaultValue((byte)0)
                .HasColumnName("PVP_ZastPowrotnePrzemJest");

            entity.HasOne(d => d.PodElem).WithMany(p => p.PodElemVuepozycjes)
                .HasForeignKey(d => new { d.PvpPoetyp, d.PvpPoenumer, d.PvpPoelp })
                .HasConstraintName("FK_PVPPrimary");
        });

        modelBuilder.Entity<PodNag>(entity =>
        {
            entity.HasKey(e => e.PonGidnumer).HasName("PON_Primary");

            entity.ToTable("PodNag", "CDN", tb =>
                {
                    tb.HasTrigger("PodNag_DeleteHandler");
                    tb.HasTrigger("PodNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PonGlowna, "PONGlowna");

            entity.HasIndex(e => new { e.PonTypPodatku, e.PonRok, e.PonMiesiac, e.PonOkrPoczatek, e.PonGidtyp, e.PonGidnumer }, "PONMiesiac").IsUnique();

            entity.HasIndex(e => new { e.PonTypPodatku, e.PonRok, e.PonMiesiac, e.PonOkrPoczatek, e.PonNumer }, "PONNumer").IsUnique();

            entity.HasIndex(e => e.PonOkresId, "PONOkresID");

            entity.HasIndex(e => e.PonPozid, "PONZestaw");

            entity.HasIndex(e => e.PonDpnid, "PonDPNID");

            entity.Property(e => e.PonGidnumer).HasColumnName("PON_GIDNumer");
            entity.Property(e => e.PonAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PON_Aktywny");
            entity.Property(e => e.PonCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_CechaOpis");
            entity.Property(e => e.PonDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataDo");
            entity.Property(e => e.PonDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataKsiegowania");
            entity.Property(e => e.PonDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataModyfikacji");
            entity.Property(e => e.PonDataNaDzien)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataNaDzien");
            entity.Property(e => e.PonDataObliczenia)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataObliczenia");
            entity.Property(e => e.PonDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataOd");
            entity.Property(e => e.PonDataWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataWprowadzenia");
            entity.Property(e => e.PonDataWyp)
                .HasDefaultValue(0)
                .HasColumnName("PON_DataWyp");
            entity.Property(e => e.PonDokZaksiegowane)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_DokZaksiegowane");
            entity.Property(e => e.PonDpnid)
                .HasDefaultValue(0)
                .HasColumnName("PON_DPNID");
            entity.Property(e => e.PonDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_Dziennik");
            entity.Property(e => e.PonGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_GIDFirma");
            entity.Property(e => e.PonGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_GIDLp");
            entity.Property(e => e.PonGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_GIDTyp");
            entity.Property(e => e.PonGlowna)
                .HasDefaultValue(0)
                .HasColumnName("PON_Glowna");
            entity.Property(e => e.PonIdentyfikator)
                .HasDefaultValue(0)
                .HasColumnName("PON_Identyfikator");
            entity.Property(e => e.PonKodUbezpieczenia)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_KodUbezpieczenia");
            entity.Property(e => e.PonKorekta)
                .HasDefaultValue(0)
                .HasColumnName("PON_Korekta");
            entity.Property(e => e.PonKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("PON_KursL");
            entity.Property(e => e.PonKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PON_KursM");
            entity.Property(e => e.PonKwartal)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_Kwartal");
            entity.Property(e => e.PonMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_Miesiac");
            entity.Property(e => e.PonNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_NieKsiegowac");
            entity.Property(e => e.PonNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_NrKursu");
            entity.Property(e => e.PonNrProtokolu)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_NrProtokolu");
            entity.Property(e => e.PonNumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_Numer");
            entity.Property(e => e.PonOkrPoczatek)
                .HasDefaultValue(0)
                .HasColumnName("PON_OkrPoczatek");
            entity.Property(e => e.PonOkrSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_OkrSymbol");
            entity.Property(e => e.PonOkresId)
                .HasDefaultValue(0)
                .HasColumnName("PON_OkresID");
            entity.Property(e => e.PonOpefirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPEFirma");
            entity.Property(e => e.PonOpekfirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPEKFirma");
            entity.Property(e => e.PonOpeklp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPEKLp");
            entity.Property(e => e.PonOpeknumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPEKNumer");
            entity.Property(e => e.PonOpektyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPEKTyp");
            entity.Property(e => e.PonOpelp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPELp");
            entity.Property(e => e.PonOpemfirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPEMFirma");
            entity.Property(e => e.PonOpemlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPEMLp");
            entity.Property(e => e.PonOpemnumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPEMNumer");
            entity.Property(e => e.PonOpemtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPEMTyp");
            entity.Property(e => e.PonOpenumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPENumer");
            entity.Property(e => e.PonOpetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPETyp");
            entity.Property(e => e.PonOpezfirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPEZFirma");
            entity.Property(e => e.PonOpezlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPEZLp");
            entity.Property(e => e.PonOpeznumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_OPEZNumer");
            entity.Property(e => e.PonOpeztyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_OPEZTyp");
            entity.Property(e => e.PonOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("PON_OptimaId");
            entity.Property(e => e.PonParamL1)
                .HasDefaultValue(0)
                .HasColumnName("PON_ParamL1");
            entity.Property(e => e.PonParamL2)
                .HasDefaultValue(0)
                .HasColumnName("PON_ParamL2");
            entity.Property(e => e.PonParamS1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_ParamS1");
            entity.Property(e => e.PonParamS2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_ParamS2");
            entity.Property(e => e.PonParamS3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_ParamS3");
            entity.Property(e => e.PonPozid)
                .HasDefaultValue(0)
                .HasColumnName("PON_POZId");
            entity.Property(e => e.PonPrcnumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_PRCNumer");
            entity.Property(e => e.PonRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_Rok");
            entity.Property(e => e.PonSchfirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_SCHFirma");
            entity.Property(e => e.PonSchlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_SCHLp");
            entity.Property(e => e.PonSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_SCHNumer");
            entity.Property(e => e.PonSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_SCHTyp");
            entity.Property(e => e.PonStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_Status");
            entity.Property(e => e.PonStrukturaSprzedazy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("PON_StrukturaSprzedazy");
            entity.Property(e => e.PonSzacunkowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_Szacunkowy");
            entity.Property(e => e.PonTrescUzasadnienia)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_TrescUzasadnienia");
            entity.Property(e => e.PonTstamp)
                .HasDefaultValue(0)
                .HasColumnName("PON_TStamp");
            entity.Property(e => e.PonTypPodatku)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_TypPodatku");
            entity.Property(e => e.PonUnross)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_UNROSS");
            entity.Property(e => e.PonUrl)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_URL");
            entity.Property(e => e.PonUsfirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_USFirma");
            entity.Property(e => e.PonUslp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_USLp");
            entity.Property(e => e.PonUsnumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_USNumer");
            entity.Property(e => e.PonUstyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_USTyp");
            entity.Property(e => e.PonUwagi)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_Uwagi");
            entity.Property(e => e.PonWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_Waluta");
            entity.Property(e => e.PonWersja)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_Wersja");
            entity.Property(e => e.PonWlafirma)
                .HasDefaultValue(0)
                .HasColumnName("PON_WLAFirma");
            entity.Property(e => e.PonWlalp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_WLALp");
            entity.Property(e => e.PonWlanumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_WLANumer");
            entity.Property(e => e.PonWlatyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_WLATyp");
            entity.Property(e => e.PonWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_WsDziennik");
            entity.Property(e => e.PonWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("PON_WsSCHNumer");
            entity.Property(e => e.PonWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PON_WsSCHTyp");
            entity.Property(e => e.PonWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_WsStosujDziennik");
            entity.Property(e => e.PonWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_WsStosujSchemat");
            entity.Property(e => e.PonZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_Zaksiegowano");
            entity.Property(e => e.PonZaokraglajWskaznikStr)
                .HasDefaultValue((byte)0)
                .HasColumnName("PON_ZaokraglajWskaznikStr");
            entity.Property(e => e.PonZnakNrDecyzjiPok)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PON_ZnakNrDecyzjiPok");
            entity.Property(e => e.PonZrodlo)
                .HasDefaultValue(0)
                .HasColumnName("PON_Zrodlo");
        });

        modelBuilder.Entity<PodSelem>(entity =>
        {
            entity.HasKey(e => new { e.PosGidtyp, e.PosGidnumer, e.PosGidlp, e.PosTypSkladnika }).HasName("POS_Primary");

            entity.ToTable("PodSElem", "CDN");

            entity.Property(e => e.PosGidtyp).HasColumnName("POS_GIDTyp");
            entity.Property(e => e.PosGidnumer).HasColumnName("POS_GIDNumer");
            entity.Property(e => e.PosGidlp).HasColumnName("POS_GIDLp");
            entity.Property(e => e.PosTypSkladnika).HasColumnName("POS_TypSkladnika");
            entity.Property(e => e.PosGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("POS_GIDFirma");
            entity.Property(e => e.PosKwotaL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("POS_KwotaL");
            entity.Property(e => e.PosKwotaM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("POS_KwotaM");
            entity.Property(e => e.PosOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POS_Opis");
            entity.Property(e => e.PosPozycja)
                .HasDefaultValue(0)
                .HasColumnName("POS_Pozycja");

            entity.HasOne(d => d.PodElem).WithMany(p => p.PodSelems)
                .HasForeignKey(d => new { d.PosGidtyp, d.PosGidnumer, d.PosGidlp })
                .HasConstraintName("FK_POSPrimary");
        });

        modelBuilder.Entity<PodZestawy>(entity =>
        {
            entity.HasKey(e => e.PozId).HasName("POZ_Primary");

            entity.ToTable("PodZestawy", "CDN", tb => tb.HasTrigger("PodZestawy_DeleteHandler"));

            entity.HasIndex(e => e.PozNazwa, "POZNazwa").IsUnique();

            entity.Property(e => e.PozId).HasColumnName("POZ_ID");
            entity.Property(e => e.PozDataU)
                .HasDefaultValue(0)
                .HasColumnName("POZ_DataU");
            entity.Property(e => e.PozNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POZ_Nazwa");
            entity.Property(e => e.PozOpeBnumer)
                .HasDefaultValue(0)
                .HasColumnName("POZ_OpeBNumer");
            entity.Property(e => e.PozOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("POZ_OpeMNumer");
            entity.Property(e => e.PozOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("POZ_OpeWNumer");
            entity.Property(e => e.PozStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("POZ_Status");
        });

        modelBuilder.Entity<PodmiotyView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PodmiotyView", "CDN");

            entity.Property(e => e.PodvAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PODV_Adres");
            entity.Property(e => e.PodvAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PODV_Akronim");
            entity.Property(e => e.PodvGidfirma).HasColumnName("PODV_GIDFirma");
            entity.Property(e => e.PodvGidlp).HasColumnName("PODV_GIDLp");
            entity.Property(e => e.PodvGidnumer).HasColumnName("PODV_GIDNumer");
            entity.Property(e => e.PodvGidtyp).HasColumnName("PODV_GIDTyp");
            entity.Property(e => e.PodvKntStatus).HasColumnName("PODV_KntStatus");
            entity.Property(e => e.PodvKodp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PODV_Kodp");
            entity.Property(e => e.PodvMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PODV_Miasto");
            entity.Property(e => e.PodvNazwa1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PODV_Nazwa1");
            entity.Property(e => e.PodvNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PODV_Nazwa2");
            entity.Property(e => e.PodvNazwa3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PODV_Nazwa3");
            entity.Property(e => e.PodvNipE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PODV_NipE");
            entity.Property(e => e.PodvNipPrefiks)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PODV_NipPrefiks");
            entity.Property(e => e.PodvUlica)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PODV_Ulica");
        });

        modelBuilder.Entity<PodzielnikElem>(entity =>
        {
            entity.HasKey(e => new { e.PdeGidnumer, e.PdeGidlp }).HasName("PDE_Primary");

            entity.ToTable("PodzielnikElem", "CDN");

            entity.HasIndex(e => new { e.PdeGidnumer, e.PdePrcTyp, e.PdePrcNumer }, "PDEPracownik");

            entity.Property(e => e.PdeGidnumer).HasColumnName("PDE_GIDNumer");
            entity.Property(e => e.PdeGidlp)
                .ValueGeneratedOnAdd()
                .HasColumnName("PDE_GIDLp");
            entity.Property(e => e.PdeDni)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PDE_Dni");
            entity.Property(e => e.PdeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PDE_GIDFirma");
            entity.Property(e => e.PdeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDE_GIDTyp");
            entity.Property(e => e.PdeKierunek)
                .HasDefaultValue((short)0)
                .HasColumnName("PDE_Kierunek");
            entity.Property(e => e.PdePrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("PDE_PrcFirma");
            entity.Property(e => e.PdePrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDE_PrcLp");
            entity.Property(e => e.PdePrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("PDE_PrcNumer");
            entity.Property(e => e.PdePrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDE_PrcTyp");
            entity.Property(e => e.PdeProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("PDE_Procent");
            entity.Property(e => e.PdeTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDE_Typ");
            entity.Property(e => e.PdeZatwierdzono)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDE_Zatwierdzono");

            entity.HasOne(d => d.PdeGidnumerNavigation).WithMany(p => p.PodzielnikElems)
                .HasForeignKey(d => d.PdeGidnumer)
                .HasConstraintName("FK_PDEPrimary");
        });

        modelBuilder.Entity<PodzielnikMelem>(entity =>
        {
            entity.HasKey(e => new { e.PdmPdNnumer, e.PdmFrStyp, e.PdmFrSnumer, e.PdmLp }).HasName("PDM_Primary");

            entity.ToTable("PodzielnikMElem", "CDN");

            entity.Property(e => e.PdmPdNnumer).HasColumnName("PDM_PdNNumer");
            entity.Property(e => e.PdmFrStyp).HasColumnName("PDM_FrSTyp");
            entity.Property(e => e.PdmFrSnumer).HasColumnName("PDM_FrSNumer");
            entity.Property(e => e.PdmLp).HasColumnName("PDM_Lp");
            entity.Property(e => e.PdmDataMod).HasColumnName("PDM_DataMod");
            entity.Property(e => e.PdmFrSfirma).HasColumnName("PDM_FrSFirma");
            entity.Property(e => e.PdmFrSlp).HasColumnName("PDM_FrSLp");
            entity.Property(e => e.PdmPdNfirma).HasColumnName("PDM_PdNFirma");
            entity.Property(e => e.PdmPdNlp).HasColumnName("PDM_PdNLp");
            entity.Property(e => e.PdmPdNtyp).HasColumnName("PDM_PdNTyp");
            entity.Property(e => e.PdmPrcFirma).HasColumnName("PDM_PrcFirma");
            entity.Property(e => e.PdmPrcLp).HasColumnName("PDM_PrcLp");
            entity.Property(e => e.PdmPrcNumer).HasColumnName("PDM_PrcNumer");
            entity.Property(e => e.PdmPrcTyp).HasColumnName("PDM_PrcTyp");

            entity.HasOne(d => d.PdmPdNnumerNavigation).WithMany(p => p.PodzielnikMelems)
                .HasForeignKey(d => d.PdmPdNnumer)
                .HasConstraintName("FK_PDMPrimary");
        });

        modelBuilder.Entity<PodzielnikNag>(entity =>
        {
            entity.HasKey(e => e.PdnGidnumer).HasName("PDN_Primary");

            entity.ToTable("PodzielnikNag", "CDN", tb => tb.HasTrigger("PodzielnikNag_DeleteHandler"));

            entity.Property(e => e.PdnGidnumer).HasColumnName("PDN_GIDNumer");
            entity.Property(e => e.PdnData)
                .HasDefaultValue(0)
                .HasColumnName("PDN_Data");
            entity.Property(e => e.PdnDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PDN_DataDo");
            entity.Property(e => e.PdnDniRobocze)
                .HasDefaultValue((short)0)
                .HasColumnName("PDN_DniRobocze");
            entity.Property(e => e.PdnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PDN_GIDFirma");
            entity.Property(e => e.PdnGidlp)
                .HasDefaultValue(0)
                .HasColumnName("PDN_GIDLp");
            entity.Property(e => e.PdnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDN_GIDTyp");
            entity.Property(e => e.PdnJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("dni")
                .HasColumnName("PDN_JM");
            entity.Property(e => e.PdnOpeFirmaA)
                .HasDefaultValue(0)
                .HasColumnName("PDN_OpeFirmaA");
            entity.Property(e => e.PdnOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("PDN_OpeFirmaZ");
            entity.Property(e => e.PdnOpeLpA)
                .HasDefaultValue((short)0)
                .HasColumnName("PDN_OpeLpA");
            entity.Property(e => e.PdnOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("PDN_OpeLpZ");
            entity.Property(e => e.PdnOpeNumerA)
                .HasDefaultValue(0)
                .HasColumnName("PDN_OpeNumerA");
            entity.Property(e => e.PdnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("PDN_OpeNumerZ");
            entity.Property(e => e.PdnOpeTypA)
                .HasDefaultValue((short)0)
                .HasColumnName("PDN_OpeTypA");
            entity.Property(e => e.PdnOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("PDN_OpeTypZ");
            entity.Property(e => e.PdnOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDN_Opis");
            entity.Property(e => e.PdnTstampAkt)
                .HasDefaultValue(0)
                .HasColumnName("PDN_TStampAkt");
            entity.Property(e => e.PdnTstampZ)
                .HasDefaultValue(0)
                .HasColumnName("PDN_TSTampZ");
            entity.Property(e => e.PdnUdostepniaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDN_Udostepniaj");
            entity.Property(e => e.PdnZatwierdzono)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDN_Zatwierdzono");
        });

        modelBuilder.Entity<PodzielnikPrac>(entity =>
        {
            entity.HasKey(e => new { e.PdpPdnNumer, e.PdpPrcTyp, e.PdpPrcNumer }).HasName("PDP_Primary");

            entity.ToTable("PodzielnikPrac", "CDN");

            entity.HasIndex(e => new { e.PdpPrcTyp, e.PdpPrcNumer }, "PdpPracownik");

            entity.Property(e => e.PdpPdnNumer).HasColumnName("PDP_PdnNumer");
            entity.Property(e => e.PdpPrcTyp).HasColumnName("PDP_PrcTyp");
            entity.Property(e => e.PdpPrcNumer).HasColumnName("PDP_PrcNumer");
            entity.Property(e => e.PdpIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PDP_Ilosc");
            entity.Property(e => e.PdpLicznik)
                .HasDefaultValue(0)
                .HasColumnName("PDP_Licznik");
            entity.Property(e => e.PdpPdnFirma)
                .HasDefaultValue(0)
                .HasColumnName("PDP_PdnFirma");
            entity.Property(e => e.PdpPdnLp)
                .HasDefaultValue(0)
                .HasColumnName("PDP_PdnLp");
            entity.Property(e => e.PdpPdnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDP_PdnTyp");
            entity.Property(e => e.PdpPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("PDP_PrcFirma");
            entity.Property(e => e.PdpPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDP_PrcLp");

            entity.HasOne(d => d.PdpPdnNumerNavigation).WithMany(p => p.PodzielnikPracs)
                .HasForeignKey(d => d.PdpPdnNumer)
                .HasConstraintName("FK_PdpPrimaryNoType");

            entity.HasOne(d => d.PdpPrcNumerNavigation).WithMany(p => p.PodzielnikPracs)
                .HasForeignKey(d => d.PdpPrcNumer)
                .HasConstraintName("FK_PdpPracownik");
        });

        modelBuilder.Entity<PodzielnikSelem>(entity =>
        {
            entity.HasKey(e => new { e.PdsGidnumer, e.PdsGidlp, e.PdsWmrid, e.PdsTypWymiaru }).HasName("PDS_Primary");

            entity.ToTable("PodzielnikSElem", "CDN");

            entity.Property(e => e.PdsGidnumer).HasColumnName("PDS_GIDNumer");
            entity.Property(e => e.PdsGidlp).HasColumnName("PDS_GIDLp");
            entity.Property(e => e.PdsWmrid).HasColumnName("PDS_WMRID");
            entity.Property(e => e.PdsTypWymiaru).HasColumnName("PDS_TypWymiaru");
            entity.Property(e => e.PdsElement)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDS_Element");
            entity.Property(e => e.PdsGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PDS_GIDFirma");
            entity.Property(e => e.PdsGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDS_GIDTyp");

            entity.HasOne(d => d.PodzielnikElem).WithMany(p => p.PodzielnikSelems)
                .HasForeignKey(d => new { d.PdsGidnumer, d.PdsGidlp })
                .HasConstraintName("FK_PDSPrimary");
        });

        modelBuilder.Entity<PodzielnikZelem>(entity =>
        {
            entity.HasKey(e => new { e.PdzPdNnumer, e.PdzFrStyp, e.PdzFrSnumer, e.PdzLp }).HasName("PDZ_Primary");

            entity.ToTable("PodzielnikZElem", "CDN");

            entity.Property(e => e.PdzPdNnumer).HasColumnName("PDZ_PdNNumer");
            entity.Property(e => e.PdzFrStyp).HasColumnName("PDZ_FrSTyp");
            entity.Property(e => e.PdzFrSnumer).HasColumnName("PDZ_FrSNumer");
            entity.Property(e => e.PdzLp).HasColumnName("PDZ_Lp");
            entity.Property(e => e.PdzFrSfirma).HasColumnName("PDZ_FrSFirma");
            entity.Property(e => e.PdzFrSlp).HasColumnName("PDZ_FrSLp");
            entity.Property(e => e.PdzPdNfirma).HasColumnName("PDZ_PdNFirma");
            entity.Property(e => e.PdzPdNlp).HasColumnName("PDZ_PdNLp");
            entity.Property(e => e.PdzPdNtyp).HasColumnName("PDZ_PdNTyp");
            entity.Property(e => e.PdzPrcFirma).HasColumnName("PDZ_PrcFirma");
            entity.Property(e => e.PdzPrcLp).HasColumnName("PDZ_PrcLp");
            entity.Property(e => e.PdzPrcNumer).HasColumnName("PDZ_PrcNumer");
            entity.Property(e => e.PdzPrcTyp).HasColumnName("PDZ_PrcTyp");
            entity.Property(e => e.PdzTsdata).HasColumnName("PDZ_TSData");

            entity.HasOne(d => d.PdzPdNnumerNavigation).WithMany(p => p.PodzielnikZelems)
                .HasForeignKey(d => d.PdzPdNnumer)
                .HasConstraintName("FK_PDZPrimary");
        });

        modelBuilder.Entity<PoleceniaGlowne>(entity =>
        {
            entity.HasKey(e => e.PglId).HasName("PGL_Primary");

            entity.ToTable("PoleceniaGlowne", "CDN");

            entity.HasIndex(e => e.PglSkrot, "PGLSkrot").IsUnique();

            entity.HasIndex(e => e.PglTresc, "PGLTresc").IsUnique();

            entity.Property(e => e.PglId).HasColumnName("PGL_Id");
            entity.Property(e => e.PglNazwaGr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PGL_NazwaGr");
            entity.Property(e => e.PglOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PGL_Opis");
            entity.Property(e => e.PglPredefiniowaneId)
                .HasDefaultValue(0)
                .HasColumnName("PGL_PredefiniowaneID");
            entity.Property(e => e.PglRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PGL_Rodzaj");
            entity.Property(e => e.PglSkrot)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PGL_Skrot");
            entity.Property(e => e.PglTresc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PGL_Tresc");
        });

        modelBuilder.Entity<PoleceniaOdpowiedzi>(entity =>
        {
            entity.HasKey(e => e.PodId).HasName("POD_Primary");

            entity.ToTable("PoleceniaOdpowiedzi", "CDN");

            entity.Property(e => e.PodId).HasColumnName("POD_Id");
            entity.Property(e => e.PodTresc)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POD_Tresc");
        });

        modelBuilder.Entity<PoleceniaTozsame>(entity =>
        {
            entity.HasKey(e => e.PotId).HasName("POT_Primary");

            entity.ToTable("PoleceniaTozsame", "CDN");

            entity.HasIndex(e => e.PotPglid, "POTPoleceniaGlowne");

            entity.HasIndex(e => e.PotTresc, "POTTresc").IsUnique();

            entity.Property(e => e.PotId).HasColumnName("POT_Id");
            entity.Property(e => e.PotPglid)
                .HasDefaultValue(0)
                .HasColumnName("POT_PGLId");
            entity.Property(e => e.PotTresc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POT_Tresc");

            entity.HasOne(d => d.PotPgl).WithMany(p => p.PoleceniaTozsames)
                .HasForeignKey(d => d.PotPglid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_POTPoleceniaGlowne");
        });

        modelBuilder.Entity<PomKsifunkcjeSql>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("POM_KSIFunkcjeSQL", "CDN");

            entity.Property(e => e.KfsCzdorgid).HasColumnName("KFS_CZDORGID");
            entity.Property(e => e.KfsCzmorgid).HasColumnName("KFS_CZMORGID");
            entity.Property(e => e.KfsDefinicja)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasColumnName("KFS_DEFINICJA");
            entity.Property(e => e.KfsWartosc)
                .HasColumnType("decimal(20, 10)")
                .HasColumnName("KFS_WARTOSC");
            entity.Property(e => e.KfsZnak).HasColumnName("KFS_ZNAK");
            entity.Property(e => e.KfsZstorgid)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("KFS_ZSTORGID");
        });

        modelBuilder.Entity<PosrozbieznosciMmp>(entity =>
        {
            entity.HasKey(e => e.PrbId).HasName("PRb_Primary");

            entity.ToTable("POSRozbieznosciMMP", "CDN");

            entity.HasIndex(e => new { e.PrbDokNumer, e.PrbDokTyp }, "PRbDok");

            entity.HasIndex(e => e.PrbTpaId, "PRbTpa");

            entity.HasIndex(e => e.PrbTwrNumer, "PRbTwr");

            entity.Property(e => e.PrbId).HasColumnName("PRb_Id");
            entity.Property(e => e.PrbDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("PRb_DokFirma");
            entity.Property(e => e.PrbDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRb_DokLp");
            entity.Property(e => e.PrbDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRb_DokNumer");
            entity.Property(e => e.PrbDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRb_DokTyp");
            entity.Property(e => e.PrbIloscPrzyjeta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PRb_IloscPrzyjeta");
            entity.Property(e => e.PrbIloscWydana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PRb_IloscWydana");
            entity.Property(e => e.PrbJmzPrzyjeta)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRb_JmzPrzyjeta");
            entity.Property(e => e.PrbJmzWydana)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRb_JmzWydana");
            entity.Property(e => e.PrbTpaId)
                .HasDefaultValue(0)
                .HasColumnName("PRb_TpaId");
            entity.Property(e => e.PrbTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRb_TwrNumer");

            entity.HasOne(d => d.PrbDokNumerNavigation).WithMany(p => p.PosrozbieznosciMmps)
                .HasForeignKey(d => d.PrbDokNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRbDok");

            entity.HasOne(d => d.PrbTpa).WithMany(p => p.PosrozbieznosciMmps)
                .HasForeignKey(d => d.PrbTpaId)
                .HasConstraintName("FK_PRbTpa");

            entity.HasOne(d => d.PrbTwrNumerNavigation).WithMany(p => p.PosrozbieznosciMmps)
                .HasForeignKey(d => d.PrbTwrNumer)
                .HasConstraintName("FK_PRbTwr");
        });

        modelBuilder.Entity<Prawa>(entity =>
        {
            entity.HasKey(e => e.PraId).HasName("Pra_Primary");

            entity.ToTable("Prawa", "CDN");

            entity.HasIndex(e => new { e.PraRodzaj, e.PraNazwa }, "PraNazwa").IsUnique();

            entity.Property(e => e.PraId).HasColumnName("Pra_Id");
            entity.Property(e => e.PraNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Pra_Nazwa");
            entity.Property(e => e.PraOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Pra_Opis");
            entity.Property(e => e.PraRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("Pra_Rodzaj");
        });

        modelBuilder.Entity<PrcAdresyEmail>(entity =>
        {
            entity.HasKey(e => e.PraeId).HasName("PRAE_Primary");

            entity.ToTable("PrcAdresyEmail", "CDN", tb => tb.HasTrigger("PrcAdresyEmail_HistoriaZmian"));

            entity.HasIndex(e => e.PraePrcNumer, "PRAEPrcNumer");

            entity.Property(e => e.PraeId).HasColumnName("PRAE_Id");
            entity.Property(e => e.PraeAdresEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRAE_AdresEmail");
            entity.Property(e => e.PraeCzyLoginBi)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRAE_CzyLoginBI");
            entity.Property(e => e.PraeDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRAE_Domyslny");
            entity.Property(e => e.PraePrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRAE_PrcNumer");

            entity.HasOne(d => d.PraePrcNumerNavigation).WithMany(p => p.PrcAdresyEmails)
                .HasForeignKey(d => d.PraePrcNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRAEPrcNumer");
        });

        modelBuilder.Entity<PrcHist>(entity =>
        {
            entity.HasKey(e => e.PhiId).HasName("PHi_Primary");

            entity.ToTable("PrcHist", "CDN", tb =>
                {
                    tb.HasTrigger("PrcHist_InsertUpdateHandler");
                    tb.HasTrigger("PrcHist_UaktualnijDaty");
                });

            entity.HasIndex(e => e.PhiPrcNumer, "PHiPracownik");

            entity.Property(e => e.PhiId).HasColumnName("PHi_Id");
            entity.Property(e => e.PhiDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PHi_DataDo");
            entity.Property(e => e.PhiDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PHi_DataOd");
            entity.Property(e => e.PhiKartaPos)
                .HasDefaultValue((byte)0)
                .HasColumnName("PHi_KartaPOS");
            entity.Property(e => e.PhiNumerKarty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PHi_NumerKarty");
            entity.Property(e => e.PhiPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("PHi_PrcNumer");
        });

        modelBuilder.Entity<PrcKarty>(entity =>
        {
            entity.HasKey(e => e.PrcGidnumer).HasName("Prc_Primary");

            entity.ToTable("PrcKarty", "CDN", tb =>
                {
                    tb.HasTrigger("PrcKartyAlias1_DeleteHandler");
                    tb.HasTrigger("PrcKartyAlias_DeleteHandler");
                    tb.HasTrigger("PrcKarty_DeleteAtrybutyHist");
                    tb.HasTrigger("PrcKarty_DeleteHandler");
                    tb.HasTrigger("PrcKarty_HistoriaZmian");
                    tb.HasTrigger("PrcKarty_InsertUpdateHandler");
                    tb.HasTrigger("PrcKarty_SprawdzSynchronizacje");
                    tb.HasTrigger("PrcKarty_UaktualnijPikElem");
                    tb.HasTrigger("PrcKarty_UaktualnijStruktureFirmy");
                });

            entity.HasIndex(e => e.PrcAkronim, "PrcAkronim").IsUnique();

            entity.HasIndex(e => e.PrcBnkNumer, "PrcBank");

            entity.HasIndex(e => e.PrcFrSid, "PrcFirma");

            entity.HasIndex(e => new { e.PrcGidtyp, e.PrcNazwisko, e.PrcImie1, e.PrcGidnumer }, "PrcNazwisko").IsUnique();

            entity.Property(e => e.PrcGidnumer).HasColumnName("Prc_GIDNumer");
            entity.Property(e => e.PrcAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Akronim");
            entity.Property(e => e.PrcArchiwalny)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_Archiwalny");
            entity.Property(e => e.PrcArchiwalnyData)
                .HasDefaultValue(0)
                .HasColumnName("Prc_ArchiwalnyData");
            entity.Property(e => e.PrcBnkFirma)
                .HasDefaultValue(0)
                .HasColumnName("Prc_BnkFirma");
            entity.Property(e => e.PrcBnkLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_BnkLp");
            entity.Property(e => e.PrcBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("Prc_BnkNumer");
            entity.Property(e => e.PrcBnkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_BnkTyp");
            entity.Property(e => e.PrcCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Prc_CzasModyfikacji");
            entity.Property(e => e.PrcCzasWprowadzenia)
                .HasDefaultValue(0)
                .HasColumnName("Prc_CzasWprowadzenia");
            entity.Property(e => e.PrcDomyslneCentrumKosztId)
                .HasDefaultValue(0)
                .HasColumnName("Prc_DomyslneCentrumKosztId");
            entity.Property(e => e.PrcEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_EMail");
            entity.Property(e => e.PrcEmail2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_EMail2");
            entity.Property(e => e.PrcEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_ESklep");
            entity.Property(e => e.PrcFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_FormaNr");
            entity.Property(e => e.PrcFrSid)
                .HasDefaultValue(0)
                .HasColumnName("Prc_FrSId");
            entity.Property(e => e.PrcGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Prc_GIDFirma");
            entity.Property(e => e.PrcGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_GIDLp");
            entity.Property(e => e.PrcGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_GIDTyp");
            entity.Property(e => e.PrcHaslo)
                .HasMaxLength(16)
                .HasColumnName("Prc_Haslo");
            entity.Property(e => e.PrcImie1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Imie1");
            entity.Property(e => e.PrcImie2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Imie2");
            entity.Property(e => e.PrcInbox)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Inbox");
            entity.Property(e => e.PrcKarany)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_Karany");
            entity.Property(e => e.PrcKaranyOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_KaranyOpis");
            entity.Property(e => e.PrcKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_KodP");
            entity.Property(e => e.PrcKontoKs1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_KontoKs1");
            entity.Property(e => e.PrcKontoKs2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_KontoKs2");
            entity.Property(e => e.PrcKontoKs3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_KontoKs3");
            entity.Property(e => e.PrcKontoKs4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_KontoKs4");
            entity.Property(e => e.PrcKontoKs5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_KontoKs5");
            entity.Property(e => e.PrcKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Kraj");
            entity.Property(e => e.PrcKsiegowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_Ksiegowany");
            entity.Property(e => e.PrcMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Miasto");
            entity.Property(e => e.PrcMiejscePracy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_MiejscePracy");
            entity.Property(e => e.PrcNazwisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Nazwisko");
            entity.Property(e => e.PrcNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Nip");
            entity.Property(e => e.PrcNipE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_NipE");
            entity.Property(e => e.PrcNrDomu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_NrDomu");
            entity.Property(e => e.PrcNrLokalu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_NrLokalu");
            entity.Property(e => e.PrcNrPokoju)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_NrPokoju");
            entity.Property(e => e.PrcNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_NrRachunku");
            entity.Property(e => e.PrcNrb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_NRB");
            entity.Property(e => e.PrcNtkonto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_NTKonto");
            entity.Property(e => e.PrcNtsid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_NTSid");
            entity.Property(e => e.PrcOmnie)
                .HasMaxLength(501)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Omnie");
            entity.Property(e => e.PrcOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("Prc_OpeFirma");
            entity.Property(e => e.PrcOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_OpeLp");
            entity.Property(e => e.PrcOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("Prc_OpeMNumer");
            entity.Property(e => e.PrcOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("Prc_OpeNumer");
            entity.Property(e => e.PrcOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_OpeTyp");
            entity.Property(e => e.PrcOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("Prc_OpeWNumer");
            entity.Property(e => e.PrcOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Opis");
            entity.Property(e => e.PrcOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("Prc_OptimaId");
            entity.Property(e => e.PrcPesel)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Pesel");
            entity.Property(e => e.PrcPkaid)
                .HasDefaultValue(0)
                .HasColumnName("Prc_PKAId");
            entity.Property(e => e.PrcPoczta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Poczta");
            entity.Property(e => e.PrcPoziomWyksztalcenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_PoziomWyksztalcenia");
            entity.Property(e => e.PrcRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("Prc_Rodzaj");
            entity.Property(e => e.PrcSerwisant)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_Serwisant");
            entity.Property(e => e.PrcTelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Telefon1");
            entity.Property(e => e.PrcTelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Telefon2");
            entity.Property(e => e.PrcTelefon3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Telefon3");
            entity.Property(e => e.PrcTelefon4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Telefon4");
            entity.Property(e => e.PrcTelefonWew1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_TelefonWew1");
            entity.Property(e => e.PrcTypWymiaru)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_TypWymiaru");
            entity.Property(e => e.PrcUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_Ulica");
            entity.Property(e => e.PrcUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_URL");
            entity.Property(e => e.PrcUrl2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_URL2");
            entity.Property(e => e.PrcWmrId)
                .HasDefaultValue(0)
                .HasColumnName("Prc_WmrID");
            entity.Property(e => e.PrcWojNumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WojNumer");
            entity.Property(e => e.PrcWojPrzydzial)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WojPrzydzial");
            entity.Property(e => e.PrcWojSpec)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WojSpec");
            entity.Property(e => e.PrcWojStopien)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WojStopien");
            entity.Property(e => e.PrcWojStosunek)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_WojStosunek");
            entity.Property(e => e.PrcWojWku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WojWKU");
            entity.Property(e => e.PrcWypadekAdres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WypadekAdres");
            entity.Property(e => e.PrcWypadekOsoba)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WypadekOsoba");
            entity.Property(e => e.PrcWypadekTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Prc_WypadekTelefon");
            entity.Property(e => e.PrcWyrazenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_Wyrazenie");
            entity.Property(e => e.PrcZakFirma)
                .HasDefaultValue(0)
                .HasColumnName("Prc_ZakFirma");
            entity.Property(e => e.PrcZakLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_ZakLp");
            entity.Property(e => e.PrcZakNumer)
                .HasDefaultValue(0)
                .HasColumnName("Prc_ZakNumer");
            entity.Property(e => e.PrcZakTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Prc_ZakTyp");
            entity.Property(e => e.PrcZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("Prc_ZewnetrznySys");
            entity.Property(e => e.PrcZgodaNaPrzetwarzanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Prc_ZgodaNaPrzetwarzanie");
        });

        modelBuilder.Entity<PrcRole>(entity =>
        {
            entity.HasKey(e => e.PrRId).HasName("PrR_Primary");

            entity.ToTable("PrcRole", "CDN", tb =>
                {
                    tb.HasTrigger("PrcRole_DodajAktualizujRole");
                    tb.HasTrigger("PrcRole_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PrRPrcNumer, e.PrRPrcLp, e.PrRPrcTyp, e.PrRFrSid, e.PrRRolId, e.PrRDataOd, e.PrRDataDo }, "PrRPrcRola").IsUnique();

            entity.Property(e => e.PrRId).HasColumnName("PrR_Id");
            entity.Property(e => e.PrRDataDo).HasColumnName("PrR_DataDo");
            entity.Property(e => e.PrRDataOd).HasColumnName("PrR_DataOd");
            entity.Property(e => e.PrRFrSid).HasColumnName("PrR_FrSId");
            entity.Property(e => e.PrROptimaId)
                .HasDefaultValue(0)
                .HasColumnName("PrR_OptimaID");
            entity.Property(e => e.PrRPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("PrR_PrcFirma");
            entity.Property(e => e.PrRPrcLp).HasColumnName("PrR_PrcLp");
            entity.Property(e => e.PrRPrcNumer).HasColumnName("PrR_PrcNumer");
            entity.Property(e => e.PrRPrcTyp).HasColumnName("PrR_PrcTyp");
            entity.Property(e => e.PrRRolId).HasColumnName("PrR_RolId");
        });

        modelBuilder.Entity<PrcWarunki>(entity =>
        {
            entity.HasKey(e => new { e.PrwGidnumer, e.PrwGidlp }).HasName("PRW_Primary");

            entity.ToTable("PrcWarunki", "CDN");

            entity.Property(e => e.PrwGidnumer).HasColumnName("PRW_GIDNumer");
            entity.Property(e => e.PrwGidlp).HasColumnName("PRW_GIDLp");
            entity.Property(e => e.PrwGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRW_GIDFirma");
            entity.Property(e => e.PrwGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRW_GIDTyp");
            entity.Property(e => e.PrwTyp)
                .HasDefaultValue((byte)1)
                .HasColumnName("PRW_Typ");
            entity.Property(e => e.PrwTypWymiaru)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRW_TypWymiaru");
            entity.Property(e => e.PrwWmrId)
                .HasDefaultValue(0)
                .HasColumnName("PRW_WmrID");

            entity.HasOne(d => d.PrwGidnumerNavigation).WithMany(p => p.PrcWarunkis)
                .HasForeignKey(d => d.PrwGidnumer)
                .HasConstraintName("FK_PRWPrimaryNoType");
        });

        modelBuilder.Entity<Predekrety>(entity =>
        {
            entity.HasKey(e => new { e.PdtGidtyp, e.PdtGidnumer, e.PdtGidlp }).HasName("PDT_Primary");

            entity.ToTable("Predekrety", "CDN", tb => tb.HasTrigger("Predekrety_InsertUpdateHandler"));

            entity.Property(e => e.PdtGidtyp).HasColumnName("PDT_GIDTyp");
            entity.Property(e => e.PdtGidnumer).HasColumnName("PDT_GIDNumer");
            entity.Property(e => e.PdtGidlp).HasColumnName("PDT_GIDLp");
            entity.Property(e => e.PdtDataOper)
                .HasDefaultValue(0)
                .HasColumnName("PDT_DataOper");
            entity.Property(e => e.PdtDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("PDT_DataWyst");
            entity.Property(e => e.PdtDellp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDT_DELLp");
            entity.Property(e => e.PdtDelnumer)
                .HasDefaultValue(0)
                .HasColumnName("PDT_DELNumer");
            entity.Property(e => e.PdtGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PDT_GIDFirma");
            entity.Property(e => e.PdtKontoCredit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoCredit");
            entity.Property(e => e.PdtKontoCreditDef)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoCreditDef");
            entity.Property(e => e.PdtKontoCreditR)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoCreditR");
            entity.Property(e => e.PdtKontoCtnazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoCTNazwa");
            entity.Property(e => e.PdtKontoDebet)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoDebet");
            entity.Property(e => e.PdtKontoDebetDef)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoDebetDef");
            entity.Property(e => e.PdtKontoDebetR)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoDebetR");
            entity.Property(e => e.PdtKontoDtnazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_KontoDTNazwa");
            entity.Property(e => e.PdtKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("PDT_KursL");
            entity.Property(e => e.PdtKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PDT_KursM");
            entity.Property(e => e.PdtKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("PDT_Kwota");
            entity.Property(e => e.PdtKwotaWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("PDT_KwotaWal");
            entity.Property(e => e.PdtOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_Opis");
            entity.Property(e => e.PdtPdmNumerCt)
                .HasDefaultValue(0)
                .HasColumnName("PDT_PdmNumerCT");
            entity.Property(e => e.PdtPdmNumerDt)
                .HasDefaultValue(0)
                .HasColumnName("PDT_PdmNumerDT");
            entity.Property(e => e.PdtPdmTypCt)
                .HasDefaultValue((short)0)
                .HasColumnName("PDT_PdmTypCT");
            entity.Property(e => e.PdtPdmTypDt)
                .HasDefaultValue((short)0)
                .HasColumnName("PDT_PdmTypDT");
            entity.Property(e => e.PdtSymbolKontaCredit)
                .HasDefaultValue(0)
                .HasColumnName("PDT_SymbolKontaCredit");
            entity.Property(e => e.PdtSymbolKontaDebet)
                .HasDefaultValue(0)
                .HasColumnName("PDT_SymbolKontaDebet");
            entity.Property(e => e.PdtTypKwoty)
                .HasDefaultValue((short)0)
                .HasColumnName("PDT_TypKwoty");
            entity.Property(e => e.PdtWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_Waluta");
            entity.Property(e => e.PdtWarunek)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_Warunek");
            entity.Property(e => e.PdtWycenaParId)
                .HasDefaultValue(0)
                .HasColumnName("PDT_WycenaParID");
            entity.Property(e => e.PdtWykonuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDT_Wykonuj");
            entity.Property(e => e.PdtWyrazenie)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDT_Wyrazenie");
            entity.Property(e => e.PdtZalozKontoCredit)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDT_ZalozKontoCredit");
            entity.Property(e => e.PdtZalozKontoDebet)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDT_ZalozKontoDebet");
            entity.Property(e => e.PdtZrofirma)
                .HasDefaultValue(0)
                .HasColumnName("PDT_ZROFirma");
            entity.Property(e => e.PdtZrolp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDT_ZROLp");
            entity.Property(e => e.PdtZronumer)
                .HasDefaultValue(0)
                .HasColumnName("PDT_ZRONumer");
            entity.Property(e => e.PdtZrotyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PDT_ZROTyp");
        });

        modelBuilder.Entity<Preliminarz>(entity =>
        {
            entity.HasKey(e => e.PrlGidnumer).HasName("PRL_Primary");

            entity.ToTable("Preliminarz", "CDN", tb =>
                {
                    tb.HasTrigger("Preliminarz_DeleteHandler");
                    tb.HasTrigger("Preliminarz_PicoUsuniete");
                    tb.HasTrigger("Preliminarz_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.PrlGidtyp, e.PrlRok, e.PrlSeria, e.PrlNumer }, "PRLNumer").IsUnique();

            entity.Property(e => e.PrlGidnumer).HasColumnName("PRL_GIDNumer");
            entity.Property(e => e.PrlAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PRL_Aktywny");
            entity.Property(e => e.PrlDataWplywu)
                .HasDefaultValue(0)
                .HasColumnName("PRL_DataWplywu");
            entity.Property(e => e.PrlDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("PRL_DataWyst");
            entity.Property(e => e.PrlDokumentObcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRL_DokumentObcy");
            entity.Property(e => e.PrlGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRL_GIDFirma");
            entity.Property(e => e.PrlGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_GIDLp");
            entity.Property(e => e.PrlGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_GIDTyp");
            entity.Property(e => e.PrlKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_KnANumer");
            entity.Property(e => e.PrlKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_KnATyp");
            entity.Property(e => e.PrlKndfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRL_KNDFirma");
            entity.Property(e => e.PrlKndlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_KNDLp");
            entity.Property(e => e.PrlKndnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_KNDNumer");
            entity.Property(e => e.PrlKndtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_KNDTyp");
            entity.Property(e => e.PrlKnpnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_KNPNumer");
            entity.Property(e => e.PrlKnptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_KNPTyp");
            entity.Property(e => e.PrlKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRL_KNTFirma");
            entity.Property(e => e.PrlKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_KNTLp");
            entity.Property(e => e.PrlKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_KNTNumer");
            entity.Property(e => e.PrlKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_KNTTyp");
            entity.Property(e => e.PrlKpanumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_KPANumer");
            entity.Property(e => e.PrlNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_Numer");
            entity.Property(e => e.PrlOpeMfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRL_OpeMFirma");
            entity.Property(e => e.PrlOpeMlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_OpeMLp");
            entity.Property(e => e.PrlOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_OpeMNumer");
            entity.Property(e => e.PrlOpeMtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_OpeMTyp");
            entity.Property(e => e.PrlOpeWfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRL_OpeWFirma");
            entity.Property(e => e.PrlOpeWlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_OpeWLp");
            entity.Property(e => e.PrlOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRL_OpeWNumer");
            entity.Property(e => e.PrlOpeWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_OpeWTyp");
            entity.Property(e => e.PrlRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PRL_Rok");
            entity.Property(e => e.PrlSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRL_Seria");
            entity.Property(e => e.PrlZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("PRL_ZewnetrznyID");
            entity.Property(e => e.PrlZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("PRL_ZewnetrznySys");
        });

        modelBuilder.Entity<PreliminarzView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PreliminarzView", "CDN");

            entity.Property(e => e.PrlvAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRLV_Akronim");
            entity.Property(e => e.PrlvAktywny).HasColumnName("PRLV_Aktywny");
            entity.Property(e => e.PrlvBufor).HasColumnName("PRLV_Bufor");
            entity.Property(e => e.PrlvCdcmsgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRLV_CDCMsgId");
            entity.Property(e => e.PrlvCdcstatusKod)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("PRLV_CDCStatusKod");
            entity.Property(e => e.PrlvCdcstatusOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PRLV_CDCStatusOpis");
            entity.Property(e => e.PrlvCdcstatusTimeStamp).HasColumnName("PRLV_CDCStatusTimeStamp");
            entity.Property(e => e.PrlvData).HasColumnName("PRLV_Data");
            entity.Property(e => e.PrlvDataKsiegowania).HasColumnName("PRLV_DataKsiegowania");
            entity.Property(e => e.PrlvDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRLV_Dokument");
            entity.Property(e => e.PrlvDokumentObcy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRLV_DokumentObcy");
            entity.Property(e => e.PrlvFiskalny).HasColumnName("PRLV_Fiskalny");
            entity.Property(e => e.PrlvGidfirma).HasColumnName("PRLV_GIDFirma");
            entity.Property(e => e.PrlvGidlp).HasColumnName("PRLV_GIDLp");
            entity.Property(e => e.PrlvGidnumer).HasColumnName("PRLV_GIDNumer");
            entity.Property(e => e.PrlvGidtyp).HasColumnName("PRLV_GIDTyp");
            entity.Property(e => e.PrlvKnpNumer).HasColumnName("PRLV_KnpNumer");
            entity.Property(e => e.PrlvKnpTyp).HasColumnName("PRLV_KnpTyp");
            entity.Property(e => e.PrlvKntNumer).HasColumnName("PRLV_KntNumer");
            entity.Property(e => e.PrlvKntStatus).HasColumnName("PRLV_KntStatus");
            entity.Property(e => e.PrlvKntTyp).HasColumnName("PRLV_KntTyp");
            entity.Property(e => e.PrlvKonTyp).HasColumnName("PRLV_KonTyp");
            entity.Property(e => e.PrlvKontoPrzec)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PRLV_KontoPrzec");
            entity.Property(e => e.PrlvKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLV_Kwota");
            entity.Property(e => e.PrlvKwotaPln)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLV_KwotaPLN");
            entity.Property(e => e.PrlvLp).HasColumnName("PRLV_Lp");
            entity.Property(e => e.PrlvMaksymalnyTermin).HasColumnName("PRLV_MaksymalnyTermin");
            entity.Property(e => e.PrlvMiasto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PRLV_Miasto");
            entity.Property(e => e.PrlvMpp).HasColumnName("PRLV_MPP");
            entity.Property(e => e.PrlvNaleznosciZobowiazania).HasColumnName("PRLV_NaleznosciZobowiazania");
            entity.Property(e => e.PrlvNazwa1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRLV_Nazwa1");
            entity.Property(e => e.PrlvNazwa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRLV_Nazwa2");
            entity.Property(e => e.PrlvNazwa3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PRLV_Nazwa3");
            entity.Property(e => e.PrlvNieKsiegowac).HasColumnName("PRLV_NieKsiegowac");
            entity.Property(e => e.PrlvNumer).HasColumnName("PRLV_Numer");
            entity.Property(e => e.PrlvPozostaje)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLV_Pozostaje");
            entity.Property(e => e.PrlvPozostajePln)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLV_PozostajePLN");
            entity.Property(e => e.PrlvPozostajePlndzisiaj)
                .HasColumnType("decimal(37, 18)")
                .HasColumnName("PRLV_PozostajePLNDzisiaj");
            entity.Property(e => e.PrlvProlongowanyDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRLV_ProlongowanyDokument");
            entity.Property(e => e.PrlvProlongowanyDokumentObcy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRLV_ProlongowanyDokumentObcy");
            entity.Property(e => e.PrlvPrzychodyRozchody).HasColumnName("PRLV_PrzychodyRozchody");
            entity.Property(e => e.PrlvRejestr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PRLV_Rejestr");
            entity.Property(e => e.PrlvRozliczony).HasColumnName("PRLV_Rozliczony");
            entity.Property(e => e.PrlvSpiFirma).HasColumnName("PRLV_SpiFirma");
            entity.Property(e => e.PrlvSpiLp).HasColumnName("PRLV_SpiLp");
            entity.Property(e => e.PrlvSpiNumer).HasColumnName("PRLV_SpiNumer");
            entity.Property(e => e.PrlvSpiTyp).HasColumnName("PRLV_SpiTyp");
            entity.Property(e => e.PrlvSpkwotaVat)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLV_SPKwotaVAT");
            entity.Property(e => e.PrlvSplitPayment).HasColumnName("PRLV_SplitPayment");
            entity.Property(e => e.PrlvSpodziewanyTermin).HasColumnName("PRLV_SpodziewanyTermin");
            entity.Property(e => e.PrlvStan).HasColumnName("PRLV_Stan");
            entity.Property(e => e.PrlvStatus).HasColumnName("PRLV_Status");
            entity.Property(e => e.PrlvTStatus).HasColumnName("PRLV_tStatus");
            entity.Property(e => e.PrlvTermin).HasColumnName("PRLV_Termin");
            entity.Property(e => e.PrlvTerminPoProlongacie).HasColumnName("PRLV_TerminPoProlongacie");
            entity.Property(e => e.PrlvTypRejestru).HasColumnName("PRLV_TypRejestru");
            entity.Property(e => e.PrlvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PRLV_Waluta");
            entity.Property(e => e.PrlvWynagrodzenie).HasColumnName("PRLV_Wynagrodzenie");
            entity.Property(e => e.PrlvZaksiegowano).HasColumnName("PRLV_Zaksiegowano");
        });

        modelBuilder.Entity<PreliminarzViewDokumenty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PreliminarzView_Dokumenty", "CDN");

            entity.Property(e => e.Numdgidtyp).HasColumnName("NUMDGIDTYP");
            entity.Property(e => e.Numdmiesiac).HasColumnName("NUMDMIESIAC");
            entity.Property(e => e.Numdnumer).HasColumnName("NUMDNUMER");
            entity.Property(e => e.Numdokrsymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NUMDOKRSYMBOL");
            entity.Property(e => e.Numdrok).HasColumnName("NUMDROK");
            entity.Property(e => e.Numdseria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMDSERIA");
            entity.Property(e => e.Numdspityp).HasColumnName("NUMDSPITYP");
            entity.Property(e => e.Numdtrntyp).HasColumnName("NUMDTRNTYP");
            entity.Property(e => e.PrlvdAktywny).HasColumnName("PRLVD_AKTYWNY");
            entity.Property(e => e.PrlvdBufor).HasColumnName("PRLVD_BUFOR");
            entity.Property(e => e.PrlvdData).HasColumnName("PRLVD_DATA");
            entity.Property(e => e.PrlvdDataksiegowania).HasColumnName("PRLVD_DATAKSIEGOWANIA");
            entity.Property(e => e.PrlvdDatasprzzak).HasColumnName("PRLVD_DATASPRZZAK");
            entity.Property(e => e.PrlvdDokumentobcy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRLVD_DOKUMENTOBCY");
            entity.Property(e => e.PrlvdFiskalny).HasColumnName("PRLVD_FISKALNY");
            entity.Property(e => e.PrlvdGidlp).HasColumnName("PRLVD_GIDLP");
            entity.Property(e => e.PrlvdGidnumer).HasColumnName("PRLVD_GIDNUMER");
            entity.Property(e => e.PrlvdGidtyp).HasColumnName("PRLVD_GIDTYP");
            entity.Property(e => e.PrlvdKarnumer).HasColumnName("PRLVD_KARNUMER");
            entity.Property(e => e.PrlvdKntnumer).HasColumnName("PRLVD_KNTNUMER");
            entity.Property(e => e.PrlvdKnttyp).HasColumnName("PRLVD_KNTTYP");
            entity.Property(e => e.PrlvdKontoprzec)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PRLVD_KONTOPRZEC");
            entity.Property(e => e.PrlvdKontyp).HasColumnName("PRLVD_KONTYP");
            entity.Property(e => e.PrlvdLp).HasColumnName("PRLVD_LP");
            entity.Property(e => e.PrlvdMpp).HasColumnName("PRLVD_MPP");
            entity.Property(e => e.PrlvdNieksiegowac).HasColumnName("PRLVD_NIEKSIEGOWAC");
            entity.Property(e => e.PrlvdNumer).HasColumnName("PRLVD_NUMER");
            entity.Property(e => e.PrlvdStan).HasColumnName("PRLVD_STAN");
            entity.Property(e => e.PrlvdTstatus).HasColumnName("PRLVD_TSTATUS");
            entity.Property(e => e.PrlvdZaksiegowano).HasColumnName("PRLVD_ZAKSIEGOWANO");
        });

        modelBuilder.Entity<PrjLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRJ_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_PRJ_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PrjStruktura>(entity =>
        {
            entity.HasKey(e => new { e.PrjGidtyp, e.PrjGidnumer, e.PrjGidlp, e.PrjGrotyp, e.PrjGronumer, e.PrjGrolp }).HasName("PRJ_Primary");

            entity.ToTable("PrjStruktura", "CDN", tb =>
                {
                    tb.HasTrigger("PrjStruktura_DeleteHandler");
                    tb.HasTrigger("PrjStruktura_InsertUpdateHandler");
                    tb.HasTrigger("Projekty_SprawdzOpisAnalityczny");
                });

            entity.HasIndex(e => new { e.PrjGrotyp, e.PrjGronumer, e.PrjGidtyp, e.PrjKod }, "PRJGIDyKod").IsUnique();

            entity.HasIndex(e => new { e.PrjRok, e.PrjMiesiac, e.PrjSeria, e.PrjNumer, e.PrjLp }, "PRJNumer").IsUnique();

            entity.HasIndex(e => e.PrjId, "PrjID").IsUnique();

            entity.HasIndex(e => e.PrjKntNumer, "PrjKontrahent");

            entity.Property(e => e.PrjGidtyp).HasColumnName("PRJ_GIDTyp");
            entity.Property(e => e.PrjGidnumer).HasColumnName("PRJ_GIDNumer");
            entity.Property(e => e.PrjGidlp).HasColumnName("PRJ_GIDLp");
            entity.Property(e => e.PrjGrotyp).HasColumnName("PRJ_GROTyp");
            entity.Property(e => e.PrjGronumer).HasColumnName("PRJ_GRONumer");
            entity.Property(e => e.PrjGrolp).HasColumnName("PRJ_GROLp");
            entity.Property(e => e.PrjArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRJ_Archiwalny");
            entity.Property(e => e.PrjDataOtwarcia)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_DataOtwarcia");
            entity.Property(e => e.PrjDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_DataWystawienia");
            entity.Property(e => e.PrjDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_DataZamkniecia");
            entity.Property(e => e.PrjDokumentObcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_DokumentObcy");
            entity.Property(e => e.PrjFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_FrmNumer");
            entity.Property(e => e.PrjFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_FrsId");
            entity.Property(e => e.PrjGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_GIDFirma");
            entity.Property(e => e.PrjGrofirma)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_GROFirma");
            entity.Property(e => e.PrjGroid)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_GROID");
            entity.Property(e => e.PrjId)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_ID");
            entity.Property(e => e.PrjKndNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_KndNumer");
            entity.Property(e => e.PrjKndTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRJ_KndTyp");
            entity.Property(e => e.PrjKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_KntNumer");
            entity.Property(e => e.PrjKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRJ_KntTyp");
            entity.Property(e => e.PrjKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_Kod");
            entity.Property(e => e.PrjKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_Konto");
            entity.Property(e => e.PrjLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRJ_Lp");
            entity.Property(e => e.PrjMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRJ_Miesiac");
            entity.Property(e => e.PrjNazwa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_Nazwa");
            entity.Property(e => e.PrjNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_Numer");
            entity.Property(e => e.PrjOpWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_OpWNumer");
            entity.Property(e => e.PrjOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_Opis");
            entity.Property(e => e.PrjOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("PRJ_OptimaId");
            entity.Property(e => e.PrjRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PRJ_Rok");
            entity.Property(e => e.PrjSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_Seria");
            entity.Property(e => e.PrjSymbol)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_Symbol");
            entity.Property(e => e.PrjUrl)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRJ_Url");
        });

        modelBuilder.Entity<PrlnOpisy>(entity =>
        {
            entity.HasKey(e => e.PrlnOPrlnId).HasName("PrlnO_Primary");

            entity.ToTable("PrlnOpisy", "CDN");

            entity.Property(e => e.PrlnOPrlnId).HasColumnName("PrlnO_PrlnID");
            entity.Property(e => e.PrlnOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PrlnO_Opis");
            entity.Property(e => e.PrlnOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PrlnO_Typ");

            entity.HasOne(d => d.PrlnOPrln).WithOne(p => p.PrlnOpisy)
                .HasForeignKey<PrlnOpisy>(d => d.PrlnOPrlnId)
                .HasConstraintName("FK_PRLNOPRIMARY");
        });

        modelBuilder.Entity<PrmHistorium>(entity =>
        {
            entity.HasKey(e => e.PrHId).HasName("PrH_Primary");

            entity.ToTable("PrmHistoria", "CDN", tb => tb.HasTrigger("PrmHistoria_InsertUpdateHandler"));

            entity.HasIndex(e => e.PrHTprid, "PRHTPRID");

            entity.HasIndex(e => new { e.PrHGidtyp, e.PrHGidnumer, e.PrHGidlp, e.PrHId }, "PrhDokOrder");

            entity.HasIndex(e => new { e.PrHGidnumer, e.PrHGidtyp, e.PrHGidlp, e.PrHIdprm, e.PrHBudzetId }, "PrhDokument").IsUnique();

            entity.HasIndex(e => e.PrHIdprm, "PrhPrmId");

            entity.Property(e => e.PrHId).HasColumnName("PrH_ID");
            entity.Property(e => e.PrHBudzetId).HasColumnName("PrH_BudzetId");
            entity.Property(e => e.PrHGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PrH_GIDFirma");
            entity.Property(e => e.PrHGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PrH_GIDLp");
            entity.Property(e => e.PrHGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("PrH_GIDNumer");
            entity.Property(e => e.PrHGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PrH_GIDTyp");
            entity.Property(e => e.PrHIdprm)
                .HasDefaultValue(0)
                .HasColumnName("PrH_IDPrm");
            entity.Property(e => e.PrHRabatEfektywny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("PrH_RabatEfektywny");
            entity.Property(e => e.PrHRabatKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PrH_RabatKwota");
            entity.Property(e => e.PrHRabatKwotaDokl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("PrH_RabatKwotaDokl");
            entity.Property(e => e.PrHRabatProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 6)")
                .HasColumnName("PrH_RabatProcent");
            entity.Property(e => e.PrHRodzajRabatu)
                .HasDefaultValue(0)
                .HasColumnName("PrH_RodzajRabatu");
            entity.Property(e => e.PrHTprid)
                .HasDefaultValue(0)
                .HasColumnName("PrH_TPRID");
        });

        modelBuilder.Entity<PrmKarty>(entity =>
        {
            entity.HasKey(e => e.PrmId).HasName("PRM_Primary");

            entity.ToTable("PrmKarty", "CDN", tb =>
                {
                    tb.HasTrigger("PrmKarty_DeleteHandler");
                    tb.HasTrigger("PrmKarty_SprawdzSesje");
                });

            entity.HasIndex(e => e.PrmAkronim, "PrmAkronim").IsUnique();

            entity.HasIndex(e => new { e.PrmDataOd, e.PrmDataDo }, "PrmDataOd");

            entity.HasIndex(e => e.PrmPriorytet, "PrmPriorytet");

            entity.HasIndex(e => new { e.PrmTyp, e.PrmStan, e.PrmLastMod }, "PrmTypStan");

            entity.Property(e => e.PrmId).HasColumnName("PRM_Id");
            entity.Property(e => e.PrmAkronim)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRM_Akronim");
            entity.Property(e => e.PrmAktywna)
                .HasDefaultValue(0)
                .HasColumnName("PRM_Aktywna");
            entity.Property(e => e.PrmBlokadaCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_BlokadaCeny");
            entity.Property(e => e.PrmCyklCzestotliwosc)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_CyklCzestotliwosc");
            entity.Property(e => e.PrmCyklDniDo)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_CyklDniDo");
            entity.Property(e => e.PrmCyklDniOd)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_CyklDniOd");
            entity.Property(e => e.PrmCyklRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_CyklRodzaj");
            entity.Property(e => e.PrmCyklWystepowanie)
                .HasDefaultValue(0)
                .HasColumnName("PRM_CyklWystepowanie");
            entity.Property(e => e.PrmCykliczna)
                .HasDefaultValue(0)
                .HasColumnName("PRM_Cykliczna");
            entity.Property(e => e.PrmDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PRM_DataDo");
            entity.Property(e => e.PrmDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PRM_DataOd");
            entity.Property(e => e.PrmDataPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("PRM_DataPotwierdzenia");
            entity.Property(e => e.PrmDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("PRM_DataUtworzenia");
            entity.Property(e => e.PrmDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("PRM_DataZamkniecia");
            entity.Property(e => e.PrmDokument)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_Dokument");
            entity.Property(e => e.PrmGrupaTwrWazniejsza)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_GrupaTwrWazniejsza");
            entity.Property(e => e.PrmGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("PRM_GUID");
            entity.Property(e => e.PrmJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRM_JmZ");
            entity.Property(e => e.PrmKolor)
                .HasDefaultValue(0)
                .HasColumnName("PRM_Kolor");
            entity.Property(e => e.PrmKolorBg)
                .HasDefaultValue(0)
                .HasColumnName("PRM_KolorBG");
            entity.Property(e => e.PrmLastMod)
                .HasDefaultValue(0)
                .HasColumnName("PRM_LastMod");
            entity.Property(e => e.PrmLimitRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_LimitRodzaj");
            entity.Property(e => e.PrmLimitTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_LimitTyp");
            entity.Property(e => e.PrmLimitWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PRM_LimitWartosc");
            entity.Property(e => e.PrmMaxIloscPakietow)
                .HasDefaultValue(0)
                .HasColumnName("PRM_MaxIloscPakietow");
            entity.Property(e => e.PrmNajwyzszyProg)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_NajwyzszyProg");
            entity.Property(e => e.PrmOkresTransakcjiDo)
                .HasDefaultValue(0)
                .HasColumnName("PRM_OkresTransakcjiDo");
            entity.Property(e => e.PrmOkresTransakcjiOd)
                .HasDefaultValue(0)
                .HasColumnName("PRM_OkresTransakcjiOd");
            entity.Property(e => e.PrmOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("PRM_OpeFirmaM");
            entity.Property(e => e.PrmOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_OpeLpM");
            entity.Property(e => e.PrmOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("PRM_OpeNumerM");
            entity.Property(e => e.PrmOpeNumerP)
                .HasDefaultValue(0)
                .HasColumnName("PRM_OpeNumerP");
            entity.Property(e => e.PrmOpeNumerU)
                .HasDefaultValue(0)
                .HasColumnName("PRM_OpeNumerU");
            entity.Property(e => e.PrmOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("PRM_OpeNumerZ");
            entity.Property(e => e.PrmOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_OpeTypM");
            entity.Property(e => e.PrmOpeTypP)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_OpeTypP");
            entity.Property(e => e.PrmOpeTypU)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_OpeTypU");
            entity.Property(e => e.PrmOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_OpeTypZ");
            entity.Property(e => e.PrmPakietowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_Pakietowa");
            entity.Property(e => e.PrmPominPozostale)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_PominPozostale");
            entity.Property(e => e.PrmPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("PRM_Priorytet");
            entity.Property(e => e.PrmPriorytetLp)
                .HasDefaultValue(0)
                .HasColumnName("PRM_PriorytetLp");
            entity.Property(e => e.PrmProgTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_ProgTyp");
            entity.Property(e => e.PrmProgWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("PRM_ProgWartosc");
            entity.Property(e => e.PrmRodzajPakietu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_RodzajPakietu");
            entity.Property(e => e.PrmSposobStosowania)
                .HasDefaultValue((short)0)
                .HasColumnName("PRM_SposobStosowania");
            entity.Property(e => e.PrmStan)
                .HasDefaultValue(0)
                .HasColumnName("PRM_Stan");
            entity.Property(e => e.PrmTyp)
                .HasDefaultValue(0)
                .HasColumnName("PRM_Typ");
            entity.Property(e => e.PrmUwagi)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRM_Uwagi");
            entity.Property(e => e.PrmWarunekProgSql)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRM_WarunekProgSQL");
            entity.Property(e => e.PrmWymagajJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_WymagajJm");
            entity.Property(e => e.PrmZamknietaLista)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRM_ZamknietaLista");
        });

        modelBuilder.Entity<PrmTransakcje>(entity =>
        {
            entity.HasKey(e => e.PrTId).HasName("PrT_Primary");

            entity.ToTable("PrmTransakcje", "CDN", tb => tb.HasTrigger("PrmTransakcje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PrTDokTyp, e.PrTDokNumer, e.PrTDokLp }, "PrTElement").IsUnique();

            entity.HasIndex(e => new { e.PrTKntNumer, e.PrTTwrNumer, e.PrTRodzaj, e.PrTData }, "PrTTransakcje");

            entity.Property(e => e.PrTId).HasColumnName("PrT_ID");
            entity.Property(e => e.PrTData)
                .HasDefaultValue(0)
                .HasColumnName("PrT_Data");
            entity.Property(e => e.PrTDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PrT_DokLp");
            entity.Property(e => e.PrTDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("PrT_DokNumer");
            entity.Property(e => e.PrTDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PrT_DokTyp");
            entity.Property(e => e.PrTIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PrT_Ilosc");
            entity.Property(e => e.PrTKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("PrT_KntNumer");
            entity.Property(e => e.PrTRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PrT_Rodzaj");
            entity.Property(e => e.PrTTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PrT_TwrNumer");
            entity.Property(e => e.PrTWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("PrT_Wartosc");
        });

        modelBuilder.Entity<ProdCzynnosci>(entity =>
        {
            entity.HasKey(e => e.PczId).HasName("PCZ_Primary");

            entity.ToTable("ProdCzynnosci", "CDN", tb =>
                {
                    tb.HasTrigger("ProdCzynnosciAlias1_DeleteHandler");
                    tb.HasTrigger("ProdCzynnosci_AktualizujPKJN");
                    tb.HasTrigger("ProdCzynnosci_DeleteHandler");
                    tb.HasTrigger("ProdCzynnosci_IdZlecenia");
                    tb.HasTrigger("ProdCzynnosci_IloscZrealizowana");
                    tb.HasTrigger("ProdCzynnosci_InsertUpdateHandler");
                    tb.HasTrigger("ProdCzynnosci_UsunPotomne");
                });

            entity.HasIndex(e => e.PczOddzial, "PCZOddzial");

            entity.HasIndex(e => new { e.PczTechnologiaCzynnosc, e.PczRealizuje }, "PCZPTCRealizuje");

            entity.HasIndex(e => e.PczPzlid, "PCZPZLId");

            entity.HasIndex(e => e.PczProces, "PCZProces");

            entity.HasIndex(e => e.PczRealizuje, "PCZRealizuje");

            entity.HasIndex(e => e.PczTechnologiaCzynnosc, "PCZTechnologiaCzynnosc");

            entity.HasIndex(e => new { e.PczTerminZakonczenia, e.PczTerminRozpoczecia }, "PCZTermin");

            entity.HasIndex(e => e.PczTerminRozpoczecia, "PCZTerminRozpoczecia");

            entity.Property(e => e.PczId).HasColumnName("PCZ_Id");
            entity.Property(e => e.PczCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_CzasModyfikacji");
            entity.Property(e => e.PczCzasRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_CzasRealizacji");
            entity.Property(e => e.PczCzasRealizacjiJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_CzasRealizacjiJedn");
            entity.Property(e => e.PczCzasRozliczeniowy)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_CzasRozliczeniowy");
            entity.Property(e => e.PczCzasRozliczeniowyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_CzasRozliczeniowyJedn");
            entity.Property(e => e.PczDataAktywacjiRez)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_DataAktywacjiRez");
            entity.Property(e => e.PczDataWaznosciRez)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_DataWaznosciRez");
            entity.Property(e => e.PczEtap)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_Etap");
            entity.Property(e => e.PczGenerujZapisWterminarzu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_GenerujZapisWTerminarzu");
            entity.Property(e => e.PczIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PCZ_Ilosc");
            entity.Property(e => e.PczIloscZrealizowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PCZ_IloscZrealizowana");
            entity.Property(e => e.PczKontrolaJakosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_KontrolaJakosci");
            entity.Property(e => e.PczKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PCZ_Koszt");
            entity.Property(e => e.PczKosztProcesu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PCZ_KosztProcesu");
            entity.Property(e => e.PczNrInstrukcji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZ_NrInstrukcji");
            entity.Property(e => e.PczOddzial)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_Oddzial");
            entity.Property(e => e.PczOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_OpMNumer");
            entity.Property(e => e.PczOpUnumer)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_OpUNumer");
            entity.Property(e => e.PczOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZ_Opis");
            entity.Property(e => e.PczPlanZgrubnie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_PlanZgrubnie");
            entity.Property(e => e.PczPlanowacOd)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_PlanowacOd");
            entity.Property(e => e.PczPolprodPartia)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_PolprodPartia");
            entity.Property(e => e.PczPriorytetZlc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_PriorytetZlc");
            entity.Property(e => e.PczProces)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_Proces");
            entity.Property(e => e.PczPzepartia)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_PZEPartia");
            entity.Property(e => e.PczPzlid)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_PZLId");
            entity.Property(e => e.PczRealizuje)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_Realizuje");
            entity.Property(e => e.PczStan)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_Stan");
            entity.Property(e => e.PczStatus)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZ_Status");
            entity.Property(e => e.PczTechnologiaCzynnosc)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_TechnologiaCzynnosc");
            entity.Property(e => e.PczTerminRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_TerminRozpoczecia");
            entity.Property(e => e.PczTerminZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_TerminZakonczenia");
            entity.Property(e => e.PczUruchomiona)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_Uruchomiona");
            entity.Property(e => e.PczWzorcowyCzasRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("PCZ_WzorcowyCzasRealizacji");
            entity.Property(e => e.PczZamrozona)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZ_Zamrozona");
        });

        modelBuilder.Entity<ProdCzynnosciMaterialy>(entity =>
        {
            entity.HasKey(e => new { e.PcmPczid, e.PcmTwrNumer, e.PcmKlasaCechy, e.PcmCecha }).HasName("PCM_Primary");

            entity.ToTable("ProdCzynnosciMaterialy", "CDN", tb => tb.HasTrigger("ProdCzynnosciMaterialy_InsertUpdateHandler"));

            entity.HasIndex(e => e.PcmPczid, "PCMPCZId");

            entity.HasIndex(e => e.PcmTwrNumer, "PCMTwrNumer");

            entity.Property(e => e.PcmPczid).HasColumnName("PCM_PCZId");
            entity.Property(e => e.PcmTwrNumer).HasColumnName("PCM_TwrNumer");
            entity.Property(e => e.PcmKlasaCechy).HasColumnName("PCM_KlasaCechy");
            entity.Property(e => e.PcmCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCM_Cecha");
            entity.Property(e => e.PcmIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PCM_Ilosc");
            entity.Property(e => e.PcmJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCM_Jm");
            entity.Property(e => e.PcmTechnologiaZasob)
                .HasDefaultValue(0)
                .HasColumnName("PCM_TechnologiaZasob");
            entity.Property(e => e.PcmZrealizowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PCM_Zrealizowana");
        });

        modelBuilder.Entity<ProdCzynnosciObiekty>(entity =>
        {
            entity.HasKey(e => new { e.PcoCzynnosc, e.PcoTermin, e.PcoObiekt, e.PcoFunkcja }).HasName("PCO_Primary");

            entity.ToTable("ProdCzynnosciObiekty", "CDN", tb =>
                {
                    tb.HasTrigger("ProdCzynnosciObiekty_DeleteHandler");
                    tb.HasTrigger("ProdCzynnosciObiekty_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PcoFunkcja, "PCOFunkcja");

            entity.HasIndex(e => e.PcoId, "PCOId").IsUnique();

            entity.HasIndex(e => e.PcoObiekt, "PCOObiekt");

            entity.Property(e => e.PcoCzynnosc).HasColumnName("PCO_Czynnosc");
            entity.Property(e => e.PcoTermin).HasColumnName("PCO_Termin");
            entity.Property(e => e.PcoObiekt).HasColumnName("PCO_Obiekt");
            entity.Property(e => e.PcoFunkcja).HasColumnName("PCO_Funkcja");
            entity.Property(e => e.PcoId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PCO_Id");
            entity.Property(e => e.PcoKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PCO_Koszt");
            entity.Property(e => e.PcoKosztPrzygotowania)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PCO_KosztPrzygotowania");
            entity.Property(e => e.PcoKosztZakonczenia)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PCO_KosztZakonczenia");
            entity.Property(e => e.PcoPochodzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCO_Pochodzenie");
            entity.Property(e => e.PcoZablokowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCO_Zablokowany");

            entity.HasOne(d => d.PcoCzynnoscNavigation).WithMany(p => p.ProdCzynnosciObiekties)
                .HasForeignKey(d => d.PcoCzynnosc)
                .HasConstraintName("FK_PCOPrimary");
        });

        modelBuilder.Entity<ProdCzynnosciRealizujaceTechnologie>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProdCzynnosciRealizujaceTechnologie", "CDN");

            entity.Property(e => e.PczCzasrealizacji).HasColumnName("pcz_czasrealizacji");
            entity.Property(e => e.PczId).HasColumnName("pcz_id");
            entity.Property(e => e.PczPzlid).HasColumnName("PCZ_PZLID");
            entity.Property(e => e.PtcCzasRozliczeniowy).HasColumnName("ptc_czasRozliczeniowy");
            entity.Property(e => e.PtcId).HasColumnName("ptc_id");
            entity.Property(e => e.PtcKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ptc_kod");
            entity.Property(e => e.PtcNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ptc_nazwa");
            entity.Property(e => e.PtzId).HasColumnName("PTZ_Id");
            entity.Property(e => e.PtzIlosc)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTZ_Ilosc");
            entity.Property(e => e.PtzKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PTZ_Kod");
            entity.Property(e => e.PtzNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PTZ_Nazwa");
            entity.Property(e => e.PtzTypZasobu).HasColumnName("PTZ_TypZasobu");
            entity.Property(e => e.PzaId).HasColumnName("pza_Id");
            entity.Property(e => e.PzaIlosc)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZA_Ilosc");
            entity.Property(e => e.PzaIloscTechnologiczna)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("PZA_IloscTechnologiczna");
        });

        modelBuilder.Entity<ProdCzynnosciTerminy>(entity =>
        {
            entity.HasKey(e => new { e.PctCzynnosc, e.PctId }).HasName("PCT_Primary");

            entity.ToTable("ProdCzynnosciTerminy", "CDN", tb => tb.HasTrigger("ProdCzynnosciTerminy_DeleteHandler"));

            entity.HasIndex(e => e.PctId, "PCTId").IsUnique();

            entity.HasIndex(e => new { e.PctTerminDo, e.PctTerminOd }, "PCTTerminDo");

            entity.HasIndex(e => new { e.PctTerminOd, e.PctId, e.PctCzynnosc }, "PCTTerminOd");

            entity.Property(e => e.PctCzynnosc).HasColumnName("PCT_Czynnosc");
            entity.Property(e => e.PctId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PCT_Id");
            entity.Property(e => e.PctCzasRozliczeniowy)
                .HasDefaultValue(0)
                .HasColumnName("PCT_CzasRozliczeniowy");
            entity.Property(e => e.PctTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("PCT_TerminDo");
            entity.Property(e => e.PctTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("PCT_TerminOd");

            entity.HasOne(d => d.PctCzynnoscNavigation).WithMany(p => p.ProdCzynnosciTerminies)
                .HasForeignKey(d => d.PctCzynnosc)
                .HasConstraintName("FK_PCTPrimary");
        });

        modelBuilder.Entity<ProdDefinicjeKolejek>(entity =>
        {
            entity.HasKey(e => e.PdkId).HasName("PDK_Primary");

            entity.ToTable("ProdDefinicjeKolejek", "CDN", tb => tb.HasTrigger("ProdDefinicjeKolejek_UstawDomyslna"));

            entity.HasIndex(e => new { e.PdkKod, e.PdkDefinicjaDla }, "PDKKod").IsUnique();

            entity.Property(e => e.PdkId).HasColumnName("PDK_Id");
            entity.Property(e => e.PdkArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDK_Archiwalny");
            entity.Property(e => e.PdkDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("PDK_DataDodania");
            entity.Property(e => e.PdkDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PDK_DataModyfikacji");
            entity.Property(e => e.PdkDefinicjaDla)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDK_DefinicjaDla");
            entity.Property(e => e.PdkDomyslna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PDK_Domyslna");
            entity.Property(e => e.PdkKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDK_Kod");
            entity.Property(e => e.PdkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDK_Nazwa");
            entity.Property(e => e.PdkOpDnumer)
                .HasDefaultValue(0)
                .HasColumnName("PDK_OpDNumer");
            entity.Property(e => e.PdkOpmnumer)
                .HasDefaultValue(0)
                .HasColumnName("PDK_OPMNumer");
            entity.Property(e => e.PdkSql)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PDK_SQL");
        });

        modelBuilder.Entity<ProdDoPrzeliczenium>(entity =>
        {
            entity.HasKey(e => new { e.PdlGidnumer, e.PdlGidtyp }).HasName("PDL_Primary");

            entity.ToTable("ProdDoPrzeliczenia", "CDN", tb => tb.HasTrigger("ProdDoPrzeliczenia_InsertUpdateHandler"));

            entity.Property(e => e.PdlGidnumer).HasColumnName("PDL_GIDNumer");
            entity.Property(e => e.PdlGidtyp).HasColumnName("PDL_GIDTyp");
        });

        modelBuilder.Entity<ProdFunkcje>(entity =>
        {
            entity.HasKey(e => e.PfuId).HasName("PFU_Primary");

            entity.ToTable("ProdFunkcje", "CDN", tb => tb.HasTrigger("ProdFunkcje_DeleteHandler"));

            entity.HasIndex(e => e.PfuKod, "PFUKod").IsUnique();

            entity.HasIndex(e => e.PfuTyp, "PFUTyp");

            entity.Property(e => e.PfuId).HasColumnName("PFU_Id");
            entity.Property(e => e.PfuArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_Archiwalny");
            entity.Property(e => e.PfuCzyZrownoleglac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_CzyZrownoleglac");
            entity.Property(e => e.PfuDomyslnaRobociznaWbudzetach)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_DomyslnaRobociznaWBudzetach");
            entity.Property(e => e.PfuDopuszczalneObciazenie)
                .HasDefaultValue((short)0)
                .HasColumnName("PFU_DopuszczalneObciazenie");
            entity.Property(e => e.PfuKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PFU_Kod");
            entity.Property(e => e.PfuKontynuacjaPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_KontynuacjaPracy");
            entity.Property(e => e.PfuNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PFU_Nazwa");
            entity.Property(e => e.PfuOddzial)
                .HasDefaultValue(0)
                .HasColumnName("PFU_Oddzial");
            entity.Property(e => e.PfuOpis)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PFU_Opis");
            entity.Property(e => e.PfuPlanowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_Planowana");
            entity.Property(e => e.PfuPlanujStrategicznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_PlanujStrategicznie");
            entity.Property(e => e.PfuStawkaCzas)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PFU_StawkaCzas");
            entity.Property(e => e.PfuStawkaCzasAtr)
                .HasDefaultValue(0)
                .HasColumnName("PFU_StawkaCzasAtr");
            entity.Property(e => e.PfuStawkaCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PFU_StawkaCzasM");
            entity.Property(e => e.PfuStawkaCzasMjedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_StawkaCzasMJedn");
            entity.Property(e => e.PfuTenSamZasobWpartiach)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_TenSamZasobWPartiach");
            entity.Property(e => e.PfuTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_Typ");
            entity.Property(e => e.PfuTypGniazda)
                .HasDefaultValue(0)
                .HasColumnName("PFU_TypGniazda");
            entity.Property(e => e.PfuUwzglednijWnrSeryjnym)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_UwzglednijWNrSeryjnym");
            entity.Property(e => e.PfuZablokowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_Zablokowana");
            entity.Property(e => e.PfuZdolnoscWokresie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("PFU_ZdolnoscWOkresie");
            entity.Property(e => e.PfuZdolnoscWokresieJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_ZdolnoscWOkresieJedn");
            entity.Property(e => e.PfuZmienna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PFU_Zmienna");
        });

        modelBuilder.Entity<ProdIoTakcje>(entity =>
        {
            entity.HasKey(e => e.PiakId).HasName("PIAK_Primary");

            entity.ToTable("ProdIoTAkcje", "CDN", tb => tb.HasTrigger("ProdIoTAkcje_DeleteHandler"));

            entity.Property(e => e.PiakId).HasColumnName("PIAK_Id");
            entity.Property(e => e.PiakAktywna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIAK_Aktywna");
            entity.Property(e => e.PiakOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIAK_Opis");
        });

        modelBuilder.Entity<ProdIoTakcjeZdarzenium>(entity =>
        {
            entity.HasKey(e => e.PiazId).HasName("PIAZ_Primary");

            entity.ToTable("ProdIoTAkcjeZdarzenia", "CDN", tb =>
                {
                    tb.HasTrigger("ProdIoTAkcjeZdarzenia_InsertUpdateHandler");
                    tb.HasTrigger("ProdIoTAkcjeZdarzenia_PrzesunLp");
                });

            entity.HasIndex(e => new { e.PiazAkcjaNumer, e.PiazAkcjaTyp }, "PIAZAkcja");

            entity.HasIndex(e => new { e.PiazObiNumer, e.PiazObiTyp }, "PIAZObi");

            entity.Property(e => e.PiazId).HasColumnName("PIAZ_Id");
            entity.Property(e => e.PiazAkcjaNumer)
                .HasDefaultValue(0)
                .HasColumnName("PIAZ_AkcjaNumer");
            entity.Property(e => e.PiazAkcjaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIAZ_AkcjaTyp");
            entity.Property(e => e.PiazDodanyObiekt)
                .HasDefaultValue(0)
                .HasColumnName("PIAZ_DodanyObiekt");
            entity.Property(e => e.PiazLp)
                .HasDefaultValue(0)
                .HasColumnName("PIAZ_Lp");
            entity.Property(e => e.PiazObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PIAZ_ObiNumer");
            entity.Property(e => e.PiazObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIAZ_ObiTyp");
        });

        modelBuilder.Entity<ProdIoTczujniki>(entity =>
        {
            entity.HasKey(e => e.PczuId).HasName("PCZU_Primary");

            entity.ToTable("ProdIoTCzujniki", "CDN", tb => tb.HasTrigger("ProdIoTCzujniki_ArchiwizujPolaczeniaZZasobem"));

            entity.HasIndex(e => e.PczuNumer, "PCZUNumer").IsUnique();

            entity.Property(e => e.PczuId).HasColumnName("PCZU_Id");
            entity.Property(e => e.PczuArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZU_Archiwalny");
            entity.Property(e => e.PczuDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PCZU_DataCzasM");
            entity.Property(e => e.PczuDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("PCZU_DataCzasW");
            entity.Property(e => e.PczuNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZU_Nazwa");
            entity.Property(e => e.PczuNumer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZU_Numer");
            entity.Property(e => e.PczuOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PCZU_OpeMNumer");
            entity.Property(e => e.PczuOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PCZU_OpeWNumer");
            entity.Property(e => e.PczuOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZU_Opis");
        });

        modelBuilder.Entity<ProdIoTczujnikiZdarzenium>(entity =>
        {
            entity.HasKey(e => e.PiczId).HasName("PICZ_Primary");

            entity.ToTable("ProdIoTCzujnikiZdarzenia", "CDN");

            entity.HasIndex(e => e.PiczCzujnikId, "PICZCzujnik");

            entity.HasIndex(e => new { e.PiczCzujnikId, e.PiczDefZdarzeniaId }, "PICZCzujnikDefZdarzenia").IsUnique();

            entity.HasIndex(e => e.PiczDefZdarzeniaId, "PICZKeyDefZdarzenia");

            entity.Property(e => e.PiczId).HasColumnName("PICZ_Id");
            entity.Property(e => e.PiczCzujnikId)
                .HasDefaultValue(0)
                .HasColumnName("PICZ_CzujnikId");
            entity.Property(e => e.PiczDefZdarzeniaId)
                .HasDefaultValue(0)
                .HasColumnName("PICZ_DefZdarzeniaId");
        });

        modelBuilder.Entity<ProdIoTkomunikaty>(entity =>
        {
            entity.HasKey(e => e.PikoId).HasName("PIKO_Primary");

            entity.ToTable("ProdIoTKomunikaty", "CDN");

            entity.Property(e => e.PikoId).HasColumnName("PIKO_Id");
            entity.Property(e => e.PikoArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIKO_Archiwalny");
            entity.Property(e => e.PikoDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PIKO_DataCzasM");
            entity.Property(e => e.PikoDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("PIKO_DataCzasW");
            entity.Property(e => e.PikoOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PIKO_OpeMNumer");
            entity.Property(e => e.PikoOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PIKO_OpeWNumer");
            entity.Property(e => e.PikoTresc)
                .HasMaxLength(513)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIKO_Tresc");
        });

        modelBuilder.Entity<ProdIoTkomunikatyZdarzenium>(entity =>
        {
            entity.HasKey(e => e.PikzId).HasName("PIKZ_Primary");

            entity.ToTable("ProdIoTKomunikatyZdarzenia", "CDN");

            entity.HasIndex(e => e.PikzDefZdarzeniaId, "PIKZDefZdarzenia");

            entity.HasIndex(e => new { e.PikzDefZdarzeniaId, e.PikzKomunikatIoTid }, "PIKZDefZdarzeniaKomunikat").IsUnique();

            entity.HasIndex(e => e.PikzKomunikatIoTid, "PIKZKomunikatIoT");

            entity.Property(e => e.PikzId).HasColumnName("PIKZ_Id");
            entity.Property(e => e.PikzDefZdarzeniaId)
                .HasDefaultValue(0)
                .HasColumnName("PIKZ_DefZdarzeniaId");
            entity.Property(e => e.PikzKomunikatIoTid)
                .HasDefaultValue(0)
                .HasColumnName("PIKZ_KomunikatIoTId");

            entity.HasOne(d => d.PikzDefZdarzenia).WithMany(p => p.ProdIoTkomunikatyZdarzenia)
                .HasForeignKey(d => d.PikzDefZdarzeniaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PIKZDefZdarzenia");

            entity.HasOne(d => d.PikzKomunikatIoT).WithMany(p => p.ProdIoTkomunikatyZdarzenia)
                .HasForeignKey(d => d.PikzKomunikatIoTid)
                .HasConstraintName("FK_PIKZKomunikatIoT");
        });

        modelBuilder.Entity<ProdIoTodbiorcyPowiadomien>(entity =>
        {
            entity.HasKey(e => e.PiokId).HasName("PIOK_Primary");

            entity.ToTable("ProdIoTOdbiorcyPowiadomien", "CDN", tb => tb.HasTrigger("ProdIoTOdbiorcyPowiadomien_InsertUpdateHandler"));

            entity.HasIndex(e => e.PiokDefZdarzeniaId, "PIOKDefZdarzenia");

            entity.HasIndex(e => new { e.PiokObiTyp, e.PiokObiNumer }, "PIOKObi");

            entity.HasIndex(e => new { e.PiokDefZdarzeniaId, e.PiokObiTyp, e.PiokObiNumer }, "PIOKObiDefZdarzenia").IsUnique();

            entity.Property(e => e.PiokId).HasColumnName("PIOK_Id");
            entity.Property(e => e.PiokDefZdarzeniaId)
                .HasDefaultValue(0)
                .HasColumnName("PIOK_DefZdarzeniaId");
            entity.Property(e => e.PiokObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PIOK_ObiNumer");
            entity.Property(e => e.PiokObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIOK_ObiTyp");

            entity.HasOne(d => d.PiokDefZdarzenia).WithMany(p => p.ProdIoTodbiorcyPowiadomiens)
                .HasForeignKey(d => d.PiokDefZdarzeniaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PIOKDefZdarzenia");
        });

        modelBuilder.Entity<ProdIoTostOdebraneZdarzenieOpe>(entity =>
        {
            entity.HasKey(e => e.PiozOpeNumer).HasName("PIOZ_Primary");

            entity.ToTable("ProdIoTOstOdebraneZdarzenieOpe", "CDN");

            entity.HasIndex(e => e.PiozOstZdarzenieId, "PIOZOstZdarzenie");

            entity.Property(e => e.PiozOpeNumer).HasColumnName("PIOZ_OpeNumer");
            entity.Property(e => e.PiozOstZdarzenieData)
                .HasDefaultValue(0)
                .HasColumnName("PIOZ_OstZdarzenieData");
            entity.Property(e => e.PiozOstZdarzenieId)
                .HasDefaultValue(0)
                .HasColumnName("PIOZ_OstZdarzenieId");
        });

        modelBuilder.Entity<ProdIoTregulyDefinicji>(entity =>
        {
            entity.HasKey(e => e.PirdId).HasName("PIRD_Primary");

            entity.ToTable("ProdIoTRegulyDefinicji", "CDN");

            entity.HasIndex(e => e.PirdDefZdarzeniaId, "PIRDDefZdarzenia");

            entity.Property(e => e.PirdId).HasColumnName("PIRD_Id");
            entity.Property(e => e.PirdDataDolaczenia)
                .HasDefaultValue(0)
                .HasColumnName("PIRD_DataDolaczenia");
            entity.Property(e => e.PirdDefZdarzeniaId)
                .HasDefaultValue(0)
                .HasColumnName("PIRD_DefZdarzeniaId");
            entity.Property(e => e.PirdOpeDolaczajacy)
                .HasDefaultValue(0)
                .HasColumnName("PIRD_OpeDolaczajacy");
            entity.Property(e => e.PirdRegulaId)
                .HasDefaultValue(0)
                .HasColumnName("PIRD_RegulaId");

            entity.HasOne(d => d.PirdDefZdarzenia).WithMany(p => p.ProdIoTregulyDefinicjis)
                .HasForeignKey(d => d.PirdDefZdarzeniaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PIRDDefZdarzenia");
        });

        modelBuilder.Entity<ProdIoTzadaniaZdarzenium>(entity =>
        {
            entity.HasKey(e => e.PizzId).HasName("PIZZ_Primary");

            entity.ToTable("ProdIoTZadaniaZdarzenia", "CDN", tb => tb.HasTrigger("ProdIoTZadaniaZdarzenia_PrzesunLp"));

            entity.HasIndex(e => new { e.PizzObiNumer, e.PizzObiTyp }, "PIZZObi");

            entity.Property(e => e.PizzId).HasColumnName("PIZZ_Id");
            entity.Property(e => e.PizzLp)
                .HasDefaultValue(0)
                .HasColumnName("PIZZ_Lp");
            entity.Property(e => e.PizzObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PIZZ_ObiNumer");
            entity.Property(e => e.PizzObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIZZ_ObiTyp");
            entity.Property(e => e.PizzOpisZadania)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIZZ_OpisZadania");
            entity.Property(e => e.PizzWykonano)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIZZ_Wykonano");
            entity.Property(e => e.PizzZadanie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIZZ_Zadanie");
        });

        modelBuilder.Entity<ProdIoTzdarzeniaDefinicje>(entity =>
        {
            entity.HasKey(e => e.PczzdId).HasName("PCZZD_Primary");

            entity.ToTable("ProdIoTZdarzeniaDefinicje", "CDN", tb => tb.HasTrigger("ProdIoTZdarzeniaDefinicje_DeleteHandler"));

            entity.HasIndex(e => e.PczzdKod, "PCZZDKod").IsUnique();

            entity.Property(e => e.PczzdId).HasColumnName("PCZZD_Id");
            entity.Property(e => e.PczzdArchiwalna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZZD_Archiwalna");
            entity.Property(e => e.PczzdKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZZD_Kod");
            entity.Property(e => e.PczzdNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZZD_Nazwa");
            entity.Property(e => e.PczzdPriorytetIoTid)
                .HasDefaultValue(0)
                .HasColumnName("PCZZD_PriorytetIoTId");
            entity.Property(e => e.PczzdTrescPowiadomienia)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZZD_TrescPowiadomienia");
            entity.Property(e => e.PczzdWykonujAkcje)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZZD_WykonujAkcje");
            entity.Property(e => e.PczzdWyswietlacPowiadomienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PCZZD_WyswietlacPowiadomienie");
            entity.Property(e => e.PczzdWyswietlacZadania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZZD_WyswietlacZadania");
        });

        modelBuilder.Entity<ProdIoTzdarzenium>(entity =>
        {
            entity.HasKey(e => e.PczzId).HasName("PCZZ_Primary");

            entity.ToTable("ProdIoTZdarzenia", "CDN", tb => tb.HasTrigger("ProdIoTZdarzenia_DeleteHandler"));

            entity.HasIndex(e => e.PczzPczuid, "PCZZCzujnik");

            entity.HasIndex(e => e.PczzDefZdarzeniaId, "PCZZDefZdarzenia");

            entity.Property(e => e.PczzId).HasColumnName("PCZZ_Id");
            entity.Property(e => e.PczzDefZdarzeniaId)
                .HasDefaultValue(0)
                .HasColumnName("PCZZ_DefZdarzeniaId");
            entity.Property(e => e.PczzPczuid)
                .HasDefaultValue(0)
                .HasColumnName("PCZZ_PCZUId");
            entity.Property(e => e.PczzTimestamp)
                .HasDefaultValue(0)
                .HasColumnName("PCZZ_Timestamp");
            entity.Property(e => e.PczzZdarzenie)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PCZZ_Zdarzenie");

            entity.HasOne(d => d.PczzDefZdarzenia).WithMany(p => p.ProdIoTzdarzenia)
                .HasForeignKey(d => d.PczzDefZdarzeniaId)
                .HasConstraintName("FK_PCZZDefZdarzenia");

            entity.HasOne(d => d.PczzPczu).WithMany(p => p.ProdIoTzdarzenia)
                .HasForeignKey(d => d.PczzPczuid)
                .HasConstraintName("FK_PCZZCzujnik");
        });

        modelBuilder.Entity<ProdKalendarze>(entity =>
        {
            entity.HasKey(e => e.PkaId).HasName("PKA_Primary");

            entity.ToTable("ProdKalendarze", "CDN", tb =>
                {
                    tb.HasTrigger("ProdKalendarze_DeleteHandler");
                    tb.HasTrigger("ProdKalendarze_WyczyscKntKalendarze");
                });

            entity.HasIndex(e => new { e.PkaTyp, e.PkaKod }, "PKAKod").IsUnique();

            entity.Property(e => e.PkaId).HasColumnName("PKA_Id");
            entity.Property(e => e.PkaDopDoGodzNocnych)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_DopDoGodzNocnych");
            entity.Property(e => e.PkaDopDoNadgodzin)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_DopDoNadgodzin");
            entity.Property(e => e.PkaIloscMiesiecy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_IloscMiesiecy");
            entity.Property(e => e.PkaKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKA_Kod");
            entity.Property(e => e.PkaKontrolaKodeks)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_KontrolaKodeks");
            entity.Property(e => e.PkaNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKA_Nazwa");
            entity.Property(e => e.PkaNormaDobowa)
                .HasDefaultValue(0)
                .HasColumnName("PKA_NormaDobowa");
            entity.Property(e => e.PkaNormaTygodniowa)
                .HasDefaultValue(0)
                .HasColumnName("PKA_NormaTygodniowa");
            entity.Property(e => e.PkaNormaUrlopuWypocz)
                .HasDefaultValue(0)
                .HasColumnName("PKA_NormaUrlopuWypocz");
            entity.Property(e => e.PkaPoczatekWmiesiacu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_PoczatekWMiesiacu");
            entity.Property(e => e.PkaRozliczenieNadgoszin)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_RozliczenieNadgoszin");
            entity.Property(e => e.PkaSystemCzasuPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_SystemCzasuPracy");
            entity.Property(e => e.PkaTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_Typ");
            entity.Property(e => e.PkaUwzgWymiarEtatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_UwzgWymiarEtatu");
            entity.Property(e => e.PkaWykrywajNiezdefiniowane)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_WykrywajNiezdefiniowane");
            entity.Property(e => e.PkaWymiarDobowy)
                .HasDefaultValue(0)
                .HasColumnName("PKA_WymiarDobowy");
            entity.Property(e => e.PkaWynagPowNormy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_WynagPowNormy");
            entity.Property(e => e.PkaWyplPoM)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKA_WyplPoM");
        });

        modelBuilder.Entity<ProdKalkulacjaKosztu>(entity =>
        {
            entity.HasKey(e => e.PkkId).HasName("PKK_Primary");

            entity.ToTable("ProdKalkulacjaKosztu", "CDN", tb => tb.HasTrigger("ProdKalkulacjaKosztu_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PkkRok, e.PkkMiesiac, e.PkkSeria, e.PkkNumer }, "PKKNrKolejny");

            entity.HasIndex(e => new { e.PkkObiNumer, e.PkkObiLp, e.PkkObiTyp }, "PKKObi");

            entity.HasIndex(e => e.PkkTechnologia, "PKKTechnologia");

            entity.HasIndex(e => e.PkkOpMnumer, "PKK_KeyOPM");

            entity.HasIndex(e => e.PkkOpWnumer, "PKK_KeyOPW");

            entity.HasIndex(e => e.PkkOpZnumer, "PKK_KeyOPZ");

            entity.HasIndex(e => new { e.PkkNumer, e.PkkId }, "pkkKeyNumerId");

            entity.HasIndex(e => new { e.PkkOpAnumer, e.PkkDataArchiwizacji, e.PkkId }, "pkkKeyOpANumerDataArchiwId");

            entity.HasIndex(e => new { e.PkkOpWnumer, e.PkkDataWystawienia, e.PkkId }, "pkkKeyOpWNumerDataWystId");

            entity.HasIndex(e => new { e.PkkOpWnumer, e.PkkNumer, e.PkkId }, "pkkKeyOpWNumerNumerId");

            entity.HasIndex(e => new { e.PkkTechnologia, e.PkkDataWystawienia, e.PkkId }, "pkkKeyTechnologiaDataWystawineiaId").IsUnique();

            entity.HasIndex(e => new { e.PkkDataWystawienia, e.PkkId }, "pkk_KeyDataWystId");

            entity.Property(e => e.PkkId).HasColumnName("PKK_Id");
            entity.Property(e => e.PkkArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_Archiwalny");
            entity.Property(e => e.PkkDataArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("PKK_DataArchiwizacji");
            entity.Property(e => e.PkkDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PKK_DataModyfikacji");
            entity.Property(e => e.PkkDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("PKK_DataWystawienia");
            entity.Property(e => e.PkkDataZatwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("PKK_DataZatwierdzenia");
            entity.Property(e => e.PkkFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PKK_FrsID");
            entity.Property(e => e.PkkIdWyrobu)
                .HasDefaultValue(0)
                .HasColumnName("PKK_IdWyrobu");
            entity.Property(e => e.PkkIloscWyrobu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PKK_IloscWyrobu");
            entity.Property(e => e.PkkKolorujZeroweKoszty)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_KolorujZeroweKoszty");
            entity.Property(e => e.PkkKosztyDodatkoweKonfiguratora)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_KosztyDodatkoweKonfiguratora");
            entity.Property(e => e.PkkKosztyDodatkoweMaterialu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_KosztyDodatkoweMaterialu");
            entity.Property(e => e.PkkMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_Miesiac");
            entity.Property(e => e.PkkNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("PKK_NrKursu");
            entity.Property(e => e.PkkNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKK_Numer");
            entity.Property(e => e.PkkObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("PKK_ObiFirma");
            entity.Property(e => e.PkkObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKK_ObiLp");
            entity.Property(e => e.PkkObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKK_ObiNumer");
            entity.Property(e => e.PkkObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKK_ObiTyp");
            entity.Property(e => e.PkkOpAnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKK_OpANumer");
            entity.Property(e => e.PkkOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKK_OpMNumer");
            entity.Property(e => e.PkkOpWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKK_OpWNumer");
            entity.Property(e => e.PkkOpZnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKK_OpZNumer");
            entity.Property(e => e.PkkOpis)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("PKK_Opis");
            entity.Property(e => e.PkkPodstawaSymulacjiGniazda)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_PodstawaSymulacjiGniazda");
            entity.Property(e => e.PkkPodstawaSymulacjiMaterialu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_PodstawaSymulacjiMaterialu");
            entity.Property(e => e.PkkRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PKK_Rok");
            entity.Property(e => e.PkkSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKK_Seria");
            entity.Property(e => e.PkkTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("PKK_Technologia");
            entity.Property(e => e.PkkWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKK_Waluta");
            entity.Property(e => e.PkkWgTechDlaMaterialow)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKK_WgTechDlaMaterialow");
            entity.Property(e => e.PkkZrodloKosztorysu)
                .HasDefaultValue(0)
                .HasColumnName("PKK_ZrodloKosztorysu");

            entity.HasOne(d => d.PkkTechnologiaNavigation).WithMany(p => p.ProdKalkulacjaKosztus)
                .HasForeignKey(d => d.PkkTechnologia)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PKKTechnologia");
        });

        modelBuilder.Entity<ProdKalkulacjaKosztuElem>(entity =>
        {
            entity.HasKey(e => e.PksId).HasName("PKS_Primary");

            entity.ToTable("ProdKalkulacjaKosztuElem", "CDN");

            entity.HasIndex(e => new { e.PksPkk, e.PksId }, "PKSKalkulacja");

            entity.HasIndex(e => new { e.PksPkk, e.PksIdUnikatowy }, "PKSKeyKalkulacjaIdUnikatowy");

            entity.HasIndex(e => new { e.PksPkk, e.PksNrKolejnyListy }, "PKSKeyKalkulacjaNrKolejnyListy");

            entity.Property(e => e.PksId).HasColumnName("PKS_ID");
            entity.Property(e => e.PksBylo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKS_Bylo");
            entity.Property(e => e.PksCena1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 4)")
                .HasColumnName("PKS_Cena1");
            entity.Property(e => e.PksCena2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 4)")
                .HasColumnName("PKS_Cena2");
            entity.Property(e => e.PksCzasTrwania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKS_CzasTrwania");
            entity.Property(e => e.PksCzasTrwaniaLong)
                .HasDefaultValue(0)
                .HasColumnName("PKS_CzasTrwaniaLong");
            entity.Property(e => e.PksEwidencyjny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKS_Ewidencyjny");
            entity.Property(e => e.PksIdCzynKolejnosciMin)
                .HasDefaultValue(0)
                .HasColumnName("PKS_IdCzynKolejnosciMin");
            entity.Property(e => e.PksIdUnikatowy)
                .HasDefaultValue(0)
                .HasColumnName("PKS_IdUnikatowy");
            entity.Property(e => e.PksIdentyfikator)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKS_Identyfikator");
            entity.Property(e => e.PksIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("PKS_Ilosc");
            entity.Property(e => e.PksIloscPom)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PKS_IloscPom");
            entity.Property(e => e.PksIloscWgTech)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PKS_IloscWgTech");
            entity.Property(e => e.PksJednostka)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKS_Jednostka");
            entity.Property(e => e.PksJednostkaPom)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKS_JednostkaPom");
            entity.Property(e => e.PksKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKS_Kod");
            entity.Property(e => e.PksKolejnosc)
                .HasDefaultValue(0)
                .HasColumnName("PKS_Kolejnosc");
            entity.Property(e => e.PksKolejnoscMin)
                .HasDefaultValue(0)
                .HasColumnName("PKS_KolejnoscMin");
            entity.Property(e => e.PksKoszt1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("PKS_Koszt1");
            entity.Property(e => e.PksKoszt2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("PKS_Koszt2");
            entity.Property(e => e.PksKosztDodatkowyRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKS_KosztDodatkowyRodzaj");
            entity.Property(e => e.PksKosztDodatkowyWartoscOrg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PKS_KosztDodatkowyWartoscOrg");
            entity.Property(e => e.PksKosztPoliczony)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKS_KosztPoliczony");
            entity.Property(e => e.PksKosztorys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 4)")
                .HasColumnName("PKS_Kosztorys");
            entity.Property(e => e.PksLp)
                .HasDefaultValue(0)
                .HasColumnName("PKS_Lp");
            entity.Property(e => e.PksLpSprawdzKolejnosci)
                .HasDefaultValue(0)
                .HasColumnName("PKS_LpSprawdzKolejnosci");
            entity.Property(e => e.PksNalezyDoTechDomyslnej)
                .HasDefaultValue(0)
                .HasColumnName("PKS_NalezyDoTechDomyslnej");
            entity.Property(e => e.PksNalezyDoTechPolproduktu)
                .HasDefaultValue(0)
                .HasColumnName("PKS_NalezyDoTechPolproduktu");
            entity.Property(e => e.PksNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKS_Nazwa");
            entity.Property(e => e.PksNrKolejnyListy)
                .HasDefaultValue(0)
                .HasColumnName("PKS_NrKolejnyListy");
            entity.Property(e => e.PksObjectId)
                .HasDefaultValue(0)
                .HasColumnName("PKS_ObjectID");
            entity.Property(e => e.PksPkk)
                .HasDefaultValue(0)
                .HasColumnName("PKS_PKK");
            entity.Property(e => e.PksPolprodukt)
                .HasDefaultValue(0)
                .HasColumnName("PKS_Polprodukt");
            entity.Property(e => e.PksPoziom)
                .HasDefaultValue((short)0)
                .HasColumnName("PKS_Poziom");
            entity.Property(e => e.PksProduktZtechnologiiDomyslnej)
                .HasDefaultValue(0)
                .HasColumnName("PKS_ProduktZtechnologiiDomyslnej");
            entity.Property(e => e.PksPtcOjciec)
                .HasDefaultValue(0)
                .HasColumnName("PKS_PTC_Ojciec");
            entity.Property(e => e.PksPtzTechnologiaZasob)
                .HasDefaultValue(0)
                .HasColumnName("PKS_PtzTechnologiaZasob");
            entity.Property(e => e.PksPtzkoszt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKS_PTZKoszt");
            entity.Property(e => e.PksTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("PKS_Technologia");
            entity.Property(e => e.PksTechnologiaPolproduktu)
                .HasDefaultValue(0)
                .HasColumnName("PKS_TechnologiaPolproduktu");
            entity.Property(e => e.PksTermin)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKS_Termin");
            entity.Property(e => e.PksTerminLong)
                .HasDefaultValue(0)
                .HasColumnName("PKS_TerminLong");
            entity.Property(e => e.PksTimeStamp)
                .HasDefaultValue(0)
                .HasColumnName("PKS_TimeStamp");
            entity.Property(e => e.PksTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKS_TwrNumer");
            entity.Property(e => e.PksTwrProdTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("PKS_TwrProdTechnologia");
            entity.Property(e => e.PksTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKS_Typ");
            entity.Property(e => e.PksUstawionyNrCzyn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKS_UstawionyNrCzyn");
            entity.Property(e => e.PksZaznaczonyPoprzedniStan)
                .HasDefaultValue(0)
                .HasColumnName("PKS_ZaznaczonyPoprzedniStan");
            entity.Property(e => e.PksZmieniono)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKS_Zmieniono");

            entity.HasOne(d => d.PksPkkNavigation).WithMany(p => p.ProdKalkulacjaKosztuElems)
                .HasForeignKey(d => d.PksPkk)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PKSKalkulacja");
        });

        modelBuilder.Entity<ProdKalkulacjaKosztuView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProdKalkulacjaKosztuView", "CDN");

            entity.Property(e => e.PvKArchiwalny).HasColumnName("PvK_Archiwalny");
            entity.Property(e => e.PvKDataModyfikacji).HasColumnName("PvK_DataModyfikacji");
            entity.Property(e => e.PvKDataWystawienia).HasColumnName("PvK_DataWystawienia");
            entity.Property(e => e.PvKDataZatwierdzenia).HasColumnName("PvK_DataZatwierdzenia");
            entity.Property(e => e.PvKKosztyDodatkoweKonfiguratora).HasColumnName("PvK_KosztyDodatkoweKonfiguratora");
            entity.Property(e => e.PvKKosztyDodatkoweMaterialu).HasColumnName("PvK_KosztyDodatkoweMaterialu");
            entity.Property(e => e.PvKNrKursu).HasColumnName("PvK_NrKursu");
            entity.Property(e => e.PvKObiFirma).HasColumnName("PvK_ObiFirma");
            entity.Property(e => e.PvKObiLp).HasColumnName("PvK_ObiLp");
            entity.Property(e => e.PvKObiNumer).HasColumnName("PvK_ObiNumer");
            entity.Property(e => e.PvKObiTyp).HasColumnName("PvK_ObiTyp");
            entity.Property(e => e.PvKOpMnumer).HasColumnName("PvK_OpMNumer");
            entity.Property(e => e.PvKOpWnumer).HasColumnName("PvK_OpWNumer");
            entity.Property(e => e.PvKOpZnumer).HasColumnName("PvK_OpZNumer");
            entity.Property(e => e.PvKPodstawaSymulacjiGniazda).HasColumnName("PvK_PodstawaSymulacjiGniazda");
            entity.Property(e => e.PvKPodstawaSymulacjiMaterialu).HasColumnName("PvK_PodstawaSymulacjiMaterialu");
            entity.Property(e => e.PvKWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PvK_Waluta");
            entity.Property(e => e.PvKZrodloKosztorysu).HasColumnName("PvK_ZrodloKosztorysu");
            entity.Property(e => e.PvkDoDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pvk_DoDokumentu");
            entity.Property(e => e.PvkFrsId).HasColumnName("pvk_frsID");
            entity.Property(e => e.PvkId).HasColumnName("pvk_id");
            entity.Property(e => e.PvkMiesiac).HasColumnName("pvk_miesiac");
            entity.Property(e => e.PvkModyfikacja)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("pvk_Modyfikacja");
            entity.Property(e => e.PvkNumer).HasColumnName("pvk_numer");
            entity.Property(e => e.PvkNumerDokumentu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pvk_NumerDokumentu");
            entity.Property(e => e.PvkOpis)
                .HasColumnType("text")
                .HasColumnName("pvk_Opis");
            entity.Property(e => e.PvkRok).HasColumnName("pvk_rok");
            entity.Property(e => e.PvkSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("pvk_Seria");
            entity.Property(e => e.PvkTechnologia).HasColumnName("pvk_technologia");
            entity.Property(e => e.PvkWystawil)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("pvk_Wystawil");
            entity.Property(e => e.PvkZatwierdzil)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("pvk_Zatwierdzil");
        });

        modelBuilder.Entity<ProdKoszty>(entity =>
        {
            entity.HasKey(e => e.PkoId).HasName("PKO_Primary");

            entity.ToTable("ProdKoszty", "CDN", tb => tb.HasTrigger("ProdKoszty_InsertUpdateHandler"));

            entity.HasIndex(e => e.PkoPwkid, "PKOPWKId");

            entity.Property(e => e.PkoId).HasColumnName("PKO_Id");
            entity.Property(e => e.PkoDataPrzypisania)
                .HasDefaultValue(0)
                .HasColumnName("PKO_DataPrzypisania");
            entity.Property(e => e.PkoKategoria)
                .HasDefaultValue(0)
                .HasColumnName("PKO_Kategoria");
            entity.Property(e => e.PkoKlucz)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKO_Klucz");
            entity.Property(e => e.PkoKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("PKO_Kwota");
            entity.Property(e => e.PkoOpis)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKO_Opis");
            entity.Property(e => e.PkoPodrzedny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKO_Podrzedny");
            entity.Property(e => e.PkoPwkid)
                .HasDefaultValue(0)
                .HasColumnName("PKO_PWKId");
            entity.Property(e => e.PkoSqlklucz)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKO_SQLKlucz");
            entity.Property(e => e.PkoSqlwarunek)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKO_SQLWarunek");
            entity.Property(e => e.PkoSqlzrodlo)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKO_SQLZrodlo");
            entity.Property(e => e.PkoWyrazenie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKO_Wyrazenie");
            entity.Property(e => e.PkoZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKO_ZrdLp");
            entity.Property(e => e.PkoZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKO_ZrdNumer");
            entity.Property(e => e.PkoZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKO_ZrdTyp");
        });

        modelBuilder.Entity<ProdKosztyElem>(entity =>
        {
            entity.HasKey(e => new { e.PkePkoid, e.PkeObiTyp, e.PkeObiNumer }).HasName("PKE_Primary");

            entity.ToTable("ProdKosztyElem", "CDN", tb =>
                {
                    tb.HasTrigger("ProdKosztyElem_InsertUpdateHandler");
                    tb.HasTrigger("ProdKosztyElem_UsunNaglowekKosztu");
                });

            entity.HasIndex(e => new { e.PkeObiNumer, e.PkeObiTyp }, "PKEObiekt");

            entity.Property(e => e.PkePkoid).HasColumnName("PKE_PKOId");
            entity.Property(e => e.PkeObiTyp).HasColumnName("PKE_ObiTyp");
            entity.Property(e => e.PkeObiNumer).HasColumnName("PKE_ObiNumer");
            entity.Property(e => e.PkeKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("PKE_Kwota");

            entity.HasOne(d => d.PkePko).WithMany(p => p.ProdKosztyElems)
                .HasForeignKey(d => d.PkePkoid)
                .HasConstraintName("FK_PKE_Primary");
        });

        modelBuilder.Entity<ProdKosztyElemO>(entity =>
        {
            entity.HasKey(e => new { e.PkeoPkoid, e.PkeoObiNumer, e.PkeoObiTyp }).HasName("PKEO_Primary");

            entity.ToTable("ProdKosztyElemO", "CDN", tb => tb.HasTrigger("ProdKosztyElemO_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PkeoObiNumer, e.PkeoObiTyp }, "PKEOObi");

            entity.Property(e => e.PkeoPkoid).HasColumnName("PKEO_PKOId");
            entity.Property(e => e.PkeoObiNumer).HasColumnName("PKEO_ObiNumer");
            entity.Property(e => e.PkeoObiTyp).HasColumnName("PKEO_ObiTyp");

            entity.HasOne(d => d.PkeoPko).WithMany(p => p.ProdKosztyElemOs)
                .HasForeignKey(d => d.PkeoPkoid)
                .HasConstraintName("FK_PKEOPrimary");
        });

        modelBuilder.Entity<ProdKosztyParametry>(entity =>
        {
            entity.HasKey(e => e.KopId).HasName("KOP_Primary");

            entity.ToTable("ProdKosztyParametry", "CDN", tb => tb.HasTrigger("ProdKosztyParametry_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.KopNazwa, e.KopPkoid, e.KopTyp }, "KOPNazwa").IsUnique();

            entity.HasIndex(e => e.KopPkoid, "KOPPKOId");

            entity.HasIndex(e => e.KopSlpId, "KOPSlpId");

            entity.Property(e => e.KopId).HasColumnName("KOP_Id");
            entity.Property(e => e.KopLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KOP_Lp");
            entity.Property(e => e.KopNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KOP_Nazwa");
            entity.Property(e => e.KopPkoid)
                .HasDefaultValue(0)
                .HasColumnName("KOP_PKOId");
            entity.Property(e => e.KopSlpId)
                .HasDefaultValue(0)
                .HasColumnName("KOP_SlpId");
            entity.Property(e => e.KopTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("KOP_Typ");
            entity.Property(e => e.KopWyrazenie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KOP_Wyrazenie");

            entity.HasOne(d => d.KopPko).WithMany(p => p.ProdKosztyParametries)
                .HasForeignKey(d => d.KopPkoid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KOPPKOId");
        });

        modelBuilder.Entity<ProdLinki>(entity =>
        {
            entity.HasKey(e => e.PlkId).HasName("PLK_Primary");

            entity.ToTable("ProdLinki", "CDN", tb => tb.HasTrigger("ProdLinki_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PlkPzeid, e.PlkObiTyp, e.PlkObiNumer }, "ObiPZE");

            entity.HasIndex(e => new { e.PlkObiTyp, e.PlkObiNumer }, "PLKObi");

            entity.HasIndex(e => e.PlkPzeid, "PLKPZEId");

            entity.Property(e => e.PlkId).HasColumnName("PLK_Id");
            entity.Property(e => e.PlkIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PLK_Ilosc");
            entity.Property(e => e.PlkObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PLK_ObiNumer");
            entity.Property(e => e.PlkObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PLK_ObiTyp");
            entity.Property(e => e.PlkPzeid)
                .HasDefaultValue(0)
                .HasColumnName("PLK_PZEId");

            entity.HasOne(d => d.PlkPze).WithMany(p => p.ProdLinkis)
                .HasForeignKey(d => d.PlkPzeid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PLKPZEId");
        });

        modelBuilder.Entity<ProdMaterialy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProdMaterialy", "CDN");

            entity.Property(e => e.PmaIlosc)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PMA_Ilosc");
            entity.Property(e => e.PmaIloscPom)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PMA_IloscPom");
            entity.Property(e => e.PmaJmPom)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("PMA_JmPom");
            entity.Property(e => e.PmaKod)
                .HasMaxLength(92)
                .IsUnicode(false)
                .HasColumnName("PMA_Kod");
            entity.Property(e => e.PmaLp).HasColumnName("PMA_Lp");
            entity.Property(e => e.PmaMagazyn).HasColumnName("PMA_Magazyn");
            entity.Property(e => e.PmaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PMA_Nazwa");
            entity.Property(e => e.PmaNumer).HasColumnName("PMA_Numer");
            entity.Property(e => e.PmaPlanowany).HasColumnName("PMA_Planowany");
            entity.Property(e => e.PmaPodlegaKj).HasColumnName("PMA_PodlegaKJ");
            entity.Property(e => e.PmaSubLp).HasColumnName("PMA_SubLp");
            entity.Property(e => e.PmaTwrJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("PMA_TwrJm");
            entity.Property(e => e.PmaTwrNumer).HasColumnName("PMA_TwrNumer");
            entity.Property(e => e.PmaTwrTyp).HasColumnName("PMA_TwrTyp");
            entity.Property(e => e.PmaTyp).HasColumnName("PMA_Typ");
            entity.Property(e => e.PmaZamiennik).HasColumnName("PMA_Zamiennik");
            entity.Property(e => e.PmaZasob).HasColumnName("PMA_Zasob");
            entity.Property(e => e.PmaZrdNumer).HasColumnName("PMA_ZrdNumer");
            entity.Property(e => e.PmaZrdTyp).HasColumnName("PMA_ZrdTyp");
            entity.Property(e => e.PmaZrealizowano)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("PMA_Zrealizowano");
        });

        modelBuilder.Entity<ProdNadzleceniaLinki>(entity =>
        {
            entity.HasKey(e => e.PnlId).HasName("PNL_Primary");

            entity.ToTable("ProdNadzleceniaLinki", "CDN");

            entity.HasIndex(e => e.PnlPnzid, "PNLPNZ");

            entity.HasIndex(e => new { e.PnlPzlid, e.PnlPnzid }, "PNLPNZPZL").IsUnique();

            entity.HasIndex(e => e.PnlPzlid, "PNLPZL");

            entity.Property(e => e.PnlId).HasColumnName("PNL_Id");
            entity.Property(e => e.PnlPnzid)
                .HasDefaultValue(0)
                .HasColumnName("PNL_PNZId");
            entity.Property(e => e.PnlPzlid)
                .HasDefaultValue(0)
                .HasColumnName("PNL_PZLId");

            entity.HasOne(d => d.PnlPnz).WithMany(p => p.ProdNadzleceniaLinkis)
                .HasForeignKey(d => d.PnlPnzid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PNLPNZ");

            entity.HasOne(d => d.PnlPzl).WithMany(p => p.ProdNadzleceniaLinkis)
                .HasForeignKey(d => d.PnlPzlid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PNLPZL");
        });

        modelBuilder.Entity<ProdNadzlecenium>(entity =>
        {
            entity.HasKey(e => e.PnzId).HasName("PNZ_Primary");

            entity.ToTable("ProdNadzlecenia", "CDN", tb =>
                {
                    tb.HasTrigger("ProdNadzlecenia_DeleteHandler");
                    tb.HasTrigger("ProdNadzlecenia_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PnzDataWystawienia, e.PnzId }, "PNZDataW").IsUnique();

            entity.HasIndex(e => new { e.PnzKnDnumer, e.PnzKnDtyp }, "PNZKnD");

            entity.HasIndex(e => new { e.PnzKntNumer, e.PnzKntTyp }, "PNZKnt");

            entity.HasIndex(e => new { e.PnzRok, e.PnzMiesiac, e.PnzSeria, e.PnzNumer }, "PNZNumer").IsUnique();

            entity.HasIndex(e => e.PnzOddzial, "PNZOddzial");

            entity.HasIndex(e => e.PnzOpWnumer, "PNZOpeW");

            entity.HasIndex(e => e.PnzProjekt, "PNZProjekt");

            entity.HasIndex(e => e.PnzStatus, "PNZStatus");

            entity.Property(e => e.PnzId).HasColumnName("PNZ_Id");
            entity.Property(e => e.PnzCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_CzasModyfikacji");
            entity.Property(e => e.PnzDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_DataWystawienia");
            entity.Property(e => e.PnzDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_DataZamkniecia");
            entity.Property(e => e.PnzDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PNZ_DokumentObcy");
            entity.Property(e => e.PnzFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_FrsId");
            entity.Property(e => e.PnzKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_KnDNumer");
            entity.Property(e => e.PnzKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PNZ_KnDTyp");
            entity.Property(e => e.PnzKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_KntNumer");
            entity.Property(e => e.PnzKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PNZ_KntTyp");
            entity.Property(e => e.PnzLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PNZ_Lp");
            entity.Property(e => e.PnzMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PNZ_Miesiac");
            entity.Property(e => e.PnzNumer)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_Numer");
            entity.Property(e => e.PnzOddzial)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_Oddzial");
            entity.Property(e => e.PnzOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_OpMNumer");
            entity.Property(e => e.PnzOpWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_OpWNumer");
            entity.Property(e => e.PnzOpis)
                .HasMaxLength(3999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PNZ_Opis");
            entity.Property(e => e.PnzPlanWskazaneZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("PNZ_PlanWskazaneZasoby");
            entity.Property(e => e.PnzProjekt)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_Projekt");
            entity.Property(e => e.PnzRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PNZ_Rok");
            entity.Property(e => e.PnzSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PNZ_Seria");
            entity.Property(e => e.PnzStatus)
                .HasDefaultValue(0)
                .HasColumnName("PNZ_Status");
            entity.Property(e => e.PnzUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PNZ_Url");
        });

        modelBuilder.Entity<ProdNormatywRealizacja>(entity =>
        {
            entity.HasKey(e => e.NrzId).HasName("NRZ_Primary");

            entity.ToTable("ProdNormatywRealizacja", "CDN");

            entity.HasIndex(e => new { e.NrzRok, e.NrzMiesiac, e.NrzSeria, e.NrzNumer }, "NRZNrKolejny");

            entity.HasIndex(e => new { e.NrzOpAnumer, e.NrzId }, "NRZOpANumer");

            entity.HasIndex(e => new { e.NrzOpMnumer, e.NrzId }, "NRZOpMNumer");

            entity.HasIndex(e => new { e.NrzOpWnumer, e.NrzId }, "NRZOpWNumer");

            entity.HasIndex(e => new { e.NrzOpZnumer, e.NrzId }, "NRZOpZNumer");

            entity.HasIndex(e => e.NrzProdukt, "NRZProdukt");

            entity.HasIndex(e => e.NrzTechnologia, "NRZTechnologia");

            entity.Property(e => e.NrzId).HasColumnName("NRZ_Id");
            entity.Property(e => e.NrzDataArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_DataArchiwizacji");
            entity.Property(e => e.NrzDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_DataModyfikacji");
            entity.Property(e => e.NrzDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_DataWystawienia");
            entity.Property(e => e.NrzDataZatwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_DataZatwierdzenia");
            entity.Property(e => e.NrzFiltrCzasTylkoRoznice)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_FiltrCzasTylkoRoznice");
            entity.Property(e => e.NrzFiltrIloscTylkoRoznice)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_FiltrIloscTylkoRoznice");
            entity.Property(e => e.NrzFiltrMaterialyNietechnologiczne)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_FiltrMaterialyNietechnologiczne");
            entity.Property(e => e.NrzFiltrMaterialyNiewykorzystaneNaZp)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_FiltrMaterialyNiewykorzystaneNaZP");
            entity.Property(e => e.NrzFiltrowanyTypProduktu)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_FiltrowanyTypProduktu");
            entity.Property(e => e.NrzFrsId)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_FrsID");
            entity.Property(e => e.NrzKolorProguPonizejCzas)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_KolorProguPonizejCzas");
            entity.Property(e => e.NrzKolorProguPonizejMat)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_KolorProguPonizejMat");
            entity.Property(e => e.NrzKolorProguPowyzejCzas)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_KolorProguPowyzejCzas");
            entity.Property(e => e.NrzKolorProguPowyzejMat)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_KolorProguPowyzejMat");
            entity.Property(e => e.NrzKolorProguRownyCzas)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_KolorProguRownyCzas");
            entity.Property(e => e.NrzKolorProguRownyMat)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_KolorProguRownyMat");
            entity.Property(e => e.NrzMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_Miesiac");
            entity.Property(e => e.NrzNumer)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_Numer");
            entity.Property(e => e.NrzOpAnumer)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_OpANumer");
            entity.Property(e => e.NrzOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_OpMNumer");
            entity.Property(e => e.NrzOpWnumer)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_OpWNumer");
            entity.Property(e => e.NrzOpZnumer)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_OpZNumer");
            entity.Property(e => e.NrzOpis)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("NRZ_Opis");
            entity.Property(e => e.NrzPorownujMaxZuzycieCzas)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_PorownujMaxZuzycieCzas");
            entity.Property(e => e.NrzPorownujMaxZuzycieMat)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_PorownujMaxZuzycieMat");
            entity.Property(e => e.NrzPorownujMinZuzycieCzas)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_PorownujMinZuzycieCzas");
            entity.Property(e => e.NrzPorownujMinZuzycieMat)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_PorownujMinZuzycieMat");
            entity.Property(e => e.NrzPorownujSredZuzycieCzas)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_PorownujSredZuzycieCzas");
            entity.Property(e => e.NrzPorownujSredZuzycieMat)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_PorownujSredZuzycieMat");
            entity.Property(e => e.NrzProdukt)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_Produkt");
            entity.Property(e => e.NrzProgZuzyciaCzas)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_ProgZuzyciaCzas");
            entity.Property(e => e.NrzProgZuzyciaMat)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_ProgZuzyciaMat");
            entity.Property(e => e.NrzRok)
                .HasDefaultValue((short)0)
                .HasColumnName("NRZ_Rok");
            entity.Property(e => e.NrzSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRZ_Seria");
            entity.Property(e => e.NrzTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_Technologia");
            entity.Property(e => e.NrzUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRZ_Url");
            entity.Property(e => e.NrzZakresZp)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_ZakresZP");
            entity.Property(e => e.NrzZatwierdzono)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRZ_Zatwierdzono");
            entity.Property(e => e.NrzZpOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_ZpOkresDo");
            entity.Property(e => e.NrzZpOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("NRZ_ZpOkresOd");
            entity.Property(e => e.NrzZuzycieNaIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRZ_ZuzycieNaIlosc");
        });

        modelBuilder.Entity<ProdNormatywRealizacjaCzynnosci>(entity =>
        {
            entity.HasKey(e => e.NrcId).HasName("NRC_Primary");

            entity.ToTable("ProdNormatywRealizacjaCzynnosci", "CDN");

            entity.HasIndex(e => new { e.NrcNormatywId, e.NrcId }, "NRCKeyNormatywId");

            entity.HasIndex(e => new { e.NrcNormatywId, e.NrcPtcOjciec, e.NrcKod, e.NrcTyp }, "NRCKeyNormatywOjciecKodTyp");

            entity.Property(e => e.NrcId).HasColumnName("NRC_Id");
            entity.Property(e => e.NrcFiltr)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRC_Filtr");
            entity.Property(e => e.NrcIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRC_Ilosc");
            entity.Property(e => e.NrcIloscPom)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRC_IloscPom");
            entity.Property(e => e.NrcJednostka)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_Jednostka");
            entity.Property(e => e.NrcJmPom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_JmPom");
            entity.Property(e => e.NrcKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_Kod");
            entity.Property(e => e.NrcKodKop)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_KodKop");
            entity.Property(e => e.NrcKolejnosc)
                .HasDefaultValue(0)
                .HasColumnName("NRC_Kolejnosc");
            entity.Property(e => e.NrcKolor)
                .HasDefaultValue(0)
                .HasColumnName("NRC_Kolor");
            entity.Property(e => e.NrcLp)
                .HasDefaultValue(0)
                .HasColumnName("NRC_Lp");
            entity.Property(e => e.NrcNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_Nazwa");
            entity.Property(e => e.NrcNormatywId)
                .HasDefaultValue(0)
                .HasColumnName("NRC_NormatywId");
            entity.Property(e => e.NrcNrInstrukcji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_NrInstrukcji");
            entity.Property(e => e.NrcPodrzedne)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRC_Podrzedne");
            entity.Property(e => e.NrcPolprodukt)
                .HasDefaultValue(0)
                .HasColumnName("NRC_Polprodukt");
            entity.Property(e => e.NrcPoziom)
                .HasDefaultValue(0)
                .HasColumnName("NRC_Poziom");
            entity.Property(e => e.NrcPtcOjciec)
                .HasDefaultValue(0)
                .HasColumnName("NRC_PTC_Ojciec");
            entity.Property(e => e.NrcQId)
                .HasDefaultValue(0)
                .HasColumnName("NRC_qID");
            entity.Property(e => e.NrcTimeStamp)
                .HasDefaultValue(0)
                .HasColumnName("NRC_TimeStamp");
            entity.Property(e => e.NrcTyp)
                .HasDefaultValue(0)
                .HasColumnName("NRC_Typ");
            entity.Property(e => e.NrcTypMaterialuKtp)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRC_TypMaterialuKTP");
            entity.Property(e => e.NrcTypOperacjiKtp)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRC_TypOperacjiKTP");
            entity.Property(e => e.NrcZamiennik)
                .HasDefaultValue(0)
                .HasColumnName("NRC_Zamiennik");
            entity.Property(e => e.NrcZamiennikIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRC_ZamiennikIlosc");
            entity.Property(e => e.NrcZamiennikJm)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_ZamiennikJm");
            entity.Property(e => e.NrcZamiennikKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("NRC_ZamiennikKod");

            entity.HasOne(d => d.NrcNormatyw).WithMany(p => p.ProdNormatywRealizacjaCzynnoscis)
                .HasForeignKey(d => d.NrcNormatywId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_NRCKeyNormatywId");
        });

        modelBuilder.Entity<ProdNormatywRealizacjaElem>(entity =>
        {
            entity.HasKey(e => e.NreId).HasName("NRE_Primary");

            entity.ToTable("ProdNormatywRealizacjaElem", "CDN");

            entity.HasIndex(e => e.NreMaterial, "NREMaterial");

            entity.HasIndex(e => new { e.NreNormatywId, e.NreId }, "NRENRZ");

            entity.HasIndex(e => new { e.NreNormatywId, e.NreMaterial }, "NRENormatywMaterial");

            entity.HasIndex(e => e.NreOperacja, "NREOperacja");

            entity.Property(e => e.NreId).HasColumnName("NRE_Id");
            entity.Property(e => e.NreIdZpmax)
                .HasDefaultValue(0)
                .HasColumnName("NRE_IdZPMax");
            entity.Property(e => e.NreIdZpmin)
                .HasDefaultValue(0)
                .HasColumnName("NRE_idZPMin");
            entity.Property(e => e.NreIloscWtp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRE_IloscWTP");
            entity.Property(e => e.NreMaksIloscZp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRE_MaksIloscZP");
            entity.Property(e => e.NreMaterial)
                .HasDefaultValue(0)
                .HasColumnName("NRE_Material");
            entity.Property(e => e.NreMaterialNietechnologiczny)
                .HasDefaultValue(0)
                .HasColumnName("NRE_MaterialNietechnologiczny");
            entity.Property(e => e.NreMinIloscZp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRE_MinIloscZP");
            entity.Property(e => e.NreNormatywId)
                .HasDefaultValue(0)
                .HasColumnName("NRE_NormatywId");
            entity.Property(e => e.NreOperacja)
                .HasDefaultValue(0)
                .HasColumnName("NRE_Operacja");
            entity.Property(e => e.NreRodzajWykorzystania)
                .HasDefaultValue((byte)0)
                .HasColumnName("NRE_RodzajWykorzystania");
            entity.Property(e => e.NreSredniaIloscZp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("NRE_SredniaIloscZP");
            entity.Property(e => e.NreTimeStamp)
                .HasDefaultValue(0)
                .HasColumnName("NRE_TimeStamp");
            entity.Property(e => e.NreTypZasobu)
                .HasDefaultValue(0)
                .HasColumnName("NRE_TypZasobu");

            entity.HasOne(d => d.NreNormatyw).WithMany(p => p.ProdNormatywRealizacjaElems)
                .HasForeignKey(d => d.NreNormatywId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_NRENRZ");
        });

        modelBuilder.Entity<ProdNormatywRealizacjaOperElem>(entity =>
        {
            entity.HasKey(e => e.NroId).HasName("NRO_Primary");

            entity.ToTable("ProdNormatywRealizacjaOperElem", "CDN");

            entity.HasIndex(e => new { e.NroNormatywId, e.NroId }, "NRONRZ");

            entity.HasIndex(e => new { e.NroNormatywId, e.NroOperacja }, "NRONormatywOperacja");

            entity.HasIndex(e => e.NroOperacja, "NROOperacja");

            entity.Property(e => e.NroId).HasColumnName("NRO_Id");
            entity.Property(e => e.NroCzasWtp)
                .HasDefaultValue(0)
                .HasColumnName("NRO_CzasWTP");
            entity.Property(e => e.NroIdZpmax)
                .HasDefaultValue(0)
                .HasColumnName("NRO_idZPMax");
            entity.Property(e => e.NroIdZpmin)
                .HasDefaultValue(0)
                .HasColumnName("NRO_idZPMin");
            entity.Property(e => e.NroMaksCzasZp)
                .HasDefaultValue(0)
                .HasColumnName("NRO_MaksCzasZP");
            entity.Property(e => e.NroMinCzasZp)
                .HasDefaultValue(0)
                .HasColumnName("NRO_MinCzasZP");
            entity.Property(e => e.NroNormatywId)
                .HasDefaultValue(0)
                .HasColumnName("NRO_NormatywId");
            entity.Property(e => e.NroOperacja)
                .HasDefaultValue(0)
                .HasColumnName("NRO_Operacja");
            entity.Property(e => e.NroSredniCzasZp)
                .HasDefaultValue(0)
                .HasColumnName("NRO_SredniCzasZP");
            entity.Property(e => e.NroTimeStamp)
                .HasDefaultValue(0)
                .HasColumnName("NRO_TimeStamp");

            entity.HasOne(d => d.NroNormatyw).WithMany(p => p.ProdNormatywRealizacjaOperElems)
                .HasForeignKey(d => d.NroNormatywId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_NRONRZ");
        });

        modelBuilder.Entity<ProdNormatywZlecenium>(entity =>
        {
            entity.HasKey(e => e.NzpId).HasName("NZP_Primary");

            entity.ToTable("ProdNormatywZlecenia", "CDN");

            entity.HasIndex(e => new { e.NzpNormatywId, e.NzpId }, "NZPNormatyw");

            entity.HasIndex(e => new { e.NzpNormatywId, e.NzpZlecenie }, "NZPNormatywZlecenie");

            entity.HasIndex(e => e.NzpZlecenie, "NZPZlecenie");

            entity.Property(e => e.NzpId).HasColumnName("NZP_Id");
            entity.Property(e => e.NzpNormatywId)
                .HasDefaultValue(0)
                .HasColumnName("NZP_NormatywId");
            entity.Property(e => e.NzpTimeStamp)
                .HasDefaultValue(0)
                .HasColumnName("NZP_TimeStamp");
            entity.Property(e => e.NzpZasob)
                .HasDefaultValue(0)
                .HasColumnName("NZP_Zasob");
            entity.Property(e => e.NzpZlecenie)
                .HasDefaultValue(0)
                .HasColumnName("NZP_Zlecenie");

            entity.HasOne(d => d.NzpNormatyw).WithMany(p => p.ProdNormatywZlecenia)
                .HasForeignKey(d => d.NzpNormatywId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_NZPNormatyw");
        });

        modelBuilder.Entity<ProdObiekty>(entity =>
        {
            entity.HasKey(e => e.PobId).HasName("POB_Primary");

            entity.ToTable("ProdObiekty", "CDN", tb =>
                {
                    tb.HasTrigger("ProdObiekty_Archiwalny");
                    tb.HasTrigger("ProdObiekty_ArchiwizujPolaczeniaZCzujnikami");
                    tb.HasTrigger("ProdObiekty_DeleteHandler");
                    tb.HasTrigger("ProdObiekty_InsertUpdateHandler");
                    tb.HasTrigger("ProdObiekty_UsunPotomne");
                });

            entity.HasIndex(e => e.PobStatusNarzedzia, "POBKeyStatusNarzedzia");

            entity.HasIndex(e => e.PobKod, "POBKod").IsUnique();

            entity.HasIndex(e => e.PobOjciec, "POBOjciec");

            entity.HasIndex(e => e.PobRodzajZasobu, "pobKeyRodzajZasobu");

            entity.Property(e => e.PobId).HasColumnName("POB_Id");
            entity.Property(e => e.PobArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_Archiwalny");
            entity.Property(e => e.PobDopuszczaZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_DopuszczaZasoby");
            entity.Property(e => e.PobDostepnyWmes)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_DostepnyWMES");
            entity.Property(e => e.PobDostepnyWmobile)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_DostepnyWMobile");
            entity.Property(e => e.PobKalendarz)
                .HasDefaultValue(0)
                .HasColumnName("POB_Kalendarz");
            entity.Property(e => e.PobKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POB_Kod");
            entity.Property(e => e.PobKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POB_Konto");
            entity.Property(e => e.PobNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POB_Nazwa");
            entity.Property(e => e.PobNieograniczonaZdolnoscProd)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_NieograniczonaZdolnoscProd");
            entity.Property(e => e.PobNumer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POB_Numer");
            entity.Property(e => e.PobObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("POB_ObiNumer");
            entity.Property(e => e.PobObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("POB_ObiTyp");
            entity.Property(e => e.PobOddzial)
                .HasDefaultValue(0)
                .HasColumnName("POB_Oddzial");
            entity.Property(e => e.PobOjciec)
                .HasDefaultValue(0)
                .HasColumnName("POB_Ojciec");
            entity.Property(e => e.PobRejestrowacUzycie)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_RejestrowacUzycie");
            entity.Property(e => e.PobRejestrowacZuzycie)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_RejestrowacZuzycie");
            entity.Property(e => e.PobRodzajZasobu)
                .HasDefaultValue(0)
                .HasColumnName("POB_RodzajZasobu");
            entity.Property(e => e.PobStatusNarzedzia)
                .HasDefaultValue(0)
                .HasColumnName("POB_StatusNarzedzia");
            entity.Property(e => e.PobStawkaCzas)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POB_StawkaCzas");
            entity.Property(e => e.PobStawkaCzasAtr)
                .HasDefaultValue(0)
                .HasColumnName("POB_StawkaCzasAtr");
            entity.Property(e => e.PobStawkaCzasM)
                .HasDefaultValue(0)
                .HasColumnName("POB_StawkaCzasM");
            entity.Property(e => e.PobStawkaCzasMjedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_StawkaCzasMJedn");
            entity.Property(e => e.PobStawkaIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POB_StawkaIlosc");
            entity.Property(e => e.PobStawkaIloscAtr)
                .HasDefaultValue(0)
                .HasColumnName("POB_StawkaIloscAtr");
            entity.Property(e => e.PobStawkaIloscM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("POB_StawkaIloscM");
            entity.Property(e => e.PobStawkaStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POB_StawkaStala");
            entity.Property(e => e.PobStawkaStalaAtr)
                .HasDefaultValue(0)
                .HasColumnName("POB_StawkaStalaAtr");
            entity.Property(e => e.PobUwzglednijWnrSeryjnym)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_UwzglednijWNrSeryjnym");
            entity.Property(e => e.PobWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_WMS");
            entity.Property(e => e.PobZmianaCzas)
                .HasDefaultValue(0)
                .HasColumnName("POB_ZmianaCzas");
            entity.Property(e => e.PobZmianaCzasJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POB_ZmianaCzasJedn");
            entity.Property(e => e.PobZmianaStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POB_ZmianaStawka");
            entity.Property(e => e.PobZmianaStawkaAtr)
                .HasDefaultValue(0)
                .HasColumnName("POB_ZmianaStawkaAtr");
        });

        modelBuilder.Entity<ProdObiektyCzujniki>(entity =>
        {
            entity.HasKey(e => e.PocId).HasName("POC_Primary");

            entity.ToTable("ProdObiektyCzujniki", "CDN");

            entity.HasIndex(e => e.PocPczuid, "POCCzujnik");

            entity.HasIndex(e => e.PocPobid, "POCObiekt");

            entity.HasIndex(e => new { e.PocPczuid, e.PocPobid, e.PocAktywnyDo }, "POCObiektyCzujniki").IsUnique();

            entity.Property(e => e.PocId).HasColumnName("POC_Id");
            entity.Property(e => e.PocAktywnyDo)
                .HasDefaultValue(0)
                .HasColumnName("POC_AktywnyDo");
            entity.Property(e => e.PocAktywnyOd)
                .HasDefaultValue(0)
                .HasColumnName("POC_AktywnyOd");
            entity.Property(e => e.PocOpeDolaczajacy)
                .HasDefaultValue(0)
                .HasColumnName("POC_OpeDolaczajacy");
            entity.Property(e => e.PocPczuid)
                .HasDefaultValue(0)
                .HasColumnName("POC_PCZUId");
            entity.Property(e => e.PocPobid)
                .HasDefaultValue(0)
                .HasColumnName("POC_POBId");

            entity.HasOne(d => d.PocPczu).WithMany(p => p.ProdObiektyCzujnikis)
                .HasForeignKey(d => d.PocPczuid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_POCCzujnik");

            entity.HasOne(d => d.PocPob).WithMany(p => p.ProdObiektyCzujnikis)
                .HasForeignKey(d => d.PocPobid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_POCObiekt");
        });

        modelBuilder.Entity<ProdObiektyDoPlanu>(entity =>
        {
            entity.HasKey(e => e.PoplId).HasName("POPL_Primary");

            entity.ToTable("ProdObiektyDoPlanu", "CDN", tb => tb.HasTrigger("ProdObiektyDoPlanu_InsertUpdateHandler"));

            entity.HasIndex(e => e.PoplPfuid, "POPLPFUId");

            entity.HasIndex(e => e.PoplPobid, "POPLPOBId");

            entity.HasIndex(e => e.PoplPtcid, "POPLPTCId");

            entity.HasIndex(e => e.PoplPzlid, "POPLPZLId");

            entity.Property(e => e.PoplId).HasColumnName("POPL_Id");
            entity.Property(e => e.PoplPfuid)
                .HasDefaultValue(0)
                .HasColumnName("POPL_PFUId");
            entity.Property(e => e.PoplPobid)
                .HasDefaultValue(0)
                .HasColumnName("POPL_POBId");
            entity.Property(e => e.PoplPoblp)
                .HasDefaultValue((short)0)
                .HasColumnName("POPL_POBLp");
            entity.Property(e => e.PoplPtcid)
                .HasDefaultValue(0)
                .HasColumnName("POPL_PTCId");
            entity.Property(e => e.PoplPzlid)
                .HasDefaultValue(0)
                .HasColumnName("POPL_PZLId");

            entity.HasOne(d => d.PoplPtc).WithMany(p => p.ProdObiektyDoPlanus)
                .HasForeignKey(d => d.PoplPtcid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_POPLPTCId");

            entity.HasOne(d => d.PoplPzl).WithMany(p => p.ProdObiektyDoPlanus)
                .HasForeignKey(d => d.PoplPzlid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_POPLPZLId");
        });

        modelBuilder.Entity<ProdObiektyFunkcje>(entity =>
        {
            entity.HasKey(e => e.PofId).HasName("POF_Primary");

            entity.ToTable("ProdObiektyFunkcje", "CDN", tb =>
                {
                    tb.HasTrigger("ProdObiektyFunkcje_AktualizujDomyslnyDlaZasobu");
                    tb.HasTrigger("ProdObiektyFunkcje_Duplikacje");
                    tb.HasTrigger("ProdObiektyFunkcje_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PofFunkcja, "POF");

            entity.HasIndex(e => new { e.PofObiekt, e.PofObiTyp, e.PofFunkcja, e.PofOddzial }, "POFObiekt");

            entity.HasIndex(e => e.PofOddzial, "POFOddzial");

            entity.HasIndex(e => e.PofObiekt, "POFPOBId");

            entity.Property(e => e.PofId).HasColumnName("POF_Id");
            entity.Property(e => e.PofCzas)
                .HasDefaultValue(0)
                .HasColumnName("POF_Czas");
            entity.Property(e => e.PofCzasJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POF_CzasJedn");
            entity.Property(e => e.PofCzasPrzygotowania)
                .HasDefaultValue(0)
                .HasColumnName("POF_CzasPrzygotowania");
            entity.Property(e => e.PofCzasPrzygotowaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POF_CzasPrzygotowaniaJedn");
            entity.Property(e => e.PofCzasZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("POF_CzasZakonczenia");
            entity.Property(e => e.PofCzasZakonczeniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POF_CzasZakonczeniaJedn");
            entity.Property(e => e.PofCzyStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("POF_CzyStawki");
            entity.Property(e => e.PofDomyslneDlaZasobu)
                .HasDefaultValue((byte)0)
                .HasColumnName("POF_DomyslneDlaZasobu");
            entity.Property(e => e.PofFunkcja)
                .HasDefaultValue(0)
                .HasColumnName("POF_Funkcja");
            entity.Property(e => e.PofGrupa)
                .HasDefaultValue(0)
                .HasColumnName("POF_Grupa");
            entity.Property(e => e.PofJednostka)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POF_Jednostka");
            entity.Property(e => e.PofLp)
                .HasDefaultValue(0)
                .HasColumnName("POF_Lp");
            entity.Property(e => e.PofMaxIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("POF_MaxIlosc");
            entity.Property(e => e.PofMinIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("POF_MinIlosc");
            entity.Property(e => e.PofObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("POF_ObiTyp");
            entity.Property(e => e.PofObiekt)
                .HasDefaultValue(0)
                .HasColumnName("POF_Obiekt");
            entity.Property(e => e.PofOddzial)
                .HasDefaultValue(0)
                .HasColumnName("POF_Oddzial");
            entity.Property(e => e.PofStawkaCzas)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POF_StawkaCzas");
            entity.Property(e => e.PofStawkaCzasAtr)
                .HasDefaultValue(0)
                .HasColumnName("POF_StawkaCzasAtr");
            entity.Property(e => e.PofStawkaCzasM)
                .HasDefaultValue(0)
                .HasColumnName("POF_StawkaCzasM");
            entity.Property(e => e.PofStawkaCzasMjedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POF_StawkaCzasMJedn");
            entity.Property(e => e.PofStawkaIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POF_StawkaIlosc");
            entity.Property(e => e.PofStawkaIloscAtr)
                .HasDefaultValue(0)
                .HasColumnName("POF_StawkaIloscAtr");
            entity.Property(e => e.PofStawkaIloscM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("POF_StawkaIloscM");
            entity.Property(e => e.PofStawkaPrzygotowania)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POF_StawkaPrzygotowania");
            entity.Property(e => e.PofStawkaPrzygotowaniaAtr)
                .HasDefaultValue(0)
                .HasColumnName("POF_StawkaPrzygotowaniaAtr");
            entity.Property(e => e.PofStawkaStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POF_StawkaStala");
            entity.Property(e => e.PofStawkaStalaAtr)
                .HasDefaultValue(0)
                .HasColumnName("POF_StawkaStalaAtr");
            entity.Property(e => e.PofStawkaZakonczenia)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("POF_StawkaZakonczenia");
            entity.Property(e => e.PofStawkaZakonczeniaAtr)
                .HasDefaultValue(0)
                .HasColumnName("POF_StawkaZakonczeniaAtr");
            entity.Property(e => e.PofWidocznosc)
                .HasDefaultValue((byte)3)
                .HasColumnName("POF_Widocznosc");
            entity.Property(e => e.PofWydajnoscCzas)
                .HasDefaultValue(0)
                .HasColumnName("POF_WydajnoscCzas");
            entity.Property(e => e.PofWydajnoscCzasJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POF_WydajnoscCzasJedn");
            entity.Property(e => e.PofWydajnoscIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("POF_WydajnoscIlosc");
        });

        modelBuilder.Entity<ProdObiektyUzycie>(entity =>
        {
            entity.HasKey(e => e.PouId).HasName("POU_Primary");

            entity.ToTable("ProdObiektyUzycie", "CDN", tb =>
                {
                    tb.HasTrigger("ProdObiektyUzycie_InsertUpdateHandler");
                    tb.HasTrigger("ProdObiektyUzycie_PrzypisywanieZdanDoWydan");
                    tb.HasTrigger("ProdObiektyUzycie_PrzypisywanieZdanDoWydanDelete");
                });

            entity.HasIndex(e => e.PouPrzyczynaLikwidacji, "pouKeyPrzyczynaLikwidacji");

            entity.HasIndex(e => e.PouStatusNarzedzia, "pouKeyStatusNarzedzia");

            entity.HasIndex(e => new { e.PouTermin, e.PouObiekt }, "pouKeyTerminObiekt").IsUnique();

            entity.HasIndex(e => new { e.PouObiektPrzyjmujacy, e.PouTermin, e.PouObiekt }, "pou_KeyObiektPrzyjmujacyTermin");

            entity.HasIndex(e => new { e.PouPrcNumer, e.PouTermin, e.PouObiekt }, "pou_KeyPrcTermin");

            entity.HasIndex(e => new { e.PouObiekt, e.PouTermin }, "pou_ObiektTermin").IsUnique();

            entity.Property(e => e.PouId).HasColumnName("POU_Id");
            entity.Property(e => e.PouAkcja)
                .HasDefaultValue((short)0)
                .HasColumnName("POU_Akcja");
            entity.Property(e => e.PouFaktycznyTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("POU_FaktycznyTerminZwrotu");
            entity.Property(e => e.PouInformujOprzekroczeniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("POU_InformujOPrzekroczeniu");
            entity.Property(e => e.PouObiekt)
                .HasDefaultValue(0)
                .HasColumnName("POU_Obiekt");
            entity.Property(e => e.PouObiektPrzyjmujacy)
                .HasDefaultValue(0)
                .HasColumnName("POU_ObiektPrzyjmujacy");
            entity.Property(e => e.PouOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POU_Opis");
            entity.Property(e => e.PouPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("POU_PrcNumer");
            entity.Property(e => e.PouPrzyczynaLikwidacji)
                .HasDefaultValue(0)
                .HasColumnName("POU_PrzyczynaLikwidacji");
            entity.Property(e => e.PouStatusNarzedzia)
                .HasDefaultValue(0)
                .HasColumnName("POU_StatusNarzedzia");
            entity.Property(e => e.PouTermin)
                .HasDefaultValue(0)
                .HasColumnName("POU_Termin");
            entity.Property(e => e.PouTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("POU_TerminZwrotu");

            entity.HasOne(d => d.PouObiektNavigation).WithMany(p => p.ProdObiektyUzycies)
                .HasForeignKey(d => d.PouObiekt)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_pou_ObiektTermin");
        });

        modelBuilder.Entity<ProdObiektyUzycieAktualneView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProdObiektyUzycieAktualneView", "CDN");

            entity.Property(e => e.PovKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("POV_Kod");
            entity.Property(e => e.PovNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POV_Nazwa");
            entity.Property(e => e.PovObiekt).HasColumnName("POV_Obiekt");
            entity.Property(e => e.PovTermin).HasColumnName("POV_Termin");
            entity.Property(e => e.PovTerminOstUzycia).HasColumnName("POV_TerminOstUzycia");
            entity.Property(e => e.PovTerminZdania).HasColumnName("POV_TerminZdania");
        });

        modelBuilder.Entity<ProdOkresy>(entity =>
        {
            entity.HasKey(e => e.PokId).HasName("POK_Primary");

            entity.ToTable("ProdOkresy", "CDN", tb =>
                {
                    tb.HasTrigger("ProdOkresyAlias_InsertUpdateHandler");
                    tb.HasTrigger("ProdOkresy_DeleteHandler");
                    tb.HasTrigger("ProdOkresy_Delete_AktualizujMRPwTWR");
                    tb.HasTrigger("ProdOkresy_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PokObiNumer, e.PokObiTyp, e.PokDataDo, e.PokDataOd }, "POKData");

            entity.HasIndex(e => e.PokPrzyczynaPrzestoju, "POKPrzyczynaPrzestoju");

            entity.HasIndex(e => e.PokStatus, "POKStatus");

            entity.HasIndex(e => new { e.PokTypDnia, e.PokOkres, e.PokNazwa }, "POKTypDnia");

            entity.HasIndex(e => new { e.PokTyp, e.PokDataOd }, "pokTypDataOd");

            entity.Property(e => e.PokId).HasColumnName("POK_Id");
            entity.Property(e => e.PokCzasDostawy)
                .HasDefaultValue(0)
                .HasColumnName("POK_CzasDostawy");
            entity.Property(e => e.PokCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("POK_CzasModyfikacji");
            entity.Property(e => e.PokCzasOd)
                .HasDefaultValue(0)
                .HasColumnName("POK_CzasOd");
            entity.Property(e => e.PokCzasPrzerwy)
                .HasDefaultValue(0)
                .HasColumnName("POK_CzasPrzerwy");
            entity.Property(e => e.PokCzasTrwaniaOkresu)
                .HasDefaultValue(0)
                .HasColumnName("POK_CzasTrwaniaOkresu");
            entity.Property(e => e.PokCzasTrwaniaOkresuJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_CzasTrwaniaOkresuJedn");
            entity.Property(e => e.PokDataDo)
                .HasDefaultValue(0)
                .HasColumnName("POK_DataDo");
            entity.Property(e => e.PokDataOd)
                .HasDefaultValue(0)
                .HasColumnName("POK_DataOd");
            entity.Property(e => e.PokDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("POK_DataWystawienia");
            entity.Property(e => e.PokDni)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_Dni");
            entity.Property(e => e.PokDostepny)
                .HasDefaultValue((short)0)
                .HasColumnName("POK_Dostepny");
            entity.Property(e => e.PokGenerowanieZsrdlaPrzestoju)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_GenerowanieZSRDlaPrzestoju");
            entity.Property(e => e.PokNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POK_Nazwa");
            entity.Property(e => e.PokObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("POK_ObiNumer");
            entity.Property(e => e.PokObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("POK_ObiTyp");
            entity.Property(e => e.PokOkres)
                .HasDefaultValue(0)
                .HasColumnName("POK_Okres");
            entity.Property(e => e.PokOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("POK_OkresDo");
            entity.Property(e => e.PokOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("POK_OkresOd");
            entity.Property(e => e.PokOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("POK_OpMNumer");
            entity.Property(e => e.PokOpWnumer)
                .HasDefaultValue(0)
                .HasColumnName("POK_OpWNumer");
            entity.Property(e => e.PokOpis)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("POK_Opis");
            entity.Property(e => e.PokPlanowanyPrzestoj)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_PlanowanyPrzestoj");
            entity.Property(e => e.PokPochodzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_Pochodzenie");
            entity.Property(e => e.PokPriorytetOkresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_PriorytetOkresu");
            entity.Property(e => e.PokPrzestoj)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_Przestoj");
            entity.Property(e => e.PokPrzyczynaPrzestoju)
                .HasDefaultValue(0)
                .HasColumnName("POK_PrzyczynaPrzestoju");
            entity.Property(e => e.PokRodzajPracy)
                .HasDefaultValue(0)
                .HasColumnName("POK_RodzajPracy");
            entity.Property(e => e.PokSposobDostawy)
                .HasDefaultValue((byte)0)
                .HasColumnName("POK_SposobDostawy");
            entity.Property(e => e.PokStatus)
                .HasDefaultValue(0)
                .HasColumnName("POK_Status");
            entity.Property(e => e.PokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("POK_Typ");
            entity.Property(e => e.PokTypDnia)
                .HasDefaultValue(0)
                .HasColumnName("POK_TypDnia");
            entity.Property(e => e.PokTypOkresu)
                .HasDefaultValue(0)
                .HasColumnName("POK_TypOkresu");
        });

        modelBuilder.Entity<ProdOperacjeMagazyny>(entity =>
        {
            entity.HasKey(e => e.PomId).HasName("POM_Primary");

            entity.ToTable("ProdOperacjeMagazyny", "CDN", tb => tb.HasTrigger("ProdOperacjeMagazyny_InsertUpdateHandler"));

            entity.Property(e => e.PomId).HasColumnName("POM_Id");
            entity.Property(e => e.PomMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("POM_MagNumer");
            entity.Property(e => e.PomPczid)
                .HasDefaultValue(0)
                .HasColumnName("POM_PCZId");
            entity.Property(e => e.PomPtzid)
                .HasDefaultValue(0)
                .HasColumnName("POM_PTZId");
        });

        modelBuilder.Entity<ProdOperacjePauzy>(entity =>
        {
            entity.HasKey(e => e.PpyId).HasName("PPY_Primary");

            entity.ToTable("ProdOperacjePauzy", "CDN", tb =>
                {
                    tb.HasTrigger("ProdOperacjePauzy_InsertUpdateHandler");
                    tb.HasTrigger("ProdOperacjePauzy_StatusOperacji");
                });

            entity.HasIndex(e => e.PpyOpeNumer, "PPYOpeNumer");

            entity.HasIndex(e => e.PpyPczid, "PPYPCZ");

            entity.HasIndex(e => e.PpyPrzyczynaPauzy, "PPYPrzyczyna");

            entity.Property(e => e.PpyId).HasColumnName("PPY_Id");
            entity.Property(e => e.PpyCzasRozliczeniowy)
                .HasDefaultValue(0)
                .HasColumnName("PPY_CzasRozliczeniowy");
            entity.Property(e => e.PpyDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("PPY_DataDodania");
            entity.Property(e => e.PpyOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPY_OpeNumer");
            entity.Property(e => e.PpyPczid)
                .HasDefaultValue(0)
                .HasColumnName("PPY_PCZId");
            entity.Property(e => e.PpyPrzyczynaPauzy)
                .HasDefaultValue(0)
                .HasColumnName("PPY_PrzyczynaPauzy");
            entity.Property(e => e.PpyTerminKoniec)
                .HasDefaultValue(0)
                .HasColumnName("PPY_TerminKoniec");
            entity.Property(e => e.PpyTerminStart)
                .HasDefaultValue(0)
                .HasColumnName("PPY_TerminStart");

            entity.HasOne(d => d.PpyPcz).WithMany(p => p.ProdOperacjePauzies)
                .HasForeignKey(d => d.PpyPczid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPYPCZ");
        });

        modelBuilder.Entity<ProdOperacjePominiete>(entity =>
        {
            entity.HasKey(e => e.PoppId).HasName("POPP_Primary");

            entity.ToTable("ProdOperacjePominiete", "CDN", tb => tb.HasTrigger("ProdOperacjePominiete_InsertUpdateHandler"));

            entity.HasIndex(e => e.PoppPczid, "POPPPCZ");

            entity.HasIndex(e => e.PoppPrzyczynaPominiecia, "POPPPrzyczyna");

            entity.Property(e => e.PoppId).HasColumnName("POPP_Id");
            entity.Property(e => e.PoppDataPominiecia)
                .HasDefaultValue(0)
                .HasColumnName("POPP_DataPominiecia");
            entity.Property(e => e.PoppOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("POPP_OpeNumer");
            entity.Property(e => e.PoppPczid)
                .HasDefaultValue(0)
                .HasColumnName("POPP_PCZId");
            entity.Property(e => e.PoppPrzyczynaPominiecia)
                .HasDefaultValue(0)
                .HasColumnName("POPP_PrzyczynaPominiecia");
        });

        modelBuilder.Entity<ProdOperacjePowiazane>(entity =>
        {
            entity.HasKey(e => e.PopId).HasName("POP_Primary");

            entity.ToTable("ProdOperacjePowiazane", "CDN", tb => tb.HasTrigger("ProdOperacjePowiazane_InsertUpdateHandler"));

            entity.HasIndex(e => e.PopPczId, "POPCzynnosc");

            entity.HasIndex(e => new { e.PopPczId, e.PopPrzedPczId }, "POPCzynnosci").IsUnique();

            entity.HasIndex(e => e.PopPrzedPczId, "POPPrzedCzynnosc");

            entity.Property(e => e.PopId).HasColumnName("POP_Id");
            entity.Property(e => e.PopPczId)
                .HasDefaultValue(0)
                .HasColumnName("POP_PczId");
            entity.Property(e => e.PopPrzedPczId)
                .HasDefaultValue(0)
                .HasColumnName("POP_PrzedPczId");
        });

        modelBuilder.Entity<ProdParamKjnormyObiektow>(entity =>
        {
            entity.HasKey(e => e.PpkoId).HasName("PPKO_Primary");

            entity.ToTable("ProdParamKJNormyObiektow", "CDN", tb =>
                {
                    tb.HasTrigger("ProdParamKJNormyObiektow_DeleteHandler");
                    tb.HasTrigger("ProdParamKJNormyObiektow_HistoriaZmian");
                    tb.HasTrigger("ProdParamKJNormyObiektow_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PpkoLp, "PPKOKJNLp");

            entity.HasIndex(e => new { e.PpkoOgidNumer, e.PpkoOgidTyp }, "PPKOOGid");

            entity.HasIndex(e => e.PpkoPkjid, "PPKOPKJId");

            entity.HasIndex(e => new { e.PpkoPkjid, e.PpkoOgidTyp, e.PpkoOgidNumer }, "PPKOPKJO");

            entity.HasIndex(e => e.PpkoWkjid, "PPKOWKJId");

            entity.Property(e => e.PpkoId).HasColumnName("PPKO_Id");
            entity.Property(e => e.PpkoJednostka)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPKO_Jednostka");
            entity.Property(e => e.PpkoLp)
                .HasDefaultValue(1)
                .HasColumnName("PPKO_Lp");
            entity.Property(e => e.PpkoOgidNumer).HasColumnName("PPKO_OGidNumer");
            entity.Property(e => e.PpkoOgidTyp).HasColumnName("PPKO_OGidTyp");
            entity.Property(e => e.PpkoOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPKO_Opis");
            entity.Property(e => e.PpkoPkjid).HasColumnName("PPKO_PKJId");
            entity.Property(e => e.PpkoUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPKO_Url");
            entity.Property(e => e.PpkoWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPKO_Wartosc");
            entity.Property(e => e.PpkoWkjid)
                .HasDefaultValue(0)
                .HasColumnName("PPKO_WKJId");
            entity.Property(e => e.PpkoWynikIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PPKO_WynikIlosc");

            entity.HasOne(d => d.PpkoPkj).WithMany(p => p.ProdParamKjnormyObiektows)
                .HasForeignKey(d => d.PpkoPkjid)
                .HasConstraintName("FK_PPKOPKJId");
        });

        modelBuilder.Entity<ProdParametryKj>(entity =>
        {
            entity.HasKey(e => e.PkjId).HasName("PKJ_Primary");

            entity.ToTable("ProdParametryKJ", "CDN");

            entity.Property(e => e.PkjId).HasColumnName("PKJ_Id");
            entity.Property(e => e.PkjArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKJ_Archiwalny");
            entity.Property(e => e.PkjDataM)
                .HasDefaultValue(0)
                .HasColumnName("PKJ_DataM");
            entity.Property(e => e.PkjDataW)
                .HasDefaultValue(0)
                .HasColumnName("PKJ_DataW");
            entity.Property(e => e.PkjFormat)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJ_Format");
            entity.Property(e => e.PkjKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJ_Kod");
            entity.Property(e => e.PkjLp)
                .HasDefaultValue(0)
                .HasColumnName("PKJ_Lp");
            entity.Property(e => e.PkjNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJ_Nazwa");
            entity.Property(e => e.PkjOpeM)
                .HasDefaultValue(0)
                .HasColumnName("PKJ_OpeM");
            entity.Property(e => e.PkjOpeW)
                .HasDefaultValue(0)
                .HasColumnName("PKJ_OpeW");
            entity.Property(e => e.PkjTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKJ_Typ");
            entity.Property(e => e.PkjZamknieta)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKJ_Zamknieta");
        });

        modelBuilder.Entity<ProdParametryKjnormy>(entity =>
        {
            entity.HasKey(e => e.KjnId).HasName("KJN_Primary");

            entity.ToTable("ProdParametryKJNormy", "CDN");

            entity.HasIndex(e => e.KjnPpkoid, "KJNPPKOId");

            entity.Property(e => e.KjnId).HasColumnName("KJN_Id");
            entity.Property(e => e.KjnDomyslna)
                .HasDefaultValue((byte)0)
                .HasColumnName("KJN_Domyslna");
            entity.Property(e => e.KjnPpkoid)
                .HasDefaultValue(0)
                .HasColumnName("KJN_PPKOId");
            entity.Property(e => e.KjnWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KJN_Wartosc");
            entity.Property(e => e.KjnZakresDo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("KJN_ZakresDo");
            entity.Property(e => e.KjnZakresOd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("KJN_ZakresOd");
            entity.Property(e => e.KjnZgodna)
                .HasDefaultValue((byte)0)
                .HasColumnName("KJN_Zgodna");

            entity.HasOne(d => d.KjnPpko).WithMany(p => p.ProdParametryKjnormies)
                .HasForeignKey(d => d.KjnPpkoid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_KJNPPKOId");
        });

        modelBuilder.Entity<ProdPkjhistoriaZmian>(entity =>
        {
            entity.HasKey(e => e.PkjhId).HasName("PKJH_Primary");

            entity.ToTable("ProdPKJHistoriaZmian", "CDN");

            entity.HasIndex(e => e.PkjhPkjid, "PKJHPKJ");

            entity.Property(e => e.PkjhId).HasColumnName("PKJH_Id");
            entity.Property(e => e.PkjhCzasZmiany)
                .HasDefaultValue(0)
                .HasColumnName("PKJH_CzasZmiany");
            entity.Property(e => e.PkjhKolumna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJH_Kolumna");
            entity.Property(e => e.PkjhNowaWartosc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJH_NowaWartosc");
            entity.Property(e => e.PkjhObiNazwa)
                .HasMaxLength(349)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJH_ObiNazwa");
            entity.Property(e => e.PkjhObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJH_ObiNumer");
            entity.Property(e => e.PkjhObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJH_ObiTyp");
            entity.Property(e => e.PkjhOpeIdent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJH_OpeIdent");
            entity.Property(e => e.PkjhPkjid)
                .HasDefaultValue(0)
                .HasColumnName("PKJH_PKJId");
            entity.Property(e => e.PkjhStaraWartosc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJH_StaraWartosc");
            entity.Property(e => e.PkjhTypZmiany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKJH_TypZmiany");

            entity.HasOne(d => d.PkjhPkj).WithMany(p => p.ProdPkjhistoriaZmians)
                .HasForeignKey(d => d.PkjhPkjid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PKJHPKJ");
        });

        modelBuilder.Entity<ProdPkjnag>(entity =>
        {
            entity.HasKey(e => e.PkjnId).HasName("PKJN_Primary");

            entity.ToTable("ProdPKJNag", "CDN", tb =>
                {
                    tb.HasTrigger("ProdPKJNag_DeleteHandler");
                    tb.HasTrigger("ProdPKJNag_HistoriaZmian");
                    tb.HasTrigger("ProdPKJNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PkjnMagNumer, e.PkjnMagTyp }, "PKJNMagazyn");

            entity.HasIndex(e => new { e.PkjnRok, e.PkjnMiesiac, e.PkjnSeria, e.PkjnNumer }, "PKJNNumer").IsUnique();

            entity.HasIndex(e => new { e.PkjnObiTyp, e.PkjnObiNumer, e.PkjnObiLp }, "PKJNObi");

            entity.HasIndex(e => e.PkjnOpMnumer, "PKJNOpM");

            entity.HasIndex(e => e.PkjnOpWnumer, "PKJNOpW");

            entity.HasIndex(e => e.PkjnOpZnumer, "PKJNOpZ");

            entity.HasIndex(e => e.PkjnPczid, "PKJNPCZ");

            entity.HasIndex(e => e.PkjnPtzid, "PKJNPTZ");

            entity.HasIndex(e => e.PkjnPzlid, "PKJNPZL");

            entity.HasIndex(e => e.PkjnPrzyczynaOdrzucenia, "PKJNPrzyczynaO");

            entity.HasIndex(e => e.PkjnStatus, "PKJNStatus");

            entity.HasIndex(e => new { e.PkjnTwrNumer, e.PkjnTwrTyp }, "PKJNTowar");

            entity.HasIndex(e => e.PkjnWynikKj, "PKJNWynikKJ");

            entity.Property(e => e.PkjnId).HasColumnName("PKJN_Id");
            entity.Property(e => e.PkjnDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_DataCzasM");
            entity.Property(e => e.PkjnDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_DataCzasW");
            entity.Property(e => e.PkjnDataCzasZ)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_DataCzasZ");
            entity.Property(e => e.PkjnFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_FrsId");
            entity.Property(e => e.PkjnIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PKJN_Ilosc");
            entity.Property(e => e.PkjnIloscNiezgodnych)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PKJN_IloscNiezgodnych");
            entity.Property(e => e.PkjnIloscZgodnych)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PKJN_IloscZgodnych");
            entity.Property(e => e.PkjnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJN_Lp");
            entity.Property(e => e.PkjnMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_MagNumer");
            entity.Property(e => e.PkjnMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJN_MagTyp");
            entity.Property(e => e.PkjnMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKJN_Miesiac");
            entity.Property(e => e.PkjnNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_Numer");
            entity.Property(e => e.PkjnObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_ObiFirma");
            entity.Property(e => e.PkjnObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJN_ObiLp");
            entity.Property(e => e.PkjnObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_ObiNumer");
            entity.Property(e => e.PkjnObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJN_ObiTyp");
            entity.Property(e => e.PkjnObszarKj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKJN_ObszarKJ");
            entity.Property(e => e.PkjnOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_OpMNumer");
            entity.Property(e => e.PkjnOpWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_OpWNumer");
            entity.Property(e => e.PkjnOpZnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_OpZNumer");
            entity.Property(e => e.PkjnOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJN_Opis");
            entity.Property(e => e.PkjnPczid)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_PCZId");
            entity.Property(e => e.PkjnPrzyczynaOdrzucenia)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_PrzyczynaOdrzucenia");
            entity.Property(e => e.PkjnPtzid)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_PTZId");
            entity.Property(e => e.PkjnPzlid)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_PZLId");
            entity.Property(e => e.PkjnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJN_Rok");
            entity.Property(e => e.PkjnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJN_Seria");
            entity.Property(e => e.PkjnStan)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJN_Stan");
            entity.Property(e => e.PkjnStatus)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_Status");
            entity.Property(e => e.PkjnTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_TwrNumer");
            entity.Property(e => e.PkjnTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJN_TwrTyp");
            entity.Property(e => e.PkjnUboczny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PKJN_Uboczny");
            entity.Property(e => e.PkjnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PKJN_Url");
            entity.Property(e => e.PkjnWynikKj)
                .HasDefaultValue(0)
                .HasColumnName("PKJN_WynikKJ");
        });

        modelBuilder.Entity<ProdPkjsubelem>(entity =>
        {
            entity.HasKey(e => e.PkjsId).HasName("PKJS_Primary");

            entity.ToTable("ProdPKJSubelem", "CDN", tb =>
                {
                    tb.HasTrigger("ProdPKJSubElem_HistoriaZmian");
                    tb.HasTrigger("ProdPKJSubelem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PkjsGidtyp, e.PkjsGidnumer, e.PkjsGidlp, e.PkjsSubGidlp, e.PkjsPkjnid }, "PKJSObi");

            entity.HasIndex(e => e.PkjsPkjnid, "PKJSPKJ");

            entity.Property(e => e.PkjsId).HasColumnName("PKJS_Id");
            entity.Property(e => e.PkjsGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PKJS_GIDFirma");
            entity.Property(e => e.PkjsGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJS_GIDLp");
            entity.Property(e => e.PkjsGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("PKJS_GIDNumer");
            entity.Property(e => e.PkjsGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJS_GIDTyp");
            entity.Property(e => e.PkjsPkjnid)
                .HasDefaultValue(0)
                .HasColumnName("PKJS_PKJNId");
            entity.Property(e => e.PkjsSubGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PKJS_SubGIDLp");

            entity.HasOne(d => d.PkjsPkjn).WithMany(p => p.ProdPkjsubelems)
                .HasForeignKey(d => d.PkjsPkjnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PKJSPKJ");
        });

        modelBuilder.Entity<ProdPkjza>(entity =>
        {
            entity.HasKey(e => e.PkjzId).HasName("PKJZ_Primary");

            entity.ToTable("ProdPKJZas", "CDN", tb => tb.HasTrigger("ProdPKJZas_HistoriaZmian"));

            entity.HasIndex(e => e.PkjzPkjnid, "PKJZPKJN");

            entity.HasIndex(e => e.PkjzPzaid, "PKJZPZA");

            entity.Property(e => e.PkjzId).HasColumnName("PKJZ_Id");
            entity.Property(e => e.PkjzPkjnid)
                .HasDefaultValue(0)
                .HasColumnName("PKJZ_PKJNId");
            entity.Property(e => e.PkjzPzaid)
                .HasDefaultValue(0)
                .HasColumnName("PKJZ_PZAId");

            entity.HasOne(d => d.PkjzPkjn).WithMany(p => p.ProdPkjzas)
                .HasForeignKey(d => d.PkjzPkjnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PKJZPKJN");

            entity.HasOne(d => d.PkjzPza).WithMany(p => p.ProdPkjzas)
                .HasForeignKey(d => d.PkjzPzaid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PKJZPZA");
        });

        modelBuilder.Entity<ProdPlany>(entity =>
        {
            entity.HasKey(e => e.PplId).HasName("PPL_Primary");

            entity.ToTable("ProdPlany", "CDN", tb =>
                {
                    tb.HasTrigger("ProdPlany_DeleteHandler");
                    tb.HasTrigger("ProdPlany_DeleteHandlerDlaRekomendacji");
                    tb.HasTrigger("ProdPlany_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PplRok, e.PplMiesiac, e.PplSeria, e.PplNumer }, "PPLNumer").IsUnique();

            entity.Property(e => e.PplId).HasColumnName("PPL_Id");
            entity.Property(e => e.PplAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PPL_Aktywny");
            entity.Property(e => e.PplBrakMaterialow)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_BrakMaterialow");
            entity.Property(e => e.PplDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PPL_DataCzasM");
            entity.Property(e => e.PplDataCzasP)
                .HasDefaultValue(0)
                .HasColumnName("PPL_DataCzasP");
            entity.Property(e => e.PplDataCzasPrz)
                .HasDefaultValue(0)
                .HasColumnName("PPL_DataCzasPrz");
            entity.Property(e => e.PplDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("PPL_DataCzasW");
            entity.Property(e => e.PplDoProdukcjiPodst)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_DoProdukcjiPodst");
            entity.Property(e => e.PplDoZamowieniaPodst)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_DoZamowieniaPodst");
            entity.Property(e => e.PplFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PPL_FrsId");
            entity.Property(e => e.PplMagDlaOgolnieDostepna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_MagDlaOgolnieDostepna");
            entity.Property(e => e.PplMagDlaWdrodze)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_MagDlaWDrodze");
            entity.Property(e => e.PplMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_Miesiac");
            entity.Property(e => e.PplNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPL_Numer");
            entity.Property(e => e.PplOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PPL_OpeMNumer");
            entity.Property(e => e.PplOpePnumer)
                .HasDefaultValue(0)
                .HasColumnName("PPL_OpePNumer");
            entity.Property(e => e.PplOpePrzNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPL_OpePrzNumer");
            entity.Property(e => e.PplOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PPL_OpeWNumer");
            entity.Property(e => e.PplOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPL_Opis");
            entity.Property(e => e.PplPrzekroczonaRealizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_PrzekroczonaRealizacja");
            entity.Property(e => e.PplPrzeliczenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_Przeliczenie");
            entity.Property(e => e.PplPrzeliczenieDataCzas)
                .HasDefaultValue(0)
                .HasColumnName("PPL_PrzeliczenieDataCzas");
            entity.Property(e => e.PplPrzeliczenieDo)
                .HasDefaultValue(0)
                .HasColumnName("PPL_PrzeliczenieDo");
            entity.Property(e => e.PplPrzeliczenieOd)
                .HasDefaultValue(0)
                .HasColumnName("PPL_PrzeliczenieOd");
            entity.Property(e => e.PplPrzeliczenieRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_PrzeliczenieRodzaj");
            entity.Property(e => e.PplRodzajMat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_RodzajMat");
            entity.Property(e => e.PplRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PPL_Rok");
            entity.Property(e => e.PplSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPL_Seria");
            entity.Property(e => e.PplSkladnikiMps)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_SkladnikiMPS");
            entity.Property(e => e.PplStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_Stan");
            entity.Property(e => e.PplTylkoBraki)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_TylkoBraki");
            entity.Property(e => e.PplTylkoDoProdukcji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_TylkoDoProdukcji");
            entity.Property(e => e.PplUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPL_Url");
            entity.Property(e => e.PplUwzgJednLogMaterialy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_UwzgJednLogMaterialy");
            entity.Property(e => e.PplUwzgJednLogProdukty)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_UwzgJednLogProdukty");
            entity.Property(e => e.PplWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_Wsk");
            entity.Property(e => e.PplZakresRezerwacjiDlaProduktu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPL_ZakresRezerwacjiDlaProduktu");
            entity.Property(e => e.PplZmianyPoPrzeliczeniu)
                .HasDefaultValue(0)
                .HasColumnName("PPL_ZmianyPoPrzeliczeniu");
        });

        modelBuilder.Entity<ProdPlanyDokumenty>(entity =>
        {
            entity.HasKey(e => new { e.PpdPplid, e.PpdDokTyp, e.PpdDokNumer, e.PpdPptgid }).HasName("PPD_Primary");

            entity.ToTable("ProdPlanyDokumenty", "CDN", tb => tb.HasTrigger("ProdPlanyDokumenty_InsertUpdateHandler"));

            entity.Property(e => e.PpdPplid).HasColumnName("PPD_PPLId");
            entity.Property(e => e.PpdDokTyp).HasColumnName("PPD_DokTyp");
            entity.Property(e => e.PpdDokNumer).HasColumnName("PPD_DokNumer");
            entity.Property(e => e.PpdPptgid).HasColumnName("PPD_PPTGId");
            entity.Property(e => e.PpdDataZwiazania)
                .HasDefaultValue(0)
                .HasColumnName("PPD_DataZwiazania");

            entity.HasOne(d => d.PpdPpl).WithMany(p => p.ProdPlanyDokumenties)
                .HasForeignKey(d => d.PpdPplid)
                .HasConstraintName("FK_PPDPPL");
        });

        modelBuilder.Entity<ProdPlanyMag>(entity =>
        {
            entity.HasKey(e => new { e.PpmPplid, e.PpmMagNumer, e.PpmMagDlaElem }).HasName("PPM_Primary");

            entity.ToTable("ProdPlanyMag", "CDN");

            entity.Property(e => e.PpmPplid).HasColumnName("PPM_PPLId");
            entity.Property(e => e.PpmMagNumer).HasColumnName("PPM_MagNumer");
            entity.Property(e => e.PpmMagDlaElem).HasColumnName("PPM_MagDlaElem");

            entity.HasOne(d => d.PpmMagNumerNavigation).WithMany(p => p.ProdPlanyMags)
                .HasForeignKey(d => d.PpmMagNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PPMMagNumer");

            entity.HasOne(d => d.PpmPpl).WithMany(p => p.ProdPlanyMags)
                .HasForeignKey(d => d.PpmPplid)
                .HasConstraintName("FK_PPMPrimary");
        });

        modelBuilder.Entity<ProdPlanyMaterialy>(entity =>
        {
            entity.HasKey(e => e.PptId).HasName("PPT_Primary");

            entity.ToTable("ProdPlanyMaterialy", "CDN", tb => tb.HasTrigger("ProdPlanyMaterialy_InsertUpdateHandler"));

            entity.HasIndex(e => e.PptPppid, "PPTProdPlanProdukt");

            entity.HasIndex(e => e.PptTwrNumer, "PPTTwrKarty");

            entity.Property(e => e.PptId).HasColumnName("PPT_Id");
            entity.Property(e => e.PptCzasDostawy)
                .HasDefaultValue(0)
                .HasColumnName("PPT_CzasDostawy");
            entity.Property(e => e.PptCzynnoscId)
                .HasDefaultValue(0)
                .HasColumnName("PPT_CzynnoscId");
            entity.Property(e => e.PptDoWykorzystania)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_DoWykorzystania");
            entity.Property(e => e.PptDoZamowienia)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_DoZamowienia");
            entity.Property(e => e.PptEoq)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_EOQ");
            entity.Property(e => e.PptIloscLogWolna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_IloscLogWolna");
            entity.Property(e => e.PptIloscLogZajeta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_IloscLogZajeta");
            entity.Property(e => e.PptIloscOgolnieDostepna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_IloscOgolnieDostepna");
            entity.Property(e => e.PptIloscPotrzeba)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_IloscPotrzeba");
            entity.Property(e => e.PptIloscWdrodze)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_IloscWDrodze");
            entity.Property(e => e.PptIloscWszystkiePotrzeby)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_IloscWszystkiePotrzeby");
            entity.Property(e => e.PptIloscZrealizowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_IloscZrealizowana");
            entity.Property(e => e.PptMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPT_MagNumer");
            entity.Property(e => e.PptOkresMrpdo)
                .HasDefaultValue(0)
                .HasColumnName("PPT_OkresMRPDo");
            entity.Property(e => e.PptOkresMrpod)
                .HasDefaultValue(0)
                .HasColumnName("PPT_OkresMRPOd");
            entity.Property(e => e.PptPppid)
                .HasDefaultValue(0)
                .HasColumnName("PPT_PPPId");
            entity.Property(e => e.PptPtzid)
                .HasDefaultValue(0)
                .HasColumnName("PPT_PTZId");
            entity.Property(e => e.PptRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPT_Rodzaj");
            entity.Property(e => e.PptRodzicId)
                .HasDefaultValue(0)
                .HasColumnName("PPT_RodzicId");
            entity.Property(e => e.PptTermin)
                .HasDefaultValue(0)
                .HasColumnName("PPT_Termin");
            entity.Property(e => e.PptTerminZamowienia)
                .HasDefaultValue(0)
                .HasColumnName("PPT_TerminZamowienia");
            entity.Property(e => e.PptTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPT_TwrNumer");
            entity.Property(e => e.PptWielokrotnosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_Wielokrotnosc");
            entity.Property(e => e.PptZamiennikTowaru)
                .HasDefaultValue(0)
                .HasColumnName("PPT_ZamiennikTowaru");
            entity.Property(e => e.PptZaokraglenie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_Zaokraglenie");
            entity.Property(e => e.PptZapasBezpieczenstwa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPT_ZapasBezpieczenstwa");

            entity.HasOne(d => d.PptPpp).WithMany(p => p.ProdPlanyMaterialies)
                .HasForeignKey(d => d.PptPppid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPTProdPlanProdukt");

            entity.HasMany(d => d.Pptgs).WithMany(p => p.PptgPpts)
                .UsingEntity<Dictionary<string, object>>(
                    "ProdPlanyMaterialyGrupy",
                    r => r.HasOne<ProdPlanyMaterialyDoZamowienium>().WithMany()
                        .HasForeignKey("PptgId")
                        .HasConstraintName("FK_PPTGId"),
                    l => l.HasOne<ProdPlanyMaterialy>().WithMany()
                        .HasForeignKey("PptgPptid")
                        .HasConstraintName("FK_PPTGPrimary"),
                    j =>
                    {
                        j.HasKey("PptgPptid", "PptgId").HasName("PPTG_Primary");
                        j.ToTable("ProdPlanyMaterialyGrupy", "CDN", tb => tb.HasTrigger("ProdPlanyMaterialyGrupy_UsunDzieci"));
                        j.HasIndex(new[] { "PptgId" }, "PPTGId");
                        j.IndexerProperty<int>("PptgPptid").HasColumnName("PPTG_PPTId");
                        j.IndexerProperty<int>("PptgId").HasColumnName("PPTG_Id");
                    });
        });

        modelBuilder.Entity<ProdPlanyMaterialyDoZamowienium>(entity =>
        {
            entity.HasKey(e => e.PptzPptgid).HasName("PPTZ_Primary");

            entity.ToTable("ProdPlanyMaterialyDoZamowienia", "CDN");

            entity.Property(e => e.PptzPptgid).HasColumnName("PPTZ_PPTGId");
            entity.Property(e => e.PptzIloscDoZamowienia)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPTZ_IloscDoZamowienia");
            entity.Property(e => e.PptzIloscZwiazana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPTZ_IloscZwiazana");
        });

        modelBuilder.Entity<ProdPlanyProdukty>(entity =>
        {
            entity.HasKey(e => e.PppId).HasName("PPP_Primary");

            entity.ToTable("ProdPlanyProdukty", "CDN", tb =>
                {
                    tb.HasTrigger("ProdPlanyProdukty_DeleteHandler");
                    tb.HasTrigger("ProdPlanyProdukty_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PppLp, "PPPLp");

            entity.HasIndex(e => e.PppPplid, "PPPProdPlan");

            entity.HasIndex(e => e.PppTwrNumer, "PPPTwrKarty");

            entity.HasIndex(e => e.PppDokZrdNumer, "PPPZrdDok");

            entity.Property(e => e.PppId).HasColumnName("PPP_Id");
            entity.Property(e => e.PppBrakMaterialow)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPP_BrakMaterialow");
            entity.Property(e => e.PppDodanyLp)
                .HasDefaultValue(0)
                .HasColumnName("PPP_DodanyLp");
            entity.Property(e => e.PppDokZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPP_DokZrdNumer");
            entity.Property(e => e.PppDokZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPP_DokZrdTyp");
            entity.Property(e => e.PppEdytowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPP_Edytowany");
            entity.Property(e => e.PppEoq)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_EOQ");
            entity.Property(e => e.PppIloscBrakNaMps)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscBrakNaMPS");
            entity.Property(e => e.PppIloscDoProdukcji)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscDoProdukcji");
            entity.Property(e => e.PppIloscDoWykorzystania)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscDoWykorzystania");
            entity.Property(e => e.PppIloscLogWolna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscLogWolna");
            entity.Property(e => e.PppIloscLogZajeta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscLogZajeta");
            entity.Property(e => e.PppIloscMinProdukcji)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscMinProdukcji");
            entity.Property(e => e.PppIloscMps)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscMPS");
            entity.Property(e => e.PppIloscNaZp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscNaZp");
            entity.Property(e => e.PppIloscOgolnieDostepna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscOgolnieDostepna");
            entity.Property(e => e.PppIloscRez)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscRez");
            entity.Property(e => e.PppIloscWdrodze)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscWDrodze");
            entity.Property(e => e.PppIloscWtoku)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscWToku");
            entity.Property(e => e.PppIloscZaplanowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscZaplanowana");
            entity.Property(e => e.PppIloscZrealizowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_IloscZrealizowana");
            entity.Property(e => e.PppLp)
                .HasDefaultValue(0)
                .HasColumnName("PPP_Lp");
            entity.Property(e => e.PppOkresMrpdo)
                .HasDefaultValue(0)
                .HasColumnName("PPP_OkresMRPDo");
            entity.Property(e => e.PppOkresMrpod)
                .HasDefaultValue(0)
                .HasColumnName("PPP_OkresMRPOd");
            entity.Property(e => e.PppPplid)
                .HasDefaultValue(0)
                .HasColumnName("PPP_PPLId");
            entity.Property(e => e.PppTechnologiaId)
                .HasDefaultValue(0)
                .HasColumnName("PPP_TechnologiaId");
            entity.Property(e => e.PppTermin)
                .HasDefaultValue(0)
                .HasColumnName("PPP_Termin");
            entity.Property(e => e.PppTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("PPP_TerminDo");
            entity.Property(e => e.PppTerminNaZp)
                .HasDefaultValue(0)
                .HasColumnName("PPP_TerminNaZp");
            entity.Property(e => e.PppTerminProdukcji)
                .HasDefaultValue(0)
                .HasColumnName("PPP_TerminProdukcji");
            entity.Property(e => e.PppTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPP_TwrNumer");
            entity.Property(e => e.PppWielokrotnosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_Wielokrotnosc");
            entity.Property(e => e.PppZaokraglanie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_Zaokraglanie");
            entity.Property(e => e.PppZapasBezpieczenstwa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPP_ZapasBezpieczenstwa");

            entity.HasOne(d => d.PppPpl).WithMany(p => p.ProdPlanyProdukties)
                .HasForeignKey(d => d.PppPplid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPPProdPlan");

            entity.HasOne(d => d.PppTwrNumerNavigation).WithMany(p => p.ProdPlanyProdukties)
                .HasForeignKey(d => d.PppTwrNumer)
                .HasConstraintName("FK_PPPTwrKarty");
        });

        modelBuilder.Entity<ProdPlanyTwG>(entity =>
        {
            entity.HasKey(e => new { e.PpgPplid, e.PpgTwGnumer }).HasName("PPG_Primary");

            entity.ToTable("ProdPlanyTwG", "CDN", tb => tb.HasTrigger("ProdPlanyTwG_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PpgTwGnumer, e.PpgTwGtyp }, "PPGTwG");

            entity.Property(e => e.PpgPplid).HasColumnName("PPG_PPLId");
            entity.Property(e => e.PpgTwGnumer).HasColumnName("PPG_TwGNumer");
            entity.Property(e => e.PpgTwGtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPG_TwGTyp");

            entity.HasOne(d => d.PpgPpl).WithMany(p => p.ProdPlanyTwGs)
                .HasForeignKey(d => d.PpgPplid)
                .HasConstraintName("FK_PPGPrimary");
        });

        modelBuilder.Entity<ProdPlanyZrdDok>(entity =>
        {
            entity.HasKey(e => new { e.PpzPppid, e.PpzDokNumer, e.PpzDokTyp, e.PpzDokLp }).HasName("PPZ_Primary");

            entity.ToTable("ProdPlanyZrdDok", "CDN");

            entity.Property(e => e.PpzPppid).HasColumnName("PPZ_PPPId");
            entity.Property(e => e.PpzDokNumer).HasColumnName("PPZ_DokNumer");
            entity.Property(e => e.PpzDokTyp).HasColumnName("PPZ_DokTyp");
            entity.Property(e => e.PpzDokLp).HasColumnName("PPZ_DokLp");
            entity.Property(e => e.PpzIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPZ_Ilosc");

            entity.HasOne(d => d.PpzPpp).WithMany(p => p.ProdPlanyZrdDoks)
                .HasForeignKey(d => d.PpzPppid)
                .HasConstraintName("FK_PPZPrimary");
        });

        modelBuilder.Entity<ProdProcesy>(entity =>
        {
            entity.HasKey(e => e.PpcId).HasName("PPC_Primary");

            entity.ToTable("ProdProcesy", "CDN", tb =>
                {
                    tb.HasTrigger("ProdProcesy_DeleteHandler");
                    tb.HasTrigger("ProdProcesy_InsertUpdateHandler");
                    tb.HasTrigger("ProdProcesy_PlanowacOd");
                });

            entity.HasIndex(e => e.PpcOddzial, "PPCOddzial");

            entity.HasIndex(e => e.PpcTechnologia, "PPCTechnologia");

            entity.HasIndex(e => e.PpcZlecenie, "PPCZlecenie");

            entity.Property(e => e.PpcId).HasColumnName("PPC_Id");
            entity.Property(e => e.PpcIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PPC_Ilosc");
            entity.Property(e => e.PpcKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PPC_Koszt");
            entity.Property(e => e.PpcMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPC_MagNumer");
            entity.Property(e => e.PpcNumerSeryjny)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPC_NumerSeryjny");
            entity.Property(e => e.PpcOddzial)
                .HasDefaultValue(0)
                .HasColumnName("PPC_Oddzial");
            entity.Property(e => e.PpcOpis)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPC_Opis");
            entity.Property(e => e.PpcPlanowacOd)
                .HasDefaultValue(0)
                .HasColumnName("PPC_PlanowacOd");
            entity.Property(e => e.PpcPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPC_PriorytetRez");
            entity.Property(e => e.PpcPriorytetZlc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPC_PriorytetZlc");
            entity.Property(e => e.PpcPzeId)
                .HasDefaultValue(0)
                .HasColumnName("PPC_PzeId");
            entity.Property(e => e.PpcPzepartia)
                .HasDefaultValue(0)
                .HasColumnName("PPC_PZEPartia");
            entity.Property(e => e.PpcTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("PPC_Technologia");
            entity.Property(e => e.PpcZlecenie)
                .HasDefaultValue(0)
                .HasColumnName("PPC_Zlecenie");
            entity.Property(e => e.PpcZrownoleglacDo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(4, 1)")
                .HasColumnName("PPC_ZrownoleglacDo");

            entity.HasOne(d => d.PpcZlecenieNavigation).WithMany(p => p.ProdProcesies)
                .HasForeignKey(d => d.PpcZlecenie)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPCZlecenie");
        });

        modelBuilder.Entity<ProdProduktyWczynnosciView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProdProduktyWCzynnosciView", "CDN");

            entity.Property(e => e.PpcvId).HasColumnName("PPCV_Id");
            entity.Property(e => e.PpcvKod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PPCV_Kod");
            entity.Property(e => e.PpcvNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PPCV_Nazwa");
        });

        modelBuilder.Entity<ProdRekomendacje>(entity =>
        {
            entity.HasKey(e => e.PreId).HasName("PRE_Primary");

            entity.ToTable("ProdRekomendacje", "CDN", tb =>
                {
                    tb.HasTrigger("ProdRekomendacje_DeleteHandler");
                    tb.HasTrigger("ProdRekomendacje_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PreFrsId, "PREFrsId");

            entity.HasIndex(e => new { e.PreRok, e.PreMiesiac, e.PreSeria, e.PreNumer, e.PreTyp }, "PRENumer").IsUnique();

            entity.HasIndex(e => e.PreOpeWnumer, "PREOpeW");

            entity.HasIndex(e => e.PrePpid, "PREPPId");

            entity.HasIndex(e => e.PreWzorzecId, "PREWzorzec");

            entity.Property(e => e.PreId).HasColumnName("PRE_Id");
            entity.Property(e => e.PreAktywny)
                .HasDefaultValue((short)0)
                .HasColumnName("PRE_Aktywny");
            entity.Property(e => e.PreArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRE_Archiwalny");
            entity.Property(e => e.PreDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PRE_DataCzasM");
            entity.Property(e => e.PreDataCzasP)
                .HasDefaultValue(0)
                .HasColumnName("PRE_DataCzasP");
            entity.Property(e => e.PreDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("PRE_DataCzasW");
            entity.Property(e => e.PreFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PRE_FrsId");
            entity.Property(e => e.PreMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRE_Miesiac");
            entity.Property(e => e.PreNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRE_Numer");
            entity.Property(e => e.PreOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRE_OpeMNumer");
            entity.Property(e => e.PreOpePnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRE_OpePNumer");
            entity.Property(e => e.PreOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRE_OpeWNumer");
            entity.Property(e => e.PreOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_Opis");
            entity.Property(e => e.PrePpid)
                .HasDefaultValue(0)
                .HasColumnName("PRE_PPId");
            entity.Property(e => e.PreRekomendacjaDo)
                .HasDefaultValue(0)
                .HasColumnName("PRE_RekomendacjaDo");
            entity.Property(e => e.PreRekomendacjaOd)
                .HasDefaultValue(0)
                .HasColumnName("PRE_RekomendacjaOd");
            entity.Property(e => e.PreRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PRE_Rok");
            entity.Property(e => e.PreSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_Seria");
            entity.Property(e => e.PreStan)
                .HasDefaultValue((short)0)
                .HasColumnName("PRE_Stan");
            entity.Property(e => e.PreTerminRozpoczeciaDo)
                .HasDefaultValue(0)
                .HasColumnName("PRE_TerminRozpoczeciaDo");
            entity.Property(e => e.PreTerminRozpoczeciaOd)
                .HasDefaultValue(0)
                .HasColumnName("PRE_TerminRozpoczeciaOd");
            entity.Property(e => e.PreTerminZakonczeniaDo)
                .HasDefaultValue(0)
                .HasColumnName("PRE_TerminZakonczeniaDo");
            entity.Property(e => e.PreTerminZakonczeniaOd)
                .HasDefaultValue(0)
                .HasColumnName("PRE_TerminZakonczeniaOd");
            entity.Property(e => e.PreTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRE_Typ");
            entity.Property(e => e.PreTypTowaru)
                .HasDefaultValue((short)0)
                .HasColumnName("PRE_TypTowaru");
            entity.Property(e => e.PreUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRE_Url");
            entity.Property(e => e.PreWzorzecId)
                .HasDefaultValue(0)
                .HasColumnName("PRE_WzorzecId");

            entity.HasOne(d => d.PreFrs).WithMany(p => p.ProdRekomendacjes)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.PreFrsId)
                .HasConstraintName("FK_PREFrsId");

            entity.HasOne(d => d.PreOpeWnumerNavigation).WithMany(p => p.ProdRekomendacjes)
                .HasForeignKey(d => d.PreOpeWnumer)
                .HasConstraintName("FK_PREOpeW");
        });

        modelBuilder.Entity<ProdRekomendacjeDokumenty>(entity =>
        {
            entity.HasKey(e => new { e.PredPrepid, e.PredDokTyp, e.PredDokNumer, e.PredDokLp }).HasName("PRED_Primary");

            entity.ToTable("ProdRekomendacjeDokumenty", "CDN", tb =>
                {
                    tb.HasTrigger("ProdRekomendacjeDokumenty_AktualizujStan");
                    tb.HasTrigger("ProdRekomendacjeDokumenty_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PredDokNumer, e.PredDokLp, e.PredDokTyp }, "PREDDok");

            entity.HasIndex(e => new { e.PredDokLp, e.PredDokTyp }, "PREDLp");

            entity.Property(e => e.PredPrepid).HasColumnName("PRED_PREPId");
            entity.Property(e => e.PredDokTyp).HasColumnName("PRED_DokTyp");
            entity.Property(e => e.PredDokNumer).HasColumnName("PRED_DokNumer");
            entity.Property(e => e.PredDokLp).HasColumnName("PRED_DokLp");
            entity.Property(e => e.PredDataZwiazania)
                .HasDefaultValue(0)
                .HasColumnName("PRED_DataZwiazania");

            entity.HasOne(d => d.PredPrep).WithMany(p => p.ProdRekomendacjeDokumenties)
                .HasForeignKey(d => d.PredPrepid)
                .HasConstraintName("FK_PREDPrimary");
        });

        modelBuilder.Entity<ProdRekomendacjeProdukty>(entity =>
        {
            entity.HasKey(e => e.PrepId).HasName("PREP_Primary");

            entity.ToTable("ProdRekomendacjeProdukty", "CDN", tb => tb.HasTrigger("ProdRekomendacjeProdukty_InsertUpdateHandler"));

            entity.HasIndex(e => e.PrepMagNumer, "PREPMag");

            entity.HasIndex(e => e.PrepPreid, "PREPProdRekomendacje");

            entity.HasIndex(e => e.PrepTwrNumer, "PREPTwrKarty");

            entity.Property(e => e.PrepId).HasColumnName("PREP_Id");
            entity.Property(e => e.PrepIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PREP_Ilosc");
            entity.Property(e => e.PrepIloscWgPp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PREP_IloscWgPP");
            entity.Property(e => e.PrepIloscZrealizowano)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PREP_IloscZrealizowano");
            entity.Property(e => e.PrepMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PREP_MagNumer");
            entity.Property(e => e.PrepPreid)
                .HasDefaultValue(0)
                .HasColumnName("PREP_PREId");
            entity.Property(e => e.PrepTerminRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("PREP_TerminRozpoczecia");
            entity.Property(e => e.PrepTerminZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("PREP_TerminZakonczenia");
            entity.Property(e => e.PrepTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PREP_TwrNumer");
            entity.Property(e => e.PrepTwrTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PREP_TwrTyp");

            entity.HasOne(d => d.PrepPre).WithMany(p => p.ProdRekomendacjeProdukties)
                .HasForeignKey(d => d.PrepPreid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PREPProdRekomendacje");

            entity.HasOne(d => d.PrepTwrNumerNavigation).WithMany(p => p.ProdRekomendacjeProdukties)
                .HasForeignKey(d => d.PrepTwrNumer)
                .HasConstraintName("FK_PREPTwrKarty");
        });

        modelBuilder.Entity<ProdRekomendacjeWzorce>(entity =>
        {
            entity.HasKey(e => e.PrewId).HasName("PREW_Primary");

            entity.ToTable("ProdRekomendacjeWzorce", "CDN", tb => tb.HasTrigger("ProdRekomendacjeWzorce_DeleteHandler"));

            entity.HasIndex(e => e.PrewKod, "PEWKod").IsUnique();

            entity.HasIndex(e => e.PrewOpeWnumer, "PEWOpeW");

            entity.Property(e => e.PrewId).HasColumnName("PREW_Id");
            entity.Property(e => e.PrewArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PREW_Archiwalny");
            entity.Property(e => e.PrewDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PREW_DataCzasM");
            entity.Property(e => e.PrewDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("PREW_DataCzasW");
            entity.Property(e => e.PrewDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PREW_Domyslny");
            entity.Property(e => e.PrewKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PREW_Kod");
            entity.Property(e => e.PrewNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PREW_Nazwa");
            entity.Property(e => e.PrewOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PREW_OpeMNumer");
            entity.Property(e => e.PrewOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PREW_OpeWNumer");
            entity.Property(e => e.PrewOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PREW_Opis");
            entity.Property(e => e.PrewRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("PREW_Rodzaj");

            entity.HasOne(d => d.PrewOpeWnumerNavigation).WithMany(p => p.ProdRekomendacjeWzorces)
                .HasForeignKey(d => d.PrewOpeWnumer)
                .HasConstraintName("FK_PEWOpeW");
        });

        modelBuilder.Entity<ProdRekomendacjeWzorceWarunki>(entity =>
        {
            entity.HasKey(e => e.PrewwId).HasName("PREWW_Primary");

            entity.ToTable("ProdRekomendacjeWzorceWarunki", "CDN");

            entity.HasIndex(e => new { e.PrewwPrewtid, e.PrewwKolumnaPp }, "PREWWTwrWarunek");

            entity.Property(e => e.PrewwId).HasColumnName("PREWW_Id");
            entity.Property(e => e.PrewwKolumnaPp)
                .HasDefaultValue((short)0)
                .HasColumnName("PREWW_KolumnaPP");
            entity.Property(e => e.PrewwOperator)
                .HasDefaultValue((short)0)
                .HasColumnName("PREWW_Operator");
            entity.Property(e => e.PrewwPrewtid)
                .HasDefaultValue(0)
                .HasColumnName("PREWW_PREWTId");
            entity.Property(e => e.PrewwWartosc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PREWW_Wartosc");

            entity.HasOne(d => d.PrewwPrewt).WithMany(p => p.ProdRekomendacjeWzorceWarunkis)
                .HasForeignKey(d => d.PrewwPrewtid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PREWWTwrWarunek");
        });

        modelBuilder.Entity<ProdRekomendacjeWzorceWarunkiTwr>(entity =>
        {
            entity.HasKey(e => e.PrewtId).HasName("PREWT_Primary");

            entity.ToTable("ProdRekomendacjeWzorceWarunkiTwr", "CDN", tb => tb.HasTrigger("ProdRekomendacjeWzorceWarunkiTwr_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PrewtTwrnumer, e.PrewtTwrtyp, e.PrewtPrewid, e.PrewtTyp }, "PREWTTwr");

            entity.HasIndex(e => new { e.PrewtPrewid, e.PrewtTyp }, "PREWTWzorzec");

            entity.Property(e => e.PrewtId).HasColumnName("PREWT_Id");
            entity.Property(e => e.PrewtPrewid)
                .HasDefaultValue(0)
                .HasColumnName("PREWT_PREWId");
            entity.Property(e => e.PrewtTwrnumer)
                .HasDefaultValue(0)
                .HasColumnName("PREWT_TWRNumer");
            entity.Property(e => e.PrewtTwrtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PREWT_TWRTyp");
            entity.Property(e => e.PrewtTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PREWT_Typ");

            entity.HasOne(d => d.PrewtPrew).WithMany(p => p.ProdRekomendacjeWzorceWarunkiTwrs)
                .HasForeignKey(d => d.PrewtPrewid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PREWTWzorzec");
        });

        modelBuilder.Entity<ProdSegmenty>(entity =>
        {
            entity.HasKey(e => e.PsgId).HasName("PSG_Primary");

            entity.ToTable("ProdSegmenty", "CDN", tb =>
                {
                    tb.HasTrigger("ProdSegmentyAlias_DeleteHandler");
                    tb.HasTrigger("ProdSegmenty_DeleteHandler");
                });

            entity.Property(e => e.PsgId).HasColumnName("PSG_Id");
            entity.Property(e => e.PsgNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSG_Nazwa");
            entity.Property(e => e.PsgOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSG_Opis");
            entity.Property(e => e.PsgPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSG_Predefiniowany");
        });

        modelBuilder.Entity<ProdSegmentyWlasciwosci>(entity =>
        {
            entity.HasKey(e => e.PsgwId).HasName("PSGW_Primary");

            entity.ToTable("ProdSegmentyWlasciwosci", "CDN", tb => tb.HasTrigger("ProdSegmentyWlasciwosci_InsertUpdateHandler"));

            entity.HasIndex(e => e.PsgwLp, "PSGWLp");

            entity.HasIndex(e => new { e.PsgwObiNumer, e.PsgwObiTyp }, "PSGWObi");

            entity.HasIndex(e => e.PsgwPsgid, "PSGWPSGId");

            entity.HasIndex(e => new { e.PsgwPsgid, e.PsgwObiTyp }, "PSGWPSGObi");

            entity.Property(e => e.PsgwId).HasColumnName("PSGW_Id");
            entity.Property(e => e.PsgwDataWaznosci)
                .HasDefaultValue(0)
                .HasColumnName("PSGW_DataWaznosci");
            entity.Property(e => e.PsgwDataWaznosciJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSGW_DataWaznosciJedn");
            entity.Property(e => e.PsgwIloscZnakow)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSGW_IloscZnakow");
            entity.Property(e => e.PsgwLp)
                .HasDefaultValue(0)
                .HasColumnName("PSGW_Lp");
            entity.Property(e => e.PsgwObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PSGW_ObiNumer");
            entity.Property(e => e.PsgwObiTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSGW_ObiTyp");
            entity.Property(e => e.PsgwPsgid)
                .HasDefaultValue(0)
                .HasColumnName("PSGW_PSGId");
            entity.Property(e => e.PsgwSeparatorDlaElem)
                .HasDefaultValue(0)
                .HasColumnName("PSGW_SeparatorDlaElem");
            entity.Property(e => e.PsgwSeparatorPo)
                .HasDefaultValue(0)
                .HasColumnName("PSGW_SeparatorPo");
            entity.Property(e => e.PsgwSeparatorW)
                .HasDefaultValue(0)
                .HasColumnName("PSGW_SeparatorW");
            entity.Property(e => e.PsgwSql)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("PSGW_SQL");
            entity.Property(e => e.PsgwWspolnySeparatorDlaElem)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSGW_WspolnySeparatorDlaElem");
        });

        modelBuilder.Entity<ProdTechnologiaCzynnosci>(entity =>
        {
            entity.HasKey(e => e.PtcId).HasName("PTC_Primary");

            entity.ToTable("ProdTechnologiaCzynnosci", "CDN", tb =>
                {
                    tb.HasTrigger("ProdTechnologiaCzynnosci_DeleteHandler");
                    tb.HasTrigger("ProdTechnologiaCzynnosci_InsertUpdateHandler");
                    tb.HasTrigger("ProdTechnologiaCzynnosci_UsunPotomne");
                });

            entity.HasIndex(e => e.PtcKod, "PTCKod");

            entity.HasIndex(e => e.PtcOjciec, "PTCOjciec");

            entity.HasIndex(e => new { e.PtcTechnologia, e.PtcKod }, "PTCTechnologia").IsUnique();

            entity.HasIndex(e => new { e.PtcTwrNumer, e.PtcTwrTyp }, "PTCTowar");

            entity.Property(e => e.PtcId).HasColumnName("PTC_Id");
            entity.Property(e => e.PtcAkord)
                .HasDefaultValue(0)
                .HasColumnName("PTC_Akord");
            entity.Property(e => e.PtcAkordOpis)
                .HasDefaultValue((short)0)
                .HasColumnName("PTC_AkordOpis");
            entity.Property(e => e.PtcCzasPlanowany)
                .HasDefaultValue(0)
                .HasColumnName("PTC_CzasPlanowany");
            entity.Property(e => e.PtcCzasPlanowanyAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_CzasPlanowanyAtr");
            entity.Property(e => e.PtcCzasPlanowanyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_CzasPlanowanyJedn");
            entity.Property(e => e.PtcCzasPrzygotowawczy)
                .HasDefaultValue(0)
                .HasColumnName("PTC_CzasPrzygotowawczy");
            entity.Property(e => e.PtcCzasPrzygotowawczyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_CzasPrzygotowawczyJedn");
            entity.Property(e => e.PtcCzasPrzygotowawczyRozliczeniowy)
                .HasDefaultValue(0)
                .HasColumnName("PTC_CzasPrzygotowawczyRozliczeniowy");
            entity.Property(e => e.PtcCzasPrzygotowawczyRozliczeniowyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_CzasPrzygotowawczyRozliczeniowyJedn");
            entity.Property(e => e.PtcCzasRozliczeniowy)
                .HasDefaultValue(0)
                .HasColumnName("PTC_CzasRozliczeniowy");
            entity.Property(e => e.PtcCzasRozliczeniowyAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_CzasRozliczeniowyAtr");
            entity.Property(e => e.PtcCzasRozliczeniowyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_CzasRozliczeniowyJedn");
            entity.Property(e => e.PtcDefPytId)
                .HasDefaultValue(0)
                .HasColumnName("PTC_DefPytId");
            entity.Property(e => e.PtcDowolneZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_DowolneZasoby");
            entity.Property(e => e.PtcDowolneZasobyProd)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_DowolneZasobyProd");
            entity.Property(e => e.PtcEtap)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_Etap");
            entity.Property(e => e.PtcGenerujZapisWterminarzu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_GenerujZapisWTerminarzu");
            entity.Property(e => e.PtcGrupaOperacjiKtp)
                .HasDefaultValue(0)
                .HasColumnName("PTC_GrupaOperacjiKTP");
            entity.Property(e => e.PtcIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTC_Ilosc");
            entity.Property(e => e.PtcIloscAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_IloscAtr");
            entity.Property(e => e.PtcIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTC_IloscMax");
            entity.Property(e => e.PtcIloscMaxAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_IloscMaxAtr");
            entity.Property(e => e.PtcIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTC_IloscMin");
            entity.Property(e => e.PtcIloscMinAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_IloscMinAtr");
            entity.Property(e => e.PtcIloscPlan)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTC_IloscPlan");
            entity.Property(e => e.PtcIloscPlanAtr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTC_IloscPlanAtr");
            entity.Property(e => e.PtcJednostka)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTC_Jednostka");
            entity.Property(e => e.PtcKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTC_Kod");
            entity.Property(e => e.PtcKontrolaJakosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_KontrolaJakosci");
            entity.Property(e => e.PtcKooperacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_Kooperacja");
            entity.Property(e => e.PtcLp)
                .HasDefaultValue(0)
                .HasColumnName("PTC_Lp");
            entity.Property(e => e.PtcNarzuty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTC_Narzuty");
            entity.Property(e => e.PtcNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTC_Nazwa");
            entity.Property(e => e.PtcNiePlanujWpartiachGdyNastOpeWpartiach)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_NiePlanujWPartiachGdyNastOpeWPartiach");
            entity.Property(e => e.PtcNrInstrukcji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTC_NrInstrukcji");
            entity.Property(e => e.PtcOddzial)
                .HasDefaultValue(0)
                .HasColumnName("PTC_Oddzial");
            entity.Property(e => e.PtcOdstepPo)
                .HasDefaultValue(0)
                .HasColumnName("PTC_OdstepPo");
            entity.Property(e => e.PtcOdstepPoJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_OdstepPoJm");
            entity.Property(e => e.PtcOdstepPrzed)
                .HasDefaultValue(0)
                .HasColumnName("PTC_OdstepPrzed");
            entity.Property(e => e.PtcOdstepPrzedJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_OdstepPrzedJm");
            entity.Property(e => e.PtcOjciec)
                .HasDefaultValue(0)
                .HasColumnName("PTC_Ojciec");
            entity.Property(e => e.PtcOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTC_Opis");
            entity.Property(e => e.PtcPlanowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_Planowana");
            entity.Property(e => e.PtcPrzesunieciePo)
                .HasDefaultValue(0)
                .HasColumnName("PTC_PrzesunieciePo");
            entity.Property(e => e.PtcPrzesunieciePoJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_PrzesunieciePoJm");
            entity.Property(e => e.PtcPrzesunieciePrzed)
                .HasDefaultValue(0)
                .HasColumnName("PTC_PrzesunieciePrzed");
            entity.Property(e => e.PtcPrzesunieciePrzedJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_PrzesunieciePrzedJm");
            entity.Property(e => e.PtcRozneOkresy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_RozneOkresy");
            entity.Property(e => e.PtcStalyCzas)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_StalyCzas");
            entity.Property(e => e.PtcStalyCzasDla)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTC_StalyCzasDla");
            entity.Property(e => e.PtcStawkaCzas)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTC_StawkaCzas");
            entity.Property(e => e.PtcStawkaCzasAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_StawkaCzasAtr");
            entity.Property(e => e.PtcStawkaCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PTC_StawkaCzasM");
            entity.Property(e => e.PtcStawkaCzasMjedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_StawkaCzasMJedn");
            entity.Property(e => e.PtcStawkaIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTC_StawkaIlosc");
            entity.Property(e => e.PtcStawkaIloscM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTC_StawkaIloscM");
            entity.Property(e => e.PtcStawkaStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTC_StawkaStala");
            entity.Property(e => e.PtcStawkaStalaAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_StawkaStalaAtr");
            entity.Property(e => e.PtcStawkailoscAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTC_StawkailoscAtr");
            entity.Property(e => e.PtcTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("PTC_Technologia");
            entity.Property(e => e.PtcTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTC_TwrNumer");
            entity.Property(e => e.PtcTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTC_TwrTyp");
            entity.Property(e => e.PtcTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_Typ");
            entity.Property(e => e.PtcTypOperacjiKtp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_TypOperacjiKTP");
            entity.Property(e => e.PtcWarunekOperacjiKtp)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTC_WarunekOperacjiKTP");
            entity.Property(e => e.PtcWieleTerminow)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_WieleTerminow");
            entity.Property(e => e.PtcWymagajPodaniaStanuOperacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_WymagajPodaniaStanuOperacji");
            entity.Property(e => e.PtcWymagana)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTC_Wymagana");
            entity.Property(e => e.PtcWzorzec)
                .HasDefaultValue(0)
                .HasColumnName("PTC_Wzorzec");
        });

        modelBuilder.Entity<ProdTechnologiaFunkcje>(entity =>
        {
            entity.HasKey(e => new { e.PtfTechnologiaCzynnosc, e.PtfFunkcja }).HasName("PTF_Primary");

            entity.ToTable("ProdTechnologiaFunkcje", "CDN", tb => tb.HasTrigger("ProdTechnologiaFunkcje_InsertUpdateHandler"));

            entity.Property(e => e.PtfTechnologiaCzynnosc).HasColumnName("PTF_TechnologiaCzynnosc");
            entity.Property(e => e.PtfFunkcja).HasColumnName("PTF_Funkcja");
            entity.Property(e => e.PtfCenaKosztorysu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTF_CenaKosztorysu");
            entity.Property(e => e.PtfCzyZrownoleglac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTF_CzyZrownoleglac");
            entity.Property(e => e.PtfKontynuacjaPracy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTF_KontynuacjaPracy");
            entity.Property(e => e.PtfLiczbaObiektow)
                .HasDefaultValue((short)0)
                .HasColumnName("PTF_LiczbaObiektow");
            entity.Property(e => e.PtfPlanowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTF_Planowana");
            entity.Property(e => e.PtfTenSamZasobWpartiach)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTF_TenSamZasobWPartiach");
            entity.Property(e => e.PtfTypGniazda)
                .HasDefaultValue(0)
                .HasColumnName("PTF_TypGniazda");
            entity.Property(e => e.PtfWszystkie)
                .HasDefaultValue((short)0)
                .HasColumnName("PTF_Wszystkie");
            entity.Property(e => e.PtfZmienna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTF_Zmienna");

            entity.HasOne(d => d.PtfTechnologiaCzynnoscNavigation).WithMany(p => p.ProdTechnologiaFunkcjes)
                .HasForeignKey(d => d.PtfTechnologiaCzynnosc)
                .HasConstraintName("FK_PTFPrimary");
        });

        modelBuilder.Entity<ProdTechnologiaKoszty>(entity =>
        {
            entity.HasKey(e => new { e.PtkPteid, e.PtkSlwid }).HasName("PTK_Primary");

            entity.ToTable("ProdTechnologiaKoszty", "CDN", tb => tb.HasTrigger("ProdTechnologiaKoszty_InsertUpdateHandler"));

            entity.HasIndex(e => e.PtkSlwid, "PTKSlw");

            entity.Property(e => e.PtkPteid).HasColumnName("PTK_PTEId");
            entity.Property(e => e.PtkSlwid).HasColumnName("PTK_SLWId");
            entity.Property(e => e.PtkWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTK_Wartosc");
        });

        modelBuilder.Entity<ProdTechnologiaTerminy>(entity =>
        {
            entity.HasKey(e => e.PtrId).HasName("PTR_Primary");

            entity.ToTable("ProdTechnologiaTerminy", "CDN");

            entity.HasIndex(e => new { e.PtrTechnologiaId, e.PtrTerminOd, e.PtrTerminDo }, "PTRKeyTechnologiaOdDo");

            entity.Property(e => e.PtrId).HasColumnName("PTR_Id");
            entity.Property(e => e.PtrTechnologiaId)
                .HasDefaultValue(0)
                .HasColumnName("PTR_TechnologiaId");
            entity.Property(e => e.PtrTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("PTR_TerminDo");
            entity.Property(e => e.PtrTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("PTR_TerminOd");

            entity.HasOne(d => d.PtrTechnologia).WithMany(p => p.ProdTechnologiaTerminies)
                .HasForeignKey(d => d.PtrTechnologiaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PTRKeyTechnologiaOdDo");
        });

        modelBuilder.Entity<ProdTechnologiaZasoby>(entity =>
        {
            entity.HasKey(e => e.PtzId).HasName("PTZ_Primary");

            entity.ToTable("ProdTechnologiaZasoby", "CDN", tb =>
                {
                    tb.HasTrigger("ProdTechnologiaZasobyAlias_DeleteHandler");
                    tb.HasTrigger("ProdTechnologiaZasoby_AktualizujPodstawoweTechnologieTWR");
                    tb.HasTrigger("ProdTechnologiaZasoby_DeleteHandler");
                    tb.HasTrigger("ProdTechnologiaZasoby_InsertUpdateHandler");
                    tb.HasTrigger("ProdTechnologiaZasoby_PrzeniesZamiennik");
                    tb.HasTrigger("ProdTechnologiaZasoby_SprawdzZamiennik");
                    tb.HasTrigger("Trigger_PTZ_UsunDomyslneTechnologieDlaZasobu");
                });

            entity.HasIndex(e => e.PtzZamiennik, "AL2_ProdTechnologiaZasoby");

            entity.HasIndex(e => new { e.PtzTwrTyp, e.PtzTwrNumer, e.PtzTypZasobu }, "AL_INDEKSTECHNOLOGICZNY");

            entity.HasIndex(e => new { e.PtzTechnologiaCzynnosc, e.PtzKod }, "PTZKod");

            entity.HasIndex(e => new { e.PtzKod, e.PtzId }, "PTZKodId");

            entity.HasIndex(e => e.PtzIdMagazynNiezgodny, "PTZMagNiezgodny");

            entity.HasIndex(e => e.PtzTechnologiaCzynnosc, "PTZTechnologiaCzynnosc");

            entity.HasIndex(e => e.PtzTechnologiaZasob, "PTZTechnologiaZasob");

            entity.HasIndex(e => new { e.PtzTwrNumer, e.PtzTwrTyp }, "PTZTowar");

            entity.HasIndex(e => e.PtzIdWzorcaNrPartii, "PTZWzorzecNrPartii");

            entity.HasIndex(e => e.PtzZamiennik, "PTZZamiennik");

            entity.HasIndex(e => e.PtzIdProduktNiezgodny, "PTZZasobNiezgodny");

            entity.Property(e => e.PtzId).HasColumnName("PTZ_Id");
            entity.Property(e => e.PtzCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTZ_Cecha");
            entity.Property(e => e.PtzCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTZ_Cena");
            entity.Property(e => e.PtzCenaAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_CenaAtr");
            entity.Property(e => e.PtzCenaKosztorysu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTZ_CenaKosztorysu");
            entity.Property(e => e.PtzCenaKosztorysuAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_CenaKosztorysuAtr");
            entity.Property(e => e.PtzCzasTrwaniaProdukcji)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_CzasTrwaniaProdukcji");
            entity.Property(e => e.PtzCzasTrwaniaProdukcjiJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_CzasTrwaniaProdukcjiJedn");
            entity.Property(e => e.PtzCzasTrwaniaWyliczony)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_CzasTrwaniaWyliczony");
            entity.Property(e => e.PtzCzyUbocznyNiezgodny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_CzyUbocznyNiezgodny");
            entity.Property(e => e.PtzDefPytCechaId)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_DefPytCechaId");
            entity.Property(e => e.PtzDefPytWyborId)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_DefPytWyborId");
            entity.Property(e => e.PtzDopasowanieIlosci)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PTZ_DopasowanieIlosci");
            entity.Property(e => e.PtzEdycjaCechy)
                .HasDefaultValue((short)0)
                .HasColumnName("PTZ_EdycjaCechy");
            entity.Property(e => e.PtzEdycjaMagazynuPrzyRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_EdycjaMagazynuPrzyRealizacji");
            entity.Property(e => e.PtzFakturowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_Fakturowac");
            entity.Property(e => e.PtzIdMagazynNiezgodny)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IdMagazynNiezgodny");
            entity.Property(e => e.PtzIdProduktNiezgodny)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IdProduktNiezgodny");
            entity.Property(e => e.PtzIdWzorcaNrPartii)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IdWzorcaNrPartii");
            entity.Property(e => e.PtzIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTZ_Ilosc");
            entity.Property(e => e.PtzIloscAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IloscAtr");
            entity.Property(e => e.PtzIloscDomyslna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_IloscDomyslna");
            entity.Property(e => e.PtzIloscFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_IloscFormat");
            entity.Property(e => e.PtzIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTZ_IloscMax");
            entity.Property(e => e.PtzIloscMaxAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IloscMaxAtr");
            entity.Property(e => e.PtzIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTZ_IloscMin");
            entity.Property(e => e.PtzIloscMinAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IloscMinAtr");
            entity.Property(e => e.PtzIloscPom)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTZ_IloscPom");
            entity.Property(e => e.PtzIloscPomAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IloscPomAtr");
            entity.Property(e => e.PtzIloscPomMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTZ_IloscPomMax");
            entity.Property(e => e.PtzIloscPomMaxAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IloscPomMaxAtr");
            entity.Property(e => e.PtzIloscPomMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTZ_IloscPomMin");
            entity.Property(e => e.PtzIloscPomMinAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_IloscPomMinAtr");
            entity.Property(e => e.PtzIloscTechnologiczna)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_IloscTechnologiczna");
            entity.Property(e => e.PtzJednostka)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTZ_Jednostka");
            entity.Property(e => e.PtzJednostkaPom)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTZ_JednostkaPom");
            entity.Property(e => e.PtzKlasaCechy)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_KlasaCechy");
            entity.Property(e => e.PtzKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTZ_Kod");
            entity.Property(e => e.PtzKopNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_KopNumer");
            entity.Property(e => e.PtzKopTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTZ_KopTyp");
            entity.Property(e => e.PtzKoszt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_Koszt");
            entity.Property(e => e.PtzLp)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_Lp");
            entity.Property(e => e.PtzMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_MagNumer");
            entity.Property(e => e.PtzMaterialKanban)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_MaterialKanban");
            entity.Property(e => e.PtzNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTZ_Nazwa");
            entity.Property(e => e.PtzNiezaleznaOdJedPod)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_NiezaleznaOdJedPod");
            entity.Property(e => e.PtzOpisKj)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTZ_OpisKJ");
            entity.Property(e => e.PtzPlanowanyCalosciowo)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PlanowanyCalosciowo");
            entity.Property(e => e.PtzPlanujStrategicznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PlanujStrategicznie");
            entity.Property(e => e.PtzPlanujUboczne)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PlanujUboczne");
            entity.Property(e => e.PtzPodlegaKj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PodlegaKJ");
            entity.Property(e => e.PtzPodstawowaTechnologiaDlaProduktu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PodstawowaTechnologiaDlaProduktu");
            entity.Property(e => e.PtzPropIlosc)
                .HasDefaultValue((short)0)
                .HasColumnName("PTZ_PropIlosc");
            entity.Property(e => e.PtzPropIloscPom)
                .HasDefaultValue((short)0)
                .HasColumnName("PTZ_PropIloscPom");
            entity.Property(e => e.PtzPrzeliczajIloscPomWgPodst)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PrzeliczajIloscPomWgPodst");
            entity.Property(e => e.PtzPrzeliczajWgIlosciProduktu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PrzeliczajWgIlosciProduktu");
            entity.Property(e => e.PtzPrzeliczajWgPomocniczej)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_PrzeliczajWgPomocniczej");
            entity.Property(e => e.PtzRodzajKj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_RodzajKJ");
            entity.Property(e => e.PtzRodzajUbocznego)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_RodzajUbocznego");
            entity.Property(e => e.PtzTechnologiaCzynnosc)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_TechnologiaCzynnosc");
            entity.Property(e => e.PtzTechnologiaZasob)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_TechnologiaZasob");
            entity.Property(e => e.PtzTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_TwrNumer");
            entity.Property(e => e.PtzTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTZ_TwrTyp");
            entity.Property(e => e.PtzTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_Typ");
            entity.Property(e => e.PtzTypZasobu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_TypZasobu");
            entity.Property(e => e.PtzUsuwajNiewykorzystane)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_UsuwajNiewykorzystane");
            entity.Property(e => e.PtzUwzglednijWnrSeryjnym)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_UwzglednijWNrSeryjnym");
            entity.Property(e => e.PtzWagaIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_WagaIlosc");
            entity.Property(e => e.PtzWagaKosztu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("PTZ_WagaKosztu");
            entity.Property(e => e.PtzWymagajSurowca)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_WymagajSurowca");
            entity.Property(e => e.PtzZamiennik)
                .HasDefaultValue(0)
                .HasColumnName("PTZ_Zamiennik");
            entity.Property(e => e.PtzZrodloZasobu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTZ_ZrodloZasobu");

            entity.HasOne(d => d.PtzTechnologiaCzynnoscNavigation).WithMany(p => p.ProdTechnologiaZasobies)
                .HasForeignKey(d => d.PtzTechnologiaCzynnosc)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PTZKod");
        });

        modelBuilder.Entity<ProdTechnologiaZasobyTwX>(entity =>
        {
            entity.HasKey(e => new { e.PttPtzid, e.PttTwXtyp, e.PttTwXnumer }).HasName("PTT_Primary");

            entity.ToTable("ProdTechnologiaZasobyTwX", "CDN", tb => tb.HasTrigger("ProdTechnologiaZasobyTwX_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PttTwXtyp, e.PttTwXnumer }, "PTTTwX");

            entity.Property(e => e.PttPtzid).HasColumnName("PTT_PTZId");
            entity.Property(e => e.PttTwXtyp).HasColumnName("PTT_TwXTyp");
            entity.Property(e => e.PttTwXnumer).HasColumnName("PTT_TwXNumer");
            entity.Property(e => e.PttCchFirma)
                .HasDefaultValue(0)
                .HasColumnName("PTT_CChFirma");
            entity.Property(e => e.PttCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTT_CChLp");
            entity.Property(e => e.PttCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTT_CChNumer");
            entity.Property(e => e.PttCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTT_CChTyp");
            entity.Property(e => e.PttCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTT_Cecha");
            entity.Property(e => e.PttCechaWkonf)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTT_CechaWKonf");
            entity.Property(e => e.PttWarunekWystapienia)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTT_WarunekWystapienia");

            entity.HasOne(d => d.PttPtz).WithMany(p => p.ProdTechnologiaZasobyTwXes)
                .HasForeignKey(d => d.PttPtzid)
                .HasConstraintName("FK_PTTPrimary");
        });

        modelBuilder.Entity<ProdTechnologieDomyslne>(entity =>
        {
            entity.HasKey(e => new { e.PtdPteid, e.PtdKntTyp, e.PtdKntNumer, e.PtdPtzId }).HasName("PTD_Primary");

            entity.ToTable("ProdTechnologieDomyslne", "CDN");

            entity.Property(e => e.PtdPteid).HasColumnName("PTD_PTEID");
            entity.Property(e => e.PtdKntTyp).HasColumnName("PTD_KntTyp");
            entity.Property(e => e.PtdKntNumer).HasColumnName("PTD_KntNumer");
            entity.Property(e => e.PtdPtzId).HasColumnName("PTD_PtzId");
            entity.Property(e => e.PtdDomyslna)
                .HasDefaultValue(0)
                .HasColumnName("PTD_Domyslna");
            entity.Property(e => e.PtdKntDnumer)
                .HasDefaultValue(0)
                .HasColumnName("PTD_KntDNumer");
            entity.Property(e => e.PtdKntDtyp)
                .HasDefaultValue(0)
                .HasColumnName("PTD_KntDTyp");

            entity.HasOne(d => d.PtdPte).WithMany(p => p.ProdTechnologieDomyslnes)
                .HasForeignKey(d => d.PtdPteid)
                .HasConstraintName("FK_PTDPrimary");
        });

        modelBuilder.Entity<ProdTechnologieZasobyGniazd>(entity =>
        {
            entity.HasKey(e => e.PtgId).HasName("PTG_Primary");

            entity.ToTable("ProdTechnologieZasobyGniazd", "CDN");

            entity.HasIndex(e => new { e.PtgGniazdo, e.PtgId }, "PTGGniazdo");

            entity.HasIndex(e => new { e.PtgTechnologiaOperacje, e.PtgId }, "PTGTechnologiaOperacje");

            entity.HasIndex(e => new { e.PtgZasobGniazda, e.PtgId }, "PTGZasob");

            entity.HasIndex(e => new { e.PtgTechnologiaOperacje, e.PtgZasobGniazda }, "PTGZasobTechnologii").IsUnique();

            entity.Property(e => e.PtgId).HasColumnName("PTG_Id");
            entity.Property(e => e.PtgGniazdo)
                .HasDefaultValue(0)
                .HasColumnName("PTG_Gniazdo");
            entity.Property(e => e.PtgPlanowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTG_Planowana");
            entity.Property(e => e.PtgTechnologiaOperacje)
                .HasDefaultValue(0)
                .HasColumnName("PTG_TechnologiaOperacje");
            entity.Property(e => e.PtgZasobGniazda)
                .HasDefaultValue(0)
                .HasColumnName("PTG_ZasobGniazda");

            entity.HasOne(d => d.PtgTechnologiaOperacjeNavigation).WithMany(p => p.ProdTechnologieZasobyGniazds)
                .HasForeignKey(d => d.PtgTechnologiaOperacje)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PTGTechnologiaOperacje");

            entity.HasOne(d => d.PtgZasobGniazdaNavigation).WithMany(p => p.ProdTechnologieZasobyGniazds)
                .HasForeignKey(d => d.PtgZasobGniazda)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PTGZasob");
        });

        modelBuilder.Entity<ProdTechnologium>(entity =>
        {
            entity.HasKey(e => e.PteId).HasName("PTE_Primary");

            entity.ToTable("ProdTechnologia", "CDN", tb =>
                {
                    tb.HasTrigger("ProdTechnologiaAlias_DeleteHandler");
                    tb.HasTrigger("ProdTechnologia_DeleteAtrybutyHist");
                    tb.HasTrigger("ProdTechnologia_DeleteHandler");
                    tb.HasTrigger("ProdTechnologia_DeleteWersja");
                    tb.HasTrigger("ProdTechnologia_Duplikacje");
                    tb.HasTrigger("ProdTechnologia_InsertUpdateHandler");
                    tb.HasTrigger("ProdTechnologia_Terminy");
                });

            entity.HasIndex(e => new { e.PteKntNumer, e.PteKntTyp }, "PTEKnt");

            entity.HasIndex(e => new { e.PteRok, e.PteMiesiac, e.PteSeria, e.PteNumer, e.PtePrjId }, "PTENumer");

            entity.HasIndex(e => e.PteOddzial, "PTEOddzial");

            entity.HasIndex(e => e.PtePrjId, "PTEPrjId");

            entity.HasIndex(e => new { e.PteTwrNumer, e.PteTwrTyp }, "PTETwr");

            entity.HasIndex(e => e.PteZrdNumer, "PTEZrdNumer");

            entity.Property(e => e.PteId).HasColumnName("PTE_Id");
            entity.Property(e => e.PteAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PTE_Aktywny");
            entity.Property(e => e.PteArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_Archiwalny");
            entity.Property(e => e.PteCenaKosztorysu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTE_CenaKosztorysu");
            entity.Property(e => e.PteCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PTE_CzasModyfikacji");
            entity.Property(e => e.PteCzynnoscZeZlecenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_CzynnoscZeZlecenia");
            entity.Property(e => e.PteDataArchiw)
                .HasDefaultValue(0)
                .HasColumnName("PTE_DataArchiw");
            entity.Property(e => e.PteDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PTE_DataDo");
            entity.Property(e => e.PteDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PTE_DataOd");
            entity.Property(e => e.PteDataZatw)
                .HasDefaultValue(0)
                .HasColumnName("PTE_DataZatw");
            entity.Property(e => e.PteFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_FrmNumer");
            entity.Property(e => e.PteFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PTE_FrsID");
            entity.Property(e => e.PteGenerujZapisWterminarzu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_GenerujZapisWTerminarzu");
            entity.Property(e => e.PteIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTE_Ilosc");
            entity.Property(e => e.PteIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTE_IloscMin");
            entity.Property(e => e.PteIloscPlan)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTE_IloscPlan");
            entity.Property(e => e.PteIloscProd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTE_IloscProd");
            entity.Property(e => e.PteJednostka)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTE_Jednostka");
            entity.Property(e => e.PteKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_KnDNumer");
            entity.Property(e => e.PteKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTE_KnDTyp");
            entity.Property(e => e.PteKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_KntNumer");
            entity.Property(e => e.PteKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTE_KntTyp");
            entity.Property(e => e.PteKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTE_Kod");
            entity.Property(e => e.PteKopiowacZalacznikiNaZp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_KopiowacZalacznikiNaZP");
            entity.Property(e => e.PteMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_Miesiac");
            entity.Property(e => e.PteNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTE_Nazwa");
            entity.Property(e => e.PteNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_Numer");
            entity.Property(e => e.PteOddzial)
                .HasDefaultValue(0)
                .HasColumnName("PTE_Oddzial");
            entity.Property(e => e.PteOpanumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_OPANumer");
            entity.Property(e => e.PteOpis)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTE_Opis");
            entity.Property(e => e.PteOpisWersji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTE_OpisWersji");
            entity.Property(e => e.PteOpmnumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_OPMNumer");
            entity.Property(e => e.PteOpwnumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_OPWNumer");
            entity.Property(e => e.PtePolaczOperacjeTpZpolprod)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_PolaczOperacjeTpZPolprod");
            entity.Property(e => e.PtePrjId)
                .HasDefaultValue(0)
                .HasColumnName("PTE_PrjId");
            entity.Property(e => e.PteProjekt)
                .HasDefaultValue(0)
                .HasColumnName("PTE_Projekt");
            entity.Property(e => e.PteRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PTE_Rok");
            entity.Property(e => e.PteSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PTE_Seria");
            entity.Property(e => e.PteStawkaCzas)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTE_StawkaCzas");
            entity.Property(e => e.PteStawkaCzasAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTE_StawkaCzasAtr");
            entity.Property(e => e.PteStawkaCzasM)
                .HasDefaultValue(0)
                .HasColumnName("PTE_StawkaCzasM");
            entity.Property(e => e.PteStawkaCzasMjedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_StawkaCzasMJedn");
            entity.Property(e => e.PteStawkaIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTE_StawkaIlosc");
            entity.Property(e => e.PteStawkaIloscAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTE_StawkaIloscAtr");
            entity.Property(e => e.PteStawkaIloscM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PTE_StawkaIloscM");
            entity.Property(e => e.PteStawkaStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTE_StawkaStala");
            entity.Property(e => e.PteStawkaStalaAtr)
                .HasDefaultValue(0)
                .HasColumnName("PTE_StawkaStalaAtr");
            entity.Property(e => e.PteTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_TwrNumer");
            entity.Property(e => e.PteTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTE_TwrTyp");
            entity.Property(e => e.PteTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTE_Typ");
            entity.Property(e => e.PteWersja)
                .HasDefaultValue(0)
                .HasColumnName("PTE_Wersja");
            entity.Property(e => e.PteWymagajPodaniaStanuOperacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTE_WymagajPodaniaStanuOperacji");
            entity.Property(e => e.PteZatwNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_ZatwNumer");
            entity.Property(e => e.PteZatwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTE_ZatwTyp");
            entity.Property(e => e.PteZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("PTE_ZrdNumer");
            entity.Property(e => e.PteZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PTE_ZrdTyp");
        });

        modelBuilder.Entity<ProdWzorceKj>(entity =>
        {
            entity.HasKey(e => e.WkjId).HasName("WKJ_Primary");

            entity.ToTable("ProdWzorceKJ", "CDN", tb =>
                {
                    tb.HasTrigger("ProdWzorceKJ_DeleteHandler");
                    tb.HasTrigger("ProdWzorceKJ_UsunPowiazania");
                });

            entity.HasIndex(e => e.WkjKod, "WKJKod").IsUnique();

            entity.Property(e => e.WkjId).HasColumnName("WKJ_Id");
            entity.Property(e => e.WkjArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("WKJ_Archiwalny");
            entity.Property(e => e.WkjDataM)
                .HasDefaultValue(0)
                .HasColumnName("WKJ_DataM");
            entity.Property(e => e.WkjDataW)
                .HasDefaultValue(0)
                .HasColumnName("WKJ_DataW");
            entity.Property(e => e.WkjKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WKJ_Kod");
            entity.Property(e => e.WkjNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WKJ_Nazwa");
            entity.Property(e => e.WkjOpeM)
                .HasDefaultValue(0)
                .HasColumnName("WKJ_OpeM");
            entity.Property(e => e.WkjOpeW)
                .HasDefaultValue(0)
                .HasColumnName("WKJ_OpeW");
            entity.Property(e => e.WkjOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WKJ_Opis");
            entity.Property(e => e.WkjUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WKJ_Url");
        });

        modelBuilder.Entity<ProdWzorceKjtowary>(entity =>
        {
            entity.HasKey(e => e.PwtId).HasName("PWT_Primary");

            entity.ToTable("ProdWzorceKJTowary", "CDN", tb => tb.HasTrigger("ProdWzorceKJTowary_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PwtTwrGidnumer, e.PwtTwrGidtyp }, "PWTTowar");

            entity.HasIndex(e => new { e.PwtTwrGidnumer, e.PwtWkjid, e.PwtTwrGidtyp }, "PWTTowarWzorzec").IsUnique();

            entity.HasIndex(e => e.PwtWkjid, "PWTWzorzec");

            entity.Property(e => e.PwtId).HasColumnName("PWT_Id");
            entity.Property(e => e.PwtDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWT_Domyslny");
            entity.Property(e => e.PwtTwrGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("PWT_TwrGIDNumer");
            entity.Property(e => e.PwtTwrGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PWT_TwrGIDTyp");
            entity.Property(e => e.PwtWkjid)
                .HasDefaultValue(0)
                .HasColumnName("PWT_WKJId");

            entity.HasOne(d => d.PwtWkj).WithMany(p => p.ProdWzorceKjtowaries)
                .HasForeignKey(d => d.PwtWkjid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PWTWzorzec");
        });

        modelBuilder.Entity<ProdWzorceKosztow>(entity =>
        {
            entity.HasKey(e => e.PwkId).HasName("PWK_Primary");

            entity.ToTable("ProdWzorceKosztow", "CDN", tb =>
                {
                    tb.HasTrigger("ProdWzorceKosztow_DeleteHandler");
                    tb.HasTrigger("ProdWzorceKosztow_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PwkKategoria, "PWKKategoria");

            entity.HasIndex(e => e.PwkKod, "PWKKod").IsUnique();

            entity.HasIndex(e => e.PwkOpeM, "PWKOpeM");

            entity.HasIndex(e => e.PwkOpeW, "PWKOpeW");

            entity.Property(e => e.PwkId).HasColumnName("PWK_Id");
            entity.Property(e => e.PwkArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWK_Archiwalny");
            entity.Property(e => e.PwkDataM)
                .HasDefaultValue(0)
                .HasColumnName("PWK_DataM");
            entity.Property(e => e.PwkDataW)
                .HasDefaultValue(0)
                .HasColumnName("PWK_DataW");
            entity.Property(e => e.PwkDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWK_Domyslny");
            entity.Property(e => e.PwkDostepnyDla)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWK_DostepnyDla");
            entity.Property(e => e.PwkEdycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWK_Edycja");
            entity.Property(e => e.PwkKategoria)
                .HasDefaultValue(0)
                .HasColumnName("PWK_Kategoria");
            entity.Property(e => e.PwkKlucz)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWK_Klucz");
            entity.Property(e => e.PwkKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWK_Kod");
            entity.Property(e => e.PwkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWK_Nazwa");
            entity.Property(e => e.PwkOpeM)
                .HasDefaultValue(0)
                .HasColumnName("PWK_OpeM");
            entity.Property(e => e.PwkOpeW)
                .HasDefaultValue(0)
                .HasColumnName("PWK_OpeW");
            entity.Property(e => e.PwkOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWK_Opis");

            entity.HasOne(d => d.PwkOpeWNavigation).WithMany(p => p.ProdWzorceKosztows)
                .HasForeignKey(d => d.PwkOpeW)
                .HasConstraintName("FK_PWKOpeW");
        });

        modelBuilder.Entity<ProdWzorceKosztowWarunki>(entity =>
        {
            entity.HasKey(e => e.PwwId).HasName("PWW_Primary");

            entity.ToTable("ProdWzorceKosztowWarunki", "CDN");

            entity.HasIndex(e => e.PwwPwkid, "PWWPWKId");

            entity.HasIndex(e => new { e.PwwKod, e.PwwPwkid }, "PWWPWKIdKod").IsUnique();

            entity.Property(e => e.PwwId).HasColumnName("PWW_Id");
            entity.Property(e => e.PwwKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWW_Kod");
            entity.Property(e => e.PwwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PWW_Lp");
            entity.Property(e => e.PwwNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWW_Nazwa");
            entity.Property(e => e.PwwOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PWW_Opis");
            entity.Property(e => e.PwwPwkid)
                .HasDefaultValue(0)
                .HasColumnName("PWW_PWKId");
            entity.Property(e => e.PwwWielowartosciowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWW_Wielowartosciowy");
            entity.Property(e => e.PwwWymagany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PWW_Wymagany");

            entity.HasOne(d => d.PwwPwk).WithMany(p => p.ProdWzorceKosztowWarunkis)
                .HasForeignKey(d => d.PwwPwkid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PWWPWKId");
        });

        modelBuilder.Entity<ProdWzorceNumerowPartii>(entity =>
        {
            entity.HasKey(e => e.WnpId).HasName("WNP_Primary");

            entity.ToTable("ProdWzorceNumerowPartii", "CDN", tb =>
                {
                    tb.HasTrigger("ProdWzorceNumerowPartii_DeleteHandler");
                    tb.HasTrigger("ProdWzorceNumerowPartii_InsertUpdateHandler");
                });

            entity.Property(e => e.WnpId).HasColumnName("WNP_Id");
            entity.Property(e => e.WnpKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNP_Kod");
            entity.Property(e => e.WnpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNP_Nazwa");
            entity.Property(e => e.WnpRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("WNP_Rodzaj");
            entity.Property(e => e.WnpSeparator)
                .HasDefaultValue(0)
                .HasColumnName("WNP_Separator");
            entity.Property(e => e.WnpSql)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("WNP_SQL");
            entity.Property(e => e.WnpWspolnySeparator)
                .HasDefaultValue((byte)0)
                .HasColumnName("WNP_WspolnySeparator");
        });

        modelBuilder.Entity<ProdZabiegiOperacji>(entity =>
        {
            entity.HasKey(e => e.PzoId).HasName("PZO_Primary");

            entity.ToTable("ProdZabiegiOperacji", "CDN", tb => tb.HasTrigger("ProdZabiegiOperacji_DeleteHandler"));

            entity.HasIndex(e => new { e.PzoTechnologiaCzynnosc, e.PzoKod }, "PZOKeyCzynnoscKod");

            entity.HasIndex(e => new { e.PzoTechnologiaCzynnosc, e.PzoLp }, "PZOKeyPTCID");

            entity.Property(e => e.PzoId).HasColumnName("PZO_Id");
            entity.Property(e => e.PzoIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZO_Ilosc");
            entity.Property(e => e.PzoKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZO_Kod");
            entity.Property(e => e.PzoLp)
                .HasDefaultValue(0)
                .HasColumnName("PZO_Lp");
            entity.Property(e => e.PzoNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZO_Nazwa");
            entity.Property(e => e.PzoNrInstrukcji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZO_NrInstrukcji");
            entity.Property(e => e.PzoOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZO_Opis");
            entity.Property(e => e.PzoTechnologiaCzynnosc)
                .HasDefaultValue(0)
                .HasColumnName("PZO_TechnologiaCzynnosc");

            entity.HasOne(d => d.PzoTechnologiaCzynnoscNavigation).WithMany(p => p.ProdZabiegiOperacjis)
                .HasForeignKey(d => d.PzoTechnologiaCzynnosc)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PZOKeyPTCID");
        });

        modelBuilder.Entity<ProdZasoby>(entity =>
        {
            entity.HasKey(e => e.PzaId).HasName("PZA_Primary");

            entity.ToTable("ProdZasoby", "CDN", tb =>
                {
                    tb.HasTrigger("ProdZasobyAlias_DeleteHandler");
                    tb.HasTrigger("ProdZasobyAlias_InsertUpdateHandler");
                    tb.HasTrigger("ProdZasoby_CzyZwiazany");
                    tb.HasTrigger("ProdZasoby_DeleteHandler");
                    tb.HasTrigger("ProdZasoby_HistoriaZmianPKJ");
                    tb.HasTrigger("ProdZasoby_IdZlecenia");
                    tb.HasTrigger("ProdZasoby_InsertUpdateHandler");
                    tb.HasTrigger("ProdZasoby_PZAZasobUpdate");
                    tb.HasTrigger("ProdZasoby_UsunOperacjePowiazane");
                });

            entity.HasIndex(e => e.PzaCzynnosc, "PZACzynnosc");

            entity.HasIndex(e => e.PzaIdWzorcaNrPartii, "PZAIdWzorcaNrPartii");

            entity.HasIndex(e => e.PzaPkjnid, "PZAPKJNId");

            entity.HasIndex(e => e.PzaPzlid, "PZAPZLId");

            entity.HasIndex(e => e.PzaTechnologiaZasob, "PZATechZasobInc");

            entity.HasIndex(e => new { e.PzaTwrNumer, e.PzaTwrTyp }, "PZATowar");

            entity.HasIndex(e => e.PzaZasob, "PZAZasobIlosc");

            entity.Property(e => e.PzaId).HasColumnName("PZA_Id");
            entity.Property(e => e.PzaCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZA_Cecha");
            entity.Property(e => e.PzaCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PZA_Cena");
            entity.Property(e => e.PzaCzynnosc)
                .HasDefaultValue(0)
                .HasColumnName("PZA_Czynnosc");
            entity.Property(e => e.PzaIdWzorcaNrPartii)
                .HasDefaultValue(0)
                .HasColumnName("PZA_IdWzorcaNrPartii");
            entity.Property(e => e.PzaIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZA_Ilosc");
            entity.Property(e => e.PzaIloscPom)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZA_IloscPom");
            entity.Property(e => e.PzaIloscTechnologiczna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("PZA_IloscTechnologiczna");
            entity.Property(e => e.PzaJednostkaPom)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZA_JednostkaPom");
            entity.Property(e => e.PzaKlasaCechy)
                .HasDefaultValue(0)
                .HasColumnName("PZA_KlasaCechy");
            entity.Property(e => e.PzaKodNiezgodnosci)
                .HasDefaultValue(0)
                .HasColumnName("PZA_KodNiezgodnosci");
            entity.Property(e => e.PzaKopNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZA_KopNumer");
            entity.Property(e => e.PzaKopTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZA_KopTyp");
            entity.Property(e => e.PzaKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PZA_Koszt");
            entity.Property(e => e.PzaKosztSurowca)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PZA_KosztSurowca");
            entity.Property(e => e.PzaKosztUstalony)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZA_KosztUstalony");
            entity.Property(e => e.PzaMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZA_MagNumer");
            entity.Property(e => e.PzaNumerSeryjny)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZA_NumerSeryjny");
            entity.Property(e => e.PzaOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZA_Opis");
            entity.Property(e => e.PzaPkjnid)
                .HasDefaultValue(0)
                .HasColumnName("PZA_PKJNId");
            entity.Property(e => e.PzaPlanowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZA_Planowany");
            entity.Property(e => e.PzaPodlegaKj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZA_PodlegaKJ");
            entity.Property(e => e.PzaPrzeliczajWgPomocniczej)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZA_PrzeliczajWgPomocniczej");
            entity.Property(e => e.PzaPzlid)
                .HasDefaultValue(0)
                .HasColumnName("PZA_PZLId");
            entity.Property(e => e.PzaRodzajUbocznego)
                .HasDefaultValue(0)
                .HasColumnName("PZA_RodzajUbocznego");
            entity.Property(e => e.PzaTechnologiaZasob)
                .HasDefaultValue(0)
                .HasColumnName("PZA_TechnologiaZasob");
            entity.Property(e => e.PzaTermin)
                .HasDefaultValue(0)
                .HasColumnName("PZA_Termin");
            entity.Property(e => e.PzaTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZA_TwrNumer");
            entity.Property(e => e.PzaTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZA_TwrTyp");
            entity.Property(e => e.PzaTypKosztu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZA_TypKosztu");
            entity.Property(e => e.PzaTypZasobu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZA_TypZasobu");
            entity.Property(e => e.PzaWagaIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZA_WagaIlosc");
            entity.Property(e => e.PzaWagaKosztu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("PZA_WagaKosztu");
            entity.Property(e => e.PzaZasob)
                .HasDefaultValue(0)
                .HasColumnName("PZA_Zasob");

            entity.HasOne(d => d.PzaCzynnoscNavigation).WithMany(p => p.ProdZasobies)
                .HasForeignKey(d => d.PzaCzynnosc)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PZACzynnosc");
        });

        modelBuilder.Entity<ProdZasobyzTechnologiami>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProdZasobyzTechnologiami", "CDN");

            entity.Property(e => e.Kod)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Nazwa)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OpisWersji)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PtcTwrNumer).HasColumnName("PTC_TwrNumer");
            entity.Property(e => e.PteTwrNumer).HasColumnName("PTE_TwrNumer");
            entity.Property(e => e.PtzId).HasColumnName("ptz_id");
            entity.Property(e => e.PtzTwrNumer).HasColumnName("PTZ_twrNumer");
        });

        modelBuilder.Entity<ProdZlecElem>(entity =>
        {
            entity.HasKey(e => e.PzeId).HasName("PZE_Primary");

            entity.ToTable("ProdZlecElem", "CDN", tb =>
                {
                    tb.HasTrigger("ProdZlecElem_DeleteHandler");
                    tb.HasTrigger("ProdZlecElem_InsertUpdateHandler");
                    tb.HasTrigger("ProdZlecElem_ObiektyDoPlanu");
                    tb.HasTrigger("ProdZlecElem_PlanowacOd");
                });

            entity.HasIndex(e => e.PzeIdWzorcaNrPartii, "PZEIdWzorcaNrPartii");

            entity.HasIndex(e => new { e.PzeTwrNumer, e.PzeTwrTyp }, "PZETowar");

            entity.HasIndex(e => new { e.PzeZlecenie, e.PzeLp }, "PZEZlecenie");

            entity.Property(e => e.PzeId).HasColumnName("PZE_Id");
            entity.Property(e => e.PzeCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZE_Cecha");
            entity.Property(e => e.PzeIdWzorcaNrPartii)
                .HasDefaultValue(0)
                .HasColumnName("PZE_IdWzorcaNrPartii");
            entity.Property(e => e.PzeIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZE_Ilosc");
            entity.Property(e => e.PzeIloscPlan)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZE_IloscPlan");
            entity.Property(e => e.PzeKlasaCechy)
                .HasDefaultValue(0)
                .HasColumnName("PZE_KlasaCechy");
            entity.Property(e => e.PzeKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("PZE_KnDNumer");
            entity.Property(e => e.PzeKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZE_KnDTyp");
            entity.Property(e => e.PzeKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZE_KntNumer");
            entity.Property(e => e.PzeKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZE_KntTyp");
            entity.Property(e => e.PzeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZE_Lp");
            entity.Property(e => e.PzeMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZE_MagNumer");
            entity.Property(e => e.PzePartieOsobneProcesy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZE_PartieOsobneProcesy");
            entity.Property(e => e.PzePlanowacOd)
                .HasDefaultValue(0)
                .HasColumnName("PZE_PlanowacOd");
            entity.Property(e => e.PzePlanowacWpartiach)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZE_PlanowacWPartiach");
            entity.Property(e => e.PzePriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZE_Priorytet");
            entity.Property(e => e.PzeRownajDoPelnejPartii)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZE_RownajDoPelnejPartii");
            entity.Property(e => e.PzeTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("PZE_Technologia");
            entity.Property(e => e.PzeTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZE_TwrNumer");
            entity.Property(e => e.PzeTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZE_TwrTyp");
            entity.Property(e => e.PzeWielkoscPartii)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZE_WielkoscPartii");
            entity.Property(e => e.PzeWyborMagazynuNaPozycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZE_WyborMagazynuNaPozycji");
            entity.Property(e => e.PzeZlecenie)
                .HasDefaultValue(0)
                .HasColumnName("PZE_Zlecenie");
            entity.Property(e => e.PzeZrownoleglacDo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(4, 1)")
                .HasColumnName("PZE_ZrownoleglacDo");

            entity.HasOne(d => d.PzeZlecenieNavigation).WithMany(p => p.ProdZlecElems)
                .HasForeignKey(d => d.PzeZlecenie)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PZEZlecenie");
        });

        modelBuilder.Entity<ProdZleceniaZabiegi>(entity =>
        {
            entity.HasKey(e => e.PzzId).HasName("PZZ_Primary");

            entity.ToTable("ProdZleceniaZabiegi", "CDN", tb =>
                {
                    tb.HasTrigger("ProdZleceniaZabiegi_DeleteHandler");
                    tb.HasTrigger("ProdZleceniaZabiegi_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PzzOpeW, "PZZOpeW");

            entity.HasIndex(e => e.PzzPczId, "PZZPCZId");

            entity.HasIndex(e => e.PzzTechnologiaZabieg, "PZZTechnologiaZabieg");

            entity.Property(e => e.PzzId).HasColumnName("PZZ_Id");
            entity.Property(e => e.PzzDataWykonania)
                .HasDefaultValue(0)
                .HasColumnName("PZZ_DataWykonania");
            entity.Property(e => e.PzzIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZZ_Ilosc");
            entity.Property(e => e.PzzKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZZ_Kod");
            entity.Property(e => e.PzzLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZZ_Lp");
            entity.Property(e => e.PzzNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZZ_Nazwa");
            entity.Property(e => e.PzzNrInstrukcji)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZZ_NrInstrukcji");
            entity.Property(e => e.PzzOpeW)
                .HasDefaultValue(0)
                .HasColumnName("PZZ_OpeW");
            entity.Property(e => e.PzzOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZZ_Opis");
            entity.Property(e => e.PzzPczId)
                .HasDefaultValue(0)
                .HasColumnName("PZZ_PczId");
            entity.Property(e => e.PzzTechnologiaZabieg)
                .HasDefaultValue(0)
                .HasColumnName("PZZ_TechnologiaZabieg");
            entity.Property(e => e.PzzWykonano)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZZ_Wykonano");

            entity.HasOne(d => d.PzzPcz).WithMany(p => p.ProdZleceniaZabiegis)
                .HasForeignKey(d => d.PzzPczId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PZZPCZId");
        });

        modelBuilder.Entity<ProdZlecenium>(entity =>
        {
            entity.HasKey(e => e.PzlId).HasName("PZL_Primary");

            entity.ToTable("ProdZlecenia", "CDN", tb =>
                {
                    tb.HasTrigger("ProdZlecenia_AktualizujPKJN");
                    tb.HasTrigger("ProdZlecenia_DeleteAtrybutyHist");
                    tb.HasTrigger("ProdZlecenia_DeleteHandler");
                    tb.HasTrigger("ProdZlecenia_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PzlDataWystawienia, e.PzlId }, "PZLData").IsUnique();

            entity.HasIndex(e => e.PzlDataZamkniecia, "PZLDataZamkniecia");

            entity.HasIndex(e => e.PzlKnDnumer, "PZLKnd");

            entity.HasIndex(e => new { e.PzlKntNumer, e.PzlKntTyp }, "PZLKnt");

            entity.HasIndex(e => new { e.PzlRok, e.PzlMiesiac, e.PzlSeria, e.PzlNumer, e.PzlLp, e.PzlPrjId }, "PZLNumer").IsUnique();

            entity.HasIndex(e => e.PzlOddzial, "PZLOddzial");

            entity.HasIndex(e => new { e.PzlOpWnumer, e.PzlDataWystawienia, e.PzlId }, "PZLOpW").IsUnique();

            entity.HasIndex(e => e.PzlPrjId, "PZLPrjId");

            entity.HasIndex(e => e.PzlProjekt, "PZLProjekt");

            entity.Property(e => e.PzlId).HasColumnName("PZL_Id");
            entity.Property(e => e.PzlCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PZL_CzasModyfikacji");
            entity.Property(e => e.PzlDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("PZL_DataKsiegowania");
            entity.Property(e => e.PzlDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("PZL_DataWystawienia");
            entity.Property(e => e.PzlDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("PZL_DataZamkniecia");
            entity.Property(e => e.PzlDokPrzyjeciaPoDokWydania)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_DokPrzyjeciaPoDokWydania");
            entity.Property(e => e.PzlDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZL_DokumentObcy");
            entity.Property(e => e.PzlDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZL_Dziennik");
            entity.Property(e => e.PzlFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_FrmNumer");
            entity.Property(e => e.PzlFrsId)
                .HasDefaultValue(0)
                .HasColumnName("PZL_FrsId");
            entity.Property(e => e.PzlGenDokZatwierdzone)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_GenDokZatwierdzone");
            entity.Property(e => e.PzlGenerujZleceniaPrzyPlanowaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_GenerujZleceniaPrzyPlanowaniu");
            entity.Property(e => e.PzlKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_KnDNumer");
            entity.Property(e => e.PzlKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZL_KnDTyp");
            entity.Property(e => e.PzlKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_KntNumer");
            entity.Property(e => e.PzlKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZL_KntTyp");
            entity.Property(e => e.PzlKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PZL_Koszt");
            entity.Property(e => e.PzlKosztSurowca)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PZL_KosztSurowca");
            entity.Property(e => e.PzlKosztUstalony)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_KosztUstalony");
            entity.Property(e => e.PzlLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZL_Lp");
            entity.Property(e => e.PzlMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_Miesiac");
            entity.Property(e => e.PzlNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_NieKsiegowac");
            entity.Property(e => e.PzlNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_Numer");
            entity.Property(e => e.PzlNumerSeryjny)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZL_NumerSeryjny");
            entity.Property(e => e.PzlOddzial)
                .HasDefaultValue(0)
                .HasColumnName("PZL_Oddzial");
            entity.Property(e => e.PzlOpMnumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_OpMNumer");
            entity.Property(e => e.PzlOpWnumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_OpWNumer");
            entity.Property(e => e.PzlOpZnumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_OpZNumer");
            entity.Property(e => e.PzlOpis)
                .HasMaxLength(3999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZL_Opis");
            entity.Property(e => e.PzlPlanWskazaneZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_PlanWskazaneZasoby");
            entity.Property(e => e.PzlPlanowacOd)
                .HasDefaultValue(0)
                .HasColumnName("PZL_PlanowacOd");
            entity.Property(e => e.PzlPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_PriorytetRez");
            entity.Property(e => e.PzlPriorytetZlc)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_PriorytetZlc");
            entity.Property(e => e.PzlPrjId)
                .HasDefaultValue(0)
                .HasColumnName("PZL_PrjId");
            entity.Property(e => e.PzlProjekt)
                .HasDefaultValue(0)
                .HasColumnName("PZL_Projekt");
            entity.Property(e => e.PzlPrzesunNaZwolnionych)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_PrzesunNaZwolnionych");
            entity.Property(e => e.PzlPrzesunOperacjePoRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_PrzesunOperacjePoRealizacji");
            entity.Property(e => e.PzlRealizacjaWgPlanu)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_RealizacjaWgPlanu");
            entity.Property(e => e.PzlRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_RezerwujZasoby");
            entity.Property(e => e.PzlRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PZL_Rok");
            entity.Property(e => e.PzlSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_SCHNumer");
            entity.Property(e => e.PzlSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZL_SCHTyp");
            entity.Property(e => e.PzlSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZL_Seria");
            entity.Property(e => e.PzlStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_Stan");
            entity.Property(e => e.PzlStatus)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZL_Status");
            entity.Property(e => e.PzlStatusAps)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_StatusAPS");
            entity.Property(e => e.PzlWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZL_WsDziennik");
            entity.Property(e => e.PzlWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("PZL_WsSCHNumer");
            entity.Property(e => e.PzlWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZL_WsSCHTyp");
            entity.Property(e => e.PzlWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_WsStosujDziennik");
            entity.Property(e => e.PzlWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_WsStosujSchemat");
            entity.Property(e => e.PzlWyborMagazynuNaPozycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_WyborMagazynuNaPozycji");
            entity.Property(e => e.PzlZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_Zaksiegowano");
            entity.Property(e => e.PzlZwolnioneDoProd)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZL_ZwolnioneDoProd");
        });

        modelBuilder.Entity<ProdZmianyGanttum>(entity =>
        {
            entity.HasKey(e => new { e.PzgFrsid, e.PzgNumer }).HasName("PZG_Primary");

            entity.ToTable("ProdZmianyGantta", "CDN");

            entity.Property(e => e.PzgFrsid).HasColumnName("PZG_FRSId");
            entity.Property(e => e.PzgNumer).HasColumnName("PZG_Numer");
            entity.Property(e => e.PzgAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZG_Aktywny");
            entity.Property(e => e.PzgGodzinaDo)
                .HasDefaultValue(0)
                .HasColumnName("PZG_GodzinaDo");
            entity.Property(e => e.PzgGodzinaOd)
                .HasDefaultValue(0)
                .HasColumnName("PZG_GodzinaOd");
            entity.Property(e => e.PzgKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PZG_Kod");

            entity.HasOne(d => d.PzgFrs).WithMany(p => p.ProdZmianyGantta)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.PzgFrsid)
                .HasConstraintName("FK_PZGPrimary");
        });

        modelBuilder.Entity<ProdZuzycieMaterialu>(entity =>
        {
            entity.HasKey(e => e.PzmId).HasName("PZM_Primary");

            entity.ToTable("ProdZuzycieMaterialu", "CDN");

            entity.HasIndex(e => e.PzmPtzid, "PZMPTZId");

            entity.HasIndex(e => e.PzmPzlid, "PZMPZLId");

            entity.Property(e => e.PzmId).HasColumnName("PZM_Id");
            entity.Property(e => e.PzmIloscZuzyta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZM_IloscZuzyta");
            entity.Property(e => e.PzmPrzepisanoMaterialy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZM_PrzepisanoMaterialy");
            entity.Property(e => e.PzmPtzid)
                .HasDefaultValue(0)
                .HasColumnName("PZM_PTZId");
            entity.Property(e => e.PzmPzlid)
                .HasDefaultValue(0)
                .HasColumnName("PZM_PZLId");
            entity.Property(e => e.PzmZakonczonoRejestracje)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZM_ZakonczonoRejestracje");
            entity.Property(e => e.PzmZuzycieWgNormy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZM_ZuzycieWgNormy");
        });

        modelBuilder.Entity<ProdZuzycieNarzedzium>(entity =>
        {
            entity.HasKey(e => e.PznPobid).HasName("PZN_Primary");

            entity.ToTable("ProdZuzycieNarzedzia", "CDN");

            entity.Property(e => e.PznPobid).HasColumnName("PZN_POBId");
            entity.Property(e => e.PznIloscCykliData)
                .HasDefaultValue(0)
                .HasColumnName("PZN_IloscCykliData");
            entity.Property(e => e.PznIloscCykliMat)
                .HasDefaultValue(0)
                .HasColumnName("PZN_IloscCykliMat");
            entity.Property(e => e.PznIloscCykliProd)
                .HasDefaultValue(0)
                .HasColumnName("PZN_IloscCykliProd");
            entity.Property(e => e.PznIloscCykliRealiz)
                .HasDefaultValue(0)
                .HasColumnName("PZN_IloscCykliRealiz");
            entity.Property(e => e.PznNiePlanujOd)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_NiePlanujOd");
            entity.Property(e => e.PznSposobObliczaniaZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_SposobObliczaniaZ");
            entity.Property(e => e.PznZuzycieBiezData)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZuzycieBiezData");
            entity.Property(e => e.PznZuzycieBiezDataJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZuzycieBiezDataJm");
            entity.Property(e => e.PznZuzycieBiezMat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZuzycieBiezMat");
            entity.Property(e => e.PznZuzycieBiezProd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZuzycieBiezProd");
            entity.Property(e => e.PznZuzycieBiezRealiz)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZuzycieBiezRealiz");
            entity.Property(e => e.PznZuzycieBiezRealizJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZuzycieBiezRealizJm");
            entity.Property(e => e.PznZuzycieCalk)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZuzycieCalk");
            entity.Property(e => e.PznZuzycieCalkDataJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZuzycieCalkDataJm");
            entity.Property(e => e.PznZuzycieCalkMat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZuzycieCalkMat");
            entity.Property(e => e.PznZuzycieCalkProd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZuzycieCalkProd");
            entity.Property(e => e.PznZuzycieCalkRealiz)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZuzycieCalkRealiz");
            entity.Property(e => e.PznZuzycieCalkRealizJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZuzycieCalkRealizJm");
            entity.Property(e => e.PznZywotnoscAkcja)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZywotnoscAkcja");
            entity.Property(e => e.PznZywotnoscCalkDataDo)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZywotnoscCalkDataDo");
            entity.Property(e => e.PznZywotnoscCalkDataOd)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZywotnoscCalkDataOd");
            entity.Property(e => e.PznZywotnoscCalkMat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZywotnoscCalkMat");
            entity.Property(e => e.PznZywotnoscCalkProd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZywotnoscCalkProd");
            entity.Property(e => e.PznZywotnoscCalkRealiz)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZywotnoscCalkRealiz");
            entity.Property(e => e.PznZywotnoscCalkRealizJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZywotnoscCalkRealizJm");
            entity.Property(e => e.PznZywotnoscWcykluData)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZywotnoscWCykluData");
            entity.Property(e => e.PznZywotnoscWcykluDataJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZywotnoscWCykluDataJm");
            entity.Property(e => e.PznZywotnoscWcykluMat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZywotnoscWCykluMat");
            entity.Property(e => e.PznZywotnoscWcykluProd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZN_ZywotnoscWCykluProd");
            entity.Property(e => e.PznZywotnoscWcykluRealiz)
                .HasDefaultValue(0)
                .HasColumnName("PZN_ZywotnoscWCykluRealiz");
            entity.Property(e => e.PznZywotnoscWcykluRealizJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("PZN_ZywotnoscWCykluRealizJm");

            entity.HasOne(d => d.PznPob).WithOne(p => p.ProdZuzycieNarzedzium)
                .HasForeignKey<ProdZuzycieNarzedzium>(d => d.PznPobid)
                .HasConstraintName("FK_PZNPrimary");
        });

        modelBuilder.Entity<ProdZwiazane>(entity =>
        {
            entity.HasKey(e => e.PzwId).HasName("PZW_Primary");

            entity.ToTable("ProdZwiazane", "CDN", tb => tb.HasTrigger("ProdZwiazane_InsertUpdateHandler"));

            entity.HasIndex(e => e.PzwDokNumer, "PZWDok");

            entity.HasIndex(e => e.PzwZrdNumer, "PZWZrd");

            entity.HasIndex(e => new { e.PzwZrdNumer, e.PzwZrdTyp, e.PzwDokNumer, e.PzwDokTyp }, "PZWZrdDok");

            entity.Property(e => e.PzwId).HasColumnName("PZW_Id");
            entity.Property(e => e.PzwDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("PZW_DokFirma");
            entity.Property(e => e.PzwDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZW_DokLp");
            entity.Property(e => e.PzwDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZW_DokNumer");
            entity.Property(e => e.PzwDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZW_DokTyp");
            entity.Property(e => e.PzwPolprodPartia)
                .HasDefaultValue(0)
                .HasColumnName("PZW_PolprodPartia");
            entity.Property(e => e.PzwPtzpartia)
                .HasDefaultValue(0)
                .HasColumnName("PZW_PTZPartia");
            entity.Property(e => e.PzwZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("PZW_ZrdFirma");
            entity.Property(e => e.PzwZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZW_ZrdLp");
            entity.Property(e => e.PzwZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("PZW_ZrdNumer");
            entity.Property(e => e.PzwZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PZW_ZrdTyp");
        });

        modelBuilder.Entity<ProdZwiazanePolprodukty>(entity =>
        {
            entity.HasKey(e => new { e.PzpPzaidwykonany, e.PzpPzaidplanowany }).HasName("PZP_Primary");

            entity.ToTable("ProdZwiazanePolprodukty", "CDN", tb =>
                {
                    tb.HasTrigger("ProdZwiazanePolprodukty_InsertUpdateHandler");
                    tb.HasTrigger("ProdZwiazanePolprodukty_UsunOperacjePowiazane");
                });

            entity.HasIndex(e => e.PzpPzaidplanowany, "PZPZasobPlanowany");

            entity.Property(e => e.PzpPzaidwykonany).HasColumnName("PZP_PZAIDWykonany");
            entity.Property(e => e.PzpPzaidplanowany).HasColumnName("PZP_PZAIDPlanowany");
            entity.Property(e => e.PzpIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("PZP_Ilosc");
        });

        modelBuilder.Entity<ProgiIloscAp>(entity =>
        {
            entity.HasKey(e => e.PiaId).HasName("PIA_Primary");

            entity.ToTable("ProgiIloscAp", "CDN", tb =>
                {
                    tb.HasTrigger("ProgiIloscAp_DeleteHandler");
                    tb.HasTrigger("ProgiIloscAp_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.PiaObiNumer, e.PiaObiTyp }, "PIAObi");

            entity.HasIndex(e => new { e.PiaObiNumer, e.PiaObiTyp, e.PiaPrzedzialOd, e.PiaPrzedzialDo }, "PIAObiPrzedzial");

            entity.Property(e => e.PiaId).HasColumnName("PIA_Id");
            entity.Property(e => e.PiaCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PIA_CzasModyfikacji");
            entity.Property(e => e.PiaCzyGrafika)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIA_CzyGrafika");
            entity.Property(e => e.PiaCzyIloscRzeczywista)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIA_CzyIloscRzeczywista");
            entity.Property(e => e.PiaCzyKolor)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIA_CzyKolor");
            entity.Property(e => e.PiaCzyOpis)
                .HasDefaultValue((byte)0)
                .HasColumnName("PIA_CzyOpis");
            entity.Property(e => e.PiaDostepnoscFlaga)
                .HasDefaultValue(0)
                .HasColumnName("PIA_DostepnoscFlaga");
            entity.Property(e => e.PiaGrafikaSciezka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIA_GrafikaSciezka");
            entity.Property(e => e.PiaKolorNumer)
                .HasDefaultValue(0)
                .HasColumnName("PIA_KolorNumer");
            entity.Property(e => e.PiaObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PIA_ObiNumer");
            entity.Property(e => e.PiaObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PIA_ObiTyp");
            entity.Property(e => e.PiaOpisTresc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PIA_OpisTresc");
            entity.Property(e => e.PiaPrzedzialDo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("PIA_PrzedzialDo");
            entity.Property(e => e.PiaPrzedzialOd)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("PIA_PrzedzialOd");
        });

        modelBuilder.Entity<ProgiPromocje>(entity =>
        {
            entity.HasKey(e => e.PrpId).HasName("PRP_Primary");

            entity.ToTable("ProgiPromocje", "CDN", tb =>
                {
                    tb.HasTrigger("ProgiPromocje_DeleteHandler");
                    tb.HasTrigger("ProgiPromocje_UpdateHandlerPGR");
                });

            entity.HasIndex(e => e.PrpPrmId, "PRPPrm");

            entity.Property(e => e.PrpId).HasColumnName("PRP_ID");
            entity.Property(e => e.PrpEdycjaGratisow)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRP_EdycjaGratisow");
            entity.Property(e => e.PrpGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("PRP_GUID");
            entity.Property(e => e.PrpJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRP_JmZ");
            entity.Property(e => e.PrpMinIloscPoz)
                .HasDefaultValue(0)
                .HasColumnName("PRP_MinIloscPoz");
            entity.Property(e => e.PrpPrmId)
                .HasDefaultValue(0)
                .HasColumnName("PRP_PrmID");
            entity.Property(e => e.PrpRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRP_Rodzaj");
            entity.Property(e => e.PrpWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PRP_Wartosc");

            entity.HasOne(d => d.PrpPrm).WithMany(p => p.ProgiPromocjes)
                .HasForeignKey(d => d.PrpPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PRPPrm");
        });

        modelBuilder.Entity<ProgiTwrPromocje>(entity =>
        {
            entity.HasKey(e => new { e.PtpPrpid, e.PtpTprid }).HasName("PTP_Primary");

            entity.ToTable("ProgiTwrPromocje", "CDN", tb =>
                {
                    tb.HasTrigger("ProgiTwrPromocje_InsertHandlerTwG");
                    tb.HasTrigger("ProgiTwrPromocje_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.PtpPrpid, "PTPProgiPromocje");

            entity.HasIndex(e => e.PtpTprid, "PTPTwrPromocje");

            entity.Property(e => e.PtpPrpid).HasColumnName("PTP_PRPId");
            entity.Property(e => e.PtpTprid).HasColumnName("PTP_TPRId");
            entity.Property(e => e.PtpGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("PTP_GUID");
            entity.Property(e => e.PtpMinIloscPoz)
                .HasDefaultValue(0)
                .HasColumnName("PTP_MinIloscPoz");
            entity.Property(e => e.PtpRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("PTP_Rodzaj");
            entity.Property(e => e.PtpWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTP_Wartosc");
            entity.Property(e => e.PtpWartoscProg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("PTP_WartoscProg");

            entity.HasOne(d => d.PtpPrp).WithMany(p => p.ProgiTwrPromocjes)
                .HasForeignKey(d => d.PtpPrpid)
                .HasConstraintName("FK_PTPProgiPromocje");
        });

        modelBuilder.Entity<ProlongElem>(entity =>
        {
            entity.HasKey(e => new { e.PrlePrlnId, e.PrleLp }).HasName("PRLE_Primary");

            entity.ToTable("ProlongElem", "CDN");

            entity.HasIndex(e => e.PrlePrlnId, "PRLEPrln");

            entity.HasIndex(e => e.PrleKarnumer, "PRLERejestr");

            entity.HasIndex(e => new { e.PrleZrdTyp, e.PrleZrdNumer, e.PrleZrdLp }, "PRLEZrodlo");

            entity.Property(e => e.PrlePrlnId).HasColumnName("PRLE_PrlnId");
            entity.Property(e => e.PrleLp).HasColumnName("PRLE_Lp");
            entity.Property(e => e.PrleDniZwloki)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_DniZwloki");
            entity.Property(e => e.PrleFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLE_FormaNazwa");
            entity.Property(e => e.PrleFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLE_FormaNr");
            entity.Property(e => e.PrleKarfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_KARFirma");
            entity.Property(e => e.PrleKarlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLE_KARLp");
            entity.Property(e => e.PrleKarnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_KARNumer");
            entity.Property(e => e.PrleKartyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLE_KARTyp");
            entity.Property(e => e.PrleKursLodsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("PRLE_KursLOdsetki");
            entity.Property(e => e.PrleKursModsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PRLE_KursMOdsetki");
            entity.Property(e => e.PrleKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLE_Kwota");
            entity.Property(e => e.PrleKwotaOdsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLE_KwotaOdsetki");
            entity.Property(e => e.PrleNotatka)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLE_Notatka");
            entity.Property(e => e.PrleNrKursuOdsetki)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLE_NrKursuOdsetki");
            entity.Property(e => e.PrleStopaProcentowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("PRLE_StopaProcentowa");
            entity.Property(e => e.PrleTermin)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_Termin");
            entity.Property(e => e.PrleTerminMaksymalny)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_TerminMaksymalny");
            entity.Property(e => e.PrleTerminNowy)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_TerminNowy");
            entity.Property(e => e.PrleTerminSpodziewalny)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_TerminSpodziewalny");
            entity.Property(e => e.PrleWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLE_Waluta");
            entity.Property(e => e.PrleWalutaOdsetki)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLE_walutaOdsetki");
            entity.Property(e => e.PrleZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_ZrdFirma");
            entity.Property(e => e.PrleZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLE_ZrdLp");
            entity.Property(e => e.PrleZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRLE_ZrdNumer");
            entity.Property(e => e.PrleZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLE_ZrdTyp");

            entity.HasOne(d => d.PrlePrln).WithMany(p => p.ProlongElems)
                .HasForeignKey(d => d.PrlePrlnId)
                .HasConstraintName("FK_PRLEPrln");
        });

        modelBuilder.Entity<ProlongNag>(entity =>
        {
            entity.HasKey(e => e.PrlnId).HasName("PRLN_Primary");

            entity.ToTable("ProlongNag", "CDN", tb => tb.HasTrigger("ProlongNag_DeleteHandler"));

            entity.HasIndex(e => new { e.PrlnKnttyp, e.PrlnKntfirma, e.PrlnKntnumer, e.PrlnKntlp }, "PRLNKontrahent");

            entity.Property(e => e.PrlnId).HasColumnName("PRLN_ID");
            entity.Property(e => e.PrlnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_Aktywny");
            entity.Property(e => e.PrlnCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_CechaOpis");
            entity.Property(e => e.PrlnData)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_Data");
            entity.Property(e => e.PrlnDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_DataKsiegowania");
            entity.Property(e => e.PrlnDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_DokumentObcy");
            entity.Property(e => e.PrlnDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_Dziennik");
            entity.Property(e => e.PrlnKarFirma)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_KarFirma");
            entity.Property(e => e.PrlnKarLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_KarLp");
            entity.Property(e => e.PrlnKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_KarNumer");
            entity.Property(e => e.PrlnKarTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_KarTyp");
            entity.Property(e => e.PrlnKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_KNTFirma");
            entity.Property(e => e.PrlnKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_KNTLp");
            entity.Property(e => e.PrlnKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_KNTNumer");
            entity.Property(e => e.PrlnKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_KNTTyp");
            entity.Property(e => e.PrlnKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLN_Koszt");
            entity.Property(e => e.PrlnKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("PRLN_KursL");
            entity.Property(e => e.PrlnKursLodsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("PRLN_KursLOdsetki");
            entity.Property(e => e.PrlnKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PRLN_KursM");
            entity.Property(e => e.PrlnKursModsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("PRLN_KursMOdsetki");
            entity.Property(e => e.PrlnKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLN_Kwota");
            entity.Property(e => e.PrlnKwotaMinOdsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLN_KwotaMinOdsetki");
            entity.Property(e => e.PrlnKwotaOdsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PRLN_KwotaOdsetki");
            entity.Property(e => e.PrlnMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_Miesiac");
            entity.Property(e => e.PrlnNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_NieKsiegowac");
            entity.Property(e => e.PrlnNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_NrKursu");
            entity.Property(e => e.PrlnNrKursuOdsetki)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_NrKursuOdsetki");
            entity.Property(e => e.PrlnNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_Numer");
            entity.Property(e => e.PrlnOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_OpeFirmaW");
            entity.Property(e => e.PrlnOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_OpeFirmaZ");
            entity.Property(e => e.PrlnOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_OpeLpW");
            entity.Property(e => e.PrlnOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_OpeLpZ");
            entity.Property(e => e.PrlnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_OpeNumerW");
            entity.Property(e => e.PrlnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_OpeNumerZ");
            entity.Property(e => e.PrlnOpeNumerZfr)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_OpeNumerZFR");
            entity.Property(e => e.PrlnOpeNumerZm)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_OpeNumerZM");
            entity.Property(e => e.PrlnOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_OpeTypW");
            entity.Property(e => e.PrlnOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_OpeTypZ");
            entity.Property(e => e.PrlnOpeTypZfr)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_OpeTypZFR");
            entity.Property(e => e.PrlnOpeTypZm)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_OpeTypZM");
            entity.Property(e => e.PrlnPrlnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_PrlnTyp");
            entity.Property(e => e.PrlnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_Rok");
            entity.Property(e => e.PrlnSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_SchNumer");
            entity.Property(e => e.PrlnSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_SchTyp");
            entity.Property(e => e.PrlnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_Seria");
            entity.Property(e => e.PrlnStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_Status");
            entity.Property(e => e.PrlnTermin)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_Termin");
            entity.Property(e => e.PrlnTerminMax)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_TerminMax");
            entity.Property(e => e.PrlnTerminPrln)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_TerminPrln");
            entity.Property(e => e.PrlnTresc)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_Tresc");
            entity.Property(e => e.PrlnTstampZfr)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_TStampZFR");
            entity.Property(e => e.PrlnTstampZm)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_TStampZM");
            entity.Property(e => e.PrlnTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_Typ");
            entity.Property(e => e.PrlnTypOdsetki)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_TypOdsetki");
            entity.Property(e => e.PrlnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_Waluta");
            entity.Property(e => e.PrlnWalutaKosztu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_WalutaKosztu");
            entity.Property(e => e.PrlnWalutaOdsetki)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_WalutaOdsetki");
            entity.Property(e => e.PrlnWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PRLN_WsDziennik");
            entity.Property(e => e.PrlnWsSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_WsSchNumer");
            entity.Property(e => e.PrlnWsSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PRLN_WsSchTyp");
            entity.Property(e => e.PrlnWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_WsStosujDziennik");
            entity.Property(e => e.PrlnWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_WsStosujSchemat");
            entity.Property(e => e.PrlnZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_Zaksiegowano");
            entity.Property(e => e.PrlnZatwFormalnoRach)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_ZatwFormalnoRach");
            entity.Property(e => e.PrlnZatwMerytorycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("PRLN_ZatwMerytorycznie");
            entity.Property(e => e.PrlnZrdId)
                .HasDefaultValue(0)
                .HasColumnName("PRLN_ZrdID");
        });

        modelBuilder.Entity<Przelewy>(entity =>
        {
            entity.HasKey(e => e.PpxId).HasName("PPX_Primary");

            entity.ToTable("Przelewy", "CDN");

            entity.HasIndex(e => new { e.PpxExpId, e.PpxExpLin }, "PPXExpID");

            entity.HasIndex(e => new { e.PpxPpnid, e.PpxPpelp }, "PPXPrzelewyElem").IsUnique();

            entity.HasIndex(e => e.PpxStatus, "PPXStatus");

            entity.HasIndex(e => new { e.PpxTrptyp, e.PpxTrpnumer, e.PpxTrplp }, "PPXTRP");

            entity.Property(e => e.PpxId).HasColumnName("PPX_ID");
            entity.Property(e => e.PpxExpId)
                .HasDefaultValue(0)
                .HasColumnName("PPX_ExpID");
            entity.Property(e => e.PpxExpLin)
                .HasDefaultValue(0)
                .HasColumnName("PPX_ExpLin");
            entity.Property(e => e.PpxKwotaAkc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PPX_KwotaAkc");
            entity.Property(e => e.PpxKwotaExp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("PPX_KwotaExp");
            entity.Property(e => e.PpxPpelp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPX_PPELp");
            entity.Property(e => e.PpxPpnid)
                .HasDefaultValue(0)
                .HasColumnName("PPX_PPNID");
            entity.Property(e => e.PpxStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPX_Status");
            entity.Property(e => e.PpxTrpfirma)
                .HasDefaultValue(0)
                .HasColumnName("PPX_TRPFirma");
            entity.Property(e => e.PpxTrplp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPX_TRPLp");
            entity.Property(e => e.PpxTrpnumer)
                .HasDefaultValue(0)
                .HasColumnName("PPX_TRPNumer");
            entity.Property(e => e.PpxTrptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPX_TRPTyp");

            entity.HasOne(d => d.PrzelewyElem).WithOne(p => p.Przelewy)
                .HasForeignKey<Przelewy>(d => new { d.PpxPpnid, d.PpxPpelp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPXPrzelewyElem");

            entity.HasOne(d => d.TraPlat).WithMany(p => p.Przelewies)
                .HasForeignKey(d => new { d.PpxTrptyp, d.PpxTrpnumer, d.PpxTrplp })
                .HasConstraintName("FK_PPXTRP");
        });

        modelBuilder.Entity<PrzelewyAutoryzacje>(entity =>
        {
            entity.HasKey(e => e.PpaId).HasName("PPA_Primary");

            entity.ToTable("PrzelewyAutoryzacje", "CDN");

            entity.HasIndex(e => e.PpaOpeNumer, "PPAOpeNumer");

            entity.HasIndex(e => e.PpaPpnid, "PPAPPNID");

            entity.Property(e => e.PpaId).HasColumnName("PPA_ID");
            entity.Property(e => e.PpaData)
                .HasDefaultValue(0)
                .HasColumnName("PPA_Data");
            entity.Property(e => e.PpaOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPA_OpeNumer");
            entity.Property(e => e.PpaPodpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPA_Podpis");
            entity.Property(e => e.PpaPpnid)
                .HasDefaultValue(0)
                .HasColumnName("PPA_PPNID");

            entity.HasOne(d => d.PpaOpeNumerNavigation).WithMany(p => p.PrzelewyAutoryzacjes)
                .HasForeignKey(d => d.PpaOpeNumer)
                .HasConstraintName("FK_PPAOpeNumer");

            entity.HasOne(d => d.PpaPpn).WithMany(p => p.PrzelewyAutoryzacjes)
                .HasForeignKey(d => d.PpaPpnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PPAPPNID");
        });

        modelBuilder.Entity<PrzelewyElem>(entity =>
        {
            entity.HasKey(e => new { e.PpePpnid, e.PpePpelp }).HasName("PPE_Primary");

            entity.ToTable("PrzelewyElem", "CDN");

            entity.HasIndex(e => new { e.PpePpnid, e.PpeOdrzucona, e.PpeGrpPpelp, e.PpeGrupa, e.PpeLp }, "PPEGrupa");

            entity.HasIndex(e => new { e.PpePpnid, e.PpeOdrzucona, e.PpeLp }, "PPEOdrzucone");

            entity.Property(e => e.PpePpnid).HasColumnName("PPE_PPNID");
            entity.Property(e => e.PpePpelp).HasColumnName("PPE_PPELp");
            entity.Property(e => e.PpeGrpPpelp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPE_GrpPPELp");
            entity.Property(e => e.PpeGrupa)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPE_Grupa");
            entity.Property(e => e.PpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("PPE_Lp");
            entity.Property(e => e.PpeModyfData)
                .HasDefaultValue(0)
                .HasColumnName("PPE_ModyfData");
            entity.Property(e => e.PpeModyfOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPE_ModyfOpeNumer");
            entity.Property(e => e.PpeOdrzucona)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPE_Odrzucona");
            entity.Property(e => e.PpePodzialGrupy)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPE_PodzialGrupy");
            entity.Property(e => e.PpePodzialIloscZnakow)
                .HasDefaultValue((short)0)
                .HasColumnName("PPE_PodzialIloscZnakow");
            entity.Property(e => e.PpeTytulModyfikowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPE_TytulModyfikowany");
            entity.Property(e => e.PpeTytulSeparator)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPE_TytulSeparator");
            entity.Property(e => e.PpeTytulWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPE_TytulWartosc");
            entity.Property(e => e.PpeTytulWyrazenie)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPE_TytulWyrazenie");

            entity.HasOne(d => d.PpeModyfOpeNumerNavigation).WithMany(p => p.PrzelewyElems)
                .HasForeignKey(d => d.PpeModyfOpeNumer)
                .HasConstraintName("FK_PPEModyfOpe");

            entity.HasOne(d => d.PpePpn).WithMany(p => p.PrzelewyElems)
                .HasForeignKey(d => d.PpePpnid)
                .HasConstraintName("FK_PPEPrimary");
        });

        modelBuilder.Entity<PrzelewyNag>(entity =>
        {
            entity.HasKey(e => e.PpnId).HasName("PPN_Primary");

            entity.ToTable("PrzelewyNag", "CDN", tb => tb.HasTrigger("PrzelewyNag_DeleteHandler"));

            entity.HasIndex(e => new { e.PpnRejestr, e.PpnRok, e.PpnMiesiac, e.PpnNumer }, "PPNNumer").IsUnique();

            entity.HasIndex(e => e.PpnStatus, "PPNStatus");

            entity.Property(e => e.PpnId).HasColumnName("PPN_ID");
            entity.Property(e => e.PpnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("PPN_Aktywny");
            entity.Property(e => e.PpnDataDokumentu)
                .HasDefaultValue(0)
                .HasColumnName("PPN_DataDokumentu");
            entity.Property(e => e.PpnDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("PPN_DataRealizacji");
            entity.Property(e => e.PpnMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPN_Miesiac");
            entity.Property(e => e.PpnNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPN_Numer");
            entity.Property(e => e.PpnOpeModyfNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPN_OpeModyfNumer");
            entity.Property(e => e.PpnOpeRealizNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPN_OpeRealizNumer");
            entity.Property(e => e.PpnOpeWystNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPN_OpeWystNumer");
            entity.Property(e => e.PpnOpeZatwNumer)
                .HasDefaultValue(0)
                .HasColumnName("PPN_OpeZatwNumer");
            entity.Property(e => e.PpnOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPN_Opis");
            entity.Property(e => e.PpnRealizTs)
                .HasDefaultValue(0)
                .HasColumnName("PPN_RealizTS");
            entity.Property(e => e.PpnRejestr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPN_Rejestr");
            entity.Property(e => e.PpnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("PPN_Rok");
            entity.Property(e => e.PpnStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPN_Status");
            entity.Property(e => e.PpnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPN_URL");
            entity.Property(e => e.PpnUwagi)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPN_Uwagi");

            entity.HasOne(d => d.PpnRejestrNavigation).WithMany(p => p.PrzelewyNags)
                .HasPrincipalKey(p => p.KarSeria)
                .HasForeignKey(d => d.PpnRejestr)
                .HasConstraintName("FK_PPNNumer");
        });

        modelBuilder.Entity<PrzelewyNagPodpisy>(entity =>
        {
            entity.HasKey(e => e.PpnpPpnid).HasName("PPNP_Primary");

            entity.ToTable("PrzelewyNagPodpisy", "CDN");

            entity.HasIndex(e => e.PpnpPpnid, "PPNPPPNID");

            entity.Property(e => e.PpnpPpnid).HasColumnName("PPNP_PPNID");
            entity.Property(e => e.PpnpExpId)
                .HasDefaultValue(0)
                .HasColumnName("PPNP_ExpId");
            entity.Property(e => e.PpnpLoginTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("PPNP_LoginTyp");
            entity.Property(e => e.PpnpMsgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPNP_MsgId");
            entity.Property(e => e.PpnpPlikSkrot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPNP_PlikSkrot");
            entity.Property(e => e.PpnpPlikZlecenia)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PPNP_PlikZlecenia");

            entity.HasOne(d => d.PpnpPpn).WithOne(p => p.PrzelewyNagPodpisy)
                .HasForeignKey<PrzelewyNagPodpisy>(d => d.PpnpPpnid)
                .HasConstraintName("FK_PPNPPPNID");
        });

        modelBuilder.Entity<PrzeszacElem>(entity =>
        {
            entity.HasKey(e => new { e.PseGidtyp, e.PseGidnumer, e.PseGidlp }).HasName("PSE_Primary");

            entity.ToTable("PrzeszacElem", "CDN");

            entity.HasIndex(e => new { e.PseDzknumer, e.PseDzklp }, "PseDzk");

            entity.HasIndex(e => new { e.PseOkres, e.PseKontoZrd }, "PseKonto");

            entity.Property(e => e.PseGidtyp).HasColumnName("PSE_GIDTyp");
            entity.Property(e => e.PseGidnumer).HasColumnName("PSE_GIDNumer");
            entity.Property(e => e.PseGidlp).HasColumnName("PSE_GIDLp");
            entity.Property(e => e.PseDokumentZrodlowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSE_DokumentZrodlowy");
            entity.Property(e => e.PseDzkfirma)
                .HasDefaultValue(0)
                .HasColumnName("PSE_DZKFirma");
            entity.Property(e => e.PseDzklp)
                .HasDefaultValue((short)0)
                .HasColumnName("PSE_DZKLp");
            entity.Property(e => e.PseDzknumer)
                .HasDefaultValue(0)
                .HasColumnName("PSE_DZKNumer");
            entity.Property(e => e.PseDzktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PSE_DZKTyp");
            entity.Property(e => e.PseGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PSE_GIDFirma");
            entity.Property(e => e.PseKontoCredit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSE_KontoCredit");
            entity.Property(e => e.PseKontoDebet)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSE_KontoDebet");
            entity.Property(e => e.PseKontoZrd)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSE_KontoZrd");
            entity.Property(e => e.PseKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PSE_Kwota");
            entity.Property(e => e.PseOkres)
                .HasDefaultValue(0)
                .HasColumnName("PSE_Okres");

            entity.HasOne(d => d.PseGidnumerNavigation).WithMany(p => p.PrzeszacElems)
                .HasForeignKey(d => d.PseGidnumer)
                .HasConstraintName("FK_PsePrimary");
        });

        modelBuilder.Entity<PrzeszacNag>(entity =>
        {
            entity.HasKey(e => e.PsnGidnumer).HasName("PSN_Primary");

            entity.ToTable("PrzeszacNag", "CDN");

            entity.HasIndex(e => new { e.PsnOkres, e.PsnNumer }, "PsnOkres").IsUnique();

            entity.Property(e => e.PsnGidnumer).HasColumnName("PSN_GIDNumer");
            entity.Property(e => e.PsnData)
                .HasDefaultValue(0)
                .HasColumnName("PSN_Data");
            entity.Property(e => e.PsnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("PSN_GIDFirma");
            entity.Property(e => e.PsnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_GIDLp");
            entity.Property(e => e.PsnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_GIDTyp");
            entity.Property(e => e.PsnNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSN_NieKsiegowac");
            entity.Property(e => e.PsnNumer)
                .HasDefaultValue(0)
                .HasColumnName("PSN_Numer");
            entity.Property(e => e.PsnOkrPoczatek)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OkrPoczatek");
            entity.Property(e => e.PsnOkrSymbol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSN_OkrSymbol");
            entity.Property(e => e.PsnOkres)
                .HasDefaultValue(0)
                .HasColumnName("PSN_Okres");
            entity.Property(e => e.PsnOkresNastepny)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OkresNastepny");
            entity.Property(e => e.PsnOpeFimaP)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OpeFimaP");
            entity.Property(e => e.PsnOpeFirmaK)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OpeFirmaK");
            entity.Property(e => e.PsnOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OpeFirmaW");
            entity.Property(e => e.PsnOpeLpK)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_OpeLpK");
            entity.Property(e => e.PsnOpeLpP)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_OpeLpP");
            entity.Property(e => e.PsnOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_OpeLpW");
            entity.Property(e => e.PsnOpeNumerK)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OpeNumerK");
            entity.Property(e => e.PsnOpeNumerP)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OpeNumerP");
            entity.Property(e => e.PsnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("PSN_OpeNumerW");
            entity.Property(e => e.PsnOpeTypK)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_OpeTypK");
            entity.Property(e => e.PsnOpeTypP)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_OpeTypP");
            entity.Property(e => e.PsnOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("PSN_OpeTypW");
            entity.Property(e => e.PsnOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PSN_Opis");
            entity.Property(e => e.PsnZaksiegowanoK)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSN_ZaksiegowanoK");
            entity.Property(e => e.PsnZaksiegowanoP)
                .HasDefaultValue((byte)0)
                .HasColumnName("PSN_ZaksiegowanoP");
        });

        modelBuilder.Entity<PunktyKntView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PunktyKntView", "CDN");

            entity.Property(e => e.PkvDataWystawienia).HasColumnName("PKV_DataWystawienia");
            entity.Property(e => e.PkvDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PKV_Dokument");
            entity.Property(e => e.PkvKntNumer).HasColumnName("PKV_KntNumer");
            entity.Property(e => e.PkvObiNumer).HasColumnName("PKV_ObiNumer");
            entity.Property(e => e.PkvObiTyp).HasColumnName("PKV_ObiTyp");
            entity.Property(e => e.PkvPunktyDataPrzyznania).HasColumnName("PKV_PunktyDataPrzyznania");
            entity.Property(e => e.PkvPunktyIlosc)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("PKV_PunktyIlosc");
            entity.Property(e => e.PkvPunktyNagroda).HasColumnName("PKV_PunktyNagroda");
            entity.Property(e => e.PkvWartoscBrutto)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("PKV_WartoscBrutto");
            entity.Property(e => e.PkvWartoscNetto)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PKV_WartoscNetto");
        });

        modelBuilder.Entity<PunktyKonfig>(entity =>
        {
            entity.HasKey(e => e.PuKId).HasName("PuK_Primary");

            entity.ToTable("PunktyKonfig", "CDN", tb => tb.HasTrigger("PunktyKonfig_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.PuKObiNumer, e.PuKObiTyp }, "PuKObi");

            entity.HasIndex(e => new { e.PuKObiNumer, e.PuKObiTyp, e.PuKOkresOd, e.PuKOkresDo }, "PuKObiOkres");

            entity.Property(e => e.PuKId).HasColumnName("PuK_Id");
            entity.Property(e => e.PuKDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("PuK_DataModyfikacji");
            entity.Property(e => e.PuKDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("PuK_DataUtworzenia");
            entity.Property(e => e.PuKNagroda)
                .HasDefaultValue((byte)0)
                .HasColumnName("PuK_Nagroda");
            entity.Property(e => e.PuKNagrodaPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("PuK_NagrodaPunkty");
            entity.Property(e => e.PuKObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("PuK_ObiNumer");
            entity.Property(e => e.PuKObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("PuK_ObiTyp");
            entity.Property(e => e.PuKOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("PuK_OkresDo");
            entity.Property(e => e.PuKOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("PuK_OkresOd");
            entity.Property(e => e.PuKOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("PuK_OpeNumerM");
            entity.Property(e => e.PuKOpeNumerU)
                .HasDefaultValue(0)
                .HasColumnName("PuK_OpeNumerU");
            entity.Property(e => e.PuKPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("PuK_Punkty");
            entity.Property(e => e.PuKSposobLiczPunkt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PuK_SposobLiczPunkt");
            entity.Property(e => e.PuKWartoscNbpunkt)
                .HasDefaultValue((byte)0)
                .HasColumnName("PuK_WartoscNBPunkt");
            entity.Property(e => e.PuKWartoscPunkt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("PuK_WartoscPunkt");
        });

        modelBuilder.Entity<PytaniaAnkiety>(entity =>
        {
            entity.HasKey(e => new { e.PanAntId, e.PanPytId }).HasName("PAN_Primary");

            entity.ToTable("PytaniaAnkiety", "CDN", tb => tb.HasTrigger("PytaniaAnkiety_DeletePrzenumeruj"));

            entity.Property(e => e.PanAntId).HasColumnName("PAN_AntId");
            entity.Property(e => e.PanPytId).HasColumnName("PAN_PytId");
            entity.Property(e => e.PanGrupWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PAN_GrupWaga");
            entity.Property(e => e.PanOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PAN_Opis");
            entity.Property(e => e.PanPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("PAN_Pozycja");
            entity.Property(e => e.PanPytWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PAN_PytWaga");

            entity.HasOne(d => d.PanAnt).WithMany(p => p.PytaniaAnkieties)
                .HasForeignKey(d => d.PanAntId)
                .HasConstraintName("FK_PanPrimary");
        });

        modelBuilder.Entity<PytaniaZadanium>(entity =>
        {
            entity.HasKey(e => new { e.PyzZadId, e.PyzPytId }).HasName("PYZ_Primary");

            entity.ToTable("PytaniaZadania", "CDN");

            entity.HasIndex(e => e.PyzPytId, "PYZPytanie");

            entity.Property(e => e.PyzZadId).HasColumnName("PYZ_ZadId");
            entity.Property(e => e.PyzPytId).HasColumnName("PYZ_PytId");
            entity.Property(e => e.PyzAntId)
                .HasDefaultValue(0)
                .HasColumnName("PYZ_AntId");
            entity.Property(e => e.PyzGrupWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PYZ_GrupWaga");
            entity.Property(e => e.PyzOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PYZ_Opis");
            entity.Property(e => e.PyzPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("PYZ_Pozycja");
            entity.Property(e => e.PyzPytWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PYZ_PytWaga");

            entity.HasOne(d => d.PyzPyt).WithMany(p => p.PytaniaZadania)
                .HasForeignKey(d => d.PyzPytId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYZPytanie");

            entity.HasOne(d => d.PyzZad).WithMany(p => p.PytaniaZadania)
                .HasForeignKey(d => d.PyzZadId)
                .HasConstraintName("FK_PyzPrimary");
        });

        modelBuilder.Entity<Pytanium>(entity =>
        {
            entity.HasKey(e => e.PytId).HasName("PYT_Primary");

            entity.ToTable("Pytania", "CDN");

            entity.HasIndex(e => e.PytTresc, "PYTTresc").IsUnique();

            entity.Property(e => e.PytId).HasColumnName("PYT_Id");
            entity.Property(e => e.PytAktywne)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PYT_Aktywne");
            entity.Property(e => e.PytGrupaId)
                .HasDefaultValue(0)
                .HasColumnName("PYT_GrupaId");
            entity.Property(e => e.PytOtwarte)
                .HasDefaultValue((short)0)
                .HasColumnName("PYT_Otwarte");
            entity.Property(e => e.PytRodpId)
                .HasDefaultValue(0)
                .HasColumnName("PYT_RodpId");
            entity.Property(e => e.PytTresc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PYT_Tresc");
            entity.Property(e => e.PytWielokrotnyWybor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PYT_WielokrotnyWybor");
        });

        modelBuilder.Entity<RachunkiBankowe>(entity =>
        {
            entity.HasKey(e => e.RkBId).HasName("RkB_Primary");

            entity.ToTable("RachunkiBankowe", "CDN", tb =>
                {
                    tb.HasTrigger("RachunkiBankowe_DeleteHandler");
                    tb.HasTrigger("RachunkiBankowe_HistoriaZmian");
                    tb.HasTrigger("RachunkiBankowe_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.RkBBnkNumer, e.RkBBnkTyp }, "RkBBnk");

            entity.HasIndex(e => e.RkBKntAdres, "RkBKntAdres");

            entity.HasIndex(e => new { e.RkBObiNumer, e.RkBObiTyp }, "RkBObi");

            entity.Property(e => e.RkBId).HasColumnName("RkB_Id");
            entity.Property(e => e.RkBBnkFirma)
                .HasDefaultValue(0)
                .HasColumnName("RkB_BnkFirma");
            entity.Property(e => e.RkBBnkLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RkB_BnkLp");
            entity.Property(e => e.RkBBnkNumer)
                .HasDefaultValue(0)
                .HasColumnName("RkB_BnkNumer");
            entity.Property(e => e.RkBBnkTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RkB_BnkTyp");
            entity.Property(e => e.RkBCzasArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("RkB_CzasArchiwizacji");
            entity.Property(e => e.RkBCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("RkB_CzasModyfikacji");
            entity.Property(e => e.RkBCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("RkB_CzasUtworzenia");
            entity.Property(e => e.RkBDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("RkB_Domyslny");
            entity.Property(e => e.RkBIban)
                .HasDefaultValue((byte)0)
                .HasColumnName("RkB_IBAN");
            entity.Property(e => e.RkBKntAdres)
                .HasDefaultValue(0)
                .HasColumnName("RkB_KntAdres");
            entity.Property(e => e.RkBNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RkB_NrRachunku");
            entity.Property(e => e.RkBNrRachunkuE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RkB_NrRachunkuE");
            entity.Property(e => e.RkBObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("RkB_ObiFirma");
            entity.Property(e => e.RkBObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RkB_ObiLp");
            entity.Property(e => e.RkBObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("RkB_ObiNumer");
            entity.Property(e => e.RkBObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RkB_ObiTyp");
            entity.Property(e => e.RkBOpeModyfikowal)
                .HasDefaultValue(0)
                .HasColumnName("RkB_OpeModyfikowal");
            entity.Property(e => e.RkBOpeUtworzyl)
                .HasDefaultValue(0)
                .HasColumnName("RkB_OpeUtworzyl");
            entity.Property(e => e.RkBTypRachunku)
                .HasDefaultValue(0)
                .HasColumnName("RkB_TypRachunku");
            entity.Property(e => e.RkBUwagi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RkB_Uwagi");
            entity.Property(e => e.RkBWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RkB_Waluta");
            entity.Property(e => e.RkBZgloszonyDoUs)
                .HasDefaultValue((byte)0)
                .HasColumnName("RkB_ZgloszonyDoUS");
        });

        modelBuilder.Entity<RachunkiBankoweVat>(entity =>
        {
            entity.HasKey(e => e.RbvId).HasName("RBV_Primary");

            entity.ToTable("RachunkiBankoweVat", "CDN");

            entity.HasIndex(e => e.RbvRkbId, "RBVRkb");

            entity.Property(e => e.RbvId).HasColumnName("RBV_Id");
            entity.Property(e => e.RbvDataWeryfikacji)
                .HasDefaultValue(0)
                .HasColumnName("RBV_DataWeryfikacji");
            entity.Property(e => e.RbvNip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RBV_Nip");
            entity.Property(e => e.RbvRequestId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RBV_RequestId");
            entity.Property(e => e.RbvRkbId)
                .HasDefaultValue(0)
                .HasColumnName("RBV_RkbId");
            entity.Property(e => e.RbvVatWynik)
                .HasDefaultValue((short)0)
                .HasColumnName("RBV_VatWynik");

            entity.HasOne(d => d.RbvRkb).WithMany(p => p.RachunkiBankoweVats)
                .HasForeignKey(d => d.RbvRkbId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RBVRkb");
        });

        modelBuilder.Entity<Raporty>(entity =>
        {
            entity.HasKey(e => e.KrpGidnumer).HasName("KRP_Primary");

            entity.ToTable("Raporty", "CDN", tb =>
                {
                    tb.HasTrigger("Raporty_CzasModyfikacji_OFFL");
                    tb.HasTrigger("Raporty_DeleteHandler");
                });

            entity.HasIndex(e => new { e.KrpSeria, e.KrpRok, e.KrpRaportBo, e.KrpNumer }, "KRPSeria").IsUnique();

            entity.HasIndex(e => new { e.KrpSeria, e.KrpRok, e.KrpNrWyciagu, e.KrpGidtyp, e.KrpGidnumer }, "KRPWyciag").IsUnique();

            entity.HasIndex(e => e.KrpZewnetrznySys, "KRPZewnetrzny");

            entity.Property(e => e.KrpGidnumer).HasColumnName("KRP_GIDNumer");
            entity.Property(e => e.KrpCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KRP_CzasModyfikacji");
            entity.Property(e => e.KrpCzasOtwarcia)
                .HasDefaultValue(0)
                .HasColumnName("KRP_CzasOtwarcia");
            entity.Property(e => e.KrpCzasZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("KRP_CzasZamkniecia");
            entity.Property(e => e.KrpDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("KRP_DataKsiegowania");
            entity.Property(e => e.KrpDataOtwarcia)
                .HasDefaultValue(0)
                .HasColumnName("KRP_DataOtwarcia");
            entity.Property(e => e.KrpDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("KRP_DataZamkniecia");
            entity.Property(e => e.KrpGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KRP_GIDFirma");
            entity.Property(e => e.KrpGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_GIDLp");
            entity.Property(e => e.KrpGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_GIDTyp");
            entity.Property(e => e.KrpGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRP_GUID");
            entity.Property(e => e.KrpKsiegujWbo)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRP_KsiegujWBO");
            entity.Property(e => e.KrpKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("KRP_KursL");
            entity.Property(e => e.KrpKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("KRP_KursM");
            entity.Property(e => e.KrpNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRP_NieKsiegowac");
            entity.Property(e => e.KrpNieRozliczaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRP_NieRozliczaj");
            entity.Property(e => e.KrpNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_NrKursu");
            entity.Property(e => e.KrpNrWyciagu)
                .HasDefaultValue(0)
                .HasColumnName("KRP_NrWyciagu");
            entity.Property(e => e.KrpNumer)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_Numer");
            entity.Property(e => e.KrpOpefirmaKs)
                .HasDefaultValue(0)
                .HasColumnName("KRP_OPEFirmaKs");
            entity.Property(e => e.KrpOpefirmaZam)
                .HasDefaultValue(0)
                .HasColumnName("KRP_OPEFirmaZam");
            entity.Property(e => e.KrpOpelpKs)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_OPELpKs");
            entity.Property(e => e.KrpOpelpZam)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_OPELpZam");
            entity.Property(e => e.KrpOpenumerKs)
                .HasDefaultValue(0)
                .HasColumnName("KRP_OPENumerKs");
            entity.Property(e => e.KrpOpenumerZam)
                .HasDefaultValue(0)
                .HasColumnName("KRP_OPENumerZam");
            entity.Property(e => e.KrpOpetypKs)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_OPETypKs");
            entity.Property(e => e.KrpOpetypZam)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_OPETypZam");
            entity.Property(e => e.KrpPropDataCzasZam)
                .HasDefaultValue(0)
                .HasColumnName("KRP_PropDataCzasZam");
            entity.Property(e => e.KrpPropDataZam)
                .HasDefaultValue(0)
                .HasColumnName("KRP_PropDataZam");
            entity.Property(e => e.KrpPrzychody)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_Przychody");
            entity.Property(e => e.KrpPrzychodyRk)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_PrzychodyRK");
            entity.Property(e => e.KrpPrzychodyWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_PrzychodyWal");
            entity.Property(e => e.KrpPrzychodyWp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_PrzychodyWP");
            entity.Property(e => e.KrpPrzychodyWprk)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_PrzychodyWPRK");
            entity.Property(e => e.KrpPrzychodyWpwal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_PrzychodyWPWal");
            entity.Property(e => e.KrpRaportBo)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRP_RaportBO");
            entity.Property(e => e.KrpRok)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_Rok");
            entity.Property(e => e.KrpRozchody)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_Rozchody");
            entity.Property(e => e.KrpRozchodyRk)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_RozchodyRK");
            entity.Property(e => e.KrpRozchodyWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_RozchodyWal");
            entity.Property(e => e.KrpRozchodyWp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_RozchodyWP");
            entity.Property(e => e.KrpRozchodyWprk)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_RozchodyWPRK");
            entity.Property(e => e.KrpRozchodyWpwal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_RozchodyWPWal");
            entity.Property(e => e.KrpRoznicaNaliczona)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_RoznicaNaliczona");
            entity.Property(e => e.KrpSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRP_Seria");
            entity.Property(e => e.KrpStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("KRP_StaFirma");
            entity.Property(e => e.KrpStaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_StaLp");
            entity.Property(e => e.KrpStaNumer)
                .HasDefaultValue(0)
                .HasColumnName("KRP_StaNumer");
            entity.Property(e => e.KrpStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KRP_StaTyp");
            entity.Property(e => e.KrpStanPocz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_StanPocz");
            entity.Property(e => e.KrpStanPoczWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_StanPoczWal");
            entity.Property(e => e.KrpStanPoczWp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_StanPoczWP");
            entity.Property(e => e.KrpStanPoczWpwal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_StanPoczWPWal");
            entity.Property(e => e.KrpSumaRoznicNal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KRP_SumaRoznicNal");
            entity.Property(e => e.KrpWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRP_Waluta");
            entity.Property(e => e.KrpWyciagBankowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRP_WyciagBankowy");
            entity.Property(e => e.KrpZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRP_Zaksiegowano");
            entity.Property(e => e.KrpZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("KRP_ZewnetrznyId");
            entity.Property(e => e.KrpZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("KRP_ZewnetrznySys");

            entity.HasOne(d => d.KrpSeriaNavigation).WithMany(p => p.Raporties)
                .HasPrincipalKey(p => p.KarSeria)
                .HasForeignKey(d => d.KrpSeria)
                .HasConstraintName("FK_KRPSeria");
        });

        modelBuilder.Entity<Rcpkorekty>(entity =>
        {
            entity.HasKey(e => new { e.RcKRcZid, e.RcKLp }).HasName("RcK_Primary");

            entity.ToTable("RCPKorekty", "CDN");

            entity.HasIndex(e => e.RcKPrcNumer, "RcKPracownik");

            entity.HasIndex(e => e.RcKRcZrcOid, "RcKRcZOpis");

            entity.HasIndex(e => e.RcKRcZid, "RcKZapis");

            entity.Property(e => e.RcKRcZid).HasColumnName("RcK_RcZId");
            entity.Property(e => e.RcKLp).HasColumnName("RcK_Lp");
            entity.Property(e => e.RcKCzas)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RcK_Czas");
            entity.Property(e => e.RcKPrcNumer).HasColumnName("RcK_PrcNumer");
            entity.Property(e => e.RcKPrcTyp).HasColumnName("RcK_PrcTyp");
            entity.Property(e => e.RcKRcZczas)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RcK_RcZCzas");
            entity.Property(e => e.RcKRcZrcOid)
                .HasDefaultValue(0)
                .HasColumnName("RcK_RcZRcOId");
            entity.Property(e => e.RcKRcZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RcK_RcZTyp");

            entity.HasOne(d => d.RcKRcZ).WithMany(p => p.Rcpkorekties)
                .HasForeignKey(d => d.RcKRcZid)
                .HasConstraintName("FK_RcKZapis");

            entity.HasOne(d => d.RcKRcZrcO).WithMany(p => p.Rcpkorekties)
                .HasForeignKey(d => d.RcKRcZrcOid)
                .HasConstraintName("FK_RcKRcZOpis");
        });

        modelBuilder.Entity<Rcpnorma>(entity =>
        {
            entity.HasKey(e => new { e.RcNData, e.RcNTyp, e.RcNFrsTyp, e.RcNFrsNumer }).HasName("RcN_Primary");

            entity.ToTable("RCPNorma", "CDN");

            entity.HasIndex(e => e.RcNRcOid, "RcNOpis");

            entity.Property(e => e.RcNData)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RcN_Data");
            entity.Property(e => e.RcNTyp).HasColumnName("RcN_Typ");
            entity.Property(e => e.RcNFrsTyp).HasColumnName("RcN_FrsTyp");
            entity.Property(e => e.RcNFrsNumer).HasColumnName("RcN_FrsNumer");
            entity.Property(e => e.RcNNorma).HasColumnName("RcN_Norma");
            entity.Property(e => e.RcNRcOid)
                .HasDefaultValue(0)
                .HasColumnName("RcN_RcOId");

            entity.HasOne(d => d.RcNRcO).WithMany(p => p.Rcpnormas)
                .HasForeignKey(d => d.RcNRcOid)
                .HasConstraintName("FK_RcNOpis");
        });

        modelBuilder.Entity<Rcpopisy>(entity =>
        {
            entity.HasKey(e => e.RcOId).HasName("RcO_Primary");

            entity.ToTable("RCPOpisy", "CDN");

            entity.Property(e => e.RcOId).HasColumnName("RcO_Id");
            entity.Property(e => e.RcOKalendarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("RcO_Kalendarz");
            entity.Property(e => e.RcOKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RcO_Kod");
            entity.Property(e => e.RcOKolorDaty)
                .HasDefaultValue(0)
                .HasColumnName("RcO_KolorDaty");
            entity.Property(e => e.RcOKolorOpisu)
                .HasDefaultValue(0)
                .HasColumnName("RcO_KolorOpisu");
            entity.Property(e => e.RcOKolorTla)
                .HasDefaultValue(0)
                .HasColumnName("RcO_KolorTla");
            entity.Property(e => e.RcONazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RcO_Nazwa");
            entity.Property(e => e.RcOOpisRcp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RcO_OpisRCP");
            entity.Property(e => e.RcOPogrubionaData)
                .HasDefaultValue((byte)0)
                .HasColumnName("RcO_PogrubionaData");
            entity.Property(e => e.RcOPraca)
                .HasDefaultValue((short)0)
                .HasColumnName("RcO_Praca");
            entity.Property(e => e.RcOPrawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("RcO_Prawa");
            entity.Property(e => e.RcOStyl)
                .HasDefaultValue(0)
                .HasColumnName("RcO_Styl");
            entity.Property(e => e.RcOTypNieob)
                .HasDefaultValue(0)
                .HasColumnName("RcO_TypNieob");
            entity.Property(e => e.RcOZatwierdz)
                .HasDefaultValue(0)
                .HasColumnName("RcO_Zatwierdz");
        });

        modelBuilder.Entity<Rcpzapisy>(entity =>
        {
            entity.HasKey(e => e.RcZId).HasName("RcZ_Primary");

            entity.ToTable("RCPZapisy", "CDN");

            entity.HasIndex(e => e.RcZRcOid, "RcZOpis");

            entity.HasIndex(e => e.RcZPrcNumer, "RcZPracownik");

            entity.HasIndex(e => new { e.RcZPrcTyp, e.RcZPrcNumer, e.RcZCzas, e.RcZTyp }, "RcZPrcCzas");

            entity.Property(e => e.RcZId).HasColumnName("RcZ_Id");
            entity.Property(e => e.RcZCzas)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RcZ_Czas");
            entity.Property(e => e.RcZKorekta)
                .HasDefaultValue((short)0)
                .HasColumnName("RcZ_Korekta");
            entity.Property(e => e.RcZPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("RcZ_PrcNumer");
            entity.Property(e => e.RcZPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RcZ_PrcTyp");
            entity.Property(e => e.RcZRcOid)
                .HasDefaultValue(0)
                .HasColumnName("RcZ_RcOId");
            entity.Property(e => e.RcZTyp).HasColumnName("RcZ_Typ");
            entity.Property(e => e.RcZZrodlo)
                .HasDefaultValue(0)
                .HasColumnName("RcZ_Zrodlo");

            entity.HasOne(d => d.RcZPrcNumerNavigation).WithMany(p => p.Rcpzapisies)
                .HasForeignKey(d => d.RcZPrcNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RcZPracownik");

            entity.HasOne(d => d.RcZRcO).WithMany(p => p.Rcpzapisies)
                .HasForeignKey(d => d.RcZRcOid)
                .HasConstraintName("FK_RcZOpis");
        });

        modelBuilder.Entity<RcpzatwElem>(entity =>
        {
            entity.HasKey(e => new { e.RzeRznid, e.RzeFrsTyp, e.RzeFrsNumer, e.RzeLp }).HasName("RZE_Primary");

            entity.ToTable("RCPZatwElem", "CDN");

            entity.HasIndex(e => e.RzePrcNumer, "RZEPracownik");

            entity.HasIndex(e => e.RzeRznid, "RZERZNId");

            entity.Property(e => e.RzeRznid).HasColumnName("RZE_RZNId");
            entity.Property(e => e.RzeFrsTyp).HasColumnName("RZE_FrsTyp");
            entity.Property(e => e.RzeFrsNumer).HasColumnName("RZE_FrsNumer");
            entity.Property(e => e.RzeLp).HasColumnName("RZE_Lp");
            entity.Property(e => e.RzeCzas)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RZE_Czas");
            entity.Property(e => e.RzePrcNumer).HasColumnName("RZE_PrcNumer");
            entity.Property(e => e.RzePrcTyp).HasColumnName("RZE_PrcTyp");

            entity.HasOne(d => d.RzePrcNumerNavigation).WithMany(p => p.RcpzatwElems)
                .HasForeignKey(d => d.RzePrcNumer)
                .HasConstraintName("FK_RZEPracownik");

            entity.HasOne(d => d.RzeRzn).WithMany(p => p.RcpzatwElems)
                .HasForeignKey(d => d.RzeRznid)
                .HasConstraintName("FK_RZERZNId");
        });

        modelBuilder.Entity<RcpzatwNag>(entity =>
        {
            entity.HasKey(e => e.RznId).HasName("RZN_Primary");

            entity.ToTable("RCPZatwNag", "CDN");

            entity.Property(e => e.RznId).HasColumnName("RZN_Id");
            entity.Property(e => e.RznDataDo)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RZN_DataDo");
            entity.Property(e => e.RznDataOd)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RZN_DataOd");
            entity.Property(e => e.RznZamkniety)
                .HasDefaultValue((short)0)
                .HasColumnName("RZN_Zamkniety");
        });

        modelBuilder.Entity<RecElem>(entity =>
        {
            entity.HasKey(e => new { e.ReEGidnumer, e.ReEGidlp }).HasName("ReE_Primary");

            entity.ToTable("RecElem", "CDN", tb =>
                {
                    tb.HasTrigger("RecElem_DeleteHandler");
                    tb.HasTrigger("RecElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.ReEMagProdId, "ReEMagProd");

            entity.HasIndex(e => new { e.ReETwrTyp, e.ReETwrNumer }, "ReETowar");

            entity.Property(e => e.ReEGidnumer).HasColumnName("ReE_GIDNumer");
            entity.Property(e => e.ReEGidlp).HasColumnName("ReE_GIDLp");
            entity.Property(e => e.ReEArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReE_Archiwalny");
            entity.Property(e => e.ReECchFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReE_CChFirma");
            entity.Property(e => e.ReECchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_CChLp");
            entity.Property(e => e.ReECchNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReE_CChNumer");
            entity.Property(e => e.ReECchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_CChTyp");
            entity.Property(e => e.ReECecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReE_Cecha");
            entity.Property(e => e.ReEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ReE_GIDFirma");
            entity.Property(e => e.ReEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_GIDTyp");
            entity.Property(e => e.ReEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ReE_Ilosc");
            entity.Property(e => e.ReEJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReE_JmFormat");
            entity.Property(e => e.ReEJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReE_JmFormatZ");
            entity.Property(e => e.ReEJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReE_JmZ");
            entity.Property(e => e.ReEKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ReE_Koszt");
            entity.Property(e => e.ReEMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReE_MagFirma");
            entity.Property(e => e.ReEMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_MagLp");
            entity.Property(e => e.ReEMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReE_MagNumer");
            entity.Property(e => e.ReEMagProdId)
                .HasDefaultValue(0)
                .HasColumnName("ReE_MagProdId");
            entity.Property(e => e.ReEMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_MagTyp");
            entity.Property(e => e.ReEOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReE_Opis");
            entity.Property(e => e.ReEPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ReE_PrzeliczL");
            entity.Property(e => e.ReEPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ReE_PrzeliczM");
            entity.Property(e => e.ReEStalaIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReE_StalaIlosc");
            entity.Property(e => e.ReETwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReE_TwrFirma");
            entity.Property(e => e.ReETwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_TwrLp");
            entity.Property(e => e.ReETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReE_TwrNumer");
            entity.Property(e => e.ReETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_TwrTyp");
            entity.Property(e => e.ReETypCechy)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_TypCechy");
            entity.Property(e => e.ReETypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReE_TypJm");
            entity.Property(e => e.ReETypPozycji)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_TypPozycji");
            entity.Property(e => e.ReEUbytek)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ReE_Ubytek");
            entity.Property(e => e.ReEWarstwa)
                .HasDefaultValue((short)0)
                .HasColumnName("ReE_Warstwa");
            entity.Property(e => e.ReEZamiennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReE_Zamiennik");

            entity.HasOne(d => d.ReEGidnumerNavigation).WithMany(p => p.RecElems)
                .HasForeignKey(d => d.ReEGidnumer)
                .HasConstraintName("FK_ReEPrimary");
        });

        modelBuilder.Entity<RecNag>(entity =>
        {
            entity.HasKey(e => e.ReNGidnumer).HasName("ReN_Primary");

            entity.ToTable("RecNag", "CDN", tb =>
                {
                    tb.HasTrigger("RecNag_DeleteHandler");
                    tb.HasTrigger("RecNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.ReNMagProdId, "FroMagProd");

            entity.HasIndex(e => new { e.ReNSymbol, e.ReNTwrNumer }, "ReNSymbol").IsUnique();

            entity.HasIndex(e => new { e.ReNTwrTyp, e.ReNTwrNumer, e.ReNTwrLp }, "ReNTowar").IsUnique();

            entity.Property(e => e.ReNGidnumer).HasColumnName("ReN_GIDNumer");
            entity.Property(e => e.ReNArchiwalna)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReN_Archiwalna");
            entity.Property(e => e.ReNCchFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReN_CChFirma");
            entity.Property(e => e.ReNCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_CChLp");
            entity.Property(e => e.ReNCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReN_CChNumer");
            entity.Property(e => e.ReNCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_CChTyp");
            entity.Property(e => e.ReNCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_Cecha");
            entity.Property(e => e.ReNDomyslna)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_Domyslna");
            entity.Property(e => e.ReNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ReN_GIDFirma");
            entity.Property(e => e.ReNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_GIDLp");
            entity.Property(e => e.ReNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_GIDTyp");
            entity.Property(e => e.ReNGodzin)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_Godzin");
            entity.Property(e => e.ReNIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ReN_Ilosc");
            entity.Property(e => e.ReNJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReN_JmFormat");
            entity.Property(e => e.ReNJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReN_JmFormatZ");
            entity.Property(e => e.ReNJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_JmZ");
            entity.Property(e => e.ReNKosztEwidencyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ReN_KosztEwidencyjny");
            entity.Property(e => e.ReNMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReN_MagFirma");
            entity.Property(e => e.ReNMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_MagLp");
            entity.Property(e => e.ReNMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReN_MagNumer");
            entity.Property(e => e.ReNMagProdId)
                .HasDefaultValue(0)
                .HasColumnName("ReN_MagProdId");
            entity.Property(e => e.ReNMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_MagTyp");
            entity.Property(e => e.ReNMinut)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_Minut");
            entity.Property(e => e.ReNNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_Nazwa");
            entity.Property(e => e.ReNOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_Opis");
            entity.Property(e => e.ReNPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ReN_PrzeliczL");
            entity.Property(e => e.ReNPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ReN_PrzeliczM");
            entity.Property(e => e.ReNRodzajKosztu)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_RodzajKosztu");
            entity.Property(e => e.ReNSymbol)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_Symbol");
            entity.Property(e => e.ReNTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReN_TwrFirma");
            entity.Property(e => e.ReNTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_TwrLp");
            entity.Property(e => e.ReNTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReN_TwrNumer");
            entity.Property(e => e.ReNTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_TwrTyp");
            entity.Property(e => e.ReNTypCechy)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_TypCechy");
            entity.Property(e => e.ReNTypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ReN_TypJm");
            entity.Property(e => e.ReNTypKompletacji)
                .HasDefaultValue((short)0)
                .HasColumnName("ReN_TypKompletacji");
            entity.Property(e => e.ReNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReN_Url");

            entity.HasOne(d => d.ReNTwrNumerNavigation).WithMany(p => p.RecNags)
                .HasForeignKey(d => d.ReNTwrNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ReNTowar");
        });

        modelBuilder.Entity<RefPromocje>(entity =>
        {
            entity.HasKey(e => e.RprId).HasName("RPr_Primary");

            entity.ToTable("RefPromocje", "CDN");

            entity.HasIndex(e => e.RprTprid, "RPrTPR");

            entity.Property(e => e.RprId).HasColumnName("RPr_ID");
            entity.Property(e => e.RprNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RPr_Nazwa");
            entity.Property(e => e.RprTprid)
                .HasDefaultValue(0)
                .HasColumnName("RPr_TPRID");
            entity.Property(e => e.RprTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RPr_Typ");
            entity.Property(e => e.RprWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RPr_Wartosc");

            entity.HasOne(d => d.RprTpr).WithMany(p => p.RefPromocjes)
                .HasForeignKey(d => d.RprTprid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RPrTPR");
        });

        modelBuilder.Entity<RegulyNormTel>(entity =>
        {
            entity.HasKey(e => e.RntelId).HasName("RNTel_Primary");

            entity.ToTable("RegulyNormTel", "CDN");

            entity.Property(e => e.RntelId).HasColumnName("RNTel_ID");
            entity.Property(e => e.RntelOpTelOrgId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RNTel_OpTelOrgID");
            entity.Property(e => e.RntelTypZmiany)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RNTel_TypZmiany");
            entity.Property(e => e.RntelWarunekSql)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RNTel_WarunekSQL");
            entity.Property(e => e.RntelZmianaNa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RNTel_ZmianaNa");
            entity.Property(e => e.RntelZmianaZ)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RNTel_ZmianaZ");

            entity.HasOne(d => d.RntelOpTelOrg).WithMany(p => p.RegulyNormTels)
                .HasForeignKey(d => d.RntelOpTelOrgId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RNTelOperator");
        });

        modelBuilder.Entity<RejLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("REJ_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_REJ_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RejOp>(entity =>
        {
            entity.HasKey(e => new { e.KroKaotyp, e.KroKaonumer, e.KroKaolp, e.KroKartyp, e.KroKarnumer }).HasName("KRO_Primary");

            entity.ToTable("RejOp", "CDN");

            entity.HasIndex(e => new { e.KroKartyp, e.KroKarnumer, e.KroPozycja }, "KRORejestr").IsUnique();

            entity.Property(e => e.KroKaotyp).HasColumnName("KRO_KAOTyp");
            entity.Property(e => e.KroKaonumer).HasColumnName("KRO_KAONumer");
            entity.Property(e => e.KroKaolp).HasColumnName("KRO_KAOLp");
            entity.Property(e => e.KroKartyp).HasColumnName("KRO_KARTyp");
            entity.Property(e => e.KroKarnumer).HasColumnName("KRO_KARNumer");
            entity.Property(e => e.KroKaofirma)
                .HasDefaultValue(0)
                .HasColumnName("KRO_KAOFirma");
            entity.Property(e => e.KroKarfirma)
                .HasDefaultValue(0)
                .HasColumnName("KRO_KARFirma");
            entity.Property(e => e.KroKarlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KRO_KARLp");
            entity.Property(e => e.KroNumerPoczatkowy)
                .HasDefaultValue(0)
                .HasColumnName("KRO_NumerPoczatkowy");
            entity.Property(e => e.KroPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("KRO_Pozycja");
            entity.Property(e => e.KroSposobNumeracji)
                .HasDefaultValue((short)0)
                .HasColumnName("KRO_SposobNumeracji");

            entity.HasOne(d => d.KroKarnumerNavigation).WithMany(p => p.RejOps)
                .HasForeignKey(d => d.KroKarnumer)
                .HasConstraintName("FK_KRORejestr");

            entity.HasOne(d => d.Operacje).WithMany(p => p.RejOps)
                .HasForeignKey(d => new { d.KroKaonumer, d.KroKaolp })
                .HasConstraintName("FK_KROOperacja");
        });

        modelBuilder.Entity<Rejestry>(entity =>
        {
            entity.HasKey(e => e.KarGidnumer).HasName("KAR_Primary");

            entity.ToTable("Rejestry", "CDN", tb =>
                {
                    tb.HasTrigger("Rejestry_CzasModyfikacji");
                    tb.HasTrigger("Rejestry_DeleteHandler");
                    tb.HasTrigger("Rejestry_InsertUpdateHandler");
                    tb.HasTrigger("Rejestry_UsunZFormPlatnosci");
                });

            entity.HasIndex(e => new { e.KarBnktyp, e.KarBnknumer }, "KARBank");

            entity.HasIndex(e => e.KarSeria, "KARSeria").IsUnique();

            entity.Property(e => e.KarGidnumer).HasColumnName("KAR_GIDNumer");
            entity.Property(e => e.KarArchiwalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_Archiwalne");
            entity.Property(e => e.KarAutoPlatnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_AutoPlatnosc");
            entity.Property(e => e.KarAutoRaport)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_AutoRaport");
            entity.Property(e => e.KarAutoZerowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_AutoZerowanie");
            entity.Property(e => e.KarBnkfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAR_BNKFirma");
            entity.Property(e => e.KarBnklp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_BNKLp");
            entity.Property(e => e.KarBnknumer)
                .HasDefaultValue(0)
                .HasColumnName("KAR_BNKNumer");
            entity.Property(e => e.KarBnktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_BNKTyp");
            entity.Property(e => e.KarBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_Bufor");
            entity.Property(e => e.KarCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KAR_CzasModyfikacji");
            entity.Property(e => e.KarDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_Dziennik");
            entity.Property(e => e.KarGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAR_GIDFirma");
            entity.Property(e => e.KarGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_GIDLp");
            entity.Property(e => e.KarGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_GIDTyp");
            entity.Property(e => e.KarIdGrupyRejestru)
                .HasDefaultValue(0)
                .HasColumnName("KAR_IdGrupyRejestru");
            entity.Property(e => e.KarIdKlientaWbanku)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_IdKlientaWBanku");
            entity.Property(e => e.KarIdentKontr)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_IdentKontr");
            entity.Property(e => e.KarImpKaoinnePrzychod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOInnePrzychod");
            entity.Property(e => e.KarImpKaoinneRozchod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOInneRozchod");
            entity.Property(e => e.KarImpKaokontrahentPrzychod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOKontrahentPrzychod");
            entity.Property(e => e.KarImpKaokontrahentRozchod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOKontrahentRozchod");
            entity.Property(e => e.KarImpKaolokatyPrzychod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOLokatyPrzychod");
            entity.Property(e => e.KarImpKaolokatyRozchod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOLokatyRozchod");
            entity.Property(e => e.KarImpKaopracownikRozchod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOPracownikRozchod");
            entity.Property(e => e.KarImpKaosplitPprzychod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOSplitPPrzychod");
            entity.Property(e => e.KarImpKaosplitProzchod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ImpKAOSplitPRozchod");
            entity.Property(e => e.KarJedenNaOkres)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_JedenNaOkres");
            entity.Property(e => e.KarKarnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAR_KARNumer");
            entity.Property(e => e.KarKartyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_KARTyp");
            entity.Property(e => e.KarKontoKasy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_KontoKasy");
            entity.Property(e => e.KarLokata)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_Lokata");
            entity.Property(e => e.KarModul)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_Modul");
            entity.Property(e => e.KarNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_Nazwa");
            entity.Property(e => e.KarNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_NrRachunku");
            entity.Property(e => e.KarNrb)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_NRB");
            entity.Property(e => e.KarNumerKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_NumerKursu");
            entity.Property(e => e.KarOddzial)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_Oddzial");
            entity.Property(e => e.KarOkres)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_Okres");
            entity.Property(e => e.KarOkresRaportu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_OkresRaportu");
            entity.Property(e => e.KarOpKartNumer)
                .HasDefaultValue(0)
                .HasColumnName("KAR_OpKartNumer");
            entity.Property(e => e.KarOpKartTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAR_OpKartTyp");
            entity.Property(e => e.KarOtwarcieBezZamPop)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_OtwarcieBezZamPop");
            entity.Property(e => e.KarRachIdent)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_RachIdent");
            entity.Property(e => e.KarRachIdentNrKier)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_RachIdentNrKier");
            entity.Property(e => e.KarRachunekVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_RachunekVAT");
            entity.Property(e => e.KarRodzajKursu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_RodzajKursu");
            entity.Property(e => e.KarSepa)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_SEPA");
            entity.Property(e => e.KarSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_Seria");
            entity.Property(e => e.KarSprawdzPrzyZamykaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_SprawdzPrzyZamykaniu");
            entity.Property(e => e.KarTyp)
                .HasDefaultValue((byte)1)
                .HasColumnName("KAR_Typ");
            entity.Property(e => e.KarWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAR_Waluta");
            entity.Property(e => e.KarWycena)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_Wycena");
            entity.Property(e => e.KarWycenaPozniejszymi)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAR_WycenaPozniejszymi");
            entity.Property(e => e.KarZerKaonrPrzychod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ZerKAONrPrzychod");
            entity.Property(e => e.KarZerKaonrRozchod)
                .HasDefaultValue(0)
                .HasColumnName("KAR_ZerKAONrRozchod");
        });

        modelBuilder.Entity<RejestryDomyslne>(entity =>
        {
            entity.HasKey(e => e.RdwId).HasName("RDW_Primary");

            entity.ToTable("RejestryDomyslne", "CDN", tb =>
                {
                    tb.HasTrigger("RejestryDomyslne_InsertUpdateHandler");
                    tb.HasTrigger("RejestryDomyslne_UsunietoZRodzica");
                });

            entity.HasIndex(e => new { e.RdwFrsId, e.RdwKarNumer }, "RDWFrmObiekty");

            entity.HasIndex(e => new { e.RdwWanId, e.RdwKarNumer, e.RdwFrsId }, "RDWIdent");

            entity.HasIndex(e => e.RdwKarNumer, "RDWRejestr");

            entity.HasIndex(e => e.RdwFrsId, "RDWStruktura");

            entity.HasIndex(e => e.RdwWanId, "RDWWaluta");

            entity.Property(e => e.RdwId).HasColumnName("RDW_Id");
            entity.Property(e => e.RdwFrsId)
                .HasDefaultValue(0)
                .HasColumnName("RDW_FrsID");
            entity.Property(e => e.RdwKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("RDW_KarNumer");
            entity.Property(e => e.RdwWanId)
                .HasDefaultValue((short)0)
                .HasColumnName("RDW_WanID");

            entity.HasOne(d => d.RdwFrs).WithMany(p => p.RejestryDomyslnes)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.RdwFrsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RDWStruktura");

            entity.HasOne(d => d.RdwKarNumerNavigation).WithMany(p => p.RejestryDomyslnes)
                .HasForeignKey(d => d.RdwKarNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RDWRejestr");

            entity.HasOne(d => d.RdwWan).WithMany(p => p.RejestryDomyslnes)
                .HasPrincipalKey(p => p.WaNId)
                .HasForeignKey(d => d.RdwWanId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RDWWaluta");
        });

        modelBuilder.Entity<RejestryHistorium>(entity =>
        {
            entity.HasKey(e => new { e.KrhKarnumer, e.KrhDataObowiazywania, e.KrhLp }).HasName("KRH_Primary");

            entity.ToTable("RejestryHistoria", "CDN");

            entity.Property(e => e.KrhKarnumer).HasColumnName("KRH_KARNumer");
            entity.Property(e => e.KrhDataObowiazywania).HasColumnName("KRH_DataObowiazywania");
            entity.Property(e => e.KrhLp).HasColumnName("KRH_Lp");
            entity.Property(e => e.KrhDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("KRH_DataModyfikacji");
            entity.Property(e => e.KrhOpeident)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KRH_OPEIdent");
            entity.Property(e => e.KrhWycenaKolejnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("KRH_WycenaKolejnosc");

            entity.HasOne(d => d.KrhKarnumerNavigation).WithMany(p => p.RejestryHistoria)
                .HasForeignKey(d => d.KrhKarnumer)
                .HasConstraintName("FK_KRHPrimary");
        });

        modelBuilder.Entity<Rejony>(entity =>
        {
            entity.HasKey(e => e.RejId).HasName("REJ_Primary");

            entity.ToTable("Rejony", "CDN", tb =>
                {
                    tb.HasTrigger("Rejony_CzasModyfikacjiS");
                    tb.HasTrigger("Rejony_DeleteHandler");
                    tb.HasTrigger("Rejony_HistoriaZmian");
                });

            entity.HasIndex(e => new { e.RejNazwa, e.RejOjciecId }, "RejNazwa").IsUnique();

            entity.Property(e => e.RejId).HasColumnName("REJ_Id");
            entity.Property(e => e.RejCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("REJ_CzasModyfikacji");
            entity.Property(e => e.RejCzasModyfikacjiS)
                .HasDefaultValue(0)
                .HasColumnName("REJ_CzasModyfikacjiS");
            entity.Property(e => e.RejDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("REJ_DataUtworzenia");
            entity.Property(e => e.RejNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("REJ_Nazwa");
            entity.Property(e => e.RejOddzialowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("REJ_Oddzialowy");
            entity.Property(e => e.RejOjciecId)
                .HasDefaultValue(0)
                .HasColumnName("REJ_OjciecId");
            entity.Property(e => e.RejOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("REJ_OpeFirma");
            entity.Property(e => e.RejOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("REJ_OpeFirmaM");
            entity.Property(e => e.RejOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("REJ_OpeLp");
            entity.Property(e => e.RejOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("REJ_OpeLpM");
            entity.Property(e => e.RejOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("REJ_OpeNumer");
            entity.Property(e => e.RejOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("REJ_OpeNumerM");
            entity.Property(e => e.RejOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("REJ_OpeTyp");
            entity.Property(e => e.RejOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("REJ_OpeTypM");
            entity.Property(e => e.RejOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("REJ_Opis");
        });

        modelBuilder.Entity<ReklElem>(entity =>
        {
            entity.HasKey(e => e.RleId).HasName("RLE_Primary");

            entity.ToTable("ReklElem", "CDN", tb =>
                {
                    tb.HasTrigger("ReklElem_DeleteHandler");
                    tb.HasTrigger("ReklElem_DeletePrzenumeruj");
                    tb.HasTrigger("ReklElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.RleTwrNumer, e.RleTwrTyp }, "RLETowar");

            entity.HasIndex(e => new { e.RleRlnid, e.RleId }, "RleRlnId");

            entity.Property(e => e.RleId).HasColumnName("RLE_Id");
            entity.Property(e => e.RleDokNumer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLE_DokNumer");
            entity.Property(e => e.RleIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("RLE_Ilosc");
            entity.Property(e => e.RleJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("RLE_JmFormat");
            entity.Property(e => e.RleMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLE_MagNumer");
            entity.Property(e => e.RleOddElemId)
                .HasDefaultValue(0)
                .HasColumnName("RLE_OddElemId");
            entity.Property(e => e.RleOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLE_Opis");
            entity.Property(e => e.RlePobid)
                .HasDefaultValue(0)
                .HasColumnName("RLE_POBId");
            entity.Property(e => e.RlePozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("RLE_Pozycja");
            entity.Property(e => e.RlePrzyczyna)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLE_Przyczyna");
            entity.Property(e => e.RleRlnid)
                .HasDefaultValue(0)
                .HasColumnName("RLE_RLNId");
            entity.Property(e => e.RleRozpatrzenie)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLE_Rozpatrzenie");
            entity.Property(e => e.RleSrtId)
                .HasDefaultValue(0)
                .HasColumnName("RLE_SrtId");
            entity.Property(e => e.RleStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("RLE_Status");
            entity.Property(e => e.RleTwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLE_TwrKod");
            entity.Property(e => e.RleTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLE_TwrNazwa");
            entity.Property(e => e.RleTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLE_TwrNumer");
            entity.Property(e => e.RleTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLE_TwrTyp");
            entity.Property(e => e.RleTypTwr)
                .HasDefaultValue((short)0)
                .HasColumnName("RLE_TypTwr");
            entity.Property(e => e.RleZadanie)
                .HasDefaultValue(0)
                .HasColumnName("RLE_Zadanie");
            entity.Property(e => e.RleZrdDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLE_ZrdDokumentObcy");
            entity.Property(e => e.RleZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLE_ZrdLp");
            entity.Property(e => e.RleZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLE_ZrdNumer");
            entity.Property(e => e.RleZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLE_ZrdTyp");

            entity.HasOne(d => d.RleRln).WithMany(p => p.ReklElems)
                .HasForeignKey(d => d.RleRlnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RleRlnId");
        });

        modelBuilder.Entity<ReklNag>(entity =>
        {
            entity.HasKey(e => e.RlnId).HasName("RLN_Primary");

            entity.ToTable("ReklNag", "CDN", tb =>
                {
                    tb.HasTrigger("ReklNag_DeleteHandler");
                    tb.HasTrigger("ReklNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.RlnTyp, e.RlnRokMiesiac, e.RlnSeria, e.RlnNumer, e.RlnLp }, "RLNData");

            entity.HasIndex(e => new { e.RlnKntNumer, e.RlnDataWyst, e.RlnId }, "RLNKontrahent");

            entity.HasIndex(e => new { e.RlnTyp, e.RlnRok, e.RlnMiesiac, e.RlnSeria, e.RlnNumer, e.RlnLp }, "RLNNumer").IsUnique();

            entity.HasIndex(e => new { e.RlnZewnetrznySys, e.RlnCzasModyfikacji, e.RlnStan, e.RlnZewnetrznyId }, "RLNOptymalizacjaMOS");

            entity.Property(e => e.RlnId).HasColumnName("RLN_Id");
            entity.Property(e => e.RlnAdWnumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_AdWNumer");
            entity.Property(e => e.RlnAdWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_AdWTyp");
            entity.Property(e => e.RlnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("RLN_Aktywny");
            entity.Property(e => e.RlnAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_AkwNumer");
            entity.Property(e => e.RlnAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_AkwTyp");
            entity.Property(e => e.RlnCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLN_CechaOpis");
            entity.Property(e => e.RlnCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("RLN_CzasModyfikacji");
            entity.Property(e => e.RlnDataRozp)
                .HasDefaultValue(0)
                .HasColumnName("RLN_DataRozp");
            entity.Property(e => e.RlnDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("RLN_DataWyst");
            entity.Property(e => e.RlnDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("RLN_DataZamkniecia");
            entity.Property(e => e.RlnDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLN_DokumentObcy");
            entity.Property(e => e.RlnFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_FrmNumer");
            entity.Property(e => e.RlnFrsId)
                .HasDefaultValue(0)
                .HasColumnName("RLN_FrsID");
            entity.Property(e => e.RlnGenerujAutomatycznie)
                .HasDefaultValue(0)
                .HasColumnName("RLN_GenerujAutomatycznie");
            entity.Property(e => e.RlnGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("RLN_GUID");
            entity.Property(e => e.RlnKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KnANumer");
            entity.Property(e => e.RlnKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KnATyp");
            entity.Property(e => e.RlnKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KnDFirma");
            entity.Property(e => e.RlnKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KnDLp");
            entity.Property(e => e.RlnKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KnDNumer");
            entity.Property(e => e.RlnKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KnDTyp");
            entity.Property(e => e.RlnKnSfirma)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KnSFirma");
            entity.Property(e => e.RlnKnSfirmaD)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KnSFirmaD");
            entity.Property(e => e.RlnKnSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KnSLp");
            entity.Property(e => e.RlnKnSlpD)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KnSLpD");
            entity.Property(e => e.RlnKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KnSNumer");
            entity.Property(e => e.RlnKnSnumerD)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KnSNumerD");
            entity.Property(e => e.RlnKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KnSTyp");
            entity.Property(e => e.RlnKnStypD)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KnSTypD");
            entity.Property(e => e.RlnKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KntFirma");
            entity.Property(e => e.RlnKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KntLp");
            entity.Property(e => e.RlnKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_KntNumer");
            entity.Property(e => e.RlnKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_KntTyp");
            entity.Property(e => e.RlnLicznikKopii)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_LicznikKopii");
            entity.Property(e => e.RlnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_Lp");
            entity.Property(e => e.RlnMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_MagNumer");
            entity.Property(e => e.RlnMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_Miesiac");
            entity.Property(e => e.RlnNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_Numer");
            entity.Property(e => e.RlnOdoLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_OdoLp");
            entity.Property(e => e.RlnOdoNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OdoNumer");
            entity.Property(e => e.RlnOdoTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_OdoTyp");
            entity.Property(e => e.RlnOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OpeNumerM");
            entity.Property(e => e.RlnOpeNumerO)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OpeNumerO");
            entity.Property(e => e.RlnOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OpeNumerR");
            entity.Property(e => e.RlnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OpeNumerW");
            entity.Property(e => e.RlnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OpeNumerZ");
            entity.Property(e => e.RlnOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_OpeTypM");
            entity.Property(e => e.RlnOpeTypR)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_OpeTypR");
            entity.Property(e => e.RlnOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_OpeTypW");
            entity.Property(e => e.RlnOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_OpeTypZ");
            entity.Property(e => e.RlnOperatorPos)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OperatorPOS");
            entity.Property(e => e.RlnOpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLN_OpiNumer");
            entity.Property(e => e.RlnOpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_OpiTyp");
            entity.Property(e => e.RlnOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLN_Opis");
            entity.Property(e => e.RlnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_Rok");
            entity.Property(e => e.RlnRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("RLN_RokMiesiac");
            entity.Property(e => e.RlnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLN_Seria");
            entity.Property(e => e.RlnStan)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_Stan");
            entity.Property(e => e.RlnStatus)
                .HasDefaultValue(0)
                .HasColumnName("RLN_Status");
            entity.Property(e => e.RlnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_Typ");
            entity.Property(e => e.RlnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLN_Url");
            entity.Property(e => e.RlnWsk)
                .HasDefaultValue((short)0)
                .HasColumnName("RLN_Wsk");
            entity.Property(e => e.RlnZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("RLN_ZewnetrznyId");
            entity.Property(e => e.RlnZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("RLN_ZewnetrznySys");
        });

        modelBuilder.Entity<ReklOperacjeDef>(entity =>
        {
            entity.HasKey(e => e.RodId).HasName("ROD_Primary");

            entity.ToTable("ReklOperacjeDef", "CDN", tb => tb.HasTrigger("ReklOperacjeDef_DeleteHandler"));

            entity.Property(e => e.RodId).HasColumnName("ROD_Id");
            entity.Property(e => e.RodArchiwalna)
                .HasDefaultValue((byte)0)
                .HasColumnName("ROD_Archiwalna");
            entity.Property(e => e.RodDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ROD_DokTyp");
            entity.Property(e => e.RodDostepna)
                .HasDefaultValue((byte)0)
                .HasColumnName("ROD_Dostepna");
            entity.Property(e => e.RodKluczowa)
                .HasDefaultValue(0)
                .HasColumnName("ROD_Kluczowa");
            entity.Property(e => e.RodNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ROD_Nazwa");
            entity.Property(e => e.RodOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ROD_Opis");
            entity.Property(e => e.RodOpublikowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("ROD_Opublikowana");
            entity.Property(e => e.RodStanPo)
                .HasDefaultValue((byte)0)
                .HasColumnName("ROD_StanPo");
            entity.Property(e => e.RodStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("ROD_Status");
        });

        modelBuilder.Entity<ReklRealizacja>(entity =>
        {
            entity.HasKey(e => e.RlrId).HasName("RLR_Primary");

            entity.ToTable("ReklRealizacja", "CDN", tb =>
                {
                    tb.HasTrigger("ReklRealizacja_DeleteHandler");
                    tb.HasTrigger("ReklRealizacja_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.RlrRleid, "RlrRleId");

            entity.Property(e => e.RlrId).HasColumnName("RLR_Id");
            entity.Property(e => e.RlrCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("RLR_CzasModyfikacji");
            entity.Property(e => e.RlrDataWykonania)
                .HasDefaultValue(0)
                .HasColumnName("RLR_DataWykonania");
            entity.Property(e => e.RlrDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLR_DokLp");
            entity.Property(e => e.RlrDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLR_DokNumer");
            entity.Property(e => e.RlrDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLR_DokTyp");
            entity.Property(e => e.RlrGuid)
                .HasMaxLength(37)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("RLR_GUID");
            entity.Property(e => e.RlrMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLR_MagNumer");
            entity.Property(e => e.RlrNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLR_Nazwa");
            entity.Property(e => e.RlrOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLR_OpeNumer");
            entity.Property(e => e.RlrOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLR_OpeTyp");
            entity.Property(e => e.RlrOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLR_Opis");
            entity.Property(e => e.RlrOpublikowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("RLR_Opublikowana");
            entity.Property(e => e.RlrRleid)
                .HasDefaultValue(0)
                .HasColumnName("RLR_RLEId");
            entity.Property(e => e.RlrRodid)
                .HasDefaultValue(0)
                .HasColumnName("RLR_RODId");
            entity.Property(e => e.RlrRodkluczowa)
                .HasDefaultValue(0)
                .HasColumnName("RLR_RODKluczowa");
            entity.Property(e => e.RlrStanPo)
                .HasDefaultValue((byte)0)
                .HasColumnName("RLR_StanPo");
            entity.Property(e => e.RlrStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("RLR_Status");

            entity.HasOne(d => d.RlrRle).WithMany(p => p.ReklRealizacjas)
                .HasForeignKey(d => d.RlrRleid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RlrRleId");
        });

        modelBuilder.Entity<ReklSelem>(entity =>
        {
            entity.HasKey(e => new { e.RlsRleid, e.RlsLp }).HasName("RLS_Primary");

            entity.ToTable("ReklSElem", "CDN");

            entity.HasIndex(e => new { e.RlsRleid, e.RlsZrdTyp, e.RlsZrdNumer, e.RlsZrdLp, e.RlsSubZrdLp }, "RLSZrodlowy");

            entity.Property(e => e.RlsRleid).HasColumnName("RLS_RLEId");
            entity.Property(e => e.RlsLp).HasColumnName("RLS_LP");
            entity.Property(e => e.RlsCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLS_CChLp");
            entity.Property(e => e.RlsCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLS_CChNumer");
            entity.Property(e => e.RlsCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLS_CChTyp");
            entity.Property(e => e.RlsCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RLS_Cecha");
            entity.Property(e => e.RlsIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("RLS_Ilosc");
            entity.Property(e => e.RlsSubZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLS_SubZrdLp");
            entity.Property(e => e.RlsZrdDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLS_ZrdDstNumer");
            entity.Property(e => e.RlsZrdDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLS_ZrdDstTyp");
            entity.Property(e => e.RlsZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("RLS_ZrdFirma");
            entity.Property(e => e.RlsZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLS_ZrdLp");
            entity.Property(e => e.RlsZrdMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLS_ZrdMagNumer");
            entity.Property(e => e.RlsZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("RLS_ZrdNumer");
            entity.Property(e => e.RlsZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RLS_ZrdTyp");

            entity.HasOne(d => d.RlsRle).WithMany(p => p.ReklSelems)
                .HasForeignKey(d => d.RlsRleid)
                .HasConstraintName("FK_RlSPrimary");
        });

        modelBuilder.Entity<RelTraImp>(entity =>
        {
            entity.HasKey(e => e.RtiId).HasName("RTI_Primary");

            entity.ToTable("RelTraImp", "CDN", tb =>
                {
                    tb.HasTrigger("RelTraImpAlias_InsertUpdateHandler");
                    tb.HasTrigger("RelTraImp_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.RtiDocNumer, e.RtiDocLp, e.RtiDocTyp }, "RTIDocelowy");

            entity.HasIndex(e => new { e.RtiZrdNumer, e.RtiZrdLp, e.RtiZrdTyp, e.RtiDocNumer, e.RtiDocLp, e.RtiDocTyp }, "RTIZrdDoc").IsUnique();

            entity.HasIndex(e => new { e.RtiZrdNumer, e.RtiZrdLp, e.RtiZrdTyp }, "RTIZrodlo");

            entity.Property(e => e.RtiId).HasColumnName("RTI_Id");
            entity.Property(e => e.RtiCzasDodania)
                .HasDefaultValue(0)
                .HasColumnName("RTI_CzasDodania");
            entity.Property(e => e.RtiDocFirma)
                .HasDefaultValue(0)
                .HasColumnName("RTI_DocFirma");
            entity.Property(e => e.RtiDocLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RTI_DocLp");
            entity.Property(e => e.RtiDocNumer)
                .HasDefaultValue(0)
                .HasColumnName("RTI_DocNumer");
            entity.Property(e => e.RtiDocTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RTI_DocTyp");
            entity.Property(e => e.RtiZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("RTI_ZrdFirma");
            entity.Property(e => e.RtiZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RTI_ZrdLp");
            entity.Property(e => e.RtiZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("RTI_ZrdNumer");
            entity.Property(e => e.RtiZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RTI_ZrdTyp");
        });

        modelBuilder.Entity<RetroKarty>(entity =>
        {
            entity.HasKey(e => e.RtKId).HasName("RtK_Primary");

            entity.ToTable("RetroKarty", "CDN", tb => tb.HasTrigger("RetroKarty_InsertUpdateHandler"));

            entity.HasIndex(e => e.RtKNazwa, "RtKNazwa").IsUnique();

            entity.HasIndex(e => e.RtKTypId, "RtKTypId");

            entity.Property(e => e.RtKId).HasColumnName("RtK_Id");
            entity.Property(e => e.RtKAktywny)
                .HasDefaultValue(0)
                .HasColumnName("RtK_Aktywny");
            entity.Property(e => e.RtKCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("RtK_CzasModyfikacji");
            entity.Property(e => e.RtKDataDo)
                .HasDefaultValue(0)
                .HasColumnName("RtK_DataDo");
            entity.Property(e => e.RtKDataOd)
                .HasDefaultValue(0)
                .HasColumnName("RtK_DataOd");
            entity.Property(e => e.RtKDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("RtK_DataUtworzenia");
            entity.Property(e => e.RtKNazwa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RtK_Nazwa");
            entity.Property(e => e.RtKOkresIlosc)
                .HasDefaultValue(1)
                .HasColumnName("RtK_OkresIlosc");
            entity.Property(e => e.RtKOkresTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_OkresTyp");
            entity.Property(e => e.RtKOkresyRozliczeniowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_OkresyRozliczeniowe");
            entity.Property(e => e.RtKOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("RtK_OpeMNumer");
            entity.Property(e => e.RtKOpeUnumer)
                .HasDefaultValue(0)
                .HasColumnName("RtK_OpeUNumer");
            entity.Property(e => e.RtKOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RtK_Opis");
            entity.Property(e => e.RtKPodstawaRabatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_PodstawaRabatu");
            entity.Property(e => e.RtKRodzajCeny)
                .HasDefaultValue((short)0)
                .HasColumnName("RtK_RodzajCeny");
            entity.Property(e => e.RtKSql)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RtK_SQL");
            entity.Property(e => e.RtKStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_Stan");
            entity.Property(e => e.RtKTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_Typ");
            entity.Property(e => e.RtKTypDaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_TypDaty");
            entity.Property(e => e.RtKTypId)
                .HasDefaultValue(0)
                .HasColumnName("RtK_TypID");
            entity.Property(e => e.RtKTypKalkulacji)
                .HasDefaultValue(0)
                .HasColumnName("RtK_TypKalkulacji");
            entity.Property(e => e.RtKTypProgu)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_TypProgu");
            entity.Property(e => e.RtKTypTerminu)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_TypTerminu");
            entity.Property(e => e.RtKWymaganaZaplata)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtK_WymaganaZaplata");

            entity.HasMany(d => d.RtFFrs).WithMany(p => p.RtFRtKs)
                .UsingEntity<Dictionary<string, object>>(
                    "RetroFr",
                    r => r.HasOne<FrmStruktura>().WithMany()
                        .HasPrincipalKey("FrsId")
                        .HasForeignKey("RtFFrSid")
                        .HasConstraintName("FK_RtFFrs"),
                    l => l.HasOne<RetroKarty>().WithMany()
                        .HasForeignKey("RtFRtKid")
                        .HasConstraintName("FK_RtFPrimary"),
                    j =>
                    {
                        j.HasKey("RtFRtKid", "RtFFrSid").HasName("RtF_Primary");
                        j.ToTable("RetroFrs", "CDN");
                        j.HasIndex(new[] { "RtFFrSid", "RtFRtKid" }, "RtFFrs").IsUnique();
                        j.IndexerProperty<int>("RtFRtKid").HasColumnName("RtF_RtKId");
                        j.IndexerProperty<int>("RtFFrSid").HasColumnName("RtF_FrSId");
                    });
        });

        modelBuilder.Entity<RetroKntOkresy>(entity =>
        {
            entity.HasKey(e => e.RkoId).HasName("RKO_Primary");

            entity.ToTable("RetroKntOkresy", "CDN", tb => tb.HasTrigger("RetroKntOkresy_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.RkoKntNumer, e.RkoKntTyp, e.RkoRtKid }, "RKOKnt");

            entity.HasIndex(e => e.RkoRtKid, "RKORtK");

            entity.Property(e => e.RkoId).HasColumnName("RKO_Id");
            entity.Property(e => e.RkoAktywny)
                .HasDefaultValue(0)
                .HasColumnName("RKO_Aktywny");
            entity.Property(e => e.RkoDataDo)
                .HasDefaultValue(0)
                .HasColumnName("RKO_DataDo");
            entity.Property(e => e.RkoDataOd)
                .HasDefaultValue(0)
                .HasColumnName("RKO_DataOd");
            entity.Property(e => e.RkoKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("RKO_KntFirma");
            entity.Property(e => e.RkoKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RKO_KntLp");
            entity.Property(e => e.RkoKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("RKO_KntNumer");
            entity.Property(e => e.RkoKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RKO_KntTyp");
            entity.Property(e => e.RkoNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKO_Nazwa");
            entity.Property(e => e.RkoOpis)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKO_Opis");
            entity.Property(e => e.RkoRtKid)
                .HasDefaultValue(0)
                .HasColumnName("RKO_RtKId");
            entity.Property(e => e.RkoStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKO_Stan");
            entity.Property(e => e.RkoWartoscUzgodniona)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RKO_WartoscUzgodniona");

            entity.HasOne(d => d.RetroKontrahenci).WithMany(p => p.RetroKntOkresies)
                .HasPrincipalKey(p => new { p.RktKntNumer, p.RktKntTyp, p.RktRtKid })
                .HasForeignKey(d => new { d.RkoKntNumer, d.RkoKntTyp, d.RkoRtKid })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RKOKnt");
        });

        modelBuilder.Entity<RetroKontrahenci>(entity =>
        {
            entity.HasKey(e => e.RktId).HasName("RKt_Primary");

            entity.ToTable("RetroKontrahenci", "CDN", tb =>
                {
                    tb.HasTrigger("RetroKontrahenci_DeleteRKO");
                    tb.HasTrigger("RetroKontrahenci_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.RktKntNumer, e.RktKntTyp, e.RktRtKid }, "RKtKnt").IsUnique();

            entity.HasIndex(e => e.RktRtKid, "RKtRtK");

            entity.Property(e => e.RktId).HasColumnName("RKt_Id");
            entity.Property(e => e.RktAkronimGrupy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKt_AkronimGrupy");
            entity.Property(e => e.RktKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("RKt_KntFirma");
            entity.Property(e => e.RktKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RKt_KntLp");
            entity.Property(e => e.RktKntNumer)
                .IsRequired()
                .HasDefaultValue(0)
                .HasColumnName("RKt_KntNumer");
            entity.Property(e => e.RktKntTyp)
                .IsRequired()
                .HasDefaultValue((short)0)
                .HasColumnName("RKt_KntTyp");
            entity.Property(e => e.RktRktId)
                .HasDefaultValue(2147483647)
                .HasColumnName("RKt_RKtId");
            entity.Property(e => e.RktRtKid)
                .IsRequired()
                .HasDefaultValue(0)
                .HasColumnName("RKt_RtKId");
            entity.Property(e => e.RktWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKt_Waluta");

            entity.HasOne(d => d.RktRtK).WithMany(p => p.RetroKontrahencis)
                .HasForeignKey(d => d.RktRtKid)
                .HasConstraintName("FK_RKtRtK");
        });

        modelBuilder.Entity<RetroMagazyny>(entity =>
        {
            entity.HasKey(e => new { e.RtMRtKid, e.RtMMagNumer }).HasName("RtM_Primary");

            entity.ToTable("RetroMagazyny", "CDN", tb => tb.HasTrigger("RetroMagazyny_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.RtMMagNumer, e.RtMRtKid }, "KtMMag").IsUnique();

            entity.Property(e => e.RtMRtKid).HasColumnName("RtM_RtKId");
            entity.Property(e => e.RtMMagNumer).HasColumnName("RtM_MagNumer");

            entity.HasOne(d => d.RtMRtK).WithMany(p => p.RetroMagazynies)
                .HasForeignKey(d => d.RtMRtKid)
                .HasConstraintName("FK_KtMPrimary");
        });

        modelBuilder.Entity<RetroOdbiorcy>(entity =>
        {
            entity.HasKey(e => e.RtOId).HasName("RtO_Primary");

            entity.ToTable("RetroOdbiorcy", "CDN", tb => tb.HasTrigger("RetroOdbiorcy_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.RtOKntNumer, e.RtOKntTyp, e.RtORtKid }, "RtOKnt").IsUnique();

            entity.HasIndex(e => e.RtORtKid, "RtORtK");

            entity.Property(e => e.RtOId).HasColumnName("RtO_Id");
            entity.Property(e => e.RtOKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("RtO_KntFirma");
            entity.Property(e => e.RtOKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RtO_KntLp");
            entity.Property(e => e.RtOKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("RtO_KntNumer");
            entity.Property(e => e.RtOKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RtO_KntTyp");
            entity.Property(e => e.RtORtKid)
                .HasDefaultValue(0)
                .HasColumnName("RtO_RtKId");

            entity.HasOne(d => d.RtORtK).WithMany(p => p.RetroOdbiorcies)
                .HasForeignKey(d => d.RtORtKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RtORtK");
        });

        modelBuilder.Entity<RetroPlt>(entity =>
        {
            entity.HasKey(e => e.RplId).HasName("RPl_Primary");

            entity.ToTable("RetroPlt", "CDN", tb => tb.HasTrigger("RetroPlt_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.RplPltLp, e.RplPltTyp, e.RplRtKid }, "RPlPlt").IsUnique();

            entity.HasIndex(e => e.RplRtKid, "RPlRtK");

            entity.Property(e => e.RplId).HasColumnName("RPl_Id");
            entity.Property(e => e.RplPltLp)
                .HasDefaultValue(0)
                .HasColumnName("RPl_PltLp");
            entity.Property(e => e.RplPltTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RPl_PltTyp");
            entity.Property(e => e.RplRtKid)
                .HasDefaultValue(0)
                .HasColumnName("RPl_RtKId");
            entity.Property(e => e.RplTerminMaks)
                .HasDefaultValue(0)
                .HasColumnName("RPl_TerminMaks");

            entity.HasOne(d => d.RplRtK).WithMany(p => p.RetroPlts)
                .HasForeignKey(d => d.RplRtKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RPlRtK");
        });

        modelBuilder.Entity<RetroProgi>(entity =>
        {
            entity.HasKey(e => e.RtPId).HasName("RtP_Primary");

            entity.ToTable("RetroProgi", "CDN");

            entity.HasIndex(e => new { e.RtPRtKid, e.RtPTypRabatu, e.RtPWartoscProgu }, "RtPRtK").IsUnique();

            entity.Property(e => e.RtPId).HasColumnName("RtP_Id");
            entity.Property(e => e.RtPRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("RtP_Rabat");
            entity.Property(e => e.RtPRtKid)
                .HasDefaultValue(0)
                .HasColumnName("RtP_RtKId");
            entity.Property(e => e.RtPTypRabatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtP_TypRabatu");
            entity.Property(e => e.RtPWartoscProgu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(20, 4)")
                .HasColumnName("RtP_WartoscProgu");

            entity.HasOne(d => d.RtPRtK).WithMany(p => p.RetroProgis)
                .HasForeignKey(d => d.RtPRtKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RtPRtK");
        });

        modelBuilder.Entity<RetroSpD>(entity =>
        {
            entity.HasKey(e => e.RtSId).HasName("RtS_Primary");

            entity.ToTable("RetroSpD", "CDN", tb => tb.HasTrigger("RetroSpD_InsertUpdateHandler"));

            entity.HasIndex(e => e.RtSRtKid, "RtSRtK");

            entity.HasIndex(e => new { e.RtSSpDtyp, e.RtSSpDlp, e.RtSRtKid }, "RtSSpD").IsUnique();

            entity.Property(e => e.RtSId).HasColumnName("RtS_Id");
            entity.Property(e => e.RtSRtKid)
                .HasDefaultValue(0)
                .HasColumnName("RtS_RtKId");
            entity.Property(e => e.RtSSpDlp)
                .HasDefaultValue(0)
                .HasColumnName("RtS_SpDLp");
            entity.Property(e => e.RtSSpDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RtS_SpDTyp");

            entity.HasOne(d => d.RtSRtK).WithMany(p => p.RetroSpDs)
                .HasForeignKey(d => d.RtSRtKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RtSRtK");
        });

        modelBuilder.Entity<RetroStrukturaRabatu>(entity =>
        {
            entity.HasKey(e => e.RsrId).HasName("Rsr_Primary");

            entity.ToTable("RetroStrukturaRabatu", "CDN");

            entity.HasIndex(e => new { e.RsrGidtyp, e.RsrGidnumer, e.RsrGidlp, e.RsrRkoid }, "RsrGID");

            entity.HasIndex(e => e.RsrRkoid, "RsrRKO");

            entity.Property(e => e.RsrId).HasColumnName("Rsr_Id");
            entity.Property(e => e.RsrCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Rsr_Cena");
            entity.Property(e => e.RsrGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Rsr_GIDFirma");
            entity.Property(e => e.RsrGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rsr_GIDLp");
            entity.Property(e => e.RsrGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("Rsr_GIDNumer");
            entity.Property(e => e.RsrGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rsr_GIDTyp");
            entity.Property(e => e.RsrIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Rsr_Ilosc");
            entity.Property(e => e.RsrRabatPodstawa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Rsr_RabatPodstawa");
            entity.Property(e => e.RsrRabatWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Rsr_RabatWartosc");
            entity.Property(e => e.RsrRkoid)
                .HasDefaultValue(0)
                .HasColumnName("Rsr_RKOId");

            entity.HasOne(d => d.RsrRko).WithMany(p => p.RetroStrukturaRabatus)
                .HasForeignKey(d => d.RsrRkoid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RsrRKO");

            entity.HasOne(d => d.TraElem).WithMany(p => p.RetroStrukturaRabatus)
                .HasForeignKey(d => new { d.RsrGidnumer, d.RsrGidlp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RsrGID");
        });

        modelBuilder.Entity<RetroTowary>(entity =>
        {
            entity.HasKey(e => e.RtTId).HasName("RtT_Primary");

            entity.ToTable("RetroTowary", "CDN", tb => tb.HasTrigger("RetroTowary_InsertUpdateHandler"));

            entity.HasIndex(e => e.RtTRtKid, "RtTRtK");

            entity.HasIndex(e => new { e.RtTTwrNumer, e.RtTTwrTyp, e.RtTRtKid }, "RtTTwr").IsUnique();

            entity.Property(e => e.RtTId).HasColumnName("RtT_Id");
            entity.Property(e => e.RtTRtKid)
                .HasDefaultValue(0)
                .HasColumnName("RtT_RtKId");
            entity.Property(e => e.RtTTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("RtT_TwrFirma");
            entity.Property(e => e.RtTTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RtT_TwrLp");
            entity.Property(e => e.RtTTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("RtT_TwrNumer");
            entity.Property(e => e.RtTTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RtT_TwrTyp");
            entity.Property(e => e.RtTTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RtT_Typ");

            entity.HasOne(d => d.RtTRtK).WithMany(p => p.RetroTowaries)
                .HasForeignKey(d => d.RtTRtKid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RtTRtK");
        });

        modelBuilder.Entity<RezMagazyny>(entity =>
        {
            entity.HasKey(e => new { e.ReMRezNumer, e.ReMRezLp }).HasName("ReM_Primary");

            entity.ToTable("RezMagazyny", "CDN");

            entity.HasIndex(e => new { e.ReMZrdTyp, e.ReMZrdNumer }, "RemZrdNumer");

            entity.HasIndex(e => new { e.ReMMagTyp, e.ReMMagNumer }, "RezMagNumer");

            entity.HasIndex(e => new { e.ReMRezTyp, e.ReMRezNumer, e.ReMMagNumer }, "RezRezMag").IsUnique();

            entity.Property(e => e.ReMRezNumer).HasColumnName("ReM_RezNumer");
            entity.Property(e => e.ReMRezLp).HasColumnName("ReM_RezLp");
            entity.Property(e => e.ReMMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReM_MagFirma");
            entity.Property(e => e.ReMMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReM_MagLp");
            entity.Property(e => e.ReMMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReM_MagNumer");
            entity.Property(e => e.ReMMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReM_MagTyp");
            entity.Property(e => e.ReMRezFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReM_RezFirma");
            entity.Property(e => e.ReMRezTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReM_RezTyp");
            entity.Property(e => e.ReMZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ReM_ZrdFirma");
            entity.Property(e => e.ReMZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReM_ZrdLp");
            entity.Property(e => e.ReMZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ReM_ZrdNumer");
            entity.Property(e => e.ReMZrdSubLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReM_ZrdSubLp");
            entity.Property(e => e.ReMZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ReM_ZrdTyp");

            entity.HasOne(d => d.ReMMagNumerNavigation).WithMany(p => p.RezMagazynies)
                .HasForeignKey(d => d.ReMMagNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RezMagNumer");

            entity.HasOne(d => d.ReMRezNumerNavigation).WithMany(p => p.RezMagazynies)
                .HasForeignKey(d => d.ReMRezNumer)
                .HasConstraintName("FK_ReMPrimary");
        });

        modelBuilder.Entity<Rezerwacje>(entity =>
        {
            entity.HasKey(e => e.RezGidnumer).HasName("Rez_Primary");

            entity.ToTable("Rezerwacje", "CDN", tb =>
                {
                    tb.HasTrigger("Rezerwacje_DeleteHandler");
                    tb.HasTrigger("Rezerwacje_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.RezBsNid, e.RezTwrTyp, e.RezTwrNumer, e.RezBsSrodzaj }, "RezBsSElem");

            entity.HasIndex(e => new { e.RezTwrNumer, e.RezTwrTyp, e.RezGidtyp, e.RezDataRealizacji, e.RezGidnumer }, "RezDataRealizacji");

            entity.HasIndex(e => e.RezGuid, "RezGUID");

            entity.HasIndex(e => new { e.RezKntTyp, e.RezKntNumer }, "RezKontrahent");

            entity.HasIndex(e => new { e.RezDataWaznosci, e.RezTwrNumer, e.RezMagNumer, e.RezDstNumer }, "RezPrzeterminowane");

            entity.HasIndex(e => new { e.RezTwrNumer, e.RezTwrTyp, e.RezGidtyp, e.RezDataPotwDst, e.RezGidnumer }, "RezTwrDPotw").IsUnique();

            entity.HasIndex(e => new { e.RezTwrTyp, e.RezTwrNumer, e.RezKntTyp, e.RezKntNumer, e.RezDataRezerwacji }, "RezTwrKnt");

            entity.HasIndex(e => e.RezDataRezerwacji, "RezTypData");

            entity.HasIndex(e => new { e.RezZrdTyp, e.RezZrdNumer, e.RezZrdLp, e.RezGidnumer }, "RezZrodlo").IsUnique();

            entity.Property(e => e.RezGidnumer).HasColumnName("Rez_GIDNumer");
            entity.Property(e => e.RezAktywna)
                .HasDefaultValue((byte)0)
                .HasColumnName("Rez_Aktywna");
            entity.Property(e => e.RezBsNid).HasColumnName("Rez_BsNID");
            entity.Property(e => e.RezBsSrodzaj).HasColumnName("Rez_BsSRodzaj");
            entity.Property(e => e.RezBsStwrNumer).HasColumnName("Rez_BsSTwrNumer");
            entity.Property(e => e.RezCchnumer)
                .HasDefaultValue(0)
                .HasColumnName("Rez_CCHNumer");
            entity.Property(e => e.RezCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Rez_Cecha");
            entity.Property(e => e.RezDataAktywacji)
                .HasDefaultValue(0)
                .HasColumnName("Rez_DataAktywacji");
            entity.Property(e => e.RezDataPotwDst)
                .HasDefaultValue(0)
                .HasColumnName("Rez_DataPotwDst");
            entity.Property(e => e.RezDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("Rez_DataRealizacji");
            entity.Property(e => e.RezDataRezerwacji)
                .HasDefaultValue(0)
                .HasColumnName("Rez_DataRezerwacji");
            entity.Property(e => e.RezDataWaznosci)
                .HasDefaultValue(0)
                .HasColumnName("Rez_DataWaznosci");
            entity.Property(e => e.RezDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("Rez_DstFirma");
            entity.Property(e => e.RezDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_DstLp");
            entity.Property(e => e.RezDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("Rez_DstNumer");
            entity.Property(e => e.RezDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_DstTyp");
            entity.Property(e => e.RezFrsId)
                .HasDefaultValue(0)
                .HasColumnName("Rez_FrsID");
            entity.Property(e => e.RezGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Rez_GIDFirma");
            entity.Property(e => e.RezGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_GIDLp");
            entity.Property(e => e.RezGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_GIDTyp");
            entity.Property(e => e.RezGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Rez_GUID");
            entity.Property(e => e.RezIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Rez_Ilosc");
            entity.Property(e => e.RezIloscImp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Rez_IloscImp");
            entity.Property(e => e.RezIloscMag)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Rez_IloscMag");
            entity.Property(e => e.RezIloscSad)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Rez_IloscSAD");
            entity.Property(e => e.RezIloscSsc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Rez_IloscSSC");
            entity.Property(e => e.RezKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("Rez_KntFirma");
            entity.Property(e => e.RezKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_KntLp");
            entity.Property(e => e.RezKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("Rez_KntNumer");
            entity.Property(e => e.RezKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_KntTyp");
            entity.Property(e => e.RezMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("Rez_MagFirma");
            entity.Property(e => e.RezMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_MagLp");
            entity.Property(e => e.RezMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("Rez_MagNumer");
            entity.Property(e => e.RezMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_MagTyp");
            entity.Property(e => e.RezOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("Rez_OpeFirma");
            entity.Property(e => e.RezOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_OpeLp");
            entity.Property(e => e.RezOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("Rez_OpeNumer");
            entity.Property(e => e.RezOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_OpeTyp");
            entity.Property(e => e.RezOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Rez_Opis");
            entity.Property(e => e.RezPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("Rez_Priorytet");
            entity.Property(e => e.RezPtzid)
                .HasDefaultValue(0)
                .HasColumnName("Rez_PTZID");
            entity.Property(e => e.RezTstamp)
                .HasDefaultValue(0)
                .HasColumnName("Rez_TStamp");
            entity.Property(e => e.RezTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("Rez_TwrFirma");
            entity.Property(e => e.RezTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_TwrLp");
            entity.Property(e => e.RezTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("Rez_TwrNumer");
            entity.Property(e => e.RezTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_TwrTyp");
            entity.Property(e => e.RezTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Rez_Typ");
            entity.Property(e => e.RezZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("Rez_ZrdFirma");
            entity.Property(e => e.RezZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_ZrdLp");
            entity.Property(e => e.RezZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("Rez_ZrdNumer");
            entity.Property(e => e.RezZrdSubLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_ZrdSubLp");
            entity.Property(e => e.RezZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_ZrdTyp");
            entity.Property(e => e.RezZrealizowano)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Rez_Zrealizowano");
            entity.Property(e => e.RezZrodlo)
                .HasDefaultValue((short)0)
                .HasColumnName("Rez_Zrodlo");
        });

        modelBuilder.Entity<RezerwacjeWprzyszlosc>(entity =>
        {
            entity.HasKey(e => e.RezPId).HasName("RezP_Primary");

            entity.ToTable("RezerwacjeWPrzyszlosc", "CDN", tb => tb.HasTrigger("RezerwacjeWPrzyszlosc_InsertUpdateHandler"));

            entity.HasIndex(e => e.RezPMagNumer, "RezPMagazyn");

            entity.HasIndex(e => e.RezPTwrNumer, "RezPTwr");

            entity.HasIndex(e => new { e.RezPZrdNumer, e.RezPZrdLp, e.RezPZrdSubLp, e.RezPZrdTyp }, "RezPZrodlo");

            entity.Property(e => e.RezPId).HasColumnName("RezP_Id");
            entity.Property(e => e.RezPGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RezP_GUID");
            entity.Property(e => e.RezPIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("RezP_Ilosc");
            entity.Property(e => e.RezPMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("RezP_MagFirma");
            entity.Property(e => e.RezPMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RezP_MagLp");
            entity.Property(e => e.RezPMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("RezP_MagNumer");
            entity.Property(e => e.RezPMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RezP_MagTyp");
            entity.Property(e => e.RezPTpaId)
                .HasDefaultValue(0)
                .HasColumnName("RezP_TPaId");
            entity.Property(e => e.RezPTstamp)
                .HasDefaultValue(0)
                .HasColumnName("RezP_TStamp");
            entity.Property(e => e.RezPTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("RezP_TwrFirma");
            entity.Property(e => e.RezPTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RezP_TwrLp");
            entity.Property(e => e.RezPTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("RezP_TwrNumer");
            entity.Property(e => e.RezPTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RezP_TwrTyp");
            entity.Property(e => e.RezPZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("RezP_ZrdFirma");
            entity.Property(e => e.RezPZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RezP_ZrdLp");
            entity.Property(e => e.RezPZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("RezP_ZrdNumer");
            entity.Property(e => e.RezPZrdSubLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RezP_ZrdSubLp");
            entity.Property(e => e.RezPZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RezP_ZrdTyp");
        });

        modelBuilder.Entity<RodzajUpomnieniaParametryProcesow>(entity =>
        {
            entity.HasKey(e => e.RuppId).HasName("RUPP_Primary");

            entity.ToTable("RodzajUpomnieniaParametryProcesow", "CDN", tb => tb.HasTrigger("RodzajUpomnieniaParametryProcesow_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.RuppRodzicLp, e.RuppRodzicTyp }, "RUPPRodzic").IsUnique();

            entity.Property(e => e.RuppId).HasColumnName("RUPP_Id");
            entity.Property(e => e.RuppCzyGenerowacNotyDlaDokCzesciowoRozliczonych)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyGenerowacNotyDlaDokCzesciowoRozliczonych");
            entity.Property(e => e.RuppCzyGenerowacPlatnoscUpomnieniaOdOdsetek)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyGenerowacPlatnoscUpomnieniaOdOdsetek");
            entity.Property(e => e.RuppCzyKursWalutNaWydruku)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyKursWalutNaWydruku");
            entity.Property(e => e.RuppCzyMinKwotaOdsetek)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyMinKwotaOdsetek");
            entity.Property(e => e.RuppCzyNaliczacOdsetkiOdPltRozFakturamiKorygujacymi)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyNaliczacOdsetkiOdPltRozFakturamiKorygujacymi");
            entity.Property(e => e.RuppCzyNaliczacOdsetkiOdTerminowMax)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyNaliczacOdsetkiOdTerminowMax");
            entity.Property(e => e.RuppCzyNaliczacOdsetkiOdTerminowProlongowanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyNaliczacOdsetkiOdTerminowProlongowanych");
            entity.Property(e => e.RuppCzyObslugaProcesow)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyObslugaProcesow");
            entity.Property(e => e.RuppCzyOdsetkiWkwocieDoZaplatyNaWydruku)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_CzyOdsetkiWKwocieDoZaplatyNaWydruku");
            entity.Property(e => e.RuppEmailPodpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RUPP_EMailPodpis");
            entity.Property(e => e.RuppEmailTemat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RUPP_EMailTemat");
            entity.Property(e => e.RuppEmailTresc)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RUPP_EMailTresc");
            entity.Property(e => e.RuppFormatWydruku)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_FormatWydruku");
            entity.Property(e => e.RuppKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RUPP_Koszt");
            entity.Property(e => e.RuppMinKwotaOdsetek)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RUPP_MinKwotaOdsetek");
            entity.Property(e => e.RuppNrKursuKosztu)
                .HasDefaultValue((short)0)
                .HasColumnName("RUPP_NrKursuKosztu");
            entity.Property(e => e.RuppNrKursuOdsetek)
                .HasDefaultValue((short)0)
                .HasColumnName("RUPP_NrKursuOdsetek");
            entity.Property(e => e.RuppPrzeliczanieOdsetekWgKursu)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_PrzeliczanieOdsetekWgKursu");
            entity.Property(e => e.RuppRodzajStawki)
                .HasDefaultValue((byte)0)
                .HasColumnName("RUPP_RodzajStawki");
            entity.Property(e => e.RuppRodzicLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RUPP_RodzicLp");
            entity.Property(e => e.RuppRodzicTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RUPP_RodzicTyp");
            entity.Property(e => e.RuppSeriaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("RUPP_SeriaLp");
            entity.Property(e => e.RuppStawkaIndywidualna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RUPP_StawkaIndywidualna");
            entity.Property(e => e.RuppTypOdsetek)
                .HasDefaultValue(0)
                .HasColumnName("RUPP_TypOdsetek");
            entity.Property(e => e.RuppWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RUPP_Waluta");
            entity.Property(e => e.RuppWydrukNazwaWezwania)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RUPP_WydrukNazwaWezwania");
            entity.Property(e => e.RuppWydrukTrescNaglowka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RUPP_WydrukTrescNaglowka");
            entity.Property(e => e.RuppWydrukTrescStopki)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RUPP_WydrukTrescStopki");
        });

        modelBuilder.Entity<RodzajeBonow>(entity =>
        {
            entity.HasKey(e => e.RboId).HasName("RBo_Primary");

            entity.ToTable("RodzajeBonow", "CDN", tb =>
                {
                    tb.HasTrigger("RodzajeBonow_DeleteHandler");
                    tb.HasTrigger("RodzajeBonow_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.RboKod, "RBoKod").IsUnique();

            entity.HasIndex(e => new { e.RboMdnNumer, e.RboMdnTyp }, "RBoMdn");

            entity.HasIndex(e => new { e.RboTwrNumer, e.RboTwrTyp }, "RBoTwr");

            entity.Property(e => e.RboId).HasColumnName("RBo_Id");
            entity.Property(e => e.RboArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("RBo_Archiwalny");
            entity.Property(e => e.RboKod)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RBo_Kod");
            entity.Property(e => e.RboKopiujOpis)
                .HasDefaultValue((byte)0)
                .HasColumnName("RBo_KopiujOpis");
            entity.Property(e => e.RboKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RBo_Kwota");
            entity.Property(e => e.RboKwotaAktualizuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("RBo_KwotaAktualizuj");
            entity.Property(e => e.RboMaska)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RBo_Maska");
            entity.Property(e => e.RboMdnNumer)
                .HasDefaultValue(0)
                .HasColumnName("RBo_MdnNumer");
            entity.Property(e => e.RboMdnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RBo_MdnTyp");
            entity.Property(e => e.RboNazwa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RBo_Nazwa");
            entity.Property(e => e.RboOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RBo_Opis");
            entity.Property(e => e.RboTerminDni)
                .HasDefaultValue(365)
                .HasColumnName("RBo_TerminDni");
            entity.Property(e => e.RboTerminOdWydania)
                .HasDefaultValue((byte)0)
                .HasColumnName("RBo_TerminOdWydania");
            entity.Property(e => e.RboTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("RBo_TwrNumer");
            entity.Property(e => e.RboTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RBo_TwrTyp");
            entity.Property(e => e.RboTypRozliczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("RBo_TypRozliczenia");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RolId).HasName("Rol_Primary");

            entity.ToTable("Role", "CDN", tb => tb.HasTrigger("Role_DeleteHandler"));

            entity.HasIndex(e => e.RolNazwa, "RolNazwa").IsUnique();

            entity.Property(e => e.RolId).HasColumnName("Rol_Id");
            entity.Property(e => e.RolNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Rol_Nazwa");
            entity.Property(e => e.RolOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Rol_Opis");
            entity.Property(e => e.RolOptimaKierownik)
                .HasDefaultValue((byte)0)
                .HasColumnName("Rol_OptimaKierownik");

            entity.HasMany(d => d.RlPPras).WithMany(p => p.RlPRols)
                .UsingEntity<Dictionary<string, object>>(
                    "RolePrawa",
                    r => r.HasOne<Prawa>().WithMany()
                        .HasForeignKey("RlPPraId")
                        .HasConstraintName("FK_RlPPrawo"),
                    l => l.HasOne<Role>().WithMany()
                        .HasForeignKey("RlPRolId")
                        .HasConstraintName("FK_RlPRola"),
                    j =>
                    {
                        j.HasKey("RlPRolId", "RlPPraId").HasName("RlP_Primary");
                        j.ToTable("RolePrawa", "CDN");
                        j.IndexerProperty<int>("RlPRolId").HasColumnName("RlP_RolId");
                        j.IndexerProperty<int>("RlPPraId").HasColumnName("RlP_PraId");
                    });
        });

        modelBuilder.Entity<Rozliczenium>(entity =>
        {
            entity.HasKey(e => e.R2Id).HasName("R2_Primary");

            entity.ToTable("Rozliczenia", "CDN", tb =>
                {
                    tb.HasTrigger("RozliczeniaInsert");
                    tb.HasTrigger("Rozliczenia_DeleteHandler");
                    tb.HasTrigger("Rozliczenia_InsertUpdateHandler");
                    tb.HasTrigger("Rozliczenia_PicoBlokada");
                    tb.HasTrigger("Rozliczenia_PicoUsuniete");
                });

            entity.HasIndex(e => new { e.R2Dekret1Numer, e.R2Dekret1Lp }, "R2Dekret1");

            entity.HasIndex(e => new { e.R2Dekret2Numer, e.R2Dekret2Lp }, "R2Dekret2");

            entity.HasIndex(e => new { e.R2Dok1Typ, e.R2Dok1Numer, e.R2Dok1Lp }, "R2Dok1");

            entity.HasIndex(e => new { e.R2Dok2Typ, e.R2Dok2Numer, e.R2Dok2Lp }, "R2Dok2");

            entity.HasIndex(e => new { e.R2CzasModyfikacji, e.R2ZewnetrznyId }, "R2OptymalizacjaMOS");

            entity.HasIndex(e => e.R2ParId, "R2ParID");

            entity.Property(e => e.R2Id).HasColumnName("R2_ID");
            entity.Property(e => e.R2CzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("R2_CzasModyfikacji");
            entity.Property(e => e.R2DataRozliczenia)
                .HasDefaultValue(0)
                .HasColumnName("R2_DataRozliczenia");
            entity.Property(e => e.R2DataRozrachunku)
                .HasDefaultValue(0)
                .HasColumnName("R2_DataRozrachunku");
            entity.Property(e => e.R2Dekret1Dc)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dekret1DC");
            entity.Property(e => e.R2Dekret1Dod)
                .HasDefaultValue((byte)0)
                .HasColumnName("R2_Dekret1Dod");
            entity.Property(e => e.R2Dekret1Lp)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dekret1Lp");
            entity.Property(e => e.R2Dekret1Numer)
                .HasDefaultValue(0)
                .HasColumnName("R2_Dekret1Numer");
            entity.Property(e => e.R2Dekret2Dc)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dekret2DC");
            entity.Property(e => e.R2Dekret2Dod)
                .HasDefaultValue((byte)0)
                .HasColumnName("R2_Dekret2Dod");
            entity.Property(e => e.R2Dekret2Lp)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dekret2Lp");
            entity.Property(e => e.R2Dekret2Numer)
                .HasDefaultValue(0)
                .HasColumnName("R2_Dekret2Numer");
            entity.Property(e => e.R2Dok1Lp)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dok1Lp");
            entity.Property(e => e.R2Dok1Numer)
                .HasDefaultValue(0)
                .HasColumnName("R2_Dok1Numer");
            entity.Property(e => e.R2Dok1Typ)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dok1Typ");
            entity.Property(e => e.R2Dok2Lp)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dok2Lp");
            entity.Property(e => e.R2Dok2Numer)
                .HasDefaultValue(0)
                .HasColumnName("R2_Dok2Numer");
            entity.Property(e => e.R2Dok2Typ)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_Dok2Typ");
            entity.Property(e => e.R2Gidfirma)
                .HasDefaultValue(0)
                .HasColumnName("R2_GIDFirma");
            entity.Property(e => e.R2KwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("R2_KwotaSys");
            entity.Property(e => e.R2KwotaWal1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("R2_KwotaWal1");
            entity.Property(e => e.R2KwotaWal2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("R2_KwotaWal2");
            entity.Property(e => e.R2OpeNumerRl)
                .HasDefaultValue(0)
                .HasColumnName("R2_OpeNumerRL");
            entity.Property(e => e.R2OpeNumerRz)
                .HasDefaultValue(0)
                .HasColumnName("R2_OpeNumerRZ");
            entity.Property(e => e.R2ParId)
                .HasDefaultValue(0)
                .HasColumnName("R2_ParID");
            entity.Property(e => e.R2PozostajeZwyc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("R2_PozostajeZWyc");
            entity.Property(e => e.R2PozostajeZwycSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("R2_PozostajeZWycSys");
            entity.Property(e => e.R2Rk)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("R2_RK");
            entity.Property(e => e.R2Rkstrona)
                .HasDefaultValue((byte)0)
                .HasColumnName("R2_RKStrona");
            entity.Property(e => e.R2Waluta1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("R2_Waluta1");
            entity.Property(e => e.R2Waluta2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("R2_Waluta2");
            entity.Property(e => e.R2Wycena)
                .HasDefaultValue((byte)0)
                .HasColumnName("R2_Wycena");
            entity.Property(e => e.R2WycenaParId)
                .HasDefaultValue(0)
                .HasColumnName("R2_WycenaParID");
            entity.Property(e => e.R2WycenaWskazanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("R2_WycenaWskazanie");
            entity.Property(e => e.R2ZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("R2_ZewnetrznyId");
            entity.Property(e => e.R2ZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("R2_ZewnetrznySys");
            entity.Property(e => e.R2ZewnetrznyTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("R2_ZewnetrznyTyp");
        });

        modelBuilder.Entity<RozmowaTel>(entity =>
        {
            entity.HasKey(e => e.RtelId).HasName("RTel_Primary");

            entity.ToTable("RozmowaTel", "CDN");

            entity.Property(e => e.RtelId).HasColumnName("RTel_ID");
            entity.Property(e => e.RtelBtelId)
                .HasDefaultValue(0)
                .HasColumnName("RTel_BTelID");
            entity.Property(e => e.RtelCzasTrwania)
                .HasDefaultValue(0)
                .HasColumnName("RTel_CzasTrwania");
            entity.Property(e => e.RtelDataGodz)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("RTel_DataGodz");
            entity.Property(e => e.RtelDodatkowe)
                .HasDefaultValue(0)
                .HasColumnName("RTel_Dodatkowe");
            entity.Property(e => e.RtelKilobajty)
                .HasDefaultValue(0)
                .HasColumnName("RTel_Kilobajty");
            entity.Property(e => e.RtelNrDo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RTel_NrDo");
            entity.Property(e => e.RtelNrDoZm)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RTel_NrDoZm");
            entity.Property(e => e.RtelNrOd)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RTel_NrOd");
            entity.Property(e => e.RtelNrOdZm)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RTel_NrOdZm");
            entity.Property(e => e.RtelRoaming)
                .HasDefaultValue(0)
                .HasColumnName("RTel_Roaming");
            entity.Property(e => e.RtelSms)
                .HasDefaultValue(0)
                .HasColumnName("RTel_Sms");
            entity.Property(e => e.RtelWychodzaca)
                .HasDefaultValue(0)
                .HasColumnName("RTel_Wychodzaca");

            entity.HasOne(d => d.RtelBtel).WithMany(p => p.RozmowaTels)
                .HasForeignKey(d => d.RtelBtelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RTelBiling");
        });

        modelBuilder.Entity<RozniceKursowe>(entity =>
        {
            entity.HasKey(e => e.RknId).HasName("RKN_Primary");

            entity.ToTable("RozniceKursowe", "CDN", tb =>
                {
                    tb.HasTrigger("RozniceKursoweAlias_DeleteHandler");
                    tb.HasTrigger("RozniceKursowe_DeleteHandler");
                });

            entity.HasIndex(e => new { e.RknDok1Typ, e.RknDok1Numer, e.RknDok1Lp }, "RKNDok1");

            entity.HasIndex(e => new { e.RknDok2Typ, e.RknDok2Numer, e.RknDok2Lp }, "RKNDok2");

            entity.HasIndex(e => new { e.RknRok, e.RknSeria, e.RknNumer }, "RKNNumer").IsUnique();

            entity.Property(e => e.RknId).HasColumnName("RKN_ID");
            entity.Property(e => e.RknAktywny)
                .HasDefaultValue(0)
                .HasColumnName("RKN_Aktywny");
            entity.Property(e => e.RknBz)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_BZ");
            entity.Property(e => e.RknDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("RKN_DataKsiegowania");
            entity.Property(e => e.RknDataRozl)
                .HasDefaultValue(0)
                .HasColumnName("RKN_DataRozl");
            entity.Property(e => e.RknDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("RKN_DataWyst");
            entity.Property(e => e.RknDok1Firma)
                .HasDefaultValue(0)
                .HasColumnName("RKN_Dok1Firma");
            entity.Property(e => e.RknDok1KwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(17, 2)")
                .HasColumnName("RKN_Dok1KwotaSys");
            entity.Property(e => e.RknDok1Lp)
                .HasDefaultValue((short)0)
                .HasColumnName("RKN_Dok1Lp");
            entity.Property(e => e.RknDok1Numer)
                .HasDefaultValue(0)
                .HasColumnName("RKN_Dok1Numer");
            entity.Property(e => e.RknDok1Typ)
                .HasDefaultValue((short)0)
                .HasColumnName("RKN_Dok1Typ");
            entity.Property(e => e.RknDok2Firma)
                .HasDefaultValue(0)
                .HasColumnName("RKN_Dok2Firma");
            entity.Property(e => e.RknDok2KwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(17, 2)")
                .HasColumnName("RKN_Dok2KwotaSys");
            entity.Property(e => e.RknDok2Lp)
                .HasDefaultValue((short)0)
                .HasColumnName("RKN_Dok2Lp");
            entity.Property(e => e.RknDok2Numer)
                .HasDefaultValue(0)
                .HasColumnName("RKN_Dok2Numer");
            entity.Property(e => e.RknDok2Typ)
                .HasDefaultValue((short)0)
                .HasColumnName("RKN_Dok2Typ");
            entity.Property(e => e.RknDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKN_DokumentObcy");
            entity.Property(e => e.RknDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKN_Dziennik");
            entity.Property(e => e.RknKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(17, 2)")
                .HasColumnName("RKN_Kwota");
            entity.Property(e => e.RknKwotaRozl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("RKN_KwotaRozl");
            entity.Property(e => e.RknMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_Miesiac");
            entity.Property(e => e.RknNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_NieKsiegowac");
            entity.Property(e => e.RknNumer)
                .HasDefaultValue(0)
                .HasColumnName("RKN_Numer");
            entity.Property(e => e.RknOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("RKN_OpeNumerM");
            entity.Property(e => e.RknOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("RKN_OpeNumerW");
            entity.Property(e => e.RknOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKN_Opis");
            entity.Property(e => e.RknRok)
                .HasDefaultValue((short)0)
                .HasColumnName("RKN_Rok");
            entity.Property(e => e.RknSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("RKN_SchNumer");
            entity.Property(e => e.RknSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RKN_SchTyp");
            entity.Property(e => e.RknSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKN_Seria");
            entity.Property(e => e.RknStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_Status");
            entity.Property(e => e.RknStatusId)
                .HasDefaultValue(0)
                .HasColumnName("RKN_StatusID");
            entity.Property(e => e.RknTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_Typ");
            entity.Property(e => e.RknWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RKN_WsDziennik");
            entity.Property(e => e.RknWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("RKN_WsSCHNumer");
            entity.Property(e => e.RknWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RKN_WsSCHTyp");
            entity.Property(e => e.RknWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_WsStosujDziennik");
            entity.Property(e => e.RknWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_WsStosujSchemat");
            entity.Property(e => e.RknWycena)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_Wycena");
            entity.Property(e => e.RknZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_Zaksiegowano");
            entity.Property(e => e.RknZnak)
                .HasDefaultValue((byte)0)
                .HasColumnName("RKN_Znak");
        });

        modelBuilder.Entity<Rozrachunki>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Rozrachunki", "CDN");

            entity.Property(e => e.RozCtFirma).HasColumnName("ROZ_CtFirma");
            entity.Property(e => e.RozCtLp).HasColumnName("ROZ_CtLp");
            entity.Property(e => e.RozCtNumer).HasColumnName("ROZ_CtNumer");
            entity.Property(e => e.RozCtTyp).HasColumnName("ROZ_CtTyp");
            entity.Property(e => e.RozCtdc).HasColumnName("ROZ_CTDC");
            entity.Property(e => e.RozDataCentrali).HasColumnName("ROZ_DataCentrali");
            entity.Property(e => e.RozDataOddzialu).HasColumnName("ROZ_DataOddzialu");
            entity.Property(e => e.RozDataRozliczenia).HasColumnName("ROZ_DataRozliczenia");
            entity.Property(e => e.RozDataRozrachunku).HasColumnName("ROZ_DataRozrachunku");
            entity.Property(e => e.RozDtFirma).HasColumnName("ROZ_DtFirma");
            entity.Property(e => e.RozDtLp).HasColumnName("ROZ_DtLp");
            entity.Property(e => e.RozDtNumer).HasColumnName("ROZ_DtNumer");
            entity.Property(e => e.RozDtTyp).HasColumnName("ROZ_DtTyp");
            entity.Property(e => e.RozDtdc).HasColumnName("ROZ_DTDC");
            entity.Property(e => e.RozGidfirma).HasColumnName("ROZ_GIDFirma");
            entity.Property(e => e.RozGidlp).HasColumnName("ROZ_GIDLp");
            entity.Property(e => e.RozGidnumer).HasColumnName("ROZ_GIDNumer");
            entity.Property(e => e.RozGidtyp).HasColumnName("ROZ_GIDTyp");
            entity.Property(e => e.RozKazfirma).HasColumnName("ROZ_KAZFirma");
            entity.Property(e => e.RozKazlp).HasColumnName("ROZ_KAZLp");
            entity.Property(e => e.RozKaznumer).HasColumnName("ROZ_KAZNumer");
            entity.Property(e => e.RozKaztyp).HasColumnName("ROZ_KAZTyp");
            entity.Property(e => e.RozKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ROZ_Kwota");
            entity.Property(e => e.RozKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ROZ_KwotaSys");
            entity.Property(e => e.RozOpeFirmaRl).HasColumnName("ROZ_OpeFirmaRL");
            entity.Property(e => e.RozOpeFirmaRz).HasColumnName("ROZ_OpeFirmaRZ");
            entity.Property(e => e.RozOpeLpRl).HasColumnName("ROZ_OpeLpRL");
            entity.Property(e => e.RozOpeLpRz).HasColumnName("ROZ_OpeLpRZ");
            entity.Property(e => e.RozOpeNumerRl).HasColumnName("ROZ_OpeNumerRL");
            entity.Property(e => e.RozOpeNumerRz).HasColumnName("ROZ_OpeNumerRZ");
            entity.Property(e => e.RozOpeTypRl).HasColumnName("ROZ_OpeTypRL");
            entity.Property(e => e.RozOpeTypRz).HasColumnName("ROZ_OpeTypRZ");
            entity.Property(e => e.RozParId).HasColumnName("ROZ_ParID");
            entity.Property(e => e.RozRk)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ROZ_RK");
            entity.Property(e => e.RozRkstrona).HasColumnName("ROZ_RKStrona");
            entity.Property(e => e.RozTrpFirma).HasColumnName("ROZ_TrpFirma");
            entity.Property(e => e.RozTrpLp).HasColumnName("ROZ_TrpLp");
            entity.Property(e => e.RozTrpNumer).HasColumnName("ROZ_TrpNumer");
            entity.Property(e => e.RozTrpTyp).HasColumnName("ROZ_TrpTyp");
            entity.Property(e => e.RozWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ROZ_Waluta");
            entity.Property(e => e.RozWycena).HasColumnName("ROZ_Wycena");
        });

        modelBuilder.Entity<RptDefinicje2>(entity =>
        {
            entity.HasKey(e => new { e.RpD2RpWid, e.RpD2RpFid, e.RpD2Id }).HasName("RpD2_Primary");

            entity.ToTable("RptDefinicje2", "CDN");

            entity.Property(e => e.RpD2RpWid).HasColumnName("RpD2_RpWId");
            entity.Property(e => e.RpD2RpFid).HasColumnName("RpD2_RpFId");
            entity.Property(e => e.RpD2Id).HasColumnName("RpD2_Id");
            entity.Property(e => e.RpD2Definicja)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("RpD2_Definicja");

            entity.HasOne(d => d.RptFormaty2).WithMany(p => p.RptDefinicje2s)
                .HasForeignKey(d => new { d.RpD2RpWid, d.RpD2RpFid })
                .HasConstraintName("FK_RpD2Primary");
        });

        modelBuilder.Entity<RptDomyslne2>(entity =>
        {
            entity.HasKey(e => new { e.RpY2ProcId, e.RpY2KontekstId, e.RpY2Rodzaj, e.RpY2TypDomyslnosci }).HasName("RpY2_Primary");

            entity.ToTable("RptDomyslne2", "CDN");

            entity.Property(e => e.RpY2ProcId).HasColumnName("RpY2_ProcID");
            entity.Property(e => e.RpY2KontekstId).HasColumnName("RpY2_KontekstID");
            entity.Property(e => e.RpY2Rodzaj).HasColumnName("RpY2_Rodzaj");
            entity.Property(e => e.RpY2TypDomyslnosci).HasColumnName("RpY2_TypDomyslnosci");
            entity.Property(e => e.RpY2RpFid)
                .HasDefaultValue(0)
                .HasColumnName("RpY2_RpFId");
            entity.Property(e => e.RpY2RpWid)
                .HasDefaultValue(0)
                .HasColumnName("RpY2_RpWId");
        });

        modelBuilder.Entity<RptDomyslneU>(entity =>
        {
            entity.HasKey(e => new { e.RpYuProcId, e.RpYuKontekstId, e.RpYuRodzaj, e.RpYuTypDomyslnosci }).HasName("RpYU_Primary");

            entity.ToTable("RptDomyslneU", "CDN");

            entity.Property(e => e.RpYuProcId).HasColumnName("RpYU_ProcID");
            entity.Property(e => e.RpYuKontekstId).HasColumnName("RpYU_KontekstID");
            entity.Property(e => e.RpYuRodzaj).HasColumnName("RpYU_Rodzaj");
            entity.Property(e => e.RpYuTypDomyslnosci).HasColumnName("RpYU_TypDomyslnosci");
            entity.Property(e => e.RpYuRpFid)
                .HasDefaultValue(0)
                .HasColumnName("RpYU_RpFId");
            entity.Property(e => e.RpYuRpWid)
                .HasDefaultValue(0)
                .HasColumnName("RpYU_RpWId");
        });

        modelBuilder.Entity<RptFormaty2>(entity =>
        {
            entity.HasKey(e => new { e.RpF2RpWid, e.RpF2Id }).HasName("RpF2_Primary");

            entity.ToTable("RptFormaty2", "CDN");

            entity.HasIndex(e => new { e.RpF2RpWid, e.RpF2Lp }, "RpF2Lp").IsUnique();

            entity.HasIndex(e => new { e.RpF2RpWid, e.RpF2Nazwa }, "RpF2Nazwa").IsUnique();

            entity.Property(e => e.RpF2RpWid).HasColumnName("RpF2_RpWId");
            entity.Property(e => e.RpF2Id).HasColumnName("RpF2_Id");
            entity.Property(e => e.RpF2Autor)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_Autor");
            entity.Property(e => e.RpF2DataMod)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_DataMod");
            entity.Property(e => e.RpF2DataUtw)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_DataUtw");
            entity.Property(e => e.RpF2DomyslnyB2b)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_DomyslnyB2B");
            entity.Property(e => e.RpF2DomyslnyMes)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_DomyslnyMES");
            entity.Property(e => e.RpF2DostepnyPrzezSerwer)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_DostepnyPrzezSerwer");
            entity.Property(e => e.RpF2DrukarkaDomyslna)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_DrukarkaDomyslna");
            entity.Property(e => e.RpF2DrukarkaDomyslnaSerwerowa)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_DrukarkaDomyslnaSerwerowa");
            entity.Property(e => e.RpF2DrukujDomyslniePrzezSerwer)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_DrukujDomyslniePrzezSerwer");
            entity.Property(e => e.RpF2Eco)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_Eco");
            entity.Property(e => e.RpF2Haslo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_Haslo");
            entity.Property(e => e.RpF2HasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_Haslo_chk");
            entity.Property(e => e.RpF2IgnorujFiltrApp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_IgnorujFiltrApp");
            entity.Property(e => e.RpF2IgnorujKluczApp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_IgnorujKluczApp");
            entity.Property(e => e.RpF2Kolejka)
                .HasDefaultValue((short)0)
                .HasColumnName("RpF2_Kolejka");
            entity.Property(e => e.RpF2Kompresja)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_Kompresja");
            entity.Property(e => e.RpF2KopiaElektroniczna)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_KopiaElektroniczna");
            entity.Property(e => e.RpF2Kopie)
                .HasDefaultValue(1)
                .HasColumnName("RpF2_Kopie");
            entity.Property(e => e.RpF2Lp)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_Lp");
            entity.Property(e => e.RpF2MarginesG)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_MarginesG");
            entity.Property(e => e.RpF2MarginesL)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_MarginesL");
            entity.Property(e => e.RpF2NaEkran)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_NaEkran");
            entity.Property(e => e.RpF2Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_Nazwa");
            entity.Property(e => e.RpF2NrWersji)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_NrWersji");
            entity.Property(e => e.RpF2Opis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpF2_Opis");
            entity.Property(e => e.RpF2PobierzUstawieniaStanowiska)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_PobierzUstawieniaStanowiska");
            entity.Property(e => e.RpF2RozmiarDefinicji)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_RozmiarDefinicji");
            entity.Property(e => e.RpF2Skrypt)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("RpF2_Skrypt");
            entity.Property(e => e.RpF2SortujKopie)
                .HasDefaultValue((byte)1)
                .HasColumnName("RpF2_SortujKopie");
            entity.Property(e => e.RpF2Strony)
                .HasDefaultValue(0)
                .HasColumnName("RpF2_Strony");
            entity.Property(e => e.RpF2Typ)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_Typ");
            entity.Property(e => e.RpF2UkryjDefinicje)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_UkryjDefinicje");
            entity.Property(e => e.RpF2ZapisujHistorie)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpF2_ZapisujHistorie");
            entity.Property(e => e.RpF2Zaznaczenia)
                .HasDefaultValue((short)0)
                .HasColumnName("RpF2_Zaznaczenia");

            entity.HasOne(d => d.RpF2RpW).WithMany(p => p.RptFormaty2s)
                .HasForeignKey(d => d.RpF2RpWid)
                .HasConstraintName("FK_RpF2Primary");
        });

        modelBuilder.Entity<RptFormatyU>(entity =>
        {
            entity.HasKey(e => new { e.RpFuRpWid, e.RpFuId }).HasName("RpFU_Primary");

            entity.ToTable("RptFormatyU", "CDN");

            entity.Property(e => e.RpFuRpWid).HasColumnName("RpFU_RpWId");
            entity.Property(e => e.RpFuId).HasColumnName("RpFU_Id");
            entity.Property(e => e.RpFuDomyslnyB2b)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_domyslnyB2B");
            entity.Property(e => e.RpFuDomyslnyMes)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_domyslnyMES");
            entity.Property(e => e.RpFuDostepnyPrzezSerwer)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_DostepnyPrzezSerwer");
            entity.Property(e => e.RpFuDrukarkaDomyslna)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpFU_DrukarkaDomyslna");
            entity.Property(e => e.RpFuDrukarkaDomyslnaSerwerowa)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpFU_DrukarkaDomyslnaSerwerowa");
            entity.Property(e => e.RpFuDrukujDomyslniePrzezSerwer)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_DrukujDomyslniePrzezSerwer");
            entity.Property(e => e.RpFuEco)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_Eco");
            entity.Property(e => e.RpFuIgnorujFiltrApp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_IgnorujFiltrApp");
            entity.Property(e => e.RpFuIgnorujKluczApp)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_IgnorujKluczApp");
            entity.Property(e => e.RpFuKopiaElektroniczna)
                .HasDefaultValue(0)
                .HasColumnName("RpFU_KopiaElektroniczna");
            entity.Property(e => e.RpFuKopie)
                .HasDefaultValue(1)
                .HasColumnName("RpFU_Kopie");
            entity.Property(e => e.RpFuMarginesG)
                .HasDefaultValue(0)
                .HasColumnName("RpFU_MarginesG");
            entity.Property(e => e.RpFuMarginesL)
                .HasDefaultValue(0)
                .HasColumnName("RpFU_MarginesL");
            entity.Property(e => e.RpFuNaEkran)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_NaEkran");
            entity.Property(e => e.RpFuPobierzUstawieniaStanowiska)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_PobierzUstawieniaStanowiska");
            entity.Property(e => e.RpFuSortujKopie)
                .HasDefaultValue((byte)1)
                .HasColumnName("RpFU_SortujKopie");
            entity.Property(e => e.RpFuStrony)
                .HasDefaultValue(0)
                .HasColumnName("RpFU_Strony");
            entity.Property(e => e.RpFuZapisujHistorie)
                .HasDefaultValue((byte)0)
                .HasColumnName("RpFU_ZapisujHistorie");
        });

        modelBuilder.Entity<RptKolejka2>(entity =>
        {
            entity.HasKey(e => new { e.RpQ2Guid, e.RpQ2RekordLp, e.RpQ2KopiaLp }).HasName("RpQ2_Primary");

            entity.ToTable("RptKolejka2", "CDN");

            entity.Property(e => e.RpQ2Guid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_GUID");
            entity.Property(e => e.RpQ2RekordLp).HasColumnName("RpQ2_RekordLp");
            entity.Property(e => e.RpQ2KopiaLp).HasColumnName("RpQ2_KopiaLp");
            entity.Property(e => e.RpQ2Pole1)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole1");
            entity.Property(e => e.RpQ2Pole10)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole10");
            entity.Property(e => e.RpQ2Pole11)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole11");
            entity.Property(e => e.RpQ2Pole12)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole12");
            entity.Property(e => e.RpQ2Pole13)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole13");
            entity.Property(e => e.RpQ2Pole14)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole14");
            entity.Property(e => e.RpQ2Pole15)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole15");
            entity.Property(e => e.RpQ2Pole16)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole16");
            entity.Property(e => e.RpQ2Pole17)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole17");
            entity.Property(e => e.RpQ2Pole18)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole18");
            entity.Property(e => e.RpQ2Pole19)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole19");
            entity.Property(e => e.RpQ2Pole2)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole2");
            entity.Property(e => e.RpQ2Pole20)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole20");
            entity.Property(e => e.RpQ2Pole21)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole21");
            entity.Property(e => e.RpQ2Pole22)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole22");
            entity.Property(e => e.RpQ2Pole23)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole23");
            entity.Property(e => e.RpQ2Pole24)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole24");
            entity.Property(e => e.RpQ2Pole25)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole25");
            entity.Property(e => e.RpQ2Pole26)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole26");
            entity.Property(e => e.RpQ2Pole3)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole3");
            entity.Property(e => e.RpQ2Pole4)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole4");
            entity.Property(e => e.RpQ2Pole5)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole5");
            entity.Property(e => e.RpQ2Pole6)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole6");
            entity.Property(e => e.RpQ2Pole7)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole7");
            entity.Property(e => e.RpQ2Pole8)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole8");
            entity.Property(e => e.RpQ2Pole9)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpQ2_Pole9");
        });

        modelBuilder.Entity<RptMapa2>(entity =>
        {
            entity.HasKey(e => new { e.RpM2ProcId, e.RpM2KontekstId, e.RpM2RpWid }).HasName("RpM2_Primary");

            entity.ToTable("RptMapa2", "CDN");

            entity.HasIndex(e => new { e.RpM2ProcId, e.RpM2KontekstId, e.RpM2Lp }, "RpM2Lp").IsUnique();

            entity.HasIndex(e => new { e.RpM2RpWid, e.RpM2ProcId, e.RpM2KontekstId }, "RpM2RpW").IsUnique();

            entity.Property(e => e.RpM2ProcId).HasColumnName("RpM2_ProcID");
            entity.Property(e => e.RpM2KontekstId).HasColumnName("RpM2_KontekstId");
            entity.Property(e => e.RpM2RpWid).HasColumnName("RpM2_RpWId");
            entity.Property(e => e.RpM2Lp)
                .HasDefaultValue(0)
                .HasColumnName("RpM2_Lp");
        });

        modelBuilder.Entity<RptParametry2>(entity =>
        {
            entity.HasKey(e => new { e.RpP2RpWid, e.RpP2RpFid, e.RpP2Id }).HasName("RpP2_Primary");

            entity.ToTable("RptParametry2", "CDN");

            entity.Property(e => e.RpP2RpWid).HasColumnName("RpP2_RpWId");
            entity.Property(e => e.RpP2RpFid).HasColumnName("RpP2_RpFId");
            entity.Property(e => e.RpP2Id).HasColumnName("RpP2_Id");
            entity.Property(e => e.RpP2Parametry)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("RpP2_Parametry");

            entity.HasOne(d => d.RptFormaty2).WithMany(p => p.RptParametry2s)
                .HasForeignKey(d => new { d.RpP2RpWid, d.RpP2RpFid })
                .HasConstraintName("FK_RpP2Primary");
        });

        modelBuilder.Entity<RptWydruki2>(entity =>
        {
            entity.HasKey(e => e.RpW2Id).HasName("RpW2_Primary");

            entity.ToTable("RptWydruki2", "CDN");

            entity.HasIndex(e => new { e.RpW2Rodzaj, e.RpW2Nazwa, e.RpW2Id }, "RpW2Nazwa").IsUnique();

            entity.Property(e => e.RpW2Id).HasColumnName("RpW2_Id");
            entity.Property(e => e.RpW2KopiaElektroniczna)
                .HasDefaultValue(0)
                .HasColumnName("RpW2_KopiaElektroniczna");
            entity.Property(e => e.RpW2Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpW2_Nazwa");
            entity.Property(e => e.RpW2Opis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpW2_Opis");
            entity.Property(e => e.RpW2Rodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("RpW2_Rodzaj");
            entity.Property(e => e.RpW2Warunek)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpW2_Warunek");
            entity.Property(e => e.RpW2WarunekAuto)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpW2_WarunekAuto");
        });

        modelBuilder.Entity<RptWydrukiU>(entity =>
        {
            entity.HasKey(e => e.RpWuId).HasName("RpWU_Primary");

            entity.ToTable("RptWydrukiU", "CDN");

            entity.Property(e => e.RpWuId).HasColumnName("RpWU_Id");
            entity.Property(e => e.RpWuKopiaElektroniczna)
                .HasDefaultValue(0)
                .HasColumnName("RpWU_KopiaElektroniczna");
            entity.Property(e => e.RpWuWarunek)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpWU_Warunek");
            entity.Property(e => e.RpWuWarunekAuto)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpWU_WarunekAuto");
        });

        modelBuilder.Entity<RptZaznaczenia2>(entity =>
        {
            entity.HasKey(e => new { e.RpZ2Guid, e.RpZ2RekordLp, e.RpZ2KopiaLp }).HasName("RpZ2_Primary");

            entity.ToTable("RptZaznaczenia2", "CDN");

            entity.Property(e => e.RpZ2Guid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RpZ2_GUID");
            entity.Property(e => e.RpZ2RekordLp).HasColumnName("RpZ2_RekordLp");
            entity.Property(e => e.RpZ2KopiaLp).HasColumnName("RpZ2_KopiaLp");
            entity.Property(e => e.RpZ2Gidfirma)
                .HasDefaultValue(0)
                .HasColumnName("RpZ2_GIDFirma");
            entity.Property(e => e.RpZ2Gidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("RpZ2_GIDLp");
            entity.Property(e => e.RpZ2Gidnumer)
                .HasDefaultValue(0)
                .HasColumnName("RpZ2_GIDNumer");
            entity.Property(e => e.RpZ2Gidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("RpZ2_GIDTyp");
        });

        modelBuilder.Entity<SFktAtrybuty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("S_FKT_Atrybuty");

            entity.HasIndex(e => e.AtrObjOrgId, "IX__S_Fkt_Atrybuty__Atr_ObjOrgID");

            entity.HasIndex(e => e.AtrWymTyp, "IX__S_Fkt_Atrybuty__Atr_WymTyp");

            entity.Property(e => e.AtrId).HasColumnName("ATR_ID");
            entity.Property(e => e.AtrKierunek).HasColumnName("ATR_Kierunek");
            entity.Property(e => e.AtrObjLp).HasColumnName("ATR_ObjLp");
            entity.Property(e => e.AtrObjNumer).HasColumnName("ATR_ObjNumer");
            entity.Property(e => e.AtrObjOrgId)
                .HasMaxLength(154)
                .IsUnicode(false)
                .HasColumnName("ATR_ObjOrgID");
            entity.Property(e => e.AtrObjSubLp).HasColumnName("ATR_ObjSubLp");
            entity.Property(e => e.AtrObjTyp).HasColumnName("ATR_ObjTyp");
            entity.Property(e => e.AtrOrgAtrId).HasColumnName("ATR_OrgAtrID");
            entity.Property(e => e.AtrOrgId).HasColumnName("ATR_OrgID");
            entity.Property(e => e.AtrOrgWymId).HasColumnName("ATR_OrgWymID");
            entity.Property(e => e.AtrTypKwoty).HasColumnName("ATR_TypKwoty");
            entity.Property(e => e.AtrWymFirma).HasColumnName("ATR_WymFirma");
            entity.Property(e => e.AtrWymTyp).HasColumnName("ATR_WymTyp");
            entity.Property(e => e.WsadInsertId).HasColumnName("Wsad_InsertID");
        });

        modelBuilder.Entity<SPomAtrybuty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("S_Pom_Atrybuty");

            entity.Property(e => e.PomAtrAktywny).HasColumnName("PomATR_Aktywny");
            entity.Property(e => e.PomAtrAtkId).HasColumnName("PomATR_AtkID");
            entity.Property(e => e.PomAtrObjLp).HasColumnName("PomATR_ObjLp");
            entity.Property(e => e.PomAtrObjNumer).HasColumnName("PomATR_ObjNumer");
            entity.Property(e => e.PomAtrObjOrgId)
                .HasMaxLength(154)
                .IsUnicode(false)
                .HasColumnName("PomATR_ObjOrgID");
            entity.Property(e => e.PomAtrObjSubLp).HasColumnName("PomATR_ObjSubLp");
            entity.Property(e => e.PomAtrObjTyp).HasColumnName("PomATR_ObjTyp");
            entity.Property(e => e.PomAtrTypWymiaru).HasColumnName("PomATR_TypWymiaru");
            entity.Property(e => e.PomAtrWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("PomATR_Wartosc");
            entity.Property(e => e.PomAtrWymFirma).HasColumnName("PomATR_WymFirma");
            entity.Property(e => e.PomAtrWymTyp).HasColumnName("PomATR_WymTyp");
            entity.Property(e => e.WsadInsertId).HasColumnName("Wsad_InsertID");
        });

        modelBuilder.Entity<SPomFktCennik>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("S_POM_FKT_CENNIK");

            entity.Property(e => e.Rn).HasColumnName("RN");
            entity.Property(e => e.Tcnid).HasColumnName("TCNID");
            entity.Property(e => e.Waluta)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Wartosc).HasColumnType("decimal(20, 4)");
        });

        modelBuilder.Entity<SPomOpisyAnalityczne>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("S_Pom_OpisyAnalityczne");

            entity.Property(e => e.PomWymAktywny).HasColumnName("PomWYM_Aktywny");
            entity.Property(e => e.PomWymKierunek).HasColumnName("PomWYM_Kierunek");
            entity.Property(e => e.PomWymNazwa).HasColumnName("PomWym_Nazwa");
            entity.Property(e => e.PomWymObjGidBudzet).HasColumnName("PomWYM_ObjGidBudzet");
            entity.Property(e => e.PomWymObjGidDokLp).HasColumnName("PomWYM_ObjGidDokLp");
            entity.Property(e => e.PomWymObjGidLp).HasColumnName("PomWYM_ObjGidLp");
            entity.Property(e => e.PomWymObjGidNumer).HasColumnName("PomWYM_ObjGidNumer");
            entity.Property(e => e.PomWymObjGidTyp).HasColumnName("PomWYM_ObjGidTyp");
            entity.Property(e => e.PomWymObjOrgId)
                .HasMaxLength(92)
                .IsUnicode(false)
                .HasColumnName("PomWYM_ObjOrgID");
            entity.Property(e => e.PomWymProcent)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PomWYM_Procent");
            entity.Property(e => e.PomWymTypKwoty).HasColumnName("PomWYM_TypKwoty");
            entity.Property(e => e.PomWymTypWymiaru).HasColumnName("PomWYM_TypWymiaru");
            entity.Property(e => e.PomWymWartosc)
                .HasColumnType("decimal(28, 10)")
                .HasColumnName("PomWYM_Wartosc");
            entity.Property(e => e.PomWymWymCentrumOrgId)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PomWym_WymCentrumOrgID");
            entity.Property(e => e.PomWymWymFirma).HasColumnName("PomWYM_WymFirma");
            entity.Property(e => e.PomWymWymKategorieFinansoweOrgId)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PomWym_WymKategorieFinansoweOrgID");
            entity.Property(e => e.PomWymWymKontrahentDocelowyOrgId)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PomWym_WymKontrahentDocelowyOrgID");
            entity.Property(e => e.PomWymWymLokalizacjaOrgId)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PomWym_WymLokalizacjaOrgID");
            entity.Property(e => e.PomWymWymOrgId)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PomWYM_WymOrgID");
            entity.Property(e => e.PomWymWymProjektOrgId)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PomWym_WymProjektOrgID");
        });

        modelBuilder.Entity<SaEkwoty>(entity =>
        {
            entity.HasKey(e => new { e.SeKGidnumer, e.SeKGidlp, e.SeKSubGidlp }).HasName("SeK_Primary");

            entity.ToTable("SaEKwoty", "CDN");

            entity.HasIndex(e => new { e.SeKRodzaj, e.SeKGidtyp, e.SeKGidnumer, e.SeKGidlp, e.SeKKcid }, "SeKRodzaj").IsUnique();

            entity.Property(e => e.SeKGidnumer).HasColumnName("SeK_GIDNumer");
            entity.Property(e => e.SeKGidlp).HasColumnName("SeK_GIDLp");
            entity.Property(e => e.SeKSubGidlp).HasColumnName("SeK_SubGIDLp");
            entity.Property(e => e.SeKAkcyza)
                .HasDefaultValue((short)0)
                .HasColumnName("SeK_Akcyza");
            entity.Property(e => e.SeKClo)
                .HasDefaultValue((short)0)
                .HasColumnName("SeK_Clo");
            entity.Property(e => e.SeKFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SeK_FlagaVat");
            entity.Property(e => e.SeKGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SeK_GIDFirma");
            entity.Property(e => e.SeKGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SeK_GIDTyp");
            entity.Property(e => e.SeKGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SeK_GrupaPod");
            entity.Property(e => e.SeKKcid)
                .HasDefaultValue(0)
                .HasColumnName("SeK_KCId");
            entity.Property(e => e.SeKKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SeK_KrajPoch");
            entity.Property(e => e.SeKKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SeK_Kwota");
            entity.Property(e => e.SeKNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SeK_Nazwa");
            entity.Property(e => e.SeKOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SeK_Opis");
            entity.Property(e => e.SeKPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SeK_PCN");
            entity.Property(e => e.SeKPlatnosci)
                .HasDefaultValue((short)0)
                .HasColumnName("SeK_Platnosci");
            entity.Property(e => e.SeKPomin)
                .HasDefaultValue((byte)0)
                .HasColumnName("SeK_Pomin");
            entity.Property(e => e.SeKRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("SeK_Rodzaj");
            entity.Property(e => e.SeKStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SeK_StawkaPod");
            entity.Property(e => e.SeKTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SeK_Typ");
            entity.Property(e => e.SeKVat)
                .HasDefaultValue((short)0)
                .HasColumnName("SeK_Vat");
            entity.Property(e => e.SeKWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SeK_Waluta");
            entity.Property(e => e.SeKZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SeK_Zrodlowa");
        });

        modelBuilder.Entity<SadElem>(entity =>
        {
            entity.HasKey(e => new { e.SaEGidnumer, e.SaEGidlp }).HasName("SaE_Primary");

            entity.ToTable("SadElem", "CDN", tb =>
                {
                    tb.HasTrigger("SadElem_DeleteHandler");
                    tb.HasTrigger("SadElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.SaEImpNumer, e.SaEImpLp, e.SaEGidtyp }, "SaEImp");

            entity.HasIndex(e => new { e.SaETwrNumer, e.SaETstamp }, "SaETowar");

            entity.HasIndex(e => new { e.SaETwrKod, e.SaEGidnumer, e.SaEGidlp }, "SaETwrKod").IsUnique();

            entity.HasIndex(e => new { e.SaEGidtyp, e.SaETstamp }, "SaETypData");

            entity.HasIndex(e => new { e.SaEGidtyp, e.SaEGidnumer, e.SaEZaEtyp, e.SaEZaEnumer }, "SaEZamowienie");

            entity.Property(e => e.SaEGidnumer).HasColumnName("SaE_GIDNumer");
            entity.Property(e => e.SaEGidlp).HasColumnName("SaE_GIDLp");
            entity.Property(e => e.SaECena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SaE_Cena");
            entity.Property(e => e.SaEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaE_GIDFirma");
            entity.Property(e => e.SaEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_GIDTyp");
            entity.Property(e => e.SaEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SaE_Ilosc");
            entity.Property(e => e.SaEImpFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaE_ImpFirma");
            entity.Property(e => e.SaEImpLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_ImpLp");
            entity.Property(e => e.SaEImpNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaE_ImpNumer");
            entity.Property(e => e.SaEImpTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_ImpTyp");
            entity.Property(e => e.SaEJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_JmFormat");
            entity.Property(e => e.SaEJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_JmFormatZ");
            entity.Property(e => e.SaEJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaE_JmZ");
            entity.Property(e => e.SaEKatDatyOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_KatDatyOP");
            entity.Property(e => e.SaEKosztNetto)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_KosztNetto");
            entity.Property(e => e.SaEKosztVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_KosztVat");
            entity.Property(e => e.SaEKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaE_KrajPoch");
            entity.Property(e => e.SaEObjetosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("SaE_Objetosc");
            entity.Property(e => e.SaEOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaE_Opis");
            entity.Property(e => e.SaEPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaE_PCN");
            entity.Property(e => e.SaEPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_Pozycja");
            entity.Property(e => e.SaEPrecyzjaCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_PrecyzjaCeny");
            entity.Property(e => e.SaEPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("SaE_PrzeliczL");
            entity.Property(e => e.SaEPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("SaE_PrzeliczM");
            entity.Property(e => e.SaETstamp)
                .HasDefaultValue(0)
                .HasColumnName("SaE_TStamp");
            entity.Property(e => e.SaETwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaE_TwrFirma");
            entity.Property(e => e.SaETwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaE_TwrKod");
            entity.Property(e => e.SaETwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_TwrLp");
            entity.Property(e => e.SaETwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaE_TwrNazwa");
            entity.Property(e => e.SaETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaE_TwrNumer");
            entity.Property(e => e.SaETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_TwrTyp");
            entity.Property(e => e.SaETypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_TypJm");
            entity.Property(e => e.SaETypTwr)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaE_TypTwr");
            entity.Property(e => e.SaEWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("SaE_WagaBrutto");
            entity.Property(e => e.SaEWagaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("SaE_WagaNetto");
            entity.Property(e => e.SaEWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaE_WJm");
            entity.Property(e => e.SaEZaEfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaE_ZaEFirma");
            entity.Property(e => e.SaEZaElp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_ZaELp");
            entity.Property(e => e.SaEZaEnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaE_ZaENumer");
            entity.Property(e => e.SaEZaEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaE_ZaETyp");

            entity.HasOne(d => d.SaEGidnumerNavigation).WithMany(p => p.SadElems)
                .HasForeignKey(d => d.SaEGidnumer)
                .HasConstraintName("FK_SaEPrimary");
        });

        modelBuilder.Entity<SadKwoty>(entity =>
        {
            entity.HasKey(e => new { e.SaKGidnumer, e.SaKGidlp }).HasName("SaK_Primary");

            entity.ToTable("SadKwoty", "CDN", tb => tb.HasTrigger("SadKwoty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.SaKNazwa, e.SaKGidtyp, e.SaKGidnumer }, "SaKNazwa").IsUnique();

            entity.HasIndex(e => new { e.SaKRodzaj, e.SaKGidtyp, e.SaKGidnumer }, "SaKRodzaj").IsUnique();

            entity.Property(e => e.SaKGidnumer).HasColumnName("SaK_GIDNumer");
            entity.Property(e => e.SaKGidlp).HasColumnName("SaK_GIDLp");
            entity.Property(e => e.SaKAkcyza)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_Akcyza");
            entity.Property(e => e.SaKClo)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_Clo");
            entity.Property(e => e.SaKGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaK_GIDFirma");
            entity.Property(e => e.SaKGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_GIDTyp");
            entity.Property(e => e.SaKKod)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaK_Kod");
            entity.Property(e => e.SaKKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SaK_Kwota");
            entity.Property(e => e.SaKNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaK_Nazwa");
            entity.Property(e => e.SaKOpis)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaK_Opis");
            entity.Property(e => e.SaKPlatnosci)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_Platnosci");
            entity.Property(e => e.SaKPomin)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaK_Pomin");
            entity.Property(e => e.SaKRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_Rodzaj");
            entity.Property(e => e.SaKTrNfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaK_TrNFirma");
            entity.Property(e => e.SaKTrNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_TrNLp");
            entity.Property(e => e.SaKTrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaK_TrNNumer");
            entity.Property(e => e.SaKTrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_TrNTyp");
            entity.Property(e => e.SaKTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_Typ");
            entity.Property(e => e.SaKVat)
                .HasDefaultValue((short)0)
                .HasColumnName("SaK_Vat");
            entity.Property(e => e.SaKWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaK_Waluta");

            entity.HasOne(d => d.SaKGidnumerNavigation).WithMany(p => p.SadKwoties)
                .HasForeignKey(d => d.SaKGidnumer)
                .HasConstraintName("FK_SaKPrimary");
        });

        modelBuilder.Entity<SadKwotyDef>(entity =>
        {
            entity.HasKey(e => e.SkdId).HasName("SKD_Primary");

            entity.ToTable("SadKwotyDef", "CDN");

            entity.HasIndex(e => e.SkdKod, "SKDKod");

            entity.HasIndex(e => e.SkdNazwa, "SKDNazwa").IsUnique();

            entity.Property(e => e.SkdId).HasColumnName("SKD_ID");
            entity.Property(e => e.SkdAkcyza)
                .HasDefaultValue((short)0)
                .HasColumnName("SKD_Akcyza");
            entity.Property(e => e.SkdClo)
                .HasDefaultValue((short)0)
                .HasColumnName("SKD_Clo");
            entity.Property(e => e.SkdKod)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKD_Kod");
            entity.Property(e => e.SkdNazwa)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKD_Nazwa");
            entity.Property(e => e.SkdPlatnosci)
                .HasDefaultValue((short)0)
                .HasColumnName("SKD_Platnosci");
            entity.Property(e => e.SkdPomin)
                .HasDefaultValue((short)0)
                .HasColumnName("SKD_Pomin");
            entity.Property(e => e.SkdVat)
                .HasDefaultValue((short)0)
                .HasColumnName("SKD_VAT");
            entity.Property(e => e.SkdWaluta)
                .HasDefaultValue((short)0)
                .HasColumnName("SKD_Waluta");
        });

        modelBuilder.Entity<SadNag>(entity =>
        {
            entity.HasKey(e => e.SaNGidnumer).HasName("SaN_Primary");

            entity.ToTable("SadNag", "CDN", tb =>
                {
                    tb.HasTrigger("SadNag_DeleteAtrybutyHist");
                    tb.HasTrigger("SadNag_DeleteHandler");
                    tb.HasTrigger("SadNag_InsertUpdateHandler");
                    tb.HasTrigger("SadNag_SprawdzSesje");
                });

            entity.HasIndex(e => e.SaNAkwNumer, "SaNAkwizytor");

            entity.HasIndex(e => new { e.SaNDstNumer, e.SaNDstTyp }, "SaNDst");

            entity.HasIndex(e => e.SaNKntNumer, "SaNKnt");

            entity.HasIndex(e => new { e.SaNPdmTyp, e.SaNPdmNumer, e.SaNDataWplywu, e.SaNGidtyp, e.SaNGidnumer }, "SaNKontrahent").IsUnique();

            entity.HasIndex(e => e.SaNKnPnumer, "SaNPlatnik");

            entity.HasIndex(e => new { e.SaNSaNtyp, e.SaNRokMiesiac, e.SaNSaNrok, e.SaNSaNmiesiac, e.SaNSaNseria, e.SaNSaNnumer, e.SaNSaNlp }, "SaNRokMiesiac");

            entity.HasIndex(e => new { e.SaNSaCtyp, e.SaNSaCnumer, e.SaNGidtyp, e.SaNGidnumer }, "SaNSADSC").IsUnique();

            entity.HasIndex(e => new { e.SaNStan, e.SaNSaNmiesiac }, "SaNStan");

            entity.HasIndex(e => new { e.SaNSaNtyp, e.SaNSaNrok, e.SaNSaNmiesiac, e.SaNSaNseria, e.SaNSaNnumer, e.SaNSaNlp }, "SaNTransakcja").IsUnique();

            entity.HasIndex(e => new { e.SaNDeklRok, e.SaNDeklMiesiac, e.SaNVatTyp, e.SaNVatRejestr, e.SaNRozliczac }, "SaNVATDeklaracja");

            entity.HasIndex(e => new { e.SaNVatTyp, e.SaNVatRejestr, e.SaNVatRok, e.SaNVatMiesiac, e.SaNVatNumer }, "SaNVATNumeracja");

            entity.HasIndex(e => e.SaNVatTyp, "SaNVATTyp");

            entity.HasIndex(e => e.SaNZwrNumer, "SaNZwrot");

            entity.HasIndex(e => e.SaNDstAdres, "SanDstAdres");

            entity.Property(e => e.SaNGidnumer).HasColumnName("SaN_GIDNumer");
            entity.Property(e => e.SaNAdPnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_AdPNumer");
            entity.Property(e => e.SaNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("SaN_Aktywny");
            entity.Property(e => e.SaNAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_AkwFirma");
            entity.Property(e => e.SaNAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_AkwLp");
            entity.Property(e => e.SaNAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_AkwNumer");
            entity.Property(e => e.SaNAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_AkwTyp");
            entity.Property(e => e.SaNCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_CechaOpis");
            entity.Property(e => e.SaNDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataKsiegowania");
            entity.Property(e => e.SaNDataPo)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataPO");
            entity.Property(e => e.SaNDataPrzyjecia)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataPrzyjecia");
            entity.Property(e => e.SaNDataRoz)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataRoz");
            entity.Property(e => e.SaNDataWpisu)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataWpisu");
            entity.Property(e => e.SaNDataWplywu)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataWplywu");
            entity.Property(e => e.SaNDataWplywuFa)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataWplywuFA");
            entity.Property(e => e.SaNDataZgloszenia)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DataZgloszenia");
            entity.Property(e => e.SaNDeklMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_DeklMiesiac");
            entity.Property(e => e.SaNDeklRok)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_DeklRok");
            entity.Property(e => e.SaNDeklaracja1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_Deklaracja1");
            entity.Property(e => e.SaNDeklaracja2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_Deklaracja2");
            entity.Property(e => e.SaNDokTypJpk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_DokTypJPK");
            entity.Property(e => e.SaNDstAdres)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DstAdres");
            entity.Property(e => e.SaNDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_DstNumer");
            entity.Property(e => e.SaNDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_DstTyp");
            entity.Property(e => e.SaNDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_Dziennik");
            entity.Property(e => e.SaNEmailZwr)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_EmailZwr");
            entity.Property(e => e.SaNExpoNorm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_ExpoNorm");
            entity.Property(e => e.SaNFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_FormaNazwa");
            entity.Property(e => e.SaNFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_FormaNr");
            entity.Property(e => e.SaNFormatkaCyr)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_FormatkaCyr");
            entity.Property(e => e.SaNFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_FrmNumer");
            entity.Property(e => e.SaNFrsId)
                .HasDefaultValue(0)
                .HasColumnName("SaN_FrsID");
            entity.Property(e => e.SaNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_GIDFirma");
            entity.Property(e => e.SaNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_GIDLp");
            entity.Property(e => e.SaNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_GIDTyp");
            entity.Property(e => e.SaNIncotermsKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_IncotermsKraj");
            entity.Property(e => e.SaNIncotermsMiejsce)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_IncotermsMiejsce");
            entity.Property(e => e.SaNIncotermsSymbol)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_IncotermsSymbol");
            entity.Property(e => e.SaNKatDatyOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_KatDatyOP");
            entity.Property(e => e.SaNKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KnAFirma");
            entity.Property(e => e.SaNKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KnALp");
            entity.Property(e => e.SaNKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KnANumer");
            entity.Property(e => e.SaNKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KnATyp");
            entity.Property(e => e.SaNKnAzfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KnAZFirma");
            entity.Property(e => e.SaNKnAzlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KnAZLp");
            entity.Property(e => e.SaNKnAznumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KnAZNumer");
            entity.Property(e => e.SaNKnAztyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KnAZTyp");
            entity.Property(e => e.SaNKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KnPNumer");
            entity.Property(e => e.SaNKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KnPTyp");
            entity.Property(e => e.SaNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KntFirma");
            entity.Property(e => e.SaNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KntLp");
            entity.Property(e => e.SaNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KntNumer");
            entity.Property(e => e.SaNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KntTyp");
            entity.Property(e => e.SaNKntZfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KntZFirma");
            entity.Property(e => e.SaNKntZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KntZLp");
            entity.Property(e => e.SaNKntZnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_KntZNumer");
            entity.Property(e => e.SaNKntZstatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_KntZStatus");
            entity.Property(e => e.SaNKntZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KntZTyp");
            entity.Property(e => e.SaNKodRodzajuTransakcji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_KodRodzajuTransakcji");
            entity.Property(e => e.SaNKodRodzajuTransportu)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_KodRodzajuTransportu");
            entity.Property(e => e.SaNKontener)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_Kontener");
            entity.Property(e => e.SaNKrajWysylki)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_KrajWysylki");
            entity.Property(e => e.SaNKursDlaDostawy)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_KursDlaDostawy");
            entity.Property(e => e.SaNKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("SaN_KursL");
            entity.Property(e => e.SaNKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("SaN_KursM");
            entity.Property(e => e.SaNLiczbaOpakowan)
                .HasDefaultValue(0)
                .HasColumnName("SaN_LiczbaOpakowan");
            entity.Property(e => e.SaNMiejsceZgloszenia)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_MiejsceZgloszenia");
            entity.Property(e => e.SaNNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SaN_Netto");
            entity.Property(e => e.SaNNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_NieKsiegowac");
            entity.Property(e => e.SaNNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_NrKursu");
            entity.Property(e => e.SaNNumerAkt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_NumerAkt");
            entity.Property(e => e.SaNNumerSad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_NumerSAD");
            entity.Property(e => e.SaNNumerWpisu)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_NumerWpisu");
            entity.Property(e => e.SaNObjetosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 3)")
                .HasColumnName("SaN_Objetosc");
            entity.Property(e => e.SaNOdliczeniaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_OdliczeniaVat");
            entity.Property(e => e.SaNOdroczeniePlat)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_OdroczeniePlat");
            entity.Property(e => e.SaNOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeFirmaM");
            entity.Property(e => e.SaNOpeFirmaR)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeFirmaR");
            entity.Property(e => e.SaNOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeFirmaW");
            entity.Property(e => e.SaNOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeFirmaZ");
            entity.Property(e => e.SaNOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeLpM");
            entity.Property(e => e.SaNOpeLpR)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeLpR");
            entity.Property(e => e.SaNOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeLpW");
            entity.Property(e => e.SaNOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeLpZ");
            entity.Property(e => e.SaNOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeNumerM");
            entity.Property(e => e.SaNOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeNumerR");
            entity.Property(e => e.SaNOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeNumerW");
            entity.Property(e => e.SaNOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeNumerZ");
            entity.Property(e => e.SaNOpeNumerZfr)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeNumerZFR");
            entity.Property(e => e.SaNOpeNumerZm)
                .HasDefaultValue(0)
                .HasColumnName("SaN_OpeNumerZM");
            entity.Property(e => e.SaNOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeTypM");
            entity.Property(e => e.SaNOpeTypR)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeTypR");
            entity.Property(e => e.SaNOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeTypW");
            entity.Property(e => e.SaNOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeTypZ");
            entity.Property(e => e.SaNOpeTypZfr)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeTypZFR");
            entity.Property(e => e.SaNOpeTypZm)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_OpeTypZM");
            entity.Property(e => e.SaNOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_Opis");
            entity.Property(e => e.SaNOznaczenieSkladu)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_OznaczenieSkladu");
            entity.Property(e => e.SaNPdmFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_PdmFirma");
            entity.Property(e => e.SaNPdmLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PdmLp");
            entity.Property(e => e.SaNPdmNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_PdmNumer");
            entity.Property(e => e.SaNPdmTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PdmTyp");
            entity.Property(e => e.SaNPodzialPzi)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_PodzialPZI");
            entity.Property(e => e.SaNPominAkcyze)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PominAkcyze");
            entity.Property(e => e.SaNPominClo)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PominClo");
            entity.Property(e => e.SaNPominKosztK)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PominKosztK");
            entity.Property(e => e.SaNPominKosztZ)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PominKosztZ");
            entity.Property(e => e.SaNPoprzDokData)
                .HasDefaultValue(0)
                .HasColumnName("SaN_PoprzDokData");
            entity.Property(e => e.SaNPoprzDokNr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_PoprzDokNr");
            entity.Property(e => e.SaNPrcFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("SaN_PrcFirmaZ");
            entity.Property(e => e.SaNPrcLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PrcLpZ");
            entity.Property(e => e.SaNPrcNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("SaN_PrcNumerZ");
            entity.Property(e => e.SaNPrcTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_PrcTypZ");
            entity.Property(e => e.SaNProcedura)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_Procedura");
            entity.Property(e => e.SaNProceduraUproszcz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_ProceduraUproszcz");
            entity.Property(e => e.SaNRodzajZakupu)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_RodzajZakupu");
            entity.Property(e => e.SaNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("SaN_RokMiesiac");
            entity.Property(e => e.SaNRozliczac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_Rozliczac");
            entity.Property(e => e.SaNRozliczacP)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_RozliczacP");
            entity.Property(e => e.SaNSaCfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_SaCFirma");
            entity.Property(e => e.SaNSaClp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SaCLp");
            entity.Property(e => e.SaNSaCnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_SaCNumer");
            entity.Property(e => e.SaNSaCtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SaCTyp");
            entity.Property(e => e.SaNSaNlp)
                .HasDefaultValue((short)127)
                .HasColumnName("SaN_SaNLp");
            entity.Property(e => e.SaNSaNmiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_SaNMiesiac");
            entity.Property(e => e.SaNSaNnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_SaNNumer");
            entity.Property(e => e.SaNSaNrok)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SaNRok");
            entity.Property(e => e.SaNSaNseria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_SaNSeria");
            entity.Property(e => e.SaNSaNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SaNTyp");
            entity.Property(e => e.SaNScfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_SCFirma");
            entity.Property(e => e.SaNSchFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_SchFirma");
            entity.Property(e => e.SaNSchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SchLp");
            entity.Property(e => e.SaNSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_SchNumer");
            entity.Property(e => e.SaNSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SchTyp");
            entity.Property(e => e.SaNSclp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SCLp");
            entity.Property(e => e.SaNScnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_SCNumer");
            entity.Property(e => e.SaNSctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_SCTyp");
            entity.Property(e => e.SaNStan)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_Stan");
            entity.Property(e => e.SaNStruktura)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_Struktura");
            entity.Property(e => e.SaNSzczegoly)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_Szczegoly");
            entity.Property(e => e.SaNSzczegolyWartosci)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_SzczegolyWartosci");
            entity.Property(e => e.SaNTermin)
                .HasDefaultValue(0)
                .HasColumnName("SaN_Termin");
            entity.Property(e => e.SaNTrGkrajRejSam)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_TrGKrajRejSam");
            entity.Property(e => e.SaNTrGnumRejPrzy)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_TrGNumRejPrzy");
            entity.Property(e => e.SaNTrGnumRejSam)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_TrGNumRejSam");
            entity.Property(e => e.SaNTrPkrajRejSam)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_TrPKrajRejSam");
            entity.Property(e => e.SaNTrPnumRejPrzy)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_TrPNumRejPrzy");
            entity.Property(e => e.SaNTrPnumRejSam)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_TrPNumRejSam");
            entity.Property(e => e.SaNTstampM)
                .HasDefaultValue(0)
                .HasColumnName("SaN_TStampM");
            entity.Property(e => e.SaNTstampU)
                .HasDefaultValue(0)
                .HasColumnName("SaN_TStampU");
            entity.Property(e => e.SaNTstampZfr)
                .HasDefaultValue(0)
                .HasColumnName("SaN_TStampZFR");
            entity.Property(e => e.SaNTstampZm)
                .HasDefaultValue(0)
                .HasColumnName("SaN_TStampZM");
            entity.Property(e => e.SaNTypPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_TypPlatnosci");
            entity.Property(e => e.SaNTypRozbiciaKwot)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_TypRozbiciaKwot");
            entity.Property(e => e.SaNTypSkladu)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_TypSkladu");
            entity.Property(e => e.SaNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_Url");
            entity.Property(e => e.SaNUrzgrFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaN_URZGrFirma");
            entity.Property(e => e.SaNUrzgrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_URZGrLp");
            entity.Property(e => e.SaNUrzgrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_URZGrNumer");
            entity.Property(e => e.SaNUrzgrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_URZGrTyp");
            entity.Property(e => e.SaNVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SaN_VAT");
            entity.Property(e => e.SaNVatDzien)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_VatDzien");
            entity.Property(e => e.SaNVatMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_VatMiesiac");
            entity.Property(e => e.SaNVatNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_VatNumer");
            entity.Property(e => e.SaNVatRejestr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_VatRejestr");
            entity.Property(e => e.SaNVatRok)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_VatRok");
            entity.Property(e => e.SaNVatTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_VatTyp");
            entity.Property(e => e.SaNWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 3)")
                .HasColumnName("SaN_WagaBrutto");
            entity.Property(e => e.SaNWagaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 3)")
                .HasColumnName("SaN_WagaNetto");
            entity.Property(e => e.SaNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_Waluta");
            entity.Property(e => e.SaNWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_WJm");
            entity.Property(e => e.SaNWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_WsDziennik");
            entity.Property(e => e.SaNWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_WsSCHNumer");
            entity.Property(e => e.SaNWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_WsSCHTyp");
            entity.Property(e => e.SaNWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_WsStosujDziennik");
            entity.Property(e => e.SaNWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_WsStosujSchemat");
            entity.Property(e => e.SaNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_Wsk");
            entity.Property(e => e.SaNZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_Zaksiegowano");
            entity.Property(e => e.SaNZatwFormalnoRach)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_ZatwFormalnoRach");
            entity.Property(e => e.SaNZatwMerytorycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_ZatwMerytorycznie");
            entity.Property(e => e.SaNZglaszajacyImieNaz)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaN_ZglaszajacyImieNaz");
            entity.Property(e => e.SaNZrodlo)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaN_Zrodlo");
            entity.Property(e => e.SaNZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaN_ZwrNumer");
            entity.Property(e => e.SaNZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaN_ZwrTyp");
        });

        modelBuilder.Entity<SadSelem>(entity =>
        {
            entity.HasKey(e => new { e.SaSGidnumer, e.SaSGidlp, e.SaSSubGidlp }).HasName("SaS_Primary");

            entity.ToTable("SadSElem", "CDN", tb => tb.HasTrigger("SadSElem_DeleteHandler"));

            entity.HasIndex(e => new { e.SaSCchTyp, e.SaSCchNumer, e.SaSCchLp, e.SaSTstamp }, "SaSCecha");

            entity.HasIndex(e => new { e.SaSDstNumer, e.SaSDstLp }, "SaSDostawa");

            entity.HasIndex(e => new { e.SaSZwrNumer, e.SaSZwrLp, e.SaSSubZwrLp, e.SaSTstamp, e.SaSGidtyp, e.SaSGidnumer, e.SaSGidlp, e.SaSSubGidlp }, "SaSZwrot").IsUnique();

            entity.Property(e => e.SaSGidnumer).HasColumnName("SaS_GIDNumer");
            entity.Property(e => e.SaSGidlp).HasColumnName("SaS_GIDLp");
            entity.Property(e => e.SaSSubGidlp).HasColumnName("SaS_SubGIDLp");
            entity.Property(e => e.SaSCchFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaS_CChFirma");
            entity.Property(e => e.SaSCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_CChLp");
            entity.Property(e => e.SaSCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaS_CChNumer");
            entity.Property(e => e.SaSCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_CChTyp");
            entity.Property(e => e.SaSCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaS_Cecha");
            entity.Property(e => e.SaSDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("SaS_DstFirma");
            entity.Property(e => e.SaSDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_DstLp");
            entity.Property(e => e.SaSDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaS_DstNumer");
            entity.Property(e => e.SaSDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_DstTyp");
            entity.Property(e => e.SaSGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaS_GIDFirma");
            entity.Property(e => e.SaSGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_GIDTyp");
            entity.Property(e => e.SaSIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SaS_Ilosc");
            entity.Property(e => e.SaSKosztKraj)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SaS_KosztKraj");
            entity.Property(e => e.SaSKosztZagr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SaS_KosztZagr");
            entity.Property(e => e.SaSScfirma)
                .HasDefaultValue(0)
                .HasColumnName("SaS_SCFirma");
            entity.Property(e => e.SaSSclp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_SCLp");
            entity.Property(e => e.SaSScnumer)
                .HasDefaultValue(0)
                .HasColumnName("SaS_SCNumer");
            entity.Property(e => e.SaSSctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_SCTyp");
            entity.Property(e => e.SaSSubZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_SubZwrLp");
            entity.Property(e => e.SaSTstamp)
                .HasDefaultValue(0)
                .HasColumnName("SaS_TStamp");
            entity.Property(e => e.SaSWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaS_Waluta");
            entity.Property(e => e.SaSWalutaKosztuKrajowego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaS_WalutaKosztuKrajowego");
            entity.Property(e => e.SaSWalutaKosztuZagranicznego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaS_WalutaKosztuZagranicznego");
            entity.Property(e => e.SaSWartoscDostawy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SaS_WartoscDostawy");
            entity.Property(e => e.SaSZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_ZwrLp");
            entity.Property(e => e.SaSZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaS_ZwrNumer");
            entity.Property(e => e.SaSZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaS_ZwrTyp");

            entity.HasOne(d => d.SadElem).WithMany(p => p.SadSelems)
                .HasForeignKey(d => new { d.SaSGidnumer, d.SaSGidlp })
                .HasConstraintName("FK_SaSPrimary");
        });

        modelBuilder.Entity<SamPrzejazdy>(entity =>
        {
            entity.HasKey(e => e.SaPId).HasName("SaP_Primary");

            entity.ToTable("SamPrzejazdy", "CDN", tb =>
                {
                    tb.HasTrigger("SamPrzejazdy_DeleteHandler");
                    tb.HasTrigger("SamPrzejazdy_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SaPDataWyjazdu, "SaPData");

            entity.HasIndex(e => new { e.SaPDgenumer, e.SaPDgelp }, "SaPKeyDelegacje");

            entity.HasIndex(e => e.SaPKierNumer, "SaPKierowca");

            entity.HasIndex(e => new { e.SaPZrdNumer, e.SaPZrdLp, e.SaPZrdTyp }, "SaPNrZrodlo");

            entity.HasIndex(e => e.SaPRodzajPrzejazdu, "SaPRodzajPrzejazdu");

            entity.HasIndex(e => new { e.SaPSamId, e.SaPDataWyjazdu }, "SaPSamochod");

            entity.Property(e => e.SaPId).HasColumnName("SaP_Id");
            entity.Property(e => e.SaPDataPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("SaP_DataPotwierdzenia");
            entity.Property(e => e.SaPDataPrzyjazdu)
                .HasDefaultValue(0)
                .HasColumnName("SaP_DataPrzyjazdu");
            entity.Property(e => e.SaPDataWyjazdu)
                .HasDefaultValue(0)
                .HasColumnName("SaP_DataWyjazdu");
            entity.Property(e => e.SaPDataZapisu)
                .HasDefaultValue(0)
                .HasColumnName("SaP_DataZapisu");
            entity.Property(e => e.SaPDgelp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaP_DGELp");
            entity.Property(e => e.SaPDgenumer)
                .HasDefaultValue(0)
                .HasColumnName("SaP_DGENumer");
            entity.Property(e => e.SaPKierNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaP_KierNumer");
            entity.Property(e => e.SaPKierTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaP_KierTyp");
            entity.Property(e => e.SaPKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SaP_Kwota");
            entity.Property(e => e.SaPLicznikKon)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("SaP_LicznikKon");
            entity.Property(e => e.SaPLicznikPocz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("SaP_LicznikPocz");
            entity.Property(e => e.SaPNrRej)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaP_NrRej");
            entity.Property(e => e.SaPOdleglosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SaP_Odleglosc");
            entity.Property(e => e.SaPOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaP_OpeNumer");
            entity.Property(e => e.SaPOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("SaP_OpeNumerZ");
            entity.Property(e => e.SaPOpis)
                .HasMaxLength(1025)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaP_Opis");
            entity.Property(e => e.SaPPotwierdzony)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaP_Potwierdzony");
            entity.Property(e => e.SaPPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaP_PrcNumer");
            entity.Property(e => e.SaPPrzejazdNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaP_PrzejazdNumer");
            entity.Property(e => e.SaPPrzejazdRok)
                .HasDefaultValue((short)0)
                .HasColumnName("SaP_PrzejazdRok");
            entity.Property(e => e.SaPPrzyjazdDo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaP_PrzyjazdDo");
            entity.Property(e => e.SaPPrzyjazdGpsdataPobrania)
                .HasDefaultValue(0)
                .HasColumnName("SaP_PrzyjazdGPSDataPobrania");
            entity.Property(e => e.SaPPrzyjazdGpsdl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("SaP_PrzyjazdGPSDl");
            entity.Property(e => e.SaPPrzyjazdGpsgodzinaPobrania)
                .HasDefaultValue(0)
                .HasColumnName("SaP_PrzyjazdGPSGodzinaPobrania");
            entity.Property(e => e.SaPPrzyjazdGpssz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("SaP_PrzyjazdGPSSz");
            entity.Property(e => e.SaPRodzajPrzejazdu)
                .HasDefaultValue(0)
                .HasColumnName("SaP_RodzajPrzejazdu");
            entity.Property(e => e.SaPSamId)
                .HasDefaultValue(0)
                .HasColumnName("SaP_SamId");
            entity.Property(e => e.SaPSrodekTransportu)
                .HasDefaultValue(0)
                .HasColumnName("SaP_SrodekTransportu");
            entity.Property(e => e.SaPTypWydatku)
                .HasDefaultValue(0)
                .HasColumnName("SaP_TypWydatku");
            entity.Property(e => e.SaPWyjazdZ)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaP_WyjazdZ");
            entity.Property(e => e.SaPZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaP_ZrdLp");
            entity.Property(e => e.SaPZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaP_ZrdNumer");
            entity.Property(e => e.SaPZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaP_ZrdTyp");
        });

        modelBuilder.Entity<Samochody>(entity =>
        {
            entity.HasKey(e => e.SaMId).HasName("SaM_Primary");

            entity.ToTable("Samochody", "CDN", tb =>
                {
                    tb.HasTrigger("EP_SyncFramework_XL_Samochody");
                    tb.HasTrigger("Samochody_DeleteHandler");
                    tb.HasTrigger("Samochody_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.SaMKierNumer, e.SaMKierLp }, "SaMKeyKierowca");

            entity.HasIndex(e => e.SaMMarka, "SaMMarka");

            entity.HasIndex(e => e.SaMNrRej, "SaMNrRej").IsUnique();

            entity.HasIndex(e => e.SaMKntNumer, "SaMSpedytorNoType");

            entity.Property(e => e.SaMId).HasColumnName("SaM_Id");
            entity.Property(e => e.SaMCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("SaM_CzasModyfikacji");
            entity.Property(e => e.SaMDataWazBadTech)
                .HasDefaultValue(0)
                .HasColumnName("SaM_DataWazBadTech");
            entity.Property(e => e.SaMDataWazPolisy)
                .HasDefaultValue(0)
                .HasColumnName("SaM_DataWazPolisy");
            entity.Property(e => e.SaMDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SaM_Domyslny");
            entity.Property(e => e.SaMKierLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaM_KierLp");
            entity.Property(e => e.SaMKierNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaM_KierNumer");
            entity.Property(e => e.SaMKierTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaM_KierTyp");
            entity.Property(e => e.SaMKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SaM_KntNumer");
            entity.Property(e => e.SaMKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SaM_KntTyp");
            entity.Property(e => e.SaMKolor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaM_Kolor");
            entity.Property(e => e.SaMLadownosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SaM_Ladownosc");
            entity.Property(e => e.SaMMarka)
                .HasDefaultValue(0)
                .HasColumnName("SaM_Marka");
            entity.Property(e => e.SaMMocSilnika)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SaM_MocSilnika");
            entity.Property(e => e.SaMModel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaM_Model");
            entity.Property(e => e.SaMNrPolisy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaM_NrPolisy");
            entity.Property(e => e.SaMNrRej)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaM_NrRej");
            entity.Property(e => e.SaMObjetosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SaM_Objetosc");
            entity.Property(e => e.SaMOddzialowy)
                .HasDefaultValue((short)0)
                .HasColumnName("SaM_Oddzialowy");
            entity.Property(e => e.SaMOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SaM_Opis");
            entity.Property(e => e.SaMRokProd)
                .HasDefaultValue((short)0)
                .HasColumnName("SaM_RokProd");
        });

        modelBuilder.Entity<SchematDziennik>(entity =>
        {
            entity.HasKey(e => new { e.ScdGidtyp, e.ScdGidnumer, e.ScdGidlp }).HasName("SCD_Primary");

            entity.ToTable("SchematDziennik", "CDN");

            entity.Property(e => e.ScdGidtyp).HasColumnName("SCD_GIDTyp");
            entity.Property(e => e.ScdGidnumer).HasColumnName("SCD_GIDNumer");
            entity.Property(e => e.ScdGidlp).HasColumnName("SCD_GIDLp");
            entity.Property(e => e.ScdDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCD_Dziennik");
            entity.Property(e => e.ScdGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SCD_GIDFirma");
            entity.Property(e => e.ScdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCD_Lp");
            entity.Property(e => e.ScdWarunek)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCD_Warunek");
            entity.Property(e => e.ScdWarunekSymb)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCD_WarunekSymb");

            entity.HasOne(d => d.Schematy).WithMany(p => p.SchematDzienniks)
                .HasForeignKey(d => new { d.ScdGidtyp, d.ScdGidnumer })
                .HasConstraintName("FK_SCDPrimary");
        });

        modelBuilder.Entity<SchematRodzajDaty>(entity =>
        {
            entity.HasKey(e => new { e.ScrGidtyp, e.ScrGidnumer, e.ScrGidlp }).HasName("SCR_Primary");

            entity.ToTable("SchematRodzajDaty", "CDN");

            entity.Property(e => e.ScrGidtyp).HasColumnName("SCR_GIDTyp");
            entity.Property(e => e.ScrGidnumer).HasColumnName("SCR_GIDNumer");
            entity.Property(e => e.ScrGidlp).HasColumnName("SCR_GIDLp");
            entity.Property(e => e.ScrGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SCR_GIDFirma");
            entity.Property(e => e.ScrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCR_Lp");
            entity.Property(e => e.ScrRodzajDaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCR_RodzajDaty");
            entity.Property(e => e.ScrWarunek)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCR_Warunek");
            entity.Property(e => e.ScrWarunekSymb)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCR_WarunekSymb");
            entity.Property(e => e.ScrWarunekTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCR_WarunekTyp");

            entity.HasOne(d => d.Schematy).WithMany(p => p.SchematRodzajDaties)
                .HasForeignKey(d => new { d.ScrGidtyp, d.ScrGidnumer })
                .HasConstraintName("FK_SCRPrimary");
        });

        modelBuilder.Entity<Schematy>(entity =>
        {
            entity.HasKey(e => new { e.SchGidtyp, e.SchGidnumer }).HasName("SCH_Primary");

            entity.ToTable("Schematy", "CDN", tb => tb.HasTrigger("Schematy_DeleteHandler"));

            entity.HasIndex(e => new { e.SchGidtyp, e.SchNazwa }, "SCHNazwa").IsUnique();

            entity.Property(e => e.SchGidtyp).HasColumnName("SCH_GIDTyp");
            entity.Property(e => e.SchGidnumer).HasColumnName("SCH_GIDNumer");
            entity.Property(e => e.SchArchiwalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCH_Archiwalne");
            entity.Property(e => e.SchAtrybuty)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCH_Atrybuty");
            entity.Property(e => e.SchDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCH_Dziennik");
            entity.Property(e => e.SchDziennikSql)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCH_DziennikSQL");
            entity.Property(e => e.SchDziennikTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCH_DziennikTyp");
            entity.Property(e => e.SchGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SCH_GIDFirma");
            entity.Property(e => e.SchGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCH_GIDLp");
            entity.Property(e => e.SchKontrola)
                .HasDefaultValue((short)0)
                .HasColumnName("SCH_Kontrola");
            entity.Property(e => e.SchNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCH_Nazwa");
            entity.Property(e => e.SchOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCH_Opis");
            entity.Property(e => e.SchOpisSchematu)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCH_OpisSchematu");
            entity.Property(e => e.SchRodzajDaty)
                .HasDefaultValue((short)1)
                .HasColumnName("SCH_RodzajDaty");
            entity.Property(e => e.SchRodzajDatySql)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCH_RodzajDatySQL");
            entity.Property(e => e.SchRodzajDatyTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCH_RodzajDatyTyp");
        });

        modelBuilder.Entity<Sczasoby>(entity =>
        {
            entity.HasKey(e => new { e.SzDstNumer, e.SzDstLp }).HasName("SZ_Primary");

            entity.ToTable("SCZasoby", "CDN");

            entity.HasIndex(e => e.SzScnumer, "SZSC");

            entity.HasIndex(e => new { e.SzTwrNumer, e.SzDstTyp, e.SzDstNumer, e.SzDstLp }, "SZTowar").IsUnique();

            entity.Property(e => e.SzDstNumer).HasColumnName("SZ_DstNumer");
            entity.Property(e => e.SzDstLp).HasColumnName("SZ_DstLp");
            entity.Property(e => e.SzDataP)
                .HasDefaultValue(0)
                .HasColumnName("SZ_DataP");
            entity.Property(e => e.SzDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("SZ_DstFirma");
            entity.Property(e => e.SzDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZ_DstTyp");
            entity.Property(e => e.SzIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SZ_Ilosc");
            entity.Property(e => e.SzKosztKraj)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZ_KosztKraj");
            entity.Property(e => e.SzKosztZagr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZ_KosztZagr");
            entity.Property(e => e.SzKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZ_KrajPoch");
            entity.Property(e => e.SzScfirma)
                .HasDefaultValue(0)
                .HasColumnName("SZ_SCFirma");
            entity.Property(e => e.SzSclp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZ_SCLp");
            entity.Property(e => e.SzScnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZ_SCNumer");
            entity.Property(e => e.SzSctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZ_SCTyp");
            entity.Property(e => e.SzTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("SZ_TwrFirma");
            entity.Property(e => e.SzTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZ_TwrLp");
            entity.Property(e => e.SzTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZ_TwrNumer");
            entity.Property(e => e.SzTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZ_TwrTyp");
            entity.Property(e => e.SzWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZ_Waluta");
            entity.Property(e => e.SzWalutaKosztuKrajowego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZ_WalutaKosztuKrajowego");
            entity.Property(e => e.SzWalutaKosztuZagranicznego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZ_WalutaKosztuZagranicznego");
            entity.Property(e => e.SzWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZ_Wartosc");

            entity.HasOne(d => d.SzScnumerNavigation).WithMany(p => p.Sczasobies)
                .HasForeignKey(d => d.SzScnumer)
                .HasConstraintName("FK_SZSC");
        });

        modelBuilder.Entity<SeSkwoty>(entity =>
        {
            entity.HasKey(e => new { e.SkwGidnumer, e.SkwGidlp, e.SkwPcn, e.SkwKrajPoch, e.SkwStawkaCla, e.SkwStawkaAkcyzy, e.SkwGrupaPod, e.SkwStawkaPod }).HasName("SKw_Primary");

            entity.ToTable("SeSKwoty", "CDN");

            entity.HasIndex(e => e.SkwId, "SkwId").IsUnique();

            entity.Property(e => e.SkwGidnumer).HasColumnName("SKw_GIDNumer");
            entity.Property(e => e.SkwGidlp).HasColumnName("SKw_GIDLp");
            entity.Property(e => e.SkwPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKw_PCN");
            entity.Property(e => e.SkwKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKw_KrajPoch");
            entity.Property(e => e.SkwStawkaCla)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SKw_StawkaCla");
            entity.Property(e => e.SkwStawkaAkcyzy)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SKw_StawkaAkcyzy");
            entity.Property(e => e.SkwGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKw_GrupaPod");
            entity.Property(e => e.SkwStawkaPod)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SKw_StawkaPod");
            entity.Property(e => e.SkwFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SKw_FlagaVat");
            entity.Property(e => e.SkwGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SKw_GIDFirma");
            entity.Property(e => e.SkwGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SKw_GIDTyp");
            entity.Property(e => e.SkwId)
                .IsRequired()
                .HasDefaultValue(0)
                .HasColumnName("SKw_Id");
            entity.Property(e => e.SkwIloscJmuzup)
                .HasDefaultValue(0)
                .HasColumnName("SKw_IloscJMUzup");
            entity.Property(e => e.SkwKwotaAkcyzy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SKw_KwotaAkcyzy");
            entity.Property(e => e.SkwKwotaCla)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SKw_KwotaCla");
            entity.Property(e => e.SkwKwotaVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SKw_KwotaVat");
            entity.Property(e => e.SkwMasaNetto)
                .HasDefaultValue(0)
                .HasColumnName("SKw_MasaNetto");
            entity.Property(e => e.SkwOpisTowaru)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKw_OpisTowaru");
            entity.Property(e => e.SkwPodstawaAkcyzy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SKw_PodstawaAkcyzy");
            entity.Property(e => e.SkwPodstawaCla)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SKw_PodstawaCla");
            entity.Property(e => e.SkwPodstawaVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SKw_PodstawaVat");
            entity.Property(e => e.SkwPreferencje)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKw_Preferencje");
            entity.Property(e => e.SkwWartoscPozycji)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SKw_WartoscPozycji");
            entity.Property(e => e.SkwZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SKw_Zrodlowa");

            entity.HasOne(d => d.SkwGidnumerNavigation).WithMany(p => p.SeSkwoties)
                .HasForeignKey(d => d.SkwGidnumer)
                .HasConstraintName("FK_SkwPrimary");
        });

        modelBuilder.Entity<SeSkwotyDod>(entity =>
        {
            entity.HasKey(e => new { e.SkOSeSid, e.SkOLp }).HasName("SkO_Primary");

            entity.ToTable("SeSKwotyDod", "CDN");

            entity.HasIndex(e => new { e.SkORodzaj, e.SkOSeSid }, "SkORodzaj").IsUnique();

            entity.Property(e => e.SkOSeSid).HasColumnName("SkO_SeSId");
            entity.Property(e => e.SkOLp).HasColumnName("SkO_Lp");
            entity.Property(e => e.SkOKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SkO_Kwota");
            entity.Property(e => e.SkOKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SkO_KwotaSys");
            entity.Property(e => e.SkORodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("SkO_Rodzaj");
            entity.Property(e => e.SkOWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SkO_Waluta");
            entity.Property(e => e.SkOWliczanaDo)
                .HasDefaultValue((byte)0)
                .HasColumnName("SkO_WliczanaDo");

            entity.HasOne(d => d.SkOSeS).WithMany(p => p.SeSkwotyDods)
                .HasPrincipalKey(p => p.SkwId)
                .HasForeignKey(d => d.SkOSeSid)
                .HasConstraintName("FK_SkOPrimary");
        });

        modelBuilder.Entity<SeSopakowanium>(entity =>
        {
            entity.HasKey(e => new { e.SopId, e.SopLp }).HasName("SOP_Primary");

            entity.ToTable("SeSOpakowania", "CDN");

            entity.Property(e => e.SopId).HasColumnName("SOP_Id");
            entity.Property(e => e.SopLp).HasColumnName("SOP_Lp");
            entity.Property(e => e.SopIlosc)
                .HasDefaultValue(0)
                .HasColumnName("SOP_Ilosc");
            entity.Property(e => e.SopRodzaj)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SOP_Rodzaj");
            entity.Property(e => e.SopZnaki)
                .HasMaxLength(42)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SOP_Znaki");
        });

        modelBuilder.Entity<SekDokStatusy>(entity =>
        {
            entity.HasKey(e => e.SdsId).HasName("SDS_Primary");

            entity.ToTable("SekDokStatusy", "CDN", tb => tb.HasTrigger("SekDokStatusy_DeleteHandler"));

            entity.HasIndex(e => e.SdsNazwa, "SDSNazwa").IsUnique();

            entity.Property(e => e.SdsId).HasColumnName("SDS_Id");
            entity.Property(e => e.SdsAkcja)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDS_Akcja");
            entity.Property(e => e.SdsArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDS_Archiwalny");
            entity.Property(e => e.SdsEmailTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDS_EmailTemat");
            entity.Property(e => e.SdsEmailTresc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDS_EmailTresc");
            entity.Property(e => e.SdsKomentarz)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDS_Komentarz");
            entity.Property(e => e.SdsKomentarzStatus)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDS_KomentarzStatus");
            entity.Property(e => e.SdsNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDS_Nazwa");
            entity.Property(e => e.SdsOpisAnalit)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDS_OpisAnalit");
            entity.Property(e => e.SdsPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDS_Predefiniowany");
        });

        modelBuilder.Entity<SekDokTypy>(entity =>
        {
            entity.HasKey(e => e.SdtId).HasName("SDT_Primary");

            entity.ToTable("SekDokTypy", "CDN", tb => tb.HasTrigger("SekDokTypy_DeleteHandler"));

            entity.HasIndex(e => e.SdtNazwa, "SDTNazwaDok").IsUnique();

            entity.Property(e => e.SdtId).HasColumnName("SDT_Id");
            entity.Property(e => e.SdtArchiwalny)
                .HasDefaultValue((short)0)
                .HasColumnName("SDT_Archiwalny");
            entity.Property(e => e.SdtNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDT_Nazwa");
            entity.Property(e => e.SdtOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDT_Opis");
            entity.Property(e => e.SdtProcesSpd)
                .HasDefaultValue(0)
                .HasColumnName("SDT_ProcesSPD");
            entity.Property(e => e.SdtProcesSwd)
                .HasDefaultValue(0)
                .HasColumnName("SDT_ProcesSWD");
            entity.Property(e => e.SdtProcesSww)
                .HasDefaultValue(0)
                .HasColumnName("SDT_ProcesSWW");
            entity.Property(e => e.SdtWartoscDom)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDT_WartoscDom");
        });

        modelBuilder.Entity<SekDokumenty>(entity =>
        {
            entity.HasKey(e => e.SddId).HasName("SDD_Primary");

            entity.ToTable("SekDokumenty", "CDN", tb =>
                {
                    tb.HasTrigger("SekDokumenty_DeleteHandler");
                    tb.HasTrigger("SekDokumenty_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SddFrsId, "SDDFrsID");

            entity.HasIndex(e => new { e.SddNadawcaAdrNumer, e.SddNadawcaAdrTyp }, "SDDKntAdres");

            entity.HasIndex(e => new { e.SddKntTyp, e.SddKntNumer }, "SDDKontrahent");

            entity.HasIndex(e => new { e.SddTyp, e.SddOddRok, e.SddOddMiesiac, e.SddOddSeria, e.SddOddNumer }, "SDDNNumer").IsUnique();

            entity.HasIndex(e => e.SddSdtId, "SDDSdtId");

            entity.Property(e => e.SddId).HasColumnName("SDD_Id");
            entity.Property(e => e.SddAktywny)
                .HasDefaultValue(0)
                .HasColumnName("SDD_Aktywny");
            entity.Property(e => e.SddCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("SDD_CzasModyfikacji");
            entity.Property(e => e.SddDokData)
                .HasDefaultValue(0)
                .HasColumnName("SDD_DokData");
            entity.Property(e => e.SddDokDataWplywu)
                .HasDefaultValue(0)
                .HasColumnName("SDD_DokDataWplywu");
            entity.Property(e => e.SddFrsId)
                .HasDefaultValue(0)
                .HasColumnName("SDD_FrsId");
            entity.Property(e => e.SddKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SDD_KntNumer");
            entity.Property(e => e.SddKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SDD_KntTyp");
            entity.Property(e => e.SddKontaktNumer)
                .HasDefaultValue(0)
                .HasColumnName("SDD_KontaktNumer");
            entity.Property(e => e.SddMasa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SDD_Masa");
            entity.Property(e => e.SddNadawcaAdrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SDD_NadawcaAdrNumer");
            entity.Property(e => e.SddNadawcaAdrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SDD_NadawcaAdrTyp");
            entity.Property(e => e.SddNadawcaNumer)
                .HasDefaultValue(0)
                .HasColumnName("SDD_NadawcaNumer");
            entity.Property(e => e.SddNadawcaOsoba)
                .HasDefaultValue(0)
                .HasColumnName("SDD_NadawcaOsoba");
            entity.Property(e => e.SddNadawcaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SDD_NadawcaTyp");
            entity.Property(e => e.SddNumerObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDD_NumerObcy");
            entity.Property(e => e.SddOczekiwanyTermin)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDD_OczekiwanyTermin");
            entity.Property(e => e.SddOddMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDD_OddMiesiac");
            entity.Property(e => e.SddOddNumer)
                .HasDefaultValue(0)
                .HasColumnName("SDD_OddNumer");
            entity.Property(e => e.SddOddRok)
                .HasDefaultValue((short)0)
                .HasColumnName("SDD_OddRok");
            entity.Property(e => e.SddOddSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDD_OddSeria");
            entity.Property(e => e.SddOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDD_Opis");
            entity.Property(e => e.SddOpisDokumentu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDD_OpisDokumentu");
            entity.Property(e => e.SddOplata)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SDD_Oplata");
            entity.Property(e => e.SddPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDD_Priorytet");
            entity.Property(e => e.SddPrzesylkiData)
                .HasDefaultValue(0)
                .HasColumnName("SDD_PrzesylkiData");
            entity.Property(e => e.SddPrzesylkiNumer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDD_PrzesylkiNumer");
            entity.Property(e => e.SddSdtId)
                .HasDefaultValue(0)
                .HasColumnName("SDD_SdtId");
            entity.Property(e => e.SddSlwId)
                .HasDefaultValue(0)
                .HasColumnName("SDD_SlwId");
            entity.Property(e => e.SddTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SDD_Typ");
            entity.Property(e => e.SddUtwData)
                .HasDefaultValue(0)
                .HasColumnName("SDD_UtwData");
            entity.Property(e => e.SddUtwNumer)
                .HasDefaultValue(0)
                .HasColumnName("SDD_UtwNumer");
            entity.Property(e => e.SddUtwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SDD_UtwTyp");
            entity.Property(e => e.SddWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SDD_Wartosc");
            entity.Property(e => e.SddWflId)
                .HasDefaultValue(0)
                .HasColumnName("SDD_WflId");
            entity.Property(e => e.SddZwrotTermin)
                .HasDefaultValue(0)
                .HasColumnName("SDD_ZwrotTermin");
        });

        modelBuilder.Entity<SekMailInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SekMailInfo", "CDN");

            entity.Property(e => e.AdresPotwierdzajacy)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.CzyWysylac)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Haslo)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.MailOd)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.MailOdNazwa)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Port)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.SdsEmailTemat)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SDS_EmailTemat");
            entity.Property(e => e.SdsEmailTresc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("SDS_EmailTresc");
            entity.Property(e => e.SdsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SDS_Id");
            entity.Property(e => e.SdsNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SDS_Nazwa");
            entity.Property(e => e.SerwerSmtp)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Uzytkownik)
                .HasMaxLength(512)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SekOpiekunowieDok>(entity =>
        {
            entity.HasKey(e => e.SodId).HasName("SOD_Primary");

            entity.ToTable("SekOpiekunowieDok", "CDN", tb => tb.HasTrigger("SekOpiekunowieDok_InsertUpdateHandler"));

            entity.HasIndex(e => e.SodSosId, "SODSdsId");

            entity.HasIndex(e => new { e.SodOpiekunGidNumer, e.SodOpiekunGidTyp }, "SoDOpiekun");

            entity.Property(e => e.SodId).HasColumnName("SOD_Id");
            entity.Property(e => e.SodOpiekunGidNumer)
                .HasDefaultValue(0)
                .HasColumnName("SOD_OpiekunGidNumer");
            entity.Property(e => e.SodOpiekunGidTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOD_OpiekunGidTyp");
            entity.Property(e => e.SodSosId)
                .HasDefaultValue(0)
                .HasColumnName("SOD_SosId");

            entity.HasOne(d => d.SodSos).WithMany(p => p.SekOpiekunowieDoks)
                .HasForeignKey(d => d.SodSosId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SODSdsId");
        });

        modelBuilder.Entity<SekStatusyDok>(entity =>
        {
            entity.HasKey(e => e.SosId).HasName("SOS_Primary");

            entity.ToTable("SekStatusyDok", "CDN", tb => tb.HasTrigger("SekStatusyDok_InsertUpdateHandler"));

            entity.HasIndex(e => e.SosSddId, "SOSSddId");

            entity.HasIndex(e => e.SosSdsId, "SOSSdsId");

            entity.Property(e => e.SosId).HasColumnName("SOS_Id");
            entity.Property(e => e.SosDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("SOS_DataUtworzenia");
            entity.Property(e => e.SosLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOS_Lp");
            entity.Property(e => e.SosModyfikowalData)
                .HasDefaultValue(0)
                .HasColumnName("SOS_ModyfikowalData");
            entity.Property(e => e.SosModyfikowalNumer)
                .HasDefaultValue(0)
                .HasColumnName("SOS_ModyfikowalNumer");
            entity.Property(e => e.SosModyfikowalTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOS_ModyfikowalTyp");
            entity.Property(e => e.SosOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SOS_Opis");
            entity.Property(e => e.SosPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("SOS_Priorytet");
            entity.Property(e => e.SosSddId)
                .HasDefaultValue(0)
                .HasColumnName("SOS_SddId");
            entity.Property(e => e.SosSdsId)
                .HasDefaultValue(0)
                .HasColumnName("SOS_SdsId");
            entity.Property(e => e.SosUwagi)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SOS_Uwagi");
            entity.Property(e => e.SosWprowadzilData)
                .HasDefaultValue(0)
                .HasColumnName("SOS_WprowadzilData");
            entity.Property(e => e.SosWprowadzilNumer)
                .HasDefaultValue(0)
                .HasColumnName("SOS_WprowadzilNumer");
            entity.Property(e => e.SosWprowadzilTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOS_WprowadzilTyp");

            entity.HasOne(d => d.SosSdd).WithMany(p => p.SekStatusyDoks)
                .HasForeignKey(d => d.SosSddId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SOSSddId");
        });

        modelBuilder.Entity<SekTypySerie>(entity =>
        {
            entity.HasKey(e => new { e.StsSdtid, e.StsFrsId }).HasName("STS_Primary");

            entity.ToTable("SekTypySerie", "CDN", tb => tb.HasTrigger("SekTypySerie_InsertUpdateHandler"));

            entity.HasIndex(e => e.StsFrsId, "STSFrs");

            entity.Property(e => e.StsSdtid).HasColumnName("STS_SDTId");
            entity.Property(e => e.StsFrsId).HasColumnName("STS_FrsId");
            entity.Property(e => e.StsSeriaSpd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("STS_SeriaSPD");
            entity.Property(e => e.StsSeriaSwd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("STS_SeriaSWD");
            entity.Property(e => e.StsSeriaSww)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("STS_SeriaSWW");

            entity.HasOne(d => d.StsSdt).WithMany(p => p.SekTypySeries)
                .HasForeignKey(d => d.StsSdtid)
                .HasConstraintName("FK_STSPrimary");
        });

        modelBuilder.Entity<Sent>(entity =>
        {
            entity.HasKey(e => e.SnTId).HasName("SnT_Primary");

            entity.ToTable("Sent", "CDN", tb => tb.HasTrigger("Sent_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.SnTRok, e.SnTMiesiac, e.SnTSeria, e.SnTNumer }, "SnTNumer").IsUnique();

            entity.HasIndex(e => e.SnTKnaGidNumer, "SntAdresKnt");

            entity.HasIndex(e => e.SnTFrsId, "SntFrsId");

            entity.HasIndex(e => e.SnTKcnid, "SntKcn");

            entity.HasIndex(e => e.SnTKntGidNumer, "SntKnt");

            entity.Property(e => e.SnTId).HasColumnName("SnT_Id");
            entity.Property(e => e.SnTAdresKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_AdresKodP");
            entity.Property(e => e.SnTAdresKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_AdresKraj");
            entity.Property(e => e.SnTAdresMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_AdresMiasto");
            entity.Property(e => e.SnTAdresUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_AdresUlica");
            entity.Property(e => e.SnTCheckSum)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_CheckSum");
            entity.Property(e => e.SnTDataModyfikacjizSent)
                .HasDefaultValue(0)
                .HasColumnName("SnT_DataModyfikacjizSENT");
            entity.Property(e => e.SnTDataRejestracjizSent)
                .HasDefaultValue(0)
                .HasColumnName("SnT_DataRejestracjizSENT");
            entity.Property(e => e.SnTDataRozpoczeciaPrzewozu)
                .HasDefaultValue(0)
                .HasColumnName("SnT_DataRozpoczeciaPrzewozu");
            entity.Property(e => e.SnTDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("SnT_DataWystawienia");
            entity.Property(e => e.SnTDlugoscGeo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_DlugoscGeo");
            entity.Property(e => e.SnTEmailPrzewoznika)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_EmailPrzewoznika");
            entity.Property(e => e.SnTFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SnT_FlagaVat");
            entity.Property(e => e.SnTFrsId)
                .HasDefaultValue(0)
                .HasColumnName("SnT_FrsId");
            entity.Property(e => e.SnTIleOdebrano)
                .HasDefaultValue(0)
                .HasColumnName("SnT_IleOdebrano");
            entity.Property(e => e.SnTIleWyslano)
                .HasDefaultValue(0)
                .HasColumnName("SnT_IleWyslano");
            entity.Property(e => e.SnTIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SnT_Ilosc");
            entity.Property(e => e.SnTJm)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_JM");
            entity.Property(e => e.SnTKcnid)
                .HasDefaultValue(0)
                .HasColumnName("SnT_KCNId");
            entity.Property(e => e.SnTKluczO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_KluczO");
            entity.Property(e => e.SnTKluczP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_KluczP");
            entity.Property(e => e.SnTKluczW)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_KluczW");
            entity.Property(e => e.SnTKnaGidNumer)
                .HasDefaultValue(0)
                .HasColumnName("SnT_KnaGidNumer");
            entity.Property(e => e.SnTKnaGidTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SnT_KnaGidTyp");
            entity.Property(e => e.SnTKntGidNumer)
                .HasDefaultValue(0)
                .HasColumnName("SnT_KntGidNumer");
            entity.Property(e => e.SnTKntGidTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SnT_KntGidTyp");
            entity.Property(e => e.SnTKorelacja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_Korelacja");
            entity.Property(e => e.SnTMasa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("SnT_Masa");
            entity.Property(e => e.SnTMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SnT_Miesiac");
            entity.Property(e => e.SnTNumer)
                .HasDefaultValue(0)
                .HasColumnName("SnT_Numer");
            entity.Property(e => e.SnTNumerSent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_NumerSent");
            entity.Property(e => e.SnTOpeMgidNumer)
                .HasDefaultValue(0)
                .HasColumnName("SnT_OpeMGidNumer");
            entity.Property(e => e.SnTOpeWgidNumer)
                .HasDefaultValue(0)
                .HasColumnName("SnT_OpeWGidNumer");
            entity.Property(e => e.SnTOpeZgidNumer)
                .HasDefaultValue(0)
                .HasColumnName("SnT_OpeZGidNumer");
            entity.Property(e => e.SnTRodzajTransportu)
                .HasDefaultValue((byte)0)
                .HasColumnName("SnT_RodzajTransportu");
            entity.Property(e => e.SnTRok)
                .HasDefaultValue((short)0)
                .HasColumnName("SnT_Rok");
            entity.Property(e => e.SnTSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_Seria");
            entity.Property(e => e.SnTStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("SnT_Status");
            entity.Property(e => e.SnTStawkaVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SnT_StawkaVat");
            entity.Property(e => e.SnTSzerokoscGeo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_SzerokoscGeo");
            entity.Property(e => e.SnTTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SnT_Typ");
            entity.Property(e => e.SnTUwagi)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_Uwagi");
            entity.Property(e => e.SnTWojewodztwo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_Wojewodztwo");
            entity.Property(e => e.SnTWypEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_WypEmail");
            entity.Property(e => e.SnTWypImie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_WypImie");
            entity.Property(e => e.SnTWypNazwisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnT_WypNazwisko");

            entity.HasOne(d => d.SnTFrs).WithMany(p => p.Sents)
                .HasPrincipalKey(p => p.FrsId)
                .HasForeignKey(d => d.SnTFrsId)
                .HasConstraintName("FK_SntFrsId");
        });

        modelBuilder.Entity<SentElem>(entity =>
        {
            entity.HasKey(e => e.SnEId).HasName("SnE_Primary");

            entity.ToTable("SentElem", "CDN");

            entity.HasIndex(e => new { e.SnESnTid, e.SnEPozycja }, "SnESentNag").IsUnique();

            entity.Property(e => e.SnEId).HasColumnName("SnE_Id");
            entity.Property(e => e.SnEFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SnE_FlagaVat");
            entity.Property(e => e.SnEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SnE_Ilosc");
            entity.Property(e => e.SnEJm)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnE_JM");
            entity.Property(e => e.SnEKcnid)
                .HasDefaultValue(0)
                .HasColumnName("SnE_KCNId");
            entity.Property(e => e.SnEKodOdpadu)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SnE_KodOdpadu");
            entity.Property(e => e.SnEPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("SnE_Pozycja");
            entity.Property(e => e.SnESnTid)
                .HasDefaultValue(0)
                .HasColumnName("SnE_SnTId");
            entity.Property(e => e.SnEStawkaVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SnE_StawkaVat");

            entity.HasOne(d => d.SnESnT).WithMany(p => p.SentElems)
                .HasForeignKey(d => d.SnESnTid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SnESentNag");
        });

        modelBuilder.Entity<SeqTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("seq_table", "CDN");

            entity.Property(e => e.SeqNumer)
                .ValueGeneratedOnAdd()
                .HasColumnName("seq_numer");
        });

        modelBuilder.Entity<Serie>(entity =>
        {
            entity.HasKey(e => e.SerGidnumer).HasName("SER_Primary");

            entity.ToTable("Serie", "CDN", tb => tb.HasTrigger("Serie_DeleteHandler"));

            entity.HasIndex(e => e.SerNazwa, "SerNazwa").IsUnique();

            entity.Property(e => e.SerGidnumer).HasColumnName("SER_GIDNumer");
            entity.Property(e => e.SerCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("SER_CzasModyfikacji");
            entity.Property(e => e.SerGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SER_GIDFirma");
            entity.Property(e => e.SerGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SER_GIDLp");
            entity.Property(e => e.SerGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SER_GIDTyp");
            entity.Property(e => e.SerKorekta)
                .HasDefaultValue((byte)0)
                .HasColumnName("SER_Korekta");
            entity.Property(e => e.SerNazwa)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SER_Nazwa");
            entity.Property(e => e.SerOddzial)
                .HasDefaultValue((byte)0)
                .HasColumnName("SER_Oddzial");
            entity.Property(e => e.SerOpis)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SER_Opis");
            entity.Property(e => e.SerPredefiniowana)
                .HasDefaultValue((short)0)
                .HasColumnName("SER_Predefiniowana");
            entity.Property(e => e.SerRejVatspr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SER_RejVATSpr");
            entity.Property(e => e.SerRejVatzak)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SER_RejVATZak");
            entity.Property(e => e.SerZwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("SER_ZwrFirma");
            entity.Property(e => e.SerZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SER_ZwrLp");
            entity.Property(e => e.SerZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SER_ZwrNumer");
            entity.Property(e => e.SerZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SER_ZwrTyp");
        });

        modelBuilder.Entity<SesDokumenty>(entity =>
        {
            entity.HasKey(e => new { e.SdoId, e.SdoLp }).HasName("SDO_Primary");

            entity.ToTable("SesDokumenty", "CDN");

            entity.Property(e => e.SdoId).HasColumnName("SDO_Id");
            entity.Property(e => e.SdoLp).HasColumnName("SDO_Lp");
            entity.Property(e => e.SdoKategoria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDO_Kategoria");
            entity.Property(e => e.SdoKod)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDO_Kod");
            entity.Property(e => e.SdoNumerDokumentu)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDO_NumerDokumentu");
            entity.Property(e => e.SdoRodzajDokumentu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDO_RodzajDokumentu");
            entity.Property(e => e.SdoTypSad)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SDO_TypSad");
        });

        modelBuilder.Entity<Sesje>(entity =>
        {
            entity.HasKey(e => e.SesSesjaId).HasName("SES_Primary");

            entity.ToTable("Sesje", "CDN", tb =>
                {
                    tb.HasTrigger("Sesje_BlokadaMOSAdmin");
                    tb.HasTrigger("Sesje_BlokadaWMSAdmin");
                    tb.HasTrigger("Sesje_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.SesAktywna, e.SesModul, e.SesOpeIdent, e.SesKomputer, e.SesSesjaId }, "SESSesja").IsUnique();

            entity.Property(e => e.SesSesjaId).HasColumnName("SES_SesjaID");
            entity.Property(e => e.SesAdospid)
                .HasDefaultValue((short)0)
                .HasColumnName("SES_ADOSPID");
            entity.Property(e => e.SesAktywna)
                .HasDefaultValue(1)
                .HasColumnName("SES_Aktywna");
            entity.Property(e => e.SesClarionSpid)
                .HasDefaultValue((short)0)
                .HasColumnName("SES_ClarionSPID");
            entity.Property(e => e.SesFrsId)
                .HasDefaultValue(0)
                .HasColumnName("SES_FrsID");
            entity.Property(e => e.SesInstancja)
                .HasDefaultValue(0)
                .HasColumnName("SES_Instancja");
            entity.Property(e => e.SesJezyk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SES_Jezyk");
            entity.Property(e => e.SesKomputer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SES_Komputer");
            entity.Property(e => e.SesModul)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SES_Modul");
            entity.Property(e => e.SesNrWersji)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SES_NrWersji");
            entity.Property(e => e.SesOpeIdent)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SES_OpeIdent");
            entity.Property(e => e.SesOpePident)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SES_OpePIdent");
            entity.Property(e => e.SesSesjaZew)
                .HasDefaultValue((byte)0)
                .HasColumnName("SES_SesjaZew");
            entity.Property(e => e.SesStart)
                .HasDefaultValue(0)
                .HasColumnName("SES_Start");
            entity.Property(e => e.SesStop)
                .HasDefaultValue(0)
                .HasColumnName("SES_Stop");
        });

        modelBuilder.Entity<Sfnag>(entity =>
        {
            entity.HasKey(e => e.SfnId).HasName("SFN_Primary");

            entity.ToTable("SFNag", "CDN");

            entity.Property(e => e.SfnId).HasColumnName("SFN_Id");
            entity.Property(e => e.SfnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("SFN_Aktywny");
            entity.Property(e => e.SfnDataDo)
                .HasDefaultValue(0)
                .HasColumnName("SFN_DataDo");
            entity.Property(e => e.SfnDataSporzadzenia)
                .HasDefaultValue(0)
                .HasColumnName("SFN_DataSporzadzenia");
            entity.Property(e => e.SfnNazwaFirmy)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFN_NazwaFirmy");
            entity.Property(e => e.SfnNrReferencyjny)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFN_NrReferencyjny");
            entity.Property(e => e.SfnPlikKonfigXml).HasColumnName("SFN_PlikKonfigXml");
            entity.Property(e => e.SfnPlikXml).HasColumnName("SFN_PlikXml");
            entity.Property(e => e.SfnStatus)
                .HasDefaultValue(0)
                .HasColumnName("SFN_Status");
            entity.Property(e => e.SfnTyp)
                .HasDefaultValue(0)
                .HasColumnName("SFN_Typ");
            entity.Property(e => e.SfnUpokod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFN_UPOKod");
            entity.Property(e => e.SfnUpoopis)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFN_UPOOpis");
            entity.Property(e => e.SfnUpoxml).HasColumnName("SFN_UPOXml");
            entity.Property(e => e.SfnWersjaSchemy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFN_WersjaSchemy");
        });

        modelBuilder.Entity<Sfpodpisy>(entity =>
        {
            entity.HasKey(e => e.SfpId).HasName("SFP_Primary");

            entity.ToTable("SFPodpisy", "CDN");

            entity.HasIndex(e => e.SfpSfnid, "SFPSFNId");

            entity.Property(e => e.SfpId).HasColumnName("SFP_Id");
            entity.Property(e => e.SfpNazwa)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFP_Nazwa");
            entity.Property(e => e.SfpOdcisk)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFP_Odcisk");
            entity.Property(e => e.SfpOdmowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("SFP_Odmowa");
            entity.Property(e => e.SfpPodpis)
                .HasDefaultValue((byte)0)
                .HasColumnName("SFP_Podpis");
            entity.Property(e => e.SfpSfnid)
                .HasDefaultValue(0)
                .HasColumnName("SFP_SFNId");

            entity.HasOne(d => d.SfpSfn).WithMany(p => p.Sfpodpisies)
                .HasForeignKey(d => d.SfpSfnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SFPSFNId");
        });

        modelBuilder.Entity<SfslownikiElem>(entity =>
        {
            entity.HasKey(e => e.SfseId).HasName("SFSE_Primary");

            entity.ToTable("SFSlownikiElem", "CDN");

            entity.HasIndex(e => e.SfseGuidId, "SFSEGUIDID");

            entity.HasIndex(e => e.SfseSfsnid, "SFSESFNID");

            entity.Property(e => e.SfseId).HasColumnName("SFSE_ID");
            entity.Property(e => e.SfseGuidId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFSE_GuidID");
            entity.Property(e => e.SfseKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFSE_Kod");
            entity.Property(e => e.SfseNazwa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFSE_Nazwa");
            entity.Property(e => e.SfseParId)
                .HasDefaultValue(0)
                .HasColumnName("SFSE_ParID");
            entity.Property(e => e.SfseSfsnid)
                .HasDefaultValue(0)
                .HasColumnName("SFSE_SFSNID");

            entity.HasOne(d => d.SfseSfsn).WithMany(p => p.SfslownikiElems)
                .HasForeignKey(d => d.SfseSfsnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SFSESFNID");
        });

        modelBuilder.Entity<SfslownikiNag>(entity =>
        {
            entity.HasKey(e => e.SfsnId).HasName("SFSN_Primary");

            entity.ToTable("SFSlownikiNag", "CDN");

            entity.Property(e => e.SfsnId).HasColumnName("SFSN_ID");
            entity.Property(e => e.SfsnJednostka)
                .HasDefaultValue((byte)0)
                .HasColumnName("SFSN_Jednostka");
            entity.Property(e => e.SfsnKodSystemowy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFSN_KodSystemowy");
            entity.Property(e => e.SfsnNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFSN_Nazwa");
            entity.Property(e => e.SfsnWersjaSchemy)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFSN_WersjaSchemy");
            entity.Property(e => e.SfsnWersjaSlownika)
                .HasDefaultValue((short)0)
                .HasColumnName("SFSN_WersjaSlownika");
            entity.Property(e => e.SfsnZestawienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("SFSN_Zestawienie");
        });

        modelBuilder.Entity<SfzalWlasne>(entity =>
        {
            entity.HasKey(e => e.SfzwId).HasName("SFZW_Primary");

            entity.ToTable("SFZalWlasne", "CDN");

            entity.HasIndex(e => e.SfzwSfnid, "SFZWSFNId");

            entity.Property(e => e.SfzwId).HasColumnName("SFZW_Id");
            entity.Property(e => e.SfzwModyfikuje)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFZW_Modyfikuje");
            entity.Property(e => e.SfzwNazwa)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFZW_Nazwa");
            entity.Property(e => e.SfzwOpis)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFZW_Opis");
            entity.Property(e => e.SfzwPlik).HasColumnName("SFZW_Plik");
            entity.Property(e => e.SfzwSfnid)
                .HasDefaultValue(0)
                .HasColumnName("SFZW_SFNId");

            entity.HasOne(d => d.SfzwSfn).WithMany(p => p.SfzalWlasnes)
                .HasForeignKey(d => d.SfzwSfnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SFZWSFNId");
        });

        modelBuilder.Entity<Sfzalaczniki>(entity =>
        {
            entity.HasKey(e => e.SfzId).HasName("SFZ_Primary");

            entity.ToTable("SFZalaczniki", "CDN");

            entity.HasIndex(e => e.SfzSfnid, "SFZSFNId");

            entity.Property(e => e.SfzId).HasColumnName("SFZ_Id");
            entity.Property(e => e.SfzNazwa)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFZ_Nazwa");
            entity.Property(e => e.SfzPlik).HasColumnName("SFZ_Plik");
            entity.Property(e => e.SfzSfnid)
                .HasDefaultValue(0)
                .HasColumnName("SFZ_SFNId");
            entity.Property(e => e.SfzTyp)
                .HasDefaultValue(0)
                .HasColumnName("SFZ_Typ");

            entity.HasOne(d => d.SfzSfn).WithMany(p => p.Sfzalacznikis)
                .HasForeignKey(d => d.SfzSfnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SFZSFNId");
        });

        modelBuilder.Entity<ShippingLogElem>(entity =>
        {
            entity.HasKey(e => e.SleId).HasName("SLE_Primary");

            entity.ToTable("ShippingLogElem", "CDN");

            entity.HasIndex(e => e.SleNid, "SLESLNNID");

            entity.Property(e => e.SleId).HasColumnName("SLE_ID");
            entity.Property(e => e.SleDataKoniec)
                .HasDefaultValue(0)
                .HasColumnName("SLE_DataKoniec");
            entity.Property(e => e.SleDataStart)
                .HasDefaultValue(0)
                .HasColumnName("SLE_DataStart");
            entity.Property(e => e.SleNid)
                .HasDefaultValue(0)
                .HasColumnName("SLE_NID");
            entity.Property(e => e.SleOjciec)
                .HasDefaultValue(0)
                .HasColumnName("SLE_Ojciec");
            entity.Property(e => e.SleOpis)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLE_Opis");
            entity.Property(e => e.SleStatus)
                .HasDefaultValue((short)0)
                .HasColumnName("SLE_Status");
            entity.Property(e => e.SleUslugaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SLE_UslugaTyp");

            entity.HasOne(d => d.SleN).WithMany(p => p.ShippingLogElems)
                .HasForeignKey(d => d.SleNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SLESLNNID");
        });

        modelBuilder.Entity<ShippingLogNag>(entity =>
        {
            entity.HasKey(e => e.SlnId).HasName("SLN_Primary");

            entity.ToTable("ShippingLogNag", "CDN");

            entity.Property(e => e.SlnId).HasColumnName("SLN_ID");
            entity.Property(e => e.SlnDataKoniec)
                .HasDefaultValue(0)
                .HasColumnName("SLN_DataKoniec");
            entity.Property(e => e.SlnDataStart)
                .HasDefaultValue(0)
                .HasColumnName("SLN_DataStart");
            entity.Property(e => e.SlnPoziom)
                .HasDefaultValue(0)
                .HasColumnName("SLN_Poziom");
            entity.Property(e => e.SlnTu)
                .HasDefaultValue((short)0)
                .HasColumnName("SLN_TU");
        });

        modelBuilder.Entity<Sisdefinicje>(entity =>
        {
            entity.HasKey(e => e.SidGidnumer).HasName("SID_Primary");

            entity.ToTable("SISDefinicje", "CDN", tb =>
                {
                    tb.HasTrigger("SISDefinicje_DeleteHandler");
                    tb.HasTrigger("SISDefinicje_Konta_Init");
                });

            entity.HasIndex(e => e.SidNazwa, "SIDNazwa").IsUnique();

            entity.HasIndex(e => new { e.SidStatyp, e.SidStanumer }, "SIDOperator");

            entity.Property(e => e.SidGidnumer).HasColumnName("SID_GIDNumer");
            entity.Property(e => e.SidAlgorytm)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SID_Algorytm");
            entity.Property(e => e.SidArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SID_Archiwalny");
            entity.Property(e => e.SidBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("SID_Bufor");
            entity.Property(e => e.SidDfnid)
                .HasDefaultValue(0)
                .HasColumnName("SID_DFNID");
            entity.Property(e => e.SidDfnkwotaWmr)
                .HasDefaultValue((byte)0)
                .HasColumnName("SID_DFNKwotaWmr");
            entity.Property(e => e.SidGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SID_GIDFirma");
            entity.Property(e => e.SidGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SID_GIDLp");
            entity.Property(e => e.SidGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SID_GIDTyp");
            entity.Property(e => e.SidNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SID_Nazwa");
            entity.Property(e => e.SidOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SID_Opis");
            entity.Property(e => e.SidStafirma)
                .HasDefaultValue(0)
                .HasColumnName("SID_STAFirma");
            entity.Property(e => e.SidStalp)
                .HasDefaultValue((short)0)
                .HasColumnName("SID_STALp");
            entity.Property(e => e.SidStanumer)
                .HasDefaultValue(0)
                .HasColumnName("SID_STANumer");
            entity.Property(e => e.SidStatyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SID_STATyp");
            entity.Property(e => e.SidTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SID_Typ");
        });

        modelBuilder.Entity<SisdefinicjeKontum>(entity =>
        {
            entity.HasKey(e => new { e.SiskSisnumer, e.SiskLp }).HasName("SISK_Primary");

            entity.ToTable("SISDefinicjeKonta", "CDN");

            entity.HasIndex(e => e.SiskKlasaKonta, "SISKKlasaKonta").HasFilter("([SISK_KLASAKONTA]<>'')");

            entity.HasIndex(e => e.SiskKonto, "SISKKonto").HasFilter("([SISK_KONTO]<>'')");

            entity.HasIndex(e => new { e.SiskZknnumer, e.SiskZknpozycja }, "SISKZKNNumer").HasFilter("([SISK_ZKNNUMER]<>(0))");

            entity.Property(e => e.SiskSisnumer).HasColumnName("SISK_SISNumer");
            entity.Property(e => e.SiskLp).HasColumnName("SISK_Lp");
            entity.Property(e => e.SiskKlasaKonta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SISK_KlasaKonta");
            entity.Property(e => e.SiskKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SISK_Konto");
            entity.Property(e => e.SiskZknnumer)
                .HasDefaultValue(0)
                .HasColumnName("SISK_ZKNNumer");
            entity.Property(e => e.SiskZknpozycja)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SISK_ZKNPozycja");

            entity.HasOne(d => d.SiskSisnumerNavigation).WithMany(p => p.SisdefinicjeKonta)
                .HasForeignKey(d => d.SiskSisnumer)
                .HasConstraintName("FK_SISKPrimary");
        });

        modelBuilder.Entity<Siswartosci>(entity =>
        {
            entity.HasKey(e => new { e.SiwGidnumer, e.SiwGidlp }).HasName("SIW_Primary");

            entity.ToTable("SISWartosci", "CDN");

            entity.HasIndex(e => new { e.SiwGidtyp, e.SiwGidnumer, e.SiwDataOd, e.SiwDataDo }, "SIWOkres").IsUnique();

            entity.Property(e => e.SiwGidnumer).HasColumnName("SIW_GIDNumer");
            entity.Property(e => e.SiwGidlp).HasColumnName("SIW_GIDLp");
            entity.Property(e => e.SiwDataDo)
                .HasDefaultValue(0)
                .HasColumnName("SIW_DataDo");
            entity.Property(e => e.SiwDataOd)
                .HasDefaultValue(0)
                .HasColumnName("SIW_DataOd");
            entity.Property(e => e.SiwGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SIW_GIDFirma");
            entity.Property(e => e.SiwGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SIW_GIDTyp");
            entity.Property(e => e.SiwTsobliczenia)
                .HasDefaultValue(0)
                .HasColumnName("SIW_TSObliczenia");
            entity.Property(e => e.SiwWartosc)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SIW_Wartosc");

            entity.HasOne(d => d.SiwGidnumerNavigation).WithMany(p => p.Siswartoscis)
                .HasForeignKey(d => d.SiwGidnumer)
                .HasConstraintName("FK_SIWPrimaryNoType");
        });

        modelBuilder.Entity<Skladniki>(entity =>
        {
            entity.HasKey(e => new { e.ScsGidtyp, e.ScsGidnumer, e.ScsGidlp }).HasName("SCS_Primary");

            entity.ToTable("Skladniki", "CDN");

            entity.Property(e => e.ScsGidtyp).HasColumnName("SCS_GIDTyp");
            entity.Property(e => e.ScsGidnumer).HasColumnName("SCS_GIDNumer");
            entity.Property(e => e.ScsGidlp).HasColumnName("SCS_GIDLp");
            entity.Property(e => e.ScsGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SCS_GIDFirma");
            entity.Property(e => e.ScsKcwyrazenie)
                .HasDefaultValue((short)0)
                .HasColumnName("SCS_KCWyrazenie");
            entity.Property(e => e.ScsKdwyrazenie)
                .HasDefaultValue((short)0)
                .HasColumnName("SCS_KDWyrazenie");
            entity.Property(e => e.ScsKontoCredit)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_KontoCredit");
            entity.Property(e => e.ScsKontoCreditSql)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_KontoCreditSQL");
            entity.Property(e => e.ScsKontoCreditSqledycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_KontoCreditSQLEdycja");
            entity.Property(e => e.ScsKontoDebet)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_KontoDebet");
            entity.Property(e => e.ScsKontoDebetSql)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_KontoDebetSQL");
            entity.Property(e => e.ScsKontoDebetSqledycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_KontoDebetSQLEdycja");
            entity.Property(e => e.ScsKwota)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_Kwota");
            entity.Property(e => e.ScsKwotaSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_KwotaSQL");
            entity.Property(e => e.ScsKwotaSqledycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_KwotaSQLEdycja");
            entity.Property(e => e.ScsKwotaSysSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_KwotaSysSQL");
            entity.Property(e => e.ScsNieaktywna)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_Nieaktywna");
            entity.Property(e => e.ScsOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_Opis");
            entity.Property(e => e.ScsOpisPozycjiSchematu)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_OpisPozycjiSchematu");
            entity.Property(e => e.ScsOpisSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_OpisSQL");
            entity.Property(e => e.ScsOpisSqledycja)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_OpisSQLEdycja");
            entity.Property(e => e.ScsSkladniaWarunkuCw)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_SkladniaWarunkuCW");
            entity.Property(e => e.ScsSumuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_Sumuj");
            entity.Property(e => e.ScsSumujPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_SumujPoz");
            entity.Property(e => e.ScsSumujWg)
                .HasDefaultValue((short)0)
                .HasColumnName("SCS_SumujWg");
            entity.Property(e => e.ScsSymbolKontaCredit)
                .HasDefaultValue(0)
                .HasColumnName("SCS_SymbolKontaCredit");
            entity.Property(e => e.ScsSymbolKontaDebet)
                .HasDefaultValue(0)
                .HasColumnName("SCS_SymbolKontaDebet");
            entity.Property(e => e.ScsTypKwoty)
                .HasDefaultValue((short)0)
                .HasColumnName("SCS_TypKwoty");
            entity.Property(e => e.ScsWarunek)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_Warunek");
            entity.Property(e => e.ScsWarunekSymb)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCS_WarunekSymb");
            entity.Property(e => e.ScsWykonuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_Wykonuj");
            entity.Property(e => e.ScsWykonujOpcja)
                .HasDefaultValue((short)0)
                .HasColumnName("SCS_WykonujOpcja");
            entity.Property(e => e.ScsZalozKontoCredit)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_ZalozKontoCredit");
            entity.Property(e => e.ScsZalozKontoDebet)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCS_ZalozKontoDebet");

            entity.HasOne(d => d.Schematy).WithMany(p => p.Skladnikis)
                .HasForeignKey(d => new { d.ScsGidtyp, d.ScsGidnumer })
                .HasConstraintName("FK_SCSPrimary");
        });

        modelBuilder.Entity<SkladnikiCelne>(entity =>
        {
            entity.HasKey(e => new { e.SkcTwrTyp, e.SkcTwrNumer, e.SkcTwrLp }).HasName("Skc_Primary");

            entity.ToTable("SkladnikiCelne", "CDN");

            entity.HasIndex(e => new { e.SkcKcid, e.SkcTwrTyp, e.SkcTwrNumer }, "SkCTowar").IsUnique();

            entity.Property(e => e.SkcTwrTyp).HasColumnName("Skc_TwrTyp");
            entity.Property(e => e.SkcTwrNumer).HasColumnName("Skc_TwrNumer");
            entity.Property(e => e.SkcTwrLp).HasColumnName("Skc_TwrLp");
            entity.Property(e => e.SkcKcid)
                .HasDefaultValue(0)
                .HasColumnName("Skc_KCID");
            entity.Property(e => e.SkcTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("Skc_TwrFirma");

            entity.HasOne(d => d.SkcKc).WithMany(p => p.SkladnikiCelnes)
                .HasForeignKey(d => d.SkcKcid)
                .HasConstraintName("FK_SkCTowar");

            entity.HasOne(d => d.SkcTwrNumerNavigation).WithMany(p => p.SkladnikiCelnes)
                .HasForeignKey(d => d.SkcTwrNumer)
                .HasConstraintName("FK_SkcPrimaryNoType");
        });

        modelBuilder.Entity<SkladyCelne>(entity =>
        {
            entity.HasKey(e => e.ScGidnumer).HasName("SC_Primary");

            entity.ToTable("SkladyCelne", "CDN", tb => tb.HasTrigger("SkladyCelne_DeleteHandler"));

            entity.HasIndex(e => e.ScKod, "SCKod").IsUnique();

            entity.Property(e => e.ScGidnumer).HasColumnName("SC_GIDNumer");
            entity.Property(e => e.ScAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SC_Adres");
            entity.Property(e => e.ScGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SC_GIDFirma");
            entity.Property(e => e.ScGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SC_GIDLp");
            entity.Property(e => e.ScGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SC_GIDTyp");
            entity.Property(e => e.ScKod)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SC_Kod");
            entity.Property(e => e.ScKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SC_KodP");
            entity.Property(e => e.ScMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SC_Miasto");
            entity.Property(e => e.ScNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SC_Nazwa");
            entity.Property(e => e.ScOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SC_Opis");
            entity.Property(e => e.ScSposobRozliczenia)
                .HasDefaultValue((byte)3)
                .HasColumnName("SC_SposobRozliczenia");
            entity.Property(e => e.ScUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SC_Ulica");
        });

        modelBuilder.Entity<Slowniki>(entity =>
        {
            entity.HasKey(e => e.SlwId).HasName("SLW_Primary");

            entity.ToTable("Slowniki", "CDN", tb =>
                {
                    tb.HasTrigger("EP_SyncFramework_XL_Slowniki");
                    tb.HasTrigger("PowiazaneTowaryUpdateSlowniki_PicoUsuniete");
                    tb.HasTrigger("SlownikiAlias1_DeleteHandler");
                    tb.HasTrigger("SlownikiAlias2_DeleteHandler");
                    tb.HasTrigger("Slowniki_AktualizujWersjeZrodla");
                    tb.HasTrigger("Slowniki_DeleteHandler");
                    tb.HasTrigger("Slowniki_DodatkoweKolumny");
                    tb.HasTrigger("Slowniki_InsertUpdateHandler");
                    tb.HasTrigger("Slowniki_KolumnyBudzetow");
                    tb.HasTrigger("Slowniki_SprawdzOpisAnalityczny");
                    tb.HasTrigger("Slowniki_UaktualnijStruktureFirmy");
                    tb.HasTrigger("Slowniki_UstawDomyslny");
                });

            entity.HasIndex(e => e.SlwAktywny, "SLWAktywny");

            entity.HasIndex(e => new { e.SlwSlsid, e.SlwWartoscS }, "SLWSlownikiStruktura");

            entity.HasIndex(e => new { e.SlwKategoria, e.SlwWartoscS, e.SlwWersjaNr }, "SLWWartosci").IsUnique();

            entity.HasIndex(e => e.SlwPredefiniowany, "SlwPredefiniowany");

            entity.Property(e => e.SlwId).HasColumnName("SLW_ID");
            entity.Property(e => e.SlwAktywny)
                .HasDefaultValue((short)0)
                .HasColumnName("SLW_Aktywny");
            entity.Property(e => e.SlwArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLW_Archiwalny");
            entity.Property(e => e.SlwCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("SLW_CzasModyfikacji");
            entity.Property(e => e.SlwDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLW_Domyslny");
            entity.Property(e => e.SlwKategoria)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_Kategoria");
            entity.Property(e => e.SlwKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_Konto");
            entity.Property(e => e.SlwNazwa)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_Nazwa");
            entity.Property(e => e.SlwOptimaId)
                .HasDefaultValue(0)
                .HasColumnName("SLW_OptimaId");
            entity.Property(e => e.SlwPredefiniowany)
                .HasDefaultValue(0)
                .HasColumnName("SLW_Predefiniowany");
            entity.Property(e => e.SlwSlsid)
                .HasDefaultValue(0)
                .HasColumnName("SLW_SLSId");
            entity.Property(e => e.SlwWartoscL1)
                .HasDefaultValue(0)
                .HasColumnName("SLW_WartoscL1");
            entity.Property(e => e.SlwWartoscL2)
                .HasDefaultValue(0)
                .HasColumnName("SLW_WartoscL2");
            entity.Property(e => e.SlwWartoscL3)
                .HasDefaultValue(0)
                .HasColumnName("SLW_WartoscL3");
            entity.Property(e => e.SlwWartoscL4)
                .HasDefaultValue(0)
                .HasColumnName("SLW_WartoscL4");
            entity.Property(e => e.SlwWartoscL5)
                .HasDefaultValue(0)
                .HasColumnName("SLW_WartoscL5");
            entity.Property(e => e.SlwWartoscN1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SLW_WartoscN1");
            entity.Property(e => e.SlwWartoscN2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SLW_WartoscN2");
            entity.Property(e => e.SlwWartoscN3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SLW_WartoscN3");
            entity.Property(e => e.SlwWartoscN4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SLW_WartoscN4");
            entity.Property(e => e.SlwWartoscS)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_WartoscS");
            entity.Property(e => e.SlwWartoscS1)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_WartoscS1");
            entity.Property(e => e.SlwWartoscS2)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_WartoscS2");
            entity.Property(e => e.SlwWartoscS3)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_WartoscS3");
            entity.Property(e => e.SlwWartoscS4)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_WartoscS4");
            entity.Property(e => e.SlwWartoscS5)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_WartoscS5");
            entity.Property(e => e.SlwWartoscS6)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLW_WartoscS6");
            entity.Property(e => e.SlwWersjaNr).HasColumnName("SLW_WersjaNr");
            entity.Property(e => e.SlwWersjaZrodlo)
                .HasDefaultValue(0)
                .HasColumnName("SLW_WersjaZrodlo");
        });

        modelBuilder.Entity<SlownikiAplikacje>(entity =>
        {
            entity.HasKey(e => e.SlaId).HasName("SLA_Primary");

            entity.ToTable("SlownikiAplikacje", "CDN");

            entity.Property(e => e.SlaId).HasColumnName("SLA_Id");
            entity.Property(e => e.SlaMapId)
                .HasDefaultValue(0)
                .HasColumnName("SLA_MapId");
            entity.Property(e => e.SlaMapTyp)
                .HasDefaultValue(0)
                .HasColumnName("SLA_MapTyp");
            entity.Property(e => e.SlaMapowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLA_Mapowanie");
            entity.Property(e => e.SlaNazwa)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLA_Nazwa");
            entity.Property(e => e.SlaPckId)
                .HasDefaultValue(0)
                .HasColumnName("SLA_PckId");
            entity.Property(e => e.SlaTyp)
                .HasDefaultValue(0)
                .HasColumnName("SLA_Typ");
            entity.Property(e => e.SlaZrdId)
                .HasMaxLength(253)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLA_ZrdId");
        });

        modelBuilder.Entity<SlownikiStruktura>(entity =>
        {
            entity.HasKey(e => e.SlsId).HasName("SLS_Primary");

            entity.ToTable("SlownikiStruktura", "CDN", tb =>
                {
                    tb.HasTrigger("EP_SyncFramework_XL_SlownikiStruktura");
                    tb.HasTrigger("SlownikiStruktura_DeleteHandler");
                });

            entity.HasIndex(e => new { e.SlsOid, e.SlsLp }, "SLSLp");

            entity.HasIndex(e => new { e.SlsOid, e.SlsNazwa }, "SLSNazwa").IsUnique();

            entity.HasIndex(e => e.SlsPredefiniowany, "SLSPredefiniowany");

            entity.Property(e => e.SlsId).HasColumnName("SLS_Id");
            entity.Property(e => e.SlsLp)
                .HasDefaultValue(0)
                .HasColumnName("SLS_Lp");
            entity.Property(e => e.SlsNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLS_Nazwa");
            entity.Property(e => e.SlsOid)
                .HasDefaultValue(0)
                .HasColumnName("SLS_OId");
            entity.Property(e => e.SlsPredefiniowany)
                .HasDefaultValue(0)
                .HasColumnName("SLS_Predefiniowany");
            entity.Property(e => e.SlsWartoscL1)
                .HasDefaultValue(0)
                .HasColumnName("SLS_WartoscL1");
        });

        modelBuilder.Entity<SlwDefPowiazaniaKont>(entity =>
        {
            entity.HasKey(e => e.SdpkId).HasName("SDPK_Primary");

            entity.ToTable("SlwDefPowiazaniaKont", "CDN");

            entity.HasIndex(e => e.SdpkSlwId, "SDPKSlownik");

            entity.Property(e => e.SdpkId).HasColumnName("SDPK_Id");
            entity.Property(e => e.SdpkSlwId)
                .HasDefaultValue(0)
                .HasColumnName("SDPK_SlwId");
            entity.Property(e => e.SdpkTypKonta)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDPK_TypKonta");

            entity.HasOne(d => d.SdpkSlw).WithMany(p => p.SlwDefPowiazaniaKonts)
                .HasForeignKey(d => d.SdpkSlwId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SDPKSlownik");
        });

        modelBuilder.Entity<SlwFunkcjeKontum>(entity =>
        {
            entity.HasKey(e => e.SfkId).HasName("SFK_Primary");

            entity.ToTable("SlwFunkcjeKonta", "CDN");

            entity.HasIndex(e => e.SfkSdpkid, "SFKPowiazania");

            entity.Property(e => e.SfkId).HasColumnName("SFK_Id");
            entity.Property(e => e.SfkFunkcjaKonta)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SFK_FunkcjaKonta");
            entity.Property(e => e.SfkOperator)
                .HasDefaultValue((byte)0)
                .HasColumnName("SFK_Operator");
            entity.Property(e => e.SfkSdpkid)
                .HasDefaultValue(0)
                .HasColumnName("SFK_SDPKId");
            entity.Property(e => e.SfkZnak)
                .HasDefaultValue((byte)0)
                .HasColumnName("SFK_Znak");

            entity.HasOne(d => d.SfkSdpk).WithMany(p => p.SlwFunkcjeKonta)
                .HasForeignKey(d => d.SfkSdpkid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SFKPowiazania");
        });

        modelBuilder.Entity<SlwKosztyParametry>(entity =>
        {
            entity.HasKey(e => e.SlpId).HasName("SLP_Primary");

            entity.ToTable("SlwKosztyParametry", "CDN", tb => tb.HasTrigger("SlwKosztyParametry_DeleteHandler"));

            entity.HasIndex(e => new { e.SlpSlwId, e.SlpNazwa, e.SlpTyp }, "SLPNazwa").IsUnique();

            entity.HasIndex(e => e.SlpSlwId, "SLPSlownik");

            entity.Property(e => e.SlpId).HasColumnName("SLP_Id");
            entity.Property(e => e.SlpNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLP_Nazwa");
            entity.Property(e => e.SlpSlwId)
                .HasDefaultValue(0)
                .HasColumnName("SLP_SlwId");
            entity.Property(e => e.SlpTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLP_Typ");

            entity.HasOne(d => d.SlpSlw).WithMany(p => p.SlwKosztyParametries)
                .HasForeignKey(d => d.SlpSlwId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SLPSlownik");
        });

        modelBuilder.Entity<SlwLinki>(entity =>
        {
            entity.HasKey(e => e.SllId).HasName("SLL_Primary");

            entity.ToTable("SlwLinki", "CDN");

            entity.HasIndex(e => new { e.SllIdNadrzedny, e.SllIdPodrzedny }, "SLLLink").IsUnique();

            entity.Property(e => e.SllId).HasColumnName("SLL_Id");
            entity.Property(e => e.SllIdNadrzedny).HasColumnName("SLL_IdNadrzedny");
            entity.Property(e => e.SllIdPodrzedny).HasColumnName("SLL_IdPodrzedny");
        });

        modelBuilder.Entity<SlwRodzajePrzesylek>(entity =>
        {
            entity.HasKey(e => e.SlrpId).HasName("SLRP_Primary");

            entity.ToTable("SlwRodzajePrzesylek", "CDN");

            entity.HasIndex(e => new { e.SlrpSlwId, e.SlrpShipId, e.SlrpShipServiceId }, "SLRPPrzesylkaKuriera");

            entity.HasIndex(e => e.SlrpSlwId, "SLRPSlownik");

            entity.Property(e => e.SlrpId).HasColumnName("SLRP_Id");
            entity.Property(e => e.SlrpNieaktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLRP_Nieaktywny");
            entity.Property(e => e.SlrpRodzaj)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SLRP_Rodzaj");
            entity.Property(e => e.SlrpShipId)
                .HasDefaultValue(0)
                .HasColumnName("SLRP_ShipId");
            entity.Property(e => e.SlrpShipServiceId)
                .HasDefaultValue(0)
                .HasColumnName("SLRP_ShipServiceId");
            entity.Property(e => e.SlrpSlwId)
                .HasDefaultValue(0)
                .HasColumnName("SLRP_SlwId");

            entity.HasOne(d => d.SlrpSlw).WithMany(p => p.SlwRodzajePrzesyleks)
                .HasForeignKey(d => d.SlrpSlwId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SLRPSlownik");
        });

        modelBuilder.Entity<SlwTraDokumenty>(entity =>
        {
            entity.HasKey(e => new { e.SldSltid, e.SldDokTyp }).HasName("SLD_Primary");

            entity.ToTable("SlwTraDokumenty", "CDN");

            entity.Property(e => e.SldSltid).HasColumnName("SLD_SLTId");
            entity.Property(e => e.SldDokTyp).HasColumnName("SLD_DokTyp");

            entity.HasOne(d => d.SldSlt).WithMany(p => p.SlwTraDokumenties)
                .HasForeignKey(d => d.SldSltid)
                .HasConstraintName("FK_SLDPrimary");
        });

        modelBuilder.Entity<SlwTransakcje>(entity =>
        {
            entity.HasKey(e => e.SltId).HasName("SLT_Primary");

            entity.ToTable("SlwTransakcje", "CDN");

            entity.HasIndex(e => e.SltSlwId, "SLTSlowniki");

            entity.Property(e => e.SltId).HasColumnName("SLT_Id");
            entity.Property(e => e.SltKategoriaDaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLT_KategoriaDaty");
            entity.Property(e => e.SltRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLT_Rodzaj");
            entity.Property(e => e.SltSlwId)
                .HasDefaultValue(0)
                .HasColumnName("SLT_SlwId");

            entity.HasOne(d => d.SltSlw).WithMany(p => p.SlwTransakcjes)
                .HasForeignKey(d => d.SltSlwId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SLTSlowniki");
        });

        modelBuilder.Entity<SlwTypyInwentaryzacjiPo>(entity =>
        {
            entity.HasKey(e => e.SltiId).HasName("SLTI_Primary");

            entity.ToTable("SlwTypyInwentaryzacjiPOS", "CDN");

            entity.HasIndex(e => e.SltiSlwId, "SLTISlowniki");

            entity.Property(e => e.SltiId).HasColumnName("SLTI_Id");
            entity.Property(e => e.SltiDodPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLTI_DodPoz");
            entity.Property(e => e.SltiGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("SLTI_GUID");
            entity.Property(e => e.SltiIloscDoc)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLTI_IloscDoc");
            entity.Property(e => e.SltiOpeOtwPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLTI_OpeOtwPoz");
            entity.Property(e => e.SltiOtwPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLTI_OtwPoz");
            entity.Property(e => e.SltiRodzOdc)
                .HasDefaultValue(0)
                .HasColumnName("SLTI_RodzOdc");
            entity.Property(e => e.SltiSlwId)
                .HasDefaultValue(0)
                .HasColumnName("SLTI_SlwId");
            entity.Property(e => e.SltiSortKat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLTI_SortKat");
            entity.Property(e => e.SltiWyswRozbZamk)
                .HasDefaultValue((byte)0)
                .HasColumnName("SLTI_WyswRozbZamk");

            entity.HasOne(d => d.SltiSlw).WithMany(p => p.SlwTypyInwentaryzacjiPos)
                .HasForeignKey(d => d.SltiSlwId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SLTISlowniki");
        });

        modelBuilder.Entity<SpDpromocje>(entity =>
        {
            entity.HasKey(e => e.SpdId).HasName("SPD_Primary");

            entity.ToTable("SpDPromocje", "CDN", tb => tb.HasTrigger("SpDPromocje_InsertUpdateHandler"));

            entity.HasIndex(e => e.SpdPrmId, "SpDPrmId");

            entity.HasIndex(e => new { e.SpdPrmId, e.SpdSpDlp, e.SpdSpDtyp }, "SpDSpdOPT").IsUnique();

            entity.Property(e => e.SpdId).HasColumnName("SPD_ID");
            entity.Property(e => e.SpdPrmId)
                .HasDefaultValue(0)
                .HasColumnName("SPD_PrmId");
            entity.Property(e => e.SpdSpDlp)
                .HasDefaultValue(0)
                .HasColumnName("SPD_SpDLp");
            entity.Property(e => e.SpdSpDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SPD_SpDTyp");

            entity.HasOne(d => d.SpdPrm).WithMany(p => p.SpDpromocjes)
                .HasForeignKey(d => d.SpdPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SpDPrmId");
        });

        modelBuilder.Entity<SpisTelefonow>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SpisTelefonow", "CDN");

            entity.HasIndex(e => e.StelTelefon, "STelTelefon").IsUnique();

            entity.HasIndex(e => new { e.StelGidnumer, e.StelGidtyp }, "StelObiekt");

            entity.Property(e => e.StelGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("STEL_GIDNumer");
            entity.Property(e => e.StelGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("STEL_GIDTyp");
            entity.Property(e => e.StelTelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("STEL_Telefon");
        });

        modelBuilder.Entity<SqlMapa>(entity =>
        {
            entity.HasKey(e => new { e.SqMSqRid, e.SqMProcId }).HasName("SqM_Primary");

            entity.ToTable("SqlMapa", "CDN");

            entity.HasIndex(e => new { e.SqMProcId, e.SqMPozycja }, "SqMPozycja").IsUnique();

            entity.Property(e => e.SqMSqRid).HasColumnName("SqM_SqRId");
            entity.Property(e => e.SqMProcId).HasColumnName("SqM_ProcID");
            entity.Property(e => e.SqMPozycja)
                .HasDefaultValue(0)
                .HasColumnName("SqM_Pozycja");
        });

        modelBuilder.Entity<SqlRaporty>(entity =>
        {
            entity.HasKey(e => e.SqRId).HasName("SqR_Primary");

            entity.ToTable("SqlRaporty", "CDN", tb => tb.HasTrigger("SqlRaporty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.SqRStaTyp, e.SqRStaNumer, e.SqRNazwa }, "SqRNazwa").IsUnique();

            entity.Property(e => e.SqRId).HasColumnName("SqR_Id");
            entity.Property(e => e.SqRAutor)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_Autor");
            entity.Property(e => e.SqRDataMod)
                .HasDefaultValue(0)
                .HasColumnName("SqR_DataMod");
            entity.Property(e => e.SqRDataUtw)
                .HasDefaultValue(0)
                .HasColumnName("SqR_DataUtw");
            entity.Property(e => e.SqREmail)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_EMail");
            entity.Property(e => e.SqREmailAdres)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_EmailAdres");
            entity.Property(e => e.SqREmailAdresFirma)
                .HasDefaultValue(0)
                .HasColumnName("SqR_EmailAdresFirma");
            entity.Property(e => e.SqREmailAdresLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SqR_EmailAdresLp");
            entity.Property(e => e.SqREmailAdresNumer)
                .HasDefaultValue(0)
                .HasColumnName("SqR_EmailAdresNumer");
            entity.Property(e => e.SqREmailAdresTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SqR_EmailAdresTyp");
            entity.Property(e => e.SqRExe)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_Exe");
            entity.Property(e => e.SqRExeSpec)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_ExeSpec");
            entity.Property(e => e.SqRFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_Format");
            entity.Property(e => e.SqRHaslo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_Haslo");
            entity.Property(e => e.SqRHasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_Haslo_chk");
            entity.Property(e => e.SqRIloscWierszy)
                .HasDefaultValue(0)
                .HasColumnName("SqR_IloscWierszy");
            entity.Property(e => e.SqRKolumny)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_Kolumny");
            entity.Property(e => e.SqRNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_Nazwa");
            entity.Property(e => e.SqRNrWersji)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_NrWersji");
            entity.Property(e => e.SqROpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_Opis");
            entity.Property(e => e.SqRPlik)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_Plik");
            entity.Property(e => e.SqRPlikKatalog)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_PlikKatalog");
            entity.Property(e => e.SqRPlikNazwa)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_PlikNazwa");
            entity.Property(e => e.SqRPodglad)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_Podglad");
            entity.Property(e => e.SqRStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("SqR_StaFirma");
            entity.Property(e => e.SqRStaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SqR_StaLp");
            entity.Property(e => e.SqRStaNumer)
                .HasDefaultValue(0)
                .HasColumnName("SqR_StaNumer");
            entity.Property(e => e.SqRStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SqR_StaTyp");
            entity.Property(e => e.SqRTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_Typ");
            entity.Property(e => e.SqRWarunek)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_Warunek");
            entity.Property(e => e.SqRWynik)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_Wynik");
            entity.Property(e => e.SqRXslSpec)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SqR_XslSpec");
            entity.Property(e => e.SqRZapisujHistorie)
                .HasDefaultValue((byte)0)
                .HasColumnName("SqR_ZapisujHistorie");
            entity.Property(e => e.SqRZapytanie)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("SqR_Zapytanie");
        });

        modelBuilder.Entity<SrTrDatyBi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SrTrDatyBI");
        });

        modelBuilder.Entity<SrcPowObiektyAtr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SRC_PowObiektyAtr");

            entity.Property(e => e.PoaObiGidtyp).HasColumnName("poa_ObiGIDTyp");
            entity.Property(e => e.PoaObiNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("poa_ObiNazwa");
            entity.Property(e => e.PoaWymNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("poa_WymNazwa");
            entity.Property(e => e.PoaWymTyp).HasColumnName("poa_WymTyp");
        });

        modelBuilder.Entity<SrcPowObiektyAtrMiary>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SRC_PowObiektyAtrMiary");

            entity.Property(e => e.DimensionCustomProperty)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DimensionTableId).HasColumnName("DimensionTableID");
            entity.Property(e => e.DimensionTableName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FactCustomProperty)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FactTableId).HasColumnName("FactTableID");
            entity.Property(e => e.FactTableName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FieldDimensionTable)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FieldFactTable)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ObjectGidtyp)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ObjectGIDTyp");
        });

        modelBuilder.Entity<SrcWymKategorieFinansowe>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SRC_WYM_KategorieFinansowe");

            entity.Property(e => e.KatFinAktywny).HasColumnName("KatFin_Aktywny");
            entity.Property(e => e.KatFinArchiwalny)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("KatFin_Archiwalny");
            entity.Property(e => e.KatFinCustomRollup)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KatFin_CustomRollup");
            entity.Property(e => e.KatFinKategoria).HasColumnName("KatFin_Kategoria");
            entity.Property(e => e.KatFinKonto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("KatFin_Konto");
            entity.Property(e => e.KatFinNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KatFin_Nazwa");
            entity.Property(e => e.KatFinOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("KatFin_Opis");
            entity.Property(e => e.KatFinOrgAtrId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KatFin_OrgAtrID");
            entity.Property(e => e.KatFinOrgId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KatFin_OrgID");
            entity.Property(e => e.KatFinOrgParId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KatFin_OrgParID");
            entity.Property(e => e.KatFinOrgWart)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KatFin_OrgWart");
            entity.Property(e => e.KatFinTyp).HasColumnName("KatFin_Typ");
        });

        modelBuilder.Entity<SrcWymWymiaryAnalityczne>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SRC_WYM_WymiaryAnalityczne");

            entity.HasIndex(e => e.WymOrgAtkId, "IX_SRC_WYM_WymiaryAnalityczne_OrgAtkID");

            entity.Property(e => e.WymAktywny).HasColumnName("WYM_Aktywny");
            entity.Property(e => e.WymKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("WYM_Konto");
            entity.Property(e => e.WymNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WYM_Nazwa");
            entity.Property(e => e.WymNazwaPoziomu)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("WYM_NazwaPoziomu");
            entity.Property(e => e.WymOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WYM_Opis");
            entity.Property(e => e.WymOrgAtkId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WYM_OrgAtkID");
            entity.Property(e => e.WymOrgAtrId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WYM_OrgAtrID");
            entity.Property(e => e.WymOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WYM_OrgID");
            entity.Property(e => e.WymOrgParId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WYM_OrgParID");
            entity.Property(e => e.WymTyp).HasColumnName("WYM_Typ");
            entity.Property(e => e.WymTypWymiaru).HasColumnName("WYM_TypWymiaru");
        });

        modelBuilder.Entity<SrsBranze>(entity =>
        {
            entity.HasKey(e => e.SsBNumer).HasName("SsB_Primary");

            entity.ToTable("SrsBranze", "CDN");

            entity.HasIndex(e => e.SsBNazwa, "SsBNazwy").IsUnique();

            entity.Property(e => e.SsBNumer).HasColumnName("SsB_Numer");
            entity.Property(e => e.SsBFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsB_Firma");
            entity.Property(e => e.SsBLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsB_Lp");
            entity.Property(e => e.SsBNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsB_Nazwa");
            entity.Property(e => e.SsBTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsB_Typ");
        });

        modelBuilder.Entity<SrsCennikCzynnosci>(entity =>
        {
            entity.HasKey(e => e.SccId).HasName("SCC_Primary");

            entity.ToTable("SrsCennikCzynnosci", "CDN", tb => tb.HasTrigger("SrsCennikCzynnosci_DeleteHandler"));

            entity.HasIndex(e => new { e.SccSsCid, e.SccId }, "SCCCzynnosc").IsUnique();

            entity.HasIndex(e => new { e.SccKntTyp, e.SccKntNumer, e.SccKntLp }, "SCCKontrahent");

            entity.Property(e => e.SccId).HasColumnName("SCC_Id");
            entity.Property(e => e.SccCzasWykonania)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SCC_CzasWykonania");
            entity.Property(e => e.SccIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SCC_Ilosc");
            entity.Property(e => e.SccKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("SCC_KntFirma");
            entity.Property(e => e.SccKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCC_KntLp");
            entity.Property(e => e.SccKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SCC_KntNumer");
            entity.Property(e => e.SccKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCC_KntTyp");
            entity.Property(e => e.SccKosztCzynnosci)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SCC_KosztCzynnosci");
            entity.Property(e => e.SccKosztHczynnosci)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SCC_KosztHCzynnosci");
            entity.Property(e => e.SccRodzajKosztu)
                .HasDefaultValue((byte)0)
                .HasColumnName("SCC_RodzajKosztu");
            entity.Property(e => e.SccSsCid)
                .HasDefaultValue(0)
                .HasColumnName("SCC_SsCId");

            entity.HasOne(d => d.SccSsC).WithMany(p => p.SrsCennikCzynnoscis)
                .HasPrincipalKey(p => p.SsCId)
                .HasForeignKey(d => d.SccSsCid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SCCCzynnosc");
        });

        modelBuilder.Entity<SrsCzynnosci>(entity =>
        {
            entity.HasKey(e => new { e.SsCGidtyp, e.SsCGidnumer, e.SsCGrotyp, e.SsCGronumer }).HasName("SsC_Primary");

            entity.ToTable("SrsCzynnosci", "CDN", tb => tb.HasTrigger("SrsCzynnosci_InsertUpdateHandler"));

            entity.HasIndex(e => e.SsCId, "SsCId").IsUnique();

            entity.HasIndex(e => new { e.SsCGidtyp, e.SsCKod }, "SsCKod").IsUnique();

            entity.HasIndex(e => e.SsCTwrNumer, "SsCTwr");

            entity.Property(e => e.SsCGidtyp).HasColumnName("SsC_GIDTyp");
            entity.Property(e => e.SsCGidnumer).HasColumnName("SsC_GIDNumer");
            entity.Property(e => e.SsCGrotyp).HasColumnName("SsC_GROTyp");
            entity.Property(e => e.SsCGronumer).HasColumnName("SsC_GRONumer");
            entity.Property(e => e.SsCGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SsC_GIDFirma");
            entity.Property(e => e.SsCGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsC_GIDLp");
            entity.Property(e => e.SsCGrofirma)
                .HasDefaultValue(0)
                .HasColumnName("SsC_GROFirma");
            entity.Property(e => e.SsCGrolp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsC_GROLp");
            entity.Property(e => e.SsCId)
                .IsRequired()
                .HasDefaultValue(0)
                .HasColumnName("SsC_Id");
            entity.Property(e => e.SsCKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsC_Kod");
            entity.Property(e => e.SsCTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsC_TwrFirma");
            entity.Property(e => e.SsCTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsC_TwrLp");
            entity.Property(e => e.SsCTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsC_TwrNumer");
            entity.Property(e => e.SsCTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsC_TwrTyp");
        });

        modelBuilder.Entity<SrsElem>(entity =>
        {
            entity.HasKey(e => new { e.SsEGidnumer, e.SsEGidlp }).HasName("SsE_Primary");

            entity.ToTable("SrsElem", "CDN", tb =>
                {
                    tb.HasTrigger("SrsElem_DeleteHandler");
                    tb.HasTrigger("SrsElem_InsertUpdateHandler");
                    tb.HasTrigger("SrsElem_UpdateWykonanie");
                });

            entity.HasIndex(e => e.SsECdzId, "SSEWzorzecZadania");

            entity.HasIndex(e => e.SsEAkwNumer, "SsEAkwizytor");

            entity.Property(e => e.SsEGidnumer).HasColumnName("SsE_GIDNumer");
            entity.Property(e => e.SsEGidlp).HasColumnName("SsE_GIDLp");
            entity.Property(e => e.SsEAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsE_AkwFirma");
            entity.Property(e => e.SsEAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_AkwLp");
            entity.Property(e => e.SsEAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsE_AkwNumer");
            entity.Property(e => e.SsEAkwOsobaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_AkwOsobaLp");
            entity.Property(e => e.SsEAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_AkwTyp");
            entity.Property(e => e.SsECalyDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsE_CalyDzien");
            entity.Property(e => e.SsECdzId)
                .HasDefaultValue(0)
                .HasColumnName("SsE_CdzID");
            entity.Property(e => e.SsECkeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_CkeLp");
            entity.Property(e => e.SsECkeNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsE_CkeNumer");
            entity.Property(e => e.SsECzasDodatkowy)
                .HasDefaultValue(0)
                .HasColumnName("SsE_CzasDodatkowy");
            entity.Property(e => e.SsECzasKonsultacji)
                .HasDefaultValue(0)
                .HasColumnName("SsE_CzasKonsultacji");
            entity.Property(e => e.SsECzasPlanowanyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsE_CzasPlanowanyJedn");
            entity.Property(e => e.SsECzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsE_CzasPrzypomnieniaJedn");
            entity.Property(e => e.SsEDataWykonania)
                .HasDefaultValue(0)
                .HasColumnName("SsE_DataWykonania");
            entity.Property(e => e.SsEElementLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_ElementLp");
            entity.Property(e => e.SsEElementTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_ElementTyp");
            entity.Property(e => e.SsEFlagaStatusu)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsE_FlagaStatusu");
            entity.Property(e => e.SsEGidfirma).HasColumnName("SsE_GIDFirma");
            entity.Property(e => e.SsEGidtyp).HasColumnName("SsE_GIDTyp");
            entity.Property(e => e.SsEOdleglosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("SsE_Odleglosc");
            entity.Property(e => e.SsEOpeChangeFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsE_OpeChangeFirma");
            entity.Property(e => e.SsEOpeChangeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_OpeChangeLp");
            entity.Property(e => e.SsEOpeChangeNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsE_OpeChangeNumer");
            entity.Property(e => e.SsEOpeChangeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_OpeChangeTyp");
            entity.Property(e => e.SsEOpePnumer)
                .HasDefaultValue(0)
                .HasColumnName("SsE_OpePNumer");
            entity.Property(e => e.SsEOpePtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_OpePTyp");
            entity.Property(e => e.SsEOpeStartFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsE_OpeStartFirma");
            entity.Property(e => e.SsEOpeStartLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_OpeStartLp");
            entity.Property(e => e.SsEOpeStartNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsE_OpeStartNumer");
            entity.Property(e => e.SsEOpeStartTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsE_OpeStartTyp");
            entity.Property(e => e.SsEOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("SsE_OpeWNumer");
            entity.Property(e => e.SsEOpis)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsE_Opis");
            entity.Property(e => e.SsEPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsE_Priorytet");
            entity.Property(e => e.SsERodzajZadania)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsE_RodzajZadania");
            entity.Property(e => e.SsETerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsE_Terminarz");
            entity.Property(e => e.SsETsprzypomnienie)
                .HasDefaultValue(0)
                .HasColumnName("SsE_TSPrzypomnienie");
            entity.Property(e => e.SsETstampDataChange)
                .HasDefaultValue(0)
                .HasColumnName("SsE_TStampDataChange");
            entity.Property(e => e.SsETstampDataStart)
                .HasDefaultValue(0)
                .HasColumnName("SsE_TStampDataStart");
            entity.Property(e => e.SsETstampTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("SsE_TStampTerminDo");
            entity.Property(e => e.SsETstampTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("SsE_TStampTerminOd");
            entity.Property(e => e.SsETypId)
                .HasDefaultValue(0)
                .HasColumnName("SsE_TypId");
            entity.Property(e => e.SsETytul)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsE_Tytul");

            entity.HasOne(d => d.SsEGidnumerNavigation).WithMany(p => p.SrsElems)
                .HasForeignKey(d => d.SsEGidnumer)
                .HasConstraintName("FK_SSEPrimary");
        });

        modelBuilder.Entity<SrsNag>(entity =>
        {
            entity.HasKey(e => e.SsNGidnumer).HasName("SsN_Primary");

            entity.ToTable("SrsNag", "CDN", tb =>
                {
                    tb.HasTrigger("SrsNag_DeleteHandler");
                    tb.HasTrigger("SrsNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SsNAkwNumer, "SsNAkwizytor");

            entity.HasIndex(e => e.SsNKntNumer, "SsNKontrahent");

            entity.HasIndex(e => e.SsNOpeNumer, "SsNOperatorzy");

            entity.Property(e => e.SsNGidnumer).HasColumnName("SsN_GIDNumer");
            entity.Property(e => e.SsNAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_AkwFirma");
            entity.Property(e => e.SsNAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_AkwLp");
            entity.Property(e => e.SsNAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_AkwNumer");
            entity.Property(e => e.SsNAkwOsobaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_AkwOsobaLp");
            entity.Property(e => e.SsNAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_AkwTyp");
            entity.Property(e => e.SsNArtFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_ArtFirma");
            entity.Property(e => e.SsNArtLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_ArtLp");
            entity.Property(e => e.SsNArtNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_ArtNumer");
            entity.Property(e => e.SsNArtTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_ArtTyp");
            entity.Property(e => e.SsNAtrybut1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Atrybut1");
            entity.Property(e => e.SsNAtrybut2)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Atrybut2");
            entity.Property(e => e.SsNAtrybut3)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Atrybut3");
            entity.Property(e => e.SsNFormat1)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsN_Format1");
            entity.Property(e => e.SsNFormat2)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsN_Format2");
            entity.Property(e => e.SsNFormat3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsN_Format3");
            entity.Property(e => e.SsNGidFirma).HasColumnName("SsN_GidFirma");
            entity.Property(e => e.SsNGidlp).HasColumnName("SsN_GIDLp");
            entity.Property(e => e.SsNGidtyp).HasColumnName("SsN_GIDTyp");
            entity.Property(e => e.SsNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_KntFirma");
            entity.Property(e => e.SsNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_KntLp");
            entity.Property(e => e.SsNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_KntNumer");
            entity.Property(e => e.SsNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_KntTyp");
            entity.Property(e => e.SsNOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_OpeFirma");
            entity.Property(e => e.SsNOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_OpeLp");
            entity.Property(e => e.SsNOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_OpeNumer");
            entity.Property(e => e.SsNOpeStartFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_OpeStartFirma");
            entity.Property(e => e.SsNOpeStartLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_OpeStartLp");
            entity.Property(e => e.SsNOpeStartNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_OpeStartNumer");
            entity.Property(e => e.SsNOpeStartTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_OpeStartTyp");
            entity.Property(e => e.SsNOpeStopFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_OpeStopFirma");
            entity.Property(e => e.SsNOpeStopLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_OpeStopLp");
            entity.Property(e => e.SsNOpeStopNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_OpeStopNumer");
            entity.Property(e => e.SsNOpeStopTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_OpeStopTyp");
            entity.Property(e => e.SsNOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_OpeTyp");
            entity.Property(e => e.SsNOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Opis");
            entity.Property(e => e.SsNOplata)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsN_Oplata");
            entity.Property(e => e.SsNOsobaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_OsobaLp");
            entity.Property(e => e.SsNPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsN_Priorytet");
            entity.Property(e => e.SsNRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("SsN_Rodzaj");
            entity.Property(e => e.SsNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("SsN_RokMiesiac");
            entity.Property(e => e.SsNStreszczenie)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Streszczenie");
            entity.Property(e => e.SsNTrnFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_TrnFirma");
            entity.Property(e => e.SsNTrnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_TrnLp");
            entity.Property(e => e.SsNTrnNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_TrnNumer");
            entity.Property(e => e.SsNTrnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_TrnTyp");
            entity.Property(e => e.SsNTstampDataStart)
                .HasDefaultValue(0)
                .HasColumnName("SsN_TStampDataStart");
            entity.Property(e => e.SsNTstampDataStop)
                .HasDefaultValue(0)
                .HasColumnName("SsN_TStampDataStop");
            entity.Property(e => e.SsNTwXfirma)
                .HasDefaultValue(0)
                .HasColumnName("SsN_TwXFirma");
            entity.Property(e => e.SsNTwXlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_TwXLp");
            entity.Property(e => e.SsNTwXnumer)
                .HasDefaultValue(0)
                .HasColumnName("SsN_TwXNumer");
            entity.Property(e => e.SsNTwXtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsN_TwXTyp");
            entity.Property(e => e.SsNWartosc1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Wartosc1");
            entity.Property(e => e.SsNWartosc2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Wartosc2");
            entity.Property(e => e.SsNWartosc3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Wartosc3");
            entity.Property(e => e.SsNWersja)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsN_Wersja");

            entity.HasMany(d => d.CkwCeks).WithMany(p => p.CkwSsnNumers)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmkontrahenciWatki",
                    r => r.HasOne<CrmkntEtapy>().WithMany()
                        .HasForeignKey("CkwCekId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CKWCEK"),
                    l => l.HasOne<SrsNag>().WithMany()
                        .HasForeignKey("CkwSsnNumer")
                        .HasConstraintName("FK_CKWSsN"),
                    j =>
                    {
                        j.HasKey("CkwSsnNumer", "CkwCekId").HasName("CKW_Primary");
                        j.ToTable("CRMKontrahenciWatki", "CDN");
                        j.HasIndex(new[] { "CkwCekId" }, "CKWCEK");
                        j.HasIndex(new[] { "CkwSsnNumer" }, "CKWSsN");
                        j.IndexerProperty<int>("CkwSsnNumer").HasColumnName("CKW_SsnNumer");
                        j.IndexerProperty<int>("CkwCekId").HasColumnName("CKW_CekID");
                    });
        });

        modelBuilder.Entity<SrsObiekty>(entity =>
        {
            entity.HasKey(e => e.SobGidnumer).HasName("SOb_Primary");

            entity.ToTable("SrsObiekty", "CDN", tb =>
                {
                    tb.HasTrigger("SrsObiektyAlias_DeleteHandler");
                    tb.HasTrigger("SrsObiekty_DeleteHandler");
                    tb.HasTrigger("SrsObiekty_InsertUpdateHandler");
                    tb.HasTrigger("SrsObiekty_SprawdzSesje");
                });

            entity.HasIndex(e => e.SobKntNumer, "SObKontrah");

            entity.HasIndex(e => new { e.SobKntTyp, e.SobKntNumer, e.SobAktualny, e.SobTsdeaktywacji }, "SObObiekt").IsUnique();

            entity.HasIndex(e => e.SobPrcNumerO, "SObOpiekun");

            entity.HasIndex(e => e.SobPrcNumerS, "SObSerwisant");

            entity.HasIndex(e => e.SobKntNumerW, "SObWlasciciel");

            entity.Property(e => e.SobGidnumer).HasColumnName("SOb_GIDNumer");
            entity.Property(e => e.SobAktualny)
                .HasDefaultValue(0)
                .HasColumnName("SOb_Aktualny");
            entity.Property(e => e.SobAktywny)
                .HasDefaultValue(0)
                .HasColumnName("SOb_Aktywny");
            entity.Property(e => e.SobGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SOb_GIDFirma");
            entity.Property(e => e.SobGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_GIDLp");
            entity.Property(e => e.SobGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_GIDTyp");
            entity.Property(e => e.SobGodzOtwarciaId1)
                .HasDefaultValue(0)
                .HasColumnName("SOb_GodzOtwarciaId1");
            entity.Property(e => e.SobGodzOtwarciaId2)
                .HasDefaultValue(0)
                .HasColumnName("SOb_GodzOtwarciaId2");
            entity.Property(e => e.SobGodzOtwarciaId3)
                .HasDefaultValue(0)
                .HasColumnName("SOb_GodzOtwarciaId3");
            entity.Property(e => e.SobIloscKm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SOb_IloscKm");
            entity.Property(e => e.SobKnOfirma)
                .HasDefaultValue(0)
                .HasColumnName("SOb_KnOFirma");
            entity.Property(e => e.SobKnOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_KnOLp");
            entity.Property(e => e.SobKnOnumer)
                .HasDefaultValue(0)
                .HasColumnName("SOb_KnONumer");
            entity.Property(e => e.SobKnOtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_KnOTyp");
            entity.Property(e => e.SobKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("SOb_KntFirma");
            entity.Property(e => e.SobKntFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("SOb_KntFirmaW");
            entity.Property(e => e.SobKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_KntLp");
            entity.Property(e => e.SobKntLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_KntLpW");
            entity.Property(e => e.SobKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SOb_KntNumer");
            entity.Property(e => e.SobKntNumerW)
                .HasDefaultValue(0)
                .HasColumnName("SOb_KntNumerW");
            entity.Property(e => e.SobKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_KntTyp");
            entity.Property(e => e.SobKntTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_KntTypW");
            entity.Property(e => e.SobMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SOb_Miasto");
            entity.Property(e => e.SobOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SOb_Opis");
            entity.Property(e => e.SobPrcFirmaO)
                .HasDefaultValue(0)
                .HasColumnName("SOb_PrcFirmaO");
            entity.Property(e => e.SobPrcFirmaS)
                .HasDefaultValue(0)
                .HasColumnName("SOb_PrcFirmaS");
            entity.Property(e => e.SobPrcLpO)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_PrcLpO");
            entity.Property(e => e.SobPrcLpS)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_PrcLpS");
            entity.Property(e => e.SobPrcNumerO)
                .HasDefaultValue(0)
                .HasColumnName("SOb_PrcNumerO");
            entity.Property(e => e.SobPrcNumerS)
                .HasDefaultValue(0)
                .HasColumnName("SOb_PrcNumerS");
            entity.Property(e => e.SobPrcTypO)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_PrcTypO");
            entity.Property(e => e.SobPrcTypS)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_PrcTypS");
            entity.Property(e => e.SobRegionId)
                .HasDefaultValue(0)
                .HasColumnName("SOb_RegionId");
            entity.Property(e => e.SobStanId)
                .HasDefaultValue(0)
                .HasColumnName("SOb_StanId");
            entity.Property(e => e.SobStatusId)
                .HasDefaultValue(0)
                .HasColumnName("SOb_StatusId");
            entity.Property(e => e.SobTsdeaktywacji)
                .HasDefaultValue(0)
                .HasColumnName("SOb_TSDeaktywacji");
            entity.Property(e => e.SobUrzFirma)
                .HasDefaultValue(0)
                .HasColumnName("SOb_UrzFirma");
            entity.Property(e => e.SobUrzLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_UrzLp");
            entity.Property(e => e.SobUrzNumer)
                .HasDefaultValue(0)
                .HasColumnName("SOb_UrzNumer");
            entity.Property(e => e.SobUrzTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOb_UrzTyp");
        });

        modelBuilder.Entity<SrsWypDefinicje>(entity =>
        {
            entity.HasKey(e => e.SsDId).HasName("SsD_Primary");

            entity.ToTable("SrsWypDefinicje", "CDN", tb => tb.HasTrigger("SrsWypDefinicje_DeleteHandler"));

            entity.HasIndex(e => e.SsDNazwa, "SsDNazwa").IsUnique();

            entity.Property(e => e.SsDId).HasColumnName("SsD_Id");
            entity.Property(e => e.SsDAktywne1)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne1");
            entity.Property(e => e.SsDAktywne10)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne10");
            entity.Property(e => e.SsDAktywne11)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne11");
            entity.Property(e => e.SsDAktywne12)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne12");
            entity.Property(e => e.SsDAktywne13)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne13");
            entity.Property(e => e.SsDAktywne14)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne14");
            entity.Property(e => e.SsDAktywne15)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne15");
            entity.Property(e => e.SsDAktywne2)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne2");
            entity.Property(e => e.SsDAktywne3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne3");
            entity.Property(e => e.SsDAktywne4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne4");
            entity.Property(e => e.SsDAktywne5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne5");
            entity.Property(e => e.SsDAktywne6)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne6");
            entity.Property(e => e.SsDAktywne7)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne7");
            entity.Property(e => e.SsDAktywne8)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne8");
            entity.Property(e => e.SsDAktywne9)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Aktywne9");
            entity.Property(e => e.SsDEtykieta1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta1");
            entity.Property(e => e.SsDEtykieta10)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta10");
            entity.Property(e => e.SsDEtykieta11)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta11");
            entity.Property(e => e.SsDEtykieta12)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta12");
            entity.Property(e => e.SsDEtykieta13)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta13");
            entity.Property(e => e.SsDEtykieta14)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta14");
            entity.Property(e => e.SsDEtykieta15)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta15");
            entity.Property(e => e.SsDEtykieta2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta2");
            entity.Property(e => e.SsDEtykieta3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta3");
            entity.Property(e => e.SsDEtykieta4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta4");
            entity.Property(e => e.SsDEtykieta5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta5");
            entity.Property(e => e.SsDEtykieta6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta6");
            entity.Property(e => e.SsDEtykieta7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta7");
            entity.Property(e => e.SsDEtykieta8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta8");
            entity.Property(e => e.SsDEtykieta9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Etykieta9");
            entity.Property(e => e.SsDFormat1)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format1");
            entity.Property(e => e.SsDFormat10)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format10");
            entity.Property(e => e.SsDFormat11)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format11");
            entity.Property(e => e.SsDFormat12)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format12");
            entity.Property(e => e.SsDFormat13)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format13");
            entity.Property(e => e.SsDFormat14)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format14");
            entity.Property(e => e.SsDFormat15)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format15");
            entity.Property(e => e.SsDFormat2)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format2");
            entity.Property(e => e.SsDFormat3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format3");
            entity.Property(e => e.SsDFormat4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format4");
            entity.Property(e => e.SsDFormat5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format5");
            entity.Property(e => e.SsDFormat6)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format6");
            entity.Property(e => e.SsDFormat7)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format7");
            entity.Property(e => e.SsDFormat8)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format8");
            entity.Property(e => e.SsDFormat9)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsD_Format9");
            entity.Property(e => e.SsDNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Nazwa");
            entity.Property(e => e.SsDWartosc1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc1");
            entity.Property(e => e.SsDWartosc10)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc10");
            entity.Property(e => e.SsDWartosc11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc11");
            entity.Property(e => e.SsDWartosc12)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc12");
            entity.Property(e => e.SsDWartosc13)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc13");
            entity.Property(e => e.SsDWartosc14)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc14");
            entity.Property(e => e.SsDWartosc15)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc15");
            entity.Property(e => e.SsDWartosc2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc2");
            entity.Property(e => e.SsDWartosc3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc3");
            entity.Property(e => e.SsDWartosc4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc4");
            entity.Property(e => e.SsDWartosc5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc5");
            entity.Property(e => e.SsDWartosc6)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc6");
            entity.Property(e => e.SsDWartosc7)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc7");
            entity.Property(e => e.SsDWartosc8)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc8");
            entity.Property(e => e.SsDWartosc9)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsD_Wartosc9");
        });

        modelBuilder.Entity<SrsWypRodzaje>(entity =>
        {
            entity.HasKey(e => e.RwpId).HasName("RWp_Primary");

            entity.ToTable("SrsWypRodzaje", "CDN", tb =>
                {
                    tb.HasTrigger("SrsWypRodzaje_DeleteHandler");
                    tb.HasTrigger("SrsWypRodzaje_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.RwpSsDid, e.RwpId }, "RWpDefinicja").IsUnique();

            entity.HasIndex(e => new { e.RwpSlwId, e.RwpId }, "RWpGrupaWyp").IsUnique();

            entity.Property(e => e.RwpId).HasColumnName("RWp_Id");
            entity.Property(e => e.RwpAktywny)
                .HasDefaultValue(0)
                .HasColumnName("RWp_Aktywny");
            entity.Property(e => e.RwpNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RWp_Nazwa");
            entity.Property(e => e.RwpSlwId)
                .HasDefaultValue(0)
                .HasColumnName("RWp_SlwId");
            entity.Property(e => e.RwpSsDid)
                .HasDefaultValue(0)
                .HasColumnName("RWp_SsDId");
            entity.Property(e => e.RwpTerminPrzegladu)
                .HasDefaultValue((short)0)
                .HasColumnName("RWp_TerminPrzegladu");
            entity.Property(e => e.RwpTyp)
                .HasDefaultValue(0)
                .HasColumnName("RWp_Typ");
        });

        modelBuilder.Entity<SrsWyposazenium>(entity =>
        {
            entity.HasKey(e => e.SsWId).HasName("SsW_Primary");

            entity.ToTable("SrsWyposazenia", "CDN", tb =>
                {
                    tb.HasTrigger("SrsWyposazeniaAlias_InsertUpdateHandler");
                    tb.HasTrigger("SrsWyposazenia_DeleteHandler");
                    tb.HasTrigger("SrsWyposazenia_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SsWKntNumer, "SSWKontrahent");

            entity.HasIndex(e => new { e.SsWKod, e.SsWSobTyp, e.SsWSobNumer, e.SsWKntTyp, e.SsWKntNumer }, "SsWKod").IsUnique();

            entity.HasIndex(e => new { e.SsWKod, e.SsWKntNumer }, "SsWKodKnt");

            entity.HasIndex(e => new { e.SsWParId, e.SsWId }, "SsWParent").IsUnique();

            entity.HasIndex(e => e.SsWRodzajId, "SsWRodzaj");

            entity.HasIndex(e => e.SsWRodzajPaliwaId, "SsWSlownik");

            entity.HasIndex(e => new { e.SsWSobTyp, e.SsWSobNumer }, "SsWSrsObiekt");

            entity.HasIndex(e => e.SsWTwrNumer, "SsWTowar");

            entity.HasIndex(e => new { e.SsWWymId, e.SsWId }, "SsWWymiana").IsUnique();

            entity.HasIndex(e => e.SsWDefId, "SsWWypDefinicja");

            entity.Property(e => e.SsWId).HasColumnName("SsW_Id");
            entity.Property(e => e.SsWCecha)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Cecha");
            entity.Property(e => e.SsWCharakterystykaId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_CharakterystykaId");
            entity.Property(e => e.SsWDataGwarancji)
                .HasDefaultValue(0)
                .HasColumnName("SsW_DataGwarancji");
            entity.Property(e => e.SsWDataInstalacji)
                .HasDefaultValue(0)
                .HasColumnName("SsW_DataInstalacji");
            entity.Property(e => e.SsWDataNastepnegoPrzegladu)
                .HasDefaultValue(0)
                .HasColumnName("SsW_DataNastepnegoPrzegladu");
            entity.Property(e => e.SsWDataOstatniegoPrzegladu)
                .HasDefaultValue(0)
                .HasColumnName("SsW_DataOstatniegoPrzegladu");
            entity.Property(e => e.SsWDataWaznosciLegalizacji)
                .HasDefaultValue(0)
                .HasColumnName("SsW_DataWaznosciLegalizacji");
            entity.Property(e => e.SsWDefId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_DefId");
            entity.Property(e => e.SsWDrukarka)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Drukarka");
            entity.Property(e => e.SsWDysk)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Dysk");
            entity.Property(e => e.SsWKartaGraficzna)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_KartaGraficzna");
            entity.Property(e => e.SsWKartaInterfejs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_KartaInterfejs");
            entity.Property(e => e.SsWKartaModem)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_KartaModem");
            entity.Property(e => e.SsWKartaPortow)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_KartaPortow");
            entity.Property(e => e.SsWKartaUps)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_KartaUps");
            entity.Property(e => e.SsWKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsW_KntFirma");
            entity.Property(e => e.SsWKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_KntLp");
            entity.Property(e => e.SsWKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsW_KntNumer");
            entity.Property(e => e.SsWKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_KntTyp");
            entity.Property(e => e.SsWKod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Kod");
            entity.Property(e => e.SsWModel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Model");
            entity.Property(e => e.SsWMonitor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Monitor");
            entity.Property(e => e.SsWNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Nazwa");
            entity.Property(e => e.SsWNrLicencji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_NrLicencji");
            entity.Property(e => e.SsWNrModFiskalnego)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_NrModFiskalnego");
            entity.Property(e => e.SsWNrSeryjny)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_NrSeryjny");
            entity.Property(e => e.SsWNrUdt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_NrUDT");
            entity.Property(e => e.SsWNrWersji)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_NrWersji");
            entity.Property(e => e.SsWNumer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Numer");
            entity.Property(e => e.SsWOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsW_OpeFirma");
            entity.Property(e => e.SsWOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_OpeLp");
            entity.Property(e => e.SsWOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsW_OpeNumer");
            entity.Property(e => e.SsWOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_OpeTyp");
            entity.Property(e => e.SsWOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Opis");
            entity.Property(e => e.SsWPamiec)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Pamiec");
            entity.Property(e => e.SsWParId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_ParId");
            entity.Property(e => e.SsWPlytaGlowna)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_PlytaGlowna");
            entity.Property(e => e.SsWProcesor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Procesor");
            entity.Property(e => e.SsWProducentId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_ProducentId");
            entity.Property(e => e.SsWPrzegladAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("SsW_PrzegladAktywne");
            entity.Property(e => e.SsWRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_RodzajId");
            entity.Property(e => e.SsWRodzajPaliwaId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_RodzajPaliwaId");
            entity.Property(e => e.SsWRodzajVrsid)
                .HasDefaultValue(0)
                .HasColumnName("SsW_RodzajVRSId");
            entity.Property(e => e.SsWRokProdukcji)
                .HasDefaultValue(0)
                .HasColumnName("SsW_RokProdukcji");
            entity.Property(e => e.SsWSobFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsW_SObFirma");
            entity.Property(e => e.SsWSobLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_SObLp");
            entity.Property(e => e.SsWSobNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsW_SObNumer");
            entity.Property(e => e.SsWSobTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_SObTyp");
            entity.Property(e => e.SsWTstamp)
                .HasDefaultValue(0)
                .HasColumnName("SsW_TStamp");
            entity.Property(e => e.SsWTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("SsW_TwrFirma");
            entity.Property(e => e.SsWTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_TwrLp");
            entity.Property(e => e.SsWTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SsW_TwrNumer");
            entity.Property(e => e.SsWTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SsW_TwrTyp");
            entity.Property(e => e.SsWTypLiczydlaId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_TypLiczydlaId");
            entity.Property(e => e.SsWTypUrzadzeniaId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_TypUrzadzeniaId");
            entity.Property(e => e.SsWWartosc1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc1");
            entity.Property(e => e.SsWWartosc10)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc10");
            entity.Property(e => e.SsWWartosc11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc11");
            entity.Property(e => e.SsWWartosc12)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc12");
            entity.Property(e => e.SsWWartosc13)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc13");
            entity.Property(e => e.SsWWartosc14)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc14");
            entity.Property(e => e.SsWWartosc15)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc15");
            entity.Property(e => e.SsWWartosc2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc2");
            entity.Property(e => e.SsWWartosc3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc3");
            entity.Property(e => e.SsWWartosc4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc4");
            entity.Property(e => e.SsWWartosc5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc5");
            entity.Property(e => e.SsWWartosc6)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc6");
            entity.Property(e => e.SsWWartosc7)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc7");
            entity.Property(e => e.SsWWartosc8)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc8");
            entity.Property(e => e.SsWWartosc9)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_Wartosc9");
            entity.Property(e => e.SsWWersjaOprogramowania)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SsW_WersjaOprogramowania");
            entity.Property(e => e.SsWWymId)
                .HasDefaultValue(0)
                .HasColumnName("SsW_WymId");

            entity.HasOne(d => d.SsWKntNumerNavigation).WithMany(p => p.SrsWyposazenia)
                .HasForeignKey(d => d.SsWKntNumer)
                .HasConstraintName("FK_SSWKontrahent");
        });

        modelBuilder.Entity<SrtDokZakupu>(entity =>
        {
            entity.HasKey(e => new { e.SdzDokTyp, e.SdzDokNumer, e.SdzSrtNumer }).HasName("SDZ_Primary");

            entity.ToTable("SrtDokZakupu", "CDN", tb => tb.HasTrigger("SrtDokZakupu_InsertUpdateHandler"));

            entity.HasIndex(e => e.SdzSrtNumer, "SDZSrtNumer");

            entity.Property(e => e.SdzDokTyp).HasColumnName("SDZ_DokTyp");
            entity.Property(e => e.SdzDokNumer).HasColumnName("SDZ_DokNumer");
            entity.Property(e => e.SdzSrtNumer).HasColumnName("SDZ_SrtNumer");
            entity.Property(e => e.SdzStronaPowiazania)
                .HasDefaultValue((byte)0)
                .HasColumnName("SDZ_StronaPowiazania");

            entity.HasOne(d => d.SdzSrtNumerNavigation).WithMany(p => p.SrtDokZakupus)
                .HasForeignKey(d => d.SdzSrtNumer)
                .HasConstraintName("FK_SDZSrtNumer");
        });

        modelBuilder.Entity<SrtGrupy>(entity =>
        {
            entity.HasKey(e => new { e.SrGGidtyp, e.SrGGidnumer, e.SrGGrOtyp, e.SrGGrOnumer }).HasName("SrG_Primary");

            entity.ToTable("SrtGrupy", "CDN", tb =>
                {
                    tb.HasTrigger("SrtGrupyDelete_CzasModyfikacji");
                    tb.HasTrigger("SrtGrupyInsertUpdate_CzasModyfikacji");
                    tb.HasTrigger("SrtGrupy_DeleteHandler");
                    tb.HasTrigger("SrtLinkiDelete");
                    tb.HasTrigger("SrtLinkiInsert");
                    tb.HasTrigger("SrtLinkiUpdate");
                });

            entity.HasIndex(e => new { e.SrGGrOtyp, e.SrGGrOnumer, e.SrGGidtyp, e.SrGAkronim }, "SrGAkronim").IsUnique();

            entity.Property(e => e.SrGGidtyp).HasColumnName("SrG_GIDTyp");
            entity.Property(e => e.SrGGidnumer).HasColumnName("SrG_GIDNumer");
            entity.Property(e => e.SrGGrOtyp).HasColumnName("SrG_GrOTyp");
            entity.Property(e => e.SrGGrOnumer).HasColumnName("SrG_GrONumer");
            entity.Property(e => e.SrGAkronim)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrG_Akronim");
            entity.Property(e => e.SrGCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("SrG_CzasModyfikacji");
            entity.Property(e => e.SrGGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SrG_GIDFirma");
            entity.Property(e => e.SrGGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrG_GIDLp");
            entity.Property(e => e.SrGGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("SrG_GrOFirma");
            entity.Property(e => e.SrGGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrG_GrOLp");
        });

        modelBuilder.Entity<SrtGrupyDom>(entity =>
        {
            entity.HasKey(e => new { e.SgdGidtyp, e.SgdGidnumer }).HasName("SGD_Primary");

            entity.ToTable("SrtGrupyDom", "CDN");

            entity.Property(e => e.SgdGidtyp).HasColumnName("SGD_GIDTyp");
            entity.Property(e => e.SgdGidnumer).HasColumnName("SGD_GIDNumer");
            entity.Property(e => e.SgdGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SGD_GIDFirma");
            entity.Property(e => e.SgdGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SGD_GIDLp");
            entity.Property(e => e.SgdGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("SGD_GrOFirma");
            entity.Property(e => e.SgdGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SGD_GrOLp");
            entity.Property(e => e.SgdGrOnumer)
                .HasDefaultValue(0)
                .HasColumnName("SGD_GrONumer");
            entity.Property(e => e.SgdGrOtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SGD_GrOTyp");
            entity.Property(e => e.SgdKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SGD_Kod");
        });

        modelBuilder.Entity<SrtHistElem>(entity =>
        {
            entity.HasKey(e => new { e.SheGidnumer, e.SheGidlp }).HasName("SHE_Primary");

            entity.ToTable("SrtHistElem", "CDN", tb =>
                {
                    tb.HasTrigger("SrtHistElem_DeleteHandler");
                    tb.HasTrigger("SrtHistElem_DeleteZestNag");
                    tb.HasTrigger("SrtHistElem_Delete_TraVatClear");
                    tb.HasTrigger("SrtHistElem_InsertUpdateHandler");
                    tb.HasTrigger("SrtHistElem_KontrolaPrzesunieciaElemZestawu_Delete");
                    tb.HasTrigger("SrtHistElem_UnikalnoscSrtSze_InsertUpdate");
                });

            entity.HasIndex(e => new { e.SheItaid, e.SheIaelp }, "SHEArkuszInw");

            entity.HasIndex(e => new { e.SheKnDnumer, e.SheKnDtyp }, "SHEKnt");

            entity.HasIndex(e => e.ShePrcNumer, "SHEPrc");

            entity.HasIndex(e => e.SheSzeid, "SHESZEId");

            entity.HasIndex(e => new { e.SheSrtNumer, e.SheData, e.SheSrtLp }, "SHESrtData");

            entity.HasIndex(e => new { e.SheSzeid, e.SheData, e.SheSzelp }, "SHESzeData");

            entity.HasIndex(e => new { e.SheGidtyp, e.SheSrtTyp, e.SheSrtNumer, e.SheLikwidacja }, "SHEZlikw");

            entity.Property(e => e.SheGidnumer).HasColumnName("SHE_GIDNumer");
            entity.Property(e => e.SheGidlp).HasColumnName("SHE_GIDLp");
            entity.Property(e => e.SheAmpumorzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_AMPUmorzenie");
            entity.Property(e => e.SheAuto)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Auto");
            entity.Property(e => e.SheData)
                .HasDefaultValue(0)
                .HasColumnName("SHE_Data");
            entity.Property(e => e.SheDataZap)
                .HasDefaultValue(0)
                .HasColumnName("SHE_DataZap");
            entity.Property(e => e.SheDwutorowosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Dwutorowosc");
            entity.Property(e => e.SheGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SHE_GIDFirma");
            entity.Property(e => e.SheGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_GIDTyp");
            entity.Property(e => e.SheIaelp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_IAELp");
            entity.Property(e => e.SheItaid)
                .HasDefaultValue(0)
                .HasColumnName("SHE_ITAId");
            entity.Property(e => e.SheKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("SHE_KnDFirma");
            entity.Property(e => e.SheKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_KnDLp");
            entity.Property(e => e.SheKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("SHE_KnDNumer");
            entity.Property(e => e.SheKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_KnDTyp");
            entity.Property(e => e.SheKurs)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Kurs");
            entity.Property(e => e.SheKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("SHE_KursL");
            entity.Property(e => e.SheKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("SHE_KursM");
            entity.Property(e => e.SheKwotaAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAm");
            entity.Property(e => e.SheKwotaAmLikw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAm_Likw");
            entity.Property(e => e.SheKwotaAmLikwSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAm_LikwSys");
            entity.Property(e => e.SheKwotaAmSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAmSys");
            entity.Property(e => e.SheKwotaAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAmTor3");
            entity.Property(e => e.SheKwotaAmTor3Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAmTor3Sys");
            entity.Property(e => e.SheKwotaAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAmTor4");
            entity.Property(e => e.SheKwotaAmTor4Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAmTor4Sys");
            entity.Property(e => e.SheKwotaAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAmTor5");
            entity.Property(e => e.SheKwotaAmTor5Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaAmTor5Sys");
            entity.Property(e => e.SheKwotaInw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaInw");
            entity.Property(e => e.SheKwotaInwSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaInwSys");
            entity.Property(e => e.SheKwotaUm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaUm");
            entity.Property(e => e.SheKwotaUmSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaUmSys");
            entity.Property(e => e.SheKwotaZlom)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlom");
            entity.Property(e => e.SheKwotaZlomAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomAm");
            entity.Property(e => e.SheKwotaZlomAmSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomAmSys");
            entity.Property(e => e.SheKwotaZlomSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomSys");
            entity.Property(e => e.SheKwotaZlomTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomTor3");
            entity.Property(e => e.SheKwotaZlomTor3Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomTor3Sys");
            entity.Property(e => e.SheKwotaZlomTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomTor4");
            entity.Property(e => e.SheKwotaZlomTor4Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomTor4Sys");
            entity.Property(e => e.SheKwotaZlomTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomTor5");
            entity.Property(e => e.SheKwotaZlomTor5Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_KwotaZlomTor5Sys");
            entity.Property(e => e.SheLikwidacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Likwidacja");
            entity.Property(e => e.SheLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_Lp");
            entity.Property(e => e.SheMetodaAm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MetodaAm");
            entity.Property(e => e.SheMetodaAmTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MetodaAmTor3");
            entity.Property(e => e.SheMetodaAmTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MetodaAmTor4");
            entity.Property(e => e.SheMetodaAmTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MetodaAmTor5");
            entity.Property(e => e.SheMetodaUm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MetodaUm");
            entity.Property(e => e.SheMiejsceUzyw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHE_MiejsceUzyw");
            entity.Property(e => e.SheMsObow)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MsObow");
            entity.Property(e => e.SheMsObowAm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MsObowAm");
            entity.Property(e => e.SheMsObowAmTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MsObowAmTor3");
            entity.Property(e => e.SheMsObowAmTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MsObowAmTor4");
            entity.Property(e => e.SheMsObowAmTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_MsObowAmTor5");
            entity.Property(e => e.SheNaPodstawieElementow)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_NaPodstawieElementow");
            entity.Property(e => e.SheNkupkwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_NKUPKwota");
            entity.Property(e => e.SheNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_NrKursu");
            entity.Property(e => e.SheOpis)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHE_Opis");
            entity.Property(e => e.SheOrgWaluta)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHE_OrgWaluta");
            entity.Property(e => e.SheParGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_ParGIDLp");
            entity.Property(e => e.ShePodstBilans)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_PodstBilans");
            entity.Property(e => e.ShePodstPodat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_PodstPodat");
            entity.Property(e => e.ShePodstTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_PodstTor3");
            entity.Property(e => e.ShePodstTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_PodstTor4");
            entity.Property(e => e.ShePodstTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_PodstTor5");
            entity.Property(e => e.ShePodstawaAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAm");
            entity.Property(e => e.ShePodstawaAmSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAmSys");
            entity.Property(e => e.ShePodstawaAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAmTor3");
            entity.Property(e => e.ShePodstawaAmTor3Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAmTor3Sys");
            entity.Property(e => e.ShePodstawaAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAmTor4");
            entity.Property(e => e.ShePodstawaAmTor4Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAmTor4Sys");
            entity.Property(e => e.ShePodstawaAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAmTor5");
            entity.Property(e => e.ShePodstawaAmTor5Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHE_PodstawaAmTor5Sys");
            entity.Property(e => e.ShePrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("SHE_PrcFirma");
            entity.Property(e => e.ShePrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_PrcLp");
            entity.Property(e => e.ShePrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("SHE_PrcNumer");
            entity.Property(e => e.ShePrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_PrcTyp");
            entity.Property(e => e.ShePrzesShelp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_PrzesSHELp");
            entity.Property(e => e.ShePrzesShenumer)
                .HasDefaultValue(0)
                .HasColumnName("SHE_PrzesSHENumer");
            entity.Property(e => e.ShePrzesStrona)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_PrzesStrona");
            entity.Property(e => e.ShePrzeszacowanieUstawowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_PrzeszacowanieUstawowe");
            entity.Property(e => e.SheSktid)
                .HasDefaultValue(0)
                .HasColumnName("SHE_SKTId");
            entity.Property(e => e.SheSrtFirma)
                .HasDefaultValue(0)
                .HasColumnName("SHE_SrtFirma");
            entity.Property(e => e.SheSrtLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_SrtLp");
            entity.Property(e => e.SheSrtNumer)
                .HasDefaultValue(0)
                .HasColumnName("SHE_SrtNumer");
            entity.Property(e => e.SheSrtTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_SrtTyp");
            entity.Property(e => e.SheSrtzestNumer)
                .HasDefaultValue(0)
                .HasColumnName("SHE_SRTZestNumer");
            entity.Property(e => e.SheSstlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_SSTLp");
            entity.Property(e => e.SheSstnumer)
                .HasDefaultValue(0)
                .HasColumnName("SHE_SSTNumer");
            entity.Property(e => e.SheSstprzylaczenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_SSTPrzylaczenie");
            entity.Property(e => e.SheStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_Stawka");
            entity.Property(e => e.SheStawkaAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_StawkaAm");
            entity.Property(e => e.SheStawkaAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_StawkaAmTor3");
            entity.Property(e => e.SheStawkaAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_StawkaAmTor4");
            entity.Property(e => e.SheStawkaAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_StawkaAmTor5");
            entity.Property(e => e.SheSzeid)
                .HasDefaultValue(0)
                .HasColumnName("SHE_SZEId");
            entity.Property(e => e.SheSzelp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_SZELp");
            entity.Property(e => e.SheTor)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Tor");
            entity.Property(e => e.SheTor3Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Tor3_Lp");
            entity.Property(e => e.SheTor4Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Tor4_Lp");
            entity.Property(e => e.SheTor5Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_Tor5_Lp");
            entity.Property(e => e.SheTorAmLp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_TorAm_Lp");
            entity.Property(e => e.SheTorUmLp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_TorUm_Lp");
            entity.Property(e => e.SheUjecieOpisA)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHE_UjecieOpisA");
            entity.Property(e => e.SheWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHE_Waluta");
            entity.Property(e => e.SheWartRezyd)
                .HasDefaultValue((short)0)
                .HasColumnName("SHE_WartRezyd");
            entity.Property(e => e.SheWspAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspAm");
            entity.Property(e => e.SheWspAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspAmTor3");
            entity.Property(e => e.SheWspAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspAmTor4");
            entity.Property(e => e.SheWspAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspAmTor5");
            entity.Property(e => e.SheWspDegr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspDegr");
            entity.Property(e => e.SheWspDegrAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspDegrAm");
            entity.Property(e => e.SheWspDegrTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspDegrTor3");
            entity.Property(e => e.SheWspDegrTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspDegrTor4");
            entity.Property(e => e.SheWspDegrTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspDegrTor5");
            entity.Property(e => e.SheWspUmAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SHE_WspUmAm");

            entity.HasOne(d => d.SrtHistNag).WithMany(p => p.SrtHistElems)
                .HasForeignKey(d => new { d.SheGidtyp, d.SheGidnumer })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SHEPrimary");
        });

        modelBuilder.Entity<SrtHistNag>(entity =>
        {
            entity.HasKey(e => new { e.ShnGidtyp, e.ShnGidnumer }).HasName("SHN_Primary");

            entity.ToTable("SrtHistNag", "CDN", tb =>
                {
                    tb.HasTrigger("SrtHistNag_DeleteHandler");
                    tb.HasTrigger("SrtHistNag_InsertUpdateHandler");
                    tb.HasTrigger("SrtHistNag_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.ShnData, e.ShnGidtyp, e.ShnSeria, e.ShnNr, e.ShnPoprzedniGidtyp }, "SHNData").IsUnique();

            entity.HasIndex(e => e.ShnItnid, "SHNInwentaryzacjaIMT");

            entity.HasIndex(e => new { e.ShnGidtyp, e.ShnRokO, e.ShnSeria, e.ShnPoprzedniGidtyp, e.ShnNr }, "SHNNumer").IsUnique();

            entity.HasIndex(e => new { e.ShnSchTyp, e.ShnSchNumer }, "SHNSchemat");

            entity.Property(e => e.ShnGidtyp).HasColumnName("SHN_GIDTyp");
            entity.Property(e => e.ShnGidnumer)
                .ValueGeneratedOnAdd()
                .HasColumnName("SHN_GIDNumer");
            entity.Property(e => e.ShnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("SHN_Aktywny");
            entity.Property(e => e.ShnCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHN_CechaOpis");
            entity.Property(e => e.ShnData)
                .HasDefaultValue(0)
                .HasColumnName("SHN_Data");
            entity.Property(e => e.ShnDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("SHN_DataKsiegowania");
            entity.Property(e => e.ShnDataObowiazywania)
                .HasDefaultValue(0)
                .HasColumnName("SHN_DataObowiazywania");
            entity.Property(e => e.ShnDokId)
                .HasDefaultValue(0)
                .HasColumnName("SHN_DokID");
            entity.Property(e => e.ShnDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHN_Dziennik");
            entity.Property(e => e.ShnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SHN_GIDFirma");
            entity.Property(e => e.ShnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_GIDLp");
            entity.Property(e => e.ShnItnid)
                .HasDefaultValue(0)
                .HasColumnName("SHN_ITNId");
            entity.Property(e => e.ShnKorFirma)
                .HasDefaultValue(0)
                .HasColumnName("SHN_KorFirma");
            entity.Property(e => e.ShnKorLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_KorLp");
            entity.Property(e => e.ShnKorNumer)
                .HasDefaultValue(0)
                .HasColumnName("SHN_KorNumer");
            entity.Property(e => e.ShnKorTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_KorTyp");
            entity.Property(e => e.ShnKwotaAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAm");
            entity.Property(e => e.ShnKwotaAmSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAmSys");
            entity.Property(e => e.ShnKwotaAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAmTor3");
            entity.Property(e => e.ShnKwotaAmTor3Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAmTor3Sys");
            entity.Property(e => e.ShnKwotaAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAmTor4");
            entity.Property(e => e.ShnKwotaAmTor4Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAmTor4Sys");
            entity.Property(e => e.ShnKwotaAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAmTor5");
            entity.Property(e => e.ShnKwotaAmTor5Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaAmTor5Sys");
            entity.Property(e => e.ShnKwotaInw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaInw");
            entity.Property(e => e.ShnKwotaInwSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaInwSys");
            entity.Property(e => e.ShnKwotaUm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaUm");
            entity.Property(e => e.ShnKwotaUmSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_KwotaUmSys");
            entity.Property(e => e.ShnMiejsceUzyt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHN_MiejsceUzyt");
            entity.Property(e => e.ShnMsObow)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_MsObow");
            entity.Property(e => e.ShnMsObowAm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_MsObowAm");
            entity.Property(e => e.ShnMsObowAmTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_MsObowAmTor3");
            entity.Property(e => e.ShnMsObowAmTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_MsObowAmTor4");
            entity.Property(e => e.ShnMsObowAmTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_MsObowAmTor5");
            entity.Property(e => e.ShnNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_NieKsiegowac");
            entity.Property(e => e.ShnNr)
                .HasDefaultValue(0)
                .HasColumnName("SHN_Nr");
            entity.Property(e => e.ShnOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("SHN_OpeFirma");
            entity.Property(e => e.ShnOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_OpeLp");
            entity.Property(e => e.ShnOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("SHN_OpeNumer");
            entity.Property(e => e.ShnOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_OpeTyp");
            entity.Property(e => e.ShnOpis)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHN_Opis");
            entity.Property(e => e.ShnPodsawaAmSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodsawaAmSys");
            entity.Property(e => e.ShnPodstawaAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodstawaAm");
            entity.Property(e => e.ShnPodstawaAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodstawaAmTor3");
            entity.Property(e => e.ShnPodstawaAmTor3Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodstawaAmTor3Sys");
            entity.Property(e => e.ShnPodstawaAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodstawaAmTor4");
            entity.Property(e => e.ShnPodstawaAmTor4Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodstawaAmTor4Sys");
            entity.Property(e => e.ShnPodstawaAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodstawaAmTor5");
            entity.Property(e => e.ShnPodstawaAmTor5Sys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("SHN_PodstawaAmTor5Sys");
            entity.Property(e => e.ShnPoprzedniGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_PoprzedniGIDTyp");
            entity.Property(e => e.ShnPoprzedniSymbDok)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHN_PoprzedniSymbDok");
            entity.Property(e => e.ShnPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("SHN_PrcFirma");
            entity.Property(e => e.ShnPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_PrcLp");
            entity.Property(e => e.ShnPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("SHN_PrcNumer");
            entity.Property(e => e.ShnPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_PrcTyp");
            entity.Property(e => e.ShnRokO)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_RokO");
            entity.Property(e => e.ShnSchFirma)
                .HasDefaultValue(0)
                .HasColumnName("SHN_SchFirma");
            entity.Property(e => e.ShnSchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_SchLp");
            entity.Property(e => e.ShnSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("SHN_SchNumer");
            entity.Property(e => e.ShnSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_SchTyp");
            entity.Property(e => e.ShnSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHN_Seria");
            entity.Property(e => e.ShnUjecieOpisA)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_UjecieOpisA");
            entity.Property(e => e.ShnWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SHN_WsDziennik");
            entity.Property(e => e.ShnWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("SHN_WsSCHNumer");
            entity.Property(e => e.ShnWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SHN_WsSCHTyp");
            entity.Property(e => e.ShnWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_WsStosujDziennik");
            entity.Property(e => e.ShnWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_WsStosujSchemat");
            entity.Property(e => e.ShnZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("SHN_Zaksiegowano");
        });

        modelBuilder.Entity<SrtKarty>(entity =>
        {
            entity.HasKey(e => e.SrtGidnumer).HasName("Srt_Primary");

            entity.ToTable("SrtKarty", "CDN", tb =>
                {
                    tb.HasTrigger("SrtEtykietaKod_KontrolaDuplikacji");
                    tb.HasTrigger("SrtKarty_DeleteAtrybutyHist");
                    tb.HasTrigger("SrtKarty_DeleteHandler");
                    tb.HasTrigger("SrtKarty_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SrtSamId, "SamId");

            entity.HasIndex(e => e.SrtAkronim, "SrtAkronim").IsUnique();

            entity.HasIndex(e => e.SrtEtykietaKod, "SrtEtykietaKod");

            entity.HasIndex(e => e.SrtKrst, "SrtKRST");

            entity.HasIndex(e => e.SrtSktid, "SrtKST");

            entity.HasIndex(e => new { e.SrtKnDnumer, e.SrtKnDtyp }, "SrtKnt");

            entity.HasIndex(e => new { e.SrtNazwa, e.SrtGidnumer }, "SrtNazwa");

            entity.HasIndex(e => new { e.SrtRodzaj, e.SrtKsiega, e.SrtNrInw }, "SrtNrInw").IsUnique();

            entity.HasIndex(e => e.SrtPrcNumer, "SrtPrc");

            entity.Property(e => e.SrtGidnumer).HasColumnName("Srt_GIDNumer");
            entity.Property(e => e.SrtAkronim)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Akronim");
            entity.Property(e => e.SrtAtr1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Atr1");
            entity.Property(e => e.SrtAtr2)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Atr2");
            entity.Property(e => e.SrtAtr3)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Atr3");
            entity.Property(e => e.SrtAtr4)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Atr4");
            entity.Property(e => e.SrtData)
                .HasDefaultValue(0)
                .HasColumnName("Srt_Data");
            entity.Property(e => e.SrtDataEksp)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataEksp");
            entity.Property(e => e.SrtDataLikw)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataLikw");
            entity.Property(e => e.SrtDataRozp)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataRozp");
            entity.Property(e => e.SrtDataRozpAm)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataRozpAm");
            entity.Property(e => e.SrtDataRozpTor3)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataRozpTor3");
            entity.Property(e => e.SrtDataRozpTor4)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataRozpTor4");
            entity.Property(e => e.SrtDataRozpTor5)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataRozpTor5");
            entity.Property(e => e.SrtDataZak)
                .HasDefaultValue(0)
                .HasColumnName("Srt_DataZak");
            entity.Property(e => e.SrtDokumentWedycji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_DokumentWEdycji");
            entity.Property(e => e.SrtDwutorowosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Dwutorowosc");
            entity.Property(e => e.SrtEtykieta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Etykieta");
            entity.Property(e => e.SrtEtykietaKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_EtykietaKod");
            entity.Property(e => e.SrtGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Srt_GIDFirma");
            entity.Property(e => e.SrtGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_GIDLp");
            entity.Property(e => e.SrtGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_GIDTyp");
            entity.Property(e => e.SrtKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("Srt_KnDFirma");
            entity.Property(e => e.SrtKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_KnDLp");
            entity.Property(e => e.SrtKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("Srt_KnDNumer");
            entity.Property(e => e.SrtKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_KnDTyp");
            entity.Property(e => e.SrtKontoAmB)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoAmB");
            entity.Property(e => e.SrtKontoAmP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoAmP");
            entity.Property(e => e.SrtKontoAmTor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoAmTor3");
            entity.Property(e => e.SrtKontoAmTor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoAmTor4");
            entity.Property(e => e.SrtKontoAmTor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoAmTor5");
            entity.Property(e => e.SrtKontoGl)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoGl");
            entity.Property(e => e.SrtKontoGlP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoGlP");
            entity.Property(e => e.SrtKontoGlTor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoGlTor3");
            entity.Property(e => e.SrtKontoGlTor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoGlTor4");
            entity.Property(e => e.SrtKontoGlTor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoGlTor5");
            entity.Property(e => e.SrtKontoStk)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoSTK");
            entity.Property(e => e.SrtKontoStkp)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoSTKP");
            entity.Property(e => e.SrtKontoStktor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoSTKTor3");
            entity.Property(e => e.SrtKontoStktor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoSTKTor4");
            entity.Property(e => e.SrtKontoStktor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoSTKTor5");
            entity.Property(e => e.SrtKontoUm)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoUm");
            entity.Property(e => e.SrtKontoUmP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoUmP");
            entity.Property(e => e.SrtKontoUmTor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoUmTor3");
            entity.Property(e => e.SrtKontoUmTor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoUmTor4");
            entity.Property(e => e.SrtKontoUmTor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KontoUmTor5");
            entity.Property(e => e.SrtKrst)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_KRST");
            entity.Property(e => e.SrtKsiega)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Ksiega");
            entity.Property(e => e.SrtKwotaZlom)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("Srt_KwotaZlom");
            entity.Property(e => e.SrtKwotaZlomAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("Srt_KwotaZlomAm");
            entity.Property(e => e.SrtKwotaZlomTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("Srt_KwotaZlomTor3");
            entity.Property(e => e.SrtKwotaZlomTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("Srt_KwotaZlomTor4");
            entity.Property(e => e.SrtKwotaZlomTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("Srt_KwotaZlomTor5");
            entity.Property(e => e.SrtKwotaZlomWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("Srt_KwotaZlomWal");
            entity.Property(e => e.SrtLastModC)
                .HasDefaultValue(0)
                .HasColumnName("Srt_LastModC");
            entity.Property(e => e.SrtLastModL)
                .HasDefaultValue(0)
                .HasColumnName("Srt_LastModL");
            entity.Property(e => e.SrtLastModO)
                .HasDefaultValue(0)
                .HasColumnName("Srt_LastModO");
            entity.Property(e => e.SrtLikwFirma)
                .HasDefaultValue(0)
                .HasColumnName("Srt_LikwFirma");
            entity.Property(e => e.SrtLikwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_LikwLp");
            entity.Property(e => e.SrtLikwNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_LikwNrDok");
            entity.Property(e => e.SrtLikwNumer)
                .HasDefaultValue(0)
                .HasColumnName("Srt_LikwNumer");
            entity.Property(e => e.SrtLikwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_LikwTyp");
            entity.Property(e => e.SrtMajatekObcy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MajatekObcy");
            entity.Property(e => e.SrtMetodaAm)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MetodaAm");
            entity.Property(e => e.SrtMetodaTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MetodaTor3");
            entity.Property(e => e.SrtMetodaTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MetodaTor4");
            entity.Property(e => e.SrtMetodaTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MetodaTor5");
            entity.Property(e => e.SrtMetodaUm)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MetodaUm");
            entity.Property(e => e.SrtMiejsceUzyw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_MiejsceUzyw");
            entity.Property(e => e.SrtMsNaliczania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MsNaliczania");
            entity.Property(e => e.SrtMsNaliczaniaAm)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MsNaliczaniaAm");
            entity.Property(e => e.SrtMsNaliczaniaAmTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MsNaliczaniaAmTor3");
            entity.Property(e => e.SrtMsNaliczaniaAmTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MsNaliczaniaAmTor4");
            entity.Property(e => e.SrtMsNaliczaniaAmTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_MsNaliczaniaAmTor5");
            entity.Property(e => e.SrtNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Nazwa");
            entity.Property(e => e.SrtNkupograniczenie)
                .HasDefaultValue(0)
                .HasColumnName("Srt_NKUPOgraniczenie");
            entity.Property(e => e.SrtNrEwid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_NrEwid");
            entity.Property(e => e.SrtNrInw)
                .HasDefaultValue(0)
                .HasColumnName("Srt_NrInw");
            entity.Property(e => e.SrtOdliczeniaVat).HasColumnName("Srt_OdliczeniaVat");
            entity.Property(e => e.SrtOgraniczenieOdl)
                .HasDefaultValue(0)
                .HasColumnName("Srt_OgraniczenieOdl");
            entity.Property(e => e.SrtOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("Srt_OpeFirma");
            entity.Property(e => e.SrtOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_OpeLp");
            entity.Property(e => e.SrtOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("Srt_OpeNumer");
            entity.Property(e => e.SrtOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_OpeTyp");
            entity.Property(e => e.SrtOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Opis");
            entity.Property(e => e.SrtPodlegaAmp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_PodlegaAMP");
            entity.Property(e => e.SrtPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("Srt_PrcFirma");
            entity.Property(e => e.SrtPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_PrcLp");
            entity.Property(e => e.SrtPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("Srt_PrcNumer");
            entity.Property(e => e.SrtPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_PrcTyp");
            entity.Property(e => e.SrtRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Rodzaj");
            entity.Property(e => e.SrtSamId)
                .HasDefaultValue(0)
                .HasColumnName("Srt_SamId");
            entity.Property(e => e.SrtSezonowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Sezonowy");
            entity.Property(e => e.SrtSktid)
                .HasDefaultValue(0)
                .HasColumnName("Srt_SKTId");
            entity.Property(e => e.SrtSposobLikw)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_SposobLikw");
            entity.Property(e => e.SrtSposobZak)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_SposobZak");
            entity.Property(e => e.SrtStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_Stawka");
            entity.Property(e => e.SrtStawkaAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_StawkaAm");
            entity.Property(e => e.SrtStawkaTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_StawkaTor3");
            entity.Property(e => e.SrtStawkaTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_StawkaTor4");
            entity.Property(e => e.SrtStawkaTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_StawkaTor5");
            entity.Property(e => e.SrtTor3Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Tor3_Lp");
            entity.Property(e => e.SrtTor4Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Tor4_Lp");
            entity.Property(e => e.SrtTor5Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Tor5_Lp");
            entity.Property(e => e.SrtTorAmLp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_TorAm_Lp");
            entity.Property(e => e.SrtTorUmLp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_TorUm_Lp");
            entity.Property(e => e.SrtUjecieDwuT)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_UjecieDwuT");
            entity.Property(e => e.SrtUjecieJednoT)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_UjecieJednoT");
            entity.Property(e => e.SrtUjecieOpisA)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_UjecieOpisA");
            entity.Property(e => e.SrtUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_URL");
            entity.Property(e => e.SrtWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_Waluta");
            entity.Property(e => e.SrtWalutaKwotaZlom)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_WalutaKwotaZlom");
            entity.Property(e => e.SrtWbudowie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_WBudowie");
            entity.Property(e => e.SrtWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Wsk");
            entity.Property(e => e.SrtWspAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspAm");
            entity.Property(e => e.SrtWspAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspAmTor3");
            entity.Property(e => e.SrtWspAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspAmTor4");
            entity.Property(e => e.SrtWspAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspAmTor5");
            entity.Property(e => e.SrtWspDegr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspDegr");
            entity.Property(e => e.SrtWspDegrAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspDegrAm");
            entity.Property(e => e.SrtWspDegrTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspDegrTor3");
            entity.Property(e => e.SrtWspDegrTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspDegrTor4");
            entity.Property(e => e.SrtWspDegrTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspDegrTor5");
            entity.Property(e => e.SrtWspUmAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Srt_WspUmAm");
            entity.Property(e => e.SrtZakFirma)
                .HasDefaultValue(0)
                .HasColumnName("Srt_ZakFirma");
            entity.Property(e => e.SrtZakLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_ZakLp");
            entity.Property(e => e.SrtZakNrDok)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Srt_ZakNrDok");
            entity.Property(e => e.SrtZakNumer)
                .HasDefaultValue(0)
                .HasColumnName("Srt_ZakNumer");
            entity.Property(e => e.SrtZakTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Srt_ZakTyp");
            entity.Property(e => e.SrtZestaw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Srt_Zestaw");
        });

        modelBuilder.Entity<SrtKst>(entity =>
        {
            entity.HasKey(e => e.SktId).HasName("SKT_Primary");

            entity.ToTable("SrtKST", "CDN", tb =>
                {
                    tb.HasTrigger("SrtKST_BlokadaUsunieciaWezla");
                    tb.HasTrigger("SrtKST_DeleteHandler");
                });

            entity.HasIndex(e => e.SktSymbol, "SktSymbol");

            entity.Property(e => e.SktId).HasColumnName("SKT_ID");
            entity.Property(e => e.SktNazwa)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKT_Nazwa");
            entity.Property(e => e.SktParentId)
                .HasDefaultValue(0)
                .HasColumnName("SKT_ParentId");
            entity.Property(e => e.SktPoziom)
                .HasDefaultValue((byte)0)
                .HasColumnName("SKT_Poziom");
            entity.Property(e => e.SktStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SKT_Stawka");
            entity.Property(e => e.SktSymbol)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKT_Symbol");
            entity.Property(e => e.SktWersja)
                .HasDefaultValue((short)0)
                .HasColumnName("SKT_Wersja");
        });

        modelBuilder.Entity<SrtLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SRT_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_SRT_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SrtLinki>(entity =>
        {
            entity.HasKey(e => new { e.SrlGidtyp, e.SrlGidnumer, e.SrlGrOtyp, e.SrlGrOnumer }).HasName("SRL_Primary");

            entity.ToTable("SrtLinki", "CDN");

            entity.Property(e => e.SrlGidtyp).HasColumnName("SRL_GIDTyp");
            entity.Property(e => e.SrlGidnumer).HasColumnName("SRL_GIDNumer");
            entity.Property(e => e.SrlGrOtyp).HasColumnName("SRL_GrOTyp");
            entity.Property(e => e.SrlGrOnumer).HasColumnName("SRL_GrONumer");
            entity.Property(e => e.SrlGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SRL_GIDFirma");
            entity.Property(e => e.SrlGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SRL_GIDLp");
            entity.Property(e => e.SrlGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("SRL_GrOFirma");
            entity.Property(e => e.SrlGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SRL_GrOLp");
            entity.Property(e => e.SrlLiczbaPowtorzen)
                .HasDefaultValue((short)0)
                .HasColumnName("SRL_LiczbaPowtorzen");
            entity.Property(e => e.SrlLisc)
                .HasDefaultValue((short)0)
                .HasColumnName("SRL_Lisc");
            entity.Property(e => e.SrlTstampDataMod)
                .HasDefaultValue(0)
                .HasColumnName("SRL_TStampDataMod");
        });

        modelBuilder.Entity<SrtOpisy>(entity =>
        {
            entity.HasKey(e => new { e.SrOSrtNumer, e.SrOSrtLp }).HasName("SrO_Primary");

            entity.ToTable("SrtOpisy", "CDN");

            entity.Property(e => e.SrOSrtNumer).HasColumnName("SrO_SrtNumer");
            entity.Property(e => e.SrOSrtLp).HasColumnName("SrO_SrtLp");
            entity.Property(e => e.SrOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrO_Opis");
            entity.Property(e => e.SrOSrtFirma)
                .HasDefaultValue(0)
                .HasColumnName("SrO_SrtFirma");
            entity.Property(e => e.SrOSrtTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrO_SrtTyp");
            entity.Property(e => e.SrOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrO_Typ");

            entity.HasOne(d => d.SrOSrtNumerNavigation).WithMany(p => p.SrtOpisies)
                .HasForeignKey(d => d.SrOSrtNumer)
                .HasConstraintName("FK_SrOSrt");
        });

        modelBuilder.Entity<SrtSezon>(entity =>
        {
            entity.HasKey(e => new { e.SezGidnumer, e.SezRok, e.SezMiesiac }).HasName("SEZ_Primary");

            entity.ToTable("SrtSezon", "CDN");

            entity.Property(e => e.SezGidnumer).HasColumnName("SEZ_GIDNumer");
            entity.Property(e => e.SezRok).HasColumnName("SEZ_Rok");
            entity.Property(e => e.SezMiesiac).HasColumnName("SEZ_Miesiac");
            entity.Property(e => e.SezGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("SEZ_GIDFirma");
            entity.Property(e => e.SezGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SEZ_GIDLp");
            entity.Property(e => e.SezGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SEZ_GIDTyp");

            entity.HasOne(d => d.SezGidnumerNavigation).WithMany(p => p.SrtSezons)
                .HasForeignKey(d => d.SezGidnumer)
                .HasConstraintName("FK_SEZPrimary");
        });

        modelBuilder.Entity<SrtWzorce>(entity =>
        {
            entity.HasKey(e => new { e.SrWGrpTyp, e.SrWGrpNumer }).HasName("SrW_Primary");

            entity.ToTable("SrtWzorce", "CDN", tb => tb.HasTrigger("SrtWzorce_DeleteHandler"));

            entity.Property(e => e.SrWGrpTyp).HasColumnName("SrW_GrpTyp");
            entity.Property(e => e.SrWGrpNumer).HasColumnName("SrW_GrpNumer");
            entity.Property(e => e.SrWAkronim)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_Akronim");
            entity.Property(e => e.SrWDwutorowosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_Dwutorowosc");
            entity.Property(e => e.SrWEtykieta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_Etykieta");
            entity.Property(e => e.SrWGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("SrW_GrpFirma");
            entity.Property(e => e.SrWGrpLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrW_GrpLp");
            entity.Property(e => e.SrWKontoAmB)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoAmB");
            entity.Property(e => e.SrWKontoAmP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoAmP");
            entity.Property(e => e.SrWKontoAmTor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoAmTor3");
            entity.Property(e => e.SrWKontoAmTor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoAmTor4");
            entity.Property(e => e.SrWKontoAmTor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoAmTor5");
            entity.Property(e => e.SrWKontoGl)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoGl");
            entity.Property(e => e.SrWKontoGlP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoGlP");
            entity.Property(e => e.SrWKontoGlTor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoGlTor3");
            entity.Property(e => e.SrWKontoGlTor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoGlTor4");
            entity.Property(e => e.SrWKontoGlTor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoGlTor5");
            entity.Property(e => e.SrWKontoStk)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoSTK");
            entity.Property(e => e.SrWKontoStkp)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoSTKP");
            entity.Property(e => e.SrWKontoStktor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoSTKTor3");
            entity.Property(e => e.SrWKontoStktor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoSTKTor4");
            entity.Property(e => e.SrWKontoStktor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoSTKTor5");
            entity.Property(e => e.SrWKontoUm)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoUm");
            entity.Property(e => e.SrWKontoUmP)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoUmP");
            entity.Property(e => e.SrWKontoUmTor3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoUmTor3");
            entity.Property(e => e.SrWKontoUmTor4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoUmTor4");
            entity.Property(e => e.SrWKontoUmTor5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KontoUmTor5");
            entity.Property(e => e.SrWKrst)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_KRST");
            entity.Property(e => e.SrWKsiega)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_Ksiega");
            entity.Property(e => e.SrWMajatekObcy)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MajatekObcy");
            entity.Property(e => e.SrWMetodaAm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MetodaAm");
            entity.Property(e => e.SrWMetodaTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MetodaTor3");
            entity.Property(e => e.SrWMetodaTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MetodaTor4");
            entity.Property(e => e.SrWMetodaTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MetodaTor5");
            entity.Property(e => e.SrWMetodaUm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MetodaUm");
            entity.Property(e => e.SrWMiejsceUzyw)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_MiejsceUzyw");
            entity.Property(e => e.SrWMsNaliczania)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MsNaliczania");
            entity.Property(e => e.SrWMsNaliczaniaAm)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MsNaliczaniaAm");
            entity.Property(e => e.SrWMsNaliczaniaAmTor3)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MsNaliczaniaAmTor3");
            entity.Property(e => e.SrWMsNaliczaniaAmTor4)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MsNaliczaniaAmTor4");
            entity.Property(e => e.SrWMsNaliczaniaAmTor5)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_MsNaliczaniaAmTor5");
            entity.Property(e => e.SrWPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("SrW_PrcFirma");
            entity.Property(e => e.SrWPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrW_PrcLp");
            entity.Property(e => e.SrWPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("SrW_PrcNumer");
            entity.Property(e => e.SrWPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrW_PrcTyp");
            entity.Property(e => e.SrWRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_Rodzaj");
            entity.Property(e => e.SrWSezonowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_Sezonowy");
            entity.Property(e => e.SrWSposobLikw)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_SposobLikw");
            entity.Property(e => e.SrWSposobZak)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_SposobZak");
            entity.Property(e => e.SrWStawka)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_Stawka");
            entity.Property(e => e.SrWStawkaAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_StawkaAm");
            entity.Property(e => e.SrWStawkaTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_StawkaTor3");
            entity.Property(e => e.SrWStawkaTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_StawkaTor4");
            entity.Property(e => e.SrWStawkaTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_StawkaTor5");
            entity.Property(e => e.SrWTor3Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_Tor3_Lp");
            entity.Property(e => e.SrWTor4Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_Tor4_Lp");
            entity.Property(e => e.SrWTor5Lp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_Tor5_Lp");
            entity.Property(e => e.SrWTorAmLp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_TorAm_Lp");
            entity.Property(e => e.SrWTorUmLp)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrW_TorUm_Lp");
            entity.Property(e => e.SrWWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrW_Waluta");
            entity.Property(e => e.SrWWspAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspAm");
            entity.Property(e => e.SrWWspAmTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspAmTor3");
            entity.Property(e => e.SrWWspAmTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspAmTor4");
            entity.Property(e => e.SrWWspAmTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspAmTor5");
            entity.Property(e => e.SrWWspDegr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspDegr");
            entity.Property(e => e.SrWWspDegrAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspDegrAm");
            entity.Property(e => e.SrWWspDegrTor3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspDegrTor3");
            entity.Property(e => e.SrWWspDegrTor4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspDegrTor4");
            entity.Property(e => e.SrWWspDegrTor5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspDegrTor5");
            entity.Property(e => e.SrWWspUmAm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SrW_WspUmAm");
        });

        modelBuilder.Entity<SrtZestElem>(entity =>
        {
            entity.HasKey(e => e.SzeId).HasName("SZE_Primary");

            entity.ToTable("SrtZestElem", "CDN", tb =>
                {
                    tb.HasTrigger("SrtZestElem_DeleteAktualizujSrt");
                    tb.HasTrigger("SrtZestElem_DeleteHandler");
                    tb.HasTrigger("SrtZestElem_UpdateAktualizujSrt");
                });

            entity.HasIndex(e => e.SzeSrtNumer, "SZESrt");

            entity.HasIndex(e => new { e.SzeSrtZestNumer, e.SzeSrtNumer }, "SZEZestaw");

            entity.Property(e => e.SzeId).HasColumnName("SZE_ID");
            entity.Property(e => e.SzeAmortyzacjaBilansowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_AmortyzacjaBilansowa");
            entity.Property(e => e.SzeAmortyzacjaBilansowaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_AmortyzacjaBilansowaSys");
            entity.Property(e => e.SzeAmortyzacjaPodatkowaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_AmortyzacjaPodatkowaSys");
            entity.Property(e => e.SzeAmorytzacjaPodatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_AmorytzacjaPodatkowa");
            entity.Property(e => e.SzeDataEksp)
                .HasDefaultValue(0)
                .HasColumnName("SZE_DataEksp");
            entity.Property(e => e.SzeDataLikw)
                .HasDefaultValue(0)
                .HasColumnName("SZE_DataLikw");
            entity.Property(e => e.SzeDataOdlaczenia)
                .HasDefaultValue(0)
                .HasColumnName("SZE_DataOdlaczenia");
            entity.Property(e => e.SzeDataPrzylaczenia)
                .HasDefaultValue(0)
                .HasColumnName("SZE_DataPrzylaczenia");
            entity.Property(e => e.SzeDataRozp)
                .HasDefaultValue(0)
                .HasColumnName("SZE_DataRozp");
            entity.Property(e => e.SzeDataRozpAm)
                .HasDefaultValue(0)
                .HasColumnName("SZE_DataRozpAm");
            entity.Property(e => e.SzeKurs)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZE_Kurs");
            entity.Property(e => e.SzeKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SZE_KursL");
            entity.Property(e => e.SzeKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("SZE_KursM");
            entity.Property(e => e.SzeNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZE_Nazwa");
            entity.Property(e => e.SzeNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("SZE_NrKursu");
            entity.Property(e => e.SzeOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZE_Opis");
            entity.Property(e => e.SzeOrgWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZE_OrgWaluta");
            entity.Property(e => e.SzePodstawaBilansowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_PodstawaBilansowa");
            entity.Property(e => e.SzePodstawaBilansowaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_PodstawaBilansowaSys");
            entity.Property(e => e.SzePodstawaPodatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_PodstawaPodatkowa");
            entity.Property(e => e.SzePodstawaPodatkowaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZE_PodstawaPodatkowaSys");
            entity.Property(e => e.SzeRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZE_Rodzaj");
            entity.Property(e => e.SzeSrtAkronim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZE_SrtAkronim");
            entity.Property(e => e.SzeSrtNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZE_SrtNumer");
            entity.Property(e => e.SzeSrtZestAkronim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZE_SrtZestAkronim");
            entity.Property(e => e.SzeSrtZestNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZE_SrtZestNumer");
            entity.Property(e => e.SzeTorBilansowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZE_TorBilansowy");
            entity.Property(e => e.SzeTorPodatkowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZE_TorPodatkowy");
            entity.Property(e => e.SzeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZE_Waluta");
        });

        modelBuilder.Entity<SrwCzesciZamienne>(entity =>
        {
            entity.HasKey(e => e.SczId).HasName("SCZ_Primary");

            entity.ToTable("SrwCzesciZamienne", "CDN");

            entity.HasIndex(e => new { e.SczTwrId, e.SczTwrTyp }, "SCZTowar");

            entity.HasIndex(e => e.SczSruId, "SCZUrzadzenie");

            entity.Property(e => e.SczId).HasColumnName("SCZ_Id");
            entity.Property(e => e.SczOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SCZ_Opis");
            entity.Property(e => e.SczSruId)
                .HasDefaultValue(0)
                .HasColumnName("SCZ_SruId");
            entity.Property(e => e.SczTwrId)
                .HasDefaultValue(0)
                .HasColumnName("SCZ_TwrId");
            entity.Property(e => e.SczTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCZ_TwrTyp");

            entity.HasOne(d => d.SczSru).WithMany(p => p.SrwCzesciZamiennes)
                .HasForeignKey(d => d.SczSruId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SCZUrzadzenie");

            entity.HasOne(d => d.SczTwr).WithMany(p => p.SrwCzesciZamiennes)
                .HasForeignKey(d => d.SczTwrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SCZTowar");
        });

        modelBuilder.Entity<SrwObiektyReceptury>(entity =>
        {
            entity.HasKey(e => e.SorId).HasName("SOR_Primary");

            entity.ToTable("SrwObiektyReceptury", "CDN", tb => tb.HasTrigger("SrwObiektyReceptury_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.SorObiTyp, e.SorObiNumer, e.SorSrcId, e.SorSreId }, "SORKeyObiektUni").IsUnique();

            entity.HasIndex(e => new { e.SorObiNumer, e.SorObiTyp }, "SORObiekty");

            entity.HasIndex(e => e.SorSreId, "SORReceptury");

            entity.HasIndex(e => e.SorSrcId, "SORRecepturyCzynnosci");

            entity.Property(e => e.SorId).HasColumnName("SOR_Id");
            entity.Property(e => e.SorObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("SOR_ObiNumer");
            entity.Property(e => e.SorObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SOR_ObiTyp");
            entity.Property(e => e.SorSrcId)
                .HasDefaultValue(0)
                .HasColumnName("SOR_SrcId");
            entity.Property(e => e.SorSreId)
                .HasDefaultValue(0)
                .HasColumnName("SOR_SreId");
        });

        modelBuilder.Entity<SrwPlanDokumenty>(entity =>
        {
            entity.HasKey(e => new { e.SedSppid, e.SedSrUid, e.SedDokTyp, e.SedDokNumer, e.SedDokLp }).HasName("SED_Primary");

            entity.ToTable("SrwPlanDokumenty", "CDN", tb => tb.HasTrigger("SrwPlanDokumenty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.SedDokNumer, e.SedDokLp }, "SEPDokNumerLp");

            entity.Property(e => e.SedSppid).HasColumnName("SED_SPPId");
            entity.Property(e => e.SedSrUid).HasColumnName("SED_SrUId");
            entity.Property(e => e.SedDokTyp).HasColumnName("SED_DokTyp");
            entity.Property(e => e.SedDokNumer).HasColumnName("SED_DokNumer");
            entity.Property(e => e.SedDokLp).HasColumnName("SED_DokLp");
            entity.Property(e => e.SedDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("SED_DokFirma");

            entity.HasOne(d => d.SrwPlanElem).WithMany(p => p.SrwPlanDokumenties)
                .HasForeignKey(d => new { d.SedSppid, d.SedSrUid })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEPPrimary");
        });

        modelBuilder.Entity<SrwPlanElem>(entity =>
        {
            entity.HasKey(e => new { e.SpeSppid, e.SpeSrUid }).HasName("SPE_Primary");

            entity.ToTable("SrwPlanElem", "CDN", tb =>
                {
                    tb.HasTrigger("SrwPlanElem_DeleteHandler");
                    tb.HasTrigger("SrwPlanElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SpeSppid, "SPESPP");

            entity.HasIndex(e => e.SpeSrUid, "SPESrU");

            entity.Property(e => e.SpeSppid).HasColumnName("SPE_SPPId");
            entity.Property(e => e.SpeSrUid).HasColumnName("SPE_SrUId");

            entity.HasOne(d => d.SpeSpp).WithMany(p => p.SrwPlanElems)
                .HasForeignKey(d => d.SpeSppid)
                .HasConstraintName("FK_SPESPP");
        });

        modelBuilder.Entity<SrwPlanPrzegladu>(entity =>
        {
            entity.HasKey(e => e.SppId).HasName("SPP_Primary");

            entity.ToTable("SrwPlanPrzegladu", "CDN", tb =>
                {
                    tb.HasTrigger("SrwPlanPrzegladu_DeleteHandler");
                    tb.HasTrigger("SrwPlanPrzegladu_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SppFrsId, "SPPFrs");

            entity.HasIndex(e => new { e.SppKntTyp, e.SppKntNumer }, "SPPKnt");

            entity.HasIndex(e => new { e.SppRok, e.SppMiesiac, e.SppSeria, e.SppNumer }, "SPPNumer").IsUnique();

            entity.HasIndex(e => e.SppPrjId, "SPPPrj");

            entity.HasIndex(e => e.SppStpid, "SPPSTP");

            entity.HasIndex(e => e.SppSurid, "SPPSUR");

            entity.Property(e => e.SppId).HasColumnName("SPP_Id");
            entity.Property(e => e.SppAktywny)
                .HasDefaultValue(0)
                .HasColumnName("SPP_Aktywny");
            entity.Property(e => e.SppDataW)
                .HasDefaultValue(0)
                .HasColumnName("SPP_DataW");
            entity.Property(e => e.SppDataZ)
                .HasDefaultValue(0)
                .HasColumnName("SPP_DataZ");
            entity.Property(e => e.SppDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPP_DokumentObcy");
            entity.Property(e => e.SppFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("SPP_FrmNumer");
            entity.Property(e => e.SppFrsId)
                .HasDefaultValue(0)
                .HasColumnName("SPP_FrsId");
            entity.Property(e => e.SppKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SPP_KntNumer");
            entity.Property(e => e.SppKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SPP_KntTyp");
            entity.Property(e => e.SppMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SPP_Miesiac");
            entity.Property(e => e.SppNumer)
                .HasDefaultValue(0)
                .HasColumnName("SPP_Numer");
            entity.Property(e => e.SppOkresDo)
                .HasDefaultValue(0)
                .HasColumnName("SPP_OkresDo");
            entity.Property(e => e.SppOkresOd)
                .HasDefaultValue(0)
                .HasColumnName("SPP_OkresOd");
            entity.Property(e => e.SppOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("SPP_OpeNumerW");
            entity.Property(e => e.SppOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("SPP_OpeNumerZ");
            entity.Property(e => e.SppPrjId)
                .HasDefaultValue(0)
                .HasColumnName("SPP_PrjId");
            entity.Property(e => e.SppRok)
                .HasDefaultValue((short)0)
                .HasColumnName("SPP_Rok");
            entity.Property(e => e.SppSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SPP_Seria");
            entity.Property(e => e.SppStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("SPP_Stan");
            entity.Property(e => e.SppStpid)
                .HasDefaultValue(0)
                .HasColumnName("SPP_STPId");
            entity.Property(e => e.SppSurid)
                .HasDefaultValue(0)
                .HasColumnName("SPP_SURId");
        });

        modelBuilder.Entity<SrwReceptury>(entity =>
        {
            entity.HasKey(e => e.SreId).HasName("SRE_Primary");

            entity.ToTable("SrwReceptury", "CDN", tb =>
                {
                    tb.HasTrigger("SrwReceptury_DeleteHandler");
                    tb.HasTrigger("SrwReceptury_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.SreObiTyp, e.SreObiNumer, e.SreKod }, "SREKodObiekt").IsUnique();

            entity.HasIndex(e => new { e.SreObiNumer, e.SreObiTyp }, "SREObiekty");

            entity.Property(e => e.SreId).HasColumnName("SRE_Id");
            entity.Property(e => e.SreArchiwalna)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRE_Archiwalna");
            entity.Property(e => e.SreDataArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("SRE_DataArchiwizacji");
            entity.Property(e => e.SreDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("SRE_DataDodania");
            entity.Property(e => e.SreDataModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("SRE_DataModyfikacji");
            entity.Property(e => e.SreDomyslna)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRE_Domyslna");
            entity.Property(e => e.SreKod)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRE_Kod");
            entity.Property(e => e.SreNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRE_Nazwa");
            entity.Property(e => e.SreObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("SRE_ObiNumer");
            entity.Property(e => e.SreObiTyp)
                .HasDefaultValue(0)
                .HasColumnName("SRE_ObiTyp");
            entity.Property(e => e.SreOpanumer)
                .HasDefaultValue(0)
                .HasColumnName("SRE_OPANumer");
            entity.Property(e => e.SreOpdnumer)
                .HasDefaultValue(0)
                .HasColumnName("SRE_OPDNumer");
            entity.Property(e => e.SreOpmnumer)
                .HasDefaultValue(0)
                .HasColumnName("SRE_OPMNumer");
        });

        modelBuilder.Entity<SrwRecepturyCzynnosci>(entity =>
        {
            entity.HasKey(e => e.SrcId).HasName("SRC_Primary");

            entity.ToTable("SrwRecepturyCzynnosci", "CDN", tb =>
                {
                    tb.HasTrigger("SrwRecepturyCzynnosci_DeleteHandler");
                    tb.HasTrigger("SrwRecepturyCzynnosci_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SrcSreid, "SRCReceptury");

            entity.HasIndex(e => new { e.SrcTwrNumer, e.SrcTwrNazwa, e.SrcTwrTyp }, "SRCTowary");

            entity.Property(e => e.SrcId).HasColumnName("SRC_Id");
            entity.Property(e => e.SrcCzasWykonania)
                .HasDefaultValue(0)
                .HasColumnName("SRC_CzasWykonania");
            entity.Property(e => e.SrcCzasWykonaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRC_CzasWykonaniaJedn");
            entity.Property(e => e.SrcGenerujZadaniaWterminarzu)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRC_GenerujZadaniaWTerminarzu");
            entity.Property(e => e.SrcIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SRC_Ilosc");
            entity.Property(e => e.SrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SRC_Lp");
            entity.Property(e => e.SrcOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRC_Opis");
            entity.Property(e => e.SrcSprzedazKoszt)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRC_SprzedazKoszt");
            entity.Property(e => e.SrcSreid)
                .HasDefaultValue(0)
                .HasColumnName("SRC_SREId");
            entity.Property(e => e.SrcTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRC_TwrNazwa");
            entity.Property(e => e.SrcTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SRC_TwrNumer");
            entity.Property(e => e.SrcTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SRC_TwrTyp");

            entity.HasOne(d => d.SrcTwrNumerNavigation).WithMany(p => p.SrwRecepturyCzynnoscis)
                .HasForeignKey(d => d.SrcTwrNumer)
                .HasConstraintName("FK_SRCTowary");
        });

        modelBuilder.Entity<SrwRecepturySkladniki>(entity =>
        {
            entity.HasKey(e => e.SrsId).HasName("SRS_Primary");

            entity.ToTable("SrwRecepturySkladniki", "CDN", tb => tb.HasTrigger("SrwRecepturySkladniki_InsertUpdateHandler"));

            entity.HasIndex(e => e.SrsSreId, "SRSReceptury");

            entity.HasIndex(e => e.SrsSrcId, "SRSRecepturyCzynnosci");

            entity.HasIndex(e => new { e.SrsTwrNumer, e.SrsTwrNazwa, e.SrsTwrTyp }, "SRSTowary");

            entity.Property(e => e.SrsId).HasColumnName("SRS_Id");
            entity.Property(e => e.SrsCzescZamienna)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRS_CzescZamienna");
            entity.Property(e => e.SrsIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SRS_Ilosc");
            entity.Property(e => e.SrsLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SRS_Lp");
            entity.Property(e => e.SrsMagZnumer)
                .HasDefaultValue(0)
                .HasColumnName("SRS_MagZNumer");
            entity.Property(e => e.SrsOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRS_Opis");
            entity.Property(e => e.SrsSprzedazKoszt)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRS_SprzedazKoszt");
            entity.Property(e => e.SrsSrcId)
                .HasDefaultValue(0)
                .HasColumnName("SRS_SrcId");
            entity.Property(e => e.SrsSreId)
                .HasDefaultValue(0)
                .HasColumnName("SRS_SreId");
            entity.Property(e => e.SrsTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRS_TwrNazwa");
            entity.Property(e => e.SrsTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SRS_TwrNumer");
            entity.Property(e => e.SrsTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SRS_TwrTyp");

            entity.HasOne(d => d.SrsTwrNumerNavigation).WithMany(p => p.SrwRecepturySkladnikis)
                .HasForeignKey(d => d.SrsTwrNumer)
                .HasConstraintName("FK_SRSTowary");
        });

        modelBuilder.Entity<SrwSruHistoriaDok>(entity =>
        {
            entity.HasKey(e => e.SshdId).HasName("SSHD_Primary");

            entity.ToTable("SrwSruHistoriaDok", "CDN", tb => tb.HasTrigger("SrwSruHistoriaDok_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.SshdDokNumer, e.SshdDokTyp }, "SSHDDokument");

            entity.HasIndex(e => e.SshdSruId, "SSHDUrzadzenie");

            entity.Property(e => e.SshdId).HasColumnName("SSHD_Id");
            entity.Property(e => e.SshdDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("SSHD_DokNumer");
            entity.Property(e => e.SshdDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SSHD_DokTyp");
            entity.Property(e => e.SshdSruId)
                .HasDefaultValue(0)
                .HasColumnName("SSHD_SruId");
        });

        modelBuilder.Entity<SrwSruHistoriaDokLinki>(entity =>
        {
            entity.HasKey(e => new { e.SshdlSshdid, e.SshdlSruIdWyswietl }).HasName("SSHDL_Primary");

            entity.ToTable("SrwSruHistoriaDokLinki", "CDN", tb => tb.HasTrigger("SrwSruHistoriaDokLinki_InsertUpdateHandler"));

            entity.HasIndex(e => e.SshdlSshdid, "SSHDLSSHD");

            entity.HasIndex(e => e.SshdlSruIdWyswietl, "SSHDLSrU");

            entity.Property(e => e.SshdlSshdid).HasColumnName("SSHDL_SSHDId");
            entity.Property(e => e.SshdlSruIdWyswietl).HasColumnName("SSHDL_SruIdWyswietl");

            entity.HasOne(d => d.SshdlSshd).WithMany(p => p.SrwSruHistoriaDokLinkis)
                .HasForeignKey(d => d.SshdlSshdid)
                .HasConstraintName("FK_SSHDLSSHD");
        });

        modelBuilder.Entity<SrwSruHistoriaZmian>(entity =>
        {
            entity.HasKey(e => e.SshzId).HasName("SSHZ_Primary");

            entity.ToTable("SrwSruHistoriaZmian", "CDN", tb =>
                {
                    tb.HasTrigger("SrwSruHistoriaZmian_InsertUpdateHandler");
                    tb.HasTrigger("SrwSruHistoriaZmian_ZapiszLinki");
                });

            entity.HasIndex(e => e.SshzSruId, "SSHZUrzadzenie");

            entity.Property(e => e.SshzId).HasColumnName("SSHZ_Id");
            entity.Property(e => e.SshzCzasZmiany)
                .HasDefaultValue(0)
                .HasColumnName("SSHZ_CzasZmiany");
            entity.Property(e => e.SshzKolumna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SSHZ_Kolumna");
            entity.Property(e => e.SshzNowaWartosc)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SSHZ_NowaWartosc");
            entity.Property(e => e.SshzObiNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SSHZ_ObiNazwa");
            entity.Property(e => e.SshzObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("SSHZ_ObiNumer");
            entity.Property(e => e.SshzObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SSHZ_ObiTyp");
            entity.Property(e => e.SshzOpeIdent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SSHZ_OpeIdent");
            entity.Property(e => e.SshzSruId)
                .HasDefaultValue(0)
                .HasColumnName("SSHZ_SruId");
            entity.Property(e => e.SshzStaraWartosc)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SSHZ_StaraWartosc");
            entity.Property(e => e.SshzTypZmiany)
                .HasDefaultValue((byte)0)
                .HasColumnName("SSHZ_TypZmiany");
        });

        modelBuilder.Entity<SrwSruHistoriaZmianLinki>(entity =>
        {
            entity.HasKey(e => new { e.SshzlSshzid, e.SshzlSruIdWyswietl }).HasName("SSHZL_Primary");

            entity.ToTable("SrwSruHistoriaZmianLinki", "CDN", tb => tb.HasTrigger("SrwSruHistoriaZmianLinki_InsertUpdateHandler"));

            entity.HasIndex(e => e.SshzlSshzid, "SSHZLSSHZ");

            entity.HasIndex(e => e.SshzlSruIdWyswietl, "SSHZLSrU");

            entity.Property(e => e.SshzlSshzid).HasColumnName("SSHZL_SSHZId");
            entity.Property(e => e.SshzlSruIdWyswietl).HasColumnName("SSHZL_SruIdWyswietl");

            entity.HasOne(d => d.SshzlSshz).WithMany(p => p.SrwSruHistoriaZmianLinkis)
                .HasForeignKey(d => d.SshzlSshzid)
                .HasConstraintName("FK_SSHZLSSHZ");
        });

        modelBuilder.Entity<SrwTypyPrzegladu>(entity =>
        {
            entity.HasKey(e => e.StpId).HasName("STP_Primary");

            entity.ToTable("SrwTypyPrzegladu", "CDN", tb =>
                {
                    tb.HasTrigger("SrwTypyPrzegladu_DeleteHandler");
                    tb.HasTrigger("SrwTypyPrzegladu_UstawDomyslnosc");
                });

            entity.Property(e => e.StpId).HasColumnName("STP_Id");
            entity.Property(e => e.StpAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_Aktywny");
            entity.Property(e => e.StpAutoNastepnyPrzeglad)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_AutoNastepnyPrzeglad");
            entity.Property(e => e.StpAutoPrzegladZrodlo)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_AutoPrzegladZrodlo");
            entity.Property(e => e.StpCykliczny)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_Cykliczny");
            entity.Property(e => e.StpCzasCyklu)
                .HasDefaultValue(0)
                .HasColumnName("STP_CzasCyklu");
            entity.Property(e => e.StpCzasCykluJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_CzasCykluJedn");
            entity.Property(e => e.StpCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("STP_CzasPrzypomnienia");
            entity.Property(e => e.StpCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_CzasPrzypomnieniaJedn");
            entity.Property(e => e.StpDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_Domyslny");
            entity.Property(e => e.StpKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("STP_Kod");
            entity.Property(e => e.StpNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("STP_Nazwa");
            entity.Property(e => e.StpOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("STP_Opis");
            entity.Property(e => e.StpTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("STP_Terminarz");
        });

        modelBuilder.Entity<SrwUrzParDef>(entity =>
        {
            entity.HasKey(e => e.SudId).HasName("SUD_Primary");

            entity.ToTable("SrwUrzParDef", "CDN");

            entity.HasIndex(e => e.SudNazwa, "SUDNazwa").IsUnique();

            entity.Property(e => e.SudId).HasColumnName("SUD_Id");
            entity.Property(e => e.SudArchiwalna)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUD_Archiwalna");
            entity.Property(e => e.SudFormat)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SUD_Format");
            entity.Property(e => e.SudNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SUD_Nazwa");
            entity.Property(e => e.SudSlwNumer)
                .HasDefaultValue(0)
                .HasColumnName("SUD_SlwNumer");
            entity.Property(e => e.SudSlwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SUD_SlwTyp");
        });

        modelBuilder.Entity<SrwUrzParam>(entity =>
        {
            entity.HasKey(e => e.SupId).HasName("SUP_Primary");

            entity.ToTable("SrwUrzParam", "CDN", tb =>
                {
                    tb.HasTrigger("SrwUrzParam_HistoriaZmian");
                    tb.HasTrigger("SrwUrzParam_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.SupObiNumer, e.SupObiTyp, e.SupSudid }, "SUPObiDefPar").IsUnique();

            entity.Property(e => e.SupId).HasColumnName("SUP_Id");
            entity.Property(e => e.SupLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SUP_Lp");
            entity.Property(e => e.SupObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("SUP_ObiNumer");
            entity.Property(e => e.SupObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SUP_ObiTyp");
            entity.Property(e => e.SupParWartoscDec)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SUP_ParWartoscDec");
            entity.Property(e => e.SupParWartoscL)
                .HasDefaultValue(0)
                .HasColumnName("SUP_ParWartoscL");
            entity.Property(e => e.SupParWartoscS)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SUP_ParWartoscS");
            entity.Property(e => e.SupSudid)
                .HasDefaultValue(0)
                .HasColumnName("SUP_SUDId");
            entity.Property(e => e.SupZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("SUP_ZewnetrznyId");
            entity.Property(e => e.SupZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("SUP_ZewnetrznySys");

            entity.HasOne(d => d.SupSud).WithMany(p => p.SrwUrzParams)
                .HasForeignKey(d => d.SupSudid)
                .HasConstraintName("FK_SUPParDefinicja");
        });

        modelBuilder.Entity<SrwUrzRodzPar>(entity =>
        {
            entity.HasKey(e => e.SrpId).HasName("SRP_Primary");

            entity.ToTable("SrwUrzRodzPar", "CDN");

            entity.Property(e => e.SrpId).HasColumnName("SRP_Id");
            entity.Property(e => e.SrpLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SRP_Lp");
            entity.Property(e => e.SrpSudid)
                .HasDefaultValue(0)
                .HasColumnName("SRP_SUDId");
            entity.Property(e => e.SrpSurid)
                .HasDefaultValue(0)
                .HasColumnName("SRP_SURId");

            entity.HasOne(d => d.SrpSud).WithMany(p => p.SrwUrzRodzPars)
                .HasForeignKey(d => d.SrpSudid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SRPParDef");

            entity.HasOne(d => d.SrpSur).WithMany(p => p.SrwUrzRodzPars)
                .HasForeignKey(d => d.SrpSurid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SRPRodzUrz");
        });

        modelBuilder.Entity<SrwUrzRodzTypyP>(entity =>
        {
            entity.HasKey(e => new { e.SrxSurid, e.SrxStpid }).HasName("SRX_Primary");

            entity.ToTable("SrwUrzRodzTypyP", "CDN", tb => tb.HasTrigger("SrwUrzRodzTypyP_InsertUpdateHandler"));

            entity.HasIndex(e => e.SrxStpid, "SRXSTP");

            entity.HasIndex(e => e.SrxSurid, "SRXSUR");

            entity.Property(e => e.SrxSurid).HasColumnName("SRX_SURId");
            entity.Property(e => e.SrxStpid).HasColumnName("SRX_STPId");
            entity.Property(e => e.SrxCzasCyklu)
                .HasDefaultValue(0)
                .HasColumnName("SRX_CzasCyklu");
            entity.Property(e => e.SrxCzasCykluJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SRX_CzasCykluJedn");

            entity.HasOne(d => d.SrxSur).WithMany(p => p.SrwUrzRodzTypyPs)
                .HasForeignKey(d => d.SrxSurid)
                .HasConstraintName("FK_SRXSUR");
        });

        modelBuilder.Entity<SrwUrzRodzaje>(entity =>
        {
            entity.HasKey(e => e.SurId).HasName("SUR_Primary");

            entity.ToTable("SrwUrzRodzaje", "CDN", tb =>
                {
                    tb.HasTrigger("SrwUrzRodzaje_DeleteHandler");
                    tb.HasTrigger("SrwUrzRodzaje_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SurKod, "SURKod").IsUnique();

            entity.Property(e => e.SurId).HasColumnName("SUR_Id");
            entity.Property(e => e.SurDostepnyWmobile)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUR_DostepnyWMobile");
            entity.Property(e => e.SurJednostkaPrzebiegu)
                .HasDefaultValue(0)
                .HasColumnName("SUR_JednostkaPrzebiegu");
            entity.Property(e => e.SurKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SUR_Kod");
            entity.Property(e => e.SurNadrzedny)
                .HasDefaultValue(0)
                .HasColumnName("SUR_Nadrzedny");
            entity.Property(e => e.SurNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SUR_Nazwa");
        });

        modelBuilder.Entity<SrwUrzTypyP>(entity =>
        {
            entity.HasKey(e => e.SutId).HasName("SUT_Primary");

            entity.ToTable("SrwUrzTypyP", "CDN", tb => tb.HasTrigger("SrwUrzTypyP_InsertUpdateHandler"));

            entity.HasIndex(e => e.SutStpid, "SUTSTP");

            entity.HasIndex(e => new { e.SutSrUid, e.SutStpid }, "SUTSrUSTP");

            entity.Property(e => e.SutId).HasColumnName("SUT_Id");
            entity.Property(e => e.SutAutoNastepnyPrzeglad)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUT_AutoNastepnyPrzeglad");
            entity.Property(e => e.SutAutoPrzegladZrodlo)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUT_AutoPrzegladZrodlo");
            entity.Property(e => e.SutCykliczny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUT_Cykliczny");
            entity.Property(e => e.SutCzasCyklu)
                .HasDefaultValue(0)
                .HasColumnName("SUT_CzasCyklu");
            entity.Property(e => e.SutCzasCykluJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUT_CzasCykluJedn");
            entity.Property(e => e.SutCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("SUT_CzasPrzypomnienia");
            entity.Property(e => e.SutCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUT_CzasPrzypomnieniaJedn");
            entity.Property(e => e.SutDataNast)
                .HasDefaultValue(0)
                .HasColumnName("SUT_DataNast");
            entity.Property(e => e.SutDataOst)
                .HasDefaultValue(0)
                .HasColumnName("SUT_DataOst");
            entity.Property(e => e.SutOpeNumerO)
                .HasDefaultValue(0)
                .HasColumnName("SUT_OpeNumerO");
            entity.Property(e => e.SutOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SUT_Opis");
            entity.Property(e => e.SutSrUid)
                .HasDefaultValue(0)
                .HasColumnName("SUT_SrUId");
            entity.Property(e => e.SutStpid)
                .HasDefaultValue(0)
                .HasColumnName("SUT_STPId");
            entity.Property(e => e.SutTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SUT_Terminarz");
            entity.Property(e => e.SutZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("SUT_ZewnetrznyId");
            entity.Property(e => e.SutZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("SUT_ZewnetrznySys");

            entity.HasOne(d => d.SutSrU).WithMany(p => p.SrwUrzTypyPs)
                .HasForeignKey(d => d.SutSrUid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SUTSrUSTP");
        });

        modelBuilder.Entity<SrwUrzWlasc>(entity =>
        {
            entity.HasKey(e => new { e.SuwSrUid, e.SuwDataDo }).HasName("SUW_Primary");

            entity.ToTable("SrwUrzWlasc", "CDN", tb =>
                {
                    tb.HasTrigger("SrwUrzWlasc_HistoriaZmian");
                    tb.HasTrigger("SrwUrzWlasc_InsertUpdateHandler");
                });

            entity.Property(e => e.SuwSrUid).HasColumnName("SUW_SrUId");
            entity.Property(e => e.SuwDataDo).HasColumnName("SUW_DataDo");
            entity.Property(e => e.SuwWlaNumer)
                .HasDefaultValue(0)
                .HasColumnName("SUW_WlaNumer");
            entity.Property(e => e.SuwWlaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SUW_WlaTyp");

            entity.HasOne(d => d.SuwSrU).WithMany(p => p.SrwUrzWlascs)
                .HasForeignKey(d => d.SuwSrUid)
                .HasConstraintName("FK_SUWPriamry");
        });

        modelBuilder.Entity<SrwUrzadzenium>(entity =>
        {
            entity.HasKey(e => e.SrUId).HasName("SrU_Primary");

            entity.ToTable("SrwUrzadzenia", "CDN", tb =>
                {
                    tb.HasTrigger("SrwUrzadzeniaAlias_DeleteHandler");
                    tb.HasTrigger("SrwUrzadzenia_DeleteHandler");
                    tb.HasTrigger("SrwUrzadzenia_HistoriaZmian");
                    tb.HasTrigger("SrwUrzadzenia_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SrUKod, "SrUKod");

            entity.HasIndex(e => e.SrUNadrzedny, "SrUNadrzedny");

            entity.Property(e => e.SrUId).HasColumnName("SrU_Id");
            entity.Property(e => e.SrUArchiwalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrU_Archiwalne");
            entity.Property(e => e.SrUDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrU_DokLp");
            entity.Property(e => e.SrUDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("SrU_DokNumer");
            entity.Property(e => e.SrUDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrU_DokTyp");
            entity.Property(e => e.SrUDostepnyWmobile)
                .HasDefaultValue((byte)0)
                .HasColumnName("SrU_DostepnyWMobile");
            entity.Property(e => e.SrUJednostkaPrzebiegu)
                .HasDefaultValue(0)
                .HasColumnName("SrU_JednostkaPrzebiegu");
            entity.Property(e => e.SrUKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrU_Kod");
            entity.Property(e => e.SrUNadrzedny)
                .HasDefaultValue(0)
                .HasColumnName("SrU_Nadrzedny");
            entity.Property(e => e.SrUNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrU_Nazwa");
            entity.Property(e => e.SrUNumer)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrU_Numer");
            entity.Property(e => e.SrUObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("SrU_ObiNumer");
            entity.Property(e => e.SrUObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SrU_ObiTyp");
            entity.Property(e => e.SrUOpis)
                .HasMaxLength(4999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SrU_Opis");
            entity.Property(e => e.SrUPrzebieg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SrU_Przebieg");
            entity.Property(e => e.SrUSurid)
                .HasDefaultValue(0)
                .HasColumnName("SrU_SURId");
            entity.Property(e => e.SrUZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("SrU_ZewnetrznyID");
            entity.Property(e => e.SrUZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("SrU_ZewnetrznySys");
        });

        modelBuilder.Entity<SrwZlcCzynnosci>(entity =>
        {
            entity.HasKey(e => e.SzcId).HasName("SZC_Primary");

            entity.ToTable("SrwZlcCzynnosci", "CDN", tb =>
                {
                    tb.HasTrigger("SrwZlcCzynnosci_DeleteHandler");
                    tb.HasTrigger("SrwZlcCzynnosci_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SzcSreid, "SZCReceptury");

            entity.HasIndex(e => e.SzcSlwStatus, "SZCStatus");

            entity.HasIndex(e => e.SzcSzuid, "SZCUrzadzenie");

            entity.HasIndex(e => e.SzcTwrNumer, "SZCUsuga");

            entity.HasIndex(e => e.SzcSznid, "SZCZlecenie");

            entity.Property(e => e.SzcId).HasColumnName("SZC_Id");
            entity.Property(e => e.SzcBlokadaEdycji)
                .HasDefaultValue(0)
                .HasColumnName("SZC_BlokadaEdycji");
            entity.Property(e => e.SzcCenaPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZC_CenaPoRabacie");
            entity.Property(e => e.SzcCenaPoczatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZC_CenaPoczatkowa");
            entity.Property(e => e.SzcCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("SZC_CenaSpr");
            entity.Property(e => e.SzcCenaZakupu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZC_CenaZakupu");
            entity.Property(e => e.SzcCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("SZC_CzasModyfikacji");
            entity.Property(e => e.SzcCzasRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("SZC_CzasRealizacji");
            entity.Property(e => e.SzcCzasRealizacjiJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZC_CzasRealizacjiJedn");
            entity.Property(e => e.SzcCzasWykonania)
                .HasDefaultValue(0)
                .HasColumnName("SZC_CzasWykonania");
            entity.Property(e => e.SzcCzasWykonaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZC_CzasWykonaniaJedn");
            entity.Property(e => e.SzcFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZC_FlagaVAT");
            entity.Property(e => e.SzcGenerujZadania)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZC_GenerujZadania");
            entity.Property(e => e.SzcGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZC_GrupaPod");
            entity.Property(e => e.SzcIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZC_Ilosc");
            entity.Property(e => e.SzcOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZC_Opis");
            entity.Property(e => e.SzcPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("SZC_Pozycja");
            entity.Property(e => e.SzcPromocje)
                .HasDefaultValue(0)
                .HasColumnName("SZC_Promocje");
            entity.Property(e => e.SzcRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SZC_Rabat");
            entity.Property(e => e.SzcRabatKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SZC_RabatKorekta");
            entity.Property(e => e.SzcRabatPromocyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SZC_RabatPromocyjny");
            entity.Property(e => e.SzcSlwStatus)
                .HasDefaultValue(0)
                .HasColumnName("SZC_SlwStatus");
            entity.Property(e => e.SzcSprzedazKoszt)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZC_SprzedazKoszt");
            entity.Property(e => e.SzcSreid)
                .HasDefaultValue(0)
                .HasColumnName("SZC_SREId");
            entity.Property(e => e.SzcStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SZC_StawkaPod");
            entity.Property(e => e.SzcSznid)
                .HasDefaultValue(0)
                .HasColumnName("SZC_SZNId");
            entity.Property(e => e.SzcSzuid)
                .HasDefaultValue(0)
                .HasColumnName("SZC_SZUId");
            entity.Property(e => e.SzcTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZC_TwrNazwa");
            entity.Property(e => e.SzcTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZC_TwrNumer");
            entity.Property(e => e.SzcTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZC_TwrTyp");
            entity.Property(e => e.SzcWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZC_Waluta");
            entity.Property(e => e.SzcWartoscPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZC_WartoscPoRabacie");
            entity.Property(e => e.SzcWartoscPoczatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZC_WartoscPoczatkowa");
            entity.Property(e => e.SzcZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("SZC_ZewnetrznyID");
            entity.Property(e => e.SzcZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("SZC_ZewnetrznySys");
            entity.Property(e => e.SzcZrealizowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZC_Zrealizowano");

            entity.HasOne(d => d.SzcSzn).WithMany(p => p.SrwZlcCzynnoscis)
                .HasForeignKey(d => d.SzcSznid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SZCZlecenie");
        });

        modelBuilder.Entity<SrwZlcCzynnosciTerminy>(entity =>
        {
            entity.HasKey(e => e.SztId).HasName("SZT_Primary");

            entity.ToTable("SrwZlcCzynnosciTerminy", "CDN", tb => tb.HasTrigger("SrwZlcCzynnosciTerminy_DeleteHandler"));

            entity.HasIndex(e => e.SztSzcid, "SZTCzynnosc");

            entity.HasIndex(e => new { e.SztSzcid, e.SztTerminOd, e.SztTerminDo }, "SZTTerminy").IsUnique();

            entity.Property(e => e.SztId).HasColumnName("SZT_ID");
            entity.Property(e => e.SztSzcid)
                .HasDefaultValue(0)
                .HasColumnName("SZT_SZCId");
            entity.Property(e => e.SztTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("SZT_TerminDo");
            entity.Property(e => e.SztTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("SZT_TerminOd");
            entity.Property(e => e.SztZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("SZT_ZewnetrznyID");
            entity.Property(e => e.SztZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("SZT_ZewnetrznySys");

            entity.HasOne(d => d.SztSzc).WithMany(p => p.SrwZlcCzynnosciTerminies)
                .HasForeignKey(d => d.SztSzcid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SZTTerminy");
        });

        modelBuilder.Entity<SrwZlcKoszty>(entity =>
        {
            entity.HasKey(e => e.SzkId).HasName("SZK_Primary");

            entity.ToTable("SrwZlcKoszty", "CDN");

            entity.HasIndex(e => e.SzkSznid, "SZKZlecenie");

            entity.Property(e => e.SzkId).HasColumnName("SZK_Id");
            entity.Property(e => e.SzkDataDodania)
                .HasDefaultValue(0)
                .HasColumnName("SZK_DataDodania");
            entity.Property(e => e.SzkDokument)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZK_Dokument");
            entity.Property(e => e.SzkKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZK_Kod");
            entity.Property(e => e.SzkNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZK_Nazwa");
            entity.Property(e => e.SzkOpeNumerD)
                .HasDefaultValue(0)
                .HasColumnName("SZK_OpeNumerD");
            entity.Property(e => e.SzkOpis)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZK_Opis");
            entity.Property(e => e.SzkSznid)
                .HasDefaultValue(0)
                .HasColumnName("SZK_SZNId");
            entity.Property(e => e.SzkWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZK_Wartosc");

            entity.HasOne(d => d.SzkSzn).WithMany(p => p.SrwZlcKoszties)
                .HasForeignKey(d => d.SzkSznid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SZKZlecenie");
        });

        modelBuilder.Entity<SrwZlcNag>(entity =>
        {
            entity.HasKey(e => e.SznId).HasName("SZN_Primary");

            entity.ToTable("SrwZlcNag", "CDN", tb =>
                {
                    tb.HasTrigger("SrwZlcNag_DeleteHandler");
                    tb.HasTrigger("SrwZlcNag_InsertUpdateHandler");
                    tb.HasTrigger("SrwZlcNag_LastMod");
                });

            entity.HasIndex(e => new { e.SznKnStypP, e.SznKnSnumerP, e.SznKnSlpP }, "KeyOsobaP");

            entity.HasIndex(e => new { e.SznAdWtyp, e.SznAdWnumer }, "SZNAdrWys");

            entity.HasIndex(e => e.SznFiaskoId, "SZNFiasko");

            entity.HasIndex(e => e.SznFrsId, "SZNFrsID");

            entity.HasIndex(e => new { e.SznKnDtyp, e.SznKnDnumer }, "SZNKntD");

            entity.HasIndex(e => e.SznKnPnumer, "SZNKntP");

            entity.HasIndex(e => new { e.SznKntTyp, e.SznKntNumer }, "SZNKontrahent");

            entity.HasIndex(e => new { e.SznRok, e.SznMiesiac, e.SznSeria, e.SznNumer }, "SZNNumer").IsUnique();

            entity.HasIndex(e => e.SznOpiNumer, "SZNOpiekun");

            entity.HasIndex(e => new { e.SznKnStyp, e.SznKnSnumer, e.SznKnSlp }, "SZNOsoba");

            entity.HasIndex(e => new { e.SznKnStypD, e.SznKnSnumerD, e.SznKnSlpD }, "SZNOsobaD");

            entity.HasIndex(e => e.SznPrjId, "SZNPrj");

            entity.HasIndex(e => e.SznSlwStatus, "SZNStatus");

            entity.Property(e => e.SznId).HasColumnName("SZN_Id");
            entity.Property(e => e.SznAdPnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_AdPNumer");
            entity.Property(e => e.SznAdWnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_AdWNumer");
            entity.Property(e => e.SznAdWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_AdWTyp");
            entity.Property(e => e.SznAktywny)
                .HasDefaultValue(0)
                .HasColumnName("SZN_Aktywny");
            entity.Property(e => e.SznBlokadaEdycji)
                .HasDefaultValue(0)
                .HasColumnName("SZN_BlokadaEdycji");
            entity.Property(e => e.SznCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_CechaOpis");
            entity.Property(e => e.SznCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_CenaSpr");
            entity.Property(e => e.SznCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("SZN_CzasPrzypomnienia");
            entity.Property(e => e.SznCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_CzasPrzypomnieniaJedn");
            entity.Property(e => e.SznDataAktywacjiRez)
                .HasDefaultValue(0)
                .HasColumnName("SZN_DataAktywacjiRez");
            entity.Property(e => e.SznDataP)
                .HasDefaultValue(0)
                .HasColumnName("SZN_DataP");
            entity.Property(e => e.SznDataRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("SZN_DataRozpoczecia");
            entity.Property(e => e.SznDataWaznosciRez)
                .HasDefaultValue(0)
                .HasColumnName("SZN_DataWaznosciRez");
            entity.Property(e => e.SznDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("SZN_DataWystawienia");
            entity.Property(e => e.SznDataZ)
                .HasDefaultValue(0)
                .HasColumnName("SZN_DataZ");
            entity.Property(e => e.SznDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_DokumentObcy");
            entity.Property(e => e.SznExpoNorm)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_ExpoNorm");
            entity.Property(e => e.SznFiaskoId)
                .HasDefaultValue(0)
                .HasColumnName("SZN_FiaskoID");
            entity.Property(e => e.SznFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_FlagaNB");
            entity.Property(e => e.SznFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_FormaNazwa");
            entity.Property(e => e.SznFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_FormaNr");
            entity.Property(e => e.SznFormaRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SZN_FormaRabat");
            entity.Property(e => e.SznFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_FrmNumer");
            entity.Property(e => e.SznFrsId)
                .HasDefaultValue(0)
                .HasColumnName("SZN_FrsId");
            entity.Property(e => e.SznGodzinaRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("SZN_GodzinaRozpoczecia");
            entity.Property(e => e.SznGodzinaWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("SZN_GodzinaWystawienia");
            entity.Property(e => e.SznKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_KnANumer");
            entity.Property(e => e.SznKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnATyp");
            entity.Property(e => e.SznKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_KnDNumer");
            entity.Property(e => e.SznKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnDTyp");
            entity.Property(e => e.SznKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_KnPNumer");
            entity.Property(e => e.SznKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnPTyp");
            entity.Property(e => e.SznKnSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnSLp");
            entity.Property(e => e.SznKnSlpD)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnSLpD");
            entity.Property(e => e.SznKnSlpP)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnSLpP");
            entity.Property(e => e.SznKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_KnSNumer");
            entity.Property(e => e.SznKnSnumerD)
                .HasDefaultValue(0)
                .HasColumnName("SZN_KnSNumerD");
            entity.Property(e => e.SznKnSnumerP)
                .HasDefaultValue(0)
                .HasColumnName("SZN_KnSNumerP");
            entity.Property(e => e.SznKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnSTyp");
            entity.Property(e => e.SznKnStypD)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnSTypD");
            entity.Property(e => e.SznKnStypP)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KnSTypP");
            entity.Property(e => e.SznKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_KntNumer");
            entity.Property(e => e.SznKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_KntTyp");
            entity.Property(e => e.SznLastMod)
                .HasDefaultValue(0)
                .HasColumnName("SZN_LastMod");
            entity.Property(e => e.SznMagZnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_MagZNumer");
            entity.Property(e => e.SznMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_Miesiac");
            entity.Property(e => e.SznNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_NrKursu");
            entity.Property(e => e.SznNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_Numer");
            entity.Property(e => e.SznOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("SZN_OpeNumerM");
            entity.Property(e => e.SznOpeNumerO)
                .HasDefaultValue(0)
                .HasColumnName("SZN_OpeNumerO");
            entity.Property(e => e.SznOpeNumerP)
                .HasDefaultValue(0)
                .HasColumnName("SZN_OpeNumerP");
            entity.Property(e => e.SznOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("SZN_OpeNumerW");
            entity.Property(e => e.SznOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("SZN_OpeNumerZ");
            entity.Property(e => e.SznOpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZN_OpiNumer");
            entity.Property(e => e.SznOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_Opis");
            entity.Property(e => e.SznOpisP)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_OpisP");
            entity.Property(e => e.SznOpisZ)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_OpisZ");
            entity.Property(e => e.SznPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_PriorytetRez");
            entity.Property(e => e.SznPrjId)
                .HasDefaultValue(0)
                .HasColumnName("SZN_PrjId");
            entity.Property(e => e.SznPromocje)
                .HasDefaultValue(0)
                .HasColumnName("SZN_Promocje");
            entity.Property(e => e.SznRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SZN_Rabat");
            entity.Property(e => e.SznRabatPromocyjnyGlobalny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SZN_RabatPromocyjnyGlobalny");
            entity.Property(e => e.SznRabatW)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZN_RabatW");
            entity.Property(e => e.SznRezZasTylkoAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_RezZasTylkoAktywne");
            entity.Property(e => e.SznRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_RezerwujZasoby");
            entity.Property(e => e.SznRok)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_Rok");
            entity.Property(e => e.SznSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_Seria");
            entity.Property(e => e.SznSlwStatus)
                .HasDefaultValue(0)
                .HasColumnName("SZN_SlwStatus");
            entity.Property(e => e.SznStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_Stan");
            entity.Property(e => e.SznTerminPlatnosci)
                .HasDefaultValue(0)
                .HasColumnName("SZN_TerminPlatnosci");
            entity.Property(e => e.SznTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZN_Terminarz");
            entity.Property(e => e.SznUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_URL");
            entity.Property(e => e.SznWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZN_Waluta");
            entity.Property(e => e.SznWsk)
                .HasDefaultValue((short)0)
                .HasColumnName("SZN_Wsk");
            entity.Property(e => e.SznZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("SZN_ZewnetrznyID");
            entity.Property(e => e.SznZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("SZN_ZewnetrznySys");
        });

        modelBuilder.Entity<SrwZlcObiekty>(entity =>
        {
            entity.HasKey(e => new { e.SzoSznid, e.SzoSzcid, e.SzoObiTyp, e.SzoObiNumer }).HasName("SZO_Primary");

            entity.ToTable("SrwZlcObiekty", "CDN", tb => tb.HasTrigger("SrwZlcObiekty_InsertUpdateHandler"));

            entity.HasIndex(e => e.SzoObiNumer, "SZONumer");

            entity.HasIndex(e => e.SzoSreid, "SZOReceptury");

            entity.HasIndex(e => e.SzoSzcid, "SZOSZC");

            entity.HasIndex(e => e.SzoSznid, "SZOSZN");

            entity.Property(e => e.SzoSznid).HasColumnName("SZO_SZNId");
            entity.Property(e => e.SzoSzcid).HasColumnName("SZO_SZCId");
            entity.Property(e => e.SzoObiTyp).HasColumnName("SZO_ObiTyp");
            entity.Property(e => e.SzoObiNumer).HasColumnName("SZO_ObiNumer");
            entity.Property(e => e.SzoSreid)
                .HasDefaultValue(0)
                .HasColumnName("SZO_SREId");
        });

        modelBuilder.Entity<SrwZlcSkladniki>(entity =>
        {
            entity.HasKey(e => e.SzsId).HasName("SZS_Primary");

            entity.ToTable("SrwZlcSkladniki", "CDN", tb =>
                {
                    tb.HasTrigger("SrwZlcSkladniki_DeleteHandler");
                    tb.HasTrigger("SrwZlcSkladniki_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SzsSzcid, "SZSCzynnosc");

            entity.HasIndex(e => e.SzsSreid, "SZSReceptury");

            entity.HasIndex(e => e.SzsTwrNumer, "SZSTowar");

            entity.HasIndex(e => e.SzsSznid, "SZSZlecenie");

            entity.Property(e => e.SzsId).HasColumnName("SZS_Id");
            entity.Property(e => e.SzsCenaPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZS_CenaPoRabacie");
            entity.Property(e => e.SzsCenaPoczatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZS_CenaPoczatkowa");
            entity.Property(e => e.SzsCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("SZS_CenaSpr");
            entity.Property(e => e.SzsCenaZakupu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZS_CenaZakupu");
            entity.Property(e => e.SzsCzescZamienna)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZS_CzescZamienna");
            entity.Property(e => e.SzsFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZS_FlagaVAT");
            entity.Property(e => e.SzsGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZS_GrupaPod");
            entity.Property(e => e.SzsIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SZS_Ilosc");
            entity.Property(e => e.SzsMagZnumer)
                .HasDefaultValue(0)
                .HasColumnName("SZS_MagZNumer");
            entity.Property(e => e.SzsOpis)
                .HasMaxLength(2001)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZS_Opis");
            entity.Property(e => e.SzsPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("SZS_Pozycja");
            entity.Property(e => e.SzsPromocje)
                .HasDefaultValue(0)
                .HasColumnName("SZS_Promocje");
            entity.Property(e => e.SzsRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SZS_Rabat");
            entity.Property(e => e.SzsRabatKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SZS_RabatKorekta");
            entity.Property(e => e.SzsRabatPromocyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SZS_RabatPromocyjny");
            entity.Property(e => e.SzsSprzedazKoszt)
                .HasDefaultValue((byte)0)
                .HasColumnName("SZS_SprzedazKoszt");
            entity.Property(e => e.SzsSreid)
                .HasDefaultValue(0)
                .HasColumnName("SZS_SREId");
            entity.Property(e => e.SzsStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SZS_StawkaPod");
            entity.Property(e => e.SzsSzcid)
                .HasDefaultValue(0)
                .HasColumnName("SZS_SZCId");
            entity.Property(e => e.SzsSznid)
                .HasDefaultValue(0)
                .HasColumnName("SZS_SZNId");
            entity.Property(e => e.SzsTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZS_TwrNazwa");
            entity.Property(e => e.SzsTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SZS_TwrNumer");
            entity.Property(e => e.SzsTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SZS_TwrTyp");
            entity.Property(e => e.SzsWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SZS_Waluta");
            entity.Property(e => e.SzsWartoscPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZS_WartoscPoRabacie");
            entity.Property(e => e.SzsWartoscPoczatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SZS_WartoscPoczatkowa");
            entity.Property(e => e.SzsZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("SZS_ZewnetrznyID");
            entity.Property(e => e.SzsZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("SZS_ZewnetrznySys");
        });

        modelBuilder.Entity<SrwZlcUrz>(entity =>
        {
            entity.HasKey(e => e.SzuId).HasName("SZU_Primary");

            entity.ToTable("SrwZlcUrz", "CDN", tb =>
                {
                    tb.HasTrigger("SrwZlcUrz_DeleteHandler");
                    tb.HasTrigger("SrwZlcUrz_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.SzuSreid, "SZUSrwReceptury");

            entity.HasIndex(e => new { e.SzuSznid, e.SzuSrUid }, "SZUUrWZlc");

            entity.HasIndex(e => e.SzuSrUid, "SZUUrzadzenie");

            entity.HasIndex(e => new { e.SzuSznid, e.SzuPozycja }, "SZUZlecenie");

            entity.Property(e => e.SzuId).HasColumnName("SZU_Id");
            entity.Property(e => e.SzuPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("SZU_Pozycja");
            entity.Property(e => e.SzuPrzebieg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("SZU_Przebieg");
            entity.Property(e => e.SzuSrUid)
                .HasDefaultValue(0)
                .HasColumnName("SZU_SrUId");
            entity.Property(e => e.SzuSreid)
                .HasDefaultValue(0)
                .HasColumnName("SZU_SREId");
            entity.Property(e => e.SzuSznid)
                .HasDefaultValue(0)
                .HasColumnName("SZU_SZNId");
        });

        modelBuilder.Entity<StaDostepy>(entity =>
        {
            entity.HasKey(e => new { e.StDStaTyp, e.StDStaNumer, e.StDRodzaj, e.StDNumer, e.StDStaLp }).HasName("StD_Primary");

            entity.ToTable("StaDostepy", "CDN");

            entity.HasIndex(e => new { e.StDRodzaj, e.StDNumer, e.StDSeria }, "StDSeria").IsUnique();

            entity.HasIndex(e => new { e.StDRodzaj, e.StDNumer, e.StDZrdTyp, e.StDZrdNumer }, "StDZrd");

            entity.Property(e => e.StDStaTyp).HasColumnName("StD_StaTyp");
            entity.Property(e => e.StDStaNumer).HasColumnName("StD_StaNumer");
            entity.Property(e => e.StDRodzaj).HasColumnName("StD_Rodzaj");
            entity.Property(e => e.StDNumer).HasColumnName("StD_Numer");
            entity.Property(e => e.StDStaLp).HasColumnName("StD_StaLp");
            entity.Property(e => e.StDSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("StD_Seria");
            entity.Property(e => e.StDStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("StD_StaFirma");
            entity.Property(e => e.StDWartosc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("StD_Wartosc");
            entity.Property(e => e.StDZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("StD_ZrdFirma");
            entity.Property(e => e.StDZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("StD_ZrdLp");
            entity.Property(e => e.StDZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("StD_ZrdNumer");
            entity.Property(e => e.StDZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("StD_ZrdTyp");
        });

        modelBuilder.Entity<StaKarty>(entity =>
        {
            entity.HasKey(e => e.StaGidnumer).HasName("Sta_Primary");

            entity.ToTable("StaKarty", "CDN", tb =>
                {
                    tb.HasTrigger("StaKarty_DeleteHandler");
                    tb.HasTrigger("StaKarty_InsertUpdateHandler");
                    tb.HasTrigger("StaKarty_Usuwanie");
                });

            entity.HasIndex(e => e.StaJezyk, "StaJezyk");

            entity.HasIndex(e => e.StaNazwa, "StaNazwa").IsUnique();

            entity.Property(e => e.StaGidnumer).HasColumnName("Sta_GIDNumer");
            entity.Property(e => e.StaAdministrator)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_Administrator");
            entity.Property(e => e.StaAdministratorDo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AdministratorDO");
            entity.Property(e => e.StaAkceptacjaPaczkiPrzelewow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AkceptacjaPaczkiPrzelewow");
            entity.Property(e => e.StaAkceptacjaWydatkow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AkceptacjaWydatkow");
            entity.Property(e => e.StaAktualizacjaAdresowKontrahenta)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AktualizacjaAdresowKontrahenta");
            entity.Property(e => e.StaAktualizacjaCen)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AktualizacjaCen");
            entity.Property(e => e.StaAktywne)
                .HasDefaultValue(0)
                .HasColumnName("Sta_Aktywne");
            entity.Property(e => e.StaAktywnoscEiP)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AktywnoscEiP");
            entity.Property(e => e.StaAnonimizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_Anonimizacja");
            entity.Property(e => e.StaAnonimizujBezBlokad)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AnonimizujBezBlokad");
            entity.Property(e => e.StaApfinoWindykacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ApfinoWindykacja");
            entity.Property(e => e.StaAtrybutyWizytyOddzialowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AtrybutyWizytyOddzialowe");
            entity.Property(e => e.StaAtrybutyZmianaKlawiatury)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_AtrybutyZmianaKlawiatury");
            entity.Property(e => e.StaBezZmianyHasla)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_BezZmianyHasla");
            entity.Property(e => e.StaBlokowanieDostaw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_BlokowanieDostaw");
            entity.Property(e => e.StaCenaPotwZs)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_CenaPotwZS");
            entity.Property(e => e.StaCenaPotwZz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_CenaPotwZZ");
            entity.Property(e => e.StaChatErp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ChatERP");
            entity.Property(e => e.StaCofniecieZatwierdzeniaAkceptacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_CofniecieZatwierdzeniaAkceptacji");
            entity.Property(e => e.StaDoczytujRekordy)
                .HasDefaultValue((byte)1)
                .HasColumnName("Sta_DoczytujRekordy");
            entity.Property(e => e.StaDokNiepotwBst)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_DokNiepotwBST");
            entity.Property(e => e.StaDokPotw)
                .HasDefaultValue(0)
                .HasColumnName("Sta_DokPotw");
            entity.Property(e => e.StaDostepDoParamRejestrow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_DostepDoParamRejestrow");
            entity.Property(e => e.StaDostepDoWzorcowAnalit)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_DostepDoWzorcowAnalit");
            entity.Property(e => e.StaDostepDoWzorcowAnalitPodrz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_DostepDoWzorcowAnalitPodrz");
            entity.Property(e => e.StaDyrektor)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_Dyrektor");
            entity.Property(e => e.StaEdycjaCenySpiElem)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaCenySpiElem");
            entity.Property(e => e.StaEdycjaDatySpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaDatySpr");
            entity.Property(e => e.StaEdycjaNrObcego)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaNrObcego");
            entity.Property(e => e.StaEdycjaOplatySpoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaOplatySpoz");
            entity.Property(e => e.StaEdycjaPcn)
                .HasDefaultValue(0)
                .HasColumnName("Sta_EdycjaPCN");
            entity.Property(e => e.StaEdycjaPotwPkj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaPotwPKJ");
            entity.Property(e => e.StaEdycjaStawkiVatnaSpi)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaStawkiVATNaSpi");
            entity.Property(e => e.StaEdycjaWartosciBudzetu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaWartosciBudzetu");
            entity.Property(e => e.StaEdycjaZatwierdzonychNot)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EdycjaZatwierdzonychNot");
            entity.Property(e => e.StaEsprawozdaniaFinansowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_EsprawozdaniaFinansowe");
            entity.Property(e => e.StaFiltryObowiazkowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_FiltryObowiazkowe");
            entity.Property(e => e.StaGenerowanieJpk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_GenerowanieJPK");
            entity.Property(e => e.StaGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Sta_GIDFirma");
            entity.Property(e => e.StaGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Sta_GIDLp");
            entity.Property(e => e.StaGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Sta_GIDTyp");
            entity.Property(e => e.StaGotowkaPotw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_GotowkaPotw");
            entity.Property(e => e.StaJezyk)
                .HasDefaultValue(0)
                .HasColumnName("Sta_Jezyk");
            entity.Property(e => e.StaKorektaDanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_KorektaDanych");
            entity.Property(e => e.StaKorektyIlosciowoWartosciowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_KorektyIlosciowoWartosciowe");
            entity.Property(e => e.StaKseFedycjaNumeru)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_KSeFEdycjaNumeru");
            entity.Property(e => e.StaKseFpobieranieFaktur)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_KSeFPobieranieFaktur");
            entity.Property(e => e.StaKseFtoken)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_KSeFToken");
            entity.Property(e => e.StaKseFwysylanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_KSeFWysylanie");
            entity.Property(e => e.StaLicencje)
                .HasDefaultValue(0)
                .HasColumnName("Sta_Licencje");
            entity.Property(e => e.StaLimitBezOgraniczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_LimitBezOgraniczenia");
            entity.Property(e => e.StaLimitBezOgraniczeniaZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_LimitBezOgraniczeniaZam");
            entity.Property(e => e.StaLimitKredytu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Sta_LimitKredytu");
            entity.Property(e => e.StaLimitKredytuZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Sta_LimitKredytuZam");
            entity.Property(e => e.StaLimitPoTerminie)
                .HasDefaultValue(100m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Sta_LimitPoTerminie");
            entity.Property(e => e.StaLogCoWyswietlac)
                .HasDefaultValue((byte)7)
                .HasColumnName("Sta_LogCoWyswietlac");
            entity.Property(e => e.StaLogZamknij)
                .HasDefaultValue((byte)1)
                .HasColumnName("Sta_LogZamknij");
            entity.Property(e => e.StaLogZapisujKomunikaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_LogZapisujKomunikaty");
            entity.Property(e => e.StaLokatorCzas)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("Sta_LokatorCzas");
            entity.Property(e => e.StaLokatorTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_LokatorTyp");
            entity.Property(e => e.StaMenuIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_MenuIlosc");
            entity.Property(e => e.StaMenuTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_MenuTryb");
            entity.Property(e => e.StaMetodaKasowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_MetodaKasowa");
            entity.Property(e => e.StaModDatyKsiegowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ModDatyKsiegowania");
            entity.Property(e => e.StaModPolecenWyjazdu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ModPolecenWyjazdu");
            entity.Property(e => e.StaModulDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ModulDomyslny");
            entity.Property(e => e.StaModuly)
                .HasDefaultValue(0)
                .HasColumnName("Sta_Moduly");
            entity.Property(e => e.StaModuly2)
                .HasDefaultValue(0)
                .HasColumnName("Sta_Moduly2");
            entity.Property(e => e.StaMultiLogowanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_MultiLogowanie");
            entity.Property(e => e.StaNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Sta_Nazwa");
            entity.Property(e => e.StaNtlogin)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_NTLogin");
            entity.Property(e => e.StaObslugaPropozycjiKompensat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ObslugaPropozycjiKompensat");
            entity.Property(e => e.StaOdliczanieFaZalNaPotw)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_OdliczanieFaZalNaPotw");
            entity.Property(e => e.StaOdtwierdzanieOpisuAnalit)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_OdtwierdzanieOpisuAnalit");
            entity.Property(e => e.StaOknaTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_OknaTryb");
            entity.Property(e => e.StaOperacjeNaPotwierdzonychZsr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_OperacjeNaPotwierdzonychZSR");
            entity.Property(e => e.StaOpisAnalitycznyDokWbuforze)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_OpisAnalitycznyDokWBuforze");
            entity.Property(e => e.StaOtwieranieOkresuRetro)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_OtwieranieOkresuRetro");
            entity.Property(e => e.StaOtwieraniePotwierdzonychUmow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_OtwieraniePotwierdzonychUmow");
            entity.Property(e => e.StaParametrWgRozliczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ParametrWgRozliczenia");
            entity.Property(e => e.StaPlatnosci)
                .HasDefaultValue(0)
                .HasColumnName("Sta_Platnosci");
            entity.Property(e => e.StaPlatnosciWzPz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PlatnosciWzPz");
            entity.Property(e => e.StaPlusyNaDrzewach)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PlusyNaDrzewach");
            entity.Property(e => e.StaPodgladDokumentow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PodgladDokumentow");
            entity.Property(e => e.StaPodsumowania)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_Podsumowania");
            entity.Property(e => e.StaPosdodEdycjaKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSDodEdycjaKnt");
            entity.Property(e => e.StaPosdrukRaportFiskalnyDob)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSDrukRaportFiskalnyDob");
            entity.Property(e => e.StaPosdrukRaportOkresowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSDrukRaportOkresowy");
            entity.Property(e => e.StaPosedycjaDokOpe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSEdycjaDokOpe");
            entity.Property(e => e.StaPosinwArkZamk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSInwArkZamk");
            entity.Property(e => e.StaPosinwRaportLista)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSInwRaportLista");
            entity.Property(e => e.StaPosinwRaportModyfObcy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSInwRaportModyfObcy");
            entity.Property(e => e.StaPosinwentaryzacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSInwentaryzacja");
            entity.Property(e => e.StaPoskonfInterfejs)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSKonfInterfejs");
            entity.Property(e => e.StaPoskonfiguracja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSKonfiguracja");
            entity.Property(e => e.StaPosotwarcieZmianyZroznicaSk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSOtwarcieZmianyZRoznicaSK");
            entity.Property(e => e.StaPosoznaczDokZafiskalizowane)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSOznaczDokZafiskalizowane");
            entity.Property(e => e.StaPosprzekroczenieLimituSk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSPrzekroczenieLimituSK");
            entity.Property(e => e.StaPosreczneOtwarcieSzuflady)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSReczneOtwarcieSzuflady");
            entity.Property(e => e.StaPosstatusPlatnosciNaZs)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSStatusPlatnosciNaZS");
            entity.Property(e => e.StaPosstatusRealizacjiNaZs)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSStatusRealizacjiNaZS");
            entity.Property(e => e.StaPosuzgadnianieStanowPrawo)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSUzgadnianieStanowPrawo");
            entity.Property(e => e.StaPoszamkniecieZmianyBezWyplaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_POSZamkniecieZmianyBezWyplaty");
            entity.Property(e => e.StaPotwierdzeniePrzejazdu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PotwierdzeniePrzejazdu");
            entity.Property(e => e.StaPracaTerminalowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PracaTerminalowa");
            entity.Property(e => e.StaPrezentujWszystkoPl)
                .HasDefaultValue(0)
                .HasColumnName("Sta_PrezentujWszystkoPl");
            entity.Property(e => e.StaPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PriorytetRez");
            entity.Property(e => e.StaPropozycjaPaczkiPrzelewow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PropozycjaPaczkiPrzelewow");
            entity.Property(e => e.StaPrzerywanieSesji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PrzerywanieSesji");
            entity.Property(e => e.StaPrzypisanyModul)
                .HasDefaultValue(0)
                .HasColumnName("Sta_PrzypisanyModul");
            entity.Property(e => e.StaPrzypisanyModul2)
                .HasDefaultValue(0)
                .HasColumnName("Sta_PrzypisanyModul2");
            entity.Property(e => e.StaPulpitDomyslny)
                .HasDefaultValue(0)
                .HasColumnName("Sta_PulpitDomyslny");
            entity.Property(e => e.StaPytanieOpodzialPlat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_PytanieOPodzialPlat");
            entity.Property(e => e.StaRabatOperatora)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Sta_RabatOperatora");
            entity.Property(e => e.StaRabatOperatoraBezOgraniczen)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_RabatOperatoraBezOgraniczen");
            entity.Property(e => e.StaRaportyAbcxyz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_RaportyABCXYZ");
            entity.Property(e => e.StaRealizacjaUmpoPrzekroczeniuIlosciNaPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_RealizacjaUMPoPrzekroczeniuIlosciNaPoz");
            entity.Property(e => e.StaRozdzielZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_RozdzielZasoby");
            entity.Property(e => e.StaRozliczenieKampanii)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_RozliczenieKampanii");
            entity.Property(e => e.StaRoznicowyVatnaFaKoncowe)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_RoznicowyVATNaFaKoncowe");
            entity.Property(e => e.StaRozpoznawanieTwarzy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_RozpoznawanieTwarzy");
            entity.Property(e => e.StaSerwerDrukarka)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Sta_SerwerDrukarka");
            entity.Property(e => e.StaSerwerWydr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_SerwerWydr");
            entity.Property(e => e.StaStrukturaKosztowDodZak)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_StrukturaKosztowDodZak");
            entity.Property(e => e.StaStrukturaMagazynu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_StrukturaMagazynu");
            entity.Property(e => e.StaTlumaczenie)
                .HasDefaultValue((byte)1)
                .HasColumnName("Sta_Tlumaczenie");
            entity.Property(e => e.StaTransakcjaUjemnyStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_TransakcjaUjemnyStan");
            entity.Property(e => e.StaTransakcjaWyplataSrodkow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_TransakcjaWyplataSrodkow");
            entity.Property(e => e.StaUzywajKomunikatora)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_UzywajKomunikatora");
            entity.Property(e => e.StaWgladListaWno)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_WgladListaWno");
            entity.Property(e => e.StaWidziCenyZakupu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_WidziCenyZakupu");
            entity.Property(e => e.StaWidziKosztyZlecenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_WidziKosztyZlecenia");
            entity.Property(e => e.StaWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_Wsk");
            entity.Property(e => e.StaZamPotw)
                .HasDefaultValue(0)
                .HasColumnName("Sta_ZamPotw");
            entity.Property(e => e.StaZamykanieOkresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZamykanieOkresu");
            entity.Property(e => e.StaZarzadzaniePulpitami)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZarzadzaniePulpitami");
            entity.Property(e => e.StaZarzadzanieWyglademList)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZarzadzanieWyglademList");
            entity.Property(e => e.StaZatwierdzanieDelegacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZatwierdzanieDelegacji");
            entity.Property(e => e.StaZatwierdzanieDokPodWzgledem)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZatwierdzanieDokPodWzgledem");
            entity.Property(e => e.StaZezwalajNaOtwieranieZakonUmow)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZezwalajNaOtwieranieZakonUmow");
            entity.Property(e => e.StaZmianaPrzyczynyKorNaZatwDok)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZmianaPrzyczynyKorNaZatwDok");
            entity.Property(e => e.StaZwijanieListyDokZwPoziom)
                .HasDefaultValue((byte)1)
                .HasColumnName("Sta_ZwijanieListyDokZwPoziom");
            entity.Property(e => e.StaZwijanieListyDokZwTryb)
                .HasDefaultValue((byte)0)
                .HasColumnName("Sta_ZwijanieListyDokZwTryb");
        });

        modelBuilder.Entity<StaKonfig>(entity =>
        {
            entity.HasKey(e => new { e.StKStaNumer, e.StKStaLp, e.StKNumer }).HasName("StK_Primary");

            entity.ToTable("StaKonfig", "CDN");

            entity.Property(e => e.StKStaNumer).HasColumnName("StK_StaNumer");
            entity.Property(e => e.StKStaLp).HasColumnName("StK_StaLp");
            entity.Property(e => e.StKNumer).HasColumnName("StK_Numer");
            entity.Property(e => e.StKStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("StK_StaFirma");
            entity.Property(e => e.StKStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("StK_StaTyp");
            entity.Property(e => e.StKSystem)
                .HasDefaultValue((byte)0)
                .HasColumnName("StK_System");
            entity.Property(e => e.StKWartosc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("StK_Wartosc");

            entity.HasOne(d => d.StKStaNumerNavigation).WithMany(p => p.StaKonfigs)
                .HasForeignKey(d => d.StKStaNumer)
                .HasConstraintName("FK_StKPrimary");
        });

        modelBuilder.Entity<StaOpisy>(entity =>
        {
            entity.HasKey(e => new { e.StOStaNumer, e.StOStaLp }).HasName("StO_Primary");

            entity.ToTable("StaOpisy", "CDN");

            entity.Property(e => e.StOStaNumer).HasColumnName("StO_StaNumer");
            entity.Property(e => e.StOStaLp).HasColumnName("StO_StaLp");
            entity.Property(e => e.StOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("StO_Opis");
            entity.Property(e => e.StOStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("StO_StaFirma");
            entity.Property(e => e.StOStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("StO_StaTyp");
            entity.Property(e => e.StOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("StO_Typ");

            entity.HasOne(d => d.StOStaNumerNavigation).WithMany(p => p.StaOpisies)
                .HasForeignKey(d => d.StOStaNumer)
                .HasConstraintName("FK_StOPrimary");
        });

        modelBuilder.Entity<StaZakazy>(entity =>
        {
            entity.HasKey(e => new { e.StZStaNumer, e.StZProcId }).HasName("StZ_Primary");

            entity.ToTable("StaZakazy", "CDN");

            entity.Property(e => e.StZStaNumer).HasColumnName("StZ_StaNumer");
            entity.Property(e => e.StZProcId).HasColumnName("StZ_ProcID");
            entity.Property(e => e.StZMaskaFormy)
                .HasDefaultValue((byte)0)
                .HasColumnName("StZ_MaskaFormy");
            entity.Property(e => e.StZMaskaFormyAtr)
                .HasDefaultValue((short)0)
                .HasColumnName("StZ_MaskaFormyAtr");
            entity.Property(e => e.StZMaskaFormyExp)
                .HasDefaultValue((short)0)
                .HasColumnName("StZ_MaskaFormyExp");
            entity.Property(e => e.StZStaFirma)
                .HasDefaultValue(0)
                .HasColumnName("StZ_StaFirma");
            entity.Property(e => e.StZStaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("StZ_StaLp");
            entity.Property(e => e.StZStaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("StZ_StaTyp");

            entity.HasOne(d => d.StZStaNumerNavigation).WithMany(p => p.StaZakazies)
                .HasForeignKey(d => d.StZStaNumer)
                .HasConstraintName("FK_StZPrimary");
        });

        modelBuilder.Entity<StacjeRobocze>(entity =>
        {
            entity.HasKey(e => e.StrId).HasName("Str_Primary");

            entity.ToTable("StacjeRobocze", "CDN");

            entity.HasIndex(e => e.StrNazwa, "StrNazwa").IsUnique();

            entity.Property(e => e.StrId).HasColumnName("Str_Id");
            entity.Property(e => e.StrNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Str_Nazwa");
        });

        modelBuilder.Entity<Stany>(entity =>
        {
            entity.HasKey(e => new { e.DtsKksnumer, e.DtsRokMiesiac, e.DtsSpid }).HasName("DTS_Primary");

            entity.ToTable("Stany", "CDN");

            entity.Property(e => e.DtsKksnumer).HasColumnName("DTS_KKSNumer");
            entity.Property(e => e.DtsRokMiesiac).HasColumnName("DTS_RokMiesiac");
            entity.Property(e => e.DtsSpid).HasColumnName("DTS_SPID");
            entity.Property(e => e.DtsObrotyCredit)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyCredit");
            entity.Property(e => e.DtsObrotyCreditBuf)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyCreditBuf");
            entity.Property(e => e.DtsObrotyDebet)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyDebet");
            entity.Property(e => e.DtsObrotyDebetBuf)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyDebetBuf");
            entity.Property(e => e.DtsObrotyNarCredit)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyNarCredit");
            entity.Property(e => e.DtsObrotyNarCreditBuf)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyNarCreditBuf");
            entity.Property(e => e.DtsObrotyNarDebet)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyNarDebet");
            entity.Property(e => e.DtsObrotyNarDebetBuf)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("DTS_ObrotyNarDebetBuf");
        });

        modelBuilder.Entity<Statystyki>(entity =>
        {
            entity.HasKey(e => new { e.SttObiektId, e.SttOpeNumer }).HasName("STT_Primary");

            entity.ToTable("Statystyki", "CDN");

            entity.Property(e => e.SttObiektId).HasColumnName("STT_ObiektID");
            entity.Property(e => e.SttOpeNumer).HasColumnName("STT_OpeNumer");
            entity.Property(e => e.SttLicznik)
                .HasDefaultValue(0)
                .HasColumnName("STT_Licznik");
        });

        modelBuilder.Entity<Subelementy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("subelementy");

            entity.Property(e => e.Idpaczki).HasColumnName("IDPaczki");
            entity.Property(e => e.KsprCzdOrgId).HasColumnName("KSPR_CzdOrgID");
            entity.Property(e => e.KsprDokNumerOrgId)
                .HasMaxLength(65)
                .HasColumnName("KSPR_DokNumerOrgID");
            entity.Property(e => e.KsprDokWysylkiOrgId)
                .HasMaxLength(65)
                .HasColumnName("KSPR_DokWysylkiOrgId");
            entity.Property(e => e.KsprOrgId)
                .HasMaxLength(50)
                .HasColumnName("KSPR_OrgID");
            entity.Property(e => e.KsprPozycjaOrgId).HasColumnName("KSPR_PozycjaOrgID");
            entity.Property(e => e.KsprSubPozycjaOrgId).HasColumnName("KSPR_SubPozycjaOrgID");
            entity.Property(e => e.ProcentZsubelementow)
                .HasColumnType("decimal(15, 6)")
                .HasColumnName("procentZSubelementow");
        });

        modelBuilder.Entity<Swdrukarki>(entity =>
        {
            entity.HasKey(e => new { e.SwdSerwerNazwa, e.SwdDrukarkaNazwa }).HasName("SWD_Primary");

            entity.ToTable("SWDrukarki", "CDN");

            entity.Property(e => e.SwdSerwerNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWD_SerwerNazwa");
            entity.Property(e => e.SwdDrukarkaNazwa)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWD_DrukarkaNazwa");
            entity.Property(e => e.SwdOpis)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWD_Opis");
        });

        modelBuilder.Entity<Swkolejka>(entity =>
        {
            entity.HasKey(e => new { e.SwkPolecenieId, e.SwkId }).HasName("SWK_Primary");

            entity.ToTable("SWKolejka", "CDN");

            entity.Property(e => e.SwkPolecenieId).HasColumnName("SWK_PolecenieID");
            entity.Property(e => e.SwkId).HasColumnName("SWK_ID");
            entity.Property(e => e.SwkNumerKolejki)
                .HasDefaultValue((short)0)
                .HasColumnName("SWK_NumerKolejki");
            entity.Property(e => e.SwkWartosci)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWK_Wartosci");

            entity.HasOne(d => d.SwkPolecenie).WithMany(p => p.Swkolejkas)
                .HasForeignKey(d => d.SwkPolecenieId)
                .HasConstraintName("FK_SWKPrimary");
        });

        modelBuilder.Entity<Swpolecenium>(entity =>
        {
            entity.HasKey(e => e.SwpPolecenieId).HasName("SWP_Primary");

            entity.ToTable("SWPolecenia", "CDN");

            entity.HasIndex(e => new { e.SwpStan, e.SwpPolecenieId }, "SWPStan").IsUnique();

            entity.Property(e => e.SwpPolecenieId).HasColumnName("SWP_PolecenieID");
            entity.Property(e => e.SwpAutor)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_Autor");
            entity.Property(e => e.SwpDrukarkaNazwa)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_DrukarkaNazwa");
            entity.Property(e => e.SwpDrukarkaPlik)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_DrukarkaPlik");
            entity.Property(e => e.SwpDrukujZkolejki)
                .HasDefaultValue((byte)0)
                .HasColumnName("SWP_DrukujZKolejki");
            entity.Property(e => e.SwpFiltrSql)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_FiltrSQL");
            entity.Property(e => e.SwpFiltrTps)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_FiltrTPS");
            entity.Property(e => e.SwpFormatId)
                .HasDefaultValue(0)
                .HasColumnName("SWP_FormatID");
            entity.Property(e => e.SwpIloscKopii)
                .HasDefaultValue((short)0)
                .HasColumnName("SWP_IloscKopii");
            entity.Property(e => e.SwpIloscProb)
                .HasDefaultValue((short)0)
                .HasColumnName("SWP_IloscProb");
            entity.Property(e => e.SwpKontekstId)
                .HasDefaultValue(0)
                .HasColumnName("SWP_KontekstID");
            entity.Property(e => e.SwpLData1)
                .HasDefaultValue(0)
                .HasColumnName("SWP_lData1");
            entity.Property(e => e.SwpLData2)
                .HasDefaultValue(0)
                .HasColumnName("SWP_lData2");
            entity.Property(e => e.SwpLData3)
                .HasDefaultValue(0)
                .HasColumnName("SWP_lData3");
            entity.Property(e => e.SwpMailAdresat)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_MailAdresat");
            entity.Property(e => e.SwpMailTekst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_MailTekst");
            entity.Property(e => e.SwpMailTemat)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_MailTemat");
            entity.Property(e => e.SwpMaxIloscProb)
                .HasDefaultValue((short)0)
                .HasColumnName("SWP_MaxIloscProb");
            entity.Property(e => e.SwpPolecenieOpis)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_PolecenieOpis");
            entity.Property(e => e.SwpProcId)
                .HasDefaultValue(0)
                .HasColumnName("SWP_ProcID");
            entity.Property(e => e.SwpSSeria1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_sSeria1");
            entity.Property(e => e.SwpSSeria2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_sSeria2");
            entity.Property(e => e.SwpSSeria3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_sSeria3");
            entity.Property(e => e.SwpSTekst1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_sTekst1");
            entity.Property(e => e.SwpSTekst2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_sTekst2");
            entity.Property(e => e.SwpSTekst3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_sTekst3");
            entity.Property(e => e.SwpSerwerNazwa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_SerwerNazwa");
            entity.Property(e => e.SwpSortowanie)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWP_Sortowanie");
            entity.Property(e => e.SwpStan)
                .HasDefaultValue((short)0)
                .HasColumnName("SWP_Stan");
            entity.Property(e => e.SwpTsutworzenia)
                .HasDefaultValue(0)
                .HasColumnName("SWP_TSUtworzenia");
            entity.Property(e => e.SwpWydrukId)
                .HasDefaultValue(0)
                .HasColumnName("SWP_WydrukID");
            entity.Property(e => e.SwpWyslijMaila)
                .HasDefaultValue((byte)0)
                .HasColumnName("SWP_WyslijMaila");
            entity.Property(e => e.SwpZrodloId)
                .HasDefaultValue((byte)0)
                .HasColumnName("SWP_ZrodloID");
        });

        modelBuilder.Entity<Swwku>(entity =>
        {
            entity.HasKey(e => e.SwwSymbol).HasName("SWW_Primary");

            entity.ToTable("SWWKU", "CDN");

            entity.Property(e => e.SwwSymbol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWW_Symbol");
            entity.Property(e => e.SwwFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("SWW_FlagaVAT");
            entity.Property(e => e.SwwOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWW_Opis");
            entity.Property(e => e.SwwStawkaVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("SWW_StawkaVAT");
        });

        modelBuilder.Entity<Swzmienne>(entity =>
        {
            entity.HasKey(e => new { e.SwzPolecenieId, e.SwzNazwa }).HasName("SWZ_Primary");

            entity.ToTable("SWZmienne", "CDN");

            entity.Property(e => e.SwzPolecenieId).HasColumnName("SWZ_PolecenieID");
            entity.Property(e => e.SwzNazwa)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWZ_Nazwa");
            entity.Property(e => e.SwzFormat)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWZ_Format");
            entity.Property(e => e.SwzNumeryczna)
                .HasDefaultValue((byte)0)
                .HasColumnName("SWZ_Numeryczna");
            entity.Property(e => e.SwzTyp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWZ_Typ");
            entity.Property(e => e.SwzWartosc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SWZ_Wartosc");

            entity.HasOne(d => d.SwzPolecenie).WithMany(p => p.Swzmiennes)
                .HasForeignKey(d => d.SwzPolecenieId)
                .HasConstraintName("FK_SWZPrimary");
        });

        modelBuilder.Entity<SymboleKont>(entity =>
        {
            entity.HasKey(e => e.SmkId).HasName("SMK_Primary");

            entity.ToTable("SymboleKont", "CDN");

            entity.HasIndex(e => e.SmkNazwa, "SMKNazwa").IsUnique();

            entity.HasIndex(e => e.SmkNumer, "SMKNumer").IsUnique();

            entity.Property(e => e.SmkId).HasColumnName("SMK_ID");
            entity.Property(e => e.SmkKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SMK_Konto");
            entity.Property(e => e.SmkNazwa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SMK_Nazwa");
            entity.Property(e => e.SmkNumer)
                .HasDefaultValue(0)
                .HasColumnName("SMK_Numer");
            entity.Property(e => e.SmkOpis)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SMK_Opis");
        });

        modelBuilder.Entity<SynchroT>(entity =>
        {
            entity.HasKey(e => e.SytsTu).HasName("SYTS_Primary");

            entity.ToTable("SynchroTS", "CDN");

            entity.Property(e => e.SytsTu).HasColumnName("SYTS_TU");
            entity.Property(e => e.SytsDs)
                .HasDefaultValue(0)
                .HasColumnName("SYTS_DS");
        });

        modelBuilder.Entity<SystemCdn>(entity =>
        {
            entity.HasKey(e => e.SysId).HasName("SYS_Primary");

            entity.ToTable("SystemCDN", "CDN");

            entity.Property(e => e.SysId)
                .ValueGeneratedNever()
                .HasColumnName("SYS_ID");
            entity.Property(e => e.SysWartosc)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("SYS_Wartosc");
        });

        modelBuilder.Entity<SystemInfo>(entity =>
        {
            entity.HasKey(e => e.SysIId).HasName("SysI_Primary");

            entity.ToTable("SystemInfo", "CDN");

            entity.HasIndex(e => new { e.SysIWyslane, e.SysIData }, "SysI_Wyslane").IsUnique();

            entity.Property(e => e.SysIId).HasColumnName("SysI_Id");
            entity.Property(e => e.SysIAdresMac)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SysI_AdresMAC");
            entity.Property(e => e.SysIAutomat).HasColumnName("SysI_Automat");
            entity.Property(e => e.SysIBledy)
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SysI_Bledy");
            entity.Property(e => e.SysIDane)
                .HasDefaultValue("")
                .HasColumnType("xml")
                .HasColumnName("SysI_Dane");
            entity.Property(e => e.SysIData).HasColumnName("SysI_Data");
            entity.Property(e => e.SysIPlikDl)
                .HasDefaultValueSql("('')")
                .HasColumnType("image")
                .HasColumnName("SysI_PlikDL");
            entity.Property(e => e.SysITyp).HasColumnName("SysI_Typ");
            entity.Property(e => e.SysIWyslane).HasColumnName("SysI_Wyslane");
        });

        modelBuilder.Entity<T2bsoftHistoryczneRodzajKontrahentum>(entity =>
        {
            entity.HasKey(e => e.HrkId).HasName("prm_ky");

            entity.ToTable("t_2BSoft_HistoryczneRodzajKontrahenta", "CDN");

            entity.Property(e => e.HrkId).HasColumnName("HRK_Id");
            entity.Property(e => e.HrkAkronim)
                .HasMaxLength(20)
                .HasColumnName("HRK_Akronim");
            entity.Property(e => e.HrkCzyNowaTrn).HasColumnName("HRK_CzyNowaTrn");
            entity.Property(e => e.HrkDpnew).HasColumnName("HRK_DPnew");
            entity.Property(e => e.HrkDpold).HasColumnName("HRK_DPold");
            entity.Property(e => e.HrkKntNumer).HasColumnName("HRK_KntNumer");
            entity.Property(e => e.HrkOstatniaTrn).HasColumnName("HRK_OstatniaTrn");
            entity.Property(e => e.HrkOtnew).HasColumnName("HRK_OTnew");
            entity.Property(e => e.HrkOtold).HasColumnName("HRK_OTold");
            entity.Property(e => e.HrkPtnew).HasColumnName("HRK_PTnew");
            entity.Property(e => e.HrkPtold).HasColumnName("HRK_PTold");
            entity.Property(e => e.HrkRodzajKntNew).HasColumnName("HRK_RodzajKntNew");
            entity.Property(e => e.HrkRodzajKntOld).HasColumnName("HRK_RodzajKntOld");
        });

        modelBuilder.Entity<Techniczna>(entity =>
        {
            entity.HasKey(e => e.TechId).HasName("Tech_Primary");

            entity.ToTable("Techniczna", "CDN");

            entity.Property(e => e.TechId).HasColumnName("Tech_Id");
            entity.Property(e => e.TechDecimal1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Tech_Decimal1");
            entity.Property(e => e.TechDecimal11)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Tech_Decimal11");
            entity.Property(e => e.TechDecimal12)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Tech_Decimal12");
            entity.Property(e => e.TechDecimal13)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Tech_Decimal13");
            entity.Property(e => e.TechDecimal14)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Tech_Decimal14");
            entity.Property(e => e.TechDecimal15)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Tech_Decimal15");
            entity.Property(e => e.TechDecimal16)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Tech_Decimal16");
            entity.Property(e => e.TechDecimal2)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Tech_Decimal2");
            entity.Property(e => e.TechDecimal3)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Tech_Decimal3");
            entity.Property(e => e.TechDecimal4)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Tech_Decimal4");
            entity.Property(e => e.TechDecimal5)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Tech_Decimal5");
            entity.Property(e => e.TechDecimal6)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Tech_Decimal6");
            entity.Property(e => e.TechString1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String1");
            entity.Property(e => e.TechString11)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String11");
            entity.Property(e => e.TechString12)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String12");
            entity.Property(e => e.TechString13)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String13");
            entity.Property(e => e.TechString14)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String14");
            entity.Property(e => e.TechString15)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String15");
            entity.Property(e => e.TechString16)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String16");
            entity.Property(e => e.TechString2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String2");
            entity.Property(e => e.TechString3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String3");
            entity.Property(e => e.TechString4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String4");
            entity.Property(e => e.TechString5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String5");
            entity.Property(e => e.TechString6)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tech_String6");
        });

        modelBuilder.Entity<Techniczna2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Techniczna2", "CDN");

            entity.Property(e => e.Tec2String1)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String1");
            entity.Property(e => e.Tec2String10)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String10");
            entity.Property(e => e.Tec2String100)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String100");
            entity.Property(e => e.Tec2String11)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String11");
            entity.Property(e => e.Tec2String12)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String12");
            entity.Property(e => e.Tec2String13)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String13");
            entity.Property(e => e.Tec2String14)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String14");
            entity.Property(e => e.Tec2String15)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String15");
            entity.Property(e => e.Tec2String16)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String16");
            entity.Property(e => e.Tec2String17)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String17");
            entity.Property(e => e.Tec2String18)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String18");
            entity.Property(e => e.Tec2String19)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String19");
            entity.Property(e => e.Tec2String2)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String2");
            entity.Property(e => e.Tec2String20)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String20");
            entity.Property(e => e.Tec2String21)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String21");
            entity.Property(e => e.Tec2String22)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String22");
            entity.Property(e => e.Tec2String23)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String23");
            entity.Property(e => e.Tec2String24)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String24");
            entity.Property(e => e.Tec2String25)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String25");
            entity.Property(e => e.Tec2String26)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String26");
            entity.Property(e => e.Tec2String27)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String27");
            entity.Property(e => e.Tec2String28)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String28");
            entity.Property(e => e.Tec2String29)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String29");
            entity.Property(e => e.Tec2String3)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String3");
            entity.Property(e => e.Tec2String30)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String30");
            entity.Property(e => e.Tec2String31)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String31");
            entity.Property(e => e.Tec2String32)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String32");
            entity.Property(e => e.Tec2String33)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String33");
            entity.Property(e => e.Tec2String34)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String34");
            entity.Property(e => e.Tec2String35)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String35");
            entity.Property(e => e.Tec2String36)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String36");
            entity.Property(e => e.Tec2String37)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String37");
            entity.Property(e => e.Tec2String38)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String38");
            entity.Property(e => e.Tec2String39)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String39");
            entity.Property(e => e.Tec2String4)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String4");
            entity.Property(e => e.Tec2String40)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String40");
            entity.Property(e => e.Tec2String41)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String41");
            entity.Property(e => e.Tec2String42)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String42");
            entity.Property(e => e.Tec2String43)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String43");
            entity.Property(e => e.Tec2String44)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String44");
            entity.Property(e => e.Tec2String45)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String45");
            entity.Property(e => e.Tec2String46)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String46");
            entity.Property(e => e.Tec2String47)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String47");
            entity.Property(e => e.Tec2String48)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String48");
            entity.Property(e => e.Tec2String49)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String49");
            entity.Property(e => e.Tec2String5)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String5");
            entity.Property(e => e.Tec2String50)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String50");
            entity.Property(e => e.Tec2String51)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String51");
            entity.Property(e => e.Tec2String52)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String52");
            entity.Property(e => e.Tec2String53)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String53");
            entity.Property(e => e.Tec2String54)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String54");
            entity.Property(e => e.Tec2String55)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String55");
            entity.Property(e => e.Tec2String56)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String56");
            entity.Property(e => e.Tec2String57)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String57");
            entity.Property(e => e.Tec2String58)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String58");
            entity.Property(e => e.Tec2String59)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String59");
            entity.Property(e => e.Tec2String6)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String6");
            entity.Property(e => e.Tec2String60)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String60");
            entity.Property(e => e.Tec2String61)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String61");
            entity.Property(e => e.Tec2String62)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String62");
            entity.Property(e => e.Tec2String63)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String63");
            entity.Property(e => e.Tec2String64)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String64");
            entity.Property(e => e.Tec2String65)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String65");
            entity.Property(e => e.Tec2String66)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String66");
            entity.Property(e => e.Tec2String67)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String67");
            entity.Property(e => e.Tec2String68)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String68");
            entity.Property(e => e.Tec2String69)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String69");
            entity.Property(e => e.Tec2String7)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String7");
            entity.Property(e => e.Tec2String70)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String70");
            entity.Property(e => e.Tec2String71)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String71");
            entity.Property(e => e.Tec2String72)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String72");
            entity.Property(e => e.Tec2String73)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String73");
            entity.Property(e => e.Tec2String74)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String74");
            entity.Property(e => e.Tec2String75)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String75");
            entity.Property(e => e.Tec2String76)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String76");
            entity.Property(e => e.Tec2String77)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String77");
            entity.Property(e => e.Tec2String78)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String78");
            entity.Property(e => e.Tec2String79)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String79");
            entity.Property(e => e.Tec2String8)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String8");
            entity.Property(e => e.Tec2String80)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String80");
            entity.Property(e => e.Tec2String81)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String81");
            entity.Property(e => e.Tec2String82)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String82");
            entity.Property(e => e.Tec2String83)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String83");
            entity.Property(e => e.Tec2String84)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String84");
            entity.Property(e => e.Tec2String85)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String85");
            entity.Property(e => e.Tec2String86)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String86");
            entity.Property(e => e.Tec2String87)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String87");
            entity.Property(e => e.Tec2String88)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String88");
            entity.Property(e => e.Tec2String89)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String89");
            entity.Property(e => e.Tec2String9)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String9");
            entity.Property(e => e.Tec2String90)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String90");
            entity.Property(e => e.Tec2String91)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String91");
            entity.Property(e => e.Tec2String92)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String92");
            entity.Property(e => e.Tec2String93)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String93");
            entity.Property(e => e.Tec2String94)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String94");
            entity.Property(e => e.Tec2String95)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String95");
            entity.Property(e => e.Tec2String96)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String96");
            entity.Property(e => e.Tec2String97)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String97");
            entity.Property(e => e.Tec2String98)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String98");
            entity.Property(e => e.Tec2String99)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tec2_String99");
        });

        modelBuilder.Entity<TempRoz2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempRoz2");

            entity.HasIndex(e => new { e.TrnGidTyp, e.TrnGidNumer }, "ClusteredIndex-tempRoz2").IsClustered();

            entity.Property(e => e.RozKwota).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TrnGidNumer).HasColumnName("Trn_GidNumer");
            entity.Property(e => e.TrnGidTyp).HasColumnName("Trn_GidTyp");
            entity.Property(e => e.Trpkwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRPKwota");
            entity.Property(e => e.Trppozostaje)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRPPozostaje");
        });

        modelBuilder.Entity<TempRozrachunki>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempRozrachunki");

            entity.Property(e => e.RozDataRozliczenia).HasColumnName("ROZ_DataRozliczenia");
            entity.Property(e => e.RozKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Roz_KwotaSys");
            entity.Property(e => e.RozTrpLp).HasColumnName("Roz_TrpLp");
            entity.Property(e => e.RozTrpNumer).HasColumnName("Roz_TrpNumer");
            entity.Property(e => e.RozTrpTyp).HasColumnName("Roz_TrpTyp");
        });

        modelBuilder.Entity<TempSprTr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempSprTrs");

            entity.HasIndex(e => new { e.TrSGidtyp, e.TrSGidnumer }, "ClusteredIndex-tempSprTrs").IsClustered();

            entity.Property(e => e.TrSCchFirma).HasColumnName("TrS_CChFirma");
            entity.Property(e => e.TrSCchLp).HasColumnName("TrS_CChLp");
            entity.Property(e => e.TrSCchNumer).HasColumnName("TrS_CChNumer");
            entity.Property(e => e.TrSCchTyp).HasColumnName("TrS_CChTyp");
            entity.Property(e => e.TrSCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TrS_Cecha");
            entity.Property(e => e.TrSDsFfirma).HasColumnName("TrS_DsFFirma");
            entity.Property(e => e.TrSDsFlp).HasColumnName("TrS_DsFLp");
            entity.Property(e => e.TrSDsFnumer).HasColumnName("TrS_DsFNumer");
            entity.Property(e => e.TrSDsFtyp).HasColumnName("TrS_DsFTyp");
            entity.Property(e => e.TrSDstFirma).HasColumnName("TrS_DstFirma");
            entity.Property(e => e.TrSDstLp).HasColumnName("TrS_DstLp");
            entity.Property(e => e.TrSDstNumer).HasColumnName("TrS_DstNumer");
            entity.Property(e => e.TrSDstTyp).HasColumnName("TrS_DstTyp");
            entity.Property(e => e.TrSGidfirma).HasColumnName("TrS_GIDFirma");
            entity.Property(e => e.TrSGidlp).HasColumnName("TrS_GIDLp");
            entity.Property(e => e.TrSGidnumer).HasColumnName("TrS_GIDNumer");
            entity.Property(e => e.TrSGidtyp).HasColumnName("TrS_GIDTyp");
            entity.Property(e => e.TrSGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TrS_GUID");
            entity.Property(e => e.TrSIlosc)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrS_Ilosc");
            entity.Property(e => e.TrSIloscDpprzed)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrS_IloscDPPrzed");
            entity.Property(e => e.TrSIloscRezPrzywr)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrS_IloscRezPrzywr");
            entity.Property(e => e.TrSKosztKrajowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztKrajowy");
            entity.Property(e => e.TrSKosztKsiegowy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztKsiegowy");
            entity.Property(e => e.TrSKosztRzeczywisty)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztRzeczywisty");
            entity.Property(e => e.TrSKosztZagraniczny)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztZagraniczny");
            entity.Property(e => e.TrSKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TrS_KrajPoch");
            entity.Property(e => e.TrSKsiegowyDpprzed)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KsiegowyDPPrzed");
            entity.Property(e => e.TrSMagFirma).HasColumnName("TrS_MagFirma");
            entity.Property(e => e.TrSMagLp).HasColumnName("TrS_MagLp");
            entity.Property(e => e.TrSMagNumer).HasColumnName("TrS_MagNumer");
            entity.Property(e => e.TrSMagTyp).HasColumnName("TrS_MagTyp");
            entity.Property(e => e.TrSOrgFirma).HasColumnName("TrS_OrgFirma");
            entity.Property(e => e.TrSOrgLp).HasColumnName("TrS_OrgLp");
            entity.Property(e => e.TrSOrgNumer).HasColumnName("TrS_OrgNumer");
            entity.Property(e => e.TrSOrgTyp).HasColumnName("TrS_OrgTyp");
            entity.Property(e => e.TrSRezFirma).HasColumnName("TrS_RezFirma");
            entity.Property(e => e.TrSRezLp).HasColumnName("TrS_RezLp");
            entity.Property(e => e.TrSRezNumer).HasColumnName("TrS_RezNumer");
            entity.Property(e => e.TrSRezTyp).HasColumnName("TrS_RezTyp");
            entity.Property(e => e.TrSRezerwacjaZasobu).HasColumnName("TrS_RezerwacjaZasobu");
            entity.Property(e => e.TrSRzeczywistyDpprzed)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_RzeczywistyDPPrzed");
            entity.Property(e => e.TrSSpiFirma).HasColumnName("TrS_SpiFirma");
            entity.Property(e => e.TrSSpiLp).HasColumnName("TrS_SpiLp");
            entity.Property(e => e.TrSSpiNumer).HasColumnName("TrS_SpiNumer");
            entity.Property(e => e.TrSSpiTyp).HasColumnName("TrS_SpiTyp");
            entity.Property(e => e.TrSSubGidlp).HasColumnName("TrS_SubGIDLp");
            entity.Property(e => e.TrSSubOrgLp).HasColumnName("TrS_SubOrgLp");
            entity.Property(e => e.TrSSubSpiLp).HasColumnName("TrS_SubSpiLp");
            entity.Property(e => e.TrSSubZwrLp).HasColumnName("TrS_SubZwrLp");
            entity.Property(e => e.TrSTrnTstamp).HasColumnName("TrS_TrnTStamp");
            entity.Property(e => e.TrSWalutaDostawy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TrS_WalutaDostawy");
            entity.Property(e => e.TrSWalutaKosztuKrajowego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TrS_WalutaKosztuKrajowego");
            entity.Property(e => e.TrSWalutaKosztuZagranicznego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TrS_WalutaKosztuZagranicznego");
            entity.Property(e => e.TrSWartoscDostawy)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_WartoscDostawy");
            entity.Property(e => e.TrSZlcFirma).HasColumnName("TrS_ZlcFirma");
            entity.Property(e => e.TrSZlcLp).HasColumnName("TrS_ZlcLp");
            entity.Property(e => e.TrSZlcNumer).HasColumnName("TrS_ZlcNumer");
            entity.Property(e => e.TrSZlcTyp).HasColumnName("TrS_ZlcTyp");
            entity.Property(e => e.TrSZwrFirma).HasColumnName("TrS_ZwrFirma");
            entity.Property(e => e.TrSZwrLp).HasColumnName("TrS_ZwrLp");
            entity.Property(e => e.TrSZwrNumer).HasColumnName("TrS_ZwrNumer");
            entity.Property(e => e.TrSZwrTyp).HasColumnName("TrS_ZwrTyp");
        });

        modelBuilder.Entity<TempSumyRozrachunki>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempSumyRozrachunki");

            entity.Property(e => e.Dstnumer).HasColumnName("DSTNUMER");
            entity.Property(e => e.Dsttyp).HasColumnName("DSTTYP");
            entity.Property(e => e.SumaTrndst)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("SumaTRNDST");
        });

        modelBuilder.Entity<TempZakRoz>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempZakRoz");

            entity.HasIndex(e => new { e.TrnGidTyp, e.TrnGidNumer }, "ClusteredIndex-tempZakRoz").IsClustered();

            entity.Property(e => e.RozKwota).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TrnGidNumer).HasColumnName("Trn_GidNumer");
            entity.Property(e => e.TrnGidTyp).HasColumnName("Trn_GidTyp");
            entity.Property(e => e.Trpkwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRPKwota");
            entity.Property(e => e.Trppozostaje)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRPPozostaje");
        });

        modelBuilder.Entity<TestyDefiniowane>(entity =>
        {
            entity.HasKey(e => e.TdeId).HasName("TDE_Primary");

            entity.ToTable("TestyDefiniowane", "CDN");

            entity.HasIndex(e => e.TdeNazwa, "TDENazwa").IsUnique();

            entity.Property(e => e.TdeId).HasColumnName("TDE_ID");
            entity.Property(e => e.TdeAktywny)
                .HasDefaultValue((byte)0)
                .HasColumnName("TDE_Aktywny");
            entity.Property(e => e.TdeNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDE_Nazwa");
            entity.Property(e => e.TdeZapytanie)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDE_Zapytanie");
            entity.Property(e => e.TdeZdarzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("TDE_Zdarzenie");
        });

        modelBuilder.Entity<TgdLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TGD_Levels", "CDN");

            entity.HasIndex(e => e.Gid, "U_TGD_Levels").IsClustered();

            entity.Property(e => e.Biid)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("BIID");
            entity.Property(e => e.Gid).HasColumnName("GID");
            entity.Property(e => e.Name)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tkelem>(entity =>
        {
            entity.HasKey(e => new { e.TkeGidtyp, e.TkeGidnumer, e.TkeGidlp }).HasName("TKE_Primary");

            entity.ToTable("TKElem", "CDN", tb => tb.HasTrigger("TKElem_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.TkeAkwTyp, e.TkeAkwNumer, e.TkeTknTstamp }, "TKEAkwizytor").IsUnique();

            entity.HasIndex(e => new { e.TkeKntTyp, e.TkeKntNumer, e.TkeTknTstamp }, "TKEKontrah").IsUnique();

            entity.HasIndex(e => new { e.TkeTwrTyp, e.TkeTwrNumer, e.TkeTknTstamp }, "TKETowar").IsUnique();

            entity.Property(e => e.TkeGidtyp).HasColumnName("TKE_GIDTyp");
            entity.Property(e => e.TkeGidnumer).HasColumnName("TKE_GIDNumer");
            entity.Property(e => e.TkeGidlp).HasColumnName("TKE_GIDLp");
            entity.Property(e => e.TkeAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKE_AkwFirma");
            entity.Property(e => e.TkeAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_AkwLp");
            entity.Property(e => e.TkeAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKE_AkwNumer");
            entity.Property(e => e.TkeAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_AkwTyp");
            entity.Property(e => e.TkeDoZwrotu)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_DoZwrotu");
            entity.Property(e => e.TkeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKE_GIDFirma");
            entity.Property(e => e.TkeIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TKE_Ilosc");
            entity.Property(e => e.TkeJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("TKE_JmFormatZ");
            entity.Property(e => e.TkeJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKE_JmZ");
            entity.Property(e => e.TkeJmformat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TKE_JMFormat");
            entity.Property(e => e.TkeKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKE_KntFirma");
            entity.Property(e => e.TkeKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_KntLp");
            entity.Property(e => e.TkeKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKE_KntNumer");
            entity.Property(e => e.TkeKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_KntTyp");
            entity.Property(e => e.TkeKosztKsiegowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKE_KosztKsiegowy");
            entity.Property(e => e.TkeKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKE_KosztRzeczywisty");
            entity.Property(e => e.TkeKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TKE_KursL");
            entity.Property(e => e.TkeKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TKE_KursM");
            entity.Property(e => e.TkeNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_NrKursu");
            entity.Property(e => e.TkePozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_Pozycja");
            entity.Property(e => e.TkePrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TKE_PrzeliczL");
            entity.Property(e => e.TkePrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TKE_PrzeliczM");
            entity.Property(e => e.TkeTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("TKE_TerminZwrotu");
            entity.Property(e => e.TkeTknTstamp)
                .HasDefaultValue(0)
                .HasColumnName("TKE_TknTStamp");
            entity.Property(e => e.TkeTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKE_TwrFirma");
            entity.Property(e => e.TkeTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_TwrLp");
            entity.Property(e => e.TkeTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKE_TwrNumer");
            entity.Property(e => e.TkeTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKE_TwrTyp");
            entity.Property(e => e.TkeTypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("TKE_TypJM");
            entity.Property(e => e.TkeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKE_Waluta");
            entity.Property(e => e.TkeWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKE_Wartosc");
            entity.Property(e => e.TkeWartoscWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKE_WartoscWal");

            entity.HasOne(d => d.TkeGidnumerNavigation).WithMany(p => p.Tkelems)
                .HasForeignKey(d => d.TkeGidnumer)
                .HasConstraintName("FK_TKEPrimary");
        });

        modelBuilder.Entity<Tknag>(entity =>
        {
            entity.HasKey(e => e.TknGidnumer).HasName("TKN_Primary");

            entity.ToTable("TKNag", "CDN", tb => tb.HasTrigger("TKNag_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.TknAkwTyp, e.TknAkwNumer, e.TknDataWyst, e.TknGidtyp, e.TknGidnumer }, "TKNAkwizytor").IsUnique();

            entity.HasIndex(e => new { e.TknTkntyp, e.TknRokMiesiac, e.TknTknseria, e.TknTknnumer, e.TknTknlp }, "TKNData").IsUnique();

            entity.HasIndex(e => new { e.TknDoZwrotu, e.TknTerminZwrotu, e.TknGidtyp, e.TknGidnumer }, "TKNDoZwrotu").IsUnique();

            entity.HasIndex(e => new { e.TknKntTyp, e.TknKntNumer, e.TknDataWyst, e.TknGidtyp, e.TknGidnumer }, "TKNKontrah").IsUnique();

            entity.HasIndex(e => new { e.TknKnAtyp, e.TknKnAnumer }, "TKNKontrahAdr");

            entity.HasIndex(e => new { e.TknSpiTyp, e.TknSpiNumer, e.TknGidtyp, e.TknGidnumer }, "TKNSpinacz").IsUnique();

            entity.HasIndex(e => new { e.TknTkntyp, e.TknTknrok, e.TknTknseria, e.TknTknnumer, e.TknTknlp }, "TKNTransakcja").IsUnique();

            entity.HasIndex(e => new { e.TknZwrTyp, e.TknZwrNumer }, "TKNZwrot");

            entity.Property(e => e.TknGidnumer).HasColumnName("TKN_GIDNumer");
            entity.Property(e => e.TknAdWfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_AdWFirma");
            entity.Property(e => e.TknAdWlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_AdWLp");
            entity.Property(e => e.TknAdWnumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_AdWNumer");
            entity.Property(e => e.TknAdWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_AdWTyp");
            entity.Property(e => e.TknAktywny)
                .HasDefaultValue(0)
                .HasColumnName("TKN_Aktywny");
            entity.Property(e => e.TknAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_AkwFirma");
            entity.Property(e => e.TknAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_AkwLp");
            entity.Property(e => e.TknAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_AkwNumer");
            entity.Property(e => e.TknAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_AkwTyp");
            entity.Property(e => e.TknCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_CenaSpr");
            entity.Property(e => e.TknDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("TKN_DataWyst");
            entity.Property(e => e.TknDoZwrotu)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_DoZwrotu");
            entity.Property(e => e.TknDokumentObcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_DokumentObcy");
            entity.Property(e => e.TknDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_Dziennik");
            entity.Property(e => e.TknFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_FormaNazwa");
            entity.Property(e => e.TknFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TKN_FormaNr");
            entity.Property(e => e.TknFormaRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TKN_FormaRabat");
            entity.Property(e => e.TknGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_GIDFirma");
            entity.Property(e => e.TknGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_GIDLp");
            entity.Property(e => e.TknGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_GIDTyp");
            entity.Property(e => e.TknId)
                .HasDefaultValue(0)
                .HasColumnName("TKN_ID");
            entity.Property(e => e.TknKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_KnAFirma");
            entity.Property(e => e.TknKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_KnALp");
            entity.Property(e => e.TknKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_KnANumer");
            entity.Property(e => e.TknKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_KnATyp");
            entity.Property(e => e.TknKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_KnDFirma");
            entity.Property(e => e.TknKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_KnDLp");
            entity.Property(e => e.TknKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_KnDNumer");
            entity.Property(e => e.TknKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_KnDTyp");
            entity.Property(e => e.TknKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_KntFirma");
            entity.Property(e => e.TknKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_KntLp");
            entity.Property(e => e.TknKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_KntNumer");
            entity.Property(e => e.TknKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_KntTyp");
            entity.Property(e => e.TknKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TKN_KursL");
            entity.Property(e => e.TknKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TKN_KursM");
            entity.Property(e => e.TknLicznikkopii)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_Licznikkopii");
            entity.Property(e => e.TknMagDfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_MagDFirma");
            entity.Property(e => e.TknMagDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_MagDLp");
            entity.Property(e => e.TknMagDnumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_MagDNumer");
            entity.Property(e => e.TknMagDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_MagDTyp");
            entity.Property(e => e.TknMagZfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_MagZFirma");
            entity.Property(e => e.TknMagZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_MagZLp");
            entity.Property(e => e.TknMagZnumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_MagZNumer");
            entity.Property(e => e.TknMagZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_MagZTyp");
            entity.Property(e => e.TknNrKorekty)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_NrKorekty");
            entity.Property(e => e.TknNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_NrKursu");
            entity.Property(e => e.TknOdoFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OdoFirma");
            entity.Property(e => e.TknOdoLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OdoLp");
            entity.Property(e => e.TknOdoNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OdoNumer");
            entity.Property(e => e.TknOdoTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OdoTyp");
            entity.Property(e => e.TknOpeFirmaR)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OpeFirmaR");
            entity.Property(e => e.TknOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OpeFirmaW");
            entity.Property(e => e.TknOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OpeFirmaZ");
            entity.Property(e => e.TknOpeLpR)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OpeLpR");
            entity.Property(e => e.TknOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OpeLpW");
            entity.Property(e => e.TknOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OpeLpZ");
            entity.Property(e => e.TknOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OpeNumerR");
            entity.Property(e => e.TknOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OpeNumerW");
            entity.Property(e => e.TknOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("TKN_OpeNumerZ");
            entity.Property(e => e.TknOpeTypR)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OpeTypR");
            entity.Property(e => e.TknOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OpeTypW");
            entity.Property(e => e.TknOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_OpeTypZ");
            entity.Property(e => e.TknRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("TKN_RokMiesiac");
            entity.Property(e => e.TknSchFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_SchFirma");
            entity.Property(e => e.TknSchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_SchLp");
            entity.Property(e => e.TknSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_SchNumer");
            entity.Property(e => e.TknSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_SchTyp");
            entity.Property(e => e.TknSpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_SpiFirma");
            entity.Property(e => e.TknSpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_SpiLp");
            entity.Property(e => e.TknSpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_SpiNumer");
            entity.Property(e => e.TknSpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_SpiTyp");
            entity.Property(e => e.TknSposobDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_SposobDostawy");
            entity.Property(e => e.TknTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("TKN_TerminZwrotu");
            entity.Property(e => e.TknTknlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_TKNLp");
            entity.Property(e => e.TknTknnumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_TKNNumer");
            entity.Property(e => e.TknTknrok)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_TKNRok");
            entity.Property(e => e.TknTknseria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_TKNSeria");
            entity.Property(e => e.TknTkntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_TKNTyp");
            entity.Property(e => e.TknTrNfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_TrNFirma");
            entity.Property(e => e.TknTrNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_TrNLp");
            entity.Property(e => e.TknTrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_TrNNumer");
            entity.Property(e => e.TknTrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_TrNTyp");
            entity.Property(e => e.TknUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_Url");
            entity.Property(e => e.TknWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_Waluta");
            entity.Property(e => e.TknWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKN_Wartosc");
            entity.Property(e => e.TknWartoscWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKN_WartoscWal");
            entity.Property(e => e.TknWsk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKN_Wsk");
            entity.Property(e => e.TknZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("TKN_Zaksiegowano");
            entity.Property(e => e.TknZaokraglenie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TKN_Zaokraglenie");
            entity.Property(e => e.TknZaokraglenieWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TKN_ZaokraglenieWal");
            entity.Property(e => e.TknZwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKN_ZwrFirma");
            entity.Property(e => e.TknZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_ZwrLp");
            entity.Property(e => e.TknZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKN_ZwrNumer");
            entity.Property(e => e.TknZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKN_ZwrTyp");
        });

        modelBuilder.Entity<Tkselem>(entity =>
        {
            entity.HasKey(e => new { e.TksGidtyp, e.TksGidnumer, e.TksGidlp, e.TksSubGidlp }).HasName("TKS_Primary");

            entity.ToTable("TKSElem", "CDN", tb => tb.HasTrigger("TKSElem_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.TksCchTyp, e.TksCchNumer, e.TksCchLp, e.TksGidtyp, e.TksGidnumer, e.TksGidlp, e.TksSubGidlp }, "TKSCecha").IsUnique();

            entity.HasIndex(e => new { e.TksDstTyp, e.TksDstNumer, e.TksTkntstamp, e.TksGidtyp, e.TksGidnumer, e.TksGidlp, e.TksSubGidlp }, "TKSDostawa").IsUnique();

            entity.HasIndex(e => new { e.TksZwrTyp, e.TksZwrNumer, e.TksZwrLp, e.TksSubZwrLp, e.TksTkntstamp, e.TksGidtyp, e.TksGidnumer, e.TksGidlp, e.TksSubGidlp }, "TKSZwrot").IsUnique();

            entity.Property(e => e.TksGidtyp).HasColumnName("TKS_GIDTyp");
            entity.Property(e => e.TksGidnumer).HasColumnName("TKS_GIDNumer");
            entity.Property(e => e.TksGidlp).HasColumnName("TKS_GIDLp");
            entity.Property(e => e.TksSubGidlp).HasColumnName("TKS_SubGIDLp");
            entity.Property(e => e.TksCchFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKS_CChFirma");
            entity.Property(e => e.TksCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_CChLp");
            entity.Property(e => e.TksCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKS_CChNumer");
            entity.Property(e => e.TksCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_CChTyp");
            entity.Property(e => e.TksCecha)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TKS_Cecha");
            entity.Property(e => e.TksDoZwrotu)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_DoZwrotu");
            entity.Property(e => e.TksDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKS_DstFirma");
            entity.Property(e => e.TksDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_DstLp");
            entity.Property(e => e.TksDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKS_DstNumer");
            entity.Property(e => e.TksDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_DstTyp");
            entity.Property(e => e.TksGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TKS_GIDFirma");
            entity.Property(e => e.TksIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TKS_Ilosc");
            entity.Property(e => e.TksKosztKsiegowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKS_KosztKsiegowy");
            entity.Property(e => e.TksKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TKS_KosztRzeczywisty");
            entity.Property(e => e.TksMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKS_MagFirma");
            entity.Property(e => e.TksMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_MagLp");
            entity.Property(e => e.TksMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKS_MagNumer");
            entity.Property(e => e.TksMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_MagTyp");
            entity.Property(e => e.TksRezFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKS_RezFirma");
            entity.Property(e => e.TksRezLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_RezLp");
            entity.Property(e => e.TksRezNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKS_RezNumer");
            entity.Property(e => e.TksRezTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_RezTyp");
            entity.Property(e => e.TksSubZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_SubZwrLp");
            entity.Property(e => e.TksTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("TKS_TerminZwrotu");
            entity.Property(e => e.TksTkntstamp)
                .HasDefaultValue(0)
                .HasColumnName("TKS_TKNTStamp");
            entity.Property(e => e.TksZwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TKS_ZwrFirma");
            entity.Property(e => e.TksZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_ZwrLp");
            entity.Property(e => e.TksZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TKS_ZwrNumer");
            entity.Property(e => e.TksZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TKS_ZwrTyp");

            entity.HasOne(d => d.Tkelem).WithMany(p => p.Tkselems)
                .HasForeignKey(d => new { d.TksGidtyp, d.TksGidnumer, d.TksGidlp })
                .HasConstraintName("FK_TKSPrimary");
        });

        modelBuilder.Entity<Tlumaczenium>(entity =>
        {
            entity.HasKey(e => new { e.TlmNumer, e.TlmTyp, e.TlmPole, e.TlmJezyk, e.TlmLp }).HasName("TLM_Primary");

            entity.ToTable("Tlumaczenia", "CDN", tb => tb.HasTrigger("Tlumaczenia_InsertUpdateHandler"));

            entity.Property(e => e.TlmNumer).HasColumnName("TLM_Numer");
            entity.Property(e => e.TlmTyp).HasColumnName("TLM_Typ");
            entity.Property(e => e.TlmPole).HasColumnName("TLM_Pole");
            entity.Property(e => e.TlmJezyk).HasColumnName("TLM_Jezyk");
            entity.Property(e => e.TlmLp).HasColumnName("TLM_Lp");
            entity.Property(e => e.TlmTekst)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TLM_Tekst");
        });

        modelBuilder.Entity<TowarId>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TowarID");
        });

        modelBuilder.Entity<TrNopisy>(entity =>
        {
            entity.HasKey(e => new { e.TnOTrnNumer, e.TnOTrnLp }).HasName("TnO_Primary");

            entity.ToTable("TrNOpisy", "CDN");

            entity.Property(e => e.TnOTrnNumer).HasColumnName("TnO_TrnNumer");
            entity.Property(e => e.TnOTrnLp).HasColumnName("TnO_TrnLp");
            entity.Property(e => e.TnOOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TnO_Opis");
            entity.Property(e => e.TnOOpisCharset)
                .HasDefaultValue(0)
                .HasColumnName("TnO_OpisCharset");
            entity.Property(e => e.TnOTrnFirma)
                .HasDefaultValue(0)
                .HasColumnName("TnO_TrnFirma");
            entity.Property(e => e.TnOTrnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TnO_TrnTyp");
            entity.Property(e => e.TnOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TnO_Typ");

            entity.HasOne(d => d.TnOTrnNumerNavigation).WithMany(p => p.TrNopisies)
                .HasForeignKey(d => d.TnOTrnNumer)
                .HasConstraintName("FK_TnOPrimary");
        });

        modelBuilder.Entity<TraElem>(entity =>
        {
            entity.HasKey(e => new { e.TrEGidnumer, e.TrEGidlp }).HasName("TrE_Primary");

            entity.ToTable("TraElem", "CDN", tb =>
                {
                    tb.HasTrigger("TraElemAlias_DeleteHandler");
                    tb.HasTrigger("TraElem_DeleteHandler");
                    tb.HasTrigger("TraElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.TrEAkwTyp, e.TrEAkwNumer, e.TrETrnTstamp }, "TrEAkwizytor");

            entity.HasIndex(e => new { e.TrEKntNumer, e.TrETrnTstamp }, "TrEKontrah");

            entity.HasIndex(e => e.TrEPakietId, "TrEPakiet");

            entity.HasIndex(e => e.TrESentId, "TrESent");

            entity.HasIndex(e => new { e.TrETwrNumer, e.TrETrnTstamp }, "TrETowar");

            entity.HasIndex(e => new { e.TrETwrKod, e.TrEGidnumer, e.TrEGidlp }, "TrETwrKod").IsUnique();

            entity.HasIndex(e => new { e.TrEVatTyp, e.TrEVatNumer, e.TrEVatLp }, "TrEVat");

            entity.HasIndex(e => new { e.TrEZlcTyp, e.TrEZlcNumer, e.TrEZlcLp }, "TreZlecenie");

            entity.Property(e => e.TrEGidnumer).HasColumnName("TrE_GIDNumer");
            entity.Property(e => e.TrEGidlp).HasColumnName("TrE_GIDLp");
            entity.Property(e => e.TrEAkcyza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_Akcyza");
            entity.Property(e => e.TrEAkcyzaPrzedKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_AkcyzaPrzedKorekta");
            entity.Property(e => e.TrEAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_AkwFirma");
            entity.Property(e => e.TrEAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_AkwLp");
            entity.Property(e => e.TrEAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_AkwNumer");
            entity.Property(e => e.TrEAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_AkwTyp");
            entity.Property(e => e.TrEBon)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_Bon");
            entity.Property(e => e.TrECchNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_CChNumer");
            entity.Property(e => e.TrECchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_CChTyp");
            entity.Property(e => e.TrECecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_Cecha");
            entity.Property(e => e.TrECena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_Cena");
            entity.Property(e => e.TrECenaPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_CenaPoRabacie");
            entity.Property(e => e.TrECenaPrzedKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_CenaPrzedKorekta");
            entity.Property(e => e.TrECenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_CenaSpr");
            entity.Property(e => e.TrEFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_FlagaNB");
            entity.Property(e => e.TrEFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_FlagaVat");
            entity.Property(e => e.TrEFlagaVatPrzedKorekta)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_FlagaVatPrzedKorekta");
            entity.Property(e => e.TrEFormatkaCyr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_FormatkaCyr");
            entity.Property(e => e.TrEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_GIDFirma");
            entity.Property(e => e.TrEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_GIDTyp");
            entity.Property(e => e.TrEGratis)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_Gratis");
            entity.Property(e => e.TrEGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_GrupaPod");
            entity.Property(e => e.TrEGrupaPodPrzedKorekta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_GrupaPodPrzedKorekta");
            entity.Property(e => e.TrEGuid)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_GUID");
            entity.Property(e => e.TrEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrE_Ilosc");
            entity.Property(e => e.TrEIloscDpprzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrE_IloscDPPrzed");
            entity.Property(e => e.TrEIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrE_IloscMax");
            entity.Property(e => e.TrEIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrE_IloscMin");
            entity.Property(e => e.TrEIloscPrzedKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrE_IloscPrzedKorekta");
            entity.Property(e => e.TrEJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_JmFormat");
            entity.Property(e => e.TrEJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_JmFormatZ");
            entity.Property(e => e.TrEJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_JmZ");
            entity.Property(e => e.TrEKatDatyOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_KatDatyOP");
            entity.Property(e => e.TrEKgojednostkowe)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("TrE_KGOJednostkowe");
            entity.Property(e => e.TrEKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_KntFirma");
            entity.Property(e => e.TrEKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_KntLp");
            entity.Property(e => e.TrEKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_KntNumer");
            entity.Property(e => e.TrEKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_KntTyp");
            entity.Property(e => e.TrEKosztBazowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KosztBazowy");
            entity.Property(e => e.TrEKosztKsiegowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KosztKsiegowy");
            entity.Property(e => e.TrEKosztNetto)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_KosztNetto");
            entity.Property(e => e.TrEKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KosztRzeczywisty");
            entity.Property(e => e.TrEKosztVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_KosztVat");
            entity.Property(e => e.TrEKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_KrajPoch");
            entity.Property(e => e.TrEKsiegowaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KsiegowaBrutto");
            entity.Property(e => e.TrEKsiegowaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KsiegowaNetto");
            entity.Property(e => e.TrEKsiegowyDpprzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_KsiegowyDPPrzed");
            entity.Property(e => e.TrEKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("TrE_KursL");
            entity.Property(e => e.TrEKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TrE_KursM");
            entity.Property(e => e.TrELicencja)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_Licencja");
            entity.Property(e => e.TrENagroda)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_Nagroda");
            entity.Property(e => e.TrENrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_NrKursu");
            entity.Property(e => e.TrEOdKsiegowych)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_OdKsiegowych");
            entity.Property(e => e.TrEOperatorPos)
                .HasDefaultValue(0)
                .HasColumnName("TrE_OperatorPOS");
            entity.Property(e => e.TrEOplataSpozFlaga)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_OplataSpozFlaga");
            entity.Property(e => e.TrEPakietId)
                .HasDefaultValue(0)
                .HasColumnName("TrE_PakietId");
            entity.Property(e => e.TrEPakietTwgNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_PakietTwgNumer");
            entity.Property(e => e.TrEPakietTwgTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_PakietTwgTyp");
            entity.Property(e => e.TrEPakietWymaganaPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_PakietWymaganaPoz");
            entity.Property(e => e.TrEPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_PCN");
            entity.Property(e => e.TrEPoczatkowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_Poczatkowa");
            entity.Property(e => e.TrEPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_Pozycja");
            entity.Property(e => e.TrEPrecyzjaCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_PrecyzjaCeny");
            entity.Property(e => e.TrEPrecyzjaCenyPocz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_PrecyzjaCenyPocz");
            entity.Property(e => e.TrEProg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_Prog");
            entity.Property(e => e.TrEProgTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_ProgTyp");
            entity.Property(e => e.TrEPromocjaProgId)
                .HasDefaultValue(0)
                .HasColumnName("TrE_PromocjaProgID");
            entity.Property(e => e.TrEPromocje)
                .HasDefaultValue(0)
                .HasColumnName("TrE_Promocje");
            entity.Property(e => e.TrEPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TrE_PrzeliczL");
            entity.Property(e => e.TrEPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TrE_PrzeliczM");
            entity.Property(e => e.TrEPrzyczynaKorekty)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_PrzyczynaKorekty");
            entity.Property(e => e.TrEPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("TrE_Punkty");
            entity.Property(e => e.TrERabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_Rabat");
            entity.Property(e => e.TrERabatKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_RabatKorekta");
            entity.Property(e => e.TrERabatOpeGen)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_RabatOpeGen");
            entity.Property(e => e.TrERabatPromocyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_RabatPromocyjny");
            entity.Property(e => e.TrERecFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_RecFirma");
            entity.Property(e => e.TrERecLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_RecLp");
            entity.Property(e => e.TrERecNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_RecNumer");
            entity.Property(e => e.TrERecTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_RecTyp");
            entity.Property(e => e.TrERodzajCenyBazowej)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_RodzajCenyBazowej");
            entity.Property(e => e.TrERodzajKosztu)
                .HasDefaultValue(0)
                .HasColumnName("TrE_RodzajKosztu");
            entity.Property(e => e.TrERownanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_Rownanie");
            entity.Property(e => e.TrERzeczywistaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_RzeczywistaNetto");
            entity.Property(e => e.TrERzeczywistyDpprzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_RzeczywistyDPPrzed");
            entity.Property(e => e.TrESentElemId)
                .HasDefaultValue(0)
                .HasColumnName("TrE_SentElemId");
            entity.Property(e => e.TrESentId)
                .HasDefaultValue(0)
                .HasColumnName("TrE_SentId");
            entity.Property(e => e.TrEStawkaCukierStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TrE_StawkaCukierStala");
            entity.Property(e => e.TrEStawkaCukierZmienna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TrE_StawkaCukierZmienna");
            entity.Property(e => e.TrEStawkaKofeina)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TrE_StawkaKofeina");
            entity.Property(e => e.TrEStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_StawkaPod");
            entity.Property(e => e.TrEStawkaPodPrzedKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_StawkaPodPrzedKorekta");
            entity.Property(e => e.TrETrnTstamp)
                .HasDefaultValue(0)
                .HasColumnName("TrE_TrnTStamp");
            entity.Property(e => e.TrETwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_TwrFirma");
            entity.Property(e => e.TrETwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_TwrKod");
            entity.Property(e => e.TrETwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_TwrLp");
            entity.Property(e => e.TrETwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_TwrNazwa");
            entity.Property(e => e.TrETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_TwrNumer");
            entity.Property(e => e.TrETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_TwrTyp");
            entity.Property(e => e.TrETypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_TypJm");
            entity.Property(e => e.TrETypTwr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_TypTwr");
            entity.Property(e => e.TrEUpust)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_Upust");
            entity.Property(e => e.TrEUpustKnt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrE_UpustKnt");
            entity.Property(e => e.TrEUpustKntTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_UpustKntTyp");
            entity.Property(e => e.TrEUpustTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_UpustTyp");
            entity.Property(e => e.TrEVatFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_VatFirma");
            entity.Property(e => e.TrEVatLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_VatLp");
            entity.Property(e => e.TrEVatNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_VatNumer");
            entity.Property(e => e.TrEVatTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_VatTyp");
            entity.Property(e => e.TrEWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrE_Waluta");
            entity.Property(e => e.TrEWartoscBazowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscBazowa");
            entity.Property(e => e.TrEWartoscPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscPoRabacie");
            entity.Property(e => e.TrEWartoscPrzedKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrE_WartoscPrzedKorekta");
            entity.Property(e => e.TrEZlcFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_ZlcFirma");
            entity.Property(e => e.TrEZlcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_ZlcLp");
            entity.Property(e => e.TrEZlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_ZlcNumer");
            entity.Property(e => e.TrEZlcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_ZlcTyp");
            entity.Property(e => e.TrEZlom)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_Zlom");
            entity.Property(e => e.TrEZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_Zrodlowa");
            entity.Property(e => e.TrEZrodlowaPrzedKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrE_ZrodlowaPrzedKorekta");
            entity.Property(e => e.TrEZstFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrE_ZstFirma");
            entity.Property(e => e.TrEZstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_ZstLp");
            entity.Property(e => e.TrEZstNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrE_ZstNumer");
            entity.Property(e => e.TrEZstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrE_ZstTyp");
            entity.Property(e => e.TrEZwroconoCalaIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrE_ZwroconoCalaIlosc");

            entity.HasOne(d => d.TrEGidnumerNavigation).WithMany(p => p.TraElems)
                .HasForeignKey(d => d.TrEGidnumer)
                .HasConstraintName("FK_TrEPrimary");
        });

        modelBuilder.Entity<TraJpk>(entity =>
        {
            entity.HasKey(e => new { e.TrJTrNtyp, e.TrJTrNnumer, e.TrJTrNlp, e.TrJWartosc }).HasName("TrJ_Primary");

            entity.ToTable("TraJPK", "CDN", tb => tb.HasTrigger("TraJPK_InsertUpdateHandler"));

            entity.Property(e => e.TrJTrNtyp).HasColumnName("TrJ_TrNTyp");
            entity.Property(e => e.TrJTrNnumer).HasColumnName("TrJ_TrNNumer");
            entity.Property(e => e.TrJTrNlp).HasColumnName("TrJ_TrNLp");
            entity.Property(e => e.TrJWartosc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrJ_Wartosc");
            entity.Property(e => e.TrJTrNfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrJ_TrNFirma");
        });

        modelBuilder.Entity<TraKelem>(entity =>
        {
            entity.HasKey(e => new { e.TrkGidnumer, e.TrkGidlp }).HasName("TRK_Primary");

            entity.ToTable("TraKElem", "CDN");

            entity.HasIndex(e => new { e.TrkTwrTyp, e.TrkTwrNumer }, "TrKTowar");

            entity.Property(e => e.TrkGidnumer).HasColumnName("TRK_GIDNumer");
            entity.Property(e => e.TrkGidlp).HasColumnName("TRK_GIDLp");
            entity.Property(e => e.TrkGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TRK_GIDFirma");
            entity.Property(e => e.TrkGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TRK_GIDTyp");
            entity.Property(e => e.TrkPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("TRK_Pozycja");
            entity.Property(e => e.TrkTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TRK_TwrFirma");
            entity.Property(e => e.TrkTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TRK_TwrLp");
            entity.Property(e => e.TrkTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TRK_TwrNumer");
            entity.Property(e => e.TrkTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TRK_TwrTyp");
            entity.Property(e => e.TrkWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 4)")
                .HasColumnName("TRK_Wartosc");

            entity.HasOne(d => d.TrkGidnumerNavigation).WithMany(p => p.TraKelems)
                .HasForeignKey(d => d.TrkGidnumer)
                .HasConstraintName("FK_TrKPrimaryNoType");
        });

        modelBuilder.Entity<TraNag>(entity =>
        {
            entity.HasKey(e => e.TrNGidnumer).HasName("TrN_Primary");

            entity.ToTable("TraNag", "CDN", tb =>
                {
                    tb.HasTrigger("TraNagAlias_DeleteHandler");
                    tb.HasTrigger("TraNag_DeleteAtrybutyHist");
                    tb.HasTrigger("TraNag_DeleteHandler");
                    tb.HasTrigger("TraNag_InsertUpdateHandler");
                    tb.HasTrigger("TraNag_KontrolujVAT");
                    tb.HasTrigger("TraNag_LastMod_OFFL");
                    tb.HasTrigger("TraNag_SprawdzSesje");
                    tb.HasTrigger("TraNag_UsunZD");
                });

            entity.HasIndex(e => new { e.TrNAkwNumer, e.TrNData3, e.TrNGidtyp, e.TrNGidnumer }, "TrNAkwizytor").IsUnique();

            entity.HasIndex(e => new { e.TrNTrNtyp, e.TrNRokMiesiac, e.TrNTrNrok, e.TrNTrNmiesiac, e.TrNTrNseria, e.TrNTrNnumer, e.TrNTrNlp }, "TrNData");

            entity.HasIndex(e => new { e.TrNData2, e.TrNGidnumer }, "TrNData2");

            entity.HasIndex(e => new { e.TrNDataMag, e.TrNGidnumer }, "TrNDataMag");

            entity.HasIndex(e => e.TrNKnDnumer, "TrNDocelowy");

            entity.HasIndex(e => e.TrNFrsId, "TrNFrSID");

            entity.HasIndex(e => e.TrNGuid, "TrNGUID");

            entity.HasIndex(e => new { e.TrNIntrastat, e.TrNIstRok, e.TrNIstMiesiac }, "TrNIntrastat");

            entity.HasIndex(e => e.TrNKkdnumer, "TrNKKD");

            entity.HasIndex(e => e.TrNKkgnumer, "TrNKKG");

            entity.HasIndex(e => e.TrNKkpnumer, "TrNKKP");

            entity.HasIndex(e => new { e.TrNKntNumer, e.TrNData3, e.TrNGidtyp, e.TrNGidnumer }, "TrNKontrah");

            entity.HasIndex(e => new { e.TrNKntNumer, e.TrNData2, e.TrNGidnumer }, "TrNKontrah2");

            entity.HasIndex(e => e.TrNAdWnumer, "TrNKontrahAdW");

            entity.HasIndex(e => e.TrNKnAnumer, "TrNKontrahAdr");

            entity.HasIndex(e => e.TrNMagDnumer, "TrNMagDocelowy");

            entity.HasIndex(e => e.TrNMagZnumer, "TrNMagZrodlowy");

            entity.HasIndex(e => new { e.TrNTrNtyp, e.TrNTrNseria, e.TrNDataMag }, "TrNNumer");

            entity.HasIndex(e => e.TrNOddDokId, "TrNOddDokID");

            entity.HasIndex(e => new { e.TrNVatTyp, e.TrNVatRejestr, e.TrNVatRok, e.TrNVatMiesiac, e.TrNGidnumer, e.TrNGidtyp }, "TrNOptymalizacja1");

            entity.HasIndex(e => new { e.TrNTrNtyp, e.TrNTrNlp, e.TrNRokMiesiac, e.TrNGidtyp }, "TrNOptymalizacja2");

            entity.HasIndex(e => new { e.TrNKosztUstalono, e.TrNKonNumer, e.TrNGidtyp, e.TrNGidnumer, e.TrNZaksiegowano, e.TrNStan, e.TrNAktywny, e.TrNKonTyp }, "TrNOptymalizacja3");

            entity.HasIndex(e => new { e.TrNZewnetrznySys, e.TrNStan, e.TrNOddDokId, e.TrNLastMod }, "TrNOptymalizacjaMOS");

            entity.HasIndex(e => new { e.TrNKnSnumerP, e.TrNKnSlpP }, "TrNOsobaP");

            entity.HasIndex(e => e.TrNKnPnumer, "TrNPlatnik");

            entity.HasIndex(e => e.TrNPrjId, "TrNPrjId");

            entity.HasIndex(e => new { e.TrNRelNumer, e.TrNRelTyp }, "TrNRelacja");

            entity.HasIndex(e => new { e.TrNSaNtyp, e.TrNSaNnumer }, "TrNSAD");

            entity.HasIndex(e => new { e.TrNSpiNumer, e.TrNGidtyp, e.TrNGidnumer }, "TrNSpinacz").IsUnique();

            entity.HasIndex(e => new { e.TrNStan, e.TrNTrNmiesiac }, "TrNStan");

            entity.HasIndex(e => new { e.TrNTrNtyp, e.TrNTrNrok, e.TrNTrNmiesiac, e.TrNTrNseria, e.TrNTrNnumer, e.TrNTrNlp }, "TrNTransakcja").IsUnique();

            entity.HasIndex(e => new { e.TrNDeklRok, e.TrNDeklMiesiac, e.TrNVatTyp, e.TrNVatRejestr, e.TrNRozliczac }, "TrNVATDeklaracja");

            entity.HasIndex(e => new { e.TrNVatTyp, e.TrNVatRejestr, e.TrNVatRok, e.TrNVatMiesiac, e.TrNVatNumer }, "TrNVATNumeracja");

            entity.HasIndex(e => new { e.TrNVatZdpeDnumer, e.TrNVatZdpeDlp }, "TrNVatZDPeD").HasFilter("([TRN_VATZDPEDNUMER]<>(0))");

            entity.HasIndex(e => e.TrNKonNumer, "TrNZaliczki");

            entity.HasIndex(e => new { e.TrNZaNtyp, e.TrNZaNnumer }, "TrNZamowienie");

            entity.HasIndex(e => e.TrNZwrNumer, "TrNZwrot");

            entity.HasIndex(e => new { e.TrNVatTyp, e.TrNData2 }, "TrnVatTyp");

            entity.Property(e => e.TrNGidnumer).HasColumnName("TrN_GIDNumer");
            entity.Property(e => e.TrNAdPnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_AdPNumer");
            entity.Property(e => e.TrNAdWfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_AdWFirma");
            entity.Property(e => e.TrNAdWlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_AdWLp");
            entity.Property(e => e.TrNAdWnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_AdWNumer");
            entity.Property(e => e.TrNAdWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_AdWTyp");
            entity.Property(e => e.TrNAktualizujKaucje)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_AktualizujKaucje");
            entity.Property(e => e.TrNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("TrN_Aktywny");
            entity.Property(e => e.TrNAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_AkwFirma");
            entity.Property(e => e.TrNAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_AkwLp");
            entity.Property(e => e.TrNAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_AkwNumer");
            entity.Property(e => e.TrNAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_AkwTyp");
            entity.Property(e => e.TrNCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_CechaOpis");
            entity.Property(e => e.TrNCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_CenaSpr");
            entity.Property(e => e.TrNData2)
                .HasDefaultValue(0)
                .HasColumnName("TrN_Data2");
            entity.Property(e => e.TrNData3)
                .HasDefaultValue(0)
                .HasColumnName("TrN_Data3");
            entity.Property(e => e.TrNDataDoKor)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataDoKor");
            entity.Property(e => e.TrNDataDostawy)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataDostawy");
            entity.Property(e => e.TrNDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataKsiegowania");
            entity.Property(e => e.TrNDataMag)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataMag");
            entity.Property(e => e.TrNDataOdKor)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataOdKor");
            entity.Property(e => e.TrNDataOdb)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataOdb");
            entity.Property(e => e.TrNDataOdprawyPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataOdprawyPotwierdzenia");
            entity.Property(e => e.TrNDataPo)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataPO");
            entity.Property(e => e.TrNDataRoz)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataRoz");
            entity.Property(e => e.TrNDataSprOrg)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataSprOrg");
            entity.Property(e => e.TrNDataWplywu)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataWplywu");
            entity.Property(e => e.TrNDataWplywuFa)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataWplywuFA");
            entity.Property(e => e.TrNDataWystOrg)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataWystOrg");
            entity.Property(e => e.TrNDataWysylki)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DataWysylki");
            entity.Property(e => e.TrNDeklKwartalKviu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_DeklKwartalKVIU");
            entity.Property(e => e.TrNDeklMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_DeklMiesiac");
            entity.Property(e => e.TrNDeklRok)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_DeklRok");
            entity.Property(e => e.TrNDeklRokKviu)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_DeklRokKVIU");
            entity.Property(e => e.TrNDetal)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Detal");
            entity.Property(e => e.TrNDokTypJpk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_DokTypJPK");
            entity.Property(e => e.TrNDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_DokumentObcy");
            entity.Property(e => e.TrNDokumentObcyCharset)
                .HasDefaultValue(0)
                .HasColumnName("TrN_DokumentObcyCharset");
            entity.Property(e => e.TrNDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_Dziennik");
            entity.Property(e => e.TrNExpoNorm)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_ExpoNorm");
            entity.Property(e => e.TrNFiaskoId)
                .HasDefaultValue(0)
                .HasColumnName("TrN_FiaskoID");
            entity.Property(e => e.TrNFiskalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Fiskalny");
            entity.Property(e => e.TrNFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_FlagaNB");
            entity.Property(e => e.TrNFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_FormaNazwa");
            entity.Property(e => e.TrNFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_FormaNr");
            entity.Property(e => e.TrNFormaRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrN_FormaRabat");
            entity.Property(e => e.TrNFormatkaCyr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_FormatkaCyr");
            entity.Property(e => e.TrNFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_FrmNumer");
            entity.Property(e => e.TrNFrsId)
                .HasDefaultValue(0)
                .HasColumnName("TrN_FrsID");
            entity.Property(e => e.TrNGenDokMag)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_GenDokMag");
            entity.Property(e => e.TrNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_GIDFirma");
            entity.Property(e => e.TrNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_GIDLp");
            entity.Property(e => e.TrNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_GIDTyp");
            entity.Property(e => e.TrNGodzinaWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("TrN_GodzinaWystawienia");
            entity.Property(e => e.TrNGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("TrN_GUID");
            entity.Property(e => e.TrNIdOrg)
                .HasDefaultValue(0)
                .HasColumnName("TrN_IdOrg");
            entity.Property(e => e.TrNIncotermsMiejsce)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_IncotermsMiejsce");
            entity.Property(e => e.TrNIncotermsSymbol)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_IncotermsSymbol");
            entity.Property(e => e.TrNInfoDlaUc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_InfoDlaUC");
            entity.Property(e => e.TrNIntrastat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Intrastat");
            entity.Property(e => e.TrNIstMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_IstMiesiac");
            entity.Property(e => e.TrNIstRok)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_IstRok");
            entity.Property(e => e.TrNJestLimitCelowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_JestLimitCelowy");
            entity.Property(e => e.TrNJpkfa)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_JPKFA");
            entity.Property(e => e.TrNKadnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KADNumer");
            entity.Property(e => e.TrNKagnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KAGNumer");
            entity.Property(e => e.TrNKapnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KAPNumer");
            entity.Property(e => e.TrNKarFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KarFirma");
            entity.Property(e => e.TrNKarLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KarLp");
            entity.Property(e => e.TrNKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KarNumer");
            entity.Property(e => e.TrNKarTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KarTyp");
            entity.Property(e => e.TrNKatDatyOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KatDatyOP");
            entity.Property(e => e.TrNKkdnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KKDNumer");
            entity.Property(e => e.TrNKkgnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KKGNumer");
            entity.Property(e => e.TrNKkpnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KKPNumer");
            entity.Property(e => e.TrNKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnAFirma");
            entity.Property(e => e.TrNKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnALp");
            entity.Property(e => e.TrNKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnANumer");
            entity.Property(e => e.TrNKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnATyp");
            entity.Property(e => e.TrNKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnDFirma");
            entity.Property(e => e.TrNKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnDLp");
            entity.Property(e => e.TrNKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnDNumer");
            entity.Property(e => e.TrNKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnDTyp");
            entity.Property(e => e.TrNKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnPNumer");
            entity.Property(e => e.TrNKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnPTyp");
            entity.Property(e => e.TrNKnSfirmaD)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnSFirmaD");
            entity.Property(e => e.TrNKnSfirmaP)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnSFirmaP");
            entity.Property(e => e.TrNKnSlpD)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnSLpD");
            entity.Property(e => e.TrNKnSlpP)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnSLpP");
            entity.Property(e => e.TrNKnSnumerD)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnSNumerD");
            entity.Property(e => e.TrNKnSnumerP)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KnSNumerP");
            entity.Property(e => e.TrNKnStypD)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnSTypD");
            entity.Property(e => e.TrNKnStypP)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KnSTypP");
            entity.Property(e => e.TrNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KntFirma");
            entity.Property(e => e.TrNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KntLp");
            entity.Property(e => e.TrNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KntNumer");
            entity.Property(e => e.TrNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KntTyp");
            entity.Property(e => e.TrNKodRodzajuTransakcji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_KodRodzajuTransakcji");
            entity.Property(e => e.TrNKodRodzajuTransportu)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_KodRodzajuTransportu");
            entity.Property(e => e.TrNKonFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KonFirma");
            entity.Property(e => e.TrNKonLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KonLp");
            entity.Property(e => e.TrNKonNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_KonNumer");
            entity.Property(e => e.TrNKonTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_KonTyp");
            entity.Property(e => e.TrNKorektaDanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KorektaDanych");
            entity.Property(e => e.TrNKorektaOdlicz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KorektaOdlicz");
            entity.Property(e => e.TrNKorektaViu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KorektaVIU");
            entity.Property(e => e.TrNKosztUstalono)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KosztUstalono");
            entity.Property(e => e.TrNKrajPrzezWys)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_KrajPrzezWys");
            entity.Property(e => e.TrNKrajWydIdentPod)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_KrajWydIdentPod");
            entity.Property(e => e.TrNKrajWydIdentPodVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KrajWydIdentPodVAT");
            entity.Property(e => e.TrNKrajWydania)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_KrajWydania");
            entity.Property(e => e.TrNKseFnumerOrg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_KSeFNumerOrg");
            entity.Property(e => e.TrNKseFwyslij)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KSeFWyslij");
            entity.Property(e => e.TrNKseFzweryfikowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_KSeFZweryfikowany");
            entity.Property(e => e.TrNKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("TrN_KursL");
            entity.Property(e => e.TrNKursLpierw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("TrN_KursLPierw");
            entity.Property(e => e.TrNKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TrN_KursM");
            entity.Property(e => e.TrNKursMpierw)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TrN_KursMPierw");
            entity.Property(e => e.TrNLastMod)
                .HasDefaultValue(0)
                .HasColumnName("TrN_LastMod");
            entity.Property(e => e.TrNLicznikKopii)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_LicznikKopii");
            entity.Property(e => e.TrNMagDfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_MagDFirma");
            entity.Property(e => e.TrNMagDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_MagDLp");
            entity.Property(e => e.TrNMagDnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_MagDNumer");
            entity.Property(e => e.TrNMagDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_MagDTyp");
            entity.Property(e => e.TrNMagZfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_MagZFirma");
            entity.Property(e => e.TrNMagZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_MagZLp");
            entity.Property(e => e.TrNMagZnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_MagZNumer");
            entity.Property(e => e.TrNMagZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_MagZTyp");
            entity.Property(e => e.TrNMetodaKasowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_MetodaKasowa");
            entity.Property(e => e.TrNMiejscePrzeznaczenia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_MiejscePrzeznaczenia");
            entity.Property(e => e.TrNMiejsceZaladunku)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_MiejsceZaladunku");
            entity.Property(e => e.TrNMpp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_MPP");
            entity.Property(e => e.TrNNettoP)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_NettoP");
            entity.Property(e => e.TrNNettoR)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_NettoR");
            entity.Property(e => e.TrNNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_NieKsiegowac");
            entity.Property(e => e.TrNNrDrukarki)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_NrDrukarki");
            entity.Property(e => e.TrNNrKorekty)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_NrKorekty");
            entity.Property(e => e.TrNNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_NrKursu");
            entity.Property(e => e.TrNNrKursuPierw)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_NrKursuPierw");
            entity.Property(e => e.TrNNumerFiskalny)
                .HasDefaultValue(0)
                .HasColumnName("TrN_NumerFiskalny");
            entity.Property(e => e.TrNNumerRaportu)
                .HasDefaultValue(0)
                .HasColumnName("TrN_NumerRaportu");
            entity.Property(e => e.TrNNumerSad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_NumerSAD");
            entity.Property(e => e.TrNOcr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_OCR");
            entity.Property(e => e.TrNOddDokId)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OddDokId");
            entity.Property(e => e.TrNOddZakazPafa)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OddZakazPAFA");
            entity.Property(e => e.TrNOdliczeniaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_OdliczeniaVat");
            entity.Property(e => e.TrNOdoFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OdoFirma");
            entity.Property(e => e.TrNOdoLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OdoLp");
            entity.Property(e => e.TrNOdoNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OdoNumer");
            entity.Property(e => e.TrNOdoTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OdoTyp");
            entity.Property(e => e.TrNOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeFirmaM");
            entity.Property(e => e.TrNOpeFirmaR)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeFirmaR");
            entity.Property(e => e.TrNOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeFirmaW");
            entity.Property(e => e.TrNOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeFirmaZ");
            entity.Property(e => e.TrNOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeLpM");
            entity.Property(e => e.TrNOpeLpR)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeLpR");
            entity.Property(e => e.TrNOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeLpW");
            entity.Property(e => e.TrNOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeLpZ");
            entity.Property(e => e.TrNOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeNumerM");
            entity.Property(e => e.TrNOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeNumerR");
            entity.Property(e => e.TrNOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeNumerW");
            entity.Property(e => e.TrNOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeNumerZ");
            entity.Property(e => e.TrNOpeNumerZfr)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeNumerZFR");
            entity.Property(e => e.TrNOpeNumerZm)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpeNumerZM");
            entity.Property(e => e.TrNOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeTypM");
            entity.Property(e => e.TrNOpeTypR)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeTypR");
            entity.Property(e => e.TrNOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeTypW");
            entity.Property(e => e.TrNOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeTypZ");
            entity.Property(e => e.TrNOpeTypZfr)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeTypZFR");
            entity.Property(e => e.TrNOpeTypZm)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpeTypZM");
            entity.Property(e => e.TrNOperatorPos)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OperatorPOS");
            entity.Property(e => e.TrNOpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpiFirma");
            entity.Property(e => e.TrNOpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpiLp");
            entity.Property(e => e.TrNOpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_OpiNumer");
            entity.Property(e => e.TrNOpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_OpiTyp");
            entity.Property(e => e.TrNOplataSpozFlaga)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_OplataSpozFlaga");
            entity.Property(e => e.TrNPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Platnosci");
            entity.Property(e => e.TrNPodstawaZw)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_PodstawaZW");
            entity.Property(e => e.TrNPodzialPlatNiePytaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_PodzialPlatNiePytaj");
            entity.Property(e => e.TrNPotwierdzenieOdbioru)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_PotwierdzenieOdbioru");
            entity.Property(e => e.TrNPrjId)
                .HasDefaultValue(0)
                .HasColumnName("TrN_PrjId");
            entity.Property(e => e.TrNProceduraOss)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_ProceduraOSS");
            entity.Property(e => e.TrNProceduraUproszcz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_ProceduraUproszcz");
            entity.Property(e => e.TrNPromocje)
                .HasDefaultValue(0)
                .HasColumnName("TrN_Promocje");
            entity.Property(e => e.TrNPromocjePar)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_PromocjePar");
            entity.Property(e => e.TrNPrzyczynaKorekty)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_PrzyczynaKorekty");
            entity.Property(e => e.TrNPrzyczynaZw)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_PrzyczynaZW");
            entity.Property(e => e.TrNPrzywracajRezerwacje)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_PrzywracajRezerwacje");
            entity.Property(e => e.TrNPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("TrN_Punkty");
            entity.Property(e => e.TrNRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrN_Rabat");
            entity.Property(e => e.TrNRabatPromocyjnyGlobalny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrN_RabatPromocyjnyGlobalny");
            entity.Property(e => e.TrNRabatW)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_RabatW");
            entity.Property(e => e.TrNRelFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_RelFirma");
            entity.Property(e => e.TrNRelLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_RelLp");
            entity.Property(e => e.TrNRelNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_RelNumer");
            entity.Property(e => e.TrNRelTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_RelTyp");
            entity.Property(e => e.TrNRodzajKor)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_RodzajKor");
            entity.Property(e => e.TrNRodzajTransportu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_RodzajTransportu");
            entity.Property(e => e.TrNRodzajZakupu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_RodzajZakupu");
            entity.Property(e => e.TrNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("TrN_RokMiesiac");
            entity.Property(e => e.TrNRolnikRyczalt)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_RolnikRyczalt");
            entity.Property(e => e.TrNRozliczac)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Rozliczac");
            entity.Property(e => e.TrNRozliczacP)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_RozliczacP");
            entity.Property(e => e.TrNRozliczacViu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_RozliczacVIU");
            entity.Property(e => e.TrNSaNfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_SaNFirma");
            entity.Property(e => e.TrNSaNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_SaNLp");
            entity.Property(e => e.TrNSaNnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_SaNNumer");
            entity.Property(e => e.TrNSaNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_SaNTyp");
            entity.Property(e => e.TrNSchFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_SchFirma");
            entity.Property(e => e.TrNSchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_SchLp");
            entity.Property(e => e.TrNSchNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_SchNumer");
            entity.Property(e => e.TrNSchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_SchTyp");
            entity.Property(e => e.TrNSpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_SpiFirma");
            entity.Property(e => e.TrNSpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_SpiLp");
            entity.Property(e => e.TrNSpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_SpiNumer");
            entity.Property(e => e.TrNSpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_SpiTyp");
            entity.Property(e => e.TrNSposobDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_SposobDostawy");
            entity.Property(e => e.TrNSposobRozbiciaKosztow)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_SposobRozbiciaKosztow");
            entity.Property(e => e.TrNStRidW)
                .HasDefaultValue(0)
                .HasColumnName("TrN_StRIdW");
            entity.Property(e => e.TrNStan)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_Stan");
            entity.Property(e => e.TrNStanDokMag)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_StanDokMag");
            entity.Property(e => e.TrNStruktura)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Struktura");
            entity.Property(e => e.TrNTermin)
                .HasDefaultValue(0)
                .HasColumnName("TrN_Termin");
            entity.Property(e => e.TrNTerminRozliczeniaKaucji)
                .HasDefaultValue(0)
                .HasColumnName("TrN_TerminRozliczeniaKaucji");
            entity.Property(e => e.TrNTkfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_TKFirma");
            entity.Property(e => e.TrNTklp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_TKLp");
            entity.Property(e => e.TrNTknumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_TKNumer");
            entity.Property(e => e.TrNTktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_TKTyp");
            entity.Property(e => e.TrNTrNlp)
                .HasDefaultValue((short)127)
                .HasColumnName("TrN_TrNLp");
            entity.Property(e => e.TrNTrNmiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_TrNMiesiac");
            entity.Property(e => e.TrNTrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_TrNNumer");
            entity.Property(e => e.TrNTrNrok)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_TrNRok");
            entity.Property(e => e.TrNTrNseria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_TrNSeria");
            entity.Property(e => e.TrNTrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_TrNTyp");
            entity.Property(e => e.TrNTstampZfr)
                .HasDefaultValue(0)
                .HasColumnName("TrN_TStampZFR");
            entity.Property(e => e.TrNTstampZm)
                .HasDefaultValue(0)
                .HasColumnName("TrN_TStampZM");
            entity.Property(e => e.TrNTypDatyKor)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_TypDatyKor");
            entity.Property(e => e.TrNTypEdycjiVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_TypEdycjiVat");
            entity.Property(e => e.TrNTypSumyPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_TypSumyPlatnosci");
            entity.Property(e => e.TrNUmNid)
                .HasDefaultValue(0)
                .HasColumnName("TrN_UmNId");
            entity.Property(e => e.TrNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_Url");
            entity.Property(e => e.TrNVatDzien)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_VatDzien");
            entity.Property(e => e.TrNVatKorekta)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_VatKorekta");
            entity.Property(e => e.TrNVatMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_VatMiesiac");
            entity.Property(e => e.TrNVatNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_VatNumer");
            entity.Property(e => e.TrNVatP)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_VatP");
            entity.Property(e => e.TrNVatR)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_VatR");
            entity.Property(e => e.TrNVatRejestr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_VatRejestr");
            entity.Property(e => e.TrNVatRok)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_VatRok");
            entity.Property(e => e.TrNVatTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_VatTyp");
            entity.Property(e => e.TrNVatZdpeDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_VatZDPeDLp");
            entity.Property(e => e.TrNVatZdpeDnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_VatZDPeDNumer");
            entity.Property(e => e.TrNVatnalOd)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_VATNalOd");
            entity.Property(e => e.TrNWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("TrN_Waga");
            entity.Property(e => e.TrNWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("TrN_WagaBrutto");
            entity.Property(e => e.TrNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_Waluta");
            entity.Property(e => e.TrNWartoscDppo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_WartoscDPPo");
            entity.Property(e => e.TrNWartoscDpprzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_WartoscDPPrzed");
            entity.Property(e => e.TrNWartoscWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrN_WartoscWal");
            entity.Property(e => e.TrNWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_WJm");
            entity.Property(e => e.TrNWms)
                .HasDefaultValue(0)
                .HasColumnName("TrN_WMS");
            entity.Property(e => e.TrNWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_WsDziennik");
            entity.Property(e => e.TrNWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_WsSCHNumer");
            entity.Property(e => e.TrNWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_WsSCHTyp");
            entity.Property(e => e.TrNWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_WsStosujDziennik");
            entity.Property(e => e.TrNWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_WsStosujSchemat");
            entity.Property(e => e.TrNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Wsk");
            entity.Property(e => e.TrNWtrId)
                .HasDefaultValue(0)
                .HasColumnName("TrN_WtrID");
            entity.Property(e => e.TrNWtrProgId)
                .HasDefaultValue(0)
                .HasColumnName("TrN_WtrProgID");
            entity.Property(e => e.TrNWyslano)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Wyslano");
            entity.Property(e => e.TrNZaNfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_ZaNFirma");
            entity.Property(e => e.TrNZaNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_ZaNLp");
            entity.Property(e => e.TrNZaNnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_ZaNNumer");
            entity.Property(e => e.TrNZaNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_ZaNTyp");
            entity.Property(e => e.TrNZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_Zaksiegowano");
            entity.Property(e => e.TrNZamDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrN_ZamDokumentObcy");
            entity.Property(e => e.TrNZaokraglenie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TrN_Zaokraglenie");
            entity.Property(e => e.TrNZatwFormalnoRach)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_ZatwFormalnoRach");
            entity.Property(e => e.TrNZatwMerytorycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_ZatwMerytorycznie");
            entity.Property(e => e.TrNZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("TrN_ZewnetrznySys");
            entity.Property(e => e.TrNZmodyfikowanoZasob)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_ZmodyfikowanoZasob");
            entity.Property(e => e.TrNZrodlo)
                .HasDefaultValue(0)
                .HasColumnName("TrN_Zrodlo");
            entity.Property(e => e.TrNZwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrN_ZwrFirma");
            entity.Property(e => e.TrNZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_ZwrLp");
            entity.Property(e => e.TrNZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrN_ZwrNumer");
            entity.Property(e => e.TrNZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrN_ZwrTyp");
            entity.Property(e => e.TrNZwroconoCalaIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrN_ZwroconoCalaIlosc");
        });

        modelBuilder.Entity<TraPlat>(entity =>
        {
            entity.HasKey(e => new { e.TrPGidtyp, e.TrPGidnumer, e.TrPGidlp }).HasName("TrP_Primary");

            entity.ToTable("TraPlat", "CDN", tb =>
                {
                    tb.HasTrigger("TraPlatAlias_DeleteHandler");
                    tb.HasTrigger("TraPlat_AktualizujProlZrdGID");
                    tb.HasTrigger("TraPlat_AktualizujWydatkiPrcPlatnosci");
                    tb.HasTrigger("TraPlat_DataRoz");
                    tb.HasTrigger("TraPlat_DataRozliczenia");
                    tb.HasTrigger("TraPlat_DeleteHandler");
                    tb.HasTrigger("TraPlat_InsertUpdateHandler");
                    tb.HasTrigger("TraPlat_LastMod");
                });

            entity.HasIndex(e => new { e.TrPDataRozliczenia, e.TrPWaluta, e.TrPTyp, e.TrPKntTyp, e.TrPKntNumer }, "TRPDataRozliczenia");

            entity.HasIndex(e => new { e.TrPAkwTyp, e.TrPAkwNumer }, "TrPAkwizytor");

            entity.HasIndex(e => e.TrPBbonId, "TrPBbon");

            entity.HasIndex(e => new { e.TrPKntTyp, e.TrPKntNumer }, "TrPKontrah");

            entity.HasIndex(e => new { e.TrPTyp, e.TrPKarnumer, e.TrPStatus, e.TrPTermin }, "TrPStatus");

            entity.HasIndex(e => new { e.TrPTyp, e.TrPRozliczona, e.TrPWaluta, e.TrPTermin, e.TrPPozostaje }, "TrPTermin");

            entity.HasIndex(e => new { e.TrPExpId, e.TrPExpLin }, "TrpIdentOperacji");

            entity.HasIndex(e => new { e.TrPKntTyp, e.TrPKntNumer, e.TrPRozliczona }, "TrpLimityOpt");

            entity.HasIndex(e => new { e.TrPProlZrdTyp, e.TrPProlZrdNumer, e.TrPProlZrdLp }, "TrpProlZrodl");

            entity.HasIndex(e => new { e.TrPSpiTyp, e.TrPSpiNumer, e.TrPGidtyp, e.TrPGidnumer, e.TrPGidlp }, "TrpSpinacz").IsUnique();

            entity.Property(e => e.TrPGidtyp).HasColumnName("TrP_GIDTyp");
            entity.Property(e => e.TrPGidnumer).HasColumnName("TrP_GIDNumer");
            entity.Property(e => e.TrPGidlp).HasColumnName("TrP_GIDLp");
            entity.Property(e => e.TrPAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_AkwFirma");
            entity.Property(e => e.TrPAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_AkwLp");
            entity.Property(e => e.TrPAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_AkwNumer");
            entity.Property(e => e.TrPAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_AkwTyp");
            entity.Property(e => e.TrPBbonId)
                .HasDefaultValue(0)
                .HasColumnName("TrP_BbonId");
            entity.Property(e => e.TrPCdcexpTimestamp)
                .HasDefaultValue(0)
                .HasColumnName("TrP_CDCExpTimestamp");
            entity.Property(e => e.TrPCdcmsgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_CDCMsgId");
            entity.Property(e => e.TrPCdcorgInstrId)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_CDCOrgInstrId");
            entity.Property(e => e.TrPCdcstatusKod)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_CDCStatusKod");
            entity.Property(e => e.TrPCdcstatusOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_CDCStatusOpis");
            entity.Property(e => e.TrPCdcstatusTimestamp)
                .HasDefaultValue(0)
                .HasColumnName("TrP_CDCStatusTimestamp");
            entity.Property(e => e.TrPCdctaskId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_CDCTaskId");
            entity.Property(e => e.TrPCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TrP_CzasModyfikacji");
            entity.Property(e => e.TrPCzySprawaSporna)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_CzySprawaSporna");
            entity.Property(e => e.TrPDataRozliczenia)
                .HasDefaultValue(999999)
                .HasColumnName("TrP_DataRozliczenia");
            entity.Property(e => e.TrPDataWysylki)
                .HasDefaultValue(0)
                .HasColumnName("TrP_DataWysylki");
            entity.Property(e => e.TrPEndToEndId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_EndToEndId");
            entity.Property(e => e.TrPExpId)
                .HasDefaultValue(0)
                .HasColumnName("TrP_ExpId");
            entity.Property(e => e.TrPExpLin)
                .HasDefaultValue(0)
                .HasColumnName("TrP_ExpLin");
            entity.Property(e => e.TrPFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_FormaNazwa");
            entity.Property(e => e.TrPFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_FormaNr");
            entity.Property(e => e.TrPGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_GIDFirma");
            entity.Property(e => e.TrPJestLimitCelowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_JestLimitCelowy");
            entity.Property(e => e.TrPKarfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_KARFirma");
            entity.Property(e => e.TrPKarlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_KARLp");
            entity.Property(e => e.TrPKarnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_KARNumer");
            entity.Property(e => e.TrPKartyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_KARTyp");
            entity.Property(e => e.TrPKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_KnANumer");
            entity.Property(e => e.TrPKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_KntFirma");
            entity.Property(e => e.TrPKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_KntLp");
            entity.Property(e => e.TrPKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_KntNumer");
            entity.Property(e => e.TrPKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_KntTyp");
            entity.Property(e => e.TrPKorektaDanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_KorektaDanych");
            entity.Property(e => e.TrPKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("TrP_KursL");
            entity.Property(e => e.TrPKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TrP_KursM");
            entity.Property(e => e.TrPKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrP_Kwota");
            entity.Property(e => e.TrPKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrP_KwotaSys");
            entity.Property(e => e.TrPLastMod)
                .HasDefaultValue(0)
                .HasColumnName("TrP_LastMod");
            entity.Property(e => e.TrPMaksymalnyTermin)
                .HasDefaultValue(0)
                .HasColumnName("TrP_MaksymalnyTermin");
            entity.Property(e => e.TrPNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_Notatki");
            entity.Property(e => e.TrPNrKonta)
                .HasDefaultValue((short)1)
                .HasColumnName("TrP_NrKonta");
            entity.Property(e => e.TrPNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_NrKursu");
            entity.Property(e => e.TrPOpeCdcfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_OpeCDCFirma");
            entity.Property(e => e.TrPOpeCdclp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_OpeCDCLp");
            entity.Property(e => e.TrPOpeCdcnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_OpeCDCNumer");
            entity.Property(e => e.TrPOpeCdctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_OpeCDCTyp");
            entity.Property(e => e.TrPOpeWfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_OpeWFirma");
            entity.Property(e => e.TrPOpeWlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_OpeWLp");
            entity.Property(e => e.TrPOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_OpeWNumer");
            entity.Property(e => e.TrPOpeWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_OpeWTyp");
            entity.Property(e => e.TrPPozostaje)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrP_Pozostaje");
            entity.Property(e => e.TrPPozostajeSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrP_PozostajeSys");
            entity.Property(e => e.TrPPrleLp)
                .HasDefaultValue(0)
                .HasColumnName("TrP_PrleLP");
            entity.Property(e => e.TrPProlZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_ProlZrdFirma");
            entity.Property(e => e.TrPProlZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_ProlZrdLp");
            entity.Property(e => e.TrPProlZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_ProlZrdNumer");
            entity.Property(e => e.TrPProlZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_ProlZrdTyp");
            entity.Property(e => e.TrPRachBank)
                .HasDefaultValue(0)
                .HasColumnName("TrP_RachBank");
            entity.Property(e => e.TrPRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_Rodzaj");
            entity.Property(e => e.TrPRozliczona)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_Rozliczona");
            entity.Property(e => e.TrPSepa)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_SEPA");
            entity.Property(e => e.TrPSpdokument)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_SPDokument");
            entity.Property(e => e.TrPSpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_SpiFirma");
            entity.Property(e => e.TrPSpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_SpiLp");
            entity.Property(e => e.TrPSpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_SpiNumer");
            entity.Property(e => e.TrPSpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_SpiTyp");
            entity.Property(e => e.TrPSpkwotaVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrP_SPKwotaVAT");
            entity.Property(e => e.TrPSplitPayment)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrP_SplitPayment");
            entity.Property(e => e.TrPSpnip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_SPNip");
            entity.Property(e => e.TrPSpodziewanyTermin)
                .HasDefaultValue(0)
                .HasColumnName("TrP_SpodziewanyTermin");
            entity.Property(e => e.TrPSprawaSpornaId)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_SprawaSpornaId");
            entity.Property(e => e.TrPStatus)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_Status");
            entity.Property(e => e.TrPTermin)
                .HasDefaultValue(0)
                .HasColumnName("TrP_Termin");
            entity.Property(e => e.TrPTerminPoProlongacie)
                .HasDefaultValue(0)
                .HasColumnName("TrP_TerminPoProlongacie");
            entity.Property(e => e.TrPTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_Typ");
            entity.Property(e => e.TrPWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrP_Waluta");
            entity.Property(e => e.TrPZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("TrP_ZewnetrznyId");
            entity.Property(e => e.TrPZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrP_ZrdFirma");
            entity.Property(e => e.TrPZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_ZrdLp");
            entity.Property(e => e.TrPZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrP_ZrdNumer");
            entity.Property(e => e.TrPZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrP_ZrdTyp");
        });

        modelBuilder.Entity<TraRozliczZal>(entity =>
        {
            entity.HasKey(e => new { e.TrzZalTyp, e.TrzZalNumer, e.TrzKonTyp, e.TrzKonNumer, e.TrzStawkaPod, e.TrzFlagaVat, e.TrzZrodlowa, e.TrzDeklRok, e.TrzDeklMiesiac, e.TrzOdliczeniaVat, e.TrzRodzajZakupu, e.TrzRozliczac, e.TrzStruktura, e.TrzRozliczacP }).HasName("TRZ_Primary");

            entity.ToTable("TraRozliczZal", "CDN");

            entity.HasIndex(e => new { e.TrzKonNumer, e.TrzKonTyp }, "TRZRozliczajacy");

            entity.Property(e => e.TrzZalTyp).HasColumnName("TRZ_ZalTyp");
            entity.Property(e => e.TrzZalNumer).HasColumnName("TRZ_ZalNumer");
            entity.Property(e => e.TrzKonTyp).HasColumnName("TRZ_KonTyp");
            entity.Property(e => e.TrzKonNumer).HasColumnName("TRZ_KonNumer");
            entity.Property(e => e.TrzStawkaPod)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TRZ_StawkaPod");
            entity.Property(e => e.TrzFlagaVat).HasColumnName("TRZ_FlagaVat");
            entity.Property(e => e.TrzZrodlowa)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TRZ_Zrodlowa");
            entity.Property(e => e.TrzDeklRok).HasColumnName("TRZ_DeklRok");
            entity.Property(e => e.TrzDeklMiesiac).HasColumnName("TRZ_DeklMiesiac");
            entity.Property(e => e.TrzOdliczeniaVat).HasColumnName("TRZ_OdliczeniaVat");
            entity.Property(e => e.TrzRodzajZakupu).HasColumnName("TRZ_RodzajZakupu");
            entity.Property(e => e.TrzRozliczac).HasColumnName("TRZ_Rozliczac");
            entity.Property(e => e.TrzStruktura).HasColumnName("TRZ_Struktura");
            entity.Property(e => e.TrzRozliczacP).HasColumnName("TRZ_RozliczacP");
            entity.Property(e => e.TrzKwotaRozliczona)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRZ_KwotaRozliczona");

            entity.HasOne(d => d.TrzKonNumerNavigation).WithMany(p => p.TraRozliczZals)
                .HasForeignKey(d => d.TrzKonNumer)
                .HasConstraintName("FK_TRZRozliczajacy");
        });

        modelBuilder.Entity<TraSelem>(entity =>
        {
            entity.HasKey(e => new { e.TrSGidnumer, e.TrSGidlp, e.TrSSubGidlp }).HasName("TrS_Primary");

            entity.ToTable("TraSElem", "CDN", tb =>
                {
                    tb.HasTrigger("TraSElemAlias_DeleteHandler");
                    tb.HasTrigger("TraSElemAlias_InsertUpdateHandler");
                    tb.HasTrigger("TraSElem_DeleteHandler");
                    tb.HasTrigger("TraSElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.TrSCchTyp, e.TrSCchNumer, e.TrSCchLp, e.TrSTrnTstamp }, "TrSCecha");

            entity.HasIndex(e => new { e.TrSDstNumer, e.TrSTrnTstamp, e.TrSGidtyp, e.TrSGidnumer, e.TrSGidlp, e.TrSSubGidlp }, "TrSDostawa").IsUnique();

            entity.HasIndex(e => new { e.TrSDstNumer, e.TrSGidnumer, e.TrSGidlp, e.TrSSubGidlp }, "TrSDostawaGID");

            entity.HasIndex(e => e.TrSGuid, "TrSGUID");

            entity.HasIndex(e => new { e.TrSGidtyp, e.TrSGidnumer, e.TrSGidlp, e.TrSSubGidlp }, "TrSGid").IsUnique();

            entity.HasIndex(e => new { e.TrSDsFtyp, e.TrSDsFnumer }, "TrSKeyDostawaF");

            entity.HasIndex(e => e.TrSDsFnumer, "TrSKeyDostawaFNoType");

            entity.HasIndex(e => e.TrSMagNumer, "TrSMagazyn");

            entity.HasIndex(e => new { e.TrSOrgNumer, e.TrSOrgLp, e.TrSSubOrgLp, e.TrSTrnTstamp, e.TrSGidtyp, e.TrSGidnumer, e.TrSGidlp, e.TrSSubGidlp }, "TrSOryginal").IsUnique();

            entity.HasIndex(e => new { e.TrSRezNumer, e.TrSRezTyp }, "TrSRezerwacje");

            entity.HasIndex(e => new { e.TrSSpiNumer, e.TrSSpiLp, e.TrSSubSpiLp }, "TrSSpi");

            entity.HasIndex(e => new { e.TrSZlcNumer, e.TrSZlcTyp, e.TrSZlcLp }, "TrSZlecenie");

            entity.HasIndex(e => new { e.TrSZwrNumer, e.TrSZwrLp, e.TrSSubZwrLp, e.TrSTrnTstamp, e.TrSGidtyp, e.TrSGidnumer, e.TrSGidlp, e.TrSSubGidlp }, "TrSZwrot").IsUnique();

            entity.Property(e => e.TrSGidnumer).HasColumnName("TrS_GIDNumer");
            entity.Property(e => e.TrSGidlp).HasColumnName("TrS_GIDLp");
            entity.Property(e => e.TrSSubGidlp).HasColumnName("TrS_SubGIDLp");
            entity.Property(e => e.TrSCchFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_CChFirma");
            entity.Property(e => e.TrSCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_CChLp");
            entity.Property(e => e.TrSCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_CChNumer");
            entity.Property(e => e.TrSCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_CChTyp");
            entity.Property(e => e.TrSCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrS_Cecha");
            entity.Property(e => e.TrSDsFfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_DsFFirma");
            entity.Property(e => e.TrSDsFlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_DsFLp");
            entity.Property(e => e.TrSDsFnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_DsFNumer");
            entity.Property(e => e.TrSDsFtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_DsFTyp");
            entity.Property(e => e.TrSDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_DstFirma");
            entity.Property(e => e.TrSDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_DstLp");
            entity.Property(e => e.TrSDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_DstNumer");
            entity.Property(e => e.TrSDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_DstTyp");
            entity.Property(e => e.TrSGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_GIDFirma");
            entity.Property(e => e.TrSGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_GIDTyp");
            entity.Property(e => e.TrSGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("TrS_GUID");
            entity.Property(e => e.TrSIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrS_Ilosc");
            entity.Property(e => e.TrSIloscDpprzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TrS_IloscDPPrzed");
            entity.Property(e => e.TrSIloscRezPrzywr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TrS_IloscRezPrzywr");
            entity.Property(e => e.TrSKosztKrajowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztKrajowy");
            entity.Property(e => e.TrSKosztKsiegowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztKsiegowy");
            entity.Property(e => e.TrSKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztRzeczywisty");
            entity.Property(e => e.TrSKosztZagraniczny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KosztZagraniczny");
            entity.Property(e => e.TrSKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrS_KrajPoch");
            entity.Property(e => e.TrSKsiegowyDpprzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_KsiegowyDPPrzed");
            entity.Property(e => e.TrSMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_MagFirma");
            entity.Property(e => e.TrSMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_MagLp");
            entity.Property(e => e.TrSMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_MagNumer");
            entity.Property(e => e.TrSMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_MagTyp");
            entity.Property(e => e.TrSOrgFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_OrgFirma");
            entity.Property(e => e.TrSOrgLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_OrgLp");
            entity.Property(e => e.TrSOrgNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_OrgNumer");
            entity.Property(e => e.TrSOrgTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_OrgTyp");
            entity.Property(e => e.TrSRezFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_RezFirma");
            entity.Property(e => e.TrSRezLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_RezLp");
            entity.Property(e => e.TrSRezNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_RezNumer");
            entity.Property(e => e.TrSRezTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_RezTyp");
            entity.Property(e => e.TrSRezerwacjaZasobu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrS_RezerwacjaZasobu");
            entity.Property(e => e.TrSRzeczywistyDpprzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_RzeczywistyDPPrzed");
            entity.Property(e => e.TrSSpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_SpiFirma");
            entity.Property(e => e.TrSSpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_SpiLp");
            entity.Property(e => e.TrSSpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_SpiNumer");
            entity.Property(e => e.TrSSpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_SpiTyp");
            entity.Property(e => e.TrSSubOrgLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_SubOrgLp");
            entity.Property(e => e.TrSSubSpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_SubSpiLp");
            entity.Property(e => e.TrSSubZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_SubZwrLp");
            entity.Property(e => e.TrSTrnTstamp)
                .HasDefaultValue(0)
                .HasColumnName("TrS_TrnTStamp");
            entity.Property(e => e.TrSWalutaDostawy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrS_WalutaDostawy");
            entity.Property(e => e.TrSWalutaKosztuKrajowego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrS_WalutaKosztuKrajowego");
            entity.Property(e => e.TrSWalutaKosztuZagranicznego)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrS_WalutaKosztuZagranicznego");
            entity.Property(e => e.TrSWartoscDostawy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrS_WartoscDostawy");
            entity.Property(e => e.TrSZlcFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_ZlcFirma");
            entity.Property(e => e.TrSZlcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_ZlcLp");
            entity.Property(e => e.TrSZlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_ZlcNumer");
            entity.Property(e => e.TrSZlcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_ZlcTyp");
            entity.Property(e => e.TrSZwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrS_ZwrFirma");
            entity.Property(e => e.TrSZwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_ZwrLp");
            entity.Property(e => e.TrSZwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrS_ZwrNumer");
            entity.Property(e => e.TrSZwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrS_ZwrTyp");

            entity.HasOne(d => d.TraElem).WithMany(p => p.TraSelems)
                .HasForeignKey(d => new { d.TrSGidnumer, d.TrSGidlp })
                .HasConstraintName("FK_TrSPrimary");
        });

        modelBuilder.Entity<TraSvat>(entity =>
        {
            entity.HasKey(e => new { e.TsvGidtyp, e.TsvGidnumer, e.TsvGidlp, e.TsvSubGidlp }).HasName("TSV_Primary");

            entity.ToTable("TraSVat", "CDN", tb =>
                {
                    tb.HasTrigger("TraSVat_InsUpdDel");
                    tb.HasTrigger("TraSVat_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.TsvDataOp, "TSVDataOP");

            entity.HasIndex(e => e.TsvDataPo, "TSVDataPO");

            entity.HasIndex(e => new { e.TsvDeklRok, e.TsvDeklMiesiac }, "TSVOkres");

            entity.HasIndex(e => new { e.TsvGidtyp, e.TsvGidnumer, e.TsvRodzajZakupu }, "TSVOptymalizacja1");

            entity.HasIndex(e => e.TsvR2id, "TSVR2ID");

            entity.Property(e => e.TsvGidtyp).HasColumnName("TSV_GIDTyp");
            entity.Property(e => e.TsvGidnumer).HasColumnName("TSV_GIDNumer");
            entity.Property(e => e.TsvGidlp).HasColumnName("TSV_GIDLp");
            entity.Property(e => e.TsvSubGidlp).HasColumnName("TSV_SubGIDlp");
            entity.Property(e => e.TsvDataOp)
                .HasDefaultValue(0)
                .HasColumnName("TSV_DataOP");
            entity.Property(e => e.TsvDataPo)
                .HasDefaultValue(0)
                .HasColumnName("TSV_DataPO");
            entity.Property(e => e.TsvDeklMiesiac).HasColumnName("TSV_DeklMiesiac");
            entity.Property(e => e.TsvDeklRok).HasColumnName("TSV_DeklRok");
            entity.Property(e => e.TsvGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TSV_GIDFirma");
            entity.Property(e => e.TsvKatDatyOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TSV_KatDatyOP");
            entity.Property(e => e.TsvMetodaKasowa)
                .HasDefaultValue((byte)0)
                .HasColumnName("TSV_MetodaKasowa");
            entity.Property(e => e.TsvNettoP)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TSV_NettoP");
            entity.Property(e => e.TsvNettoR)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TSV_NettoR");
            entity.Property(e => e.TsvOdliczeniaVat).HasColumnName("TSV_OdliczeniaVat");
            entity.Property(e => e.TsvOpis)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TSV_Opis");
            entity.Property(e => e.TsvR2id)
                .HasDefaultValue(0)
                .HasColumnName("TSV_R2ID");
            entity.Property(e => e.TsvRodzajZakupu).HasColumnName("TSV_RodzajZakupu");
            entity.Property(e => e.TsvRozliczac).HasColumnName("TSV_Rozliczac");
            entity.Property(e => e.TsvRozliczacP)
                .HasDefaultValue((byte)0)
                .HasColumnName("TSV_RozliczacP");
            entity.Property(e => e.TsvRozliczacViu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TSV_RozliczacVIU");
            entity.Property(e => e.TsvVatP)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TSV_VatP");
            entity.Property(e => e.TsvVatR)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TSV_VatR");

            entity.HasOne(d => d.TraVat).WithMany(p => p.TraSvats)
                .HasForeignKey(d => new { d.TsvGidtyp, d.TsvGidnumer, d.TsvGidlp })
                .HasConstraintName("FK_TSVPrimary");
        });

        modelBuilder.Entity<TraVat>(entity =>
        {
            entity.HasKey(e => new { e.TrVGidtyp, e.TrVGidnumer, e.TrVGidlp }).HasName("TrV_Primary");

            entity.ToTable("TraVat", "CDN", tb =>
                {
                    tb.HasTrigger("TraVat_DeleteHandler");
                    tb.HasTrigger("TraVat_Delete_UMLStanUpdate");
                    tb.HasTrigger("TraVat_InsertUpdateHandler");
                    tb.HasTrigger("TraVat_Insert_TraSVat");
                    tb.HasTrigger("TraVat_Update_TraSVat");
                });

            entity.HasIndex(e => e.TrVDataOp, "TRVDataOP");

            entity.HasIndex(e => e.TrVDataPo, "TRVDataPO");

            entity.HasIndex(e => e.TrVOgraniczenieOdl, "TRVOgraniczenieOdl");

            entity.HasIndex(e => e.TrVUlrid, "TRVULR");

            entity.HasIndex(e => new { e.TrVDeklRok, e.TrVDeklMiesiac }, "TrVOkres");

            entity.HasIndex(e => new { e.TrVGidtyp, e.TrVGidnumer, e.TrVRodzajZakupu }, "TrVOptymalizacja1");

            entity.HasIndex(e => e.TrVSrtNumer, "TrVSrt");

            entity.Property(e => e.TrVGidtyp).HasColumnName("TrV_GIDTyp");
            entity.Property(e => e.TrVGidnumer).HasColumnName("TrV_GIDNumer");
            entity.Property(e => e.TrVGidlp).HasColumnName("TrV_GIDLp");
            entity.Property(e => e.TrVDataOp)
                .HasDefaultValue(0)
                .HasColumnName("TrV_DataOP");
            entity.Property(e => e.TrVDataPo)
                .HasDefaultValue(0)
                .HasColumnName("TrV_DataPO");
            entity.Property(e => e.TrVDeklMiesiac).HasColumnName("TrV_DeklMiesiac");
            entity.Property(e => e.TrVDeklRok).HasColumnName("TrV_DeklRok");
            entity.Property(e => e.TrVExpoNorm).HasColumnName("TrV_ExpoNorm");
            entity.Property(e => e.TrVFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_FlagaVat");
            entity.Property(e => e.TrVGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TrV_GIDFirma");
            entity.Property(e => e.TrVKatDatyOp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_KatDatyOP");
            entity.Property(e => e.TrVKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("TrV_KnANumer");
            entity.Property(e => e.TrVKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrV_KntNumer");
            entity.Property(e => e.TrVKorektaDanych)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_KorektaDanych");
            entity.Property(e => e.TrVNettoP)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_NettoP");
            entity.Property(e => e.TrVNettoR)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_NettoR");
            entity.Property(e => e.TrVOdliczeniaVat).HasColumnName("TrV_OdliczeniaVat");
            entity.Property(e => e.TrVOgraniczenieOdl)
                .HasDefaultValue(0)
                .HasColumnName("TrV_OgraniczenieOdl");
            entity.Property(e => e.TrVOpis)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TrV_Opis");
            entity.Property(e => e.TrVRknid)
                .HasDefaultValue(0)
                .HasColumnName("TrV_RKNID");
            entity.Property(e => e.TrVRkstrona)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_RKStrona");
            entity.Property(e => e.TrVRodzajZakupu).HasColumnName("TrV_RodzajZakupu");
            entity.Property(e => e.TrVRozliczac).HasColumnName("TrV_Rozliczac");
            entity.Property(e => e.TrVRozliczacP)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_RozliczacP");
            entity.Property(e => e.TrVRozliczacViu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_RozliczacVIU");
            entity.Property(e => e.TrVShelp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrV_SHELp");
            entity.Property(e => e.TrVShenumer)
                .HasDefaultValue(0)
                .HasColumnName("TrV_SHENumer");
            entity.Property(e => e.TrVSrtFirma)
                .HasDefaultValue(0)
                .HasColumnName("TrV_SrtFirma");
            entity.Property(e => e.TrVSrtLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrV_SrtLp");
            entity.Property(e => e.TrVSrtNumer)
                .HasDefaultValue(0)
                .HasColumnName("TrV_SrtNumer");
            entity.Property(e => e.TrVSrtTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TrV_SrtTyp");
            entity.Property(e => e.TrVStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrV_StawkaPod");
            entity.Property(e => e.TrVStruktura)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_Struktura");
            entity.Property(e => e.TrVUlrid)
                .HasDefaultValue(0)
                .HasColumnName("TrV_ULRID");
            entity.Property(e => e.TrVVatP)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_VatP");
            entity.Property(e => e.TrVVatR)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_VatR");
            entity.Property(e => e.TrVVatnalOd)
                .HasDefaultValue((byte)0)
                .HasColumnName("TrV_VATNalOd");
            entity.Property(e => e.TrVWartoscWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TrV_WartoscWal");
            entity.Property(e => e.TrVZaliczkowy).HasColumnName("TrV_Zaliczkowy");
            entity.Property(e => e.TrVZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TrV_Zrodlowa");
        });

        modelBuilder.Entity<TrasyElem>(entity =>
        {
            entity.HasKey(e => e.TsEId).HasName("TsE_Primary");

            entity.ToTable("TrasyElem", "CDN", tb =>
                {
                    tb.HasTrigger("TrasyElem_DeletePrzenumeruj");
                    tb.HasTrigger("TrasyElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.TsEKntAtyp, e.TsEKntAnumer, e.TsETsNid }, "TsEKntAdresy").IsUnique();

            entity.HasIndex(e => new { e.TsETsNid, e.TsELp }, "TsETrasa");

            entity.Property(e => e.TsEId).HasColumnName("TsE_Id");
            entity.Property(e => e.TsECzasDojazdu)
                .HasDefaultValue(0)
                .HasColumnName("TsE_CzasDojazdu");
            entity.Property(e => e.TsEKntAnumer)
                .HasDefaultValue(0)
                .HasColumnName("TsE_KntANumer");
            entity.Property(e => e.TsEKntAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TsE_KntATyp");
            entity.Property(e => e.TsELp)
                .HasDefaultValue((short)0)
                .HasColumnName("TsE_Lp");
            entity.Property(e => e.TsEOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TsE_Opis");
            entity.Property(e => e.TsETsNid)
                .HasDefaultValue(0)
                .HasColumnName("TsE_TsNId");

            entity.HasOne(d => d.TsETsN).WithMany(p => p.TrasyElems)
                .HasForeignKey(d => d.TsETsNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TsETrasa");
        });

        modelBuilder.Entity<TrasyNag>(entity =>
        {
            entity.HasKey(e => e.TsNId).HasName("TsN_Primary");

            entity.ToTable("TrasyNag", "CDN", tb =>
                {
                    tb.HasTrigger("TrasyNag_DeleteHandler");
                    tb.HasTrigger("TrasyNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.TsNAkronim, "TsNAkronim").IsUnique();

            entity.HasIndex(e => new { e.TsNKierNumer, e.TsNKierLp }, "TsNKierowcaNoType");

            entity.HasIndex(e => new { e.TsNLokalizacja, e.TsNAkronim }, "TsNLokalizacja");

            entity.HasIndex(e => e.TsNSamId, "TsNSamochod");

            entity.HasIndex(e => new { e.TsNKntNumer, e.TsNKntTyp }, "TsNSpedytorNoType");

            entity.Property(e => e.TsNId).HasColumnName("TsN_Id");
            entity.Property(e => e.TsNAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TsN_Akronim");
            entity.Property(e => e.TsNDlugosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TsN_Dlugosc");
            entity.Property(e => e.TsNKierLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TsN_KierLp");
            entity.Property(e => e.TsNKierNumer)
                .HasDefaultValue(0)
                .HasColumnName("TsN_KierNumer");
            entity.Property(e => e.TsNKierTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TsN_KierTyp");
            entity.Property(e => e.TsNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TsN_KntNumer");
            entity.Property(e => e.TsNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TsN_KntTyp");
            entity.Property(e => e.TsNLokalizacja)
                .HasDefaultValue(0)
                .HasColumnName("TsN_Lokalizacja");
            entity.Property(e => e.TsNNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TsN_Nazwa");
            entity.Property(e => e.TsNOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TsN_Opis");
            entity.Property(e => e.TsNSamId)
                .HasDefaultValue(0)
                .HasColumnName("TsN_SamId");
        });

        modelBuilder.Entity<TreOpisy>(entity =>
        {
            entity.HasKey(e => new { e.TeOTreNumer, e.TeOTreLp }).HasName("TeO_Primary");

            entity.ToTable("TreOpisy", "CDN");

            entity.Property(e => e.TeOTreNumer).HasColumnName("TeO_TreNumer");
            entity.Property(e => e.TeOTreLp).HasColumnName("TeO_TreLp");
            entity.Property(e => e.TeOOpis)
                .HasMaxLength(3999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TeO_Opis");
            entity.Property(e => e.TeOOpisCharset)
                .HasDefaultValue(0)
                .HasColumnName("TeO_OpisCharset");
            entity.Property(e => e.TeOTreFirma)
                .HasDefaultValue(0)
                .HasColumnName("TeO_TreFirma");
            entity.Property(e => e.TeOTreTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TeO_TreTyp");
            entity.Property(e => e.TeOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TeO_Typ");

            entity.HasOne(d => d.TraElem).WithOne(p => p.TreOpisy)
                .HasForeignKey<TreOpisy>(d => new { d.TeOTreNumer, d.TeOTreLp })
                .HasConstraintName("FK_TeOPrimary");
        });

        modelBuilder.Entity<TreTrsCount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TreTrsCount", "CDN");

            entity.HasIndex(e => new { e.TreGidtyp, e.TreGidnumer, e.TreGidlp }, "Index_TreTrsCountPrimary").IsUnique();

            entity.Property(e => e.TreGidlp).HasColumnName("tre_gidlp");
            entity.Property(e => e.TreGidnumer).HasColumnName("tre_gidnumer");
            entity.Property(e => e.TreGidtyp).HasColumnName("tre_gidtyp");
            entity.Property(e => e.TrsCount).HasColumnName("trs_count");
        });

        modelBuilder.Entity<TrnTreBrutto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrnTreBrutto", "CDN");

            entity.Property(e => e.TrnBruttoelem)
                .HasColumnType("numeric(25, 10)")
                .HasColumnName("trn_bruttoelem");
            entity.Property(e => e.TrnBruttonag)
                .HasColumnType("numeric(25, 10)")
                .HasColumnName("trn_bruttonag");
            entity.Property(e => e.TrnGidnumer).HasColumnName("trn_gidnumer");
            entity.Property(e => e.TrnGidtyp).HasColumnName("trn_gidtyp");
            entity.Property(e => e.TrnProporcja)
                .HasColumnType("numeric(25, 10)")
                .HasColumnName("trn_proporcja");
        });

        modelBuilder.Entity<TrpDokView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TrpDokView", "CDN");

            entity.Property(e => e.TrdvAktywny).HasColumnName("TRDV_Aktywny");
            entity.Property(e => e.TrdvData).HasColumnName("TRDV_Data");
            entity.Property(e => e.TrdvGidfirma).HasColumnName("TRDV_GIDFirma");
            entity.Property(e => e.TrdvGidlp).HasColumnName("TRDV_GIDLp");
            entity.Property(e => e.TrdvGidnumer).HasColumnName("TRDV_GIDNumer");
            entity.Property(e => e.TrdvGidtyp).HasColumnName("TRDV_GIDTyp");
            entity.Property(e => e.TrdvKntFirma).HasColumnName("TRDV_KntFirma");
            entity.Property(e => e.TrdvKntLp).HasColumnName("TRDV_KntLp");
            entity.Property(e => e.TrdvKntNumer).HasColumnName("TRDV_KntNumer");
            entity.Property(e => e.TrdvKntTyp).HasColumnName("TRDV_KntTyp");
            entity.Property(e => e.TrdvKursL)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("TRDV_KursL");
            entity.Property(e => e.TrdvKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TRDV_KursM");
            entity.Property(e => e.TrdvKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRDV_Kwota");
            entity.Property(e => e.TrdvKwotaSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRDV_KwotaSys");
            entity.Property(e => e.TrdvPozostaje)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRDV_Pozostaje");
            entity.Property(e => e.TrdvPozostajeSys)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TRDV_PozostajeSys");
            entity.Property(e => e.TrdvRozliczona).HasColumnName("TRDV_Rozliczona");
            entity.Property(e => e.TrdvSpiTyp).HasColumnName("TRDV_SpiTyp");
            entity.Property(e => e.TrdvStan).HasColumnName("TRDV_Stan");
            entity.Property(e => e.TrdvTermin).HasColumnName("TRDV_Termin");
            entity.Property(e => e.TrdvTrnLp).HasColumnName("TRDV_TrnLp");
            entity.Property(e => e.TrdvTrnNumer).HasColumnName("TRDV_TrnNumer");
            entity.Property(e => e.TrdvTrnRok).HasColumnName("TRDV_TrnRok");
            entity.Property(e => e.TrdvTrnSeria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TRDV_TrnSeria");
            entity.Property(e => e.TrdvTrnTyp).HasColumnName("TRDV_TrnTyp");
            entity.Property(e => e.TrdvTyp).HasColumnName("TRDV_Typ");
            entity.Property(e => e.TrdvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TRDV_Waluta");
            entity.Property(e => e.TrdvZaksiegowano).HasColumnName("TRDV_Zaksiegowano");
        });

        modelBuilder.Entity<TrpTrnKazView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TrpTrnKazView", "CDN");

            entity.Property(e => e.TtvBosDc).HasColumnName("TTV_BOS_DC");
            entity.Property(e => e.TtvBoskwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TTV_BOSKwota");
            entity.Property(e => e.TtvData).HasColumnName("TTV_Data");
            entity.Property(e => e.TtvDataRozliczenia).HasColumnName("TTV_DataRozliczenia");
            entity.Property(e => e.TtvDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TTV_Dokument");
            entity.Property(e => e.TtvDokumentObcy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TTV_DokumentObcy");
            entity.Property(e => e.TtvGidlp).HasColumnName("TTV_GIDLp");
            entity.Property(e => e.TtvGidnumer).HasColumnName("TTV_GIDNumer");
            entity.Property(e => e.TtvGidtyp).HasColumnName("TTV_GIDTyp");
            entity.Property(e => e.TtvKazTyp).HasColumnName("TTV_KAZ_Typ");
            entity.Property(e => e.TtvKntNumer).HasColumnName("TTV_KntNumer");
            entity.Property(e => e.TtvKntTyp).HasColumnName("TTV_KntTyp");
            entity.Property(e => e.TtvKursL)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("TTV_KursL");
            entity.Property(e => e.TtvKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TTV_KursM");
            entity.Property(e => e.TtvKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TTV_Kwota");
            entity.Property(e => e.TtvNieKsiegowac).HasColumnName("TTV_NieKsiegowac");
            entity.Property(e => e.TtvNrKursu).HasColumnName("TTV_NrKursu");
            entity.Property(e => e.TtvPozostaje)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TTV_Pozostaje");
            entity.Property(e => e.TtvRodzaj).HasColumnName("TTV_Rodzaj");
            entity.Property(e => e.TtvRozliczona).HasColumnName("TTV_Rozliczona");
            entity.Property(e => e.TtvSeria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TTV_Seria");
            entity.Property(e => e.TtvTermin).HasColumnName("TTV_Termin");
            entity.Property(e => e.TtvTrpFormaNr).HasColumnName("TTV_TRP_FormaNr");
            entity.Property(e => e.TtvTyp).HasColumnName("TTV_Typ");
            entity.Property(e => e.TtvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TTV_Waluta");
            entity.Property(e => e.TtvZaksiegowano).HasColumnName("TTV_Zaksiegowano");
        });

        modelBuilder.Entity<TrpTrnView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TrpTrnView", "CDN");

            entity.Property(e => e.TtvAktywny).HasColumnName("TTV_Aktywny");
            entity.Property(e => e.TtvBosDc).HasColumnName("TTV_BOS_DC");
            entity.Property(e => e.TtvBoskwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TTV_BOSKwota");
            entity.Property(e => e.TtvData).HasColumnName("TTV_Data");
            entity.Property(e => e.TtvDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TTV_Dokument");
            entity.Property(e => e.TtvDokumentObcy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TTV_DokumentObcy");
            entity.Property(e => e.TtvFormaNr).HasColumnName("TTV_FormaNr");
            entity.Property(e => e.TtvGidlp).HasColumnName("TTV_GIDLp");
            entity.Property(e => e.TtvGidnumer).HasColumnName("TTV_GIDNumer");
            entity.Property(e => e.TtvGidtyp).HasColumnName("TTV_GIDTyp");
            entity.Property(e => e.TtvKntNumer).HasColumnName("TTV_KntNumer");
            entity.Property(e => e.TtvKntTyp).HasColumnName("TTV_KntTyp");
            entity.Property(e => e.TtvKwota)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TTV_Kwota");
            entity.Property(e => e.TtvLp).HasColumnName("TTV_Lp");
            entity.Property(e => e.TtvNieKsiegowac).HasColumnName("TTV_NieKsiegowac");
            entity.Property(e => e.TtvNrKursu).HasColumnName("TTV_NrKursu");
            entity.Property(e => e.TtvPozostaje)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TTV_Pozostaje");
            entity.Property(e => e.TtvRozliczona).HasColumnName("TTV_Rozliczona");
            entity.Property(e => e.TtvSeria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TTV_Seria");
            entity.Property(e => e.TtvStan).HasColumnName("TTV_Stan");
            entity.Property(e => e.TtvStatus).HasColumnName("TTV_Status");
            entity.Property(e => e.TtvTermin).HasColumnName("TTV_Termin");
            entity.Property(e => e.TtvTrpstatus).HasColumnName("TTV_TRPStatus");
            entity.Property(e => e.TtvTyp).HasColumnName("TTV_Typ");
            entity.Property(e => e.TtvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TTV_Waluta");
            entity.Property(e => e.TtvZaksiegowano).HasColumnName("TTV_Zaksiegowano");
        });

        modelBuilder.Entity<TwgView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TwgView", "CDN");

            entity.Property(e => e.TgvGidNumer).HasColumnName("TGV_GidNumer");
            entity.Property(e => e.TgvGidTyp).HasColumnName("TGV_GidTyp");
            entity.Property(e => e.TgvKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TGV_Kod");
            entity.Property(e => e.TgvNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TGV_Nazwa");
        });

        modelBuilder.Entity<TwrAnaliza>(entity =>
        {
            entity.HasKey(e => new { e.TwAOkresId, e.TwAMagNumer, e.TwATwrNumer }).HasName("TwA_Primary");

            entity.ToTable("TwrAnaliza", "CDN");

            entity.Property(e => e.TwAOkresId).HasColumnName("TwA_OkresId");
            entity.Property(e => e.TwAMagNumer).HasColumnName("TwA_MagNumer");
            entity.Property(e => e.TwATwrNumer).HasColumnName("TwA_TwrNumer");
            entity.Property(e => e.TwAKategoria)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwA_Kategoria");

            entity.HasOne(d => d.TwAOkres).WithMany(p => p.TwrAnalizas)
                .HasForeignKey(d => d.TwAOkresId)
                .HasConstraintName("FK_TWAPrimary");
        });

        modelBuilder.Entity<TwrAnalizaElem>(entity =>
        {
            entity.HasKey(e => new { e.TaeTanid, e.TaeMagNumer, e.TaeTwrNumer }).HasName("TAE_Primary");

            entity.ToTable("TwrAnalizaElem", "CDN", tb => tb.HasTrigger("TwrAnalizaElem_InsertUpdateHandler"));

            entity.HasIndex(e => e.TaeMagNumer, "TAEMag");

            entity.HasIndex(e => e.TaeTwrNumer, "TAETwr");

            entity.Property(e => e.TaeTanid).HasColumnName("TAE_TANId");
            entity.Property(e => e.TaeMagNumer).HasColumnName("TAE_MagNumer");
            entity.Property(e => e.TaeTwrNumer).HasColumnName("TAE_TwrNumer");
            entity.Property(e => e.TaeKatPo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TAE_KatPo");
            entity.Property(e => e.TaeKatPrzed)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TAE_KatPrzed");
            entity.Property(e => e.TaeLp)
                .HasDefaultValue(0)
                .HasColumnName("TAE_Lp");

            entity.HasOne(d => d.TaeTan).WithMany(p => p.TwrAnalizaElems)
                .HasForeignKey(d => d.TaeTanid)
                .HasConstraintName("FK_TAEPrimary");

            entity.HasOne(d => d.TaeTwrNumerNavigation).WithMany(p => p.TwrAnalizaElems)
                .HasForeignKey(d => d.TaeTwrNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TAETwr");
        });

        modelBuilder.Entity<TwrAnalizaMag>(entity =>
        {
            entity.HasKey(e => new { e.TamTanid, e.TamMagNumer }).HasName("TAM_Primary");

            entity.ToTable("TwrAnalizaMag", "CDN");

            entity.Property(e => e.TamTanid).HasColumnName("TAM_TANId");
            entity.Property(e => e.TamMagNumer).HasColumnName("TAM_MagNumer");

            entity.HasOne(d => d.TamTan).WithMany(p => p.TwrAnalizaMags)
                .HasForeignKey(d => d.TamTanid)
                .HasConstraintName("FK_TAMPrimary");
        });

        modelBuilder.Entity<TwrAnalizaNag>(entity =>
        {
            entity.HasKey(e => e.TanId).HasName("TAN_Primary");

            entity.ToTable("TwrAnalizaNag", "CDN", tb => tb.HasTrigger("TwrAnalizaNag_InsertUpdateHandler"));

            entity.HasIndex(e => e.TanOkresId, "TANOkres");

            entity.Property(e => e.TanId).HasColumnName("TAN_Id");
            entity.Property(e => e.TanDataMod)
                .HasDefaultValue(0)
                .HasColumnName("TAN_DataMod");
            entity.Property(e => e.TanDataUtw)
                .HasDefaultValue(0)
                .HasColumnName("TAN_DataUtw");
            entity.Property(e => e.TanDataZat)
                .HasDefaultValue(0)
                .HasColumnName("TAN_DataZat");
            entity.Property(e => e.TanOkresId)
                .HasDefaultValue(0)
                .HasColumnName("TAN_OkresId");
            entity.Property(e => e.TanOpeMod)
                .HasDefaultValue(0)
                .HasColumnName("TAN_OpeMod");
            entity.Property(e => e.TanOpeUtw)
                .HasDefaultValue(0)
                .HasColumnName("TAN_OpeUtw");
            entity.Property(e => e.TanOpeZat)
                .HasDefaultValue(0)
                .HasColumnName("TAN_OpeZat");
            entity.Property(e => e.TanOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TAN_Opis");
            entity.Property(e => e.TanRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAN_Rodzaj");
            entity.Property(e => e.TanStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAN_Stan");
        });

        modelBuilder.Entity<TwrAnalizaOkre>(entity =>
        {
            entity.HasKey(e => e.TaoId).HasName("TAO_Primary");

            entity.ToTable("TwrAnalizaOkres", "CDN", tb => tb.HasTrigger("TwrAnalizaOkres_DeleteHandler"));

            entity.HasIndex(e => new { e.TaoDataAnalizy, e.TaoOkresWartosc, e.TaoOkresTyp, e.TaoOkresRok, e.TaoAbcdataOd, e.TaoAbcdataDo, e.TaoXyzdataOd, e.TaoXyzdataDo }, "TAOOkres").IsUnique();

            entity.Property(e => e.TaoId).HasColumnName("TAO_Id");
            entity.Property(e => e.TaoAbcdataDo)
                .HasDefaultValue(0)
                .HasColumnName("TAO_ABCDataDo");
            entity.Property(e => e.TaoAbcdataOd)
                .HasDefaultValue(0)
                .HasColumnName("TAO_ABCDataOd");
            entity.Property(e => e.TaoDataAnalizy)
                .HasDefaultValue(0)
                .HasColumnName("TAO_DataAnalizy");
            entity.Property(e => e.TaoOkresRok)
                .HasDefaultValue((short)0)
                .HasColumnName("TAO_OkresRok");
            entity.Property(e => e.TaoOkresTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAO_OkresTyp");
            entity.Property(e => e.TaoOkresWartosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAO_OkresWartosc");
            entity.Property(e => e.TaoWykorzystana)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAO_Wykorzystana");
            entity.Property(e => e.TaoXyzdataDo)
                .HasDefaultValue(0)
                .HasColumnName("TAO_XYZDataDo");
            entity.Property(e => e.TaoXyzdataOd)
                .HasDefaultValue(0)
                .HasColumnName("TAO_XYZDataOd");
        });

        modelBuilder.Entity<TwrAplikacje>(entity =>
        {
            entity.HasKey(e => new { e.TapObiNumer, e.TapObiTyp }).HasName("TAP_Primary");

            entity.ToTable("TwrAplikacje", "CDN", tb => tb.HasTrigger("TwrAplikacje_InsertUpdateHandler"));

            entity.HasIndex(e => e.TapGrupaiMall, "TAPGrupaiMall");

            entity.HasIndex(e => e.TapWszystkoPlKategoria, "TApWszystkoPlKategoria");

            entity.Property(e => e.TapObiNumer).HasColumnName("TAP_ObiNumer");
            entity.Property(e => e.TapObiTyp).HasColumnName("TAP_ObiTyp");
            entity.Property(e => e.TapCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TAP_CzasModyfikacji");
            entity.Property(e => e.TapDostepnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAP_Dostepnosc");
            entity.Property(e => e.TapFlagi)
                .HasDefaultValue(0)
                .HasColumnName("TAP_Flagi");
            entity.Property(e => e.TapGrupaeSklep)
                .HasDefaultValue(0)
                .HasColumnName("TAP_GrupaeSklep");
            entity.Property(e => e.TapGrupaiMall)
                .HasDefaultValue(0)
                .HasColumnName("TAP_GrupaiMall");
            entity.Property(e => e.TapIMall)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAP_iMall");
            entity.Property(e => e.TapIloscMinZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TAP_IloscMinZam");
            entity.Property(e => e.TapIndywKosztDst)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAP_IndywKosztDst");
            entity.Property(e => e.TapKontrolaStanow)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAP_KontrolaStanow");
            entity.Property(e => e.TapKosztDstWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TAP_KosztDstWartosc");
            entity.Property(e => e.TapPodlegaRabatowaniu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAP_PodlegaRabatowaniu");
            entity.Property(e => e.TapStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAP_Status");
            entity.Property(e => e.TapTwrNadrzedny)
                .HasDefaultValue(0)
                .HasColumnName("TAP_TwrNadrzedny");
            entity.Property(e => e.TapWszystkoPlCennik)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlCennik");
            entity.Property(e => e.TapWszystkoPlCzasR)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlCzasR");
            entity.Property(e => e.TapWszystkoPlId)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlID");
            entity.Property(e => e.TapWszystkoPlIlosc)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlIlosc");
            entity.Property(e => e.TapWszystkoPlIloscSpr)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlIloscSpr");
            entity.Property(e => e.TapWszystkoPlJm)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlJM");
            entity.Property(e => e.TapWszystkoPlKategoria)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlKategoria");
            entity.Property(e => e.TapWszystkoPlLink)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TAP_WszystkoPlLink");
            entity.Property(e => e.TapWszystkoPlNr)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlNr");
            entity.Property(e => e.TapWszystkoPlOpisy)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("TAP_WszystkoPlOpisy");
            entity.Property(e => e.TapWszystkoPlStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TAP_WszystkoPlStatus");
            entity.Property(e => e.TapWszystkoPlWarGw)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlWarGw");
            entity.Property(e => e.TapWszystkoPlWarRekl)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlWarRekl");
            entity.Property(e => e.TapWszystkoPlWarZwr)
                .HasDefaultValue(0)
                .HasColumnName("TAP_WszystkoPlWarZwr");
            entity.Property(e => e.TapZapowiedzDataOd)
                .HasDefaultValue(0)
                .HasColumnName("TAP_ZapowiedzDataOd");
            entity.Property(e => e.TapZapytajOcene)
                .HasDefaultValue((byte)0)
                .HasColumnName("TAP_ZapytajOCene");
        });

        modelBuilder.Entity<TwrAplikacjeOpisy>(entity =>
        {
            entity.HasKey(e => new { e.TpoObiNumer, e.TpoObiTyp, e.TpoJezykId }).HasName("TPO_Primary");

            entity.ToTable("TwrAplikacjeOpisy", "CDN", tb => tb.HasTrigger("TwrAplikacjeOpisy_InsertUpdateHandler"));

            entity.HasIndex(e => e.TpoJezykId, "TPOJezyk");

            entity.HasIndex(e => new { e.TpoObiTyp, e.TpoObiNumer }, "TPOObi");

            entity.Property(e => e.TpoObiNumer).HasColumnName("TPO_ObiNumer");
            entity.Property(e => e.TpoObiTyp).HasColumnName("TPO_ObiTyp");
            entity.Property(e => e.TpoJezykId).HasColumnName("TPO_JezykId");
            entity.Property(e => e.TpoCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TPO_CzasModyfikacji");
            entity.Property(e => e.TpoMetaOpis)
                .HasMaxLength(320)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_MetaOpis");
            entity.Property(e => e.TpoNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_Nazwa");
            entity.Property(e => e.TpoOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_Opis");
            entity.Property(e => e.TpoOpisKrotki)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_OpisKrotki");
            entity.Property(e => e.TpoSlowaKluczowe)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_SlowaKluczowe");
            entity.Property(e => e.TpoSlowaKluczoweW)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_SlowaKluczoweW");
            entity.Property(e => e.TpoTytulStrony)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_TytulStrony");
            entity.Property(e => e.TpoUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPO_Url");
        });

        modelBuilder.Entity<TwrAtrybuty>(entity =>
        {
            entity.HasKey(e => new { e.TwXGidtyp, e.TwXGidnumer, e.TwXGidlp }).HasName("TwX_Primary");

            entity.ToTable("TwrAtrybuty", "CDN");

            entity.HasIndex(e => new { e.TwXGidtyp, e.TwXGidnumer, e.TwXAtrybut }, "TwXAtrybut").IsUnique();

            entity.HasIndex(e => new { e.TwXGidtyp, e.TwXGidlp, e.TwXAtrybut, e.TwXNumer }, "TwXNazwy").IsUnique();

            entity.Property(e => e.TwXGidtyp).HasColumnName("TwX_GIDTyp");
            entity.Property(e => e.TwXGidnumer).HasColumnName("TwX_GIDNumer");
            entity.Property(e => e.TwXGidlp).HasColumnName("TwX_GIDLp");
            entity.Property(e => e.TwXAtrybut)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwX_Atrybut");
            entity.Property(e => e.TwXFormatA)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwX_FormatA");
            entity.Property(e => e.TwXGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TwX_GIDFirma");
            entity.Property(e => e.TwXNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwX_Numer");
        });

        modelBuilder.Entity<TwrCeny>(entity =>
        {
            entity.HasKey(e => e.TwCId).HasName("TwC_Primary");

            entity.ToTable("TwrCeny", "CDN", tb =>
                {
                    tb.HasTrigger("TwrCenyAlias_InsertUpdateHandler");
                    tb.HasTrigger("TwrCeny_DeleteHandler");
                    tb.HasTrigger("TwrCeny_PicoCenniki");
                    tb.HasTrigger("TwrCeny_PicoUsuniete");
                    tb.HasTrigger("TwrCeny_TwrCenyNag");
                });

            entity.HasIndex(e => new { e.TwCTwrNumer, e.TwCTwrLp }, "TwCTowar");

            entity.HasIndex(e => new { e.TwCTcnId, e.TwCTwrNumer }, "TwCTwrCennik").IsUnique();

            entity.HasIndex(e => new { e.TwCTwrNumer, e.TwCTwrLp, e.TwCDataOd, e.TwCCzasModyfikacji }, "TwcTowarOpt");

            entity.Property(e => e.TwCId).HasColumnName("TwC_ID");
            entity.Property(e => e.TwCAktualizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwC_Aktualizacja");
            entity.Property(e => e.TwCAktywny)
                .HasDefaultValue(0)
                .HasColumnName("TwC_Aktywny");
            entity.Property(e => e.TwCCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TwC_CzasModyfikacji");
            entity.Property(e => e.TwCDataOd)
                .HasDefaultValue(0)
                .HasColumnName("TwC_DataOd");
            entity.Property(e => e.TwCDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwC_DokFirma");
            entity.Property(e => e.TwCDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwC_DokLp");
            entity.Property(e => e.TwCDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwC_DokNumer");
            entity.Property(e => e.TwCDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwC_DokTyp");
            entity.Property(e => e.TwCKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwC_KntFirma");
            entity.Property(e => e.TwCKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwC_KntLp");
            entity.Property(e => e.TwCKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwC_KntNumer");
            entity.Property(e => e.TwCKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwC_KntTyp");
            entity.Property(e => e.TwCKosztyDodatkowe)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwC_KosztyDodatkowe");
            entity.Property(e => e.TwCMarza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("TwC_Marza");
            entity.Property(e => e.TwCNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TwC_NrKursu");
            entity.Property(e => e.TwCOffset)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("TwC_Offset");
            entity.Property(e => e.TwCPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwC_Priorytet");
            entity.Property(e => e.TwCRodzajPodstawy)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwC_RodzajPodstawy");
            entity.Property(e => e.TwCTcnId)
                .HasDefaultValue(0)
                .HasColumnName("TwC_TcnId");
            entity.Property(e => e.TwCTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwC_TwrFirma");
            entity.Property(e => e.TwCTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwC_TwrLp");
            entity.Property(e => e.TwCTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwC_TwrNumer");
            entity.Property(e => e.TwCTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwC_TwrTyp");
            entity.Property(e => e.TwCWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwC_Waluta");
            entity.Property(e => e.TwCWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwC_Wartosc");
            entity.Property(e => e.TwCZaok)
                .HasDefaultValueSql("((0.0001))")
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("TwC_Zaok");

            entity.HasOne(d => d.TwCTwrNumerNavigation).WithMany(p => p.TwrCenies)
                .HasForeignKey(d => d.TwCTwrNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwCTowar");
        });

        modelBuilder.Entity<TwrCenyHist>(entity =>
        {
            entity.HasKey(e => e.TchId).HasName("TCH_Primary");

            entity.ToTable("TwrCenyHist", "CDN");

            entity.HasIndex(e => new { e.TchTwrTyp, e.TchTwrNumer, e.TchTsarc, e.TchId }, "TCHTowarData").IsUnique();

            entity.HasIndex(e => new { e.TchTwrTyp, e.TchTwrNumer, e.TchTwrLp, e.TchWaluta, e.TchTsarc }, "TCHTowarDataWaluta");

            entity.Property(e => e.TchId).HasColumnName("TCH_Id");
            entity.Property(e => e.TchDataOd)
                .HasDefaultValue(0)
                .HasColumnName("TCH_DataOd");
            entity.Property(e => e.TchDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("TCH_DokFirma");
            entity.Property(e => e.TchDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCH_DokLp");
            entity.Property(e => e.TchDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("TCH_DokNumer");
            entity.Property(e => e.TchDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCH_DokTyp");
            entity.Property(e => e.TchDomyslna)
                .HasDefaultValue((byte)0)
                .HasColumnName("TCH_Domyslna");
            entity.Property(e => e.TchKosztyDodatkowe)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TCH_KosztyDodatkowe");
            entity.Property(e => e.TchNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TCH_NrKursu");
            entity.Property(e => e.TchOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("TCH_OpeFirma");
            entity.Property(e => e.TchOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCH_OpeLp");
            entity.Property(e => e.TchOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("TCH_OpeNumer");
            entity.Property(e => e.TchOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCH_OpeTyp");
            entity.Property(e => e.TchTcnId)
                .HasDefaultValue(0)
                .HasColumnName("TCH_TcnId");
            entity.Property(e => e.TchTsarc)
                .HasDefaultValue(0)
                .HasColumnName("TCH_TSArc");
            entity.Property(e => e.TchTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TCH_TwrFirma");
            entity.Property(e => e.TchTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCH_TwrLp");
            entity.Property(e => e.TchTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TCH_TwrNumer");
            entity.Property(e => e.TchTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCH_TwrTyp");
            entity.Property(e => e.TchWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TCH_Waluta");
            entity.Property(e => e.TchWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TCH_Wartosc");
            entity.Property(e => e.TchZrodlo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TCH_Zrodlo");
        });

        modelBuilder.Entity<TwrCenyHistOdDo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TwrCenyHistOdDo", "CDN");

            entity.Property(e => e.Do).HasColumnName("DO");
            entity.Property(e => e.FlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FlagaNB");
            entity.Property(e => e.Od).HasColumnName("OD");
            entity.Property(e => e.Stawka)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TwrTyp).HasColumnName("TwrTYP");
            entity.Property(e => e.Waluta)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Wartosc).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.WartoscNetto).HasColumnType("decimal(38, 21)");
        });

        modelBuilder.Entity<TwrCenyNag>(entity =>
        {
            entity.HasKey(e => e.TcnId).HasName("TCN_Primary");

            entity.ToTable("TwrCenyNag", "CDN", tb => tb.HasTrigger("TwrCenyNag_DeleteHandler"));

            entity.HasIndex(e => new { e.TcnNazwa, e.TcnId }, "TCNNazwaId").IsUnique();

            entity.Property(e => e.TcnId).HasColumnName("TCN_Id");
            entity.Property(e => e.TcnAktualizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("TCN_Aktualizacja");
            entity.Property(e => e.TcnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("TCN_Aktywny");
            entity.Property(e => e.TcnCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TCN_CzasModyfikacji");
            entity.Property(e => e.TcnDataOd)
                .HasDefaultValue(0)
                .HasColumnName("TCN_DataOd");
            entity.Property(e => e.TcnDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("TCN_DataUtworzenia");
            entity.Property(e => e.TcnKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TCN_KntFirma");
            entity.Property(e => e.TcnKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCN_KntLp");
            entity.Property(e => e.TcnKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TCN_KntNumer");
            entity.Property(e => e.TcnKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCN_KntTyp");
            entity.Property(e => e.TcnMarza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("TCN_Marza");
            entity.Property(e => e.TcnMarzaNarzutOpcja)
                .HasDefaultValue((byte)0)
                .HasColumnName("TCN_MarzaNarzutOpcja");
            entity.Property(e => e.TcnNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TCN_Nazwa");
            entity.Property(e => e.TcnNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TCN_NrKursu");
            entity.Property(e => e.TcnOffset)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("TCN_Offset");
            entity.Property(e => e.TcnOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("TCN_OpeMNumer");
            entity.Property(e => e.TcnOpeMtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCN_OpeMTyp");
            entity.Property(e => e.TcnOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("TCN_OpeWNumer");
            entity.Property(e => e.TcnOpeWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCN_OpeWTyp");
            entity.Property(e => e.TcnOpeZnumer)
                .HasDefaultValue(0)
                .HasColumnName("TCN_OpeZNumer");
            entity.Property(e => e.TcnOpeZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TCN_OpeZTyp");
            entity.Property(e => e.TcnOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TCN_Opis");
            entity.Property(e => e.TcnRodzajCeny)
                .HasDefaultValue(0)
                .HasColumnName("TCN_RodzajCeny");
            entity.Property(e => e.TcnRodzajPodstawy)
                .HasDefaultValue((byte)0)
                .HasColumnName("TCN_RodzajPodstawy");
            entity.Property(e => e.TcnStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("TCN_Stan");
            entity.Property(e => e.TcnTcnid)
                .HasDefaultValue(0)
                .HasColumnName("TCN_TCNId");
            entity.Property(e => e.TcnWalutaCenySprzedazy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TCN_WalutaCenySprzedazy");
            entity.Property(e => e.TcnWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("TCN_Wsk");
            entity.Property(e => e.TcnZaok)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("TCN_Zaok");
            entity.Property(e => e.TcnZmianaProc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TCN_ZmianaProc");
        });

        modelBuilder.Entity<TwrDost>(entity =>
        {
            entity.HasKey(e => e.TwdId).HasName("TWD_Primary");

            entity.ToTable("TwrDost", "CDN", tb =>
                {
                    tb.HasTrigger("TwrDost_DeleteHandler");
                    tb.HasTrigger("TwrDost_DeleteTKKHandler");
                    tb.HasTrigger("TwrDost_InsertUpdateHandler");
                    tb.HasTrigger("TwrDost_UpdateKlasaKnt");
                });

            entity.HasIndex(e => new { e.TwdKntTyp, e.TwdKntNumer }, "TwDKod");

            entity.HasIndex(e => new { e.TwdKntTyp, e.TwdKntNumer, e.TwdTwrTyp, e.TwdTwrNumer, e.TwdKlasaKnt }, "TwDKontrah").IsUnique();

            entity.HasIndex(e => new { e.TwdTwrNumer, e.TwdKlasaKnt, e.TwdTwrLp }, "TwDTwr").IsUnique();

            entity.Property(e => e.TwdId).HasColumnName("TWD_Id");
            entity.Property(e => e.TwdCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TWD_Cena");
            entity.Property(e => e.TwdCzas)
                .HasDefaultValue(0)
                .HasColumnName("TWD_Czas");
            entity.Property(e => e.TwdDataAkt)
                .HasDefaultValue(0)
                .HasColumnName("TWD_DataAkt");
            entity.Property(e => e.TwdIloscZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TWD_IloscZam");
            entity.Property(e => e.TwdKlasaKnt)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_KlasaKnt");
            entity.Property(e => e.TwdKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("TWD_KntFirma");
            entity.Property(e => e.TwdKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_KntLp");
            entity.Property(e => e.TwdKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("TWD_KntNumer");
            entity.Property(e => e.TwdKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_KntTyp");
            entity.Property(e => e.TwdKodDodatkowyKnt)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWD_KodDodatkowyKnt");
            entity.Property(e => e.TwdKodFirma)
                .HasDefaultValue(0)
                .HasColumnName("TWD_KodFirma");
            entity.Property(e => e.TwdKodLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_KodLp");
            entity.Property(e => e.TwdKodNumer)
                .HasDefaultValue(0)
                .HasColumnName("TWD_KodNumer");
            entity.Property(e => e.TwdKodTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_KodTyp");
            entity.Property(e => e.TwdMrpEoq)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TWD_MrpEoq");
            entity.Property(e => e.TwdNazwaKnt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWD_NazwaKnt");
            entity.Property(e => e.TwdNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWD_Notatki");
            entity.Property(e => e.TwdNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_NrKursu");
            entity.Property(e => e.TwdOplataSpozZakup)
                .HasDefaultValue(0)
                .HasColumnName("TWD_OplataSpozZakup");
            entity.Property(e => e.TwdPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_Pozycja");
            entity.Property(e => e.TwdTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TWD_TwrFirma");
            entity.Property(e => e.TwdTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_TwrLp");
            entity.Property(e => e.TwdTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TWD_TwrNumer");
            entity.Property(e => e.TwdTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWD_TwrTyp");
            entity.Property(e => e.TwdWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TWD_Waluta");

            entity.HasOne(d => d.TwdTwrNumerNavigation).WithMany(p => p.TwrDosts)
                .HasForeignKey(d => d.TwdTwrNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwDTwrNoType");
        });

        modelBuilder.Entity<TwrDostCeny>(entity =>
        {
            entity.HasKey(e => e.TdcId).HasName("TDC_Primary");

            entity.ToTable("TwrDostCeny", "CDN", tb => tb.HasTrigger("TwrDostCeny_TwrDostHist"));

            entity.HasIndex(e => e.TdcTwdId, "TDCTwd");

            entity.Property(e => e.TdcId).HasColumnName("TDC_Id");
            entity.Property(e => e.TdcCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TDC_Cena");
            entity.Property(e => e.TdcCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TDC_CzasModyfikacji");
            entity.Property(e => e.TdcDataOd)
                .HasDefaultValue(0)
                .HasColumnName("TDC_DataOd");
            entity.Property(e => e.TdcNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("TDC_NrKursu");
            entity.Property(e => e.TdcTwdId)
                .HasDefaultValue(0)
                .HasColumnName("TDC_TwdId");
            entity.Property(e => e.TdcWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDC_Waluta");

            entity.HasOne(d => d.TdcTwd).WithMany(p => p.TwrDostCenies)
                .HasForeignKey(d => d.TdcTwdId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TDCTwd");
        });

        modelBuilder.Entity<TwrDostHist>(entity =>
        {
            entity.HasKey(e => e.TdhId).HasName("TDH_Primary");

            entity.ToTable("TwrDostHist", "CDN", tb => tb.HasTrigger("TwrDostHist_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.TdhTwrNumer, e.TdhTwrTyp, e.TdhDataAktualizacji }, "TDHTwrDataOpt");

            entity.HasIndex(e => new { e.TdhTwrTyp, e.TdhTwrNumer, e.TdhKlasaKnt, e.TdhTwrLp }, "TDHTwrDost");

            entity.Property(e => e.TdhId).HasColumnName("TDH_ID");
            entity.Property(e => e.TdhCena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TDH_Cena");
            entity.Property(e => e.TdhCzas)
                .HasDefaultValue(0)
                .HasColumnName("TDH_Czas");
            entity.Property(e => e.TdhDataAktualizacji)
                .HasDefaultValue(0)
                .HasColumnName("TDH_DataAktualizacji");
            entity.Property(e => e.TdhDataOd)
                .HasDefaultValue(0)
                .HasColumnName("TDH_DataOd");
            entity.Property(e => e.TdhDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("TDH_Domyslny");
            entity.Property(e => e.TdhJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDH_JmZ");
            entity.Property(e => e.TdhKlasaKnt)
                .HasDefaultValue((short)0)
                .HasColumnName("TDH_KlasaKnt");
            entity.Property(e => e.TdhKlasaKntOrg)
                .HasDefaultValue((short)0)
                .HasColumnName("TDH_KlasaKntOrg");
            entity.Property(e => e.TdhKodDodatkowyKnt)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDH_KodDodatkowyKnt");
            entity.Property(e => e.TdhKodOrgKnt)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDH_KodOrgKnt");
            entity.Property(e => e.TdhNazwaKnt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDH_NazwaKnt");
            entity.Property(e => e.TdhNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDH_Notatki");
            entity.Property(e => e.TdhOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("TDH_OpeNumer");
            entity.Property(e => e.TdhOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TDH_OpeTyp");
            entity.Property(e => e.TdhTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TDH_TwrLp");
            entity.Property(e => e.TdhTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TDH_TwrNumer");
            entity.Property(e => e.TdhTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TDH_TwrTyp");
            entity.Property(e => e.TdhWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TDH_Waluta");
            entity.Property(e => e.TdhZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("TDH_ZrdNumer");
            entity.Property(e => e.TdhZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TDH_ZrdTyp");
        });

        modelBuilder.Entity<TwrGrupy>(entity =>
        {
            entity.HasKey(e => new { e.TwGGidtyp, e.TwGGidnumer, e.TwGGrOtyp, e.TwGGrOnumer }).HasName("TwG_Primary");

            entity.ToTable("TwrGrupy", "CDN", tb =>
                {
                    tb.HasTrigger("TwrGrupyDelete_CzasModyfikacji");
                    tb.HasTrigger("TwrGrupyDelete_TwrPromocje");
                    tb.HasTrigger("TwrGrupyInsertUpdate_CzasModyfikacji");
                    tb.HasTrigger("TwrGrupy_BstHandler");
                    tb.HasTrigger("TwrGrupy_DeleteHandler");
                    tb.HasTrigger("TwrGrupy_HistoriaZmian_TwrKarty");
                    tb.HasTrigger("TwrGrupy_InsertUpdateHandler");
                    tb.HasTrigger("TwrGrupy_PicoUsuniete");
                    tb.HasTrigger("TwrLinkiDelete");
                    tb.HasTrigger("TwrLinkiInsert");
                    tb.HasTrigger("TwrLinkiUpdate");
                });

            entity.HasIndex(e => new { e.TwGGrOtyp, e.TwGGrOnumer, e.TwGGidtyp, e.TwGKod }, "TwGKod").IsUnique();

            entity.HasIndex(e => new { e.TwGGrOtyp, e.TwGGrOnumer, e.TwGGidtyp, e.TwGNazwa, e.TwGGidnumer }, "TwGNazwa").IsUnique();

            entity.HasIndex(e => e.TwGSyncId, "TwGSyncID").IsUnique();

            entity.Property(e => e.TwGGidtyp).HasColumnName("TwG_GIDTyp");
            entity.Property(e => e.TwGGidnumer).HasColumnName("TwG_GIDNumer");
            entity.Property(e => e.TwGGrOtyp).HasColumnName("TwG_GrOTyp");
            entity.Property(e => e.TwGGrOnumer).HasColumnName("TwG_GrONumer");
            entity.Property(e => e.TwGCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TwG_CzasModyfikacji");
            entity.Property(e => e.TwGGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TwG_GIDFirma");
            entity.Property(e => e.TwGGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwG_GIDLp");
            entity.Property(e => e.TwGGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("TwG_GrOFirma");
            entity.Property(e => e.TwGGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwG_GrOLp");
            entity.Property(e => e.TwGKategoriaBiid)
                .HasDefaultValue(0)
                .HasColumnName("TwG_KategoriaBIId");
            entity.Property(e => e.TwGKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwG_Kod");
            entity.Property(e => e.TwGNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwG_Nazwa");
            entity.Property(e => e.TwGSyncId)
                .ValueGeneratedOnAdd()
                .HasColumnName("TwG_SyncId");
        });

        modelBuilder.Entity<TwrGrupyDom>(entity =>
        {
            entity.HasKey(e => new { e.TgdGidtyp, e.TgdGidnumer }).HasName("TGD_Primary");

            entity.ToTable("TwrGrupyDom", "CDN", tb =>
                {
                    tb.HasTrigger("TwrGrupyDomDelete_Konfig");
                    tb.HasTrigger("TwrGrupyDomDelete_TwrPromocje");
                    tb.HasTrigger("TwrGrupyDom_DeleteHandler");
                });

            entity.HasIndex(e => new { e.TgdGidtyp, e.TgdGidnumer, e.TgdGrOtyp, e.TgdGrOnumer }, "TGDOjciec").IsUnique();

            entity.Property(e => e.TgdGidtyp).HasColumnName("TGD_GIDTyp");
            entity.Property(e => e.TgdGidnumer).HasColumnName("TGD_GIDNumer");
            entity.Property(e => e.TgdGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TGD_GIDFirma");
            entity.Property(e => e.TgdGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TGD_GIDLp");
            entity.Property(e => e.TgdGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("TGD_GrOFirma");
            entity.Property(e => e.TgdGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TGD_GrOLp");
            entity.Property(e => e.TgdGrOnumer)
                .HasDefaultValue(0)
                .HasColumnName("TGD_GrONumer");
            entity.Property(e => e.TgdGrOtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TGD_GrOTyp");
            entity.Property(e => e.TgdKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TGD_Kod");
        });

        modelBuilder.Entity<TwrJm>(entity =>
        {
            entity.HasKey(e => new { e.TwJTwrTyp, e.TwJTwrNumer, e.TwJTwrLp }).HasName("TwJ_Primary");

            entity.ToTable("TwrJm", "CDN", tb =>
                {
                    tb.HasTrigger("TwrJmDlaTwK_DeleteHandler");
                    tb.HasTrigger("TwrJm_InsertUpdateHandler");
                    tb.HasTrigger("TwrJm_PozycjaDelete");
                });

            entity.HasIndex(e => new { e.TwJKcaTyp, e.TwJKcaNumer }, "TwJKaucja");

            entity.HasIndex(e => new { e.TwJTwrNumer, e.TwJPozycja }, "TwJPozycja");

            entity.HasIndex(e => new { e.TwJTwrNumer, e.TwJTwrLp }, "TwJTowar").IsUnique();

            entity.Property(e => e.TwJTwrTyp).HasColumnName("TwJ_TwrTyp");
            entity.Property(e => e.TwJTwrNumer).HasColumnName("TwJ_TwrNumer");
            entity.Property(e => e.TwJTwrLp).HasColumnName("TwJ_TwrLp");
            entity.Property(e => e.TwJCalkowita)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwJ_Calkowita");
            entity.Property(e => e.TwJDzielWzwm)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwJ_DzielWZWM");
            entity.Property(e => e.TwJISklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwJ_iSklep");
            entity.Property(e => e.TwJId)
                .ValueGeneratedOnAdd()
                .HasColumnName("TwJ_Id");
            entity.Property(e => e.TwJJednostkaLog)
                .HasDefaultValue(0)
                .HasColumnName("TwJ_JednostkaLog");
            entity.Property(e => e.TwJJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwJ_JmFormat");
            entity.Property(e => e.TwJJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwJ_JmZ");
            entity.Property(e => e.TwJKcaFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwJ_KcaFirma");
            entity.Property(e => e.TwJKcaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwJ_KcaLp");
            entity.Property(e => e.TwJKcaNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwJ_KcaNumer");
            entity.Property(e => e.TwJKcaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwJ_KcaTyp");
            entity.Property(e => e.TwJMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwJ_MobSpr");
            entity.Property(e => e.TwJObjetoscL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwJ_ObjetoscL");
            entity.Property(e => e.TwJObjetoscM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TwJ_ObjetoscM");
            entity.Property(e => e.TwJObowiazek)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwJ_Obowiazek");
            entity.Property(e => e.TwJPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("TwJ_Pozycja");
            entity.Property(e => e.TwJProg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TwJ_Prog");
            entity.Property(e => e.TwJPrzeliczL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwJ_PrzeliczL");
            entity.Property(e => e.TwJPrzeliczM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwJ_PrzeliczM");
            entity.Property(e => e.TwJPulpitKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwJ_PulpitKnt");
            entity.Property(e => e.TwJTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwJ_TwrFirma");
            entity.Property(e => e.TwJTypJm)
                .HasDefaultValue((byte)1)
                .HasColumnName("TwJ_TypJm");
            entity.Property(e => e.TwJWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("TwJ_Waga");
            entity.Property(e => e.TwJWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("TwJ_WagaBrutto");
            entity.Property(e => e.TwJWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwJ_WJm");
            entity.Property(e => e.TwJWjmBrutto)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwJ_WJmBrutto");
            entity.Property(e => e.TwJWyliczPrzySpr)
                .HasDefaultValue((short)0)
                .HasColumnName("TwJ_WyliczPrzySpr");
            entity.Property(e => e.TwJWymJm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwJ_WymJm");

            entity.HasOne(d => d.TwJTwrNumerNavigation).WithMany(p => p.TwrJms)
                .HasForeignKey(d => d.TwJTwrNumer)
                .HasConstraintName("FK_TwJTowar");
        });

        modelBuilder.Entity<TwrKarty>(entity =>
        {
            entity.HasKey(e => e.TwrGidnumer).HasName("Twr_Primary");

            entity.ToTable("TwrKarty", "CDN", tb =>
                {
                    tb.HasTrigger("TwrJedn_PicoUsuniete");
                    tb.HasTrigger("TwrKartyAlias_DeleteHandler");
                    tb.HasTrigger("TwrKartyEAN_InsertUpdateHandler");
                    tb.HasTrigger("TwrKarty_AktualizujPodstawoweTechnologiePTZ");
                    tb.HasTrigger("TwrKarty_DeleteAtrybutyHist");
                    tb.HasTrigger("TwrKarty_DeleteHandler");
                    tb.HasTrigger("TwrKarty_HistoriaZmian");
                    tb.HasTrigger("TwrKarty_InsertUpdateHandler");
                    tb.HasTrigger("TwrLastModC");
                });

            entity.HasIndex(e => new { e.TwrEan, e.TwrArchiwalny }, "TwrEanArch");

            entity.HasIndex(e => new { e.TwrEan, e.TwrGidnumer }, "TwrEanGIDNumer").IsUnique();

            entity.HasIndex(e => new { e.TwrKatalog, e.TwrGidnumer }, "TwrKatalog").IsUnique();

            entity.HasIndex(e => e.TwrKod, "TwrKod").IsUnique();

            entity.HasIndex(e => e.TwrMrpId, "TwrMRPId");

            entity.HasIndex(e => e.TwrMagNumer, "TwrMagazyn");

            entity.HasIndex(e => new { e.TwrNazwa, e.TwrGidnumer }, "TwrNazwa").IsUnique();

            entity.HasIndex(e => e.TwrTyp, "TwrTyp");

            entity.Property(e => e.TwrGidnumer).HasColumnName("Twr_GIDNumer");
            entity.Property(e => e.TwrAkcyza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_Akcyza");
            entity.Property(e => e.TwrAktywna)
                .HasDefaultValue(0)
                .HasColumnName("Twr_Aktywna");
            entity.Property(e => e.TwrAnalizaAbcxyz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_AnalizaABCXYZ");
            entity.Property(e => e.TwrArchiwalny)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_Archiwalny");
            entity.Property(e => e.TwrAtrybut1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Atrybut1");
            entity.Property(e => e.TwrAtrybut2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Atrybut2");
            entity.Property(e => e.TwrAtrybut3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Atrybut3");
            entity.Property(e => e.TwrAutoZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_AutoZam");
            entity.Property(e => e.TwrAutonumeracjaKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_AutonumeracjaKod");
            entity.Property(e => e.TwrAutonumeracjaLiczba)
                .HasDefaultValue(0)
                .HasColumnName("Twr_AutonumeracjaLiczba");
            entity.Property(e => e.TwrBezRabatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_BezRabatu");
            entity.Property(e => e.TwrBlokada)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_Blokada");
            entity.Property(e => e.TwrBon)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Bon");
            entity.Property(e => e.TwrCckfirma)
                .HasDefaultValue(0)
                .HasColumnName("Twr_CCKFirma");
            entity.Property(e => e.TwrCcklp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_CCKLp");
            entity.Property(e => e.TwrCcknumer)
                .HasDefaultValue(0)
                .HasColumnName("Twr_CCKNumer");
            entity.Property(e => e.TwrCcktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_CCKTyp");
            entity.Property(e => e.TwrCel)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Cel");
            entity.Property(e => e.TwrCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_CenaSpr");
            entity.Property(e => e.TwrCertyfikat)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Certyfikat");
            entity.Property(e => e.TwrClo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Twr_Clo");
            entity.Property(e => e.TwrCzasDst)
                .HasDefaultValue(0)
                .HasColumnName("Twr_CzasDst");
            entity.Property(e => e.TwrCzasWykonania)
                .HasDefaultValue(0)
                .HasColumnName("Twr_CzasWykonania");
            entity.Property(e => e.TwrCzasWykonaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_CzasWykonaniaJedn");
            entity.Property(e => e.TwrDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("Twr_DataUtworzenia");
            entity.Property(e => e.TwrDodEleZez)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_DodEleZez");
            entity.Property(e => e.TwrDostawaEan)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_DostawaEAN");
            entity.Property(e => e.TwrDstDomyslny)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_DstDomyslny");
            entity.Property(e => e.TwrEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Ean");
            entity.Property(e => e.TwrEdycjaNazwy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_EdycjaNazwy");
            entity.Property(e => e.TwrEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_ESklep");
            entity.Property(e => e.TwrFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_FlagaVat");
            entity.Property(e => e.TwrFlagaVatSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_FlagaVatSpr");
            entity.Property(e => e.TwrFormat1)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Format1");
            entity.Property(e => e.TwrFormat2)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Format2");
            entity.Property(e => e.TwrFormat3)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Format3");
            entity.Property(e => e.TwrFppkod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_FPPKod");
            entity.Property(e => e.TwrGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("Twr_GIDFirma");
            entity.Property(e => e.TwrGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_GIDLp");
            entity.Property(e => e.TwrGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_GIDTyp");
            entity.Property(e => e.TwrGrupaJpk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_GrupaJpk");
            entity.Property(e => e.TwrGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_GrupaPod");
            entity.Property(e => e.TwrGrupaPodSpr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_GrupaPodSpr");
            entity.Property(e => e.TwrGrupaWyposazenia)
                .HasDefaultValue(0)
                .HasColumnName("Twr_GrupaWyposazenia");
            entity.Property(e => e.TwrIloscAzam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Twr_IloscAZam");
            entity.Property(e => e.TwrIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Twr_IloscMax");
            entity.Property(e => e.TwrIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Twr_IloscMin");
            entity.Property(e => e.TwrIloscZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Twr_IloscZam");
            entity.Property(e => e.TwrJlogWms)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_JLogWMS");
            entity.Property(e => e.TwrJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Jm");
            entity.Property(e => e.TwrJmDomyslna)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_JmDomyslna");
            entity.Property(e => e.TwrJmDomyslnaZak)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_JmDomyslnaZak");
            entity.Property(e => e.TwrJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_JmFormat");
            entity.Property(e => e.TwrJmblokujZmiane)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_JMBlokujZmiane");
            entity.Property(e => e.TwrJmcalkowita)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_JMCalkowita");
            entity.Property(e => e.TwrJmdopelnianiaMobSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_JMDopelnianiaMobSpr");
            entity.Property(e => e.TwrJmiSklep)
                .HasDefaultValue(0)
                .HasColumnName("Twr_JMiSklep");
            entity.Property(e => e.TwrJmmobSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_JMMobSpr");
            entity.Property(e => e.TwrJmpulpitKnt)
                .HasDefaultValue(0)
                .HasColumnName("Twr_JMPulpitKnt");
            entity.Property(e => e.TwrKatalog)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Katalog");
            entity.Property(e => e.TwrKategoriaAbcxyz)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_KategoriaABCXYZ");
            entity.Property(e => e.TwrKaucja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Kaucja");
            entity.Property(e => e.TwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Kod");
            entity.Property(e => e.TwrKodFormat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_KodFormat");
            entity.Property(e => e.TwrKodOdpadu)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_KodOdpadu");
            entity.Property(e => e.TwrKoncesja)
                .HasDefaultValue(0)
                .HasColumnName("Twr_Koncesja");
            entity.Property(e => e.TwrKontaktJc)
                .HasDefaultValue((byte)1)
                .HasColumnName("Twr_KontaktJC");
            entity.Property(e => e.TwrKontaktTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_KontaktTyp");
            entity.Property(e => e.TwrKontaktZa)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_KontaktZa");
            entity.Property(e => e.TwrKonto1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Konto1");
            entity.Property(e => e.TwrKonto2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Konto2");
            entity.Property(e => e.TwrKonto3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Konto3");
            entity.Property(e => e.TwrKopiujOpis)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_KopiujOpis");
            entity.Property(e => e.TwrKosztUslugi)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("Twr_KosztUslugi");
            entity.Property(e => e.TwrKosztUtyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_KosztUTyp");
            entity.Property(e => e.TwrKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_KrajPoch");
            entity.Property(e => e.TwrLastModC)
                .HasDefaultValue(0)
                .HasColumnName("Twr_LastModC");
            entity.Property(e => e.TwrLastModL)
                .HasDefaultValue(0)
                .HasColumnName("Twr_LastModL");
            entity.Property(e => e.TwrLastModO)
                .HasDefaultValue(0)
                .HasColumnName("Twr_LastModO");
            entity.Property(e => e.TwrLicencja)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_Licencja");
            entity.Property(e => e.TwrMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("Twr_MagFirma");
            entity.Property(e => e.TwrMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_MagLp");
            entity.Property(e => e.TwrMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("Twr_MagNumer");
            entity.Property(e => e.TwrMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_MagTyp");
            entity.Property(e => e.TwrMarkaId)
                .HasDefaultValue(0)
                .HasColumnName("Twr_MarkaId");
            entity.Property(e => e.TwrMarzaMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_MarzaMin");
            entity.Property(e => e.TwrMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_MobSpr");
            entity.Property(e => e.TwrMpp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_MPP");
            entity.Property(e => e.TwrMrpEoq)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Twr_MrpEoq");
            entity.Property(e => e.TwrMrpId)
                .HasDefaultValue(0)
                .HasColumnName("Twr_MrpId");
            entity.Property(e => e.TwrMrpZaok)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("Twr_MrpZaok");
            entity.Property(e => e.TwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Nazwa");
            entity.Property(e => e.TwrNazwa1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Nazwa1");
            entity.Property(e => e.TwrNotowania)
                .HasDefaultValue(0)
                .HasColumnName("Twr_Notowania");
            entity.Property(e => e.TwrNrSeryjnyZcechy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_NrSeryjnyZCechy");
            entity.Property(e => e.TwrObcy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Obcy");
            entity.Property(e => e.TwrObjetoscL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Twr_ObjetoscL");
            entity.Property(e => e.TwrObjetoscM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("Twr_ObjetoscM");
            entity.Property(e => e.TwrObowPodSprId)
                .HasDefaultValue(0)
                .HasColumnName("Twr_ObowPodSprId");
            entity.Property(e => e.TwrObowPodZakId)
                .HasDefaultValue(0)
                .HasColumnName("Twr_ObowPodZakId");
            entity.Property(e => e.TwrOddzialowy)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_Oddzialowy");
            entity.Property(e => e.TwrOkresGwarancji)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OkresGwarancji");
            entity.Property(e => e.TwrOkresowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Okresowy");
            entity.Property(e => e.TwrOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OpeFirma");
            entity.Property(e => e.TwrOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OpeFirmaM");
            entity.Property(e => e.TwrOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_OpeLp");
            entity.Property(e => e.TwrOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_OpeLpM");
            entity.Property(e => e.TwrOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OpeNumer");
            entity.Property(e => e.TwrOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OpeNumerM");
            entity.Property(e => e.TwrOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_OpeTyp");
            entity.Property(e => e.TwrOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_OpeTypM");
            entity.Property(e => e.TwrOpisUrzadzenia)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_OpisUrzadzenia");
            entity.Property(e => e.TwrOplataSpozDostawyFlaga)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OplataSpozDostawyFlaga");
            entity.Property(e => e.TwrOplataSpozDostawyTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_OplataSpozDostawyTyp");
            entity.Property(e => e.TwrOplataSpozFlaga)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OplataSpozFlaga");
            entity.Property(e => e.TwrOplataSpozNrPartii)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OplataSpozNrPartii");
            entity.Property(e => e.TwrOplataSpozNrPartiiAtrybut)
                .HasDefaultValue(0)
                .HasColumnName("Twr_OplataSpozNrPartiiAtrybut");
            entity.Property(e => e.TwrOplataSpozPrzeliczL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("Twr_OplataSpozPrzeliczL");
            entity.Property(e => e.TwrOplataSpozPrzeliczM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("Twr_OplataSpozPrzeliczM");
            entity.Property(e => e.TwrPartiaDataW)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_PartiaDataW");
            entity.Property(e => e.TwrPartiaDostawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_PartiaDostawa");
            entity.Property(e => e.TwrPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_PCN");
            entity.Property(e => e.TwrPiadostepnoscFlaga)
                .HasDefaultValue(0)
                .HasColumnName("Twr_PIADostepnoscFlaga");
            entity.Property(e => e.TwrPlm)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_PLM");
            entity.Property(e => e.TwrPobierzWgCech)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_PobierzWgCech");
            entity.Property(e => e.TwrPodatekImp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Twr_PodatekImp");
            entity.Property(e => e.TwrPolozenie)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Polozenie");
            entity.Property(e => e.TwrPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("Twr_PrcFirma");
            entity.Property(e => e.TwrPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_PrcLp");
            entity.Property(e => e.TwrPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("Twr_PrcNumer");
            entity.Property(e => e.TwrPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_PrcTyp");
            entity.Property(e => e.TwrPrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("Twr_PrdFirma");
            entity.Property(e => e.TwrPrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_PrdLp");
            entity.Property(e => e.TwrPrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("Twr_PrdNumer");
            entity.Property(e => e.TwrPrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_PrdTyp");
            entity.Property(e => e.TwrProdAktualnaWersja)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_ProdAktualnaWersja");
            entity.Property(e => e.TwrProdTechnologia)
                .HasDefaultValue(0)
                .HasColumnName("Twr_ProdTechnologia");
            entity.Property(e => e.TwrProg)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Prog");
            entity.Property(e => e.TwrPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("Twr_Punkty");
            entity.Property(e => e.TwrRejWyposazenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_RejWyposazenia");
            entity.Property(e => e.TwrRejestrujUrzadzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_RejestrujUrzadzenie");
            entity.Property(e => e.TwrRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("Twr_RodzajId");
            entity.Property(e => e.TwrRodzajKosztu)
                .HasDefaultValue(0)
                .HasColumnName("Twr_RodzajKosztu");
            entity.Property(e => e.TwrRodzajUrzadzenia)
                .HasDefaultValue(0)
                .HasColumnName("Twr_RodzajUrzadzenia");
            entity.Property(e => e.TwrRozliczMag)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_RozliczMag");
            entity.Property(e => e.TwrSkNid)
                .HasDefaultValue(0)
                .HasColumnName("Twr_SkNId");
            entity.Property(e => e.TwrSprzedaz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Sprzedaz");
            entity.Property(e => e.TwrStanInfoLimit)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_StanInfoLimit");
            entity.Property(e => e.TwrStanInfoMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("Twr_StanInfoMax");
            entity.Property(e => e.TwrStanInfoProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 0)")
                .HasColumnName("Twr_StanInfoProcent");
            entity.Property(e => e.TwrStawkaCukierStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Twr_StawkaCukierStala");
            entity.Property(e => e.TwrStawkaCukierZmienna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Twr_StawkaCukierZmienna");
            entity.Property(e => e.TwrStawkaKgo)
                .HasDefaultValue(0)
                .HasColumnName("Twr_StawkaKGO");
            entity.Property(e => e.TwrStawkaKofeina)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Twr_StawkaKofeina");
            entity.Property(e => e.TwrStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_StawkaPod");
            entity.Property(e => e.TwrStawkaPodSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_StawkaPodSpr");
            entity.Property(e => e.TwrSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Sww");
            entity.Property(e => e.TwrTechniczna1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Techniczna1");
            entity.Property(e => e.TwrTechniczna2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Techniczna2");
            entity.Property(e => e.TwrTechniczna3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Techniczna3");
            entity.Property(e => e.TwrTechniczna4)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Techniczna4");
            entity.Property(e => e.TwrTechnicznaDec1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("Twr_TechnicznaDec1");
            entity.Property(e => e.TwrTerminW)
                .HasDefaultValue((short)0)
                .HasColumnName("Twr_TerminW");
            entity.Property(e => e.TwrTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("Twr_TerminZwrotu");
            entity.Property(e => e.TwrTwZodNajwiekszego)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_TwZOdNajwiekszego");
            entity.Property(e => e.TwrTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Typ");
            entity.Property(e => e.TwrUbytek)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_Ubytek");
            entity.Property(e => e.TwrUpust)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Upust");
            entity.Property(e => e.TwrUpustData)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_UpustData");
            entity.Property(e => e.TwrUpustDataDo)
                .HasDefaultValue(0)
                .HasColumnName("Twr_UpustDataDo");
            entity.Property(e => e.TwrUpustDataOd)
                .HasDefaultValue(0)
                .HasColumnName("Twr_UpustDataOd");
            entity.Property(e => e.TwrUpustGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_UpustGodz");
            entity.Property(e => e.TwrUpustGodzDo)
                .HasDefaultValue(0)
                .HasColumnName("Twr_UpustGodzDo");
            entity.Property(e => e.TwrUpustGodzOd)
                .HasDefaultValue(0)
                .HasColumnName("Twr_UpustGodzOd");
            entity.Property(e => e.TwrUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_URL");
            entity.Property(e => e.TwrWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("Twr_Waga");
            entity.Property(e => e.TwrWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("Twr_WagaBrutto");
            entity.Property(e => e.TwrWartosc1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Wartosc1");
            entity.Property(e => e.TwrWartosc2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Wartosc2");
            entity.Property(e => e.TwrWartosc3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Wartosc3");
            entity.Property(e => e.TwrWarunek)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_Warunek");
            entity.Property(e => e.TwrWcenniku)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_WCenniku");
            entity.Property(e => e.TwrWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_WJm");
            entity.Property(e => e.TwrWjmBrutto)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_WJmBrutto");
            entity.Property(e => e.TwrWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Wsk");
            entity.Property(e => e.TwrWspFin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("Twr_WspFin");
            entity.Property(e => e.TwrWymJm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Twr_WymJm");
            entity.Property(e => e.TwrWysylaniePartiiMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_WysylaniePartiiMobSpr");
            entity.Property(e => e.TwrZakup)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Zakup");
            entity.Property(e => e.TwrZakupAutoryz)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_ZakupAutoryz");
            entity.Property(e => e.TwrZawartoscCukru)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Twr_ZawartoscCukru");
            entity.Property(e => e.TwrZlom)
                .HasDefaultValue((byte)0)
                .HasColumnName("Twr_Zlom");
            entity.Property(e => e.TwrZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_Zrodlowa");
            entity.Property(e => e.TwrZrodlowaSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Twr_ZrodlowaSpr");
        });

        modelBuilder.Entity<TwrKody>(entity =>
        {
            entity.HasKey(e => e.TwKId).HasName("TwK_Primary");

            entity.ToTable("TwrKody", "CDN", tb =>
                {
                    tb.HasTrigger("TwrKodyEANDlaKnt_InsertUpdateHandler");
                    tb.HasTrigger("TwrKodyEANDlaTwr_DeleteHandler");
                    tb.HasTrigger("TwrKodyEANDlaTwr_InsertUpdateHandler");
                    tb.HasTrigger("TwrKodyEAN_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.TwKTwrNumer, "TwKRodzajTwr");

            entity.HasIndex(e => new { e.TwKKod, e.TwKRodzaj, e.TwKDomyslny, e.TwKJm }, "TwKTwrKod");

            entity.Property(e => e.TwKId).HasColumnName("TwK_Id");
            entity.Property(e => e.TwKCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TwK_CzasModyfikacji");
            entity.Property(e => e.TwKDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwK_Domyslny");
            entity.Property(e => e.TwKJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwK_Jm");
            entity.Property(e => e.TwKKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwK_Kod");
            entity.Property(e => e.TwKOpis)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwK_Opis");
            entity.Property(e => e.TwKPochodzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwK_Pochodzenie");
            entity.Property(e => e.TwKRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwK_Rodzaj");
            entity.Property(e => e.TwKTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwK_TwrNumer");
            entity.Property(e => e.TwKTypKodu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwK_TypKodu");

            entity.HasOne(d => d.TwKTwrNumerNavigation).WithMany(p => p.TwrKodies)
                .HasForeignKey(d => d.TwKTwrNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TwKRodzajTwr");
        });

        modelBuilder.Entity<TwrKodyKnt>(entity =>
        {
            entity.HasKey(e => new { e.TkkKntNumer, e.TkkTwKid, e.TkkKlasaKnt }).HasName("TKK_Primary");

            entity.ToTable("TwrKodyKnt", "CDN", tb => tb.HasTrigger("TwrKodyKntEAN_InsertUpdateHandler"));

            entity.HasIndex(e => e.TkkKntNumer, "TKKKntNumer");

            entity.HasIndex(e => e.TkkTwKid, "TKKTwKId");

            entity.Property(e => e.TkkKntNumer).HasColumnName("TKK_KntNumer");
            entity.Property(e => e.TkkTwKid).HasColumnName("TKK_TwKId");
            entity.Property(e => e.TkkKlasaKnt).HasColumnName("TKK_KlasaKnt");
            entity.Property(e => e.TkkCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TKK_CzasModyfikacji");
            entity.Property(e => e.TkkDomyslny)
                .HasDefaultValue((byte)0)
                .HasColumnName("TKK_Domyslny");

            entity.HasOne(d => d.TkkKntNumerNavigation).WithMany(p => p.TwrKodyKnts)
                .HasForeignKey(d => d.TkkKntNumer)
                .HasConstraintName("FK_TKKKntNumer");

            entity.HasOne(d => d.TkkTwK).WithMany(p => p.TwrKodyKnts)
                .HasForeignKey(d => d.TkkTwKid)
                .HasConstraintName("FK_TKKTwKId");
        });

        modelBuilder.Entity<TwrLinki>(entity =>
        {
            entity.HasKey(e => new { e.TwLGidtyp, e.TwLGidnumer, e.TwLGrOtyp, e.TwLGrOnumer }).HasName("TwL_Primary");

            entity.ToTable("TwrLinki", "CDN", tb => tb.HasTrigger("TwrLinki_InsertUpdateKategoriaBI"));

            entity.HasIndex(e => new { e.TwLGrOnumer, e.TwLGrOtyp }, "TwlGro");

            entity.Property(e => e.TwLGidtyp).HasColumnName("TwL_GIDTyp");
            entity.Property(e => e.TwLGidnumer).HasColumnName("TwL_GIDNumer");
            entity.Property(e => e.TwLGrOtyp).HasColumnName("TwL_GrOTyp");
            entity.Property(e => e.TwLGrOnumer).HasColumnName("TwL_GrONumer");
            entity.Property(e => e.TwLGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("TwL_GIDFirma");
            entity.Property(e => e.TwLGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwL_GIDLp");
            entity.Property(e => e.TwLGrOfirma)
                .HasDefaultValue(0)
                .HasColumnName("TwL_GrOFirma");
            entity.Property(e => e.TwLGrOlp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwL_GrOLp");
            entity.Property(e => e.TwLId)
                .ValueGeneratedOnAdd()
                .HasColumnName("TwL_Id");
            entity.Property(e => e.TwLLiczbaPowtorzen)
                .HasDefaultValue((short)0)
                .HasColumnName("TwL_LiczbaPowtorzen");
            entity.Property(e => e.TwLLisc)
                .HasDefaultValue((short)0)
                .HasColumnName("TwL_Lisc");
            entity.Property(e => e.TwLTstampDataMod)
                .HasDefaultValue(0)
                .HasColumnName("TwL_TStampDataMod");
        });

        modelBuilder.Entity<TwrOpisy>(entity =>
        {
            entity.HasKey(e => new { e.TwOTwrNumer, e.TwOTwrLp, e.TwOJezyk }).HasName("TwO_Primary");

            entity.ToTable("TwrOpisy", "CDN", tb => tb.HasTrigger("TwrOpisy_InsertUpdateHandler"));

            entity.Property(e => e.TwOTwrNumer).HasColumnName("TwO_TwrNumer");
            entity.Property(e => e.TwOTwrLp).HasColumnName("TwO_TwrLp");
            entity.Property(e => e.TwOJezyk).HasColumnName("TwO_Jezyk");
            entity.Property(e => e.TwOCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TwO_CzasModyfikacji");
            entity.Property(e => e.TwOOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwO_Opis");
            entity.Property(e => e.TwOTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwO_TwrFirma");
            entity.Property(e => e.TwOTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwO_TwrTyp");
            entity.Property(e => e.TwOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwO_Typ");

            entity.HasOne(d => d.TwOTwrNumerNavigation).WithMany(p => p.TwrOpisies)
                .HasForeignKey(d => d.TwOTwrNumer)
                .HasConstraintName("FK_TwOTowar");
        });

        modelBuilder.Entity<TwrParMag>(entity =>
        {
            entity.HasKey(e => e.TpmId).HasName("Tpm_Primary");

            entity.ToTable("TwrParMag", "CDN", tb =>
                {
                    tb.HasTrigger("TwrParMag_InsertUpdateHandler");
                    tb.HasTrigger("TwrParMag_InsertUpdateHandler_Hist");
                });

            entity.HasIndex(e => e.TpmMagNumer, "TpmMag");

            entity.HasIndex(e => new { e.TpmTwrNumer, e.TpmMagNumer }, "TpmTowarMag").IsUnique();

            entity.Property(e => e.TpmId).HasColumnName("Tpm_Id");
            entity.Property(e => e.TpmIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Tpm_IloscMax");
            entity.Property(e => e.TpmIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Tpm_IloscMin");
            entity.Property(e => e.TpmIloscZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Tpm_IloscZam");
            entity.Property(e => e.TpmKategoriaAbcxyz)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tpm_KategoriaABCXYZ");
            entity.Property(e => e.TpmMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_MagFirma");
            entity.Property(e => e.TpmMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_MagLp");
            entity.Property(e => e.TpmMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_MagNumer");
            entity.Property(e => e.TpmMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_MagTyp");
            entity.Property(e => e.TpmMgAid)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_MgAId");
            entity.Property(e => e.TpmMrpEoq)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("Tpm_MrpEoq");
            entity.Property(e => e.TpmOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_OpeFirmaM");
            entity.Property(e => e.TpmOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_OpeFirmaZ");
            entity.Property(e => e.TpmOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_OpeLpM");
            entity.Property(e => e.TpmOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_OpeLpZ");
            entity.Property(e => e.TpmOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_OpeNumerM");
            entity.Property(e => e.TpmOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_OpeNumerZ");
            entity.Property(e => e.TpmOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_OpeTypM");
            entity.Property(e => e.TpmOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_OpeTypZ");
            entity.Property(e => e.TpmPolozenie)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Tpm_Polozenie");
            entity.Property(e => e.TpmRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_RodzajId");
            entity.Property(e => e.TpmTstampM)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_TStampM");
            entity.Property(e => e.TpmTstampZ)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_TStampZ");
            entity.Property(e => e.TpmTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_TwrFirma");
            entity.Property(e => e.TpmTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_TwrLp");
            entity.Property(e => e.TpmTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("Tpm_TwrNumer");
            entity.Property(e => e.TpmTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Tpm_TwrTyp");

            entity.HasOne(d => d.TpmTwrNumerNavigation).WithMany(p => p.TwrParMags)
                .HasForeignKey(d => d.TpmTwrNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TpmTowarMag");
        });

        modelBuilder.Entity<TwrParMagHist>(entity =>
        {
            entity.HasKey(e => e.TpmhId).HasName("TPMH_Primary");

            entity.ToTable("TwrParMagHist", "CDN");

            entity.HasIndex(e => new { e.TpmhTpmid, e.TpmhTstamp }, "TPMHTPMChron").IsUnique();

            entity.Property(e => e.TpmhId).HasColumnName("TPMH_Id");
            entity.Property(e => e.TpmhKategoriaAbcxyz)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPMH_KategoriaABCXYZ");
            entity.Property(e => e.TpmhOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("TPMH_OpeFirma");
            entity.Property(e => e.TpmhOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPMH_OpeLp");
            entity.Property(e => e.TpmhOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("TPMH_OpeNumer");
            entity.Property(e => e.TpmhOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPMH_OpeTyp");
            entity.Property(e => e.TpmhRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("TPMH_RodzajId");
            entity.Property(e => e.TpmhTpmid)
                .HasDefaultValue(0)
                .HasColumnName("TPMH_TPMId");
            entity.Property(e => e.TpmhTstamp)
                .HasDefaultValue(0)
                .HasColumnName("TPMH_TStamp");

            entity.HasOne(d => d.TpmhTpm).WithMany(p => p.TwrParMagHists)
                .HasForeignKey(d => d.TpmhTpmid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TPMHTPMChron");
        });

        modelBuilder.Entity<TwrPartie>(entity =>
        {
            entity.HasKey(e => e.TpaId).HasName("TPa_Primary");

            entity.ToTable("TwrPartie", "CDN", tb =>
                {
                    tb.HasTrigger("TwrPartieAlias_DeleteHandler");
                    tb.HasTrigger("TwrPartie_DataUtworzenia");
                    tb.HasTrigger("TwrPartie_DeleteHandler");
                    tb.HasTrigger("TwrPartie_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.TpaTwrNumer, e.TpaCcknumer, e.TpaCecha, e.TpaEan, e.TpaDataW, e.TpaDstNumer }, "TPaTowar").IsUnique();

            entity.Property(e => e.TpaId).HasColumnName("TPa_Id");
            entity.Property(e => e.TpaCcknumer)
                .HasDefaultValue(0)
                .HasColumnName("TPa_CCKNumer");
            entity.Property(e => e.TpaCcktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPa_CCKTyp");
            entity.Property(e => e.TpaCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPa_Cecha");
            entity.Property(e => e.TpaDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("TPa_DataUtworzenia");
            entity.Property(e => e.TpaDataW)
                .HasDefaultValue(0)
                .HasColumnName("TPa_DataW");
            entity.Property(e => e.TpaDstNumer)
                .HasDefaultValue(0)
                .HasColumnName("TPa_DstNumer");
            entity.Property(e => e.TpaDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPa_DstTyp");
            entity.Property(e => e.TpaEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPa_Ean");
            entity.Property(e => e.TpaTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TPa_TwrNumer");
            entity.Property(e => e.TpaTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPa_TwrTyp");
            entity.Property(e => e.TpaWms)
                .HasDefaultValue(0)
                .HasColumnName("TPa_WMS");
            entity.Property(e => e.TpaZewn)
                .HasDefaultValue(0)
                .HasColumnName("TPa_Zewn");
        });

        modelBuilder.Entity<TwrPodm>(entity =>
        {
            entity.HasKey(e => e.TwPId).HasName("TwP_Primary");

            entity.ToTable("TwrPodm", "CDN", tb =>
                {
                    tb.HasTrigger("PowiazaneTowaryUpdate_PicoUsuniete");
                    tb.HasTrigger("TwrPodmPozycjaNumeruj");
                    tb.HasTrigger("TwrPodmPozycjaRenumeruj");
                    tb.HasTrigger("TwrPodm_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.TwPWarstwa, e.TwPTwrNumer, e.TwPTwrLp, e.TwPZamNumer, e.TwPDokRodzaj, e.TwPRodzajPowiazania }, "TwPTowar").IsUnique();

            entity.HasIndex(e => new { e.TwPZamNumer, e.TwPWarstwa }, "TwPZamiennik");

            entity.Property(e => e.TwPId).HasColumnName("TwP_Id");
            entity.Property(e => e.TwPCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("TwP_CzasModyfikacji");
            entity.Property(e => e.TwPDokRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwP_DokRodzaj");
            entity.Property(e => e.TwPPozycja)
                .HasDefaultValue((short)1)
                .HasColumnName("TwP_Pozycja");
            entity.Property(e => e.TwPPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwP_PrzeliczL");
            entity.Property(e => e.TwPPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwP_PrzeliczM");
            entity.Property(e => e.TwPRodzajPowiazania)
                .HasDefaultValue(0)
                .HasColumnName("TwP_RodzajPowiazania");
            entity.Property(e => e.TwPTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwP_TwrFirma");
            entity.Property(e => e.TwPTwrLp).HasColumnName("TwP_TwrLp");
            entity.Property(e => e.TwPTwrNumer).HasColumnName("TwP_TwrNumer");
            entity.Property(e => e.TwPTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwP_TwrTyp");
            entity.Property(e => e.TwPWarstwa).HasColumnName("TwP_Warstwa");
            entity.Property(e => e.TwPZamFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwP_ZamFirma");
            entity.Property(e => e.TwPZamLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwP_ZamLp");
            entity.Property(e => e.TwPZamNumer).HasColumnName("TwP_ZamNumer");
            entity.Property(e => e.TwPZamTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwP_ZamTyp");
        });

        modelBuilder.Entity<TwrPromocje>(entity =>
        {
            entity.HasKey(e => e.TprId).HasName("TPR_Primary");

            entity.ToTable("TwrPromocje", "CDN", tb =>
                {
                    tb.HasTrigger("TwrPromocjeSprawdzUnikalnosc");
                    tb.HasTrigger("TwrPromocje_DeleteHandler");
                    tb.HasTrigger("TwrPromocje_DeleteHandlerTwG");
                    tb.HasTrigger("TwrPromocje_InsertHandlerTwG");
                    tb.HasTrigger("TwrPromocje_InsertUpdateHandler");
                    tb.HasTrigger("TwrPromocje_LastMod_delete");
                    tb.HasTrigger("TwrPromocje_UpdateHandlerTwG");
                });

            entity.HasIndex(e => new { e.TprPrmId, e.TprId, e.TprTwrTyp, e.TprTwrNumer, e.TprZstId }, "TPRPrmTwr");

            entity.HasIndex(e => new { e.TprPrmId, e.TprZstId, e.TprLp }, "TprLp").IsUnique();

            entity.HasIndex(e => e.TprPrmId, "TprPrm");

            entity.HasIndex(e => new { e.TprTwrTyp, e.TprTwrNumer, e.TprTwgTyp, e.TprTwgNumer, e.TprTyp, e.TprZstId, e.TprProg, e.TprPrmId }, "TprTowar");

            entity.Property(e => e.TprId).HasColumnName("TPR_Id");
            entity.Property(e => e.TprAktywny)
                .HasDefaultValue((byte)1)
                .HasColumnName("TPR_Aktywny");
            entity.Property(e => e.TprFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPR_FlagaNB");
            entity.Property(e => e.TprGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("TPR_GUID");
            entity.Property(e => e.TprLastMod)
                .HasDefaultValue(0)
                .HasColumnName("TPR_LastMod");
            entity.Property(e => e.TprLimitRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("TPR_LimitRodzaj");
            entity.Property(e => e.TprLimitTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TPR_LimitTyp");
            entity.Property(e => e.TprLimitWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TPR_LimitWartosc");
            entity.Property(e => e.TprLp)
                .HasDefaultValue(0)
                .HasColumnName("TPR_LP");
            entity.Property(e => e.TprNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPR_Notatki");
            entity.Property(e => e.TprOpeMod)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPR_OpeMod");
            entity.Property(e => e.TprPrmId)
                .HasDefaultValue(0)
                .HasColumnName("TPR_PrmId");
            entity.Property(e => e.TprProg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TPR_Prog");
            entity.Property(e => e.TprProgTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TPR_ProgTyp");
            entity.Property(e => e.TprProgWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TPR_ProgWartosc");
            entity.Property(e => e.TprRodzajCeny)
                .HasDefaultValue(0)
                .HasColumnName("TPR_RodzajCeny");
            entity.Property(e => e.TprTwgFirma)
                .HasDefaultValue(0)
                .HasColumnName("TPR_TwgFirma");
            entity.Property(e => e.TprTwgLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPR_TwgLp");
            entity.Property(e => e.TprTwgNumer)
                .HasDefaultValue(0)
                .HasColumnName("TPR_TwgNumer");
            entity.Property(e => e.TprTwgTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPR_TwgTyp");
            entity.Property(e => e.TprTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TPR_TwrFirma");
            entity.Property(e => e.TprTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPR_TwrLp");
            entity.Property(e => e.TprTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TPR_TwrNumer");
            entity.Property(e => e.TprTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TPR_TwrTyp");
            entity.Property(e => e.TprTyp)
                .HasDefaultValue(0)
                .HasColumnName("TPR_Typ");
            entity.Property(e => e.TprWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TPR_Waluta");
            entity.Property(e => e.TprWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TPR_Wartosc");
            entity.Property(e => e.TprWymagany)
                .HasDefaultValue((byte)0)
                .HasColumnName("TPR_Wymagany");
            entity.Property(e => e.TprZstId)
                .HasDefaultValue(0)
                .HasColumnName("TPR_ZstID");

            entity.HasOne(d => d.TprPrm).WithMany(p => p.TwrPromocjes)
                .HasForeignKey(d => d.TprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TprPrm");

            entity.HasMany(d => d.DprDstNumers).WithMany(p => p.DprTprs)
                .UsingEntity<Dictionary<string, object>>(
                    "DstPromocje",
                    r => r.HasOne<Dostawy>().WithMany()
                        .HasForeignKey("DprDstNumer")
                        .HasConstraintName("FK_DPRDostawy"),
                    l => l.HasOne<TwrPromocje>().WithMany()
                        .HasForeignKey("DprTprid")
                        .HasConstraintName("FK_DPRPromocje"),
                    j =>
                    {
                        j.HasKey("DprTprid", "DprDstNumer").HasName("DPR_Primary");
                        j.ToTable("DstPromocje", "CDN");
                        j.HasIndex(new[] { "DprDstNumer" }, "DPRDostawy");
                        j.HasIndex(new[] { "DprTprid" }, "DPRPromocje");
                        j.IndexerProperty<int>("DprTprid").HasColumnName("DPR_TPRID");
                        j.IndexerProperty<int>("DprDstNumer").HasColumnName("DPR_DstNumer");
                    });
        });

        modelBuilder.Entity<TwrSchematyKaucjiElem>(entity =>
        {
            entity.HasKey(e => new { e.SkeSknid, e.SkeLp }).HasName("SKE_Primary");

            entity.ToTable("TwrSchematyKaucjiElem", "CDN");

            entity.HasIndex(e => new { e.SkeSknid, e.SkeTwrNumer }, "SkESchematTowar").IsUnique();

            entity.Property(e => e.SkeSknid).HasColumnName("SKE_SKNId");
            entity.Property(e => e.SkeLp).HasColumnName("SKE_Lp");
            entity.Property(e => e.SkeIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SKE_Ilosc");
            entity.Property(e => e.SkeProg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("SKE_Prog");
            entity.Property(e => e.SkeTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("SKE_TwrNumer");

            entity.HasOne(d => d.SkeSkn).WithMany(p => p.TwrSchematyKaucjiElems)
                .HasForeignKey(d => d.SkeSknid)
                .HasConstraintName("FK_SkEPrimary");

            entity.HasOne(d => d.SkeTwrNumerNavigation).WithMany(p => p.TwrSchematyKaucjiElems)
                .HasForeignKey(d => d.SkeTwrNumer)
                .HasConstraintName("FK_SkETowar");
        });

        modelBuilder.Entity<TwrSchematyKaucjiNag>(entity =>
        {
            entity.HasKey(e => e.SknId).HasName("SKN_Primary");

            entity.ToTable("TwrSchematyKaucjiNag", "CDN", tb => tb.HasTrigger("TwrSchematyKaucjiNag_DeleteHandler"));

            entity.HasIndex(e => e.SknKod, "SkNKod").IsUnique();

            entity.Property(e => e.SknId).HasColumnName("SKN_Id");
            entity.Property(e => e.SknArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("SKN_Archiwalny");
            entity.Property(e => e.SknKod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKN_Kod");
            entity.Property(e => e.SknLastMod)
                .HasDefaultValue(0)
                .HasColumnName("SKN_LastMod");
            entity.Property(e => e.SknNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SKN_Nazwa");
            entity.Property(e => e.SknOddzialowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("SKN_Oddzialowy");
        });

        modelBuilder.Entity<TwrStany>(entity =>
        {
            entity.HasKey(e => new { e.TwsData, e.TwsTwrTyp, e.TwsTwrNumer, e.TwsMagTyp, e.TwsMagNumer }).HasName("TWS_Primary");

            entity.ToTable("TwrStany", "CDN", tb => tb.HasTrigger("TwrStany_InsertUpdateHandler"));

            entity.HasIndex(e => e.TwsMagNumer, "TWSMagazyn");

            entity.Property(e => e.TwsData).HasColumnName("TWS_Data");
            entity.Property(e => e.TwsTwrTyp).HasColumnName("TWS_TwrTyp");
            entity.Property(e => e.TwsTwrNumer).HasColumnName("TWS_TwrNumer");
            entity.Property(e => e.TwsMagTyp).HasColumnName("TWS_MagTyp");
            entity.Property(e => e.TwsMagNumer).HasColumnName("TWS_MagNumer");
            entity.Property(e => e.TwsIlMag)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("TWS_IlMag");
            entity.Property(e => e.TwsIlSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("TWS_IlSpr");
            entity.Property(e => e.TwsKsiegowaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TWS_KsiegowaNetto");
            entity.Property(e => e.TwsMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("TWS_MagFirma");
            entity.Property(e => e.TwsMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWS_MagLp");
            entity.Property(e => e.TwsRzeczywistaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TWS_RzeczywistaNetto");
            entity.Property(e => e.TwsTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TWS_TwrFirma");
            entity.Property(e => e.TwsTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TWS_TwrLp");
        });

        modelBuilder.Entity<TwrStanyBufor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TwrStanyBufor", "CDN", tb => tb.HasTrigger("TwrStanyBufor_InsertUpdateHandler"));

            entity.HasIndex(e => e.TsbMagNumer, "TSBMagazyn");

            entity.HasIndex(e => new { e.TsbData, e.TsbTwrTyp, e.TsbTwrNumer, e.TsbMagTyp, e.TsbMagNumer }, "TsbDataTwrMag");

            entity.Property(e => e.TsbData)
                .HasDefaultValue(0)
                .HasColumnName("TSB_Data");
            entity.Property(e => e.TsbIlMag)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("TSB_IlMag");
            entity.Property(e => e.TsbIlSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("TSB_IlSpr");
            entity.Property(e => e.TsbKsiegowaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TSB_KsiegowaNetto");
            entity.Property(e => e.TsbMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("TSB_MagFirma");
            entity.Property(e => e.TsbMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TSB_MagLp");
            entity.Property(e => e.TsbMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("TSB_MagNumer");
            entity.Property(e => e.TsbMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TSB_MagTyp");
            entity.Property(e => e.TsbRzeczywistaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TSB_RzeczywistaNetto");
            entity.Property(e => e.TsbTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TSB_TwrFirma");
            entity.Property(e => e.TsbTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TSB_TwrLp");
            entity.Property(e => e.TsbTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TSB_TwrNumer");
            entity.Property(e => e.TsbTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TSB_TwrTyp");
        });

        modelBuilder.Entity<TwrStawkiVat>(entity =>
        {
            entity.HasKey(e => e.TwVId).HasName("TwV_Primary");

            entity.ToTable("TwrStawkiVAT", "CDN", tb => tb.HasTrigger("TwrStawkiVAT_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.TwVTwrNumer, e.TwVTwrTyp, e.TwVKraj }, "TwVKraj").IsUnique();

            entity.HasIndex(e => new { e.TwVTwrNumer, e.TwVTwrTyp }, "TwVTwr");

            entity.Property(e => e.TwVId).HasColumnName("TwV_Id");
            entity.Property(e => e.TwVFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwV_FlagaVat");
            entity.Property(e => e.TwVGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwV_GrupaPod");
            entity.Property(e => e.TwVKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwV_Kraj");
            entity.Property(e => e.TwVStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwV_StawkaPod");
            entity.Property(e => e.TwVTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwV_TwrFirma");
            entity.Property(e => e.TwVTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwV_TwrLp");
            entity.Property(e => e.TwVTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwV_TwrNumer");
            entity.Property(e => e.TwVTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwV_TwrTyp");
            entity.Property(e => e.TwVZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwV_Zrodlowa");
        });

        modelBuilder.Entity<TwrUpusty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TwrUpusty", "CDN");

            entity.Property(e => e.TwUProg)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwU_PRog");
            entity.Property(e => e.TwUTwrFirma).HasColumnName("TwU_TwrFirma");
            entity.Property(e => e.TwUTwrLp).HasColumnName("TwU_TwrLp");
            entity.Property(e => e.TwUTwrNumer).HasColumnName("TwU_TwrNumer");
            entity.Property(e => e.TwUTwrTyp).HasColumnName("TwU_TwrTyp");
            entity.Property(e => e.TwUUpust)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwU_Upust");
        });

        modelBuilder.Entity<TwrWzCeny>(entity =>
        {
            entity.HasKey(e => new { e.WtcGrpTyp, e.WtcGrpNumer, e.WtcGrpLp }).HasName("WTC_Primary");

            entity.ToTable("TwrWzCeny", "CDN", tb => tb.HasTrigger("TwrWzCeny_DeleteHandler"));

            entity.Property(e => e.WtcGrpTyp).HasColumnName("WTC_GrpTyp");
            entity.Property(e => e.WtcGrpNumer).HasColumnName("WTC_GrpNumer");
            entity.Property(e => e.WtcGrpLp).HasColumnName("WTC_GrpLp");
            entity.Property(e => e.WtcAktualizacja)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTC_Aktualizacja");
            entity.Property(e => e.WtcGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTC_GrpFirma");
            entity.Property(e => e.WtcKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTC_KntFirma");
            entity.Property(e => e.WtcKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WTC_KntLp");
            entity.Property(e => e.WtcKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("WTC_KntNumer");
            entity.Property(e => e.WtcKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WTC_KntTyp");
            entity.Property(e => e.WtcMarza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("WTC_Marza");
            entity.Property(e => e.WtcNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("WTC_NrKursu");
            entity.Property(e => e.WtcOffset)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("WTC_Offset");
            entity.Property(e => e.WtcPriorytet)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTC_Priorytet");
            entity.Property(e => e.WtcRodzajPodstawy)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTC_RodzajPodstawy");
            entity.Property(e => e.WtcWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WTC_Waluta");
            entity.Property(e => e.WtcZaok)
                .HasDefaultValueSql("((0.0001))")
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("WTC_Zaok");

            entity.HasOne(d => d.TwrWzorce).WithMany(p => p.TwrWzCenies)
                .HasForeignKey(d => new { d.WtcGrpTyp, d.WtcGrpNumer })
                .HasConstraintName("FK_WTCGrupa");
        });

        modelBuilder.Entity<TwrWzDst>(entity =>
        {
            entity.HasKey(e => new { e.WtdGrpTyp, e.WtdGrpNumer, e.WtdKlasaKnt, e.WtdGrpLp }).HasName("WTD_Primary");

            entity.ToTable("TwrWzDst", "CDN", tb =>
                {
                    tb.HasTrigger("TwrWzDst_DeleteHandler");
                    tb.HasTrigger("TwrWzDst_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.WtdKntTyp, e.WtdKntNumer, e.WtdGrpTyp, e.WtdGrpNumer, e.WtdKlasaKnt }, "WTDKontrah").IsUnique();

            entity.Property(e => e.WtdGrpTyp).HasColumnName("WTD_GrpTyp");
            entity.Property(e => e.WtdGrpNumer).HasColumnName("WTD_GrpNumer");
            entity.Property(e => e.WtdKlasaKnt).HasColumnName("WTD_KlasaKnt");
            entity.Property(e => e.WtdGrpLp).HasColumnName("WTD_GrpLp");
            entity.Property(e => e.WtdCzas)
                .HasDefaultValue(0)
                .HasColumnName("WTD_Czas");
            entity.Property(e => e.WtdDataAkt)
                .HasDefaultValue(0)
                .HasColumnName("WTD_DataAkt");
            entity.Property(e => e.WtdGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTD_GrpFirma");
            entity.Property(e => e.WtdIloscZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("WTD_IloscZam");
            entity.Property(e => e.WtdKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTD_KntFirma");
            entity.Property(e => e.WtdKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WTD_KntLp");
            entity.Property(e => e.WtdKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("WTD_KntNumer");
            entity.Property(e => e.WtdKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WTD_KntTyp");
            entity.Property(e => e.WtdMrpEoq)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("WTD_MrpEoq");
            entity.Property(e => e.WtdOplataSpozZakup)
                .HasDefaultValue(0)
                .HasColumnName("WTD_OplataSpozZakup");

            entity.HasOne(d => d.TwrWzorce).WithMany(p => p.TwrWzDsts)
                .HasForeignKey(d => new { d.WtdGrpTyp, d.WtdGrpNumer })
                .HasConstraintName("FK_WTDGrupa");
        });

        modelBuilder.Entity<TwrWzJm>(entity =>
        {
            entity.HasKey(e => new { e.WtjGrpTyp, e.WtjGrpNumer, e.WtjGrpLp }).HasName("WTJ_Primary");

            entity.ToTable("TwrWzJm", "CDN", tb => tb.HasTrigger("TwrWzJm_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.WtjKcaTyp, e.WtjKcaNumer }, "WTJKaucja");

            entity.Property(e => e.WtjGrpTyp).HasColumnName("WTJ_GrpTyp");
            entity.Property(e => e.WtjGrpNumer).HasColumnName("WTJ_GrpNumer");
            entity.Property(e => e.WtjGrpLp).HasColumnName("WTJ_GrpLp");
            entity.Property(e => e.WtjCalkowita)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTJ_Calkowita");
            entity.Property(e => e.WtjDzielWzwm)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTJ_DzielWZWM");
            entity.Property(e => e.WtjGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTJ_GrpFirma");
            entity.Property(e => e.WtjISklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTJ_iSklep");
            entity.Property(e => e.WtjJednostkaLog)
                .HasDefaultValue(0)
                .HasColumnName("WTJ_JednostkaLog");
            entity.Property(e => e.WtjJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTJ_JmFormat");
            entity.Property(e => e.WtjJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WTJ_JmZ");
            entity.Property(e => e.WtjKcaFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTJ_KcaFirma");
            entity.Property(e => e.WtjKcaLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WTJ_KcaLp");
            entity.Property(e => e.WtjKcaNumer)
                .HasDefaultValue(0)
                .HasColumnName("WTJ_KcaNumer");
            entity.Property(e => e.WtjKcaTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WTJ_KcaTyp");
            entity.Property(e => e.WtjMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTJ_MobSpr");
            entity.Property(e => e.WtjObowiazek)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTJ_Obowiazek");
            entity.Property(e => e.WtjProg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("WTJ_Prog");
            entity.Property(e => e.WtjPrzeliczL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("WTJ_PrzeliczL");
            entity.Property(e => e.WtjPrzeliczM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("WTJ_PrzeliczM");
            entity.Property(e => e.WtjPulpitKnt)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTJ_PulpitKnt");
            entity.Property(e => e.WtjTypJm)
                .HasDefaultValue((byte)1)
                .HasColumnName("WTJ_TypJm");

            entity.HasOne(d => d.TwrWzorce).WithMany(p => p.TwrWzJms)
                .HasForeignKey(d => new { d.WtjGrpTyp, d.WtjGrpNumer })
                .HasConstraintName("FK_WTJGrupa");
        });

        modelBuilder.Entity<TwrWzOpisy>(entity =>
        {
            entity.HasKey(e => new { e.WtoGrpTyp, e.WtoGrpNumer, e.WtoGrpLp, e.WtoJezyk }).HasName("WTO_Primary");

            entity.ToTable("TwrWzOpisy", "CDN", tb => tb.HasTrigger("TwrWzOpisy_InsertUpdateHandler"));

            entity.Property(e => e.WtoGrpTyp).HasColumnName("WTO_GrpTyp");
            entity.Property(e => e.WtoGrpNumer).HasColumnName("WTO_GrpNumer");
            entity.Property(e => e.WtoGrpLp).HasColumnName("WTO_GrpLp");
            entity.Property(e => e.WtoJezyk).HasColumnName("WTO_Jezyk");
            entity.Property(e => e.WtoGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTO_GrpFirma");
            entity.Property(e => e.WtoOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WTO_Opis");
            entity.Property(e => e.WtoTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("WTO_Typ");

            entity.HasOne(d => d.TwrWzorce).WithMany(p => p.TwrWzOpisies)
                .HasForeignKey(d => new { d.WtoGrpTyp, d.WtoGrpNumer })
                .HasConstraintName("FK_WTOGrupa");
        });

        modelBuilder.Entity<TwrWzUpusty>(entity =>
        {
            entity.HasKey(e => new { e.WtuGrpTyp, e.WtuGrpNumer, e.WtuProg }).HasName("WTU_Primary");

            entity.ToTable("TwrWzUpusty", "CDN");

            entity.Property(e => e.WtuGrpTyp).HasColumnName("WTU_GrpTyp");
            entity.Property(e => e.WtuGrpNumer).HasColumnName("WTU_GrpNumer");
            entity.Property(e => e.WtuProg)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WTU_Prog");
            entity.Property(e => e.WtuGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("WTU_GrpFirma");
            entity.Property(e => e.WtuGrpLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WTU_GrpLp");
            entity.Property(e => e.WtuUpust)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WTU_Upust");

            entity.HasOne(d => d.TwrWzorce).WithMany(p => p.TwrWzUpusties)
                .HasForeignKey(d => new { d.WtuGrpTyp, d.WtuGrpNumer })
                .HasConstraintName("FK_WTUGrupa");
        });

        modelBuilder.Entity<TwrWzorce>(entity =>
        {
            entity.HasKey(e => new { e.TwWGrpTyp, e.TwWGrpNumer }).HasName("TwW_Primary");

            entity.ToTable("TwrWzorce", "CDN", tb =>
                {
                    tb.HasTrigger("TwrWzorce_DeleteHandler");
                    tb.HasTrigger("TwrWzorce_InsertUpdateHandler");
                });

            entity.Property(e => e.TwWGrpTyp).HasColumnName("TwW_GrpTyp");
            entity.Property(e => e.TwWGrpNumer).HasColumnName("TwW_GrpNumer");
            entity.Property(e => e.TwWAkcyza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwW_Akcyza");
            entity.Property(e => e.TwWAnalizaAbcxyz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_AnalizaABCXYZ");
            entity.Property(e => e.TwWArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Archiwalny");
            entity.Property(e => e.TwWAtrybut1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Atrybut1");
            entity.Property(e => e.TwWAtrybut2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Atrybut2");
            entity.Property(e => e.TwWAtrybut3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Atrybut3");
            entity.Property(e => e.TwWAutoZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_AutoZam");
            entity.Property(e => e.TwWBezRabatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_BezRabatu");
            entity.Property(e => e.TwWCckfirma)
                .HasDefaultValue(0)
                .HasColumnName("TwW_CCKFirma");
            entity.Property(e => e.TwWCcklp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_CCKLp");
            entity.Property(e => e.TwWCcknumer)
                .HasDefaultValue(0)
                .HasColumnName("TwW_CCKNumer");
            entity.Property(e => e.TwWCcktyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_CCKTyp");
            entity.Property(e => e.TwWCel)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Cel");
            entity.Property(e => e.TwWCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_CenaSpr");
            entity.Property(e => e.TwWCertyfikat)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Certyfikat");
            entity.Property(e => e.TwWClo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwW_Clo");
            entity.Property(e => e.TwWCzasDst)
                .HasDefaultValue(0)
                .HasColumnName("TwW_CzasDst");
            entity.Property(e => e.TwWCzasWykonania)
                .HasDefaultValue(0)
                .HasColumnName("TwW_CzasWykonania");
            entity.Property(e => e.TwWCzasWykonaniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_CzasWykonaniaJedn");
            entity.Property(e => e.TwWDodEleZez)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_DodEleZez");
            entity.Property(e => e.TwWDostawaEan)
                .HasDefaultValue((byte)1)
                .HasColumnName("TwW_DostawaEAN");
            entity.Property(e => e.TwWDstDomyslny)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_DstDomyslny");
            entity.Property(e => e.TwWEdycjaNazwy)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_EdycjaNazwy");
            entity.Property(e => e.TwWEsklep)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_ESklep");
            entity.Property(e => e.TwWFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_FlagaVat");
            entity.Property(e => e.TwWFlagaVatSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_FlagaVatSpr");
            entity.Property(e => e.TwWFormat1)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Format1");
            entity.Property(e => e.TwWFormat2)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Format2");
            entity.Property(e => e.TwWFormat3)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Format3");
            entity.Property(e => e.TwWGrpFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwW_GrpFirma");
            entity.Property(e => e.TwWGrpLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_GrpLp");
            entity.Property(e => e.TwWGrupaJpk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_GrupaJpk");
            entity.Property(e => e.TwWGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_GrupaPod");
            entity.Property(e => e.TwWGrupaPodSpr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_GrupaPodSpr");
            entity.Property(e => e.TwWGrupaWyposazenia)
                .HasDefaultValue(0)
                .HasColumnName("TwW_GrupaWyposazenia");
            entity.Property(e => e.TwWIloscAzam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TwW_IloscAZam");
            entity.Property(e => e.TwWIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TwW_IloscMax");
            entity.Property(e => e.TwWIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TwW_IloscMin");
            entity.Property(e => e.TwWIloscZam)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TwW_IloscZam");
            entity.Property(e => e.TwWJm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Jm");
            entity.Property(e => e.TwWJmDomyslna)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_JmDomyslna");
            entity.Property(e => e.TwWJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_JmFormat");
            entity.Property(e => e.TwWJmblokujZmiane)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_JMBlokujZmiane");
            entity.Property(e => e.TwWJmcalkowita)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_JMCalkowita");
            entity.Property(e => e.TwWJmdomyslnaZak)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_JMDomyslnaZak");
            entity.Property(e => e.TwWJmdopelnianiaMobSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_JMDopelnianiaMobSpr");
            entity.Property(e => e.TwWJmiSklep)
                .HasDefaultValue(0)
                .HasColumnName("TwW_JMiSklep");
            entity.Property(e => e.TwWJmmobSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_JMMobSpr");
            entity.Property(e => e.TwWJmpulpitKnt)
                .HasDefaultValue(0)
                .HasColumnName("TwW_JMPulpitKnt");
            entity.Property(e => e.TwWKatalog)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Katalog");
            entity.Property(e => e.TwWKaucja)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Kaucja");
            entity.Property(e => e.TwWKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Kod");
            entity.Property(e => e.TwWKodFormat)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_KodFormat");
            entity.Property(e => e.TwWKodOdpadu)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_KodOdpadu");
            entity.Property(e => e.TwWKoncesja)
                .HasDefaultValue(0)
                .HasColumnName("TwW_Koncesja");
            entity.Property(e => e.TwWKontaktJc)
                .HasDefaultValue((byte)1)
                .HasColumnName("TwW_KontaktJC");
            entity.Property(e => e.TwWKontaktTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_KontaktTyp");
            entity.Property(e => e.TwWKontaktZa)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_KontaktZa");
            entity.Property(e => e.TwWKonto1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Konto1");
            entity.Property(e => e.TwWKonto2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Konto2");
            entity.Property(e => e.TwWKonto3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Konto3");
            entity.Property(e => e.TwWKosztUslugi)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwW_KosztUslugi");
            entity.Property(e => e.TwWKosztUtyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_KosztUTyp");
            entity.Property(e => e.TwWKrajPoch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_KrajPoch");
            entity.Property(e => e.TwWKreatorId)
                .HasDefaultValue(0)
                .HasColumnName("TwW_KreatorId");
            entity.Property(e => e.TwWMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwW_MagFirma");
            entity.Property(e => e.TwWMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_MagLp");
            entity.Property(e => e.TwWMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwW_MagNumer");
            entity.Property(e => e.TwWMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_MagTyp");
            entity.Property(e => e.TwWMarkaId)
                .HasDefaultValue(0)
                .HasColumnName("TwW_MarkaId");
            entity.Property(e => e.TwWMarzaMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwW_MarzaMin");
            entity.Property(e => e.TwWMobSpr)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_MobSpr");
            entity.Property(e => e.TwWMpp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_MPP");
            entity.Property(e => e.TwWMrpEoq)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("TwW_MrpEoq");
            entity.Property(e => e.TwWNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Nazwa");
            entity.Property(e => e.TwWNazwa1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Nazwa1");
            entity.Property(e => e.TwWNotowania)
                .HasDefaultValue(0)
                .HasColumnName("TwW_Notowania");
            entity.Property(e => e.TwWObcy)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Obcy");
            entity.Property(e => e.TwWObjetoscL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwW_ObjetoscL");
            entity.Property(e => e.TwWObjetoscM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("TwW_ObjetoscM");
            entity.Property(e => e.TwWObowPodSprId)
                .HasDefaultValue(0)
                .HasColumnName("TwW_ObowPodSprId");
            entity.Property(e => e.TwWObowPodZakId)
                .HasDefaultValue(0)
                .HasColumnName("TwW_ObowPodZakId");
            entity.Property(e => e.TwWOkresGwarancji)
                .HasDefaultValue(0)
                .HasColumnName("TwW_OkresGwarancji");
            entity.Property(e => e.TwWOkresowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Okresowy");
            entity.Property(e => e.TwWOpisUrzadzenia)
                .HasMaxLength(511)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_OpisUrzadzenia");
            entity.Property(e => e.TwWOplataSpozDostawyFlaga)
                .HasDefaultValue(0)
                .HasColumnName("TwW_OplataSpozDostawyFlaga");
            entity.Property(e => e.TwWOplataSpozDostawyTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_OplataSpozDostawyTyp");
            entity.Property(e => e.TwWOplataSpozFlaga)
                .HasDefaultValue(0)
                .HasColumnName("TwW_OplataSpozFlaga");
            entity.Property(e => e.TwWOplataSpozNrPartii)
                .HasDefaultValue(0)
                .HasColumnName("TwW_OplataSpozNrPartii");
            entity.Property(e => e.TwWOplataSpozNrPartiiAtrybut)
                .HasDefaultValue(0)
                .HasColumnName("TwW_OplataSpozNrPartiiAtrybut");
            entity.Property(e => e.TwWOplataSpozPrzeliczL)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwW_OplataSpozPrzeliczL");
            entity.Property(e => e.TwWOplataSpozPrzeliczM)
                .HasDefaultValue(1m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("TwW_OplataSpozPrzeliczM");
            entity.Property(e => e.TwWPartiaDataW)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_PartiaDataW");
            entity.Property(e => e.TwWPartiaDostawa)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_PartiaDostawa");
            entity.Property(e => e.TwWPcn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_PCN");
            entity.Property(e => e.TwWPiadostepnoscFlaga)
                .HasDefaultValue(0)
                .HasColumnName("TwW_PIADostepnoscFlaga");
            entity.Property(e => e.TwWPlm)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_PLM");
            entity.Property(e => e.TwWPobierzWgCech)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_PobierzWgCech");
            entity.Property(e => e.TwWPodatekImp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwW_PodatekImp");
            entity.Property(e => e.TwWPolozenie)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Polozenie");
            entity.Property(e => e.TwWPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwW_PrcFirma");
            entity.Property(e => e.TwWPrcLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_PrcLp");
            entity.Property(e => e.TwWPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwW_PrcNumer");
            entity.Property(e => e.TwWPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_PrcTyp");
            entity.Property(e => e.TwWPrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwW_PrdFirma");
            entity.Property(e => e.TwWPrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_PrdLp");
            entity.Property(e => e.TwWPrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwW_PrdNumer");
            entity.Property(e => e.TwWPrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_PrdTyp");
            entity.Property(e => e.TwWProg)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Prog");
            entity.Property(e => e.TwWPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("TwW_Punkty");
            entity.Property(e => e.TwWRejWyposazenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_RejWyposazenia");
            entity.Property(e => e.TwWRejestrujUrzadzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_RejestrujUrzadzenie");
            entity.Property(e => e.TwWRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("TwW_RodzajId");
            entity.Property(e => e.TwWRodzajKosztu)
                .HasDefaultValue(0)
                .HasColumnName("TwW_RodzajKosztu");
            entity.Property(e => e.TwWRodzajUrzadzenia)
                .HasDefaultValue(0)
                .HasColumnName("TwW_RodzajUrzadzenia");
            entity.Property(e => e.TwWRozliczMag)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_RozliczMag");
            entity.Property(e => e.TwWSknid)
                .HasDefaultValue(0)
                .HasColumnName("TwW_SKNId");
            entity.Property(e => e.TwWSprzedaz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Sprzedaz");
            entity.Property(e => e.TwWStanInfoLimit)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_StanInfoLimit");
            entity.Property(e => e.TwWStanInfoMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwW_StanInfoMax");
            entity.Property(e => e.TwWStanInfoProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 0)")
                .HasColumnName("TwW_StanInfoProcent");
            entity.Property(e => e.TwWStawkaCukierStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwW_StawkaCukierStala");
            entity.Property(e => e.TwWStawkaCukierZmienna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwW_StawkaCukierZmienna");
            entity.Property(e => e.TwWStawkaKgo)
                .HasDefaultValue(0)
                .HasColumnName("TwW_StawkaKGO");
            entity.Property(e => e.TwWStawkaKofeina)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwW_StawkaKofeina");
            entity.Property(e => e.TwWStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwW_StawkaPod");
            entity.Property(e => e.TwWStawkaPodSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwW_StawkaPodSpr");
            entity.Property(e => e.TwWSww)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Sww");
            entity.Property(e => e.TwWTerminW)
                .HasDefaultValue((short)0)
                .HasColumnName("TwW_TerminW");
            entity.Property(e => e.TwWTerminZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("TwW_TerminZwrotu");
            entity.Property(e => e.TwWTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Typ");
            entity.Property(e => e.TwWUbytek)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwW_Ubytek");
            entity.Property(e => e.TwWUpust)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Upust");
            entity.Property(e => e.TwWUpustData)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_UpustData");
            entity.Property(e => e.TwWUpustDataDo)
                .HasDefaultValue(0)
                .HasColumnName("TwW_UpustDataDo");
            entity.Property(e => e.TwWUpustDataOd)
                .HasDefaultValue(0)
                .HasColumnName("TwW_UpustDataOd");
            entity.Property(e => e.TwWUpustGodz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_UpustGodz");
            entity.Property(e => e.TwWUpustGodzDo)
                .HasDefaultValue(0)
                .HasColumnName("TwW_UpustGodzDo");
            entity.Property(e => e.TwWUpustGodzOd)
                .HasDefaultValue(0)
                .HasColumnName("TwW_UpustGodzOd");
            entity.Property(e => e.TwWUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_URL");
            entity.Property(e => e.TwWWaga)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("TwW_Waga");
            entity.Property(e => e.TwWWaga1)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("TwW_Waga1");
            entity.Property(e => e.TwWWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 3)")
                .HasColumnName("TwW_WagaBrutto");
            entity.Property(e => e.TwWWartosc1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Wartosc1");
            entity.Property(e => e.TwWWartosc2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Wartosc2");
            entity.Property(e => e.TwWWartosc3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Wartosc3");
            entity.Property(e => e.TwWWarunek)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_Warunek");
            entity.Property(e => e.TwWWcenniku)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_WCenniku");
            entity.Property(e => e.TwWWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_WJm");
            entity.Property(e => e.TwWWjm1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_WJm1");
            entity.Property(e => e.TwWWspFin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("TwW_WspFin");
            entity.Property(e => e.TwWWymJm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwW_WymJm");
            entity.Property(e => e.TwWZakup)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Zakup");
            entity.Property(e => e.TwWZakupAutoryz)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_ZakupAutoryz");
            entity.Property(e => e.TwWZawartoscCukru)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("TwW_ZawartoscCukru");
            entity.Property(e => e.TwWZlom)
                .HasDefaultValue((byte)0)
                .HasColumnName("TwW_Zlom");
            entity.Property(e => e.TwWZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwW_Zrodlowa");
            entity.Property(e => e.TwWZrodlowaSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TwW_ZrodlowaSpr");
        });

        modelBuilder.Entity<TwrZasoby>(entity =>
        {
            entity.HasKey(e => new { e.TwZDstNumer, e.TwZMagNumer }).HasName("TwZ_Primary");

            entity.ToTable("TwrZasoby", "CDN", tb => tb.HasTrigger("TwrZasobyEAN_InsertUpdateHandler"));

            entity.HasIndex(e => e.TwZEan, "TwZEan");

            entity.HasIndex(e => new { e.TwZTwrNumer, e.TwZMagNumer, e.TwZDstTyp, e.TwZDstNumer }, "TwZOptymalizacja1");

            entity.HasIndex(e => new { e.TwZTwrNumer, e.TwZMagNumer, e.TwZDstNumer }, "TwZStany");

            entity.HasIndex(e => new { e.TwZTwrNumer, e.TwZDataP }, "TwZTowarData");

            entity.HasIndex(e => new { e.TwZTwrNumer, e.TwZDataW }, "TwZTowarDataW");

            entity.Property(e => e.TwZDstNumer).HasColumnName("TwZ_DstNumer");
            entity.Property(e => e.TwZMagNumer).HasColumnName("TwZ_MagNumer");
            entity.Property(e => e.TwZDataP)
                .HasDefaultValue(0)
                .HasColumnName("TwZ_DataP");
            entity.Property(e => e.TwZDataW)
                .HasDefaultValue(0)
                .HasColumnName("TwZ_DataW");
            entity.Property(e => e.TwZDstFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwZ_DstFirma");
            entity.Property(e => e.TwZDstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwZ_DstLp");
            entity.Property(e => e.TwZDstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwZ_DstTyp");
            entity.Property(e => e.TwZEan)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwZ_Ean");
            entity.Property(e => e.TwZIlMag)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZ_IlMag");
            entity.Property(e => e.TwZIlSpr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZ_IlSpr");
            entity.Property(e => e.TwZIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZ_Ilosc");
            entity.Property(e => e.TwZIloscWms)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TwZ_IloscWMS");
            entity.Property(e => e.TwZKosztKsiegowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwZ_KosztKsiegowy");
            entity.Property(e => e.TwZKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwZ_KosztRzeczywisty");
            entity.Property(e => e.TwZKsiegowaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwZ_KsiegowaNetto");
            entity.Property(e => e.TwZMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwZ_MagFirma");
            entity.Property(e => e.TwZMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwZ_MagLp");
            entity.Property(e => e.TwZMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwZ_MagTyp");
            entity.Property(e => e.TwZPolozenie)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TwZ_Polozenie");
            entity.Property(e => e.TwZRzeczywistaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TwZ_RzeczywistaNetto");
            entity.Property(e => e.TwZTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("TwZ_TwrFirma");
            entity.Property(e => e.TwZTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwZ_TwrLp");
            entity.Property(e => e.TwZTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("TwZ_TwrNumer");
            entity.Property(e => e.TwZTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TwZ_TwrTyp");

            entity.HasOne(d => d.TwZMagNumerNavigation).WithMany(p => p.TwrZasobies)
                .HasForeignKey(d => d.TwZMagNumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TwzMagazyn");
        });

        modelBuilder.Entity<TwrZasobyMag>(entity =>
        {
            entity.HasKey(e => new { e.TzmTpaId, e.TzmMgAid, e.TzmMagNumer, e.TzmJednostkaLog, e.TzmLp }).HasName("TZM_Primary");

            entity.ToTable("TwrZasobyMag", "CDN", tb => tb.HasTrigger("TwrZasobyMag_InsertUpdateHandler"));

            entity.HasIndex(e => e.TzmMgAid, "TZMAdres");

            entity.HasIndex(e => new { e.TzmMagNumer, e.TzmTpaId }, "TZMMagazyn");

            entity.Property(e => e.TzmTpaId).HasColumnName("TZM_TPaId");
            entity.Property(e => e.TzmMgAid).HasColumnName("TZM_MgAId");
            entity.Property(e => e.TzmMagNumer).HasColumnName("TZM_MagNumer");
            entity.Property(e => e.TzmJednostkaLog).HasColumnName("TZM_JednostkaLog");
            entity.Property(e => e.TzmLp).HasColumnName("TZM_Lp");
            entity.Property(e => e.TzmIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TZM_Ilosc");
            entity.Property(e => e.TzmMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("TZM_MagTyp");
        });

        modelBuilder.Entity<TypSchemat>(entity =>
        {
            entity.HasKey(e => new { e.SctTrntyp, e.SctPozycja }).HasName("SCT_Primary");

            entity.ToTable("TypSchemat", "CDN");

            entity.HasIndex(e => new { e.SctSchtyp, e.SctSchnumer, e.SctTrntyp }, "SCTSchemat").IsUnique();

            entity.Property(e => e.SctTrntyp).HasColumnName("SCT_TRNTyp");
            entity.Property(e => e.SctPozycja).HasColumnName("SCT_Pozycja");
            entity.Property(e => e.SctSchfirma)
                .HasDefaultValue(0)
                .HasColumnName("SCT_SCHFirma");
            entity.Property(e => e.SctSchlp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCT_SCHLp");
            entity.Property(e => e.SctSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("SCT_SCHNumer");
            entity.Property(e => e.SctSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("SCT_SCHTyp");

            entity.HasOne(d => d.Schematy).WithMany(p => p.TypSchemats)
                .HasForeignKey(d => new { d.SctSchtyp, d.SctSchnumer })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SCTSchemat");
        });

        modelBuilder.Entity<UczestnicyKonwersacji>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UczestnicyKonwersacji", "CDN", tb =>
                {
                    tb.HasTrigger("UczestnicyKonwersacji_DeleteHandler");
                    tb.HasTrigger("UczestnicyKonwersacji_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.UknIdkonwersacji, "UKNKonwersacja");

            entity.HasIndex(e => e.UknIdoperatora, "UKNOperator");

            entity.Property(e => e.UknIdkonwersacji)
                .HasDefaultValue(0)
                .HasColumnName("UKN_IDKonwersacji");
            entity.Property(e => e.UknIdoperatora)
                .HasDefaultValue(0)
                .HasColumnName("UKN_IDOperatora");
        });

        modelBuilder.Entity<UmlNag>(entity =>
        {
            entity.HasKey(e => e.UlnId).HasName("ULN_Primary");

            entity.ToTable("UmlNag", "CDN", tb =>
                {
                    tb.HasTrigger("UmlNag_DeleteHandler");
                    tb.HasTrigger("UmlNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.UlnPodmFinansNumer, e.UlnPodmFinansTyp }, "ULNFinansujacy");

            entity.HasIndex(e => new { e.UlnUlnrok, e.UlnUlnseria, e.UlnUlnnumer }, "ULNNumer").IsUnique();

            entity.HasIndex(e => new { e.UlnDataRozpoczecia, e.UlnDataZakonczenia, e.UlnUlnseria, e.UlnUlnnumer }, "ULNOkres");

            entity.HasIndex(e => e.UlnStan, "ULNStan");

            entity.Property(e => e.UlnId).HasColumnName("ULN_ID");
            entity.Property(e => e.UlnAkcyza)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ULN_Akcyza");
            entity.Property(e => e.UlnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("ULN_Aktywny");
            entity.Property(e => e.UlnAneksGenRaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_AneksGenRaty");
            entity.Property(e => e.UlnDataAneksu)
                .HasDefaultValue(0)
                .HasColumnName("ULN_DataAneksu");
            entity.Property(e => e.UlnDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("ULN_DataCzasM");
            entity.Property(e => e.UlnDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("ULN_DataCzasW");
            entity.Property(e => e.UlnDataRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("ULN_DataRozpoczecia");
            entity.Property(e => e.UlnDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("ULN_DataZakonczenia");
            entity.Property(e => e.UlnDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULN_DokumentObcy");
            entity.Property(e => e.UlnFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_FlagaVat");
            entity.Property(e => e.UlnFrsid)
                .HasDefaultValue(0)
                .HasColumnName("ULN_FRSId");
            entity.Property(e => e.UlnGenerujRk)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_GenerujRK");
            entity.Property(e => e.UlnGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULN_GrupaPod");
            entity.Property(e => e.UlnIloscRat)
                .HasDefaultValue((short)0)
                .HasColumnName("ULN_IloscRat");
            entity.Property(e => e.UlnKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("ULN_KursL");
            entity.Property(e => e.UlnKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ULN_KursM");
            entity.Property(e => e.UlnMetodaPodzialu)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_MetodaPodzialu");
            entity.Property(e => e.UlnNrAneksu)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULN_NrAneksu");
            entity.Property(e => e.UlnNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ULN_NrKursu");
            entity.Property(e => e.UlnOdliczeniaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_OdliczeniaVat");
            entity.Property(e => e.UlnOgraniczenieOdl)
                .HasDefaultValue(0)
                .HasColumnName("ULN_OgraniczenieOdl");
            entity.Property(e => e.UlnOkresRaty)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_OkresRaty");
            entity.Property(e => e.UlnOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("ULN_OpeMNumer");
            entity.Property(e => e.UlnOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("ULN_OpeWNumer");
            entity.Property(e => e.UlnOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULN_Opis");
            entity.Property(e => e.UlnOplataWstKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_OplataWstKwota");
            entity.Property(e => e.UlnOplataWstKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_OplataWstKwotaSys");
            entity.Property(e => e.UlnOplataWstProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ULN_OplataWstProcent");
            entity.Property(e => e.UlnPierwszaRataNaliczanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_PierwszaRataNaliczanie");
            entity.Property(e => e.UlnPlatnosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_Platnosci");
            entity.Property(e => e.UlnPodmFinansNumer)
                .HasDefaultValue(0)
                .HasColumnName("ULN_PodmFinansNumer");
            entity.Property(e => e.UlnPodmFinansTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ULN_PodmFinansTyp");
            entity.Property(e => e.UlnPodstawaNaliczaniaRk)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_PodstawaNaliczaniaRK");
            entity.Property(e => e.UlnPodzRatyLeasingowej)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_PodzRatyLeasingowej");
            entity.Property(e => e.UlnPrzeliczonoIrr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_PrzeliczonoIRR");
            entity.Property(e => e.UlnRodzajUmowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_RodzajUmowy");
            entity.Property(e => e.UlnSrtAkronim)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULN_SrtAkronim");
            entity.Property(e => e.UlnStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_Stan");
            entity.Property(e => e.UlnStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ULN_StawkaPod");
            entity.Property(e => e.UlnSumaRatNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_SumaRatNetto");
            entity.Property(e => e.UlnSumaRatNettoSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_SumaRatNettoSys");
            entity.Property(e => e.UlnUlnlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ULN_ULNLp");
            entity.Property(e => e.UlnUlnmiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_ULNMiesiac");
            entity.Property(e => e.UlnUlnnumer)
                .HasDefaultValue(0)
                .HasColumnName("ULN_ULNNumer");
            entity.Property(e => e.UlnUlnrok)
                .HasDefaultValue((short)0)
                .HasColumnName("ULN_ULNRok");
            entity.Property(e => e.UlnUlnseria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULN_ULNSeria");
            entity.Property(e => e.UlnUlntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ULN_ULNTyp");
            entity.Property(e => e.UlnUwzglElementyUm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULN_UwzglElementyUm");
            entity.Property(e => e.UlnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULN_Waluta");
            entity.Property(e => e.UlnWartoscGodziwa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_WartoscGodziwa");
            entity.Property(e => e.UlnWartoscPrzedmiotu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_WartoscPrzedmiotu");
            entity.Property(e => e.UlnWartoscPrzedmiotuSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_WartoscPrzedmiotuSys");
            entity.Property(e => e.UlnWartoscWykKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_WartoscWykKwota");
            entity.Property(e => e.UlnWartoscWykKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULN_WartoscWykKwotaSys");
            entity.Property(e => e.UlnWartoscWykProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ULN_WartoscWykProcent");
            entity.Property(e => e.UlnZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ULN_Zrodlowa");
        });

        modelBuilder.Entity<UmlPrzedmioty>(entity =>
        {
            entity.HasKey(e => new { e.UlpUlnid, e.UlpLp }).HasName("ULP_Primary");

            entity.ToTable("UmlPrzedmioty", "CDN", tb => tb.HasTrigger("UmlPrzedmioty_InsertUpdateHandler"));

            entity.HasIndex(e => e.UlpSrtnumer, "ULPSrt");

            entity.Property(e => e.UlpUlnid).HasColumnName("ULP_ULNId");
            entity.Property(e => e.UlpLp).HasColumnName("ULP_Lp");
            entity.Property(e => e.UlpKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("ULP_KursL");
            entity.Property(e => e.UlpKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ULP_KursM");
            entity.Property(e => e.UlpNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ULP_NrKursu");
            entity.Property(e => e.UlpOdliczeniaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULP_OdliczeniaVat");
            entity.Property(e => e.UlpOgraniczenieOdl)
                .HasDefaultValue(0)
                .HasColumnName("ULP_OgraniczenieOdl");
            entity.Property(e => e.UlpOplataWstKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_OplataWstKwota");
            entity.Property(e => e.UlpOplataWstKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_OplataWstKwotaSys");
            entity.Property(e => e.UlpOplataWstProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ULP_OplataWstProcent");
            entity.Property(e => e.UlpShelp)
                .HasDefaultValue((short)0)
                .HasColumnName("ULP_SHELp");
            entity.Property(e => e.UlpShenumer)
                .HasDefaultValue(0)
                .HasColumnName("ULP_SHENumer");
            entity.Property(e => e.UlpSrtnumer)
                .HasDefaultValue(0)
                .HasColumnName("ULP_SRTNumer");
            entity.Property(e => e.UlpSumaRatNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_SumaRatNetto");
            entity.Property(e => e.UlpSumaRatNettoSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_SumaRatNettoSys");
            entity.Property(e => e.UlpWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULP_Waluta");
            entity.Property(e => e.UlpWartoscPrzedmiotu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_WartoscPrzedmiotu");
            entity.Property(e => e.UlpWartoscPrzedmiotuSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_WartoscPrzedmiotuSys");
            entity.Property(e => e.UlpWartoscWykKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_WartoscWykKwota");
            entity.Property(e => e.UlpWartoscWykKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULP_WartoscWykKwotaSys");
            entity.Property(e => e.UlpWartoscWykProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ULP_WartoscWykProcent");

            entity.HasOne(d => d.UlpUln).WithMany(p => p.UmlPrzedmioties)
                .HasForeignKey(d => d.UlpUlnid)
                .HasConstraintName("FK_ULPPrimary");
        });

        modelBuilder.Entity<UmlRaty>(entity =>
        {
            entity.HasKey(e => e.UlrId).HasName("ULR_Primary");

            entity.ToTable("UmlRaty", "CDN", tb => tb.HasTrigger("UmlRaty_DeleteHandler"));

            entity.HasIndex(e => e.UlrUlnid, "ULRUmowa");

            entity.Property(e => e.UlrId).HasColumnName("ULR_ID");
            entity.Property(e => e.UlrAneks)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULR_Aneks");
            entity.Property(e => e.UlrIrr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("ULR_IRR");
            entity.Property(e => e.UlrKapital)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ULR_Kapital");
            entity.Property(e => e.UlrKapitalSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULR_KapitalSys");
            entity.Property(e => e.UlrKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("ULR_KursL");
            entity.Property(e => e.UlrKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ULR_KursM");
            entity.Property(e => e.UlrNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ULR_Netto");
            entity.Property(e => e.UlrNettoSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULR_NettoSys");
            entity.Property(e => e.UlrNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ULR_NrKursu");
            entity.Property(e => e.UlrNumer)
                .HasDefaultValue((short)0)
                .HasColumnName("ULR_Numer");
            entity.Property(e => e.UlrOdsetki)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("ULR_Odsetki");
            entity.Property(e => e.UlrOdsetkiSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ULR_OdsetkiSys");
            entity.Property(e => e.UlrTermin)
                .HasDefaultValue(0)
                .HasColumnName("ULR_Termin");
            entity.Property(e => e.UlrUlnid)
                .HasDefaultValue(0)
                .HasColumnName("ULR_ULNID");
            entity.Property(e => e.UlrUlplp)
                .HasDefaultValue((short)0)
                .HasColumnName("ULR_ULPLp");
            entity.Property(e => e.UlrWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULR_Waluta");

            entity.HasOne(d => d.UlrUln).WithMany(p => p.UmlRaties)
                .HasForeignKey(d => d.UlrUlnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ULRUmowa");
        });

        modelBuilder.Entity<UmwElem>(entity =>
        {
            entity.HasKey(e => new { e.UmEGidnumer, e.UmEGidtyp, e.UmEGidlp }).HasName("UmE_Primary");

            entity.ToTable("UmwElem", "CDN", tb =>
                {
                    tb.HasTrigger("UmwElem_DeleteHandler");
                    tb.HasTrigger("UmwElem_DeletePrzenumeruj");
                    tb.HasTrigger("UmwElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.UmEGidtyp, e.UmEGidnumer, e.UmEPozycja }, "UmEPozycja");

            entity.Property(e => e.UmEGidnumer).HasColumnName("UmE_GIDNumer");
            entity.Property(e => e.UmEGidtyp).HasColumnName("UmE_GIDTyp");
            entity.Property(e => e.UmEGidlp).HasColumnName("UmE_GIDLp");
            entity.Property(e => e.UmEDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmE_DokLp");
            entity.Property(e => e.UmEDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmE_DokNumer");
            entity.Property(e => e.UmEDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmE_DokTyp");
            entity.Property(e => e.UmEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("UmE_GIDFirma");
            entity.Property(e => e.UmEKod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmE_Kod");
            entity.Property(e => e.UmENazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmE_Nazwa");
            entity.Property(e => e.UmEPozycja)
                .HasDefaultValue(0)
                .HasColumnName("UmE_Pozycja");
            entity.Property(e => e.UmEUwagi)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmE_Uwagi");
        });

        modelBuilder.Entity<UmwNag>(entity =>
        {
            entity.HasKey(e => e.UmNId).HasName("UmN_Primary");

            entity.ToTable("UmwNag", "CDN", tb =>
                {
                    tb.HasTrigger("UmwNagAlias_DeleteHandler");
                    tb.HasTrigger("UmwNagAlias_InsertUpdateHandler");
                    tb.HasTrigger("UmwNag_DeleteAneks");
                    tb.HasTrigger("UmwNag_DeleteHandler");
                    tb.HasTrigger("UmwNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.UmNKnDnumer, "UmNKeyKontrahDocelowy");

            entity.HasIndex(e => new { e.UmNKnPtyp, e.UmNKnPnumer }, "UmNKeyPlatnik");

            entity.HasIndex(e => new { e.UmNRok, e.UmNMiesiac, e.UmNSeria, e.UmNNumer }, "UmNNumer").IsUnique();

            entity.HasIndex(e => new { e.UmNPodNumer, e.UmNPodTyp }, "UmNPodmiot");

            entity.HasIndex(e => e.UmNPrjId, "UmNPrjId");

            entity.HasIndex(e => e.UmNUmTid, "UmNTypUmowy");

            entity.Property(e => e.UmNId).HasColumnName("UmN_Id");
            entity.Property(e => e.UmNAdPnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_AdPNumer");
            entity.Property(e => e.UmNAdWnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_AdWNumer");
            entity.Property(e => e.UmNAdWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_AdWTyp");
            entity.Property(e => e.UmNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("UmN_Aktywny");
            entity.Property(e => e.UmNAneksId)
                .HasDefaultValue(0)
                .HasColumnName("UmN_AneksId");
            entity.Property(e => e.UmNBlokadaPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_BlokadaPl");
            entity.Property(e => e.UmNCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_CechaOpis");
            entity.Property(e => e.UmNCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_CenaSpr");
            entity.Property(e => e.UmNCzasObow)
                .HasDefaultValue(0)
                .HasColumnName("UmN_CzasObow");
            entity.Property(e => e.UmNCzasObowJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_CzasObowJedn");
            entity.Property(e => e.UmNDataCzasM)
                .HasDefaultValue(0)
                .HasColumnName("UmN_DataCzasM");
            entity.Property(e => e.UmNDataCzasP)
                .HasDefaultValue(0)
                .HasColumnName("UmN_DataCzasP");
            entity.Property(e => e.UmNDataCzasW)
                .HasDefaultValue(0)
                .HasColumnName("UmN_DataCzasW");
            entity.Property(e => e.UmNDataPierwszejPl)
                .HasDefaultValue(0)
                .HasColumnName("UmN_DataPierwszejPl");
            entity.Property(e => e.UmNDataRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("UmN_DataRozpoczecia");
            entity.Property(e => e.UmNDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("UmN_DataZakonczenia");
            entity.Property(e => e.UmNDataZawarcia)
                .HasDefaultValue(0)
                .HasColumnName("UmN_DataZawarcia");
            entity.Property(e => e.UmNDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_DokumentObcy");
            entity.Property(e => e.UmNExpoNorm)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_ExpoNorm");
            entity.Property(e => e.UmNFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_FlagaNB");
            entity.Property(e => e.UmNFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_FormaNazwa");
            entity.Property(e => e.UmNFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_FormaNr");
            entity.Property(e => e.UmNFormaRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmN_FormaRabat");
            entity.Property(e => e.UmNFrSid)
                .HasDefaultValue(0)
                .HasColumnName("UmN_FrSID");
            entity.Property(e => e.UmNFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_FrmNumer");
            entity.Property(e => e.UmNGenDokGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_GenDokGrupaPod");
            entity.Property(e => e.UmNGenDokNazwaPozycji)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_GenDokNazwaPozycji");
            entity.Property(e => e.UmNGenDokStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmN_GenDokStawkaPod");
            entity.Property(e => e.UmNIloscRatPl)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_IloscRatPl");
            entity.Property(e => e.UmNInnaRataPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_InnaRataPl");
            entity.Property(e => e.UmNKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnANumer");
            entity.Property(e => e.UmNKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnATyp");
            entity.Property(e => e.UmNKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnDNumer");
            entity.Property(e => e.UmNKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnDTyp");
            entity.Property(e => e.UmNKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnPNumer");
            entity.Property(e => e.UmNKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnPTyp");
            entity.Property(e => e.UmNKnSfirma)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnSFirma");
            entity.Property(e => e.UmNKnSfirmaOdb)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnSFirmaOdb");
            entity.Property(e => e.UmNKnSfirmaPlt)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnSFirmaPlt");
            entity.Property(e => e.UmNKnSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnSLp");
            entity.Property(e => e.UmNKnSlpOdb)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnSLpOdb");
            entity.Property(e => e.UmNKnSlpPlt)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnSLpPlt");
            entity.Property(e => e.UmNKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnSNumer");
            entity.Property(e => e.UmNKnSnumerOdb)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnSNumerOdb");
            entity.Property(e => e.UmNKnSnumerPlt)
                .HasDefaultValue(0)
                .HasColumnName("UmN_KnSNumerPlt");
            entity.Property(e => e.UmNKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnSTyp");
            entity.Property(e => e.UmNKnStypOdb)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnSTypOdb");
            entity.Property(e => e.UmNKnStypPlt)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_KnSTypPlt");
            entity.Property(e => e.UmNKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("UmN_KursL");
            entity.Property(e => e.UmNKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("UmN_KursM");
            entity.Property(e => e.UmNKwotaInnejRatyPl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmN_KwotaInnejRatyPl");
            entity.Property(e => e.UmNKwotaRatyPl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmN_KwotaRatyPl");
            entity.Property(e => e.UmNMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_MagNumer");
            entity.Property(e => e.UmNMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_Miesiac");
            entity.Property(e => e.UmNNadwyzkaTwr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmN_NadwyzkaTwr");
            entity.Property(e => e.UmNNieUzywac)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_NieUzywac");
            entity.Property(e => e.UmNNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_NrKursu");
            entity.Property(e => e.UmNNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_Numer");
            entity.Property(e => e.UmNOkresPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_OkresPl");
            entity.Property(e => e.UmNOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_OpeMNumer");
            entity.Property(e => e.UmNOpePnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_OpePNumer");
            entity.Property(e => e.UmNOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_OpeWNumer");
            entity.Property(e => e.UmNOpiekunNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_OpiekunNumer");
            entity.Property(e => e.UmNOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_Opis");
            entity.Property(e => e.UmNOpisStanuId)
                .HasDefaultValue(0)
                .HasColumnName("UmN_OpisStanuId");
            entity.Property(e => e.UmNOstatniDzienPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_OstatniDzienPl");
            entity.Property(e => e.UmNPodNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmN_PodNumer");
            entity.Property(e => e.UmNPodTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_PodTyp");
            entity.Property(e => e.UmNPowodAneksuId)
                .HasDefaultValue(0)
                .HasColumnName("UmN_PowodAneksuId");
            entity.Property(e => e.UmNPozycjaTwr)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_PozycjaTwr");
            entity.Property(e => e.UmNPrjId)
                .HasDefaultValue(0)
                .HasColumnName("UmN_PrjId");
            entity.Property(e => e.UmNProcentRatyPl)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmN_ProcentRatyPl");
            entity.Property(e => e.UmNPromocje)
                .HasDefaultValue(0)
                .HasColumnName("UmN_Promocje");
            entity.Property(e => e.UmNRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmN_Rabat");
            entity.Property(e => e.UmNRabatPromocyjnyGlobalny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("UmN_RabatPromocyjnyGlobalny");
            entity.Property(e => e.UmNRabatW)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmN_RabatW");
            entity.Property(e => e.UmNRodzajUmowyId)
                .HasDefaultValue(0)
                .HasColumnName("UmN_RodzajUmowyId");
            entity.Property(e => e.UmNRok)
                .HasDefaultValue((short)0)
                .HasColumnName("UmN_Rok");
            entity.Property(e => e.UmNRoznicaPl)
                .HasDefaultValue((byte)2)
                .HasColumnName("UmN_RoznicaPl");
            entity.Property(e => e.UmNSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_Seria");
            entity.Property(e => e.UmNSpDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_SpDostawy");
            entity.Property(e => e.UmNSprZak)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_SprZak");
            entity.Property(e => e.UmNStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_Stan");
            entity.Property(e => e.UmNTerminPlatnosci)
                .HasDefaultValue(0)
                .HasColumnName("UmN_TerminPlatnosci");
            entity.Property(e => e.UmNTypKursu)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_TypKursu");
            entity.Property(e => e.UmNUmTid)
                .HasDefaultValue(0)
                .HasColumnName("UmN_UmTId");
            entity.Property(e => e.UmNUmowaId)
                .HasDefaultValue(0)
                .HasColumnName("UmN_UmowaId");
            entity.Property(e => e.UmNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_Url");
            entity.Property(e => e.UmNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmN_Waluta");
            entity.Property(e => e.UmNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmN_Wsk");
        });

        modelBuilder.Entity<UmwPlat>(entity =>
        {
            entity.HasKey(e => new { e.UplGidnumer, e.UplGidlp }).HasName("UPl_Primary");

            entity.ToTable("UmwPlat", "CDN", tb =>
                {
                    tb.HasTrigger("UmwPlat_DeleteHandler");
                    tb.HasTrigger("UmwPlat_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.UplImpNumer, "UPlImport");

            entity.HasIndex(e => new { e.UplTrNtyp, e.UplTrNnumer }, "UPlZaliczkowa");

            entity.Property(e => e.UplGidnumer).HasColumnName("UPl_GIDNumer");
            entity.Property(e => e.UplGidlp).HasColumnName("UPl_GIDLp");
            entity.Property(e => e.UplDataDokumentu)
                .HasDefaultValue(0)
                .HasColumnName("UPl_DataDokumentu");
            entity.Property(e => e.UplFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPl_FormaNazwa");
            entity.Property(e => e.UplFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPl_FormaNr");
            entity.Property(e => e.UplGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("UPl_GIDFirma");
            entity.Property(e => e.UplGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPl_GIDTyp");
            entity.Property(e => e.UplImpNumer)
                .HasDefaultValue(0)
                .HasColumnName("UPl_ImpNumer");
            entity.Property(e => e.UplImpTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPl_ImpTyp");
            entity.Property(e => e.UplKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("UPl_KursL");
            entity.Property(e => e.UplKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("UPl_KursM");
            entity.Property(e => e.UplKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPl_Kwota");
            entity.Property(e => e.UplNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPl_Notatki");
            entity.Property(e => e.UplNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("UPl_NrKursu");
            entity.Property(e => e.UplNrRaty)
                .HasDefaultValue((short)0)
                .HasColumnName("UPl_NrRaty");
            entity.Property(e => e.UplPozostaje)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPl_Pozostaje");
            entity.Property(e => e.UplProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UPl_Procent");
            entity.Property(e => e.UplTermin)
                .HasDefaultValue(0)
                .HasColumnName("UPl_Termin");
            entity.Property(e => e.UplTerminDni)
                .HasDefaultValue(0)
                .HasColumnName("UPl_TerminDni");
            entity.Property(e => e.UplTrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("UPl_TrNNumer");
            entity.Property(e => e.UplTrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPl_TrNTyp");
            entity.Property(e => e.UplTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPl_Typ");
            entity.Property(e => e.UplWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPl_Waluta");

            entity.HasOne(d => d.UplGidnumerNavigation).WithMany(p => p.UmwPlats)
                .HasForeignKey(d => d.UplGidnumer)
                .HasConstraintName("FK_UPlPrimaryNoType");
        });

        modelBuilder.Entity<UmwPlatPozycje>(entity =>
        {
            entity.HasKey(e => e.UppId).HasName("UPP_Primary");

            entity.ToTable("UmwPlatPozycje", "CDN", tb => tb.HasTrigger("UmwPlatPozycje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.UppUplNumer, e.UppUplLp }, "UPPKeyUPlNoType");

            entity.HasIndex(e => e.UppUmPid, "UPPKeyUmP");

            entity.Property(e => e.UppId).HasColumnName("UPP_Id");
            entity.Property(e => e.UppIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("UPP_Ilosc");
            entity.Property(e => e.UppUmPid)
                .HasDefaultValue(0)
                .HasColumnName("UPP_UmPId");
            entity.Property(e => e.UppUplFirma)
                .HasDefaultValue(0)
                .HasColumnName("UPP_UPlFirma");
            entity.Property(e => e.UppUplLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPP_UPlLp");
            entity.Property(e => e.UppUplNumer)
                .HasDefaultValue(0)
                .HasColumnName("UPP_UPlNumer");
            entity.Property(e => e.UppUplTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPP_UPlTyp");
        });

        modelBuilder.Entity<UmwPozycje>(entity =>
        {
            entity.HasKey(e => e.UmPId).HasName("UmP_Primary");

            entity.ToTable("UmwPozycje", "CDN", tb =>
                {
                    tb.HasTrigger("UmwPozycje_DeleteHandler");
                    tb.HasTrigger("UmwPozycje_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.UmPUmNid, e.UmPPozycja }, "UmPPozycja").IsUnique();

            entity.HasIndex(e => e.UmPTwrNumer, "UmPTwrNumer");

            entity.Property(e => e.UmPId).HasColumnName("UmP_Id");
            entity.Property(e => e.UmPCchFirma)
                .HasDefaultValue(0)
                .HasColumnName("UmP_CChFirma");
            entity.Property(e => e.UmPCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_CChLp");
            entity.Property(e => e.UmPCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmP_CChNumer");
            entity.Property(e => e.UmPCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_CChTyp");
            entity.Property(e => e.UmPCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmP_Cecha");
            entity.Property(e => e.UmPCenaKatalogowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("UmP_CenaKatalogowa");
            entity.Property(e => e.UmPCenaOferowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("UmP_CenaOferowana");
            entity.Property(e => e.UmPCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_CenaSpr");
            entity.Property(e => e.UmPCenaUzgodniona)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("UmP_CenaUzgodniona");
            entity.Property(e => e.UmPCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("UmP_CzasModyfikacji");
            entity.Property(e => e.UmPFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmP_FlagaVAT");
            entity.Property(e => e.UmPGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmP_GrupaPod");
            entity.Property(e => e.UmPIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("UmP_Ilosc");
            entity.Property(e => e.UmPJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmP_JmFormat");
            entity.Property(e => e.UmPJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmP_JmFormatZ");
            entity.Property(e => e.UmPJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmP_JmZ");
            entity.Property(e => e.UmPKgojednostkowe)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("UmP_KGOJednostkowe");
            entity.Property(e => e.UmPMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmP_MagNumer");
            entity.Property(e => e.UmPNadwyzkaTwr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmP_NadwyzkaTwr");
            entity.Property(e => e.UmPNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_NrKursu");
            entity.Property(e => e.UmPOpis)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmP_Opis");
            entity.Property(e => e.UmPPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_Pozycja");
            entity.Property(e => e.UmPPozycjaSkopiowana)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmP_PozycjaSkopiowana");
            entity.Property(e => e.UmPPrecyzjaCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmP_PrecyzjaCeny");
            entity.Property(e => e.UmPPrecyzjaCenyPocz)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_PrecyzjaCenyPocz");
            entity.Property(e => e.UmPPromocje)
                .HasDefaultValue(0)
                .HasColumnName("UmP_Promocje");
            entity.Property(e => e.UmPPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("UmP_PrzeliczL");
            entity.Property(e => e.UmPPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("UmP_PrzeliczM");
            entity.Property(e => e.UmPRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmP_Rabat");
            entity.Property(e => e.UmPRabatKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("UmP_RabatKorekta");
            entity.Property(e => e.UmPRabatPromocyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("UmP_RabatPromocyjny");
            entity.Property(e => e.UmPReEfirma)
                .HasDefaultValue(0)
                .HasColumnName("UmP_ReEFirma");
            entity.Property(e => e.UmPReElp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_ReELp");
            entity.Property(e => e.UmPReEnumer)
                .HasDefaultValue(0)
                .HasColumnName("UmP_ReENumer");
            entity.Property(e => e.UmPReEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_ReETyp");
            entity.Property(e => e.UmPRodzajCenyBazowej)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_RodzajCenyBazowej");
            entity.Property(e => e.UmPRownanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmP_Rownanie");
            entity.Property(e => e.UmPStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmP_StawkaPod");
            entity.Property(e => e.UmPTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("UmP_TwrFirma");
            entity.Property(e => e.UmPTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_TwrLp");
            entity.Property(e => e.UmPTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmP_TwrNazwa");
            entity.Property(e => e.UmPTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmP_TwrNumer");
            entity.Property(e => e.UmPTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_TwrTyp");
            entity.Property(e => e.UmPTypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmP_TypJm");
            entity.Property(e => e.UmPUmNid)
                .HasDefaultValue(0)
                .HasColumnName("UmP_UmNId");
            entity.Property(e => e.UmPWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmP_Waluta");
            entity.Property(e => e.UmPWartoscPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmP_WartoscPoRabacie");
            entity.Property(e => e.UmPZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmP_Zrodlowa");
            entity.Property(e => e.UmPZstFirma)
                .HasDefaultValue(0)
                .HasColumnName("UmP_ZstFirma");
            entity.Property(e => e.UmPZstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_ZstLp");
            entity.Property(e => e.UmPZstNumer)
                .HasDefaultValue(0)
                .HasColumnName("UmP_ZstNumer");
            entity.Property(e => e.UmPZstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmP_ZstTyp");

            entity.HasOne(d => d.UmPUmN).WithMany(p => p.UmwPozycjes)
                .HasForeignKey(d => d.UmPUmNid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UmPPozycja");
        });

        modelBuilder.Entity<UmwTypy>(entity =>
        {
            entity.HasKey(e => e.UmTId).HasName("UmT_Primary");

            entity.ToTable("UmwTypy", "CDN", tb =>
                {
                    tb.HasTrigger("UmwTypyAlias_InsertUpdateHandler");
                    tb.HasTrigger("UmwTypy_DeleteHandler");
                });

            entity.HasIndex(e => new { e.UmTKod, e.UmTOjciecId }, "UmTKodUOjca").IsUnique();

            entity.Property(e => e.UmTId).HasColumnName("UmT_Id");
            entity.Property(e => e.UmTCzyPozycjeTwr)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmT_CzyPozycjeTwr");
            entity.Property(e => e.UmTKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmT_Kod");
            entity.Property(e => e.UmTKontrolujIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("UmT_KontrolujIlosc");
            entity.Property(e => e.UmTNadwyzkaTwr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmT_NadwyzkaTwr");
            entity.Property(e => e.UmTNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmT_Nazwa");
            entity.Property(e => e.UmTOjciecId)
                .HasDefaultValue(0)
                .HasColumnName("UmT_OjciecId");
            entity.Property(e => e.UmTRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("UmT_RodzajId");
        });

        modelBuilder.Entity<UmwVat>(entity =>
        {
            entity.HasKey(e => new { e.UmVGidnumer, e.UmVGidlp }).HasName("UmV_Primary");

            entity.ToTable("UmwVat", "CDN");

            entity.HasIndex(e => new { e.UmVGidtyp, e.UmVGidnumer, e.UmVGrupaPod, e.UmVStawkaPod, e.UmVFlagaVat, e.UmVWaluta, e.UmVNrKursu }, "UmVVat").IsUnique();

            entity.Property(e => e.UmVGidnumer).HasColumnName("UmV_GIDNumer");
            entity.Property(e => e.UmVGidlp).HasColumnName("UmV_GIDLp");
            entity.Property(e => e.UmVBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmV_Brutto");
            entity.Property(e => e.UmVFlagaVat)
                .HasDefaultValue((short)0)
                .HasColumnName("UmV_FlagaVat");
            entity.Property(e => e.UmVGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("UmV_GIDFirma");
            entity.Property(e => e.UmVGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UmV_GIDTyp");
            entity.Property(e => e.UmVGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmV_GrupaPod");
            entity.Property(e => e.UmVKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("UmV_KursL");
            entity.Property(e => e.UmVKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("UmV_KursM");
            entity.Property(e => e.UmVNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmV_Netto");
            entity.Property(e => e.UmVNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("UmV_NrKursu");
            entity.Property(e => e.UmVStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UmV_StawkaPod");
            entity.Property(e => e.UmVVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UmV_Vat");
            entity.Property(e => e.UmVWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UmV_Waluta");

            entity.HasOne(d => d.UmVGidnumerNavigation).WithMany(p => p.UmwVats)
                .HasForeignKey(d => d.UmVGidnumer)
                .HasConstraintName("FK_UmVPrimary");
        });

        modelBuilder.Entity<UpoElem>(entity =>
        {
            entity.HasKey(e => new { e.UpeGidnumer, e.UpeGidlp }).HasName("UPE_Primary");

            entity.ToTable("UpoElem", "CDN");

            entity.HasIndex(e => e.UpeNazwyLp, "UPENazwy");

            entity.HasIndex(e => new { e.UpeTrPtyp, e.UpeTrPnumer, e.UpeTrPlp, e.UpeNumer }, "UPEPlatnosc");

            entity.Property(e => e.UpeGidnumer).HasColumnName("UPE_GIDNumer");
            entity.Property(e => e.UpeGidlp).HasColumnName("UPE_GIDLp");
            entity.Property(e => e.UpeDniZwloki)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_DniZwloki");
            entity.Property(e => e.UpeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("UPE_GIDFirma");
            entity.Property(e => e.UpeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_GIDTyp");
            entity.Property(e => e.UpeKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("UPE_KursL");
            entity.Property(e => e.UpeKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("UPE_KursM");
            entity.Property(e => e.UpeKwotaOds)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPE_KwotaOds");
            entity.Property(e => e.UpeKwotaOdsSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPE_KwotaOdsSys");
            entity.Property(e => e.UpeKwotaZal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPE_KwotaZal");
            entity.Property(e => e.UpeNazwyLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_NazwyLp");
            entity.Property(e => e.UpeNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_NrKursu");
            entity.Property(e => e.UpeNumer)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_Numer");
            entity.Property(e => e.UpePozostaje)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPE_Pozostaje");
            entity.Property(e => e.UpeProcOds)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("UPE_ProcOds");
            entity.Property(e => e.UpeRozFirma)
                .HasDefaultValue(0)
                .HasColumnName("UPE_RozFirma");
            entity.Property(e => e.UpeRozLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_RozLp");
            entity.Property(e => e.UpeRozNumer)
                .HasDefaultValue(0)
                .HasColumnName("UPE_RozNumer");
            entity.Property(e => e.UpeRozTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_RozTyp");
            entity.Property(e => e.UpeStopien)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_Stopien");
            entity.Property(e => e.UpeTrPfirma)
                .HasDefaultValue(0)
                .HasColumnName("UPE_TrPFirma");
            entity.Property(e => e.UpeTrPlp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_TrPLp");
            entity.Property(e => e.UpeTrPnumer)
                .HasDefaultValue(0)
                .HasColumnName("UPE_TrPNumer");
            entity.Property(e => e.UpeTrPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPE_TrPTyp");
            entity.Property(e => e.UpeWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPE_Waluta");

            entity.HasOne(d => d.UpeGidnumerNavigation).WithMany(p => p.UpoElems)
                .HasForeignKey(d => d.UpeGidnumer)
                .HasConstraintName("FK_UPEPrimary");

            entity.HasOne(d => d.TraPlat).WithMany(p => p.UpoElems)
                .HasForeignKey(d => new { d.UpeTrPtyp, d.UpeTrPnumer, d.UpeTrPlp })
                .HasConstraintName("FK_UPEPlatnosc");
        });

        modelBuilder.Entity<UpoNag>(entity =>
        {
            entity.HasKey(e => e.UpnGidnumer).HasName("UPN_Primary");

            entity.ToTable("UpoNag", "CDN", tb =>
                {
                    tb.HasTrigger("UpoNag_DeleteHandler");
                    tb.HasTrigger("UpoNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.UpnDataUp, e.UpnGidtyp, e.UpnTyp, e.UpnRok, e.UpnSeria, e.UpnNumer }, "UPNDataUpoNumerUpo");

            entity.HasIndex(e => new { e.UpnKnttyp, e.UpnKntnumer, e.UpnKntlp, e.UpnTyp, e.UpnRozliczona, e.UpnDataDor }, "UPNKontrahD");

            entity.HasIndex(e => new { e.UpnKnttyp, e.UpnKntnumer, e.UpnRozliczona, e.UpnDataUp }, "UPNKontrahU");

            entity.HasIndex(e => new { e.UpnGidtyp, e.UpnTyp, e.UpnRok, e.UpnSeria, e.UpnNumer }, "UPNNumer").IsUnique();

            entity.HasIndex(e => new { e.UpnDataUp, e.UpnKntnumer }, "UpnDataUp");

            entity.HasIndex(e => e.UpnKwotaOds, "UpnKwotaOds");

            entity.Property(e => e.UpnGidnumer).HasColumnName("UPN_GIDNumer");
            entity.Property(e => e.UpnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("UPN_Aktywny");
            entity.Property(e => e.UpnCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPN_CechaOpis");
            entity.Property(e => e.UpnDataDor)
                .HasDefaultValue(0)
                .HasColumnName("UPN_DataDor");
            entity.Property(e => e.UpnDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("UPN_DataKsiegowania");
            entity.Property(e => e.UpnDataUp)
                .HasDefaultValue(0)
                .HasColumnName("UPN_DataUp");
            entity.Property(e => e.UpnDokId)
                .HasDefaultValue(0)
                .HasColumnName("UPN_DokID");
            entity.Property(e => e.UpnDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPN_Dziennik");
            entity.Property(e => e.UpnGenPlatDlaOds)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_GenPlatDlaOds");
            entity.Property(e => e.UpnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("UPN_GIDFirma");
            entity.Property(e => e.UpnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_GIDLp");
            entity.Property(e => e.UpnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_GIDTyp");
            entity.Property(e => e.UpnKaRnumer)
                .HasDefaultValue(0)
                .HasColumnName("UPN_KaRNumer");
            entity.Property(e => e.UpnKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("UPN_KNTFirma");
            entity.Property(e => e.UpnKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_KNTLp");
            entity.Property(e => e.UpnKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("UPN_KNTNumer");
            entity.Property(e => e.UpnKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_KNTTyp");
            entity.Property(e => e.UpnKosztUp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPN_KosztUp");
            entity.Property(e => e.UpnKosztUpSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPN_KosztUpSys");
            entity.Property(e => e.UpnKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("UPN_KursL");
            entity.Property(e => e.UpnKursLkosztUp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("UPN_KursLKosztUp");
            entity.Property(e => e.UpnKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("UPN_KursM");
            entity.Property(e => e.UpnKursMkosztUp)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("UPN_KursMKosztUp");
            entity.Property(e => e.UpnKwotaOds)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPN_KwotaOds");
            entity.Property(e => e.UpnKwotaOdsSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("UPN_KwotaOdsSys");
            entity.Property(e => e.UpnNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_NieKsiegowac");
            entity.Property(e => e.UpnNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_NrKursu");
            entity.Property(e => e.UpnNrKursuKosztUp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_NrKursuKosztUp");
            entity.Property(e => e.UpnNumer)
                .HasDefaultValue(0)
                .HasColumnName("UPN_Numer");
            entity.Property(e => e.UpnOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("UPN_OpeFirma");
            entity.Property(e => e.UpnOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_OpeLp");
            entity.Property(e => e.UpnOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("UPN_OpeNumer");
            entity.Property(e => e.UpnOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_OpeTyp");
            entity.Property(e => e.UpnRodzajTrpTermin)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_RodzajTrpTermin");
            entity.Property(e => e.UpnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_Rok");
            entity.Property(e => e.UpnRozliczona)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_Rozliczona");
            entity.Property(e => e.UpnSchfirma)
                .HasDefaultValue(0)
                .HasColumnName("UPN_SCHFirma");
            entity.Property(e => e.UpnSchlp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_SCHLp");
            entity.Property(e => e.UpnSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("UPN_SCHNumer");
            entity.Property(e => e.UpnSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_SCHTyp");
            entity.Property(e => e.UpnSeria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPN_Seria");
            entity.Property(e => e.UpnSlwTypOdsetek)
                .HasDefaultValue(0)
                .HasColumnName("UPN_SlwTypOdsetek");
            entity.Property(e => e.UpnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_Typ");
            entity.Property(e => e.UpnTypKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_TypKursu");
            entity.Property(e => e.UpnWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPN_Waluta");
            entity.Property(e => e.UpnWalutaKosztUp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPN_WalutaKosztUp");
            entity.Property(e => e.UpnWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPN_WsDziennik");
            entity.Property(e => e.UpnWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("UPN_WsSCHNumer");
            entity.Property(e => e.UpnWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("UPN_WsSCHTyp");
            entity.Property(e => e.UpnWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_WsStosujDziennik");
            entity.Property(e => e.UpnWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_WsStosujSchemat");
            entity.Property(e => e.UpnWygenerowaneAutomatycznie)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_WygenerowaneAutomatycznie");
            entity.Property(e => e.UpnZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_Zaksiegowano");
            entity.Property(e => e.UpnZatwierdzoneDoWysylki)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPN_ZatwierdzoneDoWysylki");
        });

        modelBuilder.Entity<UpoOpisy>(entity =>
        {
            entity.HasKey(e => new { e.UpoGidtyp, e.UpoGidnumer, e.UpoGidlp }).HasName("UPO_Primary");

            entity.ToTable("UpoOpisy", "CDN");

            entity.Property(e => e.UpoGidtyp).HasColumnName("UPO_GIDTyp");
            entity.Property(e => e.UpoGidnumer).HasColumnName("UPO_GIDNumer");
            entity.Property(e => e.UpoGidlp).HasColumnName("UPO_GIDLp");
            entity.Property(e => e.UpoGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("UPO_GIDFirma");
            entity.Property(e => e.UpoOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UPO_Opis");
            entity.Property(e => e.UpoTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("UPO_Typ");

            entity.HasOne(d => d.UpoGidnumerNavigation).WithMany(p => p.UpoOpisies)
                .HasForeignKey(d => d.UpoGidnumer)
                .HasConstraintName("FK_UPOPrimary");
        });

        modelBuilder.Entity<UrzadzeniaZewnetrzne>(entity =>
        {
            entity.HasKey(e => e.UzId).HasName("UZ_Primary");

            entity.ToTable("UrzadzeniaZewnetrzne", "CDN", tb => tb.HasTrigger("UrzadzeniaZewnetrzne_DeleteHandler"));

            entity.HasIndex(e => new { e.UzRodzaj, e.UzKod }, "UzKod").IsUnique();

            entity.HasIndex(e => new { e.UzRodzaj, e.UzLp }, "UzLp").IsUnique();

            entity.Property(e => e.UzId).HasColumnName("UZ_Id");
            entity.Property(e => e.UzKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UZ_Kod");
            entity.Property(e => e.UzLp)
                .HasDefaultValue(0)
                .HasColumnName("UZ_Lp");
            entity.Property(e => e.UzNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UZ_Nazwa");
            entity.Property(e => e.UzOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UZ_Opis");
            entity.Property(e => e.UzRodzaj)
                .HasDefaultValue(0)
                .HasColumnName("UZ_Rodzaj");
            entity.Property(e => e.UzUrzIdent)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UZ_UrzIdent");
        });

        modelBuilder.Entity<UrzadzeniaZewnetrzneObiekty>(entity =>
        {
            entity.HasKey(e => new { e.UzoUzId, e.UzoObiNumer, e.UzoObiTyp }).HasName("UZO_Primary");

            entity.ToTable("UrzadzeniaZewnetrzneObiekty", "CDN", tb => tb.HasTrigger("UrzadzeniaZewnetrzneObiekty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.UzoObiNumer, e.UzoObiTyp, e.UzoUzId }, "UZOObiekt");

            entity.Property(e => e.UzoUzId).HasColumnName("UZO_UzID");
            entity.Property(e => e.UzoObiNumer).HasColumnName("UZO_ObiNumer");
            entity.Property(e => e.UzoObiTyp).HasColumnName("UZO_ObiTyp");

            entity.HasOne(d => d.UzoUz).WithMany(p => p.UrzadzeniaZewnetrzneObiekties)
                .HasForeignKey(d => d.UzoUzId)
                .HasConstraintName("FK_UZOPrimary");
        });

        modelBuilder.Entity<Urzedy>(entity =>
        {
            entity.HasKey(e => e.UrzGidnumer).HasName("URZ_Primary");

            entity.ToTable("Urzedy", "CDN", tb =>
                {
                    tb.HasTrigger("UrzedyAlias1_DeleteHandler");
                    tb.HasTrigger("UrzedyAlias_DeleteHandler");
                    tb.HasTrigger("Urzedy_DeleteHandler");
                    tb.HasTrigger("Urzedy_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.UrzAkronim, "UrzAkronim").IsUnique();

            entity.Property(e => e.UrzGidnumer).HasColumnName("URZ_GIDNumer");
            entity.Property(e => e.UrzAdres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Adres");
            entity.Property(e => e.UrzAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Akronim");
            entity.Property(e => e.UrzBnkFirma1)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkFirma1");
            entity.Property(e => e.UrzBnkFirma2)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkFirma2");
            entity.Property(e => e.UrzBnkFirma3)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkFirma3");
            entity.Property(e => e.UrzBnkFirma4)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkFirma4");
            entity.Property(e => e.UrzBnkLp1)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkLp1");
            entity.Property(e => e.UrzBnkLp2)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkLp2");
            entity.Property(e => e.UrzBnkLp3)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkLp3");
            entity.Property(e => e.UrzBnkLp4)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkLp4");
            entity.Property(e => e.UrzBnkNumer1)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkNumer1");
            entity.Property(e => e.UrzBnkNumer2)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkNumer2");
            entity.Property(e => e.UrzBnkNumer3)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkNumer3");
            entity.Property(e => e.UrzBnkNumer4)
                .HasDefaultValue(0)
                .HasColumnName("URZ_BnkNumer4");
            entity.Property(e => e.UrzBnkTyp1)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkTyp1");
            entity.Property(e => e.UrzBnkTyp2)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkTyp2");
            entity.Property(e => e.UrzBnkTyp3)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkTyp3");
            entity.Property(e => e.UrzBnkTyp4)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_BnkTyp4");
            entity.Property(e => e.UrzEmail)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Email");
            entity.Property(e => e.UrzFax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Fax");
            entity.Property(e => e.UrzFormaPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("URZ_FormaPl");
            entity.Property(e => e.UrzGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("URZ_GIDFirma");
            entity.Property(e => e.UrzGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_GIDLp");
            entity.Property(e => e.UrzGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("URZ_GIDTyp");
            entity.Property(e => e.UrzGmina)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Gmina");
            entity.Property(e => e.UrzKodP)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_KodP");
            entity.Property(e => e.UrzKodUc)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_KodUC");
            entity.Property(e => e.UrzKontoKs1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_KontoKs1");
            entity.Property(e => e.UrzKontoKs2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_KontoKs2");
            entity.Property(e => e.UrzKontoKs3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_KontoKs3");
            entity.Property(e => e.UrzKontoKs4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_KontoKs4");
            entity.Property(e => e.UrzKraj)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Kraj");
            entity.Property(e => e.UrzMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Miasto");
            entity.Property(e => e.UrzModem)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Modem");
            entity.Property(e => e.UrzNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Nazwa");
            entity.Property(e => e.UrzNazwa1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Nazwa1");
            entity.Property(e => e.UrzNrRachunku1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_NrRachunku1");
            entity.Property(e => e.UrzNrRachunku2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_NrRachunku2");
            entity.Property(e => e.UrzNrRachunku3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_NrRachunku3");
            entity.Property(e => e.UrzNrRachunku4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_NrRachunku4");
            entity.Property(e => e.UrzNrb1)
                .HasDefaultValue((byte)0)
                .HasColumnName("URZ_NRB1");
            entity.Property(e => e.UrzNrb2)
                .HasDefaultValue((byte)0)
                .HasColumnName("URZ_NRB2");
            entity.Property(e => e.UrzNrb3)
                .HasDefaultValue((byte)0)
                .HasColumnName("URZ_NRB3");
            entity.Property(e => e.UrzNrb4)
                .HasDefaultValue((byte)0)
                .HasColumnName("URZ_NRB4");
            entity.Property(e => e.UrzPowiat)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Powiat");
            entity.Property(e => e.UrzTelefon1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Telefon1");
            entity.Property(e => e.UrzTelefon2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Telefon2");
            entity.Property(e => e.UrzTelex)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Telex");
            entity.Property(e => e.UrzTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("URZ_Typ");
            entity.Property(e => e.UrzUlica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Ulica");
            entity.Property(e => e.UrzUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_URL");
            entity.Property(e => e.UrzWojewodztwo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URZ_Wojewodztwo");
        });

        modelBuilder.Entity<UrzedyOpisy>(entity =>
        {
            entity.HasKey(e => e.UroGidnumer).HasName("URO_Primary");

            entity.ToTable("UrzedyOpisy", "CDN");

            entity.Property(e => e.UroGidnumer).HasColumnName("URO_GIDNumer");
            entity.Property(e => e.UroGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("URO_GIDFirma");
            entity.Property(e => e.UroGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("URO_GIDLp");
            entity.Property(e => e.UroGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("URO_GIDTyp");
            entity.Property(e => e.UroOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("URO_Opis");

            entity.HasOne(d => d.UroGidnumerNavigation).WithOne(p => p.UrzedyOpisy)
                .HasForeignKey<UrzedyOpisy>(d => d.UroGidnumer)
                .HasConstraintName("FK_UroPrimary");
        });

        modelBuilder.Entity<UstawieniaList>(entity =>
        {
            entity.HasKey(e => new { e.UltProcedura, e.UltIdkontrolki, e.UltIdoperatora }).HasName("ULT_Primary");

            entity.ToTable("UstawieniaList", "CDN");

            entity.Property(e => e.UltProcedura).HasColumnName("ULT_Procedura");
            entity.Property(e => e.UltIdkontrolki).HasColumnName("ULT_IDKontrolki");
            entity.Property(e => e.UltIdoperatora).HasColumnName("ULT_IDOperatora");
            entity.Property(e => e.UltAktywna)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULT_Aktywna");
            entity.Property(e => e.UltKolor1)
                .HasDefaultValue(-1)
                .HasColumnName("ULT_Kolor1");
            entity.Property(e => e.UltKolor2)
                .HasDefaultValue(16316664)
                .HasColumnName("ULT_Kolor2");
            entity.Property(e => e.UltKrojCzcionki)
                .HasMaxLength(99)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ULT_KrojCzcionki");
            entity.Property(e => e.UltPominDodatkoweKol)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULT_PominDodatkoweKol");
            entity.Property(e => e.UltRozmiarCzcionki)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULT_RozmiarCzcionki");
            entity.Property(e => e.UltWysWierszy)
                .HasDefaultValue((byte)0)
                .HasColumnName("ULT_WysWierszy");

            entity.HasOne(d => d.UltIdoperatoraNavigation).WithMany(p => p.UstawieniaLists)
                .HasForeignKey(d => d.UltIdoperatora)
                .HasConstraintName("FK_ULTPrimary");
        });

        modelBuilder.Entity<WalElem>(entity =>
        {
            entity.HasKey(e => new { e.WaESymbol, e.WaELp, e.WaEKursTs }).HasName("WaE_Primary");

            entity.ToTable("WalElem", "CDN");

            entity.Property(e => e.WaESymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaE_Symbol");
            entity.Property(e => e.WaELp).HasColumnName("WaE_Lp");
            entity.Property(e => e.WaEKursTs).HasColumnName("WaE_KursTS");
            entity.Property(e => e.WaEKursL)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("WaE_KursL");
            entity.Property(e => e.WaEKursM)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("WaE_KursM");
            entity.Property(e => e.WaEOpisKursu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaE_OpisKursu");

            entity.HasOne(d => d.WaESymbolNavigation).WithMany(p => p.WalElems)
                .HasForeignKey(d => d.WaESymbol)
                .HasConstraintName("FK_WaEPrimary");
        });

        modelBuilder.Entity<WalNag>(entity =>
        {
            entity.HasKey(e => e.WaNSymbol).HasName("WaN_Primary");

            entity.ToTable("WalNag", "CDN");

            entity.HasIndex(e => e.WaNId, "WANId").IsUnique();

            entity.Property(e => e.WaNSymbol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_Symbol");
            entity.Property(e => e.WaNAktywna)
                .HasDefaultValue(0)
                .HasColumnName("WaN_Aktywna");
            entity.Property(e => e.WaNCzySystemowaOptima)
                .HasDefaultValue((byte)0)
                .HasColumnName("WaN_CzySystemowaOptima");
            entity.Property(e => e.WaNId)
                .ValueGeneratedOnAdd()
                .HasColumnName("WaN_Id");
            entity.Property(e => e.WaNKontoMinus)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_KontoMinus");
            entity.Property(e => e.WaNKontoPlus)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_KontoPlus");
            entity.Property(e => e.WaNNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_Nazwa");
            entity.Property(e => e.WaNPanstwo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_Panstwo");
            entity.Property(e => e.WaNParytet)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("WaN_Parytet");
            entity.Property(e => e.WaNSlownie1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_Slownie1");
            entity.Property(e => e.WaNSlownie2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_Slownie2");
            entity.Property(e => e.WaNSymbolEmu)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WaN_SymbolEMU");
            entity.Property(e => e.WaNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("WaN_Wsk");
        });

        modelBuilder.Entity<WfDefAkcje>(entity =>
        {
            entity.HasKey(e => e.WdaId).HasName("WDA_Primary");

            entity.ToTable("WF_DefAkcje", "CDN", tb =>
                {
                    tb.HasTrigger("WF_DefAkcje_DeleteHandler");
                    tb.HasTrigger("WF_DefAkcje_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.WdaWdpid, e.WdaNazwa }, "WDANazwa").IsUnique();

            entity.Property(e => e.WdaId).HasColumnName("WDA_ID");
            entity.Property(e => e.WdaArchiwizujEmail)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDA_ArchiwizujEMail");
            entity.Property(e => e.WdaDozwoloneInneAkcje)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDA_DozwoloneInneAkcje");
            entity.Property(e => e.WdaKluczowa)
                .HasDefaultValue(0)
                .HasColumnName("WDA_KLUCZOWA");
            entity.Property(e => e.WdaNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDA_NAZWA");
            entity.Property(e => e.WdaParametry)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDA_PARAMETRY");
            entity.Property(e => e.WdaUruchomGdyZamkniety)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDA_UruchomGdyZamkniety");
            entity.Property(e => e.WdaWdpid)
                .HasDefaultValue(0)
                .HasColumnName("WDA_WDPID");
            entity.Property(e => e.WdaWdpuruchomId)
                .HasDefaultValue(0)
                .HasColumnName("WDA_WDPUruchomId");
            entity.Property(e => e.WdaWstecz)
                .HasDefaultValue((short)0)
                .HasColumnName("WDA_WSTECZ");
        });

        modelBuilder.Entity<WfDefOpiekun>(entity =>
        {
            entity.HasKey(e => new { e.WdoWdzid, e.WdoOpityp, e.WdoOpinumer }).HasName("WDO_Primary");

            entity.ToTable("WF_DefOpiekun", "CDN", tb => tb.HasTrigger("WF_DefOpiekun_InsertUpdateHandler"));

            entity.Property(e => e.WdoWdzid).HasColumnName("WDO_WDZID");
            entity.Property(e => e.WdoOpityp).HasColumnName("WDO_OPITyp");
            entity.Property(e => e.WdoOpinumer).HasColumnName("WDO_OPINumer");
            entity.Property(e => e.WdoPodCentra)
                .HasDefaultValue((short)0)
                .HasColumnName("WDO_PodCentra");
        });

        modelBuilder.Entity<WfDefProcesy>(entity =>
        {
            entity.HasKey(e => e.WdpId).HasName("WDP_Primary");

            entity.ToTable("WF_DefProcesy", "CDN", tb =>
                {
                    tb.HasTrigger("WF_DefProcesyAlias_DeleteHandler");
                    tb.HasTrigger("WF_DefProcesy_DeleteHandler");
                    tb.HasTrigger("WF_DefProcesy_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.WdpWdgid, "WDPGrupa");

            entity.HasIndex(e => e.WdpNazwa, "WDPNazwa").IsUnique();

            entity.Property(e => e.WdpId).HasColumnName("WDP_ID");
            entity.Property(e => e.WdpDozwoloneInneAkcje)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDP_DozwoloneInneAkcje");
            entity.Property(e => e.WdpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDP_Nazwa");
            entity.Property(e => e.WdpPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDP_Predefiniowany");
            entity.Property(e => e.WdpPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("WDP_Priorytet");
            entity.Property(e => e.WdpStan)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDP_Stan");
            entity.Property(e => e.WdpTypObiektu)
                .HasDefaultValue((short)0)
                .HasColumnName("WDP_TypObiektu");
            entity.Property(e => e.WdpWdgid)
                .HasDefaultValue(0)
                .HasColumnName("WDP_WDGId");
        });

        modelBuilder.Entity<WfDefProcesyGrupy>(entity =>
        {
            entity.HasKey(e => e.WdgId).HasName("WDG_Primary");

            entity.ToTable("WF_DefProcesyGrupy", "CDN", tb => tb.HasTrigger("WF_DefProcesyGrupy_DeleteHandler"));

            entity.Property(e => e.WdgId).HasColumnName("WDG_Id");
            entity.Property(e => e.WdgNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDG_Nazwa");
        });

        modelBuilder.Entity<WfDefStatKonc>(entity =>
        {
            entity.HasKey(e => new { e.WdkWdzid, e.WdkWdsid }).HasName("WDK_Primary");

            entity.ToTable("WF_DefStatKonc", "CDN", tb => tb.HasTrigger("WF_DefStatKonc_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.WdkWdzid, e.WdkLp }, "WDKLp").IsUnique();

            entity.Property(e => e.WdkWdzid).HasColumnName("WDK_WDZID");
            entity.Property(e => e.WdkWdsid).HasColumnName("WDK_WDSID");
            entity.Property(e => e.WdkLp)
                .HasDefaultValue(0)
                .HasColumnName("WDK_LP");
            entity.Property(e => e.WdkOpis)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDK_Opis");
            entity.Property(e => e.WdkSql)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDK_SQL");

            entity.HasOne(d => d.WdkWdz).WithMany(p => p.WfDefStatKoncs)
                .HasForeignKey(d => d.WdkWdzid)
                .HasConstraintName("FK_WDKPrimary");
        });

        modelBuilder.Entity<WfDefStatusy>(entity =>
        {
            entity.HasKey(e => e.WdsId).HasName("WDS_Primary");

            entity.ToTable("WF_DefStatusy", "CDN", tb =>
                {
                    tb.HasTrigger("WF_DefStatusyAlias1_DeleteHandler");
                    tb.HasTrigger("WF_DefStatusyAlias_DeleteHandler");
                    tb.HasTrigger("WF_DefStatusy_DeleteHandler");
                });

            entity.HasIndex(e => new { e.WdsWdpid, e.WdsKod }, "WDSKodStatusu").IsUnique();

            entity.Property(e => e.WdsId).HasColumnName("WDS_ID");
            entity.Property(e => e.WdsCzasRealizacji)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_CzasRealizacji");
            entity.Property(e => e.WdsCzasRealizacjiSek)
                .HasDefaultValue(0)
                .HasColumnName("WDS_CzasRealizacjiSek");
            entity.Property(e => e.WdsDataPrzypomnienia)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_DataPrzypomnienia");
            entity.Property(e => e.WdsDataPrzypomnieniaSek)
                .HasDefaultValue(0)
                .HasColumnName("WDS_DataPrzypomnieniaSek");
            entity.Property(e => e.WdsDataRealizacji)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_DataRealizacji");
            entity.Property(e => e.WdsDataRealizacjiSek)
                .HasDefaultValue(0)
                .HasColumnName("WDS_DataRealizacjiSek");
            entity.Property(e => e.WdsDataWaznosci)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_DataWaznosci");
            entity.Property(e => e.WdsDataWaznosciSek)
                .HasDefaultValue(0)
                .HasColumnName("WDS_DataWaznosciSek");
            entity.Property(e => e.WdsKod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_Kod");
            entity.Property(e => e.WdsLp)
                .HasDefaultValue(0)
                .HasColumnName("WDS_Lp");
            entity.Property(e => e.WdsNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_Nazwa");
            entity.Property(e => e.WdsOperator)
                .HasDefaultValue(0)
                .HasColumnName("WDS_Operator");
            entity.Property(e => e.WdsPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("WDS_Priorytet");
            entity.Property(e => e.WdsPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDS_Przypomnienie");
            entity.Property(e => e.WdsRodzajDatyRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDS_RodzajDatyRealizacji");
            entity.Property(e => e.WdsRodzajTerminuRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDS_RodzajTerminuRealizacji");
            entity.Property(e => e.WdsTerminRealizacji)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_TerminRealizacji");
            entity.Property(e => e.WdsTerminRealizacjiSek)
                .HasDefaultValue(0)
                .HasColumnName("WDS_TerminRealizacjiSek");
            entity.Property(e => e.WdsTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDS_Terminarz");
            entity.Property(e => e.WdsWarunekWej)
                .HasMaxLength(2047)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDS_WarunekWej");
            entity.Property(e => e.WdsWdpid)
                .HasDefaultValue(0)
                .HasColumnName("WDS_WDPID");

            entity.HasOne(d => d.WdsWdp).WithMany(p => p.WfDefStatusies)
                .HasForeignKey(d => d.WdsWdpid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WDSKodStatusu");
        });

        modelBuilder.Entity<WfDefZadanium>(entity =>
        {
            entity.HasKey(e => e.WdzId).HasName("WDZ_Primary");

            entity.ToTable("WF_DefZadania", "CDN", tb =>
                {
                    tb.HasTrigger("WF_DefZadaniaAlias_DeleteHandler");
                    tb.HasTrigger("WF_DefZadania_DeleteHandler");
                    tb.HasTrigger("WF_DefZadania_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.WdzWdsid, "WDZStatus");

            entity.Property(e => e.WdzId).HasColumnName("WDZ_ID");
            entity.Property(e => e.WdzLp)
                .HasDefaultValue(0)
                .HasColumnName("WDZ_LP");
            entity.Property(e => e.WdzOpiekunId)
                .HasDefaultValue(0)
                .HasColumnName("WDZ_OpiekunId");
            entity.Property(e => e.WdzOpiekunSql)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WDZ_OpiekunSQL");
            entity.Property(e => e.WdzOpiekunTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("WDZ_OpiekunTyp");
            entity.Property(e => e.WdzWdaid)
                .HasDefaultValue(0)
                .HasColumnName("WDZ_WDAID");
            entity.Property(e => e.WdzWdpid)
                .HasDefaultValue(0)
                .HasColumnName("WDZ_WDPID");
            entity.Property(e => e.WdzWdsid)
                .HasDefaultValue(0)
                .HasColumnName("WDZ_WDSID");
            entity.Property(e => e.WdzWstecz)
                .HasDefaultValue((short)0)
                .HasColumnName("WDZ_Wstecz");
            entity.Property(e => e.WdzWynik)
                .HasDefaultValue(0)
                .HasColumnName("WDZ_Wynik");

            entity.HasOne(d => d.WdzWdp).WithMany(p => p.WfDefZadania)
                .HasForeignKey(d => d.WdzWdpid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WDZProces");
        });

        modelBuilder.Entity<WfHarmonogramAutomatu>(entity =>
        {
            entity.HasKey(e => e.WfhId).HasName("WFH_Primary");

            entity.ToTable("WF_HarmonogramAutomatu", "CDN");

            entity.HasIndex(e => e.WfhSlwId, "WFHSlwId");

            entity.Property(e => e.WfhId).HasColumnName("WFH_Id");
            entity.Property(e => e.WfhDataRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("WFH_DataRozpoczecia");
            entity.Property(e => e.WfhDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("WFH_DataZakonczenia");
            entity.Property(e => e.WfhDni)
                .HasDefaultValue((short)0)
                .HasColumnName("WFH_Dni");
            entity.Property(e => e.WfhGodzinaRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("WFH_GodzinaRozpoczecia");
            entity.Property(e => e.WfhGodzinaZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("WFH_GodzinaZakonczenia");
            entity.Property(e => e.WfhInterwal)
                .HasDefaultValue(0)
                .HasColumnName("WFH_Interwal");
            entity.Property(e => e.WfhOdstep)
                .HasDefaultValue((short)0)
                .HasColumnName("WFH_Odstep");
            entity.Property(e => e.WfhSlwId)
                .HasDefaultValue(0)
                .HasColumnName("WFH_SlwId");
            entity.Property(e => e.WfhTypCyklu)
                .HasDefaultValue((short)0)
                .HasColumnName("WFH_TypCyklu");

            entity.HasOne(d => d.WfhSlw).WithMany(p => p.WfHarmonogramAutomatus)
                .HasForeignKey(d => d.WfhSlwId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WFHSlwId");
        });

        modelBuilder.Entity<WfProcesy>(entity =>
        {
            entity.HasKey(e => e.WfpId).HasName("WFP_Primary");

            entity.ToTable("WF_Procesy", "CDN", tb =>
                {
                    tb.HasTrigger("WF_Procesy_DeleteHandler");
                    tb.HasTrigger("WF_Procesy_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.WfpObinumer, e.WfpObityp }, "WFPObiekt");

            entity.Property(e => e.WfpId).HasColumnName("WFP_ID");
            entity.Property(e => e.WfpDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("WFP_DataUtworzenia");
            entity.Property(e => e.WfpDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("WFP_DataZamkniecia");
            entity.Property(e => e.WfpNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFP_Nazwa");
            entity.Property(e => e.WfpNazwaObiektu)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFP_NazwaObiektu");
            entity.Property(e => e.WfpObilp)
                .HasDefaultValue((short)0)
                .HasColumnName("WFP_OBILp");
            entity.Property(e => e.WfpObinumer)
                .HasDefaultValue(0)
                .HasColumnName("WFP_OBINumer");
            entity.Property(e => e.WfpObityp)
                .HasDefaultValue((short)0)
                .HasColumnName("WFP_OBITyp");
            entity.Property(e => e.WfpOpis)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFP_Opis");
            entity.Property(e => e.WfpPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("WFP_PrcNumer");
            entity.Property(e => e.WfpPrcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WFP_PrcTyp");
            entity.Property(e => e.WfpPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("WFP_Priorytet");
            entity.Property(e => e.WfpUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFP_URL");
            entity.Property(e => e.WfpWdpid)
                .HasDefaultValue(0)
                .HasColumnName("WFP_WDPID");
            entity.Property(e => e.WfpZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("WFP_ZrdNumer");
        });

        modelBuilder.Entity<WfZadanium>(entity =>
        {
            entity.HasKey(e => e.WfzId).HasName("WFZ_Primary");

            entity.ToTable("WF_Zadania", "CDN", tb =>
                {
                    tb.HasTrigger("WF_Zadania_DeleteHandler");
                    tb.HasTrigger("WF_Zadania_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.WfzDataZamkniecia, e.WfzOpinumer, e.WfzOpityp, e.WfzDataRealizacji }, "WFZData");

            entity.HasIndex(e => new { e.WfzWfpid, e.WfzWdsid, e.WfzDataZamkniecia, e.WfzDataUtworzenia }, "WFZOpt1");

            entity.HasIndex(e => new { e.WfzWfpid, e.WfzDataUtworzenia }, "WFZProces");

            entity.HasIndex(e => e.WfzDataZamkniecia, "WFZWykonane");

            entity.Property(e => e.WfzId).HasColumnName("WFZ_ID");
            entity.Property(e => e.WfzAkcja)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFZ_Akcja");
            entity.Property(e => e.WfzCzasRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_CzasRealizacji");
            entity.Property(e => e.WfzDataPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_DataPrzypomnienia");
            entity.Property(e => e.WfzDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_DataRealizacji");
            entity.Property(e => e.WfzDataUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_DataUtworzenia");
            entity.Property(e => e.WfzDataWaznosci)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_DataWaznosci");
            entity.Property(e => e.WfzDataZamkniecia)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_DataZamkniecia");
            entity.Property(e => e.WfzOpinumer)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_OPINumer");
            entity.Property(e => e.WfzOpis)
                .HasMaxLength(1023)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFZ_Opis");
            entity.Property(e => e.WfzOpityp)
                .HasDefaultValue((short)0)
                .HasColumnName("WFZ_OPITyp");
            entity.Property(e => e.WfzPrcnumer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFZ_PRCNumer");
            entity.Property(e => e.WfzPrctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WFZ_PRCTyp");
            entity.Property(e => e.WfzPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("WFZ_Przypomnienie");
            entity.Property(e => e.WfzStatus)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WFZ_Status");
            entity.Property(e => e.WfzTerminRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_TerminRealizacji");
            entity.Property(e => e.WfzTerminarz)
                .HasDefaultValue((byte)0)
                .HasColumnName("WFZ_Terminarz");
            entity.Property(e => e.WfzWdsid)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_WDSID");
            entity.Property(e => e.WfzWdzid)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_WDZID");
            entity.Property(e => e.WfzWfpid)
                .HasDefaultValue(0)
                .HasColumnName("WFZ_WFPID");

            entity.HasOne(d => d.WfzWfp).WithMany(p => p.WfZadania)
                .HasForeignKey(d => d.WfzWfpid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WFZProces");
        });

        modelBuilder.Entity<WkrDefinicje2>(entity =>
        {
            entity.HasKey(e => e.WkD2WkDid).HasName("WkD2_Primary");

            entity.ToTable("WkrDefinicje2", "CDN");

            entity.HasIndex(e => new { e.WkD2StanId, e.WkD2Nazwa }, "WkD2Nazwa").IsUnique();

            entity.Property(e => e.WkD2WkDid).HasColumnName("WkD2_WkDID");
            entity.Property(e => e.WkD2Autor)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_Autor");
            entity.Property(e => e.WkD2DataMod)
                .HasDefaultValue(0)
                .HasColumnName("WkD2_DataMod");
            entity.Property(e => e.WkD2DataUtw)
                .HasDefaultValue(0)
                .HasColumnName("WkD2_DataUtw");
            entity.Property(e => e.WkD2DolaczDoPliku)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_DolaczDoPliku");
            entity.Property(e => e.WkD2Email)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_EMail");
            entity.Property(e => e.WkD2EmailAdres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_EMailAdres");
            entity.Property(e => e.WkD2EmailAdresPodmiotId)
                .HasDefaultValue(0)
                .HasColumnName("WkD2_EMailAdresPodmiotID");
            entity.Property(e => e.WkD2EmailAdresPodmiotTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_EMailAdresPodmiotTyp");
            entity.Property(e => e.WkD2Exe)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_Exe");
            entity.Property(e => e.WkD2ExeSpec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_ExeSpec");
            entity.Property(e => e.WkD2Format)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_Format");
            entity.Property(e => e.WkD2Haslo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_Haslo");
            entity.Property(e => e.WkD2HasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_Haslo_chk");
            entity.Property(e => e.WkD2Kompresja)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_Kompresja");
            entity.Property(e => e.WkD2Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_Nazwa");
            entity.Property(e => e.WkD2NrWersji)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_NrWersji");
            entity.Property(e => e.WkD2Opis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_Opis");
            entity.Property(e => e.WkD2ParametryGraficzne)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_ParametryGraficzne");
            entity.Property(e => e.WkD2Plik)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_Plik");
            entity.Property(e => e.WkD2PlikKatalog)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_PlikKatalog");
            entity.Property(e => e.WkD2PlikNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_PlikNazwa");
            entity.Property(e => e.WkD2Podglad)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_Podglad");
            entity.Property(e => e.WkD2PoleTabeli)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_PoleTabeli");
            entity.Property(e => e.WkD2PropX)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_PropX");
            entity.Property(e => e.WkD2StanId)
                .HasDefaultValue(0)
                .HasColumnName("WkD2_StanID");
            entity.Property(e => e.WkD2Timeout)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_Timeout");
            entity.Property(e => e.WkD2TypAkcji)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_TypAkcji");
            entity.Property(e => e.WkD2TypWyniku)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_TypWyniku");
            entity.Property(e => e.WkD2WynikSkalarny)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_WynikSkalarny");
            entity.Property(e => e.WkD2XslSpec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkD2_XslSpec");
            entity.Property(e => e.WkD2ZapisujHistorie)
                .HasDefaultValue((byte)0)
                .HasColumnName("WkD2_ZapisujHistorie");
            entity.Property(e => e.WkD2Zapytanie)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("WkD2_Zapytanie");
            entity.Property(e => e.WkD2Zaznaczenia)
                .HasDefaultValue((short)0)
                .HasColumnName("WkD2_Zaznaczenia");
        });

        modelBuilder.Entity<WkrDefinicjeU>(entity =>
        {
            entity.HasKey(e => e.WkDuWkDid).HasName("WkDU_Primary");

            entity.ToTable("WkrDefinicjeU", "CDN");

            entity.Property(e => e.WkDuWkDid).HasColumnName("WkDU_WkDID");
            entity.Property(e => e.WkDuDolaczDoPliku)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_DolaczDoPliku");
            entity.Property(e => e.WkDuEmail)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_EMail");
            entity.Property(e => e.WkDuEmailAdres)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkDU_EMailAdres");
            entity.Property(e => e.WkDuEmailAdresPodmiotId)
                .HasDefaultValue(0)
                .HasColumnName("WkDU_EMailAdresPodmiotID");
            entity.Property(e => e.WkDuEmailAdresPodmiotTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_EMailAdresPodmiotTyp");
            entity.Property(e => e.WkDuExe)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_Exe");
            entity.Property(e => e.WkDuExeSpec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkDU_ExeSpec");
            entity.Property(e => e.WkDuFormat)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_Format");
            entity.Property(e => e.WkDuPlik)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_Plik");
            entity.Property(e => e.WkDuPlikKatalog)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkDU_PlikKatalog");
            entity.Property(e => e.WkDuPlikNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkDU_PlikNazwa");
            entity.Property(e => e.WkDuPodglad)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_Podglad");
            entity.Property(e => e.WkDuStanId)
                .HasDefaultValue(0)
                .HasColumnName("WkDU_StanID");
            entity.Property(e => e.WkDuTimeout)
                .HasDefaultValue((short)0)
                .HasColumnName("WkDU_Timeout");
            entity.Property(e => e.WkDuXslSpec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkDU_XslSpec");
            entity.Property(e => e.WkDuZapisujHistorie)
                .HasDefaultValue((byte)0)
                .HasColumnName("WkDU_ZapisujHistorie");
        });

        modelBuilder.Entity<WkrDomyslne2>(entity =>
        {
            entity.HasKey(e => new { e.WkY2ProcId, e.WkY2KontekstId, e.WkY2NadId }).HasName("WkY2_Primary");

            entity.ToTable("WkrDomyslne2", "CDN");

            entity.Property(e => e.WkY2ProcId).HasColumnName("WkY2_ProcID");
            entity.Property(e => e.WkY2KontekstId).HasColumnName("WkY2_KontekstID");
            entity.Property(e => e.WkY2NadId).HasColumnName("WkY2_NadID");
            entity.Property(e => e.WkY2WkDid)
                .HasDefaultValue(0)
                .HasColumnName("WkY2_WkDID");
        });

        modelBuilder.Entity<WkrDomyslneU>(entity =>
        {
            entity.HasKey(e => new { e.WkYuProcId, e.WkYuKontekstId, e.WkYuNadId }).HasName("WkYU_Primary");

            entity.ToTable("WkrDomyslneU", "CDN");

            entity.Property(e => e.WkYuProcId).HasColumnName("WkYU_ProcID");
            entity.Property(e => e.WkYuKontekstId).HasColumnName("WkYU_KontekstID");
            entity.Property(e => e.WkYuNadId).HasColumnName("WkYU_NadID");
            entity.Property(e => e.WkYuWkDid)
                .HasDefaultValue(0)
                .HasColumnName("WkYU_WkDID");
        });

        modelBuilder.Entity<WkrMapa02>(entity =>
        {
            entity.HasKey(e => new { e.WkM02ProcId, e.WkM02KontekstId, e.WkM02WkDid }).HasName("WkM02_Primary");

            entity.ToTable("WkrMapa02", "CDN");

            entity.HasIndex(e => new { e.WkM02ProcId, e.WkM02KontekstId, e.WkM02WkDlp }, "WkM02ProcKontLp").IsUnique();

            entity.Property(e => e.WkM02ProcId).HasColumnName("WkM02_ProcID");
            entity.Property(e => e.WkM02KontekstId).HasColumnName("WkM02_KontekstID");
            entity.Property(e => e.WkM02WkDid).HasColumnName("WkM02_WkDID");
            entity.Property(e => e.WkM02Warunek)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkM02_Warunek");
            entity.Property(e => e.WkM02WkDlp)
                .HasDefaultValue(0)
                .HasColumnName("WkM02_WkDLp");
        });

        modelBuilder.Entity<WkrMapa0U>(entity =>
        {
            entity.HasKey(e => new { e.WkM0uProcId, e.WkM0uKontekstId, e.WkM0uWkDid }).HasName("WkM0U_Primary");

            entity.ToTable("WkrMapa0U", "CDN");

            entity.Property(e => e.WkM0uProcId).HasColumnName("WkM0U_ProcID");
            entity.Property(e => e.WkM0uKontekstId).HasColumnName("WkM0U_KontekstID");
            entity.Property(e => e.WkM0uWkDid).HasColumnName("WkM0U_WkDID");
            entity.Property(e => e.WkM0uWarunek)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkM0U_Warunek");
        });

        modelBuilder.Entity<WkrMapa2>(entity =>
        {
            entity.HasKey(e => new { e.WkM2NadId, e.WkM2PodId }).HasName("WkM2_Primary");

            entity.ToTable("WkrMapa2", "CDN");

            entity.HasIndex(e => new { e.WkM2NadId, e.WkM2PodLp }, "WkM2NadPodLp").IsUnique();

            entity.Property(e => e.WkM2NadId).HasColumnName("WkM2_NadID");
            entity.Property(e => e.WkM2PodId).HasColumnName("WkM2_PodID");
            entity.Property(e => e.WkM2PodLp)
                .HasDefaultValue(0)
                .HasColumnName("WkM2_PodLp");
        });

        modelBuilder.Entity<WkrUlubione2>(entity =>
        {
            entity.HasKey(e => new { e.WkU2OpeId, e.WkU2ZrodloId, e.WkU2WkDid }).HasName("WkU2_Primary");

            entity.ToTable("WkrUlubione2", "CDN");

            entity.Property(e => e.WkU2OpeId).HasColumnName("WkU2_OpeID");
            entity.Property(e => e.WkU2ZrodloId).HasColumnName("WkU2_ZrodloID");
            entity.Property(e => e.WkU2WkDid).HasColumnName("WkU2_WkDID");
        });

        modelBuilder.Entity<WkrWstawki2>(entity =>
        {
            entity.HasKey(e => e.WkW2WkWid).HasName("WkW2_Primary");

            entity.ToTable("WkrWstawki2", "CDN");

            entity.HasIndex(e => e.WkW2Nazwa, "WkW2Nazwa").IsUnique();

            entity.Property(e => e.WkW2WkWid).HasColumnName("WkW2_WkWID");
            entity.Property(e => e.WkW2Autor)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkW2_Autor");
            entity.Property(e => e.WkW2Haslo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkW2_Haslo");
            entity.Property(e => e.WkW2HasloChk)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkW2_Haslo_chk");
            entity.Property(e => e.WkW2Nazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkW2_Nazwa");
            entity.Property(e => e.WkW2NrWersji)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkW2_NrWersji");
            entity.Property(e => e.WkW2Tekst)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("WkW2_Tekst");
        });

        modelBuilder.Entity<WkrZaznaczenia2>(entity =>
        {
            entity.HasKey(e => new { e.WkZ2Guid, e.WkZ2RekordLp }).HasName("WkZ2_Primary");

            entity.ToTable("WkrZaznaczenia2", "CDN");

            entity.Property(e => e.WkZ2Guid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WkZ2_GUID");
            entity.Property(e => e.WkZ2RekordLp).HasColumnName("WkZ2_RekordLp");
            entity.Property(e => e.WkZ2Gidfirma)
                .HasDefaultValue(0)
                .HasColumnName("WkZ2_GIDFirma");
            entity.Property(e => e.WkZ2Gidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("WkZ2_GIDLp");
            entity.Property(e => e.WkZ2Gidnumer)
                .HasDefaultValue(0)
                .HasColumnName("WkZ2_GIDNumer");
            entity.Property(e => e.WkZ2Gidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WkZ2_GIDTyp");
        });

        modelBuilder.Entity<WmsVWymWmsmagazyn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WMS_vWym_WMSMagazyn");

            entity.Property(e => e.WmsmAdres)
                .HasMaxLength(152)
                .HasColumnName("WMSM_Adres");
            entity.Property(e => e.WmsmCzyMagazynWms)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_CzyMagazynWMS");
            entity.Property(e => e.WmsmCzyWirtualny)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_CzyWirtualny");
            entity.Property(e => e.WmsmCzyZbiorczy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_CzyZbiorczy");
            entity.Property(e => e.WmsmNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WMSM_Nazwa");
            entity.Property(e => e.WmsmOdpowiedzialnyOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_OdpowiedzialnyOrgID");
            entity.Property(e => e.WmsmOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WMSM_Opis");
            entity.Property(e => e.WmsmOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_OrgID");
            entity.Property(e => e.WmsmOsobaOdpowiedzialna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_OsobaOdpowiedzialna");
            entity.Property(e => e.WmsmStoreId).HasColumnName("WMSM_StoreID");
            entity.Property(e => e.WmsmSymbol)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_Symbol");
            entity.Property(e => e.WmsmTyp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSM_Typ");
        });

        modelBuilder.Entity<WmsVWymWmsstrukturaMagazynu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WMS_vWym_WMSStrukturaMagazynu");

            entity.Property(e => e.WmssCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSS_Code");
            entity.Property(e => e.WmssDescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WMSS_Description");
            entity.Property(e => e.WmssFullCode)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("WMSS_FullCode");
            entity.Property(e => e.WmssName)
                .HasMaxLength(101)
                .IsUnicode(false)
                .HasColumnName("WMSS_Name");
            entity.Property(e => e.WmssOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSS_OrgID");
            entity.Property(e => e.WmssParOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSS_ParOrgID");
            entity.Property(e => e.WmssWmscworgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSS_WMSCWOrgID");
            entity.Property(e => e.WmssWmsworgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WMSS_WMSWOrgID");
        });

        modelBuilder.Entity<WmstresciDok>(entity =>
        {
            entity.HasKey(e => new { e.WmDGidtyp, e.WmDGidnumer }).HasName("WmD_Primary");

            entity.ToTable("WMSTresciDok", "CDN");

            entity.Property(e => e.WmDGidtyp).HasColumnName("WmD_GIDTyp");
            entity.Property(e => e.WmDGidnumer).HasColumnName("WmD_GIDNumer");
            entity.Property(e => e.WmDIdTresci).HasColumnName("WmD_IdTresci");
            entity.Property(e => e.WmDSzczegoly)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WmD_Szczegoly");
        });

        modelBuilder.Entity<Wnioski>(entity =>
        {
            entity.HasKey(e => e.WnoGidnumer).HasName("WNO_Primary");

            entity.ToTable("Wnioski", "CDN", tb => tb.HasTrigger("Wnioski_InsertUpdateHandler"));

            entity.HasIndex(e => e.WnoTstampWpr, "WNOKeyDataWpr");

            entity.HasIndex(e => new { e.WnoDlgNumer, e.WnoDlgLp }, "WNOKeyDelegacje");

            entity.HasIndex(e => e.WnoFrsnumer, "WNOKeyFrsID");

            entity.HasIndex(e => e.WnoKazNumer, "WNOKeyKazNumer");

            entity.HasIndex(e => new { e.WnoGidtyp, e.WnoRok, e.WnoMiesiac, e.WnoSeria, e.WnoNumer }, "WNOKeyNumer").IsUnique();

            entity.HasIndex(e => e.WnoPrcnumer, "WNOKeyPrcNumer");

            entity.HasIndex(e => e.WnoStan, "WNOKeyStan");

            entity.Property(e => e.WnoGidnumer).HasColumnName("WNO_GIDNumer");
            entity.Property(e => e.WnoAktywny)
                .HasDefaultValue(0)
                .HasColumnName("WNO_Aktywny");
            entity.Property(e => e.WnoDlgLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WNO_DlgLp");
            entity.Property(e => e.WnoDlgNumer)
                .HasDefaultValue(0)
                .HasColumnName("WNO_DlgNumer");
            entity.Property(e => e.WnoEprcnumerAnul)
                .HasDefaultValue(0)
                .HasColumnName("WNO_EPRCNumerAnul");
            entity.Property(e => e.WnoEprcnumerZapisuKb)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNO_EPRCNumerZapisuKB");
            entity.Property(e => e.WnoEprcnumerZatw)
                .HasDefaultValue(0)
                .HasColumnName("WNO_EPRCNumerZatw");
            entity.Property(e => e.WnoFrsnumer)
                .HasDefaultValue(0)
                .HasColumnName("WNO_FRSNumer");
            entity.Property(e => e.WnoGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("WNO_GIDFirma");
            entity.Property(e => e.WnoGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("WNO_GIDLp");
            entity.Property(e => e.WnoGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WNO_GIDTyp");
            entity.Property(e => e.WnoImie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNO_Imie");
            entity.Property(e => e.WnoKazNumer)
                .HasDefaultValue(0)
                .HasColumnName("WNO_KazNumer");
            entity.Property(e => e.WnoKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WNO_Kwota");
            entity.Property(e => e.WnoMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("WNO_Miesiac");
            entity.Property(e => e.WnoNazwisko)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNO_Nazwisko");
            entity.Property(e => e.WnoNumer)
                .HasDefaultValue(0)
                .HasColumnName("WNO_Numer");
            entity.Property(e => e.WnoOdrzucono)
                .HasDefaultValue((byte)0)
                .HasColumnName("WNO_Odrzucono");
            entity.Property(e => e.WnoOpenumerAnul)
                .HasDefaultValue(0)
                .HasColumnName("WNO_OPENumerAnul");
            entity.Property(e => e.WnoOpenumerMod)
                .HasDefaultValue(0)
                .HasColumnName("WNO_OPENumerMod");
            entity.Property(e => e.WnoOpenumerWpr)
                .HasDefaultValue(0)
                .HasColumnName("WNO_OPENumerWpr");
            entity.Property(e => e.WnoOpenumerZatw)
                .HasDefaultValue(0)
                .HasColumnName("WNO_OPENumerZatw");
            entity.Property(e => e.WnoOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNO_Opis");
            entity.Property(e => e.WnoPowodAnul)
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNO_PowodAnul");
            entity.Property(e => e.WnoPrcNumerMod)
                .HasDefaultValue(0)
                .HasColumnName("WNO_PrcNumerMod");
            entity.Property(e => e.WnoPrcNumerWpr)
                .HasDefaultValue(0)
                .HasColumnName("WNO_PrcNumerWpr");
            entity.Property(e => e.WnoPrcnumer)
                .HasDefaultValue(0)
                .HasColumnName("WNO_PRCNumer");
            entity.Property(e => e.WnoRok)
                .HasDefaultValue((short)0)
                .HasColumnName("WNO_Rok");
            entity.Property(e => e.WnoSeria)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNO_Seria");
            entity.Property(e => e.WnoStan)
                .HasDefaultValue((short)0)
                .HasColumnName("WNO_Stan");
            entity.Property(e => e.WnoTrybWstawiania)
                .HasDefaultValue((byte)0)
                .HasColumnName("WNO_TrybWstawiania");
            entity.Property(e => e.WnoTstampAnul)
                .HasDefaultValue(0)
                .HasColumnName("WNO_TStampAnul");
            entity.Property(e => e.WnoTstampMod)
                .HasDefaultValue(0)
                .HasColumnName("WNO_TStampMod");
            entity.Property(e => e.WnoTstampPow)
                .HasDefaultValue(0)
                .HasColumnName("WNO_TStampPow");
            entity.Property(e => e.WnoTstampWpr)
                .HasDefaultValue(0)
                .HasColumnName("WNO_TStampWpr");
            entity.Property(e => e.WnoTstampZatw)
                .HasDefaultValue(0)
                .HasColumnName("WNO_TStampZatw");
            entity.Property(e => e.WnoTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WNO_Typ");
            entity.Property(e => e.WnoWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WNO_Waluta");
            entity.Property(e => e.WnoZatwierdzono)
                .HasDefaultValue((byte)0)
                .HasColumnName("WNO_Zatwierdzono");
        });

        modelBuilder.Entity<Wolne>(entity =>
        {
            entity.HasKey(e => new { e.WolTyp, e.WolRok, e.WolMiesiac, e.WolMagNumer, e.WolSeria, e.WolDataOd, e.WolNumerOd }).HasName("WOL_Primary");

            entity.ToTable("Wolne", "CDN", tb => tb.HasTrigger("Wolne_InsertUpdateHandler"));

            entity.Property(e => e.WolTyp).HasColumnName("WOL_Typ");
            entity.Property(e => e.WolRok).HasColumnName("WOL_Rok");
            entity.Property(e => e.WolMiesiac).HasColumnName("WOL_Miesiac");
            entity.Property(e => e.WolMagNumer).HasColumnName("WOL_MagNumer");
            entity.Property(e => e.WolSeria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WOL_Seria");
            entity.Property(e => e.WolDataOd).HasColumnName("WOL_DataOd");
            entity.Property(e => e.WolNumerOd).HasColumnName("WOL_NumerOd");
            entity.Property(e => e.WolDataDo)
                .HasDefaultValue(0)
                .HasColumnName("WOL_DataDo");
            entity.Property(e => e.WolGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("WOL_GIDFirma");
            entity.Property(e => e.WolNumerDo)
                .HasDefaultValue(0)
                .HasColumnName("WOL_NumerDo");
        });

        modelBuilder.Entity<WstegaUstawienium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WstegaUstawienia", "CDN");

            entity.HasIndex(e => new { e.WstOpeNumer, e.WstModul, e.WstTyp }, "WSTUstawienie");

            entity.Property(e => e.WstModul)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WST_Modul");
            entity.Property(e => e.WstOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("WST_OpeNumer");
            entity.Property(e => e.WstTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("WST_Typ");
            entity.Property(e => e.WstWartosc1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WST_Wartosc1");
            entity.Property(e => e.WstWartosc2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WST_Wartosc2");

            entity.HasOne(d => d.WstOpeNumerNavigation).WithMany()
                .HasForeignKey(d => d.WstOpeNumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WSTUstawienie");
        });

        modelBuilder.Entity<WszystkoPlopisyOfert>(entity =>
        {
            entity.HasKey(e => e.WooSekcjaId).HasName("WOO_Primary");

            entity.ToTable("WszystkoPLOpisyOfert", "CDN");

            entity.Property(e => e.WooSekcjaId).HasColumnName("WOO_SekcjaId");
            entity.Property(e => e.WooGidnumerTwr)
                .HasDefaultValue(0)
                .HasColumnName("WOO_GIDNumerTwr");
            entity.Property(e => e.WooObraz1)
                .HasDefaultValue(0)
                .HasColumnName("WOO_Obraz1");
            entity.Property(e => e.WooObraz2)
                .HasDefaultValue(0)
                .HasColumnName("WOO_Obraz2");
            entity.Property(e => e.WooTekst)
                .HasDefaultValue("")
                .HasColumnType("text")
                .HasColumnName("WOO_Tekst");
            entity.Property(e => e.WooUklad)
                .HasDefaultValue((short)0)
                .HasColumnName("WOO_Uklad");
        });

        modelBuilder.Entity<WydatkiPracownikow>(entity =>
        {
            entity.HasKey(e => e.WprId).HasName("WPR_Primary");

            entity.ToTable("WydatkiPracownikow", "CDN", tb => tb.HasTrigger("WydatkiPracownikow_InsertUpdateHandler"));

            entity.HasIndex(e => e.WprData, "WPRData");

            entity.HasIndex(e => e.WprCwnid, "WPRWizyty");

            entity.HasIndex(e => new { e.WprDgenumer, e.WprDgelp }, "WprKeyDelegacje");

            entity.HasIndex(e => new { e.WprPrcNumer, e.WprData }, "WprPrcNumer");

            entity.HasIndex(e => new { e.WprRodzajWydatku, e.WprData }, "WprRodzajData");

            entity.HasIndex(e => e.WprSaPid, "WprSaPId");

            entity.Property(e => e.WprId).HasColumnName("WPR_Id");
            entity.Property(e => e.WprCwnid)
                .HasDefaultValue(0)
                .HasColumnName("WPR_CWNId");
            entity.Property(e => e.WprData)
                .HasDefaultValue(0)
                .HasColumnName("WPR_Data");
            entity.Property(e => e.WprDgelp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPR_DGELp");
            entity.Property(e => e.WprDgenumer)
                .HasDefaultValue(0)
                .HasColumnName("WPR_DGENumer");
            entity.Property(e => e.WprDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("WPR_DokFirma");
            entity.Property(e => e.WprDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPR_DokLp");
            entity.Property(e => e.WprDokNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPR_DokNumer");
            entity.Property(e => e.WprDokTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPR_DokTyp");
            entity.Property(e => e.WprDokZmianaPoAkcept)
                .HasDefaultValue((byte)0)
                .HasColumnName("WPR_DokZmianaPoAkcept");
            entity.Property(e => e.WprKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPR_KntNumer");
            entity.Property(e => e.WprKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPR_KntTyp");
            entity.Property(e => e.WprKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPR_Kwota");
            entity.Property(e => e.WprOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPR_OpeNumer");
            entity.Property(e => e.WprOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPR_Opis");
            entity.Property(e => e.WprPozycja)
                .HasDefaultValue(0)
                .HasColumnName("WPR_Pozycja");
            entity.Property(e => e.WprPrcNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPR_PrcNumer");
            entity.Property(e => e.WprPredefiniowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("WPR_Predefiniowany");
            entity.Property(e => e.WprProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("WPR_Procent");
            entity.Property(e => e.WprRodzajWydatku)
                .HasDefaultValue(0)
                .HasColumnName("WPR_RodzajWydatku");
            entity.Property(e => e.WprRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("WPR_RokMiesiac");
            entity.Property(e => e.WprSaPid)
                .HasDefaultValue(0)
                .HasColumnName("WPR_SaPId");
            entity.Property(e => e.WprSamId)
                .HasDefaultValue(0)
                .HasColumnName("WPR_SamId");
            entity.Property(e => e.WprTypWydatku)
                .HasDefaultValue(0)
                .HasColumnName("WPR_TypWydatku");
            entity.Property(e => e.WprWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPR_Waluta");
            entity.Property(e => e.WprWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPR_Wartosc");
            entity.Property(e => e.WprZaakceptowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("WPR_Zaakceptowano");
            entity.Property(e => e.WprZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("WPR_ZewnetrznyId");
            entity.Property(e => e.WprZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("WPR_ZewnetrznySys");
        });

        modelBuilder.Entity<WydatkiPrcPlatnosci>(entity =>
        {
            entity.HasKey(e => new { e.WppWprid, e.WppDlgtrplp }).HasName("WPP_Primary");

            entity.ToTable("WydatkiPrcPlatnosci", "CDN");

            entity.HasIndex(e => new { e.WppDlgtrpprzeciwTyp, e.WppDlgtrpprzeciwNumer, e.WppDlgtrpprzeciwLp }, "WPPDLGTRPPrzeciw");

            entity.HasIndex(e => new { e.WppDlgtrptyp, e.WppDlgtrpnumer, e.WppDlgtrplp }, "WPPDLGTrp").IsUnique();

            entity.HasIndex(e => new { e.WppDokTrptyp, e.WppDokTrpnumer, e.WppDokTrplp }, "WPPDokTRP");

            entity.Property(e => e.WppWprid).HasColumnName("WPP_WPRID");
            entity.Property(e => e.WppDlgtrplp).HasColumnName("WPP_DLGTRPLp");
            entity.Property(e => e.WppDlgtrpfirma)
                .HasDefaultValue(0)
                .HasColumnName("WPP_DLGTRPFirma");
            entity.Property(e => e.WppDlgtrpnumer)
                .HasDefaultValue(0)
                .HasColumnName("WPP_DLGTRPNumer");
            entity.Property(e => e.WppDlgtrpprzeciwFirma)
                .HasDefaultValue(0)
                .HasColumnName("WPP_DLGTRPPrzeciwFirma");
            entity.Property(e => e.WppDlgtrpprzeciwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPP_DLGTRPPrzeciwLp");
            entity.Property(e => e.WppDlgtrpprzeciwNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPP_DLGTRPPrzeciwNumer");
            entity.Property(e => e.WppDlgtrpprzeciwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPP_DLGTRPPrzeciwTyp");
            entity.Property(e => e.WppDlgtrptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPP_DLGTRPTyp");
            entity.Property(e => e.WppDokTrpfirma)
                .HasDefaultValue(0)
                .HasColumnName("WPP_DokTRPFirma");
            entity.Property(e => e.WppDokTrplp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPP_DokTRPLp");
            entity.Property(e => e.WppDokTrpnumer)
                .HasDefaultValue(0)
                .HasColumnName("WPP_DokTRPNumer");
            entity.Property(e => e.WppDokTrptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPP_DokTRPTyp");

            entity.HasOne(d => d.WppWpr).WithMany(p => p.WydatkiPrcPlatnoscis)
                .HasForeignKey(d => d.WppWprid)
                .HasConstraintName("FK_");

            entity.HasOne(d => d.TraPlat).WithOne(p => p.WydatkiPrcPlatnosci)
                .HasForeignKey<WydatkiPrcPlatnosci>(d => new { d.WppDlgtrptyp, d.WppDlgtrpnumer, d.WppDlgtrplp })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WPPDLGTrp");
        });

        modelBuilder.Entity<WymPowiazanium>(entity =>
        {
            entity.HasKey(e => e.WmpWmrId).HasName("WMP_Primary");

            entity.ToTable("WymPowiazania", "CDN", tb => tb.HasTrigger("WymPowiazania_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.WmpPowiazanieId, e.WmpTypPowiazania }, "WmpPowiazanie").IsUnique();

            entity.Property(e => e.WmpWmrId).HasColumnName("WMP_WmrID");
            entity.Property(e => e.WmpPowiazanieId)
                .HasDefaultValue(0)
                .HasColumnName("WMP_PowiazanieID");
            entity.Property(e => e.WmpTypPowiazania)
                .HasDefaultValue((byte)0)
                .HasColumnName("WMP_TypPowiazania");

            entity.HasOne(d => d.WmpWmr).WithOne(p => p.WymPowiazanium)
                .HasForeignKey<WymPowiazanium>(d => d.WmpWmrId)
                .HasConstraintName("FK_WmpPrimary");
        });

        modelBuilder.Entity<Wymiary>(entity =>
        {
            entity.HasKey(e => e.WmrId).HasName("WMR_Primary");

            entity.ToTable("Wymiary", "CDN", tb =>
                {
                    tb.HasTrigger("Wymiary_DeleteHandler");
                    tb.HasTrigger("Wymiary_InsertHandler");
                    tb.HasTrigger("Wymiary_SprawdzOpisAnalityczny");
                });

            entity.HasIndex(e => new { e.WmrParId, e.WmrNazwa }, "WMRNazwa").IsUnique();

            entity.HasIndex(e => new { e.WmrParId, e.WmrId }, "WMROjciec").IsUnique();

            entity.Property(e => e.WmrId).HasColumnName("WMR_ID");
            entity.Property(e => e.WmrAktywny)
                .HasDefaultValue((byte)1)
                .HasColumnName("WMR_Aktywny");
            entity.Property(e => e.WmrAktywnyDo)
                .HasDefaultValue(0)
                .HasColumnName("WMR_AktywnyDo");
            entity.Property(e => e.WmrAktywnyOd)
                .HasDefaultValue(0)
                .HasColumnName("WMR_AktywnyOd");
            entity.Property(e => e.WmrArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("WMR_Archiwalny");
            entity.Property(e => e.WmrEprac)
                .HasDefaultValue((byte)0)
                .HasColumnName("WMR_EPrac");
            entity.Property(e => e.WmrKategoria)
                .HasDefaultValue((byte)0)
                .HasColumnName("WMR_Kategoria");
            entity.Property(e => e.WmrKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WMR_Konto");
            entity.Property(e => e.WmrMaxIlosc)
                .HasDefaultValue(0)
                .HasColumnName("WMR_MaxIlosc");
            entity.Property(e => e.WmrNazwa)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WMR_Nazwa");
            entity.Property(e => e.WmrNazwaPoziomu)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WMR_NazwaPoziomu");
            entity.Property(e => e.WmrObieg)
                .HasDefaultValue((byte)0)
                .HasColumnName("WMR_Obieg");
            entity.Property(e => e.WmrOpis)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WMR_Opis");
            entity.Property(e => e.WmrParId)
                .HasDefaultValue(0)
                .HasColumnName("WMR_ParID");
            entity.Property(e => e.WmrRootId)
                .HasDefaultValue(0)
                .HasColumnName("WMR_RootID");
            entity.Property(e => e.WmrTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("WMR_Typ");
            entity.Property(e => e.WmrWyrazenieSql)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WMR_WyrazenieSQL");
        });

        modelBuilder.Entity<WypElem>(entity =>
        {
            entity.HasKey(e => e.WpeId).HasName("WPE_Primary");

            entity.ToTable("WypElem", "CDN", tb =>
                {
                    tb.HasTrigger("WypElem_DeleteHandler");
                    tb.HasTrigger("WypElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.WpePewid, "WPEDefinicja");

            entity.HasIndex(e => e.WpeWplid, "WPEWyplata");

            entity.Property(e => e.WpeId).HasColumnName("WPE_Id");
            entity.Property(e => e.WpeDataDo)
                .HasDefaultValue(0)
                .HasColumnName("WPE_DataDo");
            entity.Property(e => e.WpeDataOd)
                .HasDefaultValue(0)
                .HasColumnName("WPE_DataOd");
            entity.Property(e => e.WpeKodRca)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPE_KodRCA");
            entity.Property(e => e.WpeKodRsa)
                .HasDefaultValue(0)
                .HasColumnName("WPE_KodRSA");
            entity.Property(e => e.WpeOpis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WPE_Opis");
            entity.Property(e => e.WpePewid)
                .HasDefaultValue(0)
                .HasColumnName("WPE_PEWId");
            entity.Property(e => e.WpePozPitfirma)
                .HasDefaultValue(0)
                .HasColumnName("WPE_PozPITFirma");
            entity.Property(e => e.WpePozPitprac)
                .HasDefaultValue(0)
                .HasColumnName("WPE_PozPITPrac");
            entity.Property(e => e.WpeWplid)
                .HasDefaultValue(0)
                .HasColumnName("WPE_WPLId");
            entity.Property(e => e.WpeZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPE_ZrdNumer");
            entity.Property(e => e.WpeZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WPE_ZrdTyp");

            entity.HasOne(d => d.WpeWpl).WithMany(p => p.WypElems)
                .HasForeignKey(d => d.WpeWplid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WPEWyplata");
        });

        modelBuilder.Entity<WypSelem>(entity =>
        {
            entity.HasKey(e => new { e.WpsWplid, e.WpsWpeid, e.WpsPesid, e.WpsTyp, e.WpsZrdId }).HasName("WPS_Primary");

            entity.ToTable("WypSElem", "CDN", tb => tb.HasTrigger("WypSElem_InsertUpdateHandler"));

            entity.Property(e => e.WpsWplid).HasColumnName("WPS_WPLId");
            entity.Property(e => e.WpsWpeid).HasColumnName("WPS_WPEId");
            entity.Property(e => e.WpsPesid).HasColumnName("WPS_PESId");
            entity.Property(e => e.WpsTyp).HasColumnName("WPS_Typ");
            entity.Property(e => e.WpsZrdId).HasColumnName("WPS_ZrdId");
            entity.Property(e => e.WpsCzas)
                .HasDefaultValue(0)
                .HasColumnName("WPS_Czas");
            entity.Property(e => e.WpsDniKalendarzowe)
                .HasDefaultValue((short)0)
                .HasColumnName("WPS_DniKalendarzowe");
            entity.Property(e => e.WpsDniRobocze)
                .HasDefaultValue((short)0)
                .HasColumnName("WPS_DniRobocze");
            entity.Property(e => e.WpsEdytowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("WPS_Edytowany");
            entity.Property(e => e.WpsWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPS_Wartosc");
        });

        modelBuilder.Entity<Wyplaty>(entity =>
        {
            entity.HasKey(e => e.WplId).HasName("WPL_Primary");

            entity.ToTable("Wyplaty", "CDN", tb =>
                {
                    tb.HasTrigger("Wyplaty_DeleteHandler");
                    tb.HasTrigger("Wyplaty_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.WplLplid, "WPLLista");

            entity.HasIndex(e => new { e.WplLplid, e.WplNumer }, "WPLNumer").IsUnique();

            entity.HasIndex(e => new { e.WplOsoNumer, e.WplUmoNumer }, "WPLUmowa");

            entity.Property(e => e.WplId).HasColumnName("WPL_Id");
            entity.Property(e => e.WplDoWyplaty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WPL_DoWyplaty");
            entity.Property(e => e.WplLplid)
                .HasDefaultValue(0)
                .HasColumnName("WPL_LPLId");
            entity.Property(e => e.WplNumer)
                .HasDefaultValue((short)0)
                .HasColumnName("WPL_Numer");
            entity.Property(e => e.WplOsoNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPL_OsoNumer");
            entity.Property(e => e.WplStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("WPL_Status");
            entity.Property(e => e.WplUmoNumer)
                .HasDefaultValue(0)
                .HasColumnName("WPL_UmoNumer");

            entity.HasOne(d => d.WplLpl).WithMany(p => p.Wyplaties)
                .HasForeignKey(d => d.WplLplid)
                .HasConstraintName("FK_WPLLista");
        });

        modelBuilder.Entity<WysKoszty>(entity =>
        {
            entity.HasKey(e => new { e.WyKWysNumer, e.WyKDokTyp, e.WyKDokNumer }).HasName("WyK_Primary");

            entity.ToTable("WysKoszty", "CDN", tb => tb.HasTrigger("WysKoszty_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.WyKDokNumer, e.WyKWysNumer }, "WyKDokument");

            entity.Property(e => e.WyKWysNumer).HasColumnName("WyK_WysNumer");
            entity.Property(e => e.WyKDokTyp).HasColumnName("WyK_DokTyp");
            entity.Property(e => e.WyKDokNumer).HasColumnName("WyK_DokNumer");
            entity.Property(e => e.WyKDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("WyK_DokFirma");
            entity.Property(e => e.WyKDokLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyK_DokLp");
            entity.Property(e => e.WyKKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyK_Kwota");
            entity.Property(e => e.WyKProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("WyK_Procent");
            entity.Property(e => e.WyKWysFirma)
                .HasDefaultValue(0)
                .HasColumnName("WyK_WysFirma");
            entity.Property(e => e.WyKWysLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyK_WysLp");
            entity.Property(e => e.WyKWysTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyK_WysTyp");

            entity.HasOne(d => d.WyKWysNumerNavigation).WithMany(p => p.WysKoszties)
                .HasForeignKey(d => d.WyKWysNumer)
                .HasConstraintName("FK_WyKPrimary");
        });

        modelBuilder.Entity<WysPaczki>(entity =>
        {
            entity.HasKey(e => e.WyPIdPaczki).HasName("WyP_Primary");

            entity.ToTable("WysPaczki", "CDN", tb =>
                {
                    tb.HasTrigger("WysPaczki_DeleteHandler");
                    tb.HasTrigger("WysPaczki_InsertUpdateHandler");
                    tb.HasTrigger("WysPaczki_SprawdzSesje");
                });

            entity.HasIndex(e => e.WyPDataUtw, "WyPDataUtw");

            entity.HasIndex(e => new { e.WyPRok, e.WyPMiesiac, e.WyPSeria, e.WyPNumer, e.WyPLp }, "WyPNumer").IsUnique();

            entity.HasIndex(e => new { e.WyPWysNumer, e.WyPIdPaczki }, "WyPWysylkiNoType").IsUnique();

            entity.HasIndex(e => e.WyPTrasaId, "WypTrasa");

            entity.Property(e => e.WyPIdPaczki).HasColumnName("WyP_IdPaczki");
            entity.Property(e => e.WyPAktywny)
                .HasDefaultValue(0)
                .HasColumnName("WyP_Aktywny");
            entity.Property(e => e.WyPCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_CechaOpis");
            entity.Property(e => e.WyPDataUtw)
                .HasDefaultValue(0)
                .HasColumnName("WyP_DataUtw");
            entity.Property(e => e.WyPDlugosc)
                .HasDefaultValue(0)
                .HasColumnName("WyP_Dlugosc");
            entity.Property(e => e.WyPFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("WyP_FrmNumer");
            entity.Property(e => e.WyPFrsId)
                .HasDefaultValue(0)
                .HasColumnName("WyP_FrsID");
            entity.Property(e => e.WyPKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("WyP_KnAFirma");
            entity.Property(e => e.WyPKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_KnALp");
            entity.Property(e => e.WyPKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("WyP_KnANumer");
            entity.Property(e => e.WyPKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_KnATyp");
            entity.Property(e => e.WyPKnSemail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_KnSEmail");
            entity.Property(e => e.WyPKnSfirma)
                .HasDefaultValue(0)
                .HasColumnName("WyP_KnSFirma");
            entity.Property(e => e.WyPKnSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_KnSLp");
            entity.Property(e => e.WyPKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("WyP_KnSNumer");
            entity.Property(e => e.WyPKnStelefon)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_KnSTelefon");
            entity.Property(e => e.WyPKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_KnSTyp");
            entity.Property(e => e.WyPKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("WyP_KntFirma");
            entity.Property(e => e.WyPKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_KntLp");
            entity.Property(e => e.WyPKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("WyP_KntNumer");
            entity.Property(e => e.WyPKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_KntTyp");
            entity.Property(e => e.WyPKosztTr)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyP_KosztTr");
            entity.Property(e => e.WyPKurier)
                .HasDefaultValue(0)
                .HasColumnName("WyP_Kurier");
            entity.Property(e => e.WyPLinkPrzesylki)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_LinkPrzesylki");
            entity.Property(e => e.WyPLp)
                .HasDefaultValue((short)127)
                .HasColumnName("WyP_Lp");
            entity.Property(e => e.WyPMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("WyP_Miesiac");
            entity.Property(e => e.WyPNaKoszt)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_NaKoszt");
            entity.Property(e => e.WyPNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyP_Netto");
            entity.Property(e => e.WyPNumer)
                .HasDefaultValue(0)
                .HasColumnName("WyP_Numer");
            entity.Property(e => e.WyPNumerListu)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_NumerListu");
            entity.Property(e => e.WyPObjetosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("WyP_Objetosc");
            entity.Property(e => e.WyPOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("WyP_OpeFirma");
            entity.Property(e => e.WyPOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_OpeLp");
            entity.Property(e => e.WyPOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("WyP_OpeNumer");
            entity.Property(e => e.WyPOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_OpeTyp");
            entity.Property(e => e.WyPOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_Opis");
            entity.Property(e => e.WyPRodzaj)
                .HasDefaultValue((byte)0)
                .HasColumnName("WyP_Rodzaj");
            entity.Property(e => e.WyPRodzajPrzesylki)
                .HasDefaultValue(0)
                .HasColumnName("WyP_RodzajPrzesylki");
            entity.Property(e => e.WyPRok)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_Rok");
            entity.Property(e => e.WyPSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_Seria");
            entity.Property(e => e.WyPSposobLaczenia)
                .HasDefaultValue((byte)0)
                .HasColumnName("WyP_SposobLaczenia");
            entity.Property(e => e.WyPStan)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_Stan");
            entity.Property(e => e.WyPSzerokosc)
                .HasDefaultValue(0)
                .HasColumnName("WyP_Szerokosc");
            entity.Property(e => e.WyPTrasaId)
                .HasDefaultValue(0)
                .HasColumnName("WyP_TrasaID");
            entity.Property(e => e.WyPVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WyP_Vat");
            entity.Property(e => e.WyPWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("WyP_WagaBrutto");
            entity.Property(e => e.WyPWagaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("WyP_WagaNetto");
            entity.Property(e => e.WyPWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WyP_WJm");
            entity.Property(e => e.WyPWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("WyP_Wsk");
            entity.Property(e => e.WyPWysFirma)
                .HasDefaultValue(0)
                .HasColumnName("WyP_WysFirma");
            entity.Property(e => e.WyPWysLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_WysLp");
            entity.Property(e => e.WyPWysNumer)
                .HasDefaultValue(0)
                .HasColumnName("WyP_WysNumer");
            entity.Property(e => e.WyPWysPozycja)
                .HasDefaultValue(0)
                .HasColumnName("WyP_WysPozycja");
            entity.Property(e => e.WyPWysTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WyP_WysTyp");
            entity.Property(e => e.WyPWysokosc)
                .HasDefaultValue(0)
                .HasColumnName("WyP_Wysokosc");
            entity.Property(e => e.WyPZgodnoscAdresu)
                .HasDefaultValue((byte)0)
                .HasColumnName("WyP_ZgodnoscAdresu");
            entity.Property(e => e.WyPZnppaczkaId)
                .HasDefaultValue(0)
                .HasColumnName("WyP_ZNPPaczkaId");
            entity.Property(e => e.WyPZnpstatusPaczki)
                .HasDefaultValue((byte)0)
                .HasColumnName("WyP_ZNPStatusPaczki");
        });

        modelBuilder.Entity<WysRelacje>(entity =>
        {
            entity.HasKey(e => new { e.WyrIdPaczki, e.WyrDokTyp, e.WyrDokNumer, e.WyrDokLp, e.WyrDokSubLp }).HasName("WYR_Primary");

            entity.ToTable("WysRelacje", "CDN", tb => tb.HasTrigger("WysRelacje_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.WyrDokNumer, e.WyrDokTyp, e.WyrDokLp, e.WyrDokSubLp, e.WyrStatus, e.WyrIdPaczki }, "WyRObiekt").IsUnique();

            entity.HasIndex(e => new { e.WyrDokNumer, e.WyrDokLp, e.WyrDokSubLp }, "WyRObiektNoType");

            entity.Property(e => e.WyrIdPaczki).HasColumnName("WYR_IdPaczki");
            entity.Property(e => e.WyrDokTyp).HasColumnName("WYR_DokTyp");
            entity.Property(e => e.WyrDokNumer).HasColumnName("WYR_DokNumer");
            entity.Property(e => e.WyrDokLp).HasColumnName("WYR_DokLp");
            entity.Property(e => e.WyrDokSubLp).HasColumnName("WYR_DokSubLp");
            entity.Property(e => e.WyrDokFirma)
                .HasDefaultValue(0)
                .HasColumnName("WYR_DokFirma");
            entity.Property(e => e.WyrId)
                .ValueGeneratedOnAdd()
                .HasColumnName("WYR_Id");
            entity.Property(e => e.WyrIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("WYR_Ilosc");
            entity.Property(e => e.WyrKierunek)
                .HasDefaultValue((byte)0)
                .HasColumnName("WYR_Kierunek");
            entity.Property(e => e.WyrStatus)
                .HasDefaultValue((byte)0)
                .HasColumnName("WYR_Status");

            entity.HasOne(d => d.WyrIdPaczkiNavigation).WithMany(p => p.WysRelacjes)
                .HasForeignKey(d => d.WyrIdPaczki)
                .HasConstraintName("FK_WyRPrimary");
        });

        modelBuilder.Entity<Wysylki>(entity =>
        {
            entity.HasKey(e => e.WysGidnumer).HasName("WYS_Primary");

            entity.ToTable("Wysylki", "CDN", tb =>
                {
                    tb.HasTrigger("Wysylki_DeleteHandler");
                    tb.HasTrigger("Wysylki_InsertUpdateHandler");
                    tb.HasTrigger("Wysylki_LastModTStamp");
                    tb.HasTrigger("Wysylki_SprawdzSesje");
                });

            entity.HasIndex(e => e.WysTswysylki, "WysCzasWysylki");

            entity.HasIndex(e => new { e.WysKierNumer, e.WysKierLp }, "WysKierowca");

            entity.HasIndex(e => e.WysKurier, "WysKurier");

            entity.HasIndex(e => new { e.WysRok, e.WysMiesiac, e.WysSeria, e.WysNumer, e.WysLp }, "WysNumer").IsUnique();

            entity.HasIndex(e => e.WysSamId, "WysSamochod");

            entity.HasIndex(e => new { e.WysSpeNumer, e.WysTswysylki }, "WysSpedytor");

            entity.HasIndex(e => e.WysStanPrzesylki, "WysStanPrzesylki");

            entity.HasIndex(e => e.WysTrasaId, "WysTrasa");

            entity.Property(e => e.WysGidnumer).HasColumnName("WYS_GIDNumer");
            entity.Property(e => e.WysAktywny)
                .HasDefaultValue(0)
                .HasColumnName("WYS_Aktywny");
            entity.Property(e => e.WysCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_CechaOpis");
            entity.Property(e => e.WysDataNadania)
                .HasDefaultValue(0)
                .HasColumnName("WYS_DataNadania");
            entity.Property(e => e.WysDlugoscTrasy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WYS_DlugoscTrasy");
            entity.Property(e => e.WysFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("WYS_FrmNumer");
            entity.Property(e => e.WysFrsId)
                .HasDefaultValue(0)
                .HasColumnName("WYS_FrsID");
            entity.Property(e => e.WysGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("WYS_GIDFirma");
            entity.Property(e => e.WysGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_GIDLp");
            entity.Property(e => e.WysGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_GIDTyp");
            entity.Property(e => e.WysIlePaczek)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_IlePaczek");
            entity.Property(e => e.WysKierLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_KierLP");
            entity.Property(e => e.WysKierNumer)
                .HasDefaultValue(0)
                .HasColumnName("WYS_KierNumer");
            entity.Property(e => e.WysKierTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_KierTyp");
            entity.Property(e => e.WysKurier)
                .HasDefaultValue(0)
                .HasColumnName("WYS_Kurier");
            entity.Property(e => e.WysLastMod)
                .HasDefaultValue(0)
                .HasColumnName("WYS_LastMod");
            entity.Property(e => e.WysLinkPrzesylki)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_LinkPrzesylki");
            entity.Property(e => e.WysLp)
                .HasDefaultValue((short)127)
                .HasColumnName("WYS_Lp");
            entity.Property(e => e.WysMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("WYS_Miesiac");
            entity.Property(e => e.WysNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WYS_Netto");
            entity.Property(e => e.WysNumer)
                .HasDefaultValue(0)
                .HasColumnName("WYS_Numer");
            entity.Property(e => e.WysNumerObcy)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_NumerObcy");
            entity.Property(e => e.WysObjetosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("WYS_Objetosc");
            entity.Property(e => e.WysOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("WYS_OpeFirma");
            entity.Property(e => e.WysOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_OpeLp");
            entity.Property(e => e.WysOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("WYS_OpeNumer");
            entity.Property(e => e.WysOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_OpeTyp");
            entity.Property(e => e.WysOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_Opis");
            entity.Property(e => e.WysPobranie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WYS_Pobranie");
            entity.Property(e => e.WysPunktOdb)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_PunktOdb");
            entity.Property(e => e.WysRok)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_Rok");
            entity.Property(e => e.WysRozliczenieKosztow)
                .HasDefaultValue(0)
                .HasColumnName("WYS_RozliczenieKosztow");
            entity.Property(e => e.WysSamId)
                .HasDefaultValue(0)
                .HasColumnName("WYS_SamId");
            entity.Property(e => e.WysSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_Seria");
            entity.Property(e => e.WysSpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("WYS_SpeFirma");
            entity.Property(e => e.WysSpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_SpeLp");
            entity.Property(e => e.WysSpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("WYS_SpeNumer");
            entity.Property(e => e.WysSpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_SpeTyp");
            entity.Property(e => e.WysStan)
                .HasDefaultValue((short)0)
                .HasColumnName("WYS_Stan");
            entity.Property(e => e.WysStanPrzesylki)
                .HasDefaultValue(0)
                .HasColumnName("WYS_StanPrzesylki");
            entity.Property(e => e.WysTrasaId)
                .HasDefaultValue(0)
                .HasColumnName("WYS_TrasaId");
            entity.Property(e => e.WysTsdostarczeniaDo)
                .HasDefaultValue(0)
                .HasColumnName("WYS_TSDostarczeniaDo");
            entity.Property(e => e.WysTsdostarczeniaOd)
                .HasDefaultValue(0)
                .HasColumnName("WYS_TSDostarczeniaOd");
            entity.Property(e => e.WysTswysylki)
                .HasDefaultValue(0)
                .HasColumnName("WYS_TSWysylki");
            entity.Property(e => e.WysUbezpieczenie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WYS_Ubezpieczenie");
            entity.Property(e => e.WysVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("WYS_Vat");
            entity.Property(e => e.WysWagaBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("WYS_WagaBrutto");
            entity.Property(e => e.WysWagaNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("WYS_WagaNetto");
            entity.Property(e => e.WysWjm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_WJm");
            entity.Property(e => e.WysWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("WYS_Wsk");
            entity.Property(e => e.WysZnpid)
                .HasDefaultValue(0)
                .HasColumnName("WYS_ZNPId");
            entity.Property(e => e.WysZnpnr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("WYS_ZNPnr");
            entity.Property(e => e.WysZnpstatusPaczki)
                .HasDefaultValue((byte)0)
                .HasColumnName("WYS_ZNPStatusPaczki");
        });

        modelBuilder.Entity<XlDelegacje>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_DelegacjePrimary");

            entity.ToTable("XL_Delegacje", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.Akcja).HasDefaultValue((byte)1);
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(datediff(second,CONVERT([datetime],'2011-01-01',(120)),getdate()))")
                .HasColumnName("TS");
        });

        modelBuilder.Entity<XlDelegacjeSyncMap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XL_Delegacje_SyncMap", "CDN", tb => tb.HasTrigger("EP_SyncFramework_XL_Delegacje_SyncMap"));

            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlDelegacjeSyncMapDiff>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_Delegacje_SyncMapDiffPrimary");

            entity.ToTable("XL_Delegacje_SyncMapDiff", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlSamochody>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_SamochodyPrimary");

            entity.ToTable("XL_Samochody", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.Akcja).HasDefaultValue((byte)1);
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(datediff(second,CONVERT([datetime],'2011-01-01',(120)),getdate()))")
                .HasColumnName("TS");
        });

        modelBuilder.Entity<XlSamochodySyncMap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XL_Samochody_SyncMap", "CDN", tb => tb.HasTrigger("EP_SyncFramework_XL_Samochody_SyncMap"));

            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlSamochodySyncMapDiff>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_Samochody_SyncMapDiffPrimary");

            entity.ToTable("XL_Samochody_SyncMapDiff", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlSlowniki>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_SlownikiPrimary");

            entity.ToTable("XL_Slowniki", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.Akcja).HasDefaultValue((byte)1);
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(datediff(second,CONVERT([datetime],'2011-01-01',(120)),getdate()))")
                .HasColumnName("TS");
        });

        modelBuilder.Entity<XlSlownikiStruktura>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_SlownikiStrukturaPrimary");

            entity.ToTable("XL_SlownikiStruktura", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.Akcja).HasDefaultValue((byte)1);
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(datediff(second,CONVERT([datetime],'2011-01-01',(120)),getdate()))")
                .HasColumnName("TS");
        });

        modelBuilder.Entity<XlSlownikiStrukturaSyncMap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XL_SlownikiStruktura_SyncMap", "CDN", tb => tb.HasTrigger("EP_SyncFramework_XL_SlownikiStruktura_SyncMap"));

            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlSlownikiStrukturaSyncMapDiff>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_SlownikiStruktura_SyncMapDiffPrimary");

            entity.ToTable("XL_SlownikiStruktura_SyncMapDiff", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlSlownikiSyncMap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XL_Slowniki_SyncMap", "CDN", tb => tb.HasTrigger("EP_SyncFramework_XL_Slowniki_SyncMap"));

            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlSlownikiSyncMapDiff>(entity =>
        {
            entity.HasKey(e => e.SyncId).HasName("DF_XL_Slowniki_SyncMapDiffPrimary");

            entity.ToTable("XL_Slowniki_SyncMapDiff", "CDN");

            entity.Property(e => e.SyncId).HasColumnName("Sync_ID");
            entity.Property(e => e.EpracownikId).HasColumnName("EPracownikId");
            entity.Property(e => e.Xlid).HasColumnName("XLId");
        });

        modelBuilder.Entity<XlSyncStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XL_SyncStatus", "CDN");

            entity.Property(e => e.EpMaxFullSyncId).HasColumnName("EP_MaxFullSyncId");
            entity.Property(e => e.EpMaxMapaId).HasColumnName("EP_MaxMapaId");
            entity.Property(e => e.EpMaxSyncedId).HasColumnName("EP_MaxSyncedId");
            entity.Property(e => e.NazwaTabeli).HasDefaultValue("");
            entity.Property(e => e.XlMaxMapaId).HasColumnName("XL_MaxMapaId");
            entity.Property(e => e.XlMaxSyncedId).HasColumnName("XL_MaxSyncedId");
        });

        modelBuilder.Entity<XlbiKategoriaAbcxyzhist>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLBI_KategoriaABCXYZHist");

            entity.Property(e => e.DataDo).HasColumnName("dataDo");
            entity.Property(e => e.DataOd).HasColumnName("dataOd");
            entity.Property(e => e.KategoriaAbcxyz)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("KategoriaABCXYZ");
            entity.Property(e => e.Rn).HasColumnName("RN");
        });

        modelBuilder.Entity<XlbiKntGeografium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLBI_KntGeografia");

            entity.Property(e => e.KgeGeografiaOrgId)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("Kge_GeografiaOrgID");
            entity.Property(e => e.KgeGminaId).HasColumnName("Kge_GminaID");
            entity.Property(e => e.KgeKntNumer).HasColumnName("Kge_KntNumer");
            entity.Property(e => e.KgeKntTyp).HasColumnName("Kge_KntTyp");
            entity.Property(e => e.KgeKrajId).HasColumnName("Kge_KrajID");
            entity.Property(e => e.KgePowiatId).HasColumnName("Kge_PowiatID");
            entity.Property(e => e.KgeWojId).HasColumnName("Kge_WojID");
        });

        modelBuilder.Entity<XlbiMapowaniaGeografii>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLBI_MapowaniaGeografii");

            entity.Property(e => e.GeoKod).HasColumnName("GEO_KOD");
            entity.Property(e => e.GeoNazwa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GEO_Nazwa");
            entity.Property(e => e.GeoOrgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GEO_OrgID");
            entity.Property(e => e.GeoTyp).HasColumnName("GEO_Typ");
            entity.Property(e => e.GeoWojewodztwo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GEO_Wojewodztwo");
        });

        modelBuilder.Entity<XlbiSumaTrn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLBI_SumaTRN");

            entity.HasIndex(e => new { e.Gidtyp, e.Gidnumer }, "IX_TrnGidTyp_TrnGidNumer")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.Gidnumer).HasColumnName("GIDNumer");
            entity.Property(e => e.Gidtyp).HasColumnName("GIDTyp");
            entity.Property(e => e.TrnNetto)
                .HasColumnType("decimal(27, 10)")
                .HasColumnName("Trn_netto");
        });

        modelBuilder.Entity<XldlaExecSql>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLDlaExecSQL", "CDN");

            entity.Property(e => e.XsqId)
                .HasDefaultValue(0)
                .HasColumnName("XSQ_ID");
            entity.Property(e => e.XsqTekst)
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("XSQ_Tekst");
        });

        modelBuilder.Entity<ZaEopisy>(entity =>
        {
            entity.HasKey(e => new { e.ZeOZamNumer, e.ZeOZamLp }).HasName("ZeO_Primary");

            entity.ToTable("ZaEOpisy", "CDN");

            entity.Property(e => e.ZeOZamNumer).HasColumnName("ZeO_ZamNumer");
            entity.Property(e => e.ZeOZamLp).HasColumnName("ZeO_ZamLp");
            entity.Property(e => e.ZeOOpis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZeO_Opis");
            entity.Property(e => e.ZeOOpisCharset)
                .HasDefaultValue(0)
                .HasColumnName("ZeO_OpisCharset");
            entity.Property(e => e.ZeOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZeO_Typ");
            entity.Property(e => e.ZeOZamFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZeO_ZamFirma");
            entity.Property(e => e.ZeOZamTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZeO_ZamTyp");

            entity.HasOne(d => d.ZamElem).WithOne(p => p.ZaEopisy)
                .HasForeignKey<ZaEopisy>(d => new { d.ZeOZamNumer, d.ZeOZamLp })
                .HasConstraintName("FK_ZeOPrimary");
        });

        modelBuilder.Entity<ZaNopisy>(entity =>
        {
            entity.HasKey(e => new { e.ZnOZamNumer, e.ZnOZamLp }).HasName("ZnO_Primary");

            entity.ToTable("ZaNOpisy", "CDN");

            entity.Property(e => e.ZnOZamNumer).HasColumnName("ZnO_ZamNumer");
            entity.Property(e => e.ZnOZamLp).HasColumnName("ZnO_ZamLp");
            entity.Property(e => e.ZnOOpis)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZnO_Opis");
            entity.Property(e => e.ZnOOpisCharset)
                .HasDefaultValue(0)
                .HasColumnName("ZnO_OpisCharset");
            entity.Property(e => e.ZnOTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZnO_Typ");
            entity.Property(e => e.ZnOZamFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZnO_ZamFirma");
            entity.Property(e => e.ZnOZamTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZnO_ZamTyp");

            entity.HasOne(d => d.ZnOZamNumerNavigation).WithMany(p => p.ZaNopisies)
                .HasForeignKey(d => d.ZnOZamNumer)
                .HasConstraintName("FK_ZnOPrimaryNoType");
        });

        modelBuilder.Entity<ZadaniaObiekty>(entity =>
        {
            entity.HasKey(e => new { e.ZaOZadId, e.ZaOObiTyp, e.ZaOObiNumer }).HasName("ZaO_Primary");

            entity.ToTable("ZadaniaObiekty", "CDN");

            entity.HasIndex(e => new { e.ZaOObiNumer, e.ZaOObiTyp }, "ZAOObiekt");

            entity.Property(e => e.ZaOZadId).HasColumnName("ZaO_ZadId");
            entity.Property(e => e.ZaOObiTyp).HasColumnName("ZaO_ObiTyp");
            entity.Property(e => e.ZaOObiNumer).HasColumnName("ZaO_ObiNumer");
            entity.Property(e => e.ZaOCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("ZaO_CzasPrzypomnienia");
            entity.Property(e => e.ZaOCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("ZaO_CzasUtworzenia");
            entity.Property(e => e.ZaOPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaO_Przypomnienie");

            entity.HasOne(d => d.ZaOZad).WithMany(p => p.ZadaniaObiekties)
                .HasForeignKey(d => d.ZaOZadId)
                .HasConstraintName("FK_ZaOPrimary");
        });

        modelBuilder.Entity<ZadaniaPrcPodl>(entity =>
        {
            entity.HasKey(e => new { e.ZppPrcNumer, e.ZppPrcPodlNumer }).HasName("ZPP_Primary");

            entity.ToTable("ZadaniaPrcPodl", "CDN", tb => tb.HasTrigger("ZadaniaPrcPodl_InsertUpdateHandler"));

            entity.HasIndex(e => e.ZppPrcPodlNumer, "ZPPPrcPodl");

            entity.Property(e => e.ZppPrcNumer).HasColumnName("ZPP_PrcNumer");
            entity.Property(e => e.ZppPrcPodlNumer).HasColumnName("ZPP_PrcPodlNumer");
            entity.Property(e => e.ZppFilter)
                .HasDefaultValue(0)
                .HasColumnName("ZPP_Filter");
            entity.Property(e => e.ZppPrcFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZPP_PrcFirma");
            entity.Property(e => e.ZppPrcLp)
                .HasDefaultValue(0)
                .HasColumnName("ZPP_PrcLp");
            entity.Property(e => e.ZppPrcPodlFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZPP_PrcPodlFirma");
            entity.Property(e => e.ZppPrcPodlLp)
                .HasDefaultValue(0)
                .HasColumnName("ZPP_PrcPodlLp");
            entity.Property(e => e.ZppPrcPodlTyp)
                .HasDefaultValue(0)
                .HasColumnName("ZPP_PrcPodlTyp");
            entity.Property(e => e.ZppPrcTyp)
                .HasDefaultValue(0)
                .HasColumnName("ZPP_PrcTyp");
        });

        modelBuilder.Entity<Zadanium>(entity =>
        {
            entity.HasKey(e => e.ZadId).HasName("Zad_Primary");

            entity.ToTable("Zadania", "CDN", tb =>
                {
                    tb.HasTrigger("Zadania_Delete");
                    tb.HasTrigger("Zadania_DeleteHandler");
                    tb.HasTrigger("Zadania_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.ZadTerminDo, e.ZadTerminOd }, "ZADTerminDo");

            entity.HasIndex(e => new { e.ZadZrdNumer, e.ZadZrdLp, e.ZadZrdTyp }, "ZADZrd");

            entity.Property(e => e.ZadId).HasColumnName("Zad_Id");
            entity.Property(e => e.ZadAktywny)
                .HasDefaultValue(0)
                .HasColumnName("Zad_Aktywny");
            entity.Property(e => e.ZadCalyDzien)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_CalyDzien");
            entity.Property(e => e.ZadCykliczne)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_Cykliczne");
            entity.Property(e => e.ZadCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Zad_CzasModyfikacji");
            entity.Property(e => e.ZadCzasPlanowanyJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_CzasPlanowanyJedn");
            entity.Property(e => e.ZadCzasPrzypomnienia)
                .HasDefaultValue(0)
                .HasColumnName("Zad_CzasPrzypomnienia");
            entity.Property(e => e.ZadCzasPrzypomnieniaJedn)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_CzasPrzypomnieniaJedn");
            entity.Property(e => e.ZadCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("Zad_CzasUtworzenia");
            entity.Property(e => e.ZadCzasWykonania)
                .HasDefaultValue(0)
                .HasColumnName("Zad_CzasWykonania");
            entity.Property(e => e.ZadKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zad_Kod");
            entity.Property(e => e.ZadLokalizacja)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zad_Lokalizacja");
            entity.Property(e => e.ZadNazwa)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zad_Nazwa");
            entity.Property(e => e.ZadNodDdsId)
                .HasDefaultValue(0)
                .HasColumnName("Zad_NodDdsId");
            entity.Property(e => e.ZadNodDwdId)
                .HasDefaultValue(0)
                .HasColumnName("Zad_NodDwdId");
            entity.Property(e => e.ZadNotatki)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zad_Notatki");
            entity.Property(e => e.ZadObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("Zad_ObiNumer");
            entity.Property(e => e.ZadObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zad_ObiTyp");
            entity.Property(e => e.ZadOkresId)
                .HasDefaultValue(0)
                .HasColumnName("Zad_OkresId");
            entity.Property(e => e.ZadOpeMnumer)
                .HasDefaultValue(0)
                .HasColumnName("Zad_OpeMNumer");
            entity.Property(e => e.ZadOpeMtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zad_OpeMTyp");
            entity.Property(e => e.ZadOpeUnumer)
                .HasDefaultValue(0)
                .HasColumnName("Zad_OpeUNumer");
            entity.Property(e => e.ZadOpeUtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zad_OpeUTyp");
            entity.Property(e => e.ZadOpeWnumer)
                .HasDefaultValue(0)
                .HasColumnName("Zad_OpeWNumer");
            entity.Property(e => e.ZadOpeWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zad_OpeWTyp");
            entity.Property(e => e.ZadOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zad_Opis");
            entity.Property(e => e.ZadPowtarzajCo)
                .HasDefaultValue(0)
                .HasColumnName("Zad_PowtarzajCo");
            entity.Property(e => e.ZadPowtarzajOkres)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_PowtarzajOkres");
            entity.Property(e => e.ZadPriorytet)
                .HasDefaultValue(0)
                .HasColumnName("Zad_Priorytet");
            entity.Property(e => e.ZadPrzypomnienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_Przypomnienie");
            entity.Property(e => e.ZadRezerwujCzas)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_RezerwujCzas");
            entity.Property(e => e.ZadSpotkanieO)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_SpotkanieO");
            entity.Property(e => e.ZadSynchronizuj)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zad_Synchronizuj");
            entity.Property(e => e.ZadTerminDo)
                .HasDefaultValue(0)
                .HasColumnName("Zad_TerminDo");
            entity.Property(e => e.ZadTerminOd)
                .HasDefaultValue(0)
                .HasColumnName("Zad_TerminOd");
            entity.Property(e => e.ZadZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zad_ZrdLp");
            entity.Property(e => e.ZadZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("Zad_ZrdNumer");
            entity.Property(e => e.ZadZrdPytania)
                .HasDefaultValue(0)
                .HasColumnName("Zad_ZrdPytania");
            entity.Property(e => e.ZadZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zad_ZrdTyp");
        });

        modelBuilder.Entity<ZamElem>(entity =>
        {
            entity.HasKey(e => new { e.ZaEGidnumer, e.ZaEGidlp }).HasName("ZaE_Primary");

            entity.ToTable("ZamElem", "CDN", tb =>
                {
                    tb.HasTrigger("ZamElemAlias_DeleteHandler");
                    tb.HasTrigger("ZamElem_DeleteHandler");
                    tb.HasTrigger("ZamElem_DeletePunkty");
                    tb.HasTrigger("ZamElem_InsertUpdateHandler");
                    tb.HasTrigger("ZamElem_InsertUpdatePunkty");
                });

            entity.HasIndex(e => new { e.ZaEAkwTyp, e.ZaEAkwNumer, e.ZaETstamp }, "ZaEAkwizytor");

            entity.HasIndex(e => new { e.ZaEKntNumer, e.ZaETstamp }, "ZaEKontrah");

            entity.HasIndex(e => e.ZaEMagNumer, "ZaEMagazyn");

            entity.HasIndex(e => e.ZaEPakietId, "ZaEPakiet");

            entity.HasIndex(e => new { e.ZaETwrNumer, e.ZaETstamp }, "ZaETowar");

            entity.HasIndex(e => new { e.ZaETwrKod, e.ZaEGidnumer, e.ZaEGidlp }, "ZaETowarKod").IsUnique();

            entity.Property(e => e.ZaEGidnumer).HasColumnName("ZaE_GIDNumer");
            entity.Property(e => e.ZaEGidlp).HasColumnName("ZaE_GIDLp");
            entity.Property(e => e.ZaEAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_AkwFirma");
            entity.Property(e => e.ZaEAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_AkwLp");
            entity.Property(e => e.ZaEAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_AkwNumer");
            entity.Property(e => e.ZaEAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_AkwTyp");
            entity.Property(e => e.ZaECchFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_CChFirma");
            entity.Property(e => e.ZaECchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_CChLp");
            entity.Property(e => e.ZaECchNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_CChNumer");
            entity.Property(e => e.ZaECchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_CChTyp");
            entity.Property(e => e.ZaECecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaE_Cecha");
            entity.Property(e => e.ZaECenaKatalogowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZaE_CenaKatalogowa");
            entity.Property(e => e.ZaECenaOferowana)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZaE_CenaOferowana");
            entity.Property(e => e.ZaECenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_CenaSpr");
            entity.Property(e => e.ZaECenaUzgodniona)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZaE_CenaUzgodniona");
            entity.Property(e => e.ZaEDataAktywacjiRez)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_DataAktywacjiRez");
            entity.Property(e => e.ZaEDataOdZam)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_DataOdZam");
            entity.Property(e => e.ZaEDataPotwDst)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_DataPotwDst");
            entity.Property(e => e.ZaEDataWaznosciRez)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_DataWaznosciRez");
            entity.Property(e => e.ZaEFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaE_FlagaNB");
            entity.Property(e => e.ZaEFlagaVat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_FlagaVAT");
            entity.Property(e => e.ZaEFormatkaCyr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_FormatkaCyr");
            entity.Property(e => e.ZaEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_GIDFirma");
            entity.Property(e => e.ZaEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_GIDTyp");
            entity.Property(e => e.ZaEGratis)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_Gratis");
            entity.Property(e => e.ZaEGrupaPod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaE_GrupaPod");
            entity.Property(e => e.ZaEGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("ZaE_GUID");
            entity.Property(e => e.ZaEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZaE_Ilosc");
            entity.Property(e => e.ZaEIloscMax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZaE_IloscMax");
            entity.Property(e => e.ZaEIloscMin)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZaE_IloscMin");
            entity.Property(e => e.ZaEJmDzielWzwm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_JmDzielWZWM");
            entity.Property(e => e.ZaEJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_JmFormat");
            entity.Property(e => e.ZaEJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_JmFormatZ");
            entity.Property(e => e.ZaEJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaE_JmZ");
            entity.Property(e => e.ZaEKgojednostkowe)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("ZaE_KGOJednostkowe");
            entity.Property(e => e.ZaEKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_KntFirma");
            entity.Property(e => e.ZaEKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_KntLp");
            entity.Property(e => e.ZaEKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_KntNumer");
            entity.Property(e => e.ZaEKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_KntTyp");
            entity.Property(e => e.ZaEKpnid)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_KPNId");
            entity.Property(e => e.ZaELicencja)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_Licencja");
            entity.Property(e => e.ZaEMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_MagFirma");
            entity.Property(e => e.ZaEMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_MagLp");
            entity.Property(e => e.ZaEMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_MagNumer");
            entity.Property(e => e.ZaEMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_MagTyp");
            entity.Property(e => e.ZaENagroda)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_Nagroda");
            entity.Property(e => e.ZaENrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_NrKursu");
            entity.Property(e => e.ZaEOddElemId)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_OddElemId");
            entity.Property(e => e.ZaEOplataSpozFlaga)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_OplataSpozFlaga");
            entity.Property(e => e.ZaEPakietId)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_PakietId");
            entity.Property(e => e.ZaEPakietTwgNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_PakietTwgNumer");
            entity.Property(e => e.ZaEPakietTwgTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_PakietTwgTyp");
            entity.Property(e => e.ZaEPakietWymaganaPoz)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_PakietWymaganaPoz");
            entity.Property(e => e.ZaEPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_Pozycja");
            entity.Property(e => e.ZaEPrecyzjaCeny)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_PrecyzjaCeny");
            entity.Property(e => e.ZaEPrecyzjaCenyPocz)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_PrecyzjaCenyPocz");
            entity.Property(e => e.ZaEProg)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaE_Prog");
            entity.Property(e => e.ZaEProgTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_ProgTyp");
            entity.Property(e => e.ZaEPromocjaProgId)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_PromocjaProgID");
            entity.Property(e => e.ZaEPromocje)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_Promocje");
            entity.Property(e => e.ZaEPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZaE_PrzeliczL");
            entity.Property(e => e.ZaEPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZaE_PrzeliczM");
            entity.Property(e => e.ZaEPunkty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZaE_Punkty");
            entity.Property(e => e.ZaERabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ZaE_Rabat");
            entity.Property(e => e.ZaERabatKorekta)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZaE_RabatKorekta");
            entity.Property(e => e.ZaERabatOpeGen)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaE_RabatOpeGen");
            entity.Property(e => e.ZaERabatPromocyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZaE_RabatPromocyjny");
            entity.Property(e => e.ZaEReEfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_ReEFirma");
            entity.Property(e => e.ZaEReElp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_ReELp");
            entity.Property(e => e.ZaEReEnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_ReENumer");
            entity.Property(e => e.ZaEReEprodLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_ReEProdLp");
            entity.Property(e => e.ZaEReEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_ReETyp");
            entity.Property(e => e.ZaEReNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_ReNNumer");
            entity.Property(e => e.ZaERodzajCenyBazowej)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_RodzajCenyBazowej");
            entity.Property(e => e.ZaERodzajDatyRealizacji)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_RodzajDatyRealizacji");
            entity.Property(e => e.ZaERownanie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_Rownanie");
            entity.Property(e => e.ZaEStawkaCukierStala)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("ZaE_StawkaCukierStala");
            entity.Property(e => e.ZaEStawkaCukierZmienna)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("ZaE_StawkaCukierZmienna");
            entity.Property(e => e.ZaEStawkaKofeina)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("ZaE_StawkaKofeina");
            entity.Property(e => e.ZaEStawkaPod)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ZaE_StawkaPod");
            entity.Property(e => e.ZaETstamp)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_TStamp");
            entity.Property(e => e.ZaETwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_TwrFirma");
            entity.Property(e => e.ZaETwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaE_TwrKod");
            entity.Property(e => e.ZaETwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_TwrLp");
            entity.Property(e => e.ZaETwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaE_TwrNazwa");
            entity.Property(e => e.ZaETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_TwrNumer");
            entity.Property(e => e.ZaETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_TwrTyp");
            entity.Property(e => e.ZaETypCenyNabycia)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_TypCenyNabycia");
            entity.Property(e => e.ZaETypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_TypJm");
            entity.Property(e => e.ZaEUpust)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaE_Upust");
            entity.Property(e => e.ZaEUpustKnt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaE_UpustKnt");
            entity.Property(e => e.ZaEUpustKntTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_UpustKntTyp");
            entity.Property(e => e.ZaEUpustTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaE_UpustTyp");
            entity.Property(e => e.ZaEWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaE_Waluta");
            entity.Property(e => e.ZaEWartoscPoRabacie)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaE_WartoscPoRabacie");
            entity.Property(e => e.ZaEWymuszonePrmid)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_WymuszonePRMID");
            entity.Property(e => e.ZaEZlom)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_Zlom");
            entity.Property(e => e.ZaEZrodlowa)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ZaE_Zrodlowa");
            entity.Property(e => e.ZaEZstFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_ZstFirma");
            entity.Property(e => e.ZaEZstLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_ZstLp");
            entity.Property(e => e.ZaEZstNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaE_ZstNumer");
            entity.Property(e => e.ZaEZstTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaE_ZstTyp");

            entity.HasOne(d => d.ZaEGidnumerNavigation).WithMany(p => p.ZamElems)
                .HasForeignKey(d => d.ZaEGidnumer)
                .HasConstraintName("FK_ZaEPrimaryNoType");
        });

        modelBuilder.Entity<ZamElemListView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ZamElemListView", "CDN");

            entity.Property(e => e.ZaElvCenaKoncowa)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZaELV_CenaKoncowa");
            entity.Property(e => e.ZaElvDataRealizacji).HasColumnName("ZaELV_DataRealizacji");
            entity.Property(e => e.ZaElvDataWaznosci).HasColumnName("ZaELV_DataWaznosci");
            entity.Property(e => e.ZaElvDataWystawienia).HasColumnName("ZaELV_DataWystawienia");
            entity.Property(e => e.ZaElvDokument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZaELV_Dokument");
            entity.Property(e => e.ZaElvDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ZaELV_DokumentObcy");
            entity.Property(e => e.ZaElvGidfirma).HasColumnName("ZaELV_GIDFirma");
            entity.Property(e => e.ZaElvGidlp).HasColumnName("ZaELV_GIDLp");
            entity.Property(e => e.ZaElvGidnumer).HasColumnName("ZaELV_GIDNumer");
            entity.Property(e => e.ZaElvGidtyp).HasColumnName("ZaELV_GIDTyp");
            entity.Property(e => e.ZaElvIlosc)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZaELV_Ilosc");
            entity.Property(e => e.ZaElvIloscDoRealBezZasobu)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("ZaELV_IloscDoRealBezZasobu");
            entity.Property(e => e.ZaElvIloscDoRealizacji)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("ZaELV_IloscDoRealizacji");
            entity.Property(e => e.ZaElvIloscZarezerwowana)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("ZaELV_IloscZarezerwowana");
            entity.Property(e => e.ZaElvIloscZrealizowana)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("ZaELV_IloscZrealizowana");
            entity.Property(e => e.ZaElvJmFormat).HasColumnName("ZaELV_JmFormat");
            entity.Property(e => e.ZaElvKnDakronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ZaELV_KnDAkronim");
            entity.Property(e => e.ZaElvKnDmiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ZaELV_KnDMiasto");
            entity.Property(e => e.ZaElvKnDnazwa)
                .HasMaxLength(352)
                .IsUnicode(false)
                .HasColumnName("ZaELV_KnDNazwa");
            entity.Property(e => e.ZaElvKntAkronim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ZaELV_KntAkronim");
            entity.Property(e => e.ZaElvKntMiasto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ZaELV_KntMiasto");
            entity.Property(e => e.ZaElvKntNazwa)
                .HasMaxLength(352)
                .IsUnicode(false)
                .HasColumnName("ZaELV_KntNazwa");
            entity.Property(e => e.ZaElvKntNumer).HasColumnName("ZaELV_KntNumer");
            entity.Property(e => e.ZaElvKpnid).HasColumnName("ZaELV_KPNId");
            entity.Property(e => e.ZaElvMagDkod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZaELV_MagDKod");
            entity.Property(e => e.ZaElvMagDnumer).HasColumnName("ZaELV_MagDNumer");
            entity.Property(e => e.ZaElvMagKod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZaELV_MagKod");
            entity.Property(e => e.ZaElvMagNumer).HasColumnName("ZaELV_MagNumer");
            entity.Property(e => e.ZaElvPrecyzjaCeny).HasColumnName("ZaELV_PrecyzjaCeny");
            entity.Property(e => e.ZaElvRabat)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ZaELV_Rabat");
            entity.Property(e => e.ZaElvReEtyp).HasColumnName("ZaELV_ReETyp");
            entity.Property(e => e.ZaElvRodzajOferty)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("ZaELV_RodzajOferty");
            entity.Property(e => e.ZaElvStan)
                .HasMaxLength(32)
                .HasColumnName("ZaELV_Stan");
            entity.Property(e => e.ZaElvTwrJmcalkowita).HasColumnName("ZaELV_TwrJMCalkowita");
            entity.Property(e => e.ZaElvTwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ZaELV_TwrKod");
            entity.Property(e => e.ZaElvTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ZaELV_TwrNazwa");
            entity.Property(e => e.ZaElvTwrNumer).HasColumnName("ZaELV_TwrNumer");
            entity.Property(e => e.ZaElvTwrTyp).HasColumnName("ZaELV_TwrTyp");
            entity.Property(e => e.ZaElvWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ZaELV_Waluta");
            entity.Property(e => e.ZaElvWartoscPoRabacie)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaELV_WartoscPoRabacie");
            entity.Property(e => e.ZaElvZstTyp).HasColumnName("ZaELV_ZstTyp");
        });

        modelBuilder.Entity<ZamHistoriaZmian>(entity =>
        {
            entity.HasKey(e => e.ZahId).HasName("ZAH_Primary");

            entity.ToTable("ZamHistoriaZmian", "CDN", tb => tb.HasTrigger("ZamHistoriaZmian_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.ZahTwrKod, e.ZahId }, "ZaHTwrKod").IsUnique();

            entity.HasIndex(e => new { e.ZahGidnumer, e.ZahGidlp }, "ZaHZamElemNoType");

            entity.Property(e => e.ZahId).HasColumnName("ZAH_ID");
            entity.Property(e => e.ZahCenaPo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZAH_CenaPo");
            entity.Property(e => e.ZahCenaPrzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZAH_CenaPrzed");
            entity.Property(e => e.ZahCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("ZAH_CzasModyfikacji");
            entity.Property(e => e.ZahDataRealizacjiPo)
                .HasDefaultValue(0)
                .HasColumnName("ZAH_DataRealizacjiPo");
            entity.Property(e => e.ZahDataRealizacjiPrzed)
                .HasDefaultValue(0)
                .HasColumnName("ZAH_DataRealizacjiPrzed");
            entity.Property(e => e.ZahGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZAH_GIDFirma");
            entity.Property(e => e.ZahGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZAH_GIDLp");
            entity.Property(e => e.ZahGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZAH_GIDNumer");
            entity.Property(e => e.ZahGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZAH_GIDTyp");
            entity.Property(e => e.ZahIloscPo)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZAH_IloscPo");
            entity.Property(e => e.ZahIloscPrzed)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZAH_IloscPrzed");
            entity.Property(e => e.ZahOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZAH_OpeNumer");
            entity.Property(e => e.ZahTwrKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZAH_TwrKod");
            entity.Property(e => e.ZahZmiana)
                .HasDefaultValue((short)0)
                .HasColumnName("ZAH_Zmiana");

            entity.HasOne(d => d.ZahGidnumerNavigation).WithMany(p => p.ZamHistoriaZmians)
                .HasForeignKey(d => d.ZahGidnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZaHZamElemNoType");
        });

        modelBuilder.Entity<ZamNag>(entity =>
        {
            entity.HasKey(e => e.ZaNGidnumer).HasName("ZaN_Primary");

            entity.ToTable("ZamNag", "CDN", tb =>
                {
                    tb.HasTrigger("ZamNag_DeleteAtrybutyHist");
                    tb.HasTrigger("ZamNag_DeleteHandler");
                    tb.HasTrigger("ZamNag_HistoriaZmian");
                    tb.HasTrigger("ZamNag_InitFields");
                    tb.HasTrigger("ZamNag_InsertUpdateHandler");
                    tb.HasTrigger("ZamNag_LastModTStamp");
                    tb.HasTrigger("ZamNag_SprawdzSesje");
                    tb.HasTrigger("ZamNag_UpdatePunkty");
                });

            entity.HasIndex(e => new { e.ZaNAkwTyp, e.ZaNAkwNumer, e.ZaNZamTyp, e.ZaNStan, e.ZaNDataWystawienia, e.ZaNGidtyp, e.ZaNGidnumer }, "ZaNAkwizytor").IsUnique();

            entity.HasIndex(e => new { e.ZaNRodzaj, e.ZaNZamTyp, e.ZaNRokMiesiac, e.ZaNZamRok, e.ZaNZamMiesiac, e.ZaNZamSeria, e.ZaNZamNumer, e.ZaNZamLp }, "ZaNData").IsUnique();

            entity.HasIndex(e => new { e.ZaNDataRealizacji, e.ZaNZamRok, e.ZaNZamSeria, e.ZaNZamNumer, e.ZaNZamMiesiac, e.ZaNZamTyp, e.ZaNRodzaj }, "ZaNDataReal").IsUnique();

            entity.HasIndex(e => new { e.ZaNFiaskoId, e.ZaNZamTyp, e.ZaNStan }, "ZaNFiasko");

            entity.HasIndex(e => new { e.ZaNFiaskoId, e.ZaNZamTyp, e.ZaNKntTyp, e.ZaNKntNumer }, "ZaNFiaskoKontrahent");

            entity.HasIndex(e => e.ZaNKnAnumer, "ZaNKnA");

            entity.HasIndex(e => e.ZaNAdWnumer, "ZaNKontrAdW");

            entity.HasIndex(e => new { e.ZaNKntTyp, e.ZaNKntNumer, e.ZaNRodzaj, e.ZaNZamTyp, e.ZaNStan, e.ZaNDataWystawienia, e.ZaNGidtyp, e.ZaNGidnumer }, "ZaNKontrah").IsUnique();

            entity.HasIndex(e => new { e.ZaNKnDtyp, e.ZaNKnDnumer, e.ZaNRodzaj, e.ZaNZamTyp, e.ZaNStan, e.ZaNDataWystawienia, e.ZaNGidtyp, e.ZaNGidnumer }, "ZaNKontrahDocelowy").IsUnique();

            entity.HasIndex(e => new { e.ZaNKorTyp, e.ZaNKorNumer }, "ZaNKorekta");

            entity.HasIndex(e => e.ZaNMagNumer, "ZaNMagazyn");

            entity.HasIndex(e => e.ZaNMagDnumer, "ZaNMagazynD");

            entity.HasIndex(e => new { e.ZaNRodzaj, e.ZaNZamTyp, e.ZaNZamRok, e.ZaNZamSeria, e.ZaNZamNumer, e.ZaNZamMiesiac, e.ZaNZamLp }, "ZaNNumer").IsUnique();

            entity.HasIndex(e => new { e.ZaNKntNumer, e.ZaNZamTyp, e.ZaNDokumentObcy, e.ZaNGidnumer }, "ZaNNumerObcy");

            entity.HasIndex(e => new { e.ZaNRodzaj, e.ZaNPomTyp, e.ZaNPomRok, e.ZaNPomMiesiac, e.ZaNPomSeria, e.ZaNPomNumer, e.ZaNPomLp }, "ZaNNumerPom").IsUnique();

            entity.HasIndex(e => new { e.ZaNZamTyp, e.ZaNZamRok, e.ZaNZamSeria, e.ZaNRodzaj, e.ZaNZamMiesiac }, "ZaNNumerRodzaj");

            entity.HasIndex(e => new { e.ZaNOpeTypM, e.ZaNOpeNumerM, e.ZaNStan, e.ZaNDataWystawienia, e.ZaNGidtyp, e.ZaNGidnumer }, "ZaNOper").IsUnique();

            entity.HasIndex(e => new { e.ZaNOpiTyp, e.ZaNOpiNumer }, "ZaNOpiekun");

            entity.HasIndex(e => new { e.ZaNPcKid, e.ZaNOddDokId, e.ZaNLastMod }, "ZaNOptymalizacjaMOS");

            entity.HasIndex(e => new { e.ZaNKnPtyp, e.ZaNKnPnumer }, "ZaNPlatnik");

            entity.HasIndex(e => e.ZaNPrjId, "ZaNPrjID");

            entity.HasIndex(e => new { e.ZaNZamTyp, e.ZaNStan, e.ZaNDataWystawienia, e.ZaNGidtyp, e.ZaNGidnumer }, "ZaNStan").IsUnique();

            entity.HasIndex(e => new { e.ZaNZrdTyp, e.ZaNZrdNumer, e.ZaNRodzaj, e.ZaNPomTyp, e.ZaNPomRok, e.ZaNPomSeria, e.ZaNPomNumer, e.ZaNPomMiesiac, e.ZaNPomLp }, "ZaNZrodlo").IsUnique();

            entity.Property(e => e.ZaNGidnumer).HasColumnName("ZaN_GIDNumer");
            entity.Property(e => e.ZaNAdPnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_AdPNumer");
            entity.Property(e => e.ZaNAdWlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_AdWLp");
            entity.Property(e => e.ZaNAdWnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_AdWNumer");
            entity.Property(e => e.ZaNAdWtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_AdWTyp");
            entity.Property(e => e.ZaNAdwFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_AdwFirma");
            entity.Property(e => e.ZaNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_Aktywny");
            entity.Property(e => e.ZaNAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_AkwFirma");
            entity.Property(e => e.ZaNAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_AkwLp");
            entity.Property(e => e.ZaNAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_AkwNumer");
            entity.Property(e => e.ZaNAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_AkwTyp");
            entity.Property(e => e.ZaNCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_CechaOpis");
            entity.Property(e => e.ZaNCenaSpr)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_CenaSpr");
            entity.Property(e => e.ZaNDataAkceptacji)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataAkceptacji");
            entity.Property(e => e.ZaNDataAktywacjiRez)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataAktywacjiRez");
            entity.Property(e => e.ZaNDataOdZam)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataOdZam");
            entity.Property(e => e.ZaNDataPotwOferty)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataPotwOferty");
            entity.Property(e => e.ZaNDataPotwierdz)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataPotwierdz");
            entity.Property(e => e.ZaNDataPromocjiRodzaj)
                .HasDefaultValue((byte)1)
                .HasColumnName("ZaN_DataPromocjiRodzaj");
            entity.Property(e => e.ZaNDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataRealizacji");
            entity.Property(e => e.ZaNDataWaznosci)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataWaznosci");
            entity.Property(e => e.ZaNDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataWystawienia");
            entity.Property(e => e.ZaNDataZapytania)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DataZapytania");
            entity.Property(e => e.ZaNDokZwiazane)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_DokZwiazane");
            entity.Property(e => e.ZaNDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_DokumentObcy");
            entity.Property(e => e.ZaNDokumentObcyCharset)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DokumentObcyCharset");
            entity.Property(e => e.ZaNDokumentObcyP)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_DokumentObcyP");
            entity.Property(e => e.ZaNDokumentObcyPcharset)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_DokumentObcyPCharset");
            entity.Property(e => e.ZaNDomyslnyDokRealizacja)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_DomyslnyDokRealizacja");
            entity.Property(e => e.ZaNEan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_EAN");
            entity.Property(e => e.ZaNExpoNorm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_ExpoNorm");
            entity.Property(e => e.ZaNFiaskoId)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_FiaskoID");
            entity.Property(e => e.ZaNFlagaNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_FlagaNB");
            entity.Property(e => e.ZaNFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_FormaNazwa");
            entity.Property(e => e.ZaNFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_FormaNr");
            entity.Property(e => e.ZaNFormaRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ZaN_FormaRabat");
            entity.Property(e => e.ZaNFormatkaCyr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_FormatkaCyr");
            entity.Property(e => e.ZaNFrMnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_FrMNumer");
            entity.Property(e => e.ZaNFrSid)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_FrSID");
            entity.Property(e => e.ZaNGenerujWieleZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_GenerujWieleZam");
            entity.Property(e => e.ZaNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_GIDFirma");
            entity.Property(e => e.ZaNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_GIDLp");
            entity.Property(e => e.ZaNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_GIDTyp");
            entity.Property(e => e.ZaNGodzinaPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_GodzinaPotwierdzenia");
            entity.Property(e => e.ZaNGodzinaWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_GodzinaWystawienia");
            entity.Property(e => e.ZaNGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("ZaN_GUID");
            entity.Property(e => e.ZaNId)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_ID");
            entity.Property(e => e.ZaNIncotermsMiejsce)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_IncotermsMiejsce");
            entity.Property(e => e.ZaNIncotermsSymbol)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_IncotermsSymbol");
            entity.Property(e => e.ZaNKarNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KarNumer");
            entity.Property(e => e.ZaNKnAfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnAFirma");
            entity.Property(e => e.ZaNKnAlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnALp");
            entity.Property(e => e.ZaNKnAnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnANumer");
            entity.Property(e => e.ZaNKnAtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnATyp");
            entity.Property(e => e.ZaNKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnDFirma");
            entity.Property(e => e.ZaNKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnDLp");
            entity.Property(e => e.ZaNKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnDNumer");
            entity.Property(e => e.ZaNKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnDTyp");
            entity.Property(e => e.ZaNKnPnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnPNumer");
            entity.Property(e => e.ZaNKnPtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnPTyp");
            entity.Property(e => e.ZaNKnSfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSFirma");
            entity.Property(e => e.ZaNKnSfirmaOdb)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSFirmaOdb");
            entity.Property(e => e.ZaNKnSfirmaP)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSFirmaP");
            entity.Property(e => e.ZaNKnSfirmaPlt)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSFirmaPlt");
            entity.Property(e => e.ZaNKnSlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSLp");
            entity.Property(e => e.ZaNKnSlpOdb)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSLpOdb");
            entity.Property(e => e.ZaNKnSlpP)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSLpP");
            entity.Property(e => e.ZaNKnSlpPlt)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSLpPlt");
            entity.Property(e => e.ZaNKnSnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSNumer");
            entity.Property(e => e.ZaNKnSnumerOdb)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSNumerOdb");
            entity.Property(e => e.ZaNKnSnumerP)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSNumerP");
            entity.Property(e => e.ZaNKnSnumerPlt)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KnSNumerPlt");
            entity.Property(e => e.ZaNKnStyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSTyp");
            entity.Property(e => e.ZaNKnStypOdb)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSTypOdb");
            entity.Property(e => e.ZaNKnStypP)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSTypP");
            entity.Property(e => e.ZaNKnStypPlt)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KnSTypPlt");
            entity.Property(e => e.ZaNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KntFirma");
            entity.Property(e => e.ZaNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KntLp");
            entity.Property(e => e.ZaNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KntNumer");
            entity.Property(e => e.ZaNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KntTyp");
            entity.Property(e => e.ZaNKodRodzajuTransakcji)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_KodRodzajuTransakcji");
            entity.Property(e => e.ZaNKodRodzajuTransportu)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_KodRodzajuTransportu");
            entity.Property(e => e.ZaNKontrolujIlosciPrzyGenZam)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_KontrolujIlosciPrzyGenZam");
            entity.Property(e => e.ZaNKorFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KorFirma");
            entity.Property(e => e.ZaNKorLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KorLp");
            entity.Property(e => e.ZaNKorNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_KorNumer");
            entity.Property(e => e.ZaNKorTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_KorTyp");
            entity.Property(e => e.ZaNKrajPrzezWys)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_KrajPrzezWys");
            entity.Property(e => e.ZaNKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("ZaN_KursL");
            entity.Property(e => e.ZaNKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ZaN_KursM");
            entity.Property(e => e.ZaNLastMod)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_LastMod");
            entity.Property(e => e.ZaNLimitKredytowy)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_LimitKredytowy");
            entity.Property(e => e.ZaNLimitKredytowyKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaN_LimitKredytowyKwota");
            entity.Property(e => e.ZaNLimitKredytowyWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_LimitKredytowyWaluta");
            entity.Property(e => e.ZaNLimitKredytowyWaznyDo)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_LimitKredytowyWaznyDo");
            entity.Property(e => e.ZaNLkopii)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_LKopii");
            entity.Property(e => e.ZaNMaGdtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_MaGDTyp");
            entity.Property(e => e.ZaNMagDnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_MagDNumer");
            entity.Property(e => e.ZaNMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_MagFirma");
            entity.Property(e => e.ZaNMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_MagLp");
            entity.Property(e => e.ZaNMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_MagNumer");
            entity.Property(e => e.ZaNMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_MagTyp");
            entity.Property(e => e.ZaNNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_NrKursu");
            entity.Property(e => e.ZaNOddDokId)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OddDokId");
            entity.Property(e => e.ZaNOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeFirmaM");
            entity.Property(e => e.ZaNOpeFirmaMod)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeFirmaMod");
            entity.Property(e => e.ZaNOpeFirmaP)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeFirmaP");
            entity.Property(e => e.ZaNOpeFirmaPotwOfe)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeFirmaPotwOfe");
            entity.Property(e => e.ZaNOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeFirmaW");
            entity.Property(e => e.ZaNOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeFirmaZ");
            entity.Property(e => e.ZaNOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeLpM");
            entity.Property(e => e.ZaNOpeLpMod)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeLpMod");
            entity.Property(e => e.ZaNOpeLpP)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeLpP");
            entity.Property(e => e.ZaNOpeLpPotwOfe)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeLpPotwOfe");
            entity.Property(e => e.ZaNOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeLpW");
            entity.Property(e => e.ZaNOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeLpZ");
            entity.Property(e => e.ZaNOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeNumerM");
            entity.Property(e => e.ZaNOpeNumerMod)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeNumerMod");
            entity.Property(e => e.ZaNOpeNumerP)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeNumerP");
            entity.Property(e => e.ZaNOpeNumerPotwOfe)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeNumerPotwOfe");
            entity.Property(e => e.ZaNOpeNumerPotwZapyt)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeNumerPotwZapyt");
            entity.Property(e => e.ZaNOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeNumerW");
            entity.Property(e => e.ZaNOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpeNumerZ");
            entity.Property(e => e.ZaNOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeTypM");
            entity.Property(e => e.ZaNOpeTypMod)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeTypMod");
            entity.Property(e => e.ZaNOpeTypP)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeTypP");
            entity.Property(e => e.ZaNOpeTypPotwOfe)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeTypPotwOfe");
            entity.Property(e => e.ZaNOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeTypW");
            entity.Property(e => e.ZaNOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpeTypZ");
            entity.Property(e => e.ZaNOperatorPos)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OperatorPOS");
            entity.Property(e => e.ZaNOpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpiFirma");
            entity.Property(e => e.ZaNOpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpiLP");
            entity.Property(e => e.ZaNOpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OpiNumer");
            entity.Property(e => e.ZaNOpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_OpiTyp");
            entity.Property(e => e.ZaNOplataSpozFlaga)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_OplataSpozFlaga");
            entity.Property(e => e.ZaNOstatniaModyfikacjaPos)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_OstatniaModyfikacjaPOS");
            entity.Property(e => e.ZaNPcKid)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_PcKID");
            entity.Property(e => e.ZaNPodstawaZw)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_PodstawaZW");
            entity.Property(e => e.ZaNPomLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_PomLp");
            entity.Property(e => e.ZaNPomMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_PomMiesiac");
            entity.Property(e => e.ZaNPomNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_PomNumer");
            entity.Property(e => e.ZaNPomRok)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_PomRok");
            entity.Property(e => e.ZaNPomSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_PomSeria");
            entity.Property(e => e.ZaNPomTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_PomTyp");
            entity.Property(e => e.ZaNPotwOferty)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_PotwOferty");
            entity.Property(e => e.ZaNPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_PriorytetRez");
            entity.Property(e => e.ZaNPrjId)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_PrjId");
            entity.Property(e => e.ZaNPromocje)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_Promocje");
            entity.Property(e => e.ZaNPromocjePar)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_PromocjePar");
            entity.Property(e => e.ZaNPrzyczynaZw)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_PrzyczynaZW");
            entity.Property(e => e.ZaNPsAid)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_PsAID");
            entity.Property(e => e.ZaNRabat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaN_Rabat");
            entity.Property(e => e.ZaNRabatPromocyjnyGlobalny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZaN_RabatPromocyjnyGlobalny");
            entity.Property(e => e.ZaNRabatW)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaN_RabatW");
            entity.Property(e => e.ZaNRealWcalosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_RealWCalosci");
            entity.Property(e => e.ZaNRezZasTylkoAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_RezZasTylkoAktywne");
            entity.Property(e => e.ZaNRezerwacjeNaNiepotwierdzonym)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_RezerwacjeNaNiepotwierdzonym");
            entity.Property(e => e.ZaNRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_RezerwujZasoby");
            entity.Property(e => e.ZaNRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_Rodzaj");
            entity.Property(e => e.ZaNRodzajDatyRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_RodzajDatyRealizacji");
            entity.Property(e => e.ZaNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_RokMiesiac");
            entity.Property(e => e.ZaNSpDostawy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_SpDostawy");
            entity.Property(e => e.ZaNStan)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_Stan");
            entity.Property(e => e.ZaNStanZapytania)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_StanZapytania");
            entity.Property(e => e.ZaNStatusPlatnosciPos)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_StatusPlatnosciPOS");
            entity.Property(e => e.ZaNStatusRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_StatusRealizacji");
            entity.Property(e => e.ZaNTerminPlatnosci)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_TerminPlatnosci");
            entity.Property(e => e.ZaNTypKursu)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_TypKursu");
            entity.Property(e => e.ZaNTypRabatu)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_TypRabatu");
            entity.Property(e => e.ZaNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_Url");
            entity.Property(e => e.ZaNWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_Waluta");
            entity.Property(e => e.ZaNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_Wsk");
            entity.Property(e => e.ZaNWspolnaWaluta).HasColumnName("ZaN_WspolnaWaluta");
            entity.Property(e => e.ZaNWtrId)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_WtrID");
            entity.Property(e => e.ZaNWtrProgId)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_WtrProgID");
            entity.Property(e => e.ZaNWyslano)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_Wyslano");
            entity.Property(e => e.ZaNZamLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_ZamLp");
            entity.Property(e => e.ZaNZamMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaN_ZamMiesiac");
            entity.Property(e => e.ZaNZamNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_ZamNumer");
            entity.Property(e => e.ZaNZamRok)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_ZamRok");
            entity.Property(e => e.ZaNZamSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaN_ZamSeria");
            entity.Property(e => e.ZaNZamTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_ZamTyp");
            entity.Property(e => e.ZaNZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_ZrdFirma");
            entity.Property(e => e.ZaNZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_ZrdLp");
            entity.Property(e => e.ZaNZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_ZrdNumer");
            entity.Property(e => e.ZaNZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaN_ZrdTyp");
            entity.Property(e => e.ZaNZrodloPochodzeniaEsklep)
                .HasDefaultValue(0)
                .HasColumnName("ZaN_ZrodloPochodzeniaESklep");
        });

        modelBuilder.Entity<ZamPlat>(entity =>
        {
            entity.HasKey(e => new { e.ZaPGidnumer, e.ZaPGidlp }).HasName("ZaP_Primary");

            entity.ToTable("ZamPlat", "CDN", tb =>
                {
                    tb.HasTrigger("ZamPlat_DeleteHandler");
                    tb.HasTrigger("ZamPlat_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.ZaPTrNtyp, e.ZaPTrNnumer }, "ZaPZaliczkowa");

            entity.Property(e => e.ZaPGidnumer).HasColumnName("ZaP_GIDNumer");
            entity.Property(e => e.ZaPGidlp).HasColumnName("ZaP_GIDLp");
            entity.Property(e => e.ZaPFormaNazwa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaP_FormaNazwa");
            entity.Property(e => e.ZaPFormaNr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaP_FormaNr");
            entity.Property(e => e.ZaPGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaP_GIDFirma");
            entity.Property(e => e.ZaPGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaP_GIDTyp");
            entity.Property(e => e.ZaPKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("ZaP_KursL");
            entity.Property(e => e.ZaPKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ZaP_KursM");
            entity.Property(e => e.ZaPKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaP_Kwota");
            entity.Property(e => e.ZaPNotatki)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaP_Notatki");
            entity.Property(e => e.ZaPNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaP_NrKursu");
            entity.Property(e => e.ZaPPozostaje)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaP_Pozostaje");
            entity.Property(e => e.ZaPProcent)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ZaP_Procent");
            entity.Property(e => e.ZaPTermin)
                .HasDefaultValue(0)
                .HasColumnName("ZaP_Termin");
            entity.Property(e => e.ZaPTerminDni)
                .HasDefaultValue(0)
                .HasColumnName("ZaP_TerminDni");
            entity.Property(e => e.ZaPTrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZaP_TrNNumer");
            entity.Property(e => e.ZaPTrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaP_TrNTyp");
            entity.Property(e => e.ZaPTyp)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaP_Typ");
            entity.Property(e => e.ZaPWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaP_Waluta");

            entity.HasOne(d => d.ZaPGidnumerNavigation).WithMany(p => p.ZamPlats)
                .HasForeignKey(d => d.ZaPGidnumer)
                .HasConstraintName("FK_ZaPPrimaryNoType");
        });

        modelBuilder.Entity<ZamRealizacja>(entity =>
        {
            entity.HasKey(e => e.ZaRZamGid).HasName("ZaR_Primary");

            entity.ToTable("ZamRealizacja", "CDN");

            entity.Property(e => e.ZaRZamGid).HasColumnName("ZaR_ZamGID");
            entity.Property(e => e.ZaRDanePrzesylkiLm)
                .HasDefaultValue(0)
                .HasColumnName("ZaR_DanePrzesylkiLM");
            entity.Property(e => e.ZaRDostawaWszystkoPl)
                .HasDefaultValue(0)
                .HasColumnName("ZaR_DostawaWszystkoPl");
            entity.Property(e => e.ZaRKurierId)
                .HasDefaultValue(0)
                .HasColumnName("ZaR_KurierId");
            entity.Property(e => e.ZaRLinkPrzesylki)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaR_LinkPrzesylki");
            entity.Property(e => e.ZaRNieAktualizujWszystkoPl)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZaR_NieAktualizujWszystkoPl");
            entity.Property(e => e.ZaRNrPrzesylki)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaR_NrPrzesylki");
            entity.Property(e => e.ZaRPlatnoscWszystkoPl)
                .HasDefaultValue(0)
                .HasColumnName("ZaR_PlatnoscWszystkoPl");
            entity.Property(e => e.ZaRStatusWszystkoPl)
                .HasDefaultValue(0)
                .HasColumnName("ZaR_StatusWszystkoPl");
            entity.Property(e => e.ZaRStatusWszystkoPlLm)
                .HasDefaultValue(0)
                .HasColumnName("ZaR_StatusWszystkoPlLM");
            entity.Property(e => e.ZaRWypGid)
                .HasDefaultValue(0)
                .HasColumnName("ZaR_WypGID");

            entity.HasOne(d => d.ZaRZamG).WithOne(p => p.ZamRealizacja)
                .HasForeignKey<ZamRealizacja>(d => d.ZaRZamGid)
                .HasConstraintName("FK_ZaRPrimary");
        });

        modelBuilder.Entity<ZamVat>(entity =>
        {
            entity.HasKey(e => new { e.ZaVGidnumer, e.ZaVWaluta, e.ZaVStawkaPod, e.ZaVFlagaVat }).HasName("ZaV_Primary");

            entity.ToTable("ZamVat", "CDN");

            entity.Property(e => e.ZaVGidnumer).HasColumnName("ZaV_GIDNumer");
            entity.Property(e => e.ZaVWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZaV_Waluta");
            entity.Property(e => e.ZaVStawkaPod)
                .HasDefaultValue(22m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ZaV_StawkaPod");
            entity.Property(e => e.ZaVFlagaVat).HasColumnName("ZaV_FlagaVat");
            entity.Property(e => e.ZaVBrutto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaV_Brutto");
            entity.Property(e => e.ZaVGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZaV_GIDFirma");
            entity.Property(e => e.ZaVGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaV_GIDLp");
            entity.Property(e => e.ZaVGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaV_GIDTyp");
            entity.Property(e => e.ZaVKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("ZaV_KursL");
            entity.Property(e => e.ZaVKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ZaV_KursM");
            entity.Property(e => e.ZaVNetto)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaV_Netto");
            entity.Property(e => e.ZaVNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("ZaV_NrKursu");
            entity.Property(e => e.ZaVVat)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZaV_Vat");

            entity.HasOne(d => d.ZaVGidnumerNavigation).WithMany(p => p.ZamVats)
                .HasForeignKey(d => d.ZaVGidnumer)
                .HasConstraintName("FK_ZaVPrimaryNoType");
        });

        modelBuilder.Entity<ZamZamLinki>(entity =>
        {
            entity.HasKey(e => new { e.ZzlZzgidTyp, e.ZzlZzgidNumer, e.ZzlZzgidLp, e.ZzlZsgidTyp, e.ZzlZsgidNumer, e.ZzlZsgidLp }).HasName("ZZL_Primary");

            entity.ToTable("ZamZamLinki", "CDN", tb => tb.HasTrigger("ZamZamLinki_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.ZzlKierunek, e.ZzlZsgidNumer, e.ZzlZsgidLp }, "ZZLZamKierunek");

            entity.HasIndex(e => new { e.ZzlZsgidTyp, e.ZzlZsgidNumer, e.ZzlZsgidLp }, "ZZLZamSPD");

            entity.Property(e => e.ZzlZzgidTyp).HasColumnName("ZZL_ZZGidTyp");
            entity.Property(e => e.ZzlZzgidNumer).HasColumnName("ZZL_ZZGidNumer");
            entity.Property(e => e.ZzlZzgidLp).HasColumnName("ZZL_ZZGidLp");
            entity.Property(e => e.ZzlZsgidTyp).HasColumnName("ZZL_ZSGidTyp");
            entity.Property(e => e.ZzlZsgidNumer).HasColumnName("ZZL_ZSGidNumer");
            entity.Property(e => e.ZzlZsgidLp).HasColumnName("ZZL_ZSGidLp");
            entity.Property(e => e.ZzlKierunek)
                .HasDefaultValue((short)0)
                .HasColumnName("ZZL_Kierunek");
            entity.Property(e => e.ZzlZsgidFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZZL_ZSGidFirma");
            entity.Property(e => e.ZzlZwiazanaIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZZL_ZwiazanaIlosc");
            entity.Property(e => e.ZzlZzgidFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZZL_ZZGidFirma");
        });

        modelBuilder.Entity<Zapisy>(entity =>
        {
            entity.HasKey(e => e.KazGidnumer).HasName("KAZ_Primary");

            entity.ToTable("Zapisy", "CDN", tb =>
                {
                    tb.HasTrigger("ZapisyAlias_DeleteHandler");
                    tb.HasTrigger("Zapisy_AktualizujStany");
                    tb.HasTrigger("Zapisy_AktualizujWnioski");
                    tb.HasTrigger("Zapisy_DataRozliczenia");
                    tb.HasTrigger("Zapisy_DeleteHandler");
                    tb.HasTrigger("Zapisy_InsertUpdateHandler");
                    tb.HasTrigger("Zapisy_SprawdzSesje");
                });

            entity.HasIndex(e => e.KazBbonId, "KAZBbon");

            entity.HasIndex(e => new { e.KazDataRozliczenia, e.KazWalutaRoz, e.KazRp, e.KazKnttyp, e.KazKntnumer }, "KAZDataRozliczenia");

            entity.HasIndex(e => e.KazKndnumer, "KAZDocelowy");

            entity.HasIndex(e => new { e.KazKnttyp, e.KazKntnumer }, "KAZKontrah");

            entity.HasIndex(e => new { e.KazKnttyp, e.KazKntnumer, e.KazRozliczony }, "KAZKontrahPozostaje");

            entity.HasIndex(e => new { e.KazZnak, e.KazRozliczony, e.KazDataZapisu }, "KAZKontrahZnak");

            entity.HasIndex(e => new { e.KazOkrId, e.KazRok, e.KazSeria, e.KazCiagNumeracji, e.KazMiesiac, e.KazNumerKwitu }, "KAZKwit").IsUnique();

            entity.HasIndex(e => new { e.KazSeria, e.KazCiagNumeracji, e.KazNumerKwitu }, "KAZKwitNoTime");

            entity.HasIndex(e => new { e.KazSeria, e.KazLokata }, "KAZLokata");

            entity.HasIndex(e => e.KazLokataOtwNumer, "KAZLokataOtwNumer");

            entity.HasIndex(e => new { e.KazKaotyp, e.KazKaonumer, e.KazKaolp }, "KAZOperacja");

            entity.HasIndex(e => e.KazZewnetrznyId, "KAZOptymalizacjaMOS");

            entity.HasIndex(e => new { e.KazKrptyp, e.KazKrpnumer, e.KazKrplp }, "KAZRaport").IsUnique();

            entity.HasIndex(e => new { e.KazSeria, e.KazWyceniony, e.KazCzasZapisu, e.KazKrplp }, "KAZWyceniony");

            entity.Property(e => e.KazGidnumer).HasColumnName("KAZ_GIDNumer");
            entity.Property(e => e.KazAktywny)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_Aktywny");
            entity.Property(e => e.KazAnulowany)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Anulowany");
            entity.Property(e => e.KazAutoRozliczenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_AutoRozliczenie");
            entity.Property(e => e.KazBankKodOperacji)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_BankKodOperacji");
            entity.Property(e => e.KazBbonId)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_BbonId");
            entity.Property(e => e.KazCdc)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_CDC");
            entity.Property(e => e.KazCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_CechaOpis");
            entity.Property(e => e.KazCiagNumeracji)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_CiagNumeracji");
            entity.Property(e => e.KazCzasZapisu)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_CzasZapisu");
            entity.Property(e => e.KazDataDokumentu)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_DataDokumentu");
            entity.Property(e => e.KazDataRozliczenia)
                .HasDefaultValue(999999)
                .HasColumnName("KAZ_DataRozliczenia");
            entity.Property(e => e.KazDataZapisu)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_DataZapisu");
            entity.Property(e => e.KazDoWyjasnienia)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_DoWyjasnienia");
            entity.Property(e => e.KazDokId)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_DokID");
            entity.Property(e => e.KazEndToEndId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_EndToEndId");
            entity.Property(e => e.KazGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_GIDFirma");
            entity.Property(e => e.KazGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_GIDLp");
            entity.Property(e => e.KazGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_GIDTyp");
            entity.Property(e => e.KazGuid)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("KAZ_GUID");
            entity.Property(e => e.KazIcvnumer)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_ICVNumer");
            entity.Property(e => e.KazIcvstatus)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_ICVStatus");
            entity.Property(e => e.KazIcvtstamp)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_ICVTStamp");
            entity.Property(e => e.KazKaofirma)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KAOFirma");
            entity.Property(e => e.KazKaolp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_KAOLp");
            entity.Property(e => e.KazKaonumer)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KAONumer");
            entity.Property(e => e.KazKaotyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_KAOTyp");
            entity.Property(e => e.KazKndfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KNDFirma");
            entity.Property(e => e.KazKndlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_KNDLp");
            entity.Property(e => e.KazKndnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KNDNumer");
            entity.Property(e => e.KazKndtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_KNDTyp");
            entity.Property(e => e.KazKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KNTFirma");
            entity.Property(e => e.KazKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_KNTLp");
            entity.Property(e => e.KazKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KNTNumer");
            entity.Property(e => e.KazKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_KNTTyp");
            entity.Property(e => e.KazKontoPrzec)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_KontoPrzec");
            entity.Property(e => e.KazKontoPrzecR)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_KontoPrzecR");
            entity.Property(e => e.KazKontrahentCdc)
                .HasMaxLength(140)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_KontrahentCDC");
            entity.Property(e => e.KazKrpfirma)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KRPFirma");
            entity.Property(e => e.KazKrplp)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KRPLp");
            entity.Property(e => e.KazKrpnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_KRPNumer");
            entity.Property(e => e.KazKrptyp)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_KRPTyp");
            entity.Property(e => e.KazKursL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 10)")
                .HasColumnName("KAZ_KursL");
            entity.Property(e => e.KazKursM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("KAZ_KursM");
            entity.Property(e => e.KazKursWgWyceny)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_KursWgWyceny");
            entity.Property(e => e.KazKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_Kwota");
            entity.Property(e => e.KazKwotaCdc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_KwotaCDC");
            entity.Property(e => e.KazKwotaRoz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_KwotaRoz");
            entity.Property(e => e.KazKwotaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_KwotaSys");
            entity.Property(e => e.KazLokata)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Lokata");
            entity.Property(e => e.KazLokataNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_LokataNrRachunku");
            entity.Property(e => e.KazLokataNrb)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_LokataNRB");
            entity.Property(e => e.KazLokataOtwNumer)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_LokataOtwNumer");
            entity.Property(e => e.KazLokataTermin)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_LokataTermin");
            entity.Property(e => e.KazLokataTypId)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_LokataTypId");
            entity.Property(e => e.KazMiesiac)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_Miesiac");
            entity.Property(e => e.KazNrKursu)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_NrKursu");
            entity.Property(e => e.KazNrRachunku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_NrRachunku");
            entity.Property(e => e.KazNumerDokumentu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_NumerDokumentu");
            entity.Property(e => e.KazNumerKwitu)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_NumerKwitu");
            entity.Property(e => e.KazOkrId)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OkrId");
            entity.Property(e => e.KazOpeFirmaB)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OpeFirmaB");
            entity.Property(e => e.KazOpeFirmaR)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OpeFirmaR");
            entity.Property(e => e.KazOpeLpB)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OpeLpB");
            entity.Property(e => e.KazOpeLpR)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OpeLpR");
            entity.Property(e => e.KazOpeNumerB)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OpeNumerB");
            entity.Property(e => e.KazOpeNumerR)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OpeNumerR");
            entity.Property(e => e.KazOpeTypB)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OpeTypB");
            entity.Property(e => e.KazOpeTypR)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OpeTypR");
            entity.Property(e => e.KazOpefirmaBm)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OPEFirmaBm");
            entity.Property(e => e.KazOpefirmaRm)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OPEFirmaRm");
            entity.Property(e => e.KazOpelpBm)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OPELpBm");
            entity.Property(e => e.KazOpelpRm)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OPELpRm");
            entity.Property(e => e.KazOpenumerBm)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OPENumerBm");
            entity.Property(e => e.KazOpenumerRm)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OPENumerRm");
            entity.Property(e => e.KazOperatorPos)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_OperatorPOS");
            entity.Property(e => e.KazOpetypBm)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OPETypBm");
            entity.Property(e => e.KazOpetypRm)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_OPETypRm");
            entity.Property(e => e.KazOpis)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_Opis");
            entity.Property(e => e.KazPozostaje)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_Pozostaje");
            entity.Property(e => e.KazPozostajeRoz)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_PozostajeRoz");
            entity.Property(e => e.KazPozostajeSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_PozostajeSys");
            entity.Property(e => e.KazPozostajeWycena)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_PozostajeWycena");
            entity.Property(e => e.KazPozostajeWycenaSys)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_PozostajeWycenaSys");
            entity.Property(e => e.KazRaportBo)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_RaportBO");
            entity.Property(e => e.KazRok)
                .HasDefaultValue((short)0)
                .HasColumnName("KAZ_Rok");
            entity.Property(e => e.KazRozliczony)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Rozliczony");
            entity.Property(e => e.KazRp)
                .HasDefaultValue((byte)1)
                .HasColumnName("KAZ_RP");
            entity.Property(e => e.KazSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_Seria");
            entity.Property(e => e.KazSplitPnumer)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_SplitPNumer");
            entity.Property(e => e.KazStRidW)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_StRIdW");
            entity.Property(e => e.KazStanRealizacji)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_StanRealizacji");
            entity.Property(e => e.KazTresc)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_Tresc");
            entity.Property(e => e.KazTrescCdc)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_TrescCDC");
            entity.Property(e => e.KazTstamp)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_TStamp");
            entity.Property(e => e.KazTstampM)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_TStampM");
            entity.Property(e => e.KazWaluta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_Waluta");
            entity.Property(e => e.KazWalutaRoz)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_WalutaRoz");
            entity.Property(e => e.KazWirtualnyEq)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("KAZ_WirtualnyEQ");
            entity.Property(e => e.KazWtrakciePrzetwarzania)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_WTrakciePrzetwarzania");
            entity.Property(e => e.KazWycenaKolejnosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_WycenaKolejnosc");
            entity.Property(e => e.KazWycenaRk)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_WycenaRK");
            entity.Property(e => e.KazWycenaRkstan)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("KAZ_WycenaRKStan");
            entity.Property(e => e.KazWyceniony)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Wyceniony");
            entity.Property(e => e.KazWynagrodzenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Wynagrodzenie");
            entity.Property(e => e.KazZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Zaksiegowano");
            entity.Property(e => e.KazZaliczka)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Zaliczka");
            entity.Property(e => e.KazZapisZerujacy)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_ZapisZerujacy");
            entity.Property(e => e.KazZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_ZewnetrznyId");
            entity.Property(e => e.KazZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_ZewnetrznySys");
            entity.Property(e => e.KazZewnetrznyTyp)
                .HasDefaultValue(0)
                .HasColumnName("KAZ_ZewnetrznyTyp");
            entity.Property(e => e.KazZnak)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_Znak");
            entity.Property(e => e.KazZwyciagu)
                .HasDefaultValue((byte)0)
                .HasColumnName("KAZ_ZWyciagu");

            entity.HasOne(d => d.Operacje).WithMany(p => p.Zapisies)
                .HasForeignKey(d => new { d.KazKaonumer, d.KazKaolp })
                .HasConstraintName("FK_KAZOperacja");
        });

        modelBuilder.Entity<ZasobyGniazdRoboczychView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ZasobyGniazdRoboczychView", "CDN");

            entity.Property(e => e.Oddzial)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PobId).HasColumnName("pob_id");
            entity.Property(e => e.PobKod)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("pob_kod");
            entity.Property(e => e.PobNazwa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("pob_nazwa");
            entity.Property(e => e.PofFunkcja).HasColumnName("pof_funkcja");
            entity.Property(e => e.PofGrupa).HasColumnName("POF_Grupa");
            entity.Property(e => e.PofId).HasColumnName("POF_Id");
            entity.Property(e => e.SlwId).HasColumnName("SLW_ID");
            entity.Property(e => e.SlwWartoscS)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SLW_WartoscS");
        });

        modelBuilder.Entity<Zdarzenium>(entity =>
        {
            entity.HasKey(e => e.ZdaId).HasName("ZDA_Primary");

            entity.ToTable("Zdarzenia", "CDN");

            entity.Property(e => e.ZdaId).HasColumnName("ZDA_Id");
            entity.Property(e => e.ZdaCzas)
                .HasDefaultValue(0)
                .HasColumnName("ZDA_Czas");
            entity.Property(e => e.ZdaGodzina)
                .HasDefaultValue(0)
                .HasColumnName("ZDA_Godzina");
            entity.Property(e => e.ZdaKomputer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZDA_Komputer");
            entity.Property(e => e.ZdaWatek)
                .HasDefaultValue(0)
                .HasColumnName("ZDA_Watek");
            entity.Property(e => e.ZdaZdarzenie)
                .HasMaxLength(4999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZDA_Zdarzenie");
        });

        modelBuilder.Entity<ZestKsdef>(entity =>
        {
            entity.HasKey(e => new { e.ZkdGidnumer, e.ZkdGidlp, e.ZkdSubGidlp }).HasName("ZKD_Primary");

            entity.ToTable("ZestKSDef", "CDN", tb =>
                {
                    tb.HasTrigger("ZestKSDef_InsertUpdateHandler");
                    tb.HasTrigger("ZestKSDef_Konta_Init");
                });

            entity.HasIndex(e => new { e.ZkdSidtyp, e.ZkdSidnumer }, "ZKDSIS");

            entity.Property(e => e.ZkdGidnumer).HasColumnName("ZKD_GIDNumer");
            entity.Property(e => e.ZkdGidlp).HasColumnName("ZKD_GIDLp");
            entity.Property(e => e.ZkdSubGidlp).HasColumnName("ZKD_SubGIDLp");
            entity.Property(e => e.ZkdDfnid)
                .HasDefaultValue(0)
                .HasColumnName("ZKD_DFNID");
            entity.Property(e => e.ZkdDfnkwotaWmr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKD_DFNKwotaWmr");
            entity.Property(e => e.ZkdDfnzrodlo)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKD_DFNZrodlo");
            entity.Property(e => e.ZkdGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKD_GIDFirma");
            entity.Property(e => e.ZkdGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKD_GIDTyp");
            entity.Property(e => e.ZkdSidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKD_SIDFirma");
            entity.Property(e => e.ZkdSidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKD_SIDLp");
            entity.Property(e => e.ZkdSidnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZKD_SIDNumer");
            entity.Property(e => e.ZkdSidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKD_SIDTyp");
            entity.Property(e => e.ZkdWartosc)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKD_Wartosc");
            entity.Property(e => e.ZkdZnak)
                .HasDefaultValue((byte)1)
                .HasColumnName("ZKD_Znak");

            entity.HasOne(d => d.ZestKselem).WithMany(p => p.ZestKsdefs)
                .HasForeignKey(d => new { d.ZkdGidnumer, d.ZkdGidlp })
                .HasConstraintName("FK_ZKDPrimary");
        });

        modelBuilder.Entity<ZestKsdefKontum>(entity =>
        {
            entity.HasKey(e => new { e.ZkdkGidnumer, e.ZkdkGidlp, e.ZkdkSubGidlp, e.ZkdkZkdklp }).HasName("ZKDK_Primary");

            entity.ToTable("ZestKSDefKonta", "CDN");

            entity.HasIndex(e => e.ZkdkKlasaKonta, "ZKDKKlasaKonta").HasFilter("([ZKDK_KLASAKONTA]<>'')");

            entity.HasIndex(e => e.ZkdkKonto, "ZKDKKonto").HasFilter("([ZKDK_KONTO]<>'')");

            entity.HasIndex(e => new { e.ZkdkZknnumer, e.ZkdkZknpozycja }, "ZKDKZKNNumer").HasFilter("([ZKDK_ZKNNUMER]<>(0))");

            entity.Property(e => e.ZkdkGidnumer).HasColumnName("ZKDK_GIDNumer");
            entity.Property(e => e.ZkdkGidlp).HasColumnName("ZKDK_GIDLp");
            entity.Property(e => e.ZkdkSubGidlp).HasColumnName("ZKDK_SubGIDLp");
            entity.Property(e => e.ZkdkZkdklp).HasColumnName("ZKDK_ZKDKLp");
            entity.Property(e => e.ZkdkKlasaKonta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKDK_KlasaKonta");
            entity.Property(e => e.ZkdkKonto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKDK_Konto");
            entity.Property(e => e.ZkdkZknnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZKDK_ZKNNumer");
            entity.Property(e => e.ZkdkZknpozycja)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKDK_ZKNPozycja");

            entity.HasOne(d => d.ZestKsdef).WithMany(p => p.ZestKsdefKonta)
                .HasForeignKey(d => new { d.ZkdkGidnumer, d.ZkdkGidlp, d.ZkdkSubGidlp })
                .HasConstraintName("FK_ZKDKPrimary");
        });

        modelBuilder.Entity<ZestKselem>(entity =>
        {
            entity.HasKey(e => new { e.ZkeGidnumer, e.ZkeGidlp }).HasName("ZKE_Primary");

            entity.ToTable("ZestKSElem", "CDN");

            entity.HasIndex(e => new { e.ZkeGidtyp, e.ZkeGidnumer, e.ZkePozycja1, e.ZkePozycja2, e.ZkePozycja3, e.ZkePozycja4, e.ZkePozycja5, e.ZkePozycja6, e.ZkePozycja7, e.ZkePozycja8, e.ZkePozycja9, e.ZkePozycja10 }, "ZKEPozycja").IsUnique();

            entity.Property(e => e.ZkeGidnumer).HasColumnName("ZKE_GIDNumer");
            entity.Property(e => e.ZkeGidlp).HasColumnName("ZKE_GIDLp");
            entity.Property(e => e.ZkeBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKE_Bufor");
            entity.Property(e => e.ZkeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKE_GIDFirma");
            entity.Property(e => e.ZkeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_GIDTyp");
            entity.Property(e => e.ZkeNazwa)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKE_Nazwa");
            entity.Property(e => e.ZkePozycja1)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja1");
            entity.Property(e => e.ZkePozycja10)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja10");
            entity.Property(e => e.ZkePozycja2)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja2");
            entity.Property(e => e.ZkePozycja3)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja3");
            entity.Property(e => e.ZkePozycja4)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja4");
            entity.Property(e => e.ZkePozycja5)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja5");
            entity.Property(e => e.ZkePozycja6)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja6");
            entity.Property(e => e.ZkePozycja7)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja7");
            entity.Property(e => e.ZkePozycja8)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja8");
            entity.Property(e => e.ZkePozycja9)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKE_Pozycja9");
            entity.Property(e => e.ZkeSfeid)
                .HasDefaultValue(0)
                .HasColumnName("ZKE_SFEID");
            entity.Property(e => e.ZkeSfpominEksport)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKE_SFPominEksport");
            entity.Property(e => e.ZkeZnak)
                .HasDefaultValue((byte)1)
                .HasColumnName("ZKE_Znak");

            entity.HasOne(d => d.ZkeGidnumerNavigation).WithMany(p => p.ZestKselems)
                .HasForeignKey(d => d.ZkeGidnumer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZKEPrimary");
        });

        modelBuilder.Entity<ZestKskolumny>(entity =>
        {
            entity.HasKey(e => new { e.ZkkGidnumer, e.ZkkGidlp }).HasName("ZKK_Primary");

            entity.ToTable("ZestKSKolumny", "CDN");

            entity.Property(e => e.ZkkGidnumer).HasColumnName("ZKK_GIDNumer");
            entity.Property(e => e.ZkkGidlp).HasColumnName("ZKK_GIDLp");
            entity.Property(e => e.ZkkFormat)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKK_Format");
            entity.Property(e => e.ZkkGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKK_GIDFirma");
            entity.Property(e => e.ZkkGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKK_GIDTyp");
            entity.Property(e => e.ZkkTytul)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKK_Tytul");
            entity.Property(e => e.ZkkWyrazenie)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKK_Wyrazenie");

            entity.HasOne(d => d.ZkkGidnumerNavigation).WithMany(p => p.ZestKskolumnies)
                .HasForeignKey(d => d.ZkkGidnumer)
                .HasConstraintName("FK_ZKKPrimary");
        });

        modelBuilder.Entity<ZestKsnag>(entity =>
        {
            entity.HasKey(e => e.ZknGidnumer).HasName("ZKN_Primary");

            entity.ToTable("ZestKSNag", "CDN", tb => tb.HasTrigger("ZestKSNag_DeleteHandler"));

            entity.HasIndex(e => e.ZknDfnid, "ZKNDFNID");

            entity.HasIndex(e => new { e.ZknRodzaj, e.ZknGidtyp, e.ZknGidnumer }, "ZKNRodzaj").IsUnique();

            entity.Property(e => e.ZknGidnumer).HasColumnName("ZKN_GIDNumer");
            entity.Property(e => e.ZknArchiwalny)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_Archiwalny");
            entity.Property(e => e.ZknAuto)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_Auto");
            entity.Property(e => e.ZknBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_Bufor");
            entity.Property(e => e.ZknCoile)
                .HasDefaultValue((short)1)
                .HasColumnName("ZKN_Coile");
            entity.Property(e => e.ZknControlling)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_Controlling");
            entity.Property(e => e.ZknDfnid)
                .HasDefaultValue(0)
                .HasColumnName("ZKN_DFNID");
            entity.Property(e => e.ZknDfnkwotaWmr)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_DFNKwotaWmr");
            entity.Property(e => e.ZknGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKN_GIDFirma");
            entity.Property(e => e.ZknGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKN_GIDLp");
            entity.Property(e => e.ZknGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKN_GIDTyp");
            entity.Property(e => e.ZknJednostka)
                .HasDefaultValue((byte)1)
                .HasColumnName("ZKN_Jednostka");
            entity.Property(e => e.ZknNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKN_Nazwa");
            entity.Property(e => e.ZknNumeracja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKN_Numeracja");
            entity.Property(e => e.ZknOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKN_Opis");
            entity.Property(e => e.ZknPominKksarchiwalne)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_PominKKSArchiwalne");
            entity.Property(e => e.ZknRodzaj)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKN_Rodzaj");
            entity.Property(e => e.ZknSfeksport)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_SFEksport");
            entity.Property(e => e.ZknSfnid)
                .HasDefaultValue(0)
                .HasColumnName("ZKN_SFNID");
            entity.Property(e => e.ZknSfnjednostka)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_SFNJednostka");
            entity.Property(e => e.ZknSfnzestawienie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKN_SFNZestawienie");
        });

        modelBuilder.Entity<ZestKswidok>(entity =>
        {
            entity.HasKey(e => e.ZkoGidnumer).HasName("ZKO_Primary");

            entity.ToTable("ZestKSWidok", "CDN");

            entity.HasIndex(e => new { e.ZkoZkntyp, e.ZkoZknnumer, e.ZkoNazwa }, "ZKONag").IsUnique();

            entity.HasIndex(e => new { e.ZkoGidtyp, e.ZkoNazwa, e.ZkoGidnumer }, "ZKONazwa").IsUnique();

            entity.Property(e => e.ZkoGidnumer).HasColumnName("ZKO_GIDNumer");
            entity.Property(e => e.ZkoGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKO_GIDFirma");
            entity.Property(e => e.ZkoGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKO_GIDLp");
            entity.Property(e => e.ZkoGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKO_GIDTyp");
            entity.Property(e => e.ZkoNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKO_Nazwa");
            entity.Property(e => e.ZkoOpis)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKO_Opis");
            entity.Property(e => e.ZkoStafirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKO_STAFirma");
            entity.Property(e => e.ZkoStalp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKO_STALp");
            entity.Property(e => e.ZkoStanumer)
                .HasDefaultValue(0)
                .HasColumnName("ZKO_STANumer");
            entity.Property(e => e.ZkoStatyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKO_STATyp");
            entity.Property(e => e.ZkoZknfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKO_ZKNFirma");
            entity.Property(e => e.ZkoZknlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKO_ZKNLp");
            entity.Property(e => e.ZkoZknnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZKO_ZKNNumer");
            entity.Property(e => e.ZkoZkntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKO_ZKNTyp");
        });

        modelBuilder.Entity<ZestKswyniki>(entity =>
        {
            entity.HasKey(e => new { e.ZkwZkenumer, e.ZkwZkelp, e.ZkwDataOd, e.ZkwDataDo, e.ZkwBufor }).HasName("ZKW_Primary");

            entity.ToTable("ZestKSWyniki", "CDN");

            entity.Property(e => e.ZkwZkenumer).HasColumnName("ZKW_ZKENumer");
            entity.Property(e => e.ZkwZkelp).HasColumnName("ZKW_ZKELp");
            entity.Property(e => e.ZkwDataOd).HasColumnName("ZKW_DataOd");
            entity.Property(e => e.ZkwDataDo).HasColumnName("ZKW_DataDo");
            entity.Property(e => e.ZkwBufor).HasColumnName("ZKW_Bufor");
            entity.Property(e => e.ZkwTsobliczenia)
                .HasDefaultValue(0)
                .HasColumnName("ZKW_TSObliczenia");
            entity.Property(e => e.ZkwWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZKW_Wartosc");
            entity.Property(e => e.ZkwZkefirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKW_ZKEFirma");
            entity.Property(e => e.ZkwZketyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKW_ZKETyp");

            entity.HasOne(d => d.ZestKselem).WithMany(p => p.ZestKswynikis)
                .HasForeignKey(d => new { d.ZkwZkenumer, d.ZkwZkelp })
                .HasConstraintName("FK_ZKWPrimary");
        });

        modelBuilder.Entity<ZestKswynikiDef>(entity =>
        {
            entity.HasKey(e => new { e.ZwdZkwnumer, e.ZwdZkwlp, e.ZwdZkwdataOd, e.ZwdZkwdataDo, e.ZwdZkwbufor, e.ZwdZkdsubLp }).HasName("ZWD_Primary");

            entity.ToTable("ZestKSWynikiDef", "CDN");

            entity.Property(e => e.ZwdZkwnumer).HasColumnName("ZWD_ZKWNumer");
            entity.Property(e => e.ZwdZkwlp).HasColumnName("ZWD_ZKWLp");
            entity.Property(e => e.ZwdZkwdataOd).HasColumnName("ZWD_ZKWDataOd");
            entity.Property(e => e.ZwdZkwdataDo).HasColumnName("ZWD_ZKWDataDo");
            entity.Property(e => e.ZwdZkwbufor).HasColumnName("ZWD_ZKWBufor");
            entity.Property(e => e.ZwdZkdsubLp).HasColumnName("ZWD_ZKDSubLp");
            entity.Property(e => e.ZwdWartosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZWD_Wartosc");

            entity.HasOne(d => d.ZestKswyniki).WithMany(p => p.ZestKswynikiDefs)
                .HasForeignKey(d => new { d.ZwdZkwnumer, d.ZwdZkwlp, d.ZwdZkwdataOd, d.ZwdZkwdataDo, d.ZwdZkwbufor })
                .HasConstraintName("FK_ZWDPrimary");
        });

        modelBuilder.Entity<ZestKszmienne>(entity =>
        {
            entity.HasKey(e => new { e.ZkzGidnumer, e.ZkzGidlp }).HasName("ZKZ_Primary");

            entity.ToTable("ZestKSZmienne", "CDN");

            entity.HasIndex(e => new { e.ZkzGidtyp, e.ZkzGidnumer, e.ZkzNazwa }, "ZKZNazwa").IsUnique();

            entity.Property(e => e.ZkzGidnumer).HasColumnName("ZKZ_GIDNumer");
            entity.Property(e => e.ZkzGidlp).HasColumnName("ZKZ_GIDLp");
            entity.Property(e => e.ZkzBufor)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKZ_Bufor");
            entity.Property(e => e.ZkzDataDo)
                .HasDefaultValue(0)
                .HasColumnName("ZKZ_DataDo");
            entity.Property(e => e.ZkzDataOd)
                .HasDefaultValue(0)
                .HasColumnName("ZKZ_DataOd");
            entity.Property(e => e.ZkzGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZKZ_GIDFirma");
            entity.Property(e => e.ZkzGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZKZ_GIDTyp");
            entity.Property(e => e.ZkzNazwa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZKZ_Nazwa");
            entity.Property(e => e.ZkzTypDat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZKZ_TypDat");

            entity.HasOne(d => d.ZkzGidnumerNavigation).WithMany(p => p.ZestKszmiennes)
                .HasForeignKey(d => d.ZkzGidnumer)
                .HasConstraintName("FK_ZKZPrimary");
        });

        modelBuilder.Entity<Zgody>(entity =>
        {
            entity.HasKey(e => e.ZgoId).HasName("Zgo_Primary");

            entity.ToTable("Zgody", "CDN", tb =>
                {
                    tb.HasTrigger("Zgody_DeleteHandler");
                    tb.HasTrigger("Zgody_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.ZgoObiNumer, e.ZgoObiTyp, e.ZgoObiLp }, "ZgoObi");

            entity.Property(e => e.ZgoId).HasColumnName("Zgo_Id");
            entity.Property(e => e.ZgoCzasArchiwizacji)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_CzasArchiwizacji");
            entity.Property(e => e.ZgoCzasModyfikacji)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_CzasModyfikacji");
            entity.Property(e => e.ZgoCzasUtworzenia)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_CzasUtworzenia");
            entity.Property(e => e.ZgoDataUdzielenia)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_DataUdzielenia");
            entity.Property(e => e.ZgoDataWycofania)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_DataWycofania");
            entity.Property(e => e.ZgoEsklepSync)
                .HasDefaultValue((byte)0)
                .HasColumnName("Zgo_ESklepSync");
            entity.Property(e => e.ZgoFormaKontaktu)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_FormaKontaktu");
            entity.Property(e => e.ZgoGuid)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasDefaultValueSql("(CONVERT([varchar](36),newid()))")
                .HasColumnName("Zgo_GUID");
            entity.Property(e => e.ZgoIp)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zgo_IP");
            entity.Property(e => e.ZgoObiFirma)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_ObiFirma");
            entity.Property(e => e.ZgoObiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zgo_ObiLp");
            entity.Property(e => e.ZgoObiNumer)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_ObiNumer");
            entity.Property(e => e.ZgoObiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("Zgo_ObiTyp");
            entity.Property(e => e.ZgoOpeArchiwizowal)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_OpeArchiwizowal");
            entity.Property(e => e.ZgoOpeModyfikowal)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_OpeModyfikowal");
            entity.Property(e => e.ZgoOpeUtworzyl)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_OpeUtworzyl");
            entity.Property(e => e.ZgoPowodWycofania)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_PowodWycofania");
            entity.Property(e => e.ZgoRegulamin)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_Regulamin");
            entity.Property(e => e.ZgoRodzajZgody)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_RodzajZgody");
            entity.Property(e => e.ZgoSzczegoly)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zgo_Szczegoly");
            entity.Property(e => e.ZgoUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Zgo_URL");
            entity.Property(e => e.ZgoZewnetrznyId)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_ZewnetrznyID");
            entity.Property(e => e.ZgoZewnetrznySys)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_ZewnetrznySys");
            entity.Property(e => e.ZgoZrodloUdzielenia)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_ZrodloUdzielenia");
            entity.Property(e => e.ZgoZrodloWycofania)
                .HasDefaultValue(0)
                .HasColumnName("Zgo_ZrodloWycofania");
        });

        modelBuilder.Entity<ZlcElem>(entity =>
        {
            entity.HasKey(e => new { e.ZcEGidnumer, e.ZcEGidlp }).HasName("ZcE_Primary");

            entity.ToTable("ZlcElem", "CDN", tb =>
                {
                    tb.HasTrigger("ZlcElemAlias_DeleteHandler");
                    tb.HasTrigger("ZlcElem_DeleteHandler");
                    tb.HasTrigger("ZlcElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.ZcEKntNumer, "ZCEKontrahent");

            entity.HasIndex(e => new { e.ZcEProdTyp, e.ZcEProdNumer, e.ZcEProdLp }, "ZcEProdukt");

            entity.HasIndex(e => new { e.ZcETwrNumer, e.ZcETstamp, e.ZcETyp }, "ZcETowar");

            entity.HasIndex(e => new { e.ZcEZmnTyp, e.ZcEZmnNumer, e.ZcETstamp, e.ZcETyp }, "ZcEZamiennik");

            entity.HasIndex(e => new { e.ZcEZrdTyp, e.ZcEZrdNumer, e.ZcEZrdLp }, "ZcEZrodlo");

            entity.Property(e => e.ZcEGidnumer).HasColumnName("ZcE_GIDNumer");
            entity.Property(e => e.ZcEGidlp).HasColumnName("ZcE_GIDLp");
            entity.Property(e => e.ZcECchFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_CChFirma");
            entity.Property(e => e.ZcECchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_CChLp");
            entity.Property(e => e.ZcECchNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_CChNumer");
            entity.Property(e => e.ZcECchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_CChTyp");
            entity.Property(e => e.ZcECecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcE_Cecha");
            entity.Property(e => e.ZcEDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_DataRealizacji");
            entity.Property(e => e.ZcEGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_GIDFirma");
            entity.Property(e => e.ZcEGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_GIDTyp");
            entity.Property(e => e.ZcEIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZcE_Ilosc");
            entity.Property(e => e.ZcEJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcE_JmFormat");
            entity.Property(e => e.ZcEJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcE_JmFormatZ");
            entity.Property(e => e.ZcEJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcE_JmZ");
            entity.Property(e => e.ZcEKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_KntFirma");
            entity.Property(e => e.ZcEKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_KntLp");
            entity.Property(e => e.ZcEKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_KntNumer");
            entity.Property(e => e.ZcEKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_KntTyp");
            entity.Property(e => e.ZcEKosztEwidencyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZcE_KosztEwidencyjny");
            entity.Property(e => e.ZcEKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZcE_KosztRzeczywisty");
            entity.Property(e => e.ZcEMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_MagFirma");
            entity.Property(e => e.ZcEMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_MagLp");
            entity.Property(e => e.ZcEMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_MagNumer");
            entity.Property(e => e.ZcEMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_MagTyp");
            entity.Property(e => e.ZcEOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcE_Opis");
            entity.Property(e => e.ZcEPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_Pozycja");
            entity.Property(e => e.ZcEProdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ProdFirma");
            entity.Property(e => e.ZcEProdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ProdLp");
            entity.Property(e => e.ZcEProdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ProdNumer");
            entity.Property(e => e.ZcEProdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ProdTyp");
            entity.Property(e => e.ZcEPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZcE_PrzeliczL");
            entity.Property(e => e.ZcEPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZcE_PrzeliczM");
            entity.Property(e => e.ZcEReNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ReNFirma");
            entity.Property(e => e.ZcEReNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ReNLp");
            entity.Property(e => e.ZcEReNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ReNNumer");
            entity.Property(e => e.ZcEReNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ReNTyp");
            entity.Property(e => e.ZcEStalaIlosc)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcE_StalaIlosc");
            entity.Property(e => e.ZcETstamp)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_TStamp");
            entity.Property(e => e.ZcETwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_TwrFirma");
            entity.Property(e => e.ZcETwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_TwrLp");
            entity.Property(e => e.ZcETwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcE_TwrNazwa");
            entity.Property(e => e.ZcETwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_TwrNumer");
            entity.Property(e => e.ZcETwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_TwrTyp");
            entity.Property(e => e.ZcETyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_Typ");
            entity.Property(e => e.ZcETypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcE_TypJm");
            entity.Property(e => e.ZcEZmnFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ZmnFirma");
            entity.Property(e => e.ZcEZmnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ZmnLp");
            entity.Property(e => e.ZcEZmnNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ZmnNumer");
            entity.Property(e => e.ZcEZmnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ZmnTyp");
            entity.Property(e => e.ZcEZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ZrdFirma");
            entity.Property(e => e.ZcEZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ZrdLp");
            entity.Property(e => e.ZcEZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcE_ZrdNumer");
            entity.Property(e => e.ZcEZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcE_ZrdTyp");

            entity.HasOne(d => d.ZcEGidnumerNavigation).WithMany(p => p.ZlcElems)
                .HasForeignKey(d => d.ZcEGidnumer)
                .HasConstraintName("FK_ZcEPrimary");
        });

        modelBuilder.Entity<ZlcNag>(entity =>
        {
            entity.HasKey(e => e.ZcNGidnumer).HasName("ZcN_Primary");

            entity.ToTable("ZlcNag", "CDN", tb =>
                {
                    tb.HasTrigger("ZlcNag_DeleteAtrybutyHist");
                    tb.HasTrigger("ZlcNag_DeleteHandler");
                    tb.HasTrigger("ZlcNag_InsertUpdateHandler");
                    tb.HasTrigger("ZlcNag_SprawdzSesje");
                });

            entity.HasIndex(e => e.ZcNAkwNumer, "ZcNAkwizytor");

            entity.HasIndex(e => new { e.ZcNGidtyp, e.ZcNRokMiesiac, e.ZcNZlcSeria, e.ZcNZlcNumer }, "ZcNData");

            entity.HasIndex(e => new { e.ZcNDataRealizacji, e.ZcNZlcMiesiac }, "ZcNDataReal");

            entity.HasIndex(e => new { e.ZcNKntNumer, e.ZcNStan, e.ZcNDataWystawienia, e.ZcNGidtyp, e.ZcNGidnumer }, "ZcNKontrah");

            entity.HasIndex(e => new { e.ZcNKnDnumer, e.ZcNStan, e.ZcNDataWystawienia, e.ZcNGidtyp, e.ZcNGidnumer }, "ZcNKontrahD");

            entity.HasIndex(e => new { e.ZcNGidtyp, e.ZcNZlcRok, e.ZcNZlcMiesiac, e.ZcNZlcSeria, e.ZcNZlcNumer }, "ZcNNumer").IsUnique();

            entity.HasIndex(e => new { e.ZcNOpeTypM, e.ZcNOpeNumerM, e.ZcNDataWystawienia, e.ZcNGidtyp, e.ZcNGidnumer }, "ZcNOper").IsUnique();

            entity.HasIndex(e => e.ZcNOpiNumer, "ZcNOpiekun");

            entity.HasIndex(e => new { e.ZcNStan, e.ZcNDataWystawienia }, "ZcNStan");

            entity.HasIndex(e => new { e.ZcNZrdTyp, e.ZcNZrdNumer }, "ZcNZrodlo");

            entity.Property(e => e.ZcNGidnumer).HasColumnName("ZcN_GIDNumer");
            entity.Property(e => e.ZcNAktywny)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_Aktywny");
            entity.Property(e => e.ZcNAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_AkwFirma");
            entity.Property(e => e.ZcNAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_AkwLp");
            entity.Property(e => e.ZcNAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_AkwNumer");
            entity.Property(e => e.ZcNAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_AkwTyp");
            entity.Property(e => e.ZcNCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcN_CechaOpis");
            entity.Property(e => e.ZcNDataAktywacjiRez)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DataAktywacjiRez");
            entity.Property(e => e.ZcNDataKsiegowania)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DataKsiegowania");
            entity.Property(e => e.ZcNDataPotwierdz)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DataPotwierdz");
            entity.Property(e => e.ZcNDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DataRealizacji");
            entity.Property(e => e.ZcNDataRozliczenia)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DataRozliczenia");
            entity.Property(e => e.ZcNDataWaznosci)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DataWaznosci");
            entity.Property(e => e.ZcNDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DataWystawienia");
            entity.Property(e => e.ZcNDokId)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_DokID");
            entity.Property(e => e.ZcNDokZwiazane)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_DokZwiazane");
            entity.Property(e => e.ZcNDokumentObcy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcN_DokumentObcy");
            entity.Property(e => e.ZcNDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcN_Dziennik");
            entity.Property(e => e.ZcNFrSid)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_FrSId");
            entity.Property(e => e.ZcNFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_FrmNumer");
            entity.Property(e => e.ZcNGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_GIDFirma");
            entity.Property(e => e.ZcNGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_GIDLp");
            entity.Property(e => e.ZcNGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_GIDTyp");
            entity.Property(e => e.ZcNGodzinaPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_GodzinaPotwierdzenia");
            entity.Property(e => e.ZcNKnDfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_KnDFirma");
            entity.Property(e => e.ZcNKnDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_KnDLp");
            entity.Property(e => e.ZcNKnDnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_KnDNumer");
            entity.Property(e => e.ZcNKnDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_KnDTyp");
            entity.Property(e => e.ZcNKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_KntFirma");
            entity.Property(e => e.ZcNKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_KntLp");
            entity.Property(e => e.ZcNKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_KntNumer");
            entity.Property(e => e.ZcNKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_KntTyp");
            entity.Property(e => e.ZcNKosztEwidencyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZcN_KosztEwidencyjny");
            entity.Property(e => e.ZcNKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZcN_KosztRzeczywisty");
            entity.Property(e => e.ZcNLkopii)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_LKopii");
            entity.Property(e => e.ZcNMaDfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_MaDFirma");
            entity.Property(e => e.ZcNMaDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_MaDLp");
            entity.Property(e => e.ZcNMaDnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_MaDNumer");
            entity.Property(e => e.ZcNMaDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_MaDTyp");
            entity.Property(e => e.ZcNMaZfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_MaZFirma");
            entity.Property(e => e.ZcNMaZlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_MaZLp");
            entity.Property(e => e.ZcNMaZnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_MaZNumer");
            entity.Property(e => e.ZcNMaZtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_MaZTyp");
            entity.Property(e => e.ZcNNieKsiegowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_NieKsiegowac");
            entity.Property(e => e.ZcNOpeFirmaL)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeFirmaL");
            entity.Property(e => e.ZcNOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeFirmaM");
            entity.Property(e => e.ZcNOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeFirmaW");
            entity.Property(e => e.ZcNOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeFirmaZ");
            entity.Property(e => e.ZcNOpeLpL)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeLpL");
            entity.Property(e => e.ZcNOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeLpM");
            entity.Property(e => e.ZcNOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeLpW");
            entity.Property(e => e.ZcNOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeLpZ");
            entity.Property(e => e.ZcNOpeNumerL)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeNumerL");
            entity.Property(e => e.ZcNOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeNumerM");
            entity.Property(e => e.ZcNOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeNumerW");
            entity.Property(e => e.ZcNOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpeNumerZ");
            entity.Property(e => e.ZcNOpeTypL)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeTypL");
            entity.Property(e => e.ZcNOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeTypM");
            entity.Property(e => e.ZcNOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeTypW");
            entity.Property(e => e.ZcNOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpeTypZ");
            entity.Property(e => e.ZcNOpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpiFirma");
            entity.Property(e => e.ZcNOpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpiLp");
            entity.Property(e => e.ZcNOpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_OpiNumer");
            entity.Property(e => e.ZcNOpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_OpiTyp");
            entity.Property(e => e.ZcNOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcN_Opis");
            entity.Property(e => e.ZcNPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_PriorytetRez");
            entity.Property(e => e.ZcNRealWcalosci)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_RealWCalosci");
            entity.Property(e => e.ZcNRezZasTylkoAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_RezZasTylkoAktywne");
            entity.Property(e => e.ZcNRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_RezerwujZasoby");
            entity.Property(e => e.ZcNRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_RokMiesiac");
            entity.Property(e => e.ZcNSchfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_SCHFirma");
            entity.Property(e => e.ZcNSchlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_SCHLp");
            entity.Property(e => e.ZcNSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_SCHNumer");
            entity.Property(e => e.ZcNSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_SCHTyp");
            entity.Property(e => e.ZcNStan)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_Stan");
            entity.Property(e => e.ZcNUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcN_Url");
            entity.Property(e => e.ZcNWmpm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_WMPM");
            entity.Property(e => e.ZcNWsDziennik)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcN_WsDziennik");
            entity.Property(e => e.ZcNWsSchnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_WsSCHNumer");
            entity.Property(e => e.ZcNWsSchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_WsSCHTyp");
            entity.Property(e => e.ZcNWsStosujDziennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_WsStosujDziennik");
            entity.Property(e => e.ZcNWsStosujSchemat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_WsStosujSchemat");
            entity.Property(e => e.ZcNWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_Wsk");
            entity.Property(e => e.ZcNZaksiegowano)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_Zaksiegowano");
            entity.Property(e => e.ZcNZlcMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZcN_ZlcMiesiac");
            entity.Property(e => e.ZcNZlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_ZlcNumer");
            entity.Property(e => e.ZcNZlcRok)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_ZlcRok");
            entity.Property(e => e.ZcNZlcSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZcN_ZlcSeria");
            entity.Property(e => e.ZcNZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_ZrdFirma");
            entity.Property(e => e.ZcNZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_ZrdLp");
            entity.Property(e => e.ZcNZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZcN_ZrdNumer");
            entity.Property(e => e.ZcNZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZcN_ZrdTyp");
        });

        modelBuilder.Entity<ZlcRemElem>(entity =>
        {
            entity.HasKey(e => e.ZreGidnumer).HasName("ZRE_Primary");

            entity.ToTable("ZlcRemElem", "CDN", tb =>
                {
                    tb.HasTrigger("ZlcRemElem_DeleteHandler");
                    tb.HasTrigger("ZlcRemElem_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.ZreKntnumerO, "ZREStacja");

            entity.HasIndex(e => e.ZreTwrNumer, "ZRETowar");

            entity.HasIndex(e => new { e.ZreSsWid, e.ZreTstamp }, "ZREUsterki");

            entity.HasIndex(e => new { e.ZreZrNtyp, e.ZreZrNnumer }, "ZREZRN");

            entity.HasIndex(e => new { e.ZreZrdTyp, e.ZreZrdNumer, e.ZreZrdLp }, "ZREZrodlo");

            entity.Property(e => e.ZreGidnumer).HasColumnName("ZRE_GIDNumer");
            entity.Property(e => e.ZreCchFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_CChFirma");
            entity.Property(e => e.ZreCchLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_CChLp");
            entity.Property(e => e.ZreCchNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_CChNumer");
            entity.Property(e => e.ZreCchTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_CChTyp");
            entity.Property(e => e.ZreCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRE_Cecha");
            entity.Property(e => e.ZreCzyPrzeglad)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRE_CzyPrzeglad");
            entity.Property(e => e.ZreGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_GIDFirma");
            entity.Property(e => e.ZreGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_GIDLp");
            entity.Property(e => e.ZreGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_GIDTyp");
            entity.Property(e => e.ZreIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZRE_Ilosc");
            entity.Property(e => e.ZreJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRE_JmFormat");
            entity.Property(e => e.ZreJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRE_JmFormatZ");
            entity.Property(e => e.ZreJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRE_JmZ");
            entity.Property(e => e.ZreKntfirmaO)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_KNTFirmaO");
            entity.Property(e => e.ZreKntlpO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_KNTLpO");
            entity.Property(e => e.ZreKntnumerO)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_KNTNumerO");
            entity.Property(e => e.ZreKnttypO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_KNTTypO");
            entity.Property(e => e.ZreKodUszkodzeniaId)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_KodUszkodzeniaID");
            entity.Property(e => e.ZreKosztEwidencyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRE_KosztEwidencyjny");
            entity.Property(e => e.ZreKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRE_KosztRzeczywisty");
            entity.Property(e => e.ZreMiejsceNaprawyId)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_MiejsceNaprawyID");
            entity.Property(e => e.ZreOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRE_Opis");
            entity.Property(e => e.ZrePozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_Pozycja");
            entity.Property(e => e.ZrePrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZRE_PrzeliczL");
            entity.Property(e => e.ZrePrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZRE_PrzeliczM");
            entity.Property(e => e.ZreReNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ReNFirma");
            entity.Property(e => e.ZreReNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ReNLp");
            entity.Property(e => e.ZreReNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ReNNumer");
            entity.Property(e => e.ZreReNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ReNTyp");
            entity.Property(e => e.ZreSsWid)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_SsWId");
            entity.Property(e => e.ZreStatusZglId)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_StatusZglID");
            entity.Property(e => e.ZreTstamp)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_TStamp");
            entity.Property(e => e.ZreTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_TwrFirma");
            entity.Property(e => e.ZreTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_TwrLp");
            entity.Property(e => e.ZreTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_TwrNumer");
            entity.Property(e => e.ZreTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_TwrTyp");
            entity.Property(e => e.ZreTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_Typ");
            entity.Property(e => e.ZreTypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRE_TypJm");
            entity.Property(e => e.ZreZcEfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ZcEFirma");
            entity.Property(e => e.ZreZcElp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ZcELp");
            entity.Property(e => e.ZreZcEnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ZcENumer");
            entity.Property(e => e.ZreZcEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ZcETyp");
            entity.Property(e => e.ZreZrNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ZrNFirma");
            entity.Property(e => e.ZreZrNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ZrNLp");
            entity.Property(e => e.ZreZrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ZrNNumer");
            entity.Property(e => e.ZreZrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ZrNTyp");
            entity.Property(e => e.ZreZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ZrdFirma");
            entity.Property(e => e.ZreZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ZrdLp");
            entity.Property(e => e.ZreZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRE_ZrdNumer");
            entity.Property(e => e.ZreZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRE_ZrdTyp");

            entity.HasOne(d => d.ZreZrNnumerNavigation).WithMany(p => p.ZlcRemElems)
                .HasForeignKey(d => d.ZreZrNnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZREZRN");
        });

        modelBuilder.Entity<ZlcRemNag>(entity =>
        {
            entity.HasKey(e => e.ZrnGidnumer).HasName("ZRN_Primary");

            entity.ToTable("ZlcRemNag", "CDN", tb =>
                {
                    tb.HasTrigger("ZlcRemNag_DeleteAtrybutyHist");
                    tb.HasTrigger("ZlcRemNag_DeleteHandler");
                    tb.HasTrigger("ZlcRemNag_InsertUpdateHandler");
                    tb.HasTrigger("ZlcRemNag_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.ZrnZcNtyp, e.ZrnRokMiesiac, e.ZrnZlcRok, e.ZrnZlcMiesiac, e.ZrnZlcSeria, e.ZrnZlcNumer }, "ZRNData").IsUnique();

            entity.HasIndex(e => new { e.ZrnTstampZlg, e.ZrnZlcMiesiac }, "ZRNDataZgloszenia");

            entity.HasIndex(e => new { e.ZrnKntnumerO, e.ZrnStan, e.ZrnTstampZlg, e.ZrnGidtyp, e.ZrnGidnumer }, "ZRNKntObiekt");

            entity.HasIndex(e => new { e.ZrnZcNtyp, e.ZrnZlcRok, e.ZrnZlcMiesiac, e.ZrnZlcSeria, e.ZrnZlcNumer }, "ZRNNumer").IsUnique();

            entity.HasIndex(e => new { e.ZrnSobtyp, e.ZrnSobnumer }, "ZRNObiekt");

            entity.HasIndex(e => new { e.ZrnOpetyp, e.ZrnOpenumer }, "ZRNOper");

            entity.HasIndex(e => e.ZrnOpiNumer, "ZRNOpiekun");

            entity.HasIndex(e => new { e.ZrnPrctyp, e.ZrnPrcnumer }, "ZRNSerwisant");

            entity.HasIndex(e => new { e.ZrnStan, e.ZrnTstampZlg }, "ZRNStan");

            entity.HasIndex(e => new { e.ZrnKntnumer, e.ZrnStan, e.ZrnTstampZlg, e.ZrnGidtyp, e.ZrnGidnumer }, "ZRNWlasciciel");

            entity.HasIndex(e => new { e.ZrnZrdTyp, e.ZrnZrdNumer }, "ZRNZrodlo");

            entity.HasIndex(e => e.ZrnAkwNumer, "ZrNAkwizytor");

            entity.HasIndex(e => new { e.ZrnKnatyp, e.ZrnKnanumer }, "ZrNKnAW");

            entity.Property(e => e.ZrnGidnumer).HasColumnName("ZRN_GIDNumer");
            entity.Property(e => e.ZrnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_Aktywny");
            entity.Property(e => e.ZrnAkwFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_AkwFirma");
            entity.Property(e => e.ZrnAkwLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_AkwLp");
            entity.Property(e => e.ZrnAkwNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_AkwNumer");
            entity.Property(e => e.ZrnAkwTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_AkwTyp");
            entity.Property(e => e.ZrnCechaOpis)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_CechaOpis");
            entity.Property(e => e.ZrnDataAktywacjiRez)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataAktywacjiRez");
            entity.Property(e => e.ZrnDataCtrl)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataCtrl");
            entity.Property(e => e.ZrnDataDecyzji)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataDecyzji");
            entity.Property(e => e.ZrnDataPotwDst)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataPotwDst");
            entity.Property(e => e.ZrnDataPotwierdz)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataPotwierdz");
            entity.Property(e => e.ZrnDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataRealizacji");
            entity.Property(e => e.ZrnDataRozliczenia)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataRozliczenia");
            entity.Property(e => e.ZrnDataRozpoczecia)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataRozpoczecia");
            entity.Property(e => e.ZrnDataWaznosci)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataWaznosci");
            entity.Property(e => e.ZrnDataZakonczenia)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DataZakonczenia");
            entity.Property(e => e.ZrnDecyzjaId)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_DecyzjaId");
            entity.Property(e => e.ZrnDokId)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_DokID");
            entity.Property(e => e.ZrnDokZwiazane)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_DokZwiazane");
            entity.Property(e => e.ZrnDokumentObcy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_DokumentObcy");
            entity.Property(e => e.ZrnEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_EMail");
            entity.Property(e => e.ZrnFrSid)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_FrSId");
            entity.Property(e => e.ZrnFrmNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_FrmNumer");
            entity.Property(e => e.ZrnFsdlaWlasciciela)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRN_FSDlaWlasciciela");
            entity.Property(e => e.ZrnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_GIDFirma");
            entity.Property(e => e.ZrnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_GIDLp");
            entity.Property(e => e.ZrnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_GIDTyp");
            entity.Property(e => e.ZrnGodzinaPotwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_GodzinaPotwierdzenia");
            entity.Property(e => e.ZrnKnafirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNAFirma");
            entity.Property(e => e.ZrnKnafirmaO)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNAFirmaO");
            entity.Property(e => e.ZrnKnalp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNALp");
            entity.Property(e => e.ZrnKnalpO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNALpO");
            entity.Property(e => e.ZrnKnanumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNANumer");
            entity.Property(e => e.ZrnKnanumerO)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNANumerO");
            entity.Property(e => e.ZrnKnatyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNATyp");
            entity.Property(e => e.ZrnKnatypO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNATypO");
            entity.Property(e => e.ZrnKnofirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNOFirmaZ");
            entity.Property(e => e.ZrnKnolpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNOLpZ");
            entity.Property(e => e.ZrnKnonumerZ)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNONumerZ");
            entity.Property(e => e.ZrnKnotypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNOTypZ");
            entity.Property(e => e.ZrnKntfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNTFirma");
            entity.Property(e => e.ZrnKntfirmaO)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNTFirmaO");
            entity.Property(e => e.ZrnKntlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNTLp");
            entity.Property(e => e.ZrnKntlpO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNTLpO");
            entity.Property(e => e.ZrnKntnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNTNumer");
            entity.Property(e => e.ZrnKntnumerO)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_KNTNumerO");
            entity.Property(e => e.ZrnKnttyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNTTyp");
            entity.Property(e => e.ZrnKnttypO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_KNTTypO");
            entity.Property(e => e.ZrnKosztEwidencyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRN_KosztEwidencyjny");
            entity.Property(e => e.ZrnKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRN_KosztRzeczywisty");
            entity.Property(e => e.ZrnLkopii)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_LKopii");
            entity.Property(e => e.ZrnMaDfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_MaDFirma");
            entity.Property(e => e.ZrnMaDlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_MaDLp");
            entity.Property(e => e.ZrnMaDtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_MaDTyp");
            entity.Property(e => e.ZrnMadNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_MadNumer");
            entity.Property(e => e.ZrnMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_MagFirma");
            entity.Property(e => e.ZrnMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_MagLp");
            entity.Property(e => e.ZrnMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_MagNumer");
            entity.Property(e => e.ZrnMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_MagTyp");
            entity.Property(e => e.ZrnNrUknt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_NrUKnt");
            entity.Property(e => e.ZrnOpeFirmaD)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeFirmaD");
            entity.Property(e => e.ZrnOpeFirmaL)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeFirmaL");
            entity.Property(e => e.ZrnOpeFirmaM)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeFirmaM");
            entity.Property(e => e.ZrnOpeFirmaP)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeFirmaP");
            entity.Property(e => e.ZrnOpeLpD)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeLpD");
            entity.Property(e => e.ZrnOpeLpL)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeLpL");
            entity.Property(e => e.ZrnOpeLpM)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeLpM");
            entity.Property(e => e.ZrnOpeLpP)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeLpP");
            entity.Property(e => e.ZrnOpeNumerD)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeNumerD");
            entity.Property(e => e.ZrnOpeNumerL)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeNumerL");
            entity.Property(e => e.ZrnOpeNumerM)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeNumerM");
            entity.Property(e => e.ZrnOpeNumerP)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpeNumerP");
            entity.Property(e => e.ZrnOpeTypD)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeTypD");
            entity.Property(e => e.ZrnOpeTypL)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeTypL");
            entity.Property(e => e.ZrnOpeTypM)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeTypM");
            entity.Property(e => e.ZrnOpeTypP)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpeTypP");
            entity.Property(e => e.ZrnOpefirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OPEFirma");
            entity.Property(e => e.ZrnOpelp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OPELp");
            entity.Property(e => e.ZrnOpenumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OPENumer");
            entity.Property(e => e.ZrnOpetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OPETyp");
            entity.Property(e => e.ZrnOpiFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpiFirma");
            entity.Property(e => e.ZrnOpiLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpiLp");
            entity.Property(e => e.ZrnOpiNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_OpiNumer");
            entity.Property(e => e.ZrnOpiTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_OpiTyp");
            entity.Property(e => e.ZrnOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_Opis");
            entity.Property(e => e.ZrnPrcfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_PRCFirma");
            entity.Property(e => e.ZrnPrclp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_PRCLp");
            entity.Property(e => e.ZrnPrcnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_PRCNumer");
            entity.Property(e => e.ZrnPrctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_PRCTyp");
            entity.Property(e => e.ZrnPriorytetRez)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRN_PriorytetRez");
            entity.Property(e => e.ZrnRealWcalosci)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_RealWCalosci");
            entity.Property(e => e.ZrnRezZasTylkoAktywne)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRN_RezZasTylkoAktywne");
            entity.Property(e => e.ZrnRezerwujZasoby)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRN_RezerwujZasoby");
            entity.Property(e => e.ZrnRodzajZgloszenia)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_RodzajZgloszenia");
            entity.Property(e => e.ZrnRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_RokMiesiac");
            entity.Property(e => e.ZrnSobfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_SOBFirma");
            entity.Property(e => e.ZrnSoblp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_SOBLp");
            entity.Property(e => e.ZrnSobnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_SOBNumer");
            entity.Property(e => e.ZrnSobtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_SOBTyp");
            entity.Property(e => e.ZrnStan)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_Stan");
            entity.Property(e => e.ZrnStatusZglId)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_StatusZglID");
            entity.Property(e => e.ZrnTelefon)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_Telefon");
            entity.Property(e => e.ZrnTstampZlg)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_TStampZlg");
            entity.Property(e => e.ZrnUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_Url");
            entity.Property(e => e.ZrnWsk)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRN_Wsk");
            entity.Property(e => e.ZrnZcNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_ZcNFirma");
            entity.Property(e => e.ZrnZcNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_ZcNLp");
            entity.Property(e => e.ZrnZcNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_ZcNNumer");
            entity.Property(e => e.ZrnZcNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_ZcNTyp");
            entity.Property(e => e.ZrnZlcMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRN_ZlcMiesiac");
            entity.Property(e => e.ZrnZlcNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_ZlcNumer");
            entity.Property(e => e.ZrnZlcRok)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_ZlcRok");
            entity.Property(e => e.ZrnZlcSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRN_ZlcSeria");
            entity.Property(e => e.ZrnZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_ZrdFirma");
            entity.Property(e => e.ZrnZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_ZrdLp");
            entity.Property(e => e.ZrnZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRN_ZrdNumer");
            entity.Property(e => e.ZrnZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRN_ZrdTyp");
        });

        modelBuilder.Entity<ZlcTrsLinki>(entity =>
        {
            entity.HasKey(e => e.ZtlId).HasName("ZTL_Primary");

            entity.ToTable("ZlcTrsLinki", "CDN", tb => tb.HasTrigger("ZlcTrsLinki_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.ZtlPwzcetyp, e.ZtlPwzcenumer, e.ZtlPwzcelp }, "ZtLPWZCE");

            entity.HasIndex(e => new { e.ZtlRwzcetyp, e.ZtlRwzcenumer, e.ZtlRwzcelp }, "ZtLRWZCE");

            entity.HasIndex(e => new { e.ZtlPwtrstyp, e.ZtlPwtrsnumer, e.ZtlPwtrslp, e.ZtlPwsubTrslp, e.ZtlRwtrstyp, e.ZtlRwtrsnumer, e.ZtlRwtrslp, e.ZtlRwsubTrslp }, "ZtlPWRW").IsUnique();

            entity.HasIndex(e => new { e.ZtlRwtrstyp, e.ZtlRwtrsnumer, e.ZtlRwtrslp, e.ZtlRwsubTrslp }, "ZtlRW");

            entity.Property(e => e.ZtlId).HasColumnName("ZTL_Id");
            entity.Property(e => e.ZtlIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZTL_Ilosc");
            entity.Property(e => e.ZtlKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZTL_Koszt");
            entity.Property(e => e.ZtlPwsubTrslp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_PWSubTRSLp");
            entity.Property(e => e.ZtlPwtrsfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_PWTRSFirma");
            entity.Property(e => e.ZtlPwtrslp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_PWTRSLp");
            entity.Property(e => e.ZtlPwtrsnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_PWTRSNumer");
            entity.Property(e => e.ZtlPwtrstyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_PWTRSTyp");
            entity.Property(e => e.ZtlPwzcefirma)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_PWZCEFirma");
            entity.Property(e => e.ZtlPwzcelp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_PWZCELp");
            entity.Property(e => e.ZtlPwzcenumer)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_PWZCENumer");
            entity.Property(e => e.ZtlPwzcetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_PWZCETyp");
            entity.Property(e => e.ZtlRwsubTrslp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_RWSubTRSLp");
            entity.Property(e => e.ZtlRwtrsfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_RWTRSFirma");
            entity.Property(e => e.ZtlRwtrslp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_RWTRSLp");
            entity.Property(e => e.ZtlRwtrsnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_RWTRSNumer");
            entity.Property(e => e.ZtlRwtrstyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_RWTRSTyp");
            entity.Property(e => e.ZtlRwzcefirma)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_RWZCEFirma");
            entity.Property(e => e.ZtlRwzcelp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_RWZCELp");
            entity.Property(e => e.ZtlRwzcenumer)
                .HasDefaultValue(0)
                .HasColumnName("ZTL_RWZCENumer");
            entity.Property(e => e.ZtlRwzcetyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZTL_RWZCETyp");
        });

        modelBuilder.Entity<ZlecWewElem>(entity =>
        {
            entity.HasKey(e => e.ZweId).HasName("ZWE_Primary");

            entity.ToTable("ZlecWewElem", "CDN");

            entity.HasIndex(e => new { e.ZweZwnid, e.ZweId }, "ZWENaglowek").IsUnique();

            entity.HasIndex(e => new { e.ZweOpeTyp, e.ZweOpeNumer, e.ZweId }, "ZWEOperator").IsUnique();

            entity.Property(e => e.ZweId).HasColumnName("ZWE_Id");
            entity.Property(e => e.ZweOpeFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZWE_OpeFirma");
            entity.Property(e => e.ZweOpeLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZWE_OpeLp");
            entity.Property(e => e.ZweOpeNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZWE_OpeNumer");
            entity.Property(e => e.ZweOpeTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZWE_OpeTyp");
            entity.Property(e => e.ZwePowod)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZWE_Powod");
            entity.Property(e => e.ZweStanId)
                .HasDefaultValue(0)
                .HasColumnName("ZWE_StanId");
            entity.Property(e => e.ZweTimeStamp)
                .HasDefaultValue(0)
                .HasColumnName("ZWE_TimeStamp");
            entity.Property(e => e.ZweZwnid)
                .HasDefaultValue(0)
                .HasColumnName("ZWE_ZWNId");

            entity.HasOne(d => d.ZweOpeNumerNavigation).WithMany(p => p.ZlecWewElems)
                .HasForeignKey(d => d.ZweOpeNumer)
                .HasConstraintName("FK_ZWEOperator");

            entity.HasOne(d => d.ZweZwn).WithMany(p => p.ZlecWewElems)
                .HasForeignKey(d => d.ZweZwnid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZWENaglowek");
        });

        modelBuilder.Entity<ZlecWewNag>(entity =>
        {
            entity.HasKey(e => e.ZwnId).HasName("ZWN_Primary");

            entity.ToTable("ZlecWewNag", "CDN", tb =>
                {
                    tb.HasTrigger("ZlecWewNag_DeleteHandler");
                    tb.HasTrigger("ZlecWewNag_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.ZwnGidtyp, e.ZwnGidnumer }, "ZWNGID").IsUnique();

            entity.HasIndex(e => new { e.ZwnRok, e.ZwnNumer }, "ZWNNumer").IsUnique();

            entity.Property(e => e.ZwnId).HasColumnName("ZWN_Id");
            entity.Property(e => e.ZwnCechaOpis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZWN_CechaOpis");
            entity.Property(e => e.ZwnDataRealizacji)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_DataRealizacji");
            entity.Property(e => e.ZwnDataWyst)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_DataWyst");
            entity.Property(e => e.ZwnDataZamk)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_DataZamk");
            entity.Property(e => e.ZwnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_GIDFirma");
            entity.Property(e => e.ZwnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZWN_GIDLp");
            entity.Property(e => e.ZwnGidnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_GIDNumer");
            entity.Property(e => e.ZwnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZWN_GIDTyp");
            entity.Property(e => e.ZwnKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZWN_Koszt");
            entity.Property(e => e.ZwnMpkwykId)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_MPKWykId");
            entity.Property(e => e.ZwnMpkzlecId)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_MPKZlecId");
            entity.Property(e => e.ZwnNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_Numer");
            entity.Property(e => e.ZwnRok)
                .HasDefaultValue((short)0)
                .HasColumnName("ZWN_Rok");
            entity.Property(e => e.ZwnRokMiesiac)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_RokMiesiac");
            entity.Property(e => e.ZwnStanId)
                .HasDefaultValue(0)
                .HasColumnName("ZWN_StanID");
            entity.Property(e => e.ZwnTresc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZWN_Tresc");
        });

        modelBuilder.Entity<ZrnkartyPracy>(entity =>
        {
            entity.HasKey(e => e.ZrkGidnumer).HasName("ZRK_Primary");

            entity.ToTable("ZRNKartyPracy", "CDN", tb => tb.HasTrigger("ZRNKartyPracy_DeleteHandler"));

            entity.HasIndex(e => e.ZrkOpoidp, "ZRKPowrot");

            entity.HasIndex(e => e.ZrkOpoidw, "ZRKWyjazd");

            entity.HasIndex(e => new { e.ZrkZrNtyp, e.ZrkZrNnumer }, "ZRKZRN");

            entity.Property(e => e.ZrkGidnumer).HasColumnName("ZRK_GIDNumer");
            entity.Property(e => e.ZrkCzyFakturowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRK_CzyFakturowac");
            entity.Property(e => e.ZrkDataPrzyjazdu)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_DataPrzyjazdu");
            entity.Property(e => e.ZrkDataWyjazdu)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_DataWyjazdu");
            entity.Property(e => e.ZrkGenerujZapisWterminarzu)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRK_GenerujZapisWTerminarzu");
            entity.Property(e => e.ZrkGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_GIDFirma");
            entity.Property(e => e.ZrkGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_GIDLp");
            entity.Property(e => e.ZrkGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_GIDTyp");
            entity.Property(e => e.ZrkIloscKm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRK_IloscKM");
            entity.Property(e => e.ZrkKmid)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_KMID");
            entity.Property(e => e.ZrkKosztPrzejazdu)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("ZRK_KosztPrzejazdu");
            entity.Property(e => e.ZrkOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRK_Opis");
            entity.Property(e => e.ZrkOpoidp)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_OPOIDP");
            entity.Property(e => e.ZrkOpoidw)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_OPOIDW");
            entity.Property(e => e.ZrkPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_Pozycja");
            entity.Property(e => e.ZrkProdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_ProdFirma");
            entity.Property(e => e.ZrkProdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_ProdLp");
            entity.Property(e => e.ZrkProdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_ProdNumer");
            entity.Property(e => e.ZrkProdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_ProdTyp");
            entity.Property(e => e.ZrkStawkaZaKm)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZRK_StawkaZaKm");
            entity.Property(e => e.ZrkTypStawkiId)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_TypStawkiID");
            entity.Property(e => e.ZrkZamknij)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRK_Zamknij");
            entity.Property(e => e.ZrkZcEfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_ZcEFirma");
            entity.Property(e => e.ZrkZcElp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_ZcELp");
            entity.Property(e => e.ZrkZcEnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_ZcENumer");
            entity.Property(e => e.ZrkZceTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_ZceTyp");
            entity.Property(e => e.ZrkZrNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_ZrNFirma");
            entity.Property(e => e.ZrkZrNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_ZrNLp");
            entity.Property(e => e.ZrkZrNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRK_ZrNNumer");
            entity.Property(e => e.ZrkZrNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRK_ZrNTyp");

            entity.HasOne(d => d.ZrkZrNnumerNavigation).WithMany(p => p.ZrnkartyPracies)
                .HasForeignKey(d => d.ZrkZrNnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZRKZRN");
        });

        modelBuilder.Entity<ZrnkartyPracyPrc>(entity =>
        {
            entity.HasKey(e => e.ZrpGidnumer).HasName("ZRP_Primary");

            entity.ToTable("ZRNKartyPracyPrc", "CDN", tb =>
                {
                    tb.HasTrigger("ZRNKartyPracyPrc_DeleteHandler");
                    tb.HasTrigger("ZRNKartyPracyPrc_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.ZrpPrcnumer, "ZRPPracownik");

            entity.HasIndex(e => new { e.ZrpZrnnumer, e.ZrpZrnlp }, "ZRPZRN");

            entity.Property(e => e.ZrpGidnumer).HasColumnName("ZRP_GIDNumer");
            entity.Property(e => e.ZrpCalkowityCzasPracy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRP_CalkowityCzasPracy");
            entity.Property(e => e.ZrpGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRP_GIDFirma");
            entity.Property(e => e.ZrpGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_GIDLp");
            entity.Property(e => e.ZrpGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_GIDTyp");
            entity.Property(e => e.ZrpNadgodziny100)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRP_Nadgodziny100");
            entity.Property(e => e.ZrpNadgodziny50)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRP_Nadgodziny50");
            entity.Property(e => e.ZrpOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRP_Opis");
            entity.Property(e => e.ZrpPozycja)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_Pozycja");
            entity.Property(e => e.ZrpPrcfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRP_PRCFirma");
            entity.Property(e => e.ZrpPrclp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_PRCLp");
            entity.Property(e => e.ZrpPrcnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRP_PRCNumer");
            entity.Property(e => e.ZrpPrctyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_PRCTyp");
            entity.Property(e => e.ZrpSubGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_SubGIDLp");
            entity.Property(e => e.ZrpZrnfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRP_ZRNFirma");
            entity.Property(e => e.ZrpZrnlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_ZRNLp");
            entity.Property(e => e.ZrpZrnnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRP_ZRNNumer");
            entity.Property(e => e.ZrpZrntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRP_ZRNTyp");
            entity.Property(e => e.ZrpZwykleH)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRP_ZwykleH");

            entity.HasOne(d => d.ZrpZrnnumerNavigation).WithMany(p => p.ZrnkartyPracyPrcs)
                .HasForeignKey(d => d.ZrpZrnnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZRPZRN");
        });

        modelBuilder.Entity<ZrnkartyPracyUsl>(entity =>
        {
            entity.HasKey(e => e.ZruGidnumer).HasName("ZRU_Primary");

            entity.ToTable("ZRNKartyPracyUsl", "CDN", tb =>
                {
                    tb.HasTrigger("ZRNKartyPracyUsl_DeleteHandler");
                    tb.HasTrigger("ZRNKartyPracyUsl_InsertUpdateHandler");
                });

            entity.HasIndex(e => e.ZruTwrNumer, "ZRCUsluga");

            entity.HasIndex(e => e.ZruSsCid, "ZRUCzynnosc");

            entity.HasIndex(e => new { e.ZruZrnnumer, e.ZruZrnlp }, "ZRUZRN");

            entity.Property(e => e.ZruGidnumer).HasColumnName("ZRU_GIDNumer");
            entity.Property(e => e.ZruCzasRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRU_CzasRzeczywisty");
            entity.Property(e => e.ZruCzasZdefiniowany)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRU_CzasZdefiniowany");
            entity.Property(e => e.ZruCzyFakturowac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRU_CzyFakturowac");
            entity.Property(e => e.ZruGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_GIDFirma");
            entity.Property(e => e.ZruGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_GIDLp");
            entity.Property(e => e.ZruGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_GIDTyp");
            entity.Property(e => e.ZruIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZRU_Ilosc");
            entity.Property(e => e.ZruJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRU_JmFormat");
            entity.Property(e => e.ZruJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRU_JmFormatZ");
            entity.Property(e => e.ZruJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRU_JmZ");
            entity.Property(e => e.ZruKntFirmaO)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_KntFirmaO");
            entity.Property(e => e.ZruKntLpO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_KntLpO");
            entity.Property(e => e.ZruKntNumerO)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_KntNumerO");
            entity.Property(e => e.ZruKntTypO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_KntTypO");
            entity.Property(e => e.ZruKoszt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 2)")
                .HasColumnName("ZRU_Koszt");
            entity.Property(e => e.ZruKosztCalkowity)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRU_KosztCalkowity");
            entity.Property(e => e.ZruKosztJednostkowy)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRU_KosztJednostkowy");
            entity.Property(e => e.ZruKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRU_KosztRzeczywisty");
            entity.Property(e => e.ZruOpis)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRU_Opis");
            entity.Property(e => e.ZruPozycja)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_Pozycja");
            entity.Property(e => e.ZruProdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_ProdFirma");
            entity.Property(e => e.ZruProdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_ProdLp");
            entity.Property(e => e.ZruProdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_ProdNumer");
            entity.Property(e => e.ZruProdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_ProdTyp");
            entity.Property(e => e.ZruPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZRU_PrzeliczL");
            entity.Property(e => e.ZruPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZRU_PrzeliczM");
            entity.Property(e => e.ZruSsCid)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_SsCId");
            entity.Property(e => e.ZruStalaIlosc)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_StalaIlosc");
            entity.Property(e => e.ZruSubGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_SubGIDLp");
            entity.Property(e => e.ZruTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_TwrFirma");
            entity.Property(e => e.ZruTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_TwrLp");
            entity.Property(e => e.ZruTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_TwrNumer");
            entity.Property(e => e.ZruTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_TwrTyp");
            entity.Property(e => e.ZruTypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRU_TypJm");
            entity.Property(e => e.ZruTypKosztu)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRU_TypKosztu");
            entity.Property(e => e.ZruZcEfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_ZcEFirma");
            entity.Property(e => e.ZruZcElp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_ZcELp");
            entity.Property(e => e.ZruZcEnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_ZcENumer");
            entity.Property(e => e.ZruZcEtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_ZcETyp");
            entity.Property(e => e.ZruZrnfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_ZRNFirma");
            entity.Property(e => e.ZruZrnlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_ZRNLp");
            entity.Property(e => e.ZruZrnnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRU_ZRNNumer");
            entity.Property(e => e.ZruZrntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRU_ZRNTyp");

            entity.HasOne(d => d.ZruZrnnumerNavigation).WithMany(p => p.ZrnkartyPracyUsls)
                .HasForeignKey(d => d.ZruZrnnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZRUZRN");
        });

        modelBuilder.Entity<Zrnmaterialy>(entity =>
        {
            entity.HasKey(e => e.ZrmGidnumer).HasName("ZRM_Primary");

            entity.ToTable("ZRNMaterialy", "CDN", tb =>
                {
                    tb.HasTrigger("ZRNMaterialy_DeleteHandler");
                    tb.HasTrigger("ZRNMaterialy_InsertUpdateHandler");
                });

            entity.HasIndex(e => new { e.ZrmMagTyp, e.ZrmMagNumer }, "ZRMMagazyn");

            entity.HasIndex(e => e.ZrmKntNumerO, "ZRMStacja");

            entity.HasIndex(e => new { e.ZrmTwrNumer, e.ZrmTstamp }, "ZRMTowar");

            entity.HasIndex(e => new { e.ZrmZrntyp, e.ZrmZrnnumer }, "ZRMZRN");

            entity.Property(e => e.ZrmGidnumer).HasColumnName("ZRM_GIDNumer");
            entity.Property(e => e.ZrmCchfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_CCHFirma");
            entity.Property(e => e.ZrmCchlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_CCHLp");
            entity.Property(e => e.ZrmCchnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_CCHNumer");
            entity.Property(e => e.ZrmCchtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_CCHTyp");
            entity.Property(e => e.ZrmCecha)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRM_Cecha");
            entity.Property(e => e.ZrmDataDostarczeniaKlientowi)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_DataDostarczeniaKlientowi");
            entity.Property(e => e.ZrmDataPobrania)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_DataPobrania");
            entity.Property(e => e.ZrmDataZwrotu)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_DataZwrotu");
            entity.Property(e => e.ZrmGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_GIDFirma");
            entity.Property(e => e.ZrmGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_GIDLp");
            entity.Property(e => e.ZrmGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_GIDTyp");
            entity.Property(e => e.ZrmIlosc)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(11, 4)")
                .HasColumnName("ZRM_Ilosc");
            entity.Property(e => e.ZrmJmFormat)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRM_JmFormat");
            entity.Property(e => e.ZrmJmFormatZ)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRM_JmFormatZ");
            entity.Property(e => e.ZrmJmZ)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRM_JmZ");
            entity.Property(e => e.ZrmKntFirmaO)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_KntFirmaO");
            entity.Property(e => e.ZrmKntLpO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_KntLpO");
            entity.Property(e => e.ZrmKntNumerO)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_KntNumerO");
            entity.Property(e => e.ZrmKntTypO)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_KntTypO");
            entity.Property(e => e.ZrmKosztEwidencyjny)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRM_KosztEwidencyjny");
            entity.Property(e => e.ZrmKosztRzeczywisty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZRM_KosztRzeczywisty");
            entity.Property(e => e.ZrmMagFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_MagFirma");
            entity.Property(e => e.ZrmMagLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_MagLp");
            entity.Property(e => e.ZrmMagNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_MagNumer");
            entity.Property(e => e.ZrmMagTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_MagTyp");
            entity.Property(e => e.ZrmOpis)
                .HasMaxLength(1999)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRM_Opis");
            entity.Property(e => e.ZrmPozycja)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_Pozycja");
            entity.Property(e => e.ZrmProdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ProdFirma");
            entity.Property(e => e.ZrmProdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ProdLp");
            entity.Property(e => e.ZrmProdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ProdNumer");
            entity.Property(e => e.ZrmProdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ProdTyp");
            entity.Property(e => e.ZrmPrzeliczL)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZRM_PrzeliczL");
            entity.Property(e => e.ZrmPrzeliczM)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("ZRM_PrzeliczM");
            entity.Property(e => e.ZrmReNfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ReNFirma");
            entity.Property(e => e.ZrmReNlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ReNLp");
            entity.Property(e => e.ZrmReNnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ReNNumer");
            entity.Property(e => e.ZrmReNtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ReNTyp");
            entity.Property(e => e.ZrmStalaIlosc)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_StalaIlosc");
            entity.Property(e => e.ZrmTstamp)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_TStamp");
            entity.Property(e => e.ZrmTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_TwrFirma");
            entity.Property(e => e.ZrmTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_TwrLp");
            entity.Property(e => e.ZrmTwrNazwa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZRM_TwrNazwa");
            entity.Property(e => e.ZrmTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_TwrNumer");
            entity.Property(e => e.ZrmTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_TwrTyp");
            entity.Property(e => e.ZrmTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_Typ");
            entity.Property(e => e.ZrmTypJm)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRM_TypJm");
            entity.Property(e => e.ZrmZamiennik)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZRM_Zamiennik");
            entity.Property(e => e.ZrmZcEfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZcEFirma");
            entity.Property(e => e.ZrmZcElp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZcELp");
            entity.Property(e => e.ZrmZcEnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZcENumer");
            entity.Property(e => e.ZrmZceTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZceTyp");
            entity.Property(e => e.ZrmZlcTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZlcTyp");
            entity.Property(e => e.ZrmZmnFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZmnFirma");
            entity.Property(e => e.ZrmZmnLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZmnLp");
            entity.Property(e => e.ZrmZmnNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZmnNumer");
            entity.Property(e => e.ZrmZmnTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZmnTyp");
            entity.Property(e => e.ZrmZrdFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZrdFirma");
            entity.Property(e => e.ZrmZrdLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZrdLp");
            entity.Property(e => e.ZrmZrdNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZrdNumer");
            entity.Property(e => e.ZrmZrdTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZrdTyp");
            entity.Property(e => e.ZrmZrnfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZRNFirma");
            entity.Property(e => e.ZrmZrnlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZRNLp");
            entity.Property(e => e.ZrmZrnnumer)
                .HasDefaultValue(0)
                .HasColumnName("ZRM_ZRNNumer");
            entity.Property(e => e.ZrmZrntyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZRM_ZRNTyp");

            entity.HasOne(d => d.ZrmZrnnumerNavigation).WithMany(p => p.Zrnmaterialies)
                .HasForeignKey(d => d.ZrmZrnnumer)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZRMZRN");
        });

        modelBuilder.Entity<ZrnplanyElem>(entity =>
        {
            entity.HasKey(e => new { e.ZpeGidnumer, e.ZpeGidlp }).HasName("ZPE_Primary");

            entity.ToTable("ZRNPlanyElem", "CDN", tb => tb.HasTrigger("ZRNPlanyElem_InsertUpdateHandler"));

            entity.HasIndex(e => new { e.ZpeSsWid, e.ZpeGidtyp, e.ZpeGidnumer }, "ZPEWyposazenie").IsUnique();

            entity.Property(e => e.ZpeGidnumer).HasColumnName("ZPE_GIDNumer");
            entity.Property(e => e.ZpeGidlp).HasColumnName("ZPE_GIDLp");
            entity.Property(e => e.ZpeDataPrzegladu)
                .HasDefaultValue(0)
                .HasColumnName("ZPE_DataPrzegladu");
            entity.Property(e => e.ZpeGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZPE_GIDFirma");
            entity.Property(e => e.ZpeGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPE_GIDTyp");
            entity.Property(e => e.ZpeSsWid)
                .HasDefaultValue(0)
                .HasColumnName("ZPE_SsWId");

            entity.HasOne(d => d.ZpeGidnumerNavigation).WithMany(p => p.ZrnplanyElems)
                .HasForeignKey(d => d.ZpeGidnumer)
                .HasConstraintName("FK_ZPEPrimary");
        });

        modelBuilder.Entity<ZrnplanyNag>(entity =>
        {
            entity.HasKey(e => e.ZpnGidnumer).HasName("ZPN_Primary");

            entity.ToTable("ZRNPlanyNag", "CDN", tb =>
                {
                    tb.HasTrigger("ZRNPlanyNag_InsertUpdateHandler");
                    tb.HasTrigger("ZRNPlanyNag_SprawdzSesje");
                });

            entity.HasIndex(e => new { e.ZpnDataWystawienia, e.ZpnPlanMiesiac }, "ZPNData");

            entity.HasIndex(e => new { e.ZpnGidtyp, e.ZpnPlanRok, e.ZpnPlanMiesiac, e.ZpnPlanSeria, e.ZpnPlanNumer }, "ZPNNumer").IsUnique();

            entity.HasIndex(e => new { e.ZpnSobTyp, e.ZpnSobNumer }, "ZPNObiekt");

            entity.HasIndex(e => new { e.ZpnKntNumer, e.ZpnKntTyp }, "ZPNWlasciciel");

            entity.HasIndex(e => e.ZpnOpeNumerW, "ZPNWystawil");

            entity.HasIndex(e => e.ZpnOpeNumerZ, "ZPNZatwierdzil");

            entity.Property(e => e.ZpnGidnumer).HasColumnName("ZPN_GIDNumer");
            entity.Property(e => e.ZpnAktywny)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_Aktywny");
            entity.Property(e => e.ZpnDataWystawienia)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_DataWystawienia");
            entity.Property(e => e.ZpnDataZatwierdzenia)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_DataZatwierdzenia");
            entity.Property(e => e.ZpnGidfirma)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_GIDFirma");
            entity.Property(e => e.ZpnGidlp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_GIDLp");
            entity.Property(e => e.ZpnGidtyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_GIDTyp");
            entity.Property(e => e.ZpnKntFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_KntFirma");
            entity.Property(e => e.ZpnKntLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_KntLp");
            entity.Property(e => e.ZpnKntNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_KntNumer");
            entity.Property(e => e.ZpnKntTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_KntTyp");
            entity.Property(e => e.ZpnOpeFirmaW)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_OpeFirmaW");
            entity.Property(e => e.ZpnOpeFirmaZ)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_OpeFirmaZ");
            entity.Property(e => e.ZpnOpeLpW)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_OpeLpW");
            entity.Property(e => e.ZpnOpeLpZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_OpeLpZ");
            entity.Property(e => e.ZpnOpeNumerW)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_OpeNumerW");
            entity.Property(e => e.ZpnOpeNumerZ)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_OpeNumerZ");
            entity.Property(e => e.ZpnOpeTypW)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_OpeTypW");
            entity.Property(e => e.ZpnOpeTypZ)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_OpeTypZ");
            entity.Property(e => e.ZpnPlanMiesiac)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZPN_PlanMiesiac");
            entity.Property(e => e.ZpnPlanNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_PlanNumer");
            entity.Property(e => e.ZpnPlanRok)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_PlanRok");
            entity.Property(e => e.ZpnPlanSeria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZPN_PlanSeria");
            entity.Property(e => e.ZpnSobFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_SObFirma");
            entity.Property(e => e.ZpnSobLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_SObLp");
            entity.Property(e => e.ZpnSobNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_SObNumer");
            entity.Property(e => e.ZpnSobTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPN_SObTyp");
            entity.Property(e => e.ZpnStan)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_Stan");
            entity.Property(e => e.ZpnWypGrupaId)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_WypGrupaId");
            entity.Property(e => e.ZpnWypRodzajId)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_WypRodzajId");
            entity.Property(e => e.ZpnZakresDo)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_ZakresDo");
            entity.Property(e => e.ZpnZakresOd)
                .HasDefaultValue(0)
                .HasColumnName("ZPN_ZakresOd");
        });

        modelBuilder.Entity<Zrodla>(entity =>
        {
            entity.HasKey(e => new { e.ZroTrntyp, e.ZroTrnnumer, e.ZroTrnlp, e.ZroDttyp, e.ZroDtnumer, e.ZroDtlp }).HasName("ZRO_Primary");

            entity.ToTable("Zrodla", "CDN");

            entity.HasIndex(e => new { e.ZroDttyp, e.ZroDtnumer, e.ZroDtlp, e.ZroTrntyp, e.ZroTrnnumer, e.ZroTrnlp }, "ZRODT").IsUnique();

            entity.Property(e => e.ZroTrntyp).HasColumnName("ZRO_TRNTyp");
            entity.Property(e => e.ZroTrnnumer).HasColumnName("ZRO_TRNNumer");
            entity.Property(e => e.ZroTrnlp).HasColumnName("ZRO_TRNLp");
            entity.Property(e => e.ZroDttyp).HasColumnName("ZRO_DTTyp");
            entity.Property(e => e.ZroDtnumer).HasColumnName("ZRO_DTNumer");
            entity.Property(e => e.ZroDtlp).HasColumnName("ZRO_DTLp");
            entity.Property(e => e.ZroDataCentrali)
                .HasDefaultValue(0)
                .HasColumnName("ZRO_DataCentrali");
            entity.Property(e => e.ZroDataOddzialu)
                .HasDefaultValue(0)
                .HasColumnName("ZRO_DataOddzialu");
            entity.Property(e => e.ZroDtfirma).HasColumnName("ZRO_DTFirma");
            entity.Property(e => e.ZroTrnfirma).HasColumnName("ZRO_TRNFirma");
        });

        modelBuilder.Entity<ZrodlaPozycje>(entity =>
        {
            entity.HasKey(e => new { e.ZpzTrntyp, e.ZpzTrnnumer, e.ZpzTabId, e.ZpzTrnlp, e.ZpzTrnsubLp, e.ZpzPdttyp, e.ZpzPdtnumer, e.ZpzPdtlp }).HasName("ZPZ_Primary");

            entity.ToTable("ZrodlaPozycje", "CDN");

            entity.HasIndex(e => new { e.ZpzDtnumer, e.ZpzDtlp }, "ZPZDT");

            entity.HasIndex(e => new { e.ZpzPdttyp, e.ZpzPdtnumer }, "ZPZPDT");

            entity.Property(e => e.ZpzTrntyp).HasColumnName("ZPZ_TRNTyp");
            entity.Property(e => e.ZpzTrnnumer).HasColumnName("ZPZ_TRNNumer");
            entity.Property(e => e.ZpzTabId).HasColumnName("ZPZ_TabID");
            entity.Property(e => e.ZpzTrnlp).HasColumnName("ZPZ_TRNLp");
            entity.Property(e => e.ZpzTrnsubLp).HasColumnName("ZPZ_TRNSubLp");
            entity.Property(e => e.ZpzPdttyp).HasColumnName("ZPZ_PDTTyp");
            entity.Property(e => e.ZpzPdtnumer).HasColumnName("ZPZ_PDTNumer");
            entity.Property(e => e.ZpzPdtlp).HasColumnName("ZPZ_PDTLp");
            entity.Property(e => e.ZpzDtlp).HasColumnName("ZPZ_DTLp");
            entity.Property(e => e.ZpzDtnumer).HasColumnName("ZPZ_DTNumer");
            entity.Property(e => e.ZpzKcwyrazenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZPZ_KCWyrazenie");
            entity.Property(e => e.ZpzKdwyrazenie)
                .HasDefaultValue((byte)0)
                .HasColumnName("ZPZ_KDWyrazenie");
            entity.Property(e => e.ZpzKwota)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZPZ_Kwota");
            entity.Property(e => e.ZpzKwotaWal)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ZPZ_KwotaWal");
        });

        modelBuilder.Entity<ZstLiczniki>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZST_Liczniki");

            entity.Property(e => e.Arabski)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Literowy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Rzymski)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ZstPromocje>(entity =>
        {
            entity.HasKey(e => e.ZprId).HasName("ZPR_Primary");

            entity.ToTable("ZstPromocje", "CDN");

            entity.HasIndex(e => e.ZprPrmId, "ZprPrmId");

            entity.HasIndex(e => new { e.ZprTwrTyp, e.ZprTwrNumer, e.ZprPrmId }, "ZprTowar").IsUnique();

            entity.Property(e => e.ZprId).HasColumnName("ZPR_ID");
            entity.Property(e => e.ZprNazwa)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ZPR_Nazwa");
            entity.Property(e => e.ZprPrmId)
                .HasDefaultValue(0)
                .HasColumnName("ZPR_PrmID");
            entity.Property(e => e.ZprTwrFirma)
                .HasDefaultValue(0)
                .HasColumnName("ZPR_TwrFirma");
            entity.Property(e => e.ZprTwrLp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPR_TwrLp");
            entity.Property(e => e.ZprTwrNumer)
                .HasDefaultValue(0)
                .HasColumnName("ZPR_TwrNumer");
            entity.Property(e => e.ZprTwrTyp)
                .HasDefaultValue((short)0)
                .HasColumnName("ZPR_TwrTyp");

            entity.HasOne(d => d.ZprPrm).WithMany(p => p.ZstPromocjes)
                .HasForeignKey(d => d.ZprPrmId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ZprPrmId");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
